SetFactory("OpenCASCADE");

Point(1) = {0.074901, 0.738351, 0, 1.0};
Point(2) = {0.074507, 0.738415, 0, 1.0};
Point(3) = {0.073405, 0.738639, 0, 1.0};
Point(4) = {0.071728, 0.739019, 0, 1.0};
Point(5) = {0.069536, 0.739471, 0, 1.0};
Point(6) = {0.066811, 0.739957, 0, 1.0};
Point(7) = {0.063566, 0.740496, 0, 1.0};
Point(8) = {0.059851, 0.741097, 0, 1.0};
Point(9) = {0.055718, 0.741757, 0, 1.0};
Point(10) = {0.051226, 0.742469, 0, 1.0};
Point(11) = {0.046432, 0.743225, 0, 1.0};
Point(12) = {0.041402, 0.744015, 0, 1.0};
Point(13) = {0.036202, 0.744825, 0, 1.0};
Point(14) = {0.030899, 0.745642, 0, 1.0};
Point(15) = {0.025561, 0.746451, 0, 1.0};
Point(16) = {0.020257, 0.747232, 0, 1.0};
Point(17) = {0.015056, 0.747967, 0, 1.0};
Point(18) = {0.010024, 0.748633, 0, 1.0};
Point(19) = {0.005226, 0.749208, 0, 1.0};
Point(20) = {0.000724, 0.749661, 0, 1.0};
Point(21) = {-0.003421, 0.749947, 0, 1.0};
Point(22) = {-0.007195, 0.750000, 0, 1.0};
Point(23) = {-0.010624, 0.749801, 0, 1.0};
Point(24) = {-0.013721, 0.749374, 0, 1.0};
Point(25) = {-0.016478, 0.748746, 0, 1.0};
Point(26) = {-0.018883, 0.747952, 0, 1.0};
Point(27) = {-0.020922, 0.747022, 0, 1.0};
Point(28) = {-0.022580, 0.745996, 0, 1.0};
Point(29) = {-0.023839, 0.744915, 0, 1.0};
Point(30) = {-0.024672, 0.743827, 0, 1.0};
Point(31) = {-0.025000, 0.742806, 0, 1.0};
Point(32) = {-0.024764, 0.741761, 0, 1.0};
Point(33) = {-0.024031, 0.740603, 0, 1.0};
Point(34) = {-0.022874, 0.739414, 0, 1.0};
Point(35) = {-0.021314, 0.738244, 0, 1.0};
Point(36) = {-0.019365, 0.737136, 0, 1.0};
Point(37) = {-0.017041, 0.736131, 0, 1.0};
Point(38) = {-0.014351, 0.735260, 0, 1.0};
Point(39) = {-0.011304, 0.734560, 0, 1.0};
Point(40) = {-0.007906, 0.734056, 0, 1.0};
Point(41) = {-0.004143, 0.733773, 0, 1.0};
Point(42) = {0.000012, 0.733689, 0, 1.0};
Point(43) = {0.004536, 0.733739, 0, 1.0};
Point(44) = {0.009367, 0.733884, 0, 1.0};
Point(45) = {0.014437, 0.734100, 0, 1.0};
Point(46) = {0.019683, 0.734369, 0, 1.0};
Point(47) = {0.025035, 0.734675, 0, 1.0};
Point(48) = {0.030424, 0.735005, 0, 1.0};
Point(49) = {0.035779, 0.735347, 0, 1.0};
Point(50) = {0.041031, 0.735691, 0, 1.0};
Point(51) = {0.046111, 0.736030, 0, 1.0};
Point(52) = {0.050953, 0.736357, 0, 1.0};
Point(53) = {0.055491, 0.736666, 0, 1.0};
Point(54) = {0.059666, 0.736955, 0, 1.0};
Point(55) = {0.063420, 0.737223, 0, 1.0};
Point(56) = {0.066700, 0.737471, 0, 1.0};
Point(57) = {0.069458, 0.737713, 0, 1.0};
Point(58) = {0.071681, 0.737968, 0, 1.0};
Point(59) = {0.073385, 0.738197, 0, 1.0};
Point(60) = {0.074503, 0.738321, 0, 1.0};
Point(61) = {-0.074901, -0.738351, 0, 1.0};
Point(62) = {-0.074507, -0.738415, 0, 1.0};
Point(63) = {-0.073405, -0.738639, 0, 1.0};
Point(64) = {-0.071728, -0.739019, 0, 1.0};
Point(65) = {-0.069536, -0.739471, 0, 1.0};
Point(66) = {-0.066811, -0.739957, 0, 1.0};
Point(67) = {-0.063566, -0.740496, 0, 1.0};
Point(68) = {-0.059851, -0.741097, 0, 1.0};
Point(69) = {-0.055718, -0.741757, 0, 1.0};
Point(70) = {-0.051226, -0.742469, 0, 1.0};
Point(71) = {-0.046432, -0.743225, 0, 1.0};
Point(72) = {-0.041402, -0.744015, 0, 1.0};
Point(73) = {-0.036202, -0.744825, 0, 1.0};
Point(74) = {-0.030899, -0.745642, 0, 1.0};
Point(75) = {-0.025561, -0.746451, 0, 1.0};
Point(76) = {-0.020257, -0.747232, 0, 1.0};
Point(77) = {-0.015056, -0.747967, 0, 1.0};
Point(78) = {-0.010024, -0.748633, 0, 1.0};
Point(79) = {-0.005226, -0.749208, 0, 1.0};
Point(80) = {-0.000724, -0.749661, 0, 1.0};
Point(81) = {0.003421, -0.749947, 0, 1.0};
Point(82) = {0.007195, -0.750000, 0, 1.0};
Point(83) = {0.010624, -0.749801, 0, 1.0};
Point(84) = {0.013721, -0.749374, 0, 1.0};
Point(85) = {0.016478, -0.748746, 0, 1.0};
Point(86) = {0.018883, -0.747952, 0, 1.0};
Point(87) = {0.020922, -0.747022, 0, 1.0};
Point(88) = {0.022580, -0.745996, 0, 1.0};
Point(89) = {0.023839, -0.744915, 0, 1.0};
Point(90) = {0.024672, -0.743827, 0, 1.0};
Point(91) = {0.025000, -0.742806, 0, 1.0};
Point(92) = {0.024764, -0.741761, 0, 1.0};
Point(93) = {0.024031, -0.740603, 0, 1.0};
Point(94) = {0.022874, -0.739414, 0, 1.0};
Point(95) = {0.021314, -0.738244, 0, 1.0};
Point(96) = {0.019365, -0.737136, 0, 1.0};
Point(97) = {0.017041, -0.736131, 0, 1.0};
Point(98) = {0.014351, -0.735260, 0, 1.0};
Point(99) = {0.011304, -0.734560, 0, 1.0};
Point(100) = {0.007906, -0.734056, 0, 1.0};
Point(101) = {0.004143, -0.733773, 0, 1.0};
Point(102) = {-0.000012, -0.733689, 0, 1.0};
Point(103) = {-0.004536, -0.733739, 0, 1.0};
Point(104) = {-0.009367, -0.733884, 0, 1.0};
Point(105) = {-0.014437, -0.734100, 0, 1.0};
Point(106) = {-0.019683, -0.734369, 0, 1.0};
Point(107) = {-0.025035, -0.734675, 0, 1.0};
Point(108) = {-0.030424, -0.735005, 0, 1.0};
Point(109) = {-0.035779, -0.735347, 0, 1.0};
Point(110) = {-0.041031, -0.735691, 0, 1.0};
Point(111) = {-0.046111, -0.736030, 0, 1.0};
Point(112) = {-0.050953, -0.736357, 0, 1.0};
Point(113) = {-0.055491, -0.736666, 0, 1.0};
Point(114) = {-0.059666, -0.736955, 0, 1.0};
Point(115) = {-0.063420, -0.737223, 0, 1.0};
Point(116) = {-0.066700, -0.737471, 0, 1.0};
Point(117) = {-0.069458, -0.737713, 0, 1.0};
Point(118) = {-0.071681, -0.737968, 0, 1.0};
Point(119) = {-0.073385, -0.738197, 0, 1.0};
Point(120) = {-0.074503, -0.738321, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html