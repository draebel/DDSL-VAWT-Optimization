SetFactory("OpenCASCADE");

Point(1) = {0.074926, 0.732526, 0, 1.0};
Point(2) = {0.074335, 0.732623, 0, 1.0};
Point(3) = {0.072682, 0.732958, 0, 1.0};
Point(4) = {0.070167, 0.733528, 0, 1.0};
Point(5) = {0.066879, 0.734206, 0, 1.0};
Point(6) = {0.062791, 0.734935, 0, 1.0};
Point(7) = {0.057924, 0.735744, 0, 1.0};
Point(8) = {0.052351, 0.736645, 0, 1.0};
Point(9) = {0.046152, 0.737635, 0, 1.0};
Point(10) = {0.039413, 0.738703, 0, 1.0};
Point(11) = {0.032222, 0.739837, 0, 1.0};
Point(12) = {0.024677, 0.741022, 0, 1.0};
Point(13) = {0.016877, 0.742238, 0, 1.0};
Point(14) = {0.008923, 0.743464, 0, 1.0};
Point(15) = {0.000915, 0.744677, 0, 1.0};
Point(16) = {-0.007040, 0.745848, 0, 1.0};
Point(17) = {-0.014842, 0.746950, 0, 1.0};
Point(18) = {-0.022389, 0.747950, 0, 1.0};
Point(19) = {-0.029586, 0.748812, 0, 1.0};
Point(20) = {-0.036340, 0.749491, 0, 1.0};
Point(21) = {-0.042558, 0.749920, 0, 1.0};
Point(22) = {-0.048218, 0.750000, 0, 1.0};
Point(23) = {-0.053362, 0.749701, 0, 1.0};
Point(24) = {-0.058007, 0.749061, 0, 1.0};
Point(25) = {-0.062142, 0.748120, 0, 1.0};
Point(26) = {-0.065750, 0.746928, 0, 1.0};
Point(27) = {-0.068809, 0.745532, 0, 1.0};
Point(28) = {-0.071296, 0.743993, 0, 1.0};
Point(29) = {-0.073184, 0.742372, 0, 1.0};
Point(30) = {-0.074434, 0.740740, 0, 1.0};
Point(31) = {-0.074926, 0.739209, 0, 1.0};
Point(32) = {-0.074572, 0.737641, 0, 1.0};
Point(33) = {-0.073472, 0.735904, 0, 1.0};
Point(34) = {-0.071737, 0.734121, 0, 1.0};
Point(35) = {-0.069396, 0.732367, 0, 1.0};
Point(36) = {-0.066473, 0.730705, 0, 1.0};
Point(37) = {-0.062986, 0.729196, 0, 1.0};
Point(38) = {-0.058951, 0.727890, 0, 1.0};
Point(39) = {-0.054381, 0.726840, 0, 1.0};
Point(40) = {-0.049284, 0.726084, 0, 1.0};
Point(41) = {-0.043640, 0.725659, 0, 1.0};
Point(42) = {-0.037408, 0.725533, 0, 1.0};
Point(43) = {-0.030621, 0.725609, 0, 1.0};
Point(44) = {-0.023376, 0.725826, 0, 1.0};
Point(45) = {-0.015770, 0.726151, 0, 1.0};
Point(46) = {-0.007900, 0.726553, 0, 1.0};
Point(47) = {0.000128, 0.727012, 0, 1.0};
Point(48) = {0.008211, 0.727508, 0, 1.0};
Point(49) = {0.016243, 0.728020, 0, 1.0};
Point(50) = {0.024120, 0.728537, 0, 1.0};
Point(51) = {0.031741, 0.729045, 0, 1.0};
Point(52) = {0.039004, 0.729535, 0, 1.0};
Point(53) = {0.045812, 0.729999, 0, 1.0};
Point(54) = {0.052074, 0.730433, 0, 1.0};
Point(55) = {0.057705, 0.730835, 0, 1.0};
Point(56) = {0.062625, 0.731207, 0, 1.0};
Point(57) = {0.066761, 0.731569, 0, 1.0};
Point(58) = {0.070097, 0.731952, 0, 1.0};
Point(59) = {0.072652, 0.732296, 0, 1.0};
Point(60) = {0.074329, 0.732482, 0, 1.0};
Point(61) = {-0.074926, -0.732526, 0, 1.0};
Point(62) = {-0.074335, -0.732623, 0, 1.0};
Point(63) = {-0.072682, -0.732958, 0, 1.0};
Point(64) = {-0.070167, -0.733528, 0, 1.0};
Point(65) = {-0.066879, -0.734206, 0, 1.0};
Point(66) = {-0.062791, -0.734935, 0, 1.0};
Point(67) = {-0.057924, -0.735744, 0, 1.0};
Point(68) = {-0.052351, -0.736645, 0, 1.0};
Point(69) = {-0.046152, -0.737635, 0, 1.0};
Point(70) = {-0.039413, -0.738703, 0, 1.0};
Point(71) = {-0.032222, -0.739837, 0, 1.0};
Point(72) = {-0.024677, -0.741022, 0, 1.0};
Point(73) = {-0.016877, -0.742238, 0, 1.0};
Point(74) = {-0.008923, -0.743464, 0, 1.0};
Point(75) = {-0.000915, -0.744677, 0, 1.0};
Point(76) = {0.007040, -0.745848, 0, 1.0};
Point(77) = {0.014842, -0.746950, 0, 1.0};
Point(78) = {0.022389, -0.747950, 0, 1.0};
Point(79) = {0.029586, -0.748812, 0, 1.0};
Point(80) = {0.036340, -0.749491, 0, 1.0};
Point(81) = {0.042558, -0.749920, 0, 1.0};
Point(82) = {0.048218, -0.750000, 0, 1.0};
Point(83) = {0.053362, -0.749701, 0, 1.0};
Point(84) = {0.058007, -0.749061, 0, 1.0};
Point(85) = {0.062142, -0.748120, 0, 1.0};
Point(86) = {0.065750, -0.746928, 0, 1.0};
Point(87) = {0.068809, -0.745532, 0, 1.0};
Point(88) = {0.071296, -0.743993, 0, 1.0};
Point(89) = {0.073184, -0.742372, 0, 1.0};
Point(90) = {0.074434, -0.740740, 0, 1.0};
Point(91) = {0.074926, -0.739209, 0, 1.0};
Point(92) = {0.074572, -0.737641, 0, 1.0};
Point(93) = {0.073472, -0.735904, 0, 1.0};
Point(94) = {0.071737, -0.734121, 0, 1.0};
Point(95) = {0.069396, -0.732367, 0, 1.0};
Point(96) = {0.066473, -0.730705, 0, 1.0};
Point(97) = {0.062986, -0.729196, 0, 1.0};
Point(98) = {0.058951, -0.727890, 0, 1.0};
Point(99) = {0.054381, -0.726840, 0, 1.0};
Point(100) = {0.049284, -0.726084, 0, 1.0};
Point(101) = {0.043640, -0.725659, 0, 1.0};
Point(102) = {0.037408, -0.725533, 0, 1.0};
Point(103) = {0.030621, -0.725609, 0, 1.0};
Point(104) = {0.023376, -0.725826, 0, 1.0};
Point(105) = {0.015770, -0.726151, 0, 1.0};
Point(106) = {0.007900, -0.726553, 0, 1.0};
Point(107) = {-0.000128, -0.727012, 0, 1.0};
Point(108) = {-0.008211, -0.727508, 0, 1.0};
Point(109) = {-0.016243, -0.728020, 0, 1.0};
Point(110) = {-0.024120, -0.728537, 0, 1.0};
Point(111) = {-0.031741, -0.729045, 0, 1.0};
Point(112) = {-0.039004, -0.729535, 0, 1.0};
Point(113) = {-0.045812, -0.729999, 0, 1.0};
Point(114) = {-0.052074, -0.730433, 0, 1.0};
Point(115) = {-0.057705, -0.730835, 0, 1.0};
Point(116) = {-0.062625, -0.731207, 0, 1.0};
Point(117) = {-0.066761, -0.731569, 0, 1.0};
Point(118) = {-0.070097, -0.731952, 0, 1.0};
Point(119) = {-0.072652, -0.732296, 0, 1.0};
Point(120) = {-0.074329, -0.732482, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html