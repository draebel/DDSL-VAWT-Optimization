SetFactory("OpenCASCADE");

Point(1) = {0.149801, 0.726701, 0, 1.0};
Point(2) = {0.149014, 0.726831, 0, 1.0};
Point(3) = {0.146810, 0.727277, 0, 1.0};
Point(4) = {0.143457, 0.728037, 0, 1.0};
Point(5) = {0.139073, 0.728942, 0, 1.0};
Point(6) = {0.133622, 0.729913, 0, 1.0};
Point(7) = {0.127132, 0.730992, 0, 1.0};
Point(8) = {0.119702, 0.732194, 0, 1.0};
Point(9) = {0.111437, 0.733514, 0, 1.0};
Point(10) = {0.102451, 0.734937, 0, 1.0};
Point(11) = {0.092863, 0.736450, 0, 1.0};
Point(12) = {0.082804, 0.738030, 0, 1.0};
Point(13) = {0.072403, 0.739651, 0, 1.0};
Point(14) = {0.061798, 0.741285, 0, 1.0};
Point(15) = {0.051121, 0.742902, 0, 1.0};
Point(16) = {0.040514, 0.744464, 0, 1.0};
Point(17) = {0.030111, 0.745933, 0, 1.0};
Point(18) = {0.020049, 0.747267, 0, 1.0};
Point(19) = {0.010452, 0.748416, 0, 1.0};
Point(20) = {0.001448, 0.749322, 0, 1.0};
Point(21) = {-0.006843, 0.749894, 0, 1.0};
Point(22) = {-0.014390, 0.750000, 0, 1.0};
Point(23) = {-0.021248, 0.749601, 0, 1.0};
Point(24) = {-0.027442, 0.748748, 0, 1.0};
Point(25) = {-0.032956, 0.747493, 0, 1.0};
Point(26) = {-0.037765, 0.745903, 0, 1.0};
Point(27) = {-0.041844, 0.744043, 0, 1.0};
Point(28) = {-0.045161, 0.741991, 0, 1.0};
Point(29) = {-0.047678, 0.739829, 0, 1.0};
Point(30) = {-0.049344, 0.737653, 0, 1.0};
Point(31) = {-0.050000, 0.735612, 0, 1.0};
Point(32) = {-0.049529, 0.733521, 0, 1.0};
Point(33) = {-0.048062, 0.731206, 0, 1.0};
Point(34) = {-0.045748, 0.728828, 0, 1.0};
Point(35) = {-0.042627, 0.726489, 0, 1.0};
Point(36) = {-0.038730, 0.724273, 0, 1.0};
Point(37) = {-0.034081, 0.722262, 0, 1.0};
Point(38) = {-0.028701, 0.720520, 0, 1.0};
Point(39) = {-0.022608, 0.719119, 0, 1.0};
Point(40) = {-0.015812, 0.718112, 0, 1.0};
Point(41) = {-0.008286, 0.717546, 0, 1.0};
Point(42) = {0.000023, 0.717377, 0, 1.0};
Point(43) = {0.009073, 0.717478, 0, 1.0};
Point(44) = {0.018733, 0.717768, 0, 1.0};
Point(45) = {0.028875, 0.718201, 0, 1.0};
Point(46) = {0.039367, 0.718738, 0, 1.0};
Point(47) = {0.050071, 0.719350, 0, 1.0};
Point(48) = {0.060849, 0.720010, 0, 1.0};
Point(49) = {0.071558, 0.720694, 0, 1.0};
Point(50) = {0.082061, 0.721382, 0, 1.0};
Point(51) = {0.092221, 0.722060, 0, 1.0};
Point(52) = {0.101906, 0.722713, 0, 1.0};
Point(53) = {0.110983, 0.723332, 0, 1.0};
Point(54) = {0.119333, 0.723910, 0, 1.0};
Point(55) = {0.126840, 0.724446, 0, 1.0};
Point(56) = {0.133401, 0.724942, 0, 1.0};
Point(57) = {0.138916, 0.725425, 0, 1.0};
Point(58) = {0.143363, 0.725936, 0, 1.0};
Point(59) = {0.146771, 0.726394, 0, 1.0};
Point(60) = {0.149006, 0.726643, 0, 1.0};
Point(61) = {-0.149801, -0.726701, 0, 1.0};
Point(62) = {-0.149014, -0.726831, 0, 1.0};
Point(63) = {-0.146810, -0.727277, 0, 1.0};
Point(64) = {-0.143457, -0.728037, 0, 1.0};
Point(65) = {-0.139073, -0.728942, 0, 1.0};
Point(66) = {-0.133622, -0.729913, 0, 1.0};
Point(67) = {-0.127132, -0.730992, 0, 1.0};
Point(68) = {-0.119702, -0.732194, 0, 1.0};
Point(69) = {-0.111437, -0.733514, 0, 1.0};
Point(70) = {-0.102451, -0.734937, 0, 1.0};
Point(71) = {-0.092863, -0.736450, 0, 1.0};
Point(72) = {-0.082804, -0.738030, 0, 1.0};
Point(73) = {-0.072403, -0.739651, 0, 1.0};
Point(74) = {-0.061798, -0.741285, 0, 1.0};
Point(75) = {-0.051121, -0.742902, 0, 1.0};
Point(76) = {-0.040514, -0.744464, 0, 1.0};
Point(77) = {-0.030111, -0.745933, 0, 1.0};
Point(78) = {-0.020049, -0.747267, 0, 1.0};
Point(79) = {-0.010452, -0.748416, 0, 1.0};
Point(80) = {-0.001448, -0.749322, 0, 1.0};
Point(81) = {0.006843, -0.749894, 0, 1.0};
Point(82) = {0.014390, -0.750000, 0, 1.0};
Point(83) = {0.021248, -0.749601, 0, 1.0};
Point(84) = {0.027442, -0.748748, 0, 1.0};
Point(85) = {0.032956, -0.747493, 0, 1.0};
Point(86) = {0.037765, -0.745903, 0, 1.0};
Point(87) = {0.041844, -0.744043, 0, 1.0};
Point(88) = {0.045161, -0.741991, 0, 1.0};
Point(89) = {0.047678, -0.739829, 0, 1.0};
Point(90) = {0.049344, -0.737653, 0, 1.0};
Point(91) = {0.050000, -0.735612, 0, 1.0};
Point(92) = {0.049529, -0.733521, 0, 1.0};
Point(93) = {0.048062, -0.731206, 0, 1.0};
Point(94) = {0.045748, -0.728828, 0, 1.0};
Point(95) = {0.042627, -0.726489, 0, 1.0};
Point(96) = {0.038730, -0.724273, 0, 1.0};
Point(97) = {0.034081, -0.722262, 0, 1.0};
Point(98) = {0.028701, -0.720520, 0, 1.0};
Point(99) = {0.022608, -0.719119, 0, 1.0};
Point(100) = {0.015812, -0.718112, 0, 1.0};
Point(101) = {0.008286, -0.717546, 0, 1.0};
Point(102) = {-0.000023, -0.717377, 0, 1.0};
Point(103) = {-0.009073, -0.717478, 0, 1.0};
Point(104) = {-0.018733, -0.717768, 0, 1.0};
Point(105) = {-0.028875, -0.718201, 0, 1.0};
Point(106) = {-0.039367, -0.718738, 0, 1.0};
Point(107) = {-0.050071, -0.719350, 0, 1.0};
Point(108) = {-0.060849, -0.720010, 0, 1.0};
Point(109) = {-0.071558, -0.720694, 0, 1.0};
Point(110) = {-0.082061, -0.721382, 0, 1.0};
Point(111) = {-0.092221, -0.722060, 0, 1.0};
Point(112) = {-0.101906, -0.722713, 0, 1.0};
Point(113) = {-0.110983, -0.723332, 0, 1.0};
Point(114) = {-0.119333, -0.723910, 0, 1.0};
Point(115) = {-0.126840, -0.724446, 0, 1.0};
Point(116) = {-0.133401, -0.724942, 0, 1.0};
Point(117) = {-0.138916, -0.725425, 0, 1.0};
Point(118) = {-0.143363, -0.725936, 0, 1.0};
Point(119) = {-0.146771, -0.726394, 0, 1.0};
Point(120) = {-0.149006, -0.726643, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html