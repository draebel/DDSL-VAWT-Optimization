SetFactory("OpenCASCADE");

Point(1) = {0.074989, 0.732519, 0, 1.0};
Point(2) = {0.074443, 0.732628, 0, 1.0};
Point(3) = {0.072890, 0.732991, 0, 1.0};
Point(4) = {0.070491, 0.733585, 0, 1.0};
Point(5) = {0.067313, 0.734300, 0, 1.0};
Point(6) = {0.063329, 0.735093, 0, 1.0};
Point(7) = {0.058562, 0.735997, 0, 1.0};
Point(8) = {0.053097, 0.737032, 0, 1.0};
Point(9) = {0.047024, 0.738193, 0, 1.0};
Point(10) = {0.040442, 0.739464, 0, 1.0};
Point(11) = {0.033454, 0.740820, 0, 1.0};
Point(12) = {0.026168, 0.742229, 0, 1.0};
Point(13) = {0.018684, 0.743648, 0, 1.0};
Point(14) = {0.011101, 0.745033, 0, 1.0};
Point(15) = {0.003512, 0.746335, 0, 1.0};
Point(16) = {-0.003997, 0.747506, 0, 1.0};
Point(17) = {-0.011350, 0.748496, 0, 1.0};
Point(18) = {-0.018481, 0.749267, 0, 1.0};
Point(19) = {-0.025326, 0.749778, 0, 1.0};
Point(20) = {-0.031835, 0.750000, 0, 1.0};
Point(21) = {-0.037960, 0.749913, 0, 1.0};
Point(22) = {-0.043663, 0.749496, 0, 1.0};
Point(23) = {-0.048922, 0.748734, 0, 1.0};
Point(24) = {-0.053723, 0.747639, 0, 1.0};
Point(25) = {-0.058052, 0.746221, 0, 1.0};
Point(26) = {-0.061924, 0.744508, 0, 1.0};
Point(27) = {-0.065340, 0.742571, 0, 1.0};
Point(28) = {-0.068271, 0.740484, 0, 1.0};
Point(29) = {-0.070691, 0.738298, 0, 1.0};
Point(30) = {-0.072583, 0.736076, 0, 1.0};
Point(31) = {-0.073930, 0.733873, 0, 1.0};
Point(32) = {-0.074732, 0.731762, 0, 1.0};
Point(33) = {-0.074989, 0.729946, 0, 1.0};
Point(34) = {-0.074594, 0.728296, 0, 1.0};
Point(35) = {-0.073401, 0.727052, 0, 1.0};
Point(36) = {-0.071435, 0.725972, 0, 1.0};
Point(37) = {-0.068780, 0.725155, 0, 1.0};
Point(38) = {-0.065417, 0.724659, 0, 1.0};
Point(39) = {-0.061313, 0.724516, 0, 1.0};
Point(40) = {-0.056408, 0.724693, 0, 1.0};
Point(41) = {-0.050711, 0.725089, 0, 1.0};
Point(42) = {-0.044305, 0.725629, 0, 1.0};
Point(43) = {-0.037280, 0.726271, 0, 1.0};
Point(44) = {-0.029731, 0.726976, 0, 1.0};
Point(45) = {-0.021761, 0.727716, 0, 1.0};
Point(46) = {-0.013474, 0.728457, 0, 1.0};
Point(47) = {-0.004985, 0.729183, 0, 1.0};
Point(48) = {0.003597, 0.729868, 0, 1.0};
Point(49) = {0.012154, 0.730498, 0, 1.0};
Point(50) = {0.020571, 0.731060, 0, 1.0};
Point(51) = {0.028737, 0.731542, 0, 1.0};
Point(52) = {0.036539, 0.731938, 0, 1.0};
Point(53) = {0.043870, 0.732246, 0, 1.0};
Point(54) = {0.050629, 0.732468, 0, 1.0};
Point(55) = {0.056718, 0.732607, 0, 1.0};
Point(56) = {0.062048, 0.732674, 0, 1.0};
Point(57) = {0.066541, 0.732685, 0, 1.0};
Point(58) = {0.070136, 0.732665, 0, 1.0};
Point(59) = {0.072788, 0.732619, 0, 1.0};
Point(60) = {0.074430, 0.732554, 0, 1.0};
Point(61) = {-0.074989, -0.732519, 0, 1.0};
Point(62) = {-0.074443, -0.732628, 0, 1.0};
Point(63) = {-0.072890, -0.732991, 0, 1.0};
Point(64) = {-0.070491, -0.733585, 0, 1.0};
Point(65) = {-0.067313, -0.734300, 0, 1.0};
Point(66) = {-0.063329, -0.735093, 0, 1.0};
Point(67) = {-0.058562, -0.735997, 0, 1.0};
Point(68) = {-0.053097, -0.737032, 0, 1.0};
Point(69) = {-0.047024, -0.738193, 0, 1.0};
Point(70) = {-0.040442, -0.739464, 0, 1.0};
Point(71) = {-0.033454, -0.740820, 0, 1.0};
Point(72) = {-0.026168, -0.742229, 0, 1.0};
Point(73) = {-0.018684, -0.743648, 0, 1.0};
Point(74) = {-0.011101, -0.745033, 0, 1.0};
Point(75) = {-0.003512, -0.746335, 0, 1.0};
Point(76) = {0.003997, -0.747506, 0, 1.0};
Point(77) = {0.011350, -0.748496, 0, 1.0};
Point(78) = {0.018481, -0.749267, 0, 1.0};
Point(79) = {0.025326, -0.749778, 0, 1.0};
Point(80) = {0.031835, -0.750000, 0, 1.0};
Point(81) = {0.037960, -0.749913, 0, 1.0};
Point(82) = {0.043663, -0.749496, 0, 1.0};
Point(83) = {0.048922, -0.748734, 0, 1.0};
Point(84) = {0.053723, -0.747639, 0, 1.0};
Point(85) = {0.058052, -0.746221, 0, 1.0};
Point(86) = {0.061924, -0.744508, 0, 1.0};
Point(87) = {0.065340, -0.742571, 0, 1.0};
Point(88) = {0.068271, -0.740484, 0, 1.0};
Point(89) = {0.070691, -0.738298, 0, 1.0};
Point(90) = {0.072583, -0.736076, 0, 1.0};
Point(91) = {0.073930, -0.733873, 0, 1.0};
Point(92) = {0.074732, -0.731762, 0, 1.0};
Point(93) = {0.074989, -0.729946, 0, 1.0};
Point(94) = {0.074594, -0.728296, 0, 1.0};
Point(95) = {0.073401, -0.727052, 0, 1.0};
Point(96) = {0.071435, -0.725972, 0, 1.0};
Point(97) = {0.068780, -0.725155, 0, 1.0};
Point(98) = {0.065417, -0.724659, 0, 1.0};
Point(99) = {0.061313, -0.724516, 0, 1.0};
Point(100) = {0.056408, -0.724693, 0, 1.0};
Point(101) = {0.050711, -0.725089, 0, 1.0};
Point(102) = {0.044305, -0.725629, 0, 1.0};
Point(103) = {0.037280, -0.726271, 0, 1.0};
Point(104) = {0.029731, -0.726976, 0, 1.0};
Point(105) = {0.021761, -0.727716, 0, 1.0};
Point(106) = {0.013474, -0.728457, 0, 1.0};
Point(107) = {0.004985, -0.729183, 0, 1.0};
Point(108) = {-0.003597, -0.729868, 0, 1.0};
Point(109) = {-0.012154, -0.730498, 0, 1.0};
Point(110) = {-0.020571, -0.731060, 0, 1.0};
Point(111) = {-0.028737, -0.731542, 0, 1.0};
Point(112) = {-0.036539, -0.731938, 0, 1.0};
Point(113) = {-0.043870, -0.732246, 0, 1.0};
Point(114) = {-0.050629, -0.732468, 0, 1.0};
Point(115) = {-0.056718, -0.732607, 0, 1.0};
Point(116) = {-0.062048, -0.732674, 0, 1.0};
Point(117) = {-0.066541, -0.732685, 0, 1.0};
Point(118) = {-0.070136, -0.732665, 0, 1.0};
Point(119) = {-0.072788, -0.732619, 0, 1.0};
Point(120) = {-0.074430, -0.732554, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html