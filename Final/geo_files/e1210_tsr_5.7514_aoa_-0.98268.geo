SetFactory("OpenCASCADE");

Point(1) = {0.074985, 0.738346, 0, 1.0};
Point(2) = {0.074621, 0.738419, 0, 1.0};
Point(3) = {0.073586, 0.738661, 0, 1.0};
Point(4) = {0.071987, 0.739057, 0, 1.0};
Point(5) = {0.069868, 0.739534, 0, 1.0};
Point(6) = {0.067212, 0.740062, 0, 1.0};
Point(7) = {0.064034, 0.740665, 0, 1.0};
Point(8) = {0.060391, 0.741355, 0, 1.0};
Point(9) = {0.056342, 0.742129, 0, 1.0};
Point(10) = {0.051954, 0.742976, 0, 1.0};
Point(11) = {0.047296, 0.743880, 0, 1.0};
Point(12) = {0.042438, 0.744819, 0, 1.0};
Point(13) = {0.037449, 0.745765, 0, 1.0};
Point(14) = {0.032393, 0.746689, 0, 1.0};
Point(15) = {0.027334, 0.747557, 0, 1.0};
Point(16) = {0.022328, 0.748337, 0, 1.0};
Point(17) = {0.017426, 0.748997, 0, 1.0};
Point(18) = {0.012672, 0.749511, 0, 1.0};
Point(19) = {0.008109, 0.749852, 0, 1.0};
Point(20) = {0.003770, 0.750000, 0, 1.0};
Point(21) = {-0.000314, 0.749942, 0, 1.0};
Point(22) = {-0.004116, 0.749664, 0, 1.0};
Point(23) = {-0.007622, 0.749156, 0, 1.0};
Point(24) = {-0.010823, 0.748426, 0, 1.0};
Point(25) = {-0.013709, 0.747481, 0, 1.0};
Point(26) = {-0.016290, 0.746339, 0, 1.0};
Point(27) = {-0.018567, 0.745047, 0, 1.0};
Point(28) = {-0.020522, 0.743656, 0, 1.0};
Point(29) = {-0.022135, 0.742199, 0, 1.0};
Point(30) = {-0.023396, 0.740717, 0, 1.0};
Point(31) = {-0.024294, 0.739249, 0, 1.0};
Point(32) = {-0.024829, 0.737841, 0, 1.0};
Point(33) = {-0.025000, 0.736631, 0, 1.0};
Point(34) = {-0.024736, 0.735530, 0, 1.0};
Point(35) = {-0.023941, 0.734701, 0, 1.0};
Point(36) = {-0.022631, 0.733981, 0, 1.0};
Point(37) = {-0.020861, 0.733436, 0, 1.0};
Point(38) = {-0.018619, 0.733106, 0, 1.0};
Point(39) = {-0.015883, 0.733011, 0, 1.0};
Point(40) = {-0.012613, 0.733128, 0, 1.0};
Point(41) = {-0.008814, 0.733392, 0, 1.0};
Point(42) = {-0.004544, 0.733753, 0, 1.0};
Point(43) = {0.000139, 0.734181, 0, 1.0};
Point(44) = {0.005172, 0.734651, 0, 1.0};
Point(45) = {0.010486, 0.735144, 0, 1.0};
Point(46) = {0.016010, 0.735638, 0, 1.0};
Point(47) = {0.021669, 0.736122, 0, 1.0};
Point(48) = {0.027390, 0.736579, 0, 1.0};
Point(49) = {0.033095, 0.736998, 0, 1.0};
Point(50) = {0.038707, 0.737373, 0, 1.0};
Point(51) = {0.044151, 0.737695, 0, 1.0};
Point(52) = {0.049352, 0.737959, 0, 1.0};
Point(53) = {0.054239, 0.738164, 0, 1.0};
Point(54) = {0.058745, 0.738312, 0, 1.0};
Point(55) = {0.062804, 0.738405, 0, 1.0};
Point(56) = {0.066358, 0.738449, 0, 1.0};
Point(57) = {0.069354, 0.738457, 0, 1.0};
Point(58) = {0.071750, 0.738444, 0, 1.0};
Point(59) = {0.073518, 0.738413, 0, 1.0};
Point(60) = {0.074613, 0.738369, 0, 1.0};
Point(61) = {-0.074985, -0.738346, 0, 1.0};
Point(62) = {-0.074621, -0.738419, 0, 1.0};
Point(63) = {-0.073586, -0.738661, 0, 1.0};
Point(64) = {-0.071987, -0.739057, 0, 1.0};
Point(65) = {-0.069868, -0.739534, 0, 1.0};
Point(66) = {-0.067212, -0.740062, 0, 1.0};
Point(67) = {-0.064034, -0.740665, 0, 1.0};
Point(68) = {-0.060391, -0.741355, 0, 1.0};
Point(69) = {-0.056342, -0.742129, 0, 1.0};
Point(70) = {-0.051954, -0.742976, 0, 1.0};
Point(71) = {-0.047296, -0.743880, 0, 1.0};
Point(72) = {-0.042438, -0.744819, 0, 1.0};
Point(73) = {-0.037449, -0.745765, 0, 1.0};
Point(74) = {-0.032393, -0.746689, 0, 1.0};
Point(75) = {-0.027334, -0.747557, 0, 1.0};
Point(76) = {-0.022328, -0.748337, 0, 1.0};
Point(77) = {-0.017426, -0.748997, 0, 1.0};
Point(78) = {-0.012672, -0.749511, 0, 1.0};
Point(79) = {-0.008109, -0.749852, 0, 1.0};
Point(80) = {-0.003770, -0.750000, 0, 1.0};
Point(81) = {0.000314, -0.749942, 0, 1.0};
Point(82) = {0.004116, -0.749664, 0, 1.0};
Point(83) = {0.007622, -0.749156, 0, 1.0};
Point(84) = {0.010823, -0.748426, 0, 1.0};
Point(85) = {0.013709, -0.747481, 0, 1.0};
Point(86) = {0.016290, -0.746339, 0, 1.0};
Point(87) = {0.018567, -0.745047, 0, 1.0};
Point(88) = {0.020522, -0.743656, 0, 1.0};
Point(89) = {0.022135, -0.742199, 0, 1.0};
Point(90) = {0.023396, -0.740717, 0, 1.0};
Point(91) = {0.024294, -0.739249, 0, 1.0};
Point(92) = {0.024829, -0.737841, 0, 1.0};
Point(93) = {0.025000, -0.736631, 0, 1.0};
Point(94) = {0.024736, -0.735530, 0, 1.0};
Point(95) = {0.023941, -0.734701, 0, 1.0};
Point(96) = {0.022631, -0.733981, 0, 1.0};
Point(97) = {0.020861, -0.733436, 0, 1.0};
Point(98) = {0.018619, -0.733106, 0, 1.0};
Point(99) = {0.015883, -0.733011, 0, 1.0};
Point(100) = {0.012613, -0.733128, 0, 1.0};
Point(101) = {0.008814, -0.733392, 0, 1.0};
Point(102) = {0.004544, -0.733753, 0, 1.0};
Point(103) = {-0.000139, -0.734181, 0, 1.0};
Point(104) = {-0.005172, -0.734651, 0, 1.0};
Point(105) = {-0.010486, -0.735144, 0, 1.0};
Point(106) = {-0.016010, -0.735638, 0, 1.0};
Point(107) = {-0.021669, -0.736122, 0, 1.0};
Point(108) = {-0.027390, -0.736579, 0, 1.0};
Point(109) = {-0.033095, -0.736998, 0, 1.0};
Point(110) = {-0.038707, -0.737373, 0, 1.0};
Point(111) = {-0.044151, -0.737695, 0, 1.0};
Point(112) = {-0.049352, -0.737959, 0, 1.0};
Point(113) = {-0.054239, -0.738164, 0, 1.0};
Point(114) = {-0.058745, -0.738312, 0, 1.0};
Point(115) = {-0.062804, -0.738405, 0, 1.0};
Point(116) = {-0.066358, -0.738449, 0, 1.0};
Point(117) = {-0.069354, -0.738457, 0, 1.0};
Point(118) = {-0.071750, -0.738444, 0, 1.0};
Point(119) = {-0.073518, -0.738413, 0, 1.0};
Point(120) = {-0.074613, -0.738369, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 23 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html