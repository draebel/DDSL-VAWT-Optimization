SetFactory("OpenCASCADE");

Point(1) = {0.074860, 0.733367, 0, 1.0};
Point(2) = {0.074487, 0.733531, 0, 1.0};
Point(3) = {0.073489, 0.734027, 0, 1.0};
Point(4) = {0.072038, 0.734769, 0, 1.0};
Point(5) = {0.070158, 0.735603, 0, 1.0};
Point(6) = {0.067780, 0.736480, 0, 1.0};
Point(7) = {0.064901, 0.737435, 0, 1.0};
Point(8) = {0.061577, 0.738478, 0, 1.0};
Point(9) = {0.057856, 0.739596, 0, 1.0};
Point(10) = {0.053797, 0.740776, 0, 1.0};
Point(11) = {0.049461, 0.741996, 0, 1.0};
Point(12) = {0.044908, 0.743233, 0, 1.0};
Point(13) = {0.040198, 0.744457, 0, 1.0};
Point(14) = {0.035394, 0.745639, 0, 1.0};
Point(15) = {0.030551, 0.746747, 0, 1.0};
Point(16) = {0.025725, 0.747746, 0, 1.0};
Point(17) = {0.020967, 0.748605, 0, 1.0};
Point(18) = {0.016324, 0.749293, 0, 1.0};
Point(19) = {0.011837, 0.749771, 0, 1.0};
Point(20) = {0.007524, 0.750000, 0, 1.0};
Point(21) = {0.003383, 0.749971, 0, 1.0};
Point(22) = {-0.000573, 0.749694, 0, 1.0};
Point(23) = {-0.004340, 0.749190, 0, 1.0};
Point(24) = {-0.007894, 0.748498, 0, 1.0};
Point(25) = {-0.011198, 0.747653, 0, 1.0};
Point(26) = {-0.014215, 0.746680, 0, 1.0};
Point(27) = {-0.016912, 0.745607, 0, 1.0};
Point(28) = {-0.019258, 0.744460, 0, 1.0};
Point(29) = {-0.021227, 0.743261, 0, 1.0};
Point(30) = {-0.022801, 0.742039, 0, 1.0};
Point(31) = {-0.023965, 0.740831, 0, 1.0};
Point(32) = {-0.024625, 0.739841, 0, 1.0};
Point(33) = {-0.024898, 0.739196, 0, 1.0};
Point(34) = {-0.024986, 0.738800, 0, 1.0};
Point(35) = {-0.024997, 0.738529, 0, 1.0};
Point(36) = {-0.024972, 0.738366, 0, 1.0};
Point(37) = {-0.024911, 0.738209, 0, 1.0};
Point(38) = {-0.024761, 0.737969, 0, 1.0};
Point(39) = {-0.024472, 0.737639, 0, 1.0};
Point(40) = {-0.023873, 0.737137, 0, 1.0};
Point(41) = {-0.023699, 0.737014, 0, 1.0};
Point(42) = {-0.022207, 0.736189, 0, 1.0};
Point(43) = {-0.020214, 0.735398, 0, 1.0};
Point(44) = {-0.017745, 0.734658, 0, 1.0};
Point(45) = {-0.014824, 0.733977, 0, 1.0};
Point(46) = {-0.011490, 0.733360, 0, 1.0};
Point(47) = {-0.007789, 0.732818, 0, 1.0};
Point(48) = {-0.003770, 0.732368, 0, 1.0};
Point(49) = {0.000517, 0.732040, 0, 1.0};
Point(50) = {0.005045, 0.731870, 0, 1.0};
Point(51) = {0.009803, 0.731876, 0, 1.0};
Point(52) = {0.014784, 0.732060, 0, 1.0};
Point(53) = {0.019993, 0.732390, 0, 1.0};
Point(54) = {0.025398, 0.732793, 0, 1.0};
Point(55) = {0.030921, 0.733211, 0, 1.0};
Point(56) = {0.036479, 0.733602, 0, 1.0};
Point(57) = {0.041984, 0.733933, 0, 1.0};
Point(58) = {0.047340, 0.734181, 0, 1.0};
Point(59) = {0.052454, 0.734332, 0, 1.0};
Point(60) = {0.057233, 0.734378, 0, 1.0};
Point(61) = {0.061583, 0.734328, 0, 1.0};
Point(62) = {0.065421, 0.734195, 0, 1.0};
Point(63) = {0.068673, 0.734011, 0, 1.0};
Point(64) = {0.071288, 0.733813, 0, 1.0};
Point(65) = {0.073234, 0.733619, 0, 1.0};
Point(66) = {0.074446, 0.733444, 0, 1.0};
Point(67) = {-0.074860, -0.733367, 0, 1.0};
Point(68) = {-0.074487, -0.733531, 0, 1.0};
Point(69) = {-0.073489, -0.734027, 0, 1.0};
Point(70) = {-0.072038, -0.734769, 0, 1.0};
Point(71) = {-0.070158, -0.735603, 0, 1.0};
Point(72) = {-0.067780, -0.736480, 0, 1.0};
Point(73) = {-0.064901, -0.737435, 0, 1.0};
Point(74) = {-0.061577, -0.738478, 0, 1.0};
Point(75) = {-0.057856, -0.739596, 0, 1.0};
Point(76) = {-0.053797, -0.740776, 0, 1.0};
Point(77) = {-0.049461, -0.741996, 0, 1.0};
Point(78) = {-0.044908, -0.743233, 0, 1.0};
Point(79) = {-0.040198, -0.744457, 0, 1.0};
Point(80) = {-0.035394, -0.745639, 0, 1.0};
Point(81) = {-0.030551, -0.746747, 0, 1.0};
Point(82) = {-0.025725, -0.747746, 0, 1.0};
Point(83) = {-0.020967, -0.748605, 0, 1.0};
Point(84) = {-0.016324, -0.749293, 0, 1.0};
Point(85) = {-0.011837, -0.749771, 0, 1.0};
Point(86) = {-0.007524, -0.750000, 0, 1.0};
Point(87) = {-0.003383, -0.749971, 0, 1.0};
Point(88) = {0.000573, -0.749694, 0, 1.0};
Point(89) = {0.004340, -0.749190, 0, 1.0};
Point(90) = {0.007894, -0.748498, 0, 1.0};
Point(91) = {0.011198, -0.747653, 0, 1.0};
Point(92) = {0.014215, -0.746680, 0, 1.0};
Point(93) = {0.016912, -0.745607, 0, 1.0};
Point(94) = {0.019258, -0.744460, 0, 1.0};
Point(95) = {0.021227, -0.743261, 0, 1.0};
Point(96) = {0.022801, -0.742039, 0, 1.0};
Point(97) = {0.023965, -0.740831, 0, 1.0};
Point(98) = {0.024625, -0.739841, 0, 1.0};
Point(99) = {0.024898, -0.739196, 0, 1.0};
Point(100) = {0.024986, -0.738800, 0, 1.0};
Point(101) = {0.024997, -0.738529, 0, 1.0};
Point(102) = {0.024972, -0.738366, 0, 1.0};
Point(103) = {0.024911, -0.738209, 0, 1.0};
Point(104) = {0.024761, -0.737969, 0, 1.0};
Point(105) = {0.024472, -0.737639, 0, 1.0};
Point(106) = {0.023873, -0.737137, 0, 1.0};
Point(107) = {0.023699, -0.737014, 0, 1.0};
Point(108) = {0.022207, -0.736189, 0, 1.0};
Point(109) = {0.020214, -0.735398, 0, 1.0};
Point(110) = {0.017745, -0.734658, 0, 1.0};
Point(111) = {0.014824, -0.733977, 0, 1.0};
Point(112) = {0.011490, -0.733360, 0, 1.0};
Point(113) = {0.007789, -0.732818, 0, 1.0};
Point(114) = {0.003770, -0.732368, 0, 1.0};
Point(115) = {-0.000517, -0.732040, 0, 1.0};
Point(116) = {-0.005045, -0.731870, 0, 1.0};
Point(117) = {-0.009803, -0.731876, 0, 1.0};
Point(118) = {-0.014784, -0.732060, 0, 1.0};
Point(119) = {-0.019993, -0.732390, 0, 1.0};
Point(120) = {-0.025398, -0.732793, 0, 1.0};
Point(121) = {-0.030921, -0.733211, 0, 1.0};
Point(122) = {-0.036479, -0.733602, 0, 1.0};
Point(123) = {-0.041984, -0.733933, 0, 1.0};
Point(124) = {-0.047340, -0.734181, 0, 1.0};
Point(125) = {-0.052454, -0.734332, 0, 1.0};
Point(126) = {-0.057233, -0.734378, 0, 1.0};
Point(127) = {-0.061583, -0.734328, 0, 1.0};
Point(128) = {-0.065421, -0.734195, 0, 1.0};
Point(129) = {-0.068673, -0.734011, 0, 1.0};
Point(130) = {-0.071288, -0.733813, 0, 1.0};
Point(131) = {-0.073234, -0.733619, 0, 1.0};
Point(132) = {-0.074446, -0.733444, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:66};
Spline(4) = {66,1};

// Lines: second blade (splines 5-8)
Spline(5) = {67:87};
Spline(6) = {87:115};
Spline(7) = {115:132};
Spline(8) = {132,67};

// Outer domain (points 20001-4 and lines)
Point(133) = {-13.50000000, -15.00000000, 0, 1.0};
Point(134) = {-13.50000000, 15.00000000, 0, 1.0};
Point(135) = {13.50000000, 15.00000000, 0, 1.0};
Point(136) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {133, 134};
Line(12) = {134, 135};
Line(13) = {135, 136};
Line(14) = {133, 136};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html