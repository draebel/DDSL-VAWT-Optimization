SetFactory("OpenCASCADE");

Point(1) = {0.073880, 0.750000, 0, 1.0};
Point(2) = {0.073445, 0.749979, 0, 1.0};
Point(3) = {0.072142, 0.749918, 0, 1.0};
Point(4) = {0.069983, 0.749828, 0, 1.0};
Point(5) = {0.066996, 0.749736, 0, 1.0};
Point(6) = {0.063240, 0.749656, 0, 1.0};
Point(7) = {0.058774, 0.749589, 0, 1.0};
Point(8) = {0.053662, 0.749534, 0, 1.0};
Point(9) = {0.047978, 0.749489, 0, 1.0};
Point(10) = {0.041796, 0.749450, 0, 1.0};
Point(11) = {0.035199, 0.749409, 0, 1.0};
Point(12) = {0.028277, 0.749361, 0, 1.0};
Point(13) = {0.021118, 0.749287, 0, 1.0};
Point(14) = {0.013818, 0.749179, 0, 1.0};
Point(15) = {0.006472, 0.749021, 0, 1.0};
Point(16) = {-0.000826, 0.748784, 0, 1.0};
Point(17) = {-0.007976, 0.748436, 0, 1.0};
Point(18) = {-0.014908, 0.747917, 0, 1.0};
Point(19) = {-0.021589, 0.747189, 0, 1.0};
Point(20) = {-0.027986, 0.746238, 0, 1.0};
Point(21) = {-0.034073, 0.745066, 0, 1.0};
Point(22) = {-0.039827, 0.743675, 0, 1.0};
Point(23) = {-0.045233, 0.742097, 0, 1.0};
Point(24) = {-0.050268, 0.740377, 0, 1.0};
Point(25) = {-0.054890, 0.738564, 0, 1.0};
Point(26) = {-0.059057, 0.736690, 0, 1.0};
Point(27) = {-0.062741, 0.734796, 0, 1.0};
Point(28) = {-0.065911, 0.732915, 0, 1.0};
Point(29) = {-0.068554, 0.731081, 0, 1.0};
Point(30) = {-0.070658, 0.729337, 0, 1.0};
Point(31) = {-0.072226, 0.727721, 0, 1.0};
Point(32) = {-0.073266, 0.726286, 0, 1.0};
Point(33) = {-0.073806, 0.725085, 0, 1.0};
Point(34) = {-0.073888, 0.724219, 0, 1.0};
Point(35) = {-0.073515, 0.723885, 0, 1.0};
Point(36) = {-0.072583, 0.724176, 0, 1.0};
Point(37) = {-0.070981, 0.725171, 0, 1.0};
Point(38) = {-0.068560, 0.726942, 0, 1.0};
Point(39) = {-0.065147, 0.729489, 0, 1.0};
Point(40) = {-0.060533, 0.732721, 0, 1.0};
Point(41) = {-0.054510, 0.736461, 0, 1.0};
Point(42) = {-0.046841, 0.740283, 0, 1.0};
Point(43) = {-0.037700, 0.743415, 0, 1.0};
Point(44) = {-0.027936, 0.745501, 0, 1.0};
Point(45) = {-0.018137, 0.746845, 0, 1.0};
Point(46) = {-0.008473, 0.747741, 0, 1.0};
Point(47) = {0.000952, 0.748313, 0, 1.0};
Point(48) = {0.010047, 0.748679, 0, 1.0};
Point(49) = {0.018744, 0.748904, 0, 1.0};
Point(50) = {0.026987, 0.749049, 0, 1.0};
Point(51) = {0.034717, 0.749133, 0, 1.0};
Point(52) = {0.041872, 0.749186, 0, 1.0};
Point(53) = {0.048396, 0.749223, 0, 1.0};
Point(54) = {0.054239, 0.749264, 0, 1.0};
Point(55) = {0.059360, 0.749318, 0, 1.0};
Point(56) = {0.063728, 0.749400, 0, 1.0};
Point(57) = {0.067313, 0.749516, 0, 1.0};
Point(58) = {0.070123, 0.749679, 0, 1.0};
Point(59) = {0.072177, 0.749848, 0, 1.0};
Point(60) = {0.073447, 0.749964, 0, 1.0};
Point(61) = {-0.073880, -0.750000, 0, 1.0};
Point(62) = {-0.073445, -0.749979, 0, 1.0};
Point(63) = {-0.072142, -0.749918, 0, 1.0};
Point(64) = {-0.069983, -0.749828, 0, 1.0};
Point(65) = {-0.066996, -0.749736, 0, 1.0};
Point(66) = {-0.063240, -0.749656, 0, 1.0};
Point(67) = {-0.058774, -0.749589, 0, 1.0};
Point(68) = {-0.053662, -0.749534, 0, 1.0};
Point(69) = {-0.047978, -0.749489, 0, 1.0};
Point(70) = {-0.041796, -0.749450, 0, 1.0};
Point(71) = {-0.035199, -0.749409, 0, 1.0};
Point(72) = {-0.028277, -0.749361, 0, 1.0};
Point(73) = {-0.021118, -0.749287, 0, 1.0};
Point(74) = {-0.013818, -0.749179, 0, 1.0};
Point(75) = {-0.006472, -0.749021, 0, 1.0};
Point(76) = {0.000826, -0.748784, 0, 1.0};
Point(77) = {0.007976, -0.748436, 0, 1.0};
Point(78) = {0.014908, -0.747917, 0, 1.0};
Point(79) = {0.021589, -0.747189, 0, 1.0};
Point(80) = {0.027986, -0.746238, 0, 1.0};
Point(81) = {0.034073, -0.745066, 0, 1.0};
Point(82) = {0.039827, -0.743675, 0, 1.0};
Point(83) = {0.045233, -0.742097, 0, 1.0};
Point(84) = {0.050268, -0.740377, 0, 1.0};
Point(85) = {0.054890, -0.738564, 0, 1.0};
Point(86) = {0.059057, -0.736690, 0, 1.0};
Point(87) = {0.062741, -0.734796, 0, 1.0};
Point(88) = {0.065911, -0.732915, 0, 1.0};
Point(89) = {0.068554, -0.731081, 0, 1.0};
Point(90) = {0.070658, -0.729337, 0, 1.0};
Point(91) = {0.072226, -0.727721, 0, 1.0};
Point(92) = {0.073266, -0.726286, 0, 1.0};
Point(93) = {0.073806, -0.725085, 0, 1.0};
Point(94) = {0.073888, -0.724219, 0, 1.0};
Point(95) = {0.073515, -0.723885, 0, 1.0};
Point(96) = {0.072583, -0.724176, 0, 1.0};
Point(97) = {0.070981, -0.725171, 0, 1.0};
Point(98) = {0.068560, -0.726942, 0, 1.0};
Point(99) = {0.065147, -0.729489, 0, 1.0};
Point(100) = {0.060533, -0.732721, 0, 1.0};
Point(101) = {0.054510, -0.736461, 0, 1.0};
Point(102) = {0.046841, -0.740283, 0, 1.0};
Point(103) = {0.037700, -0.743415, 0, 1.0};
Point(104) = {0.027936, -0.745501, 0, 1.0};
Point(105) = {0.018137, -0.746845, 0, 1.0};
Point(106) = {0.008473, -0.747741, 0, 1.0};
Point(107) = {-0.000952, -0.748313, 0, 1.0};
Point(108) = {-0.010047, -0.748679, 0, 1.0};
Point(109) = {-0.018744, -0.748904, 0, 1.0};
Point(110) = {-0.026987, -0.749049, 0, 1.0};
Point(111) = {-0.034717, -0.749133, 0, 1.0};
Point(112) = {-0.041872, -0.749186, 0, 1.0};
Point(113) = {-0.048396, -0.749223, 0, 1.0};
Point(114) = {-0.054239, -0.749264, 0, 1.0};
Point(115) = {-0.059360, -0.749318, 0, 1.0};
Point(116) = {-0.063728, -0.749400, 0, 1.0};
Point(117) = {-0.067313, -0.749516, 0, 1.0};
Point(118) = {-0.070123, -0.749679, 0, 1.0};
Point(119) = {-0.072177, -0.749848, 0, 1.0};
Point(120) = {-0.073447, -0.749964, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html