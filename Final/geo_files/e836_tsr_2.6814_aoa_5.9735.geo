SetFactory("OpenCASCADE");

Point(1) = {0.074457, 0.736329, 0, 1.0};
Point(2) = {0.074097, 0.736389, 0, 1.0};
Point(3) = {0.073053, 0.736594, 0, 1.0};
Point(4) = {0.071397, 0.736963, 0, 1.0};
Point(5) = {0.069182, 0.737477, 0, 1.0};
Point(6) = {0.066439, 0.738129, 0, 1.0};
Point(7) = {0.063217, 0.738926, 0, 1.0};
Point(8) = {0.059587, 0.739862, 0, 1.0};
Point(9) = {0.055621, 0.740913, 0, 1.0};
Point(10) = {0.051392, 0.742046, 0, 1.0};
Point(11) = {0.046969, 0.743210, 0, 1.0};
Point(12) = {0.042394, 0.744342, 0, 1.0};
Point(13) = {0.037692, 0.745404, 0, 1.0};
Point(14) = {0.032891, 0.746371, 0, 1.0};
Point(15) = {0.028023, 0.747226, 0, 1.0};
Point(16) = {0.023118, 0.747958, 0, 1.0};
Point(17) = {0.018209, 0.748569, 0, 1.0};
Point(18) = {0.013342, 0.749068, 0, 1.0};
Point(19) = {0.008572, 0.749462, 0, 1.0};
Point(20) = {0.003951, 0.749748, 0, 1.0};
Point(21) = {-0.000471, 0.749927, 0, 1.0};
Point(22) = {-0.004644, 0.750000, 0, 1.0};
Point(23) = {-0.008525, 0.749968, 0, 1.0};
Point(24) = {-0.012073, 0.749830, 0, 1.0};
Point(25) = {-0.015253, 0.749595, 0, 1.0};
Point(26) = {-0.018030, 0.749265, 0, 1.0};
Point(27) = {-0.020379, 0.748850, 0, 1.0};
Point(28) = {-0.022277, 0.748364, 0, 1.0};
Point(29) = {-0.023704, 0.747825, 0, 1.0};
Point(30) = {-0.024636, 0.747261, 0, 1.0};
Point(31) = {-0.025000, 0.746736, 0, 1.0};
Point(32) = {-0.024753, 0.746147, 0, 1.0};
Point(33) = {-0.023957, 0.745402, 0, 1.0};
Point(34) = {-0.022673, 0.744579, 0, 1.0};
Point(35) = {-0.020917, 0.743710, 0, 1.0};
Point(36) = {-0.018704, 0.742818, 0, 1.0};
Point(37) = {-0.016056, 0.741921, 0, 1.0};
Point(38) = {-0.012993, 0.741032, 0, 1.0};
Point(39) = {-0.009551, 0.740163, 0, 1.0};
Point(40) = {-0.005760, 0.739328, 0, 1.0};
Point(41) = {-0.001663, 0.738536, 0, 1.0};
Point(42) = {0.002700, 0.737795, 0, 1.0};
Point(43) = {0.007280, 0.737119, 0, 1.0};
Point(44) = {0.012029, 0.736517, 0, 1.0};
Point(45) = {0.016894, 0.735998, 0, 1.0};
Point(46) = {0.021823, 0.735579, 0, 1.0};
Point(47) = {0.026773, 0.735280, 0, 1.0};
Point(48) = {0.031713, 0.735109, 0, 1.0};
Point(49) = {0.036610, 0.735061, 0, 1.0};
Point(50) = {0.041430, 0.735126, 0, 1.0};
Point(51) = {0.046140, 0.735287, 0, 1.0};
Point(52) = {0.050708, 0.735510, 0, 1.0};
Point(53) = {0.055080, 0.735743, 0, 1.0};
Point(54) = {0.059178, 0.735951, 0, 1.0};
Point(55) = {0.062923, 0.736115, 0, 1.0};
Point(56) = {0.066240, 0.736228, 0, 1.0};
Point(57) = {0.069058, 0.736298, 0, 1.0};
Point(58) = {0.071332, 0.736342, 0, 1.0};
Point(59) = {0.073028, 0.736360, 0, 1.0};
Point(60) = {0.074093, 0.736345, 0, 1.0};
Point(61) = {-0.074457, -0.736329, 0, 1.0};
Point(62) = {-0.074097, -0.736389, 0, 1.0};
Point(63) = {-0.073053, -0.736594, 0, 1.0};
Point(64) = {-0.071397, -0.736963, 0, 1.0};
Point(65) = {-0.069182, -0.737477, 0, 1.0};
Point(66) = {-0.066439, -0.738129, 0, 1.0};
Point(67) = {-0.063217, -0.738926, 0, 1.0};
Point(68) = {-0.059587, -0.739862, 0, 1.0};
Point(69) = {-0.055621, -0.740913, 0, 1.0};
Point(70) = {-0.051392, -0.742046, 0, 1.0};
Point(71) = {-0.046969, -0.743210, 0, 1.0};
Point(72) = {-0.042394, -0.744342, 0, 1.0};
Point(73) = {-0.037692, -0.745404, 0, 1.0};
Point(74) = {-0.032891, -0.746371, 0, 1.0};
Point(75) = {-0.028023, -0.747226, 0, 1.0};
Point(76) = {-0.023118, -0.747958, 0, 1.0};
Point(77) = {-0.018209, -0.748569, 0, 1.0};
Point(78) = {-0.013342, -0.749068, 0, 1.0};
Point(79) = {-0.008572, -0.749462, 0, 1.0};
Point(80) = {-0.003951, -0.749748, 0, 1.0};
Point(81) = {0.000471, -0.749927, 0, 1.0};
Point(82) = {0.004644, -0.750000, 0, 1.0};
Point(83) = {0.008525, -0.749968, 0, 1.0};
Point(84) = {0.012073, -0.749830, 0, 1.0};
Point(85) = {0.015253, -0.749595, 0, 1.0};
Point(86) = {0.018030, -0.749265, 0, 1.0};
Point(87) = {0.020379, -0.748850, 0, 1.0};
Point(88) = {0.022277, -0.748364, 0, 1.0};
Point(89) = {0.023704, -0.747825, 0, 1.0};
Point(90) = {0.024636, -0.747261, 0, 1.0};
Point(91) = {0.025000, -0.746736, 0, 1.0};
Point(92) = {0.024753, -0.746147, 0, 1.0};
Point(93) = {0.023957, -0.745402, 0, 1.0};
Point(94) = {0.022673, -0.744579, 0, 1.0};
Point(95) = {0.020917, -0.743710, 0, 1.0};
Point(96) = {0.018704, -0.742818, 0, 1.0};
Point(97) = {0.016056, -0.741921, 0, 1.0};
Point(98) = {0.012993, -0.741032, 0, 1.0};
Point(99) = {0.009551, -0.740163, 0, 1.0};
Point(100) = {0.005760, -0.739328, 0, 1.0};
Point(101) = {0.001663, -0.738536, 0, 1.0};
Point(102) = {-0.002700, -0.737795, 0, 1.0};
Point(103) = {-0.007280, -0.737119, 0, 1.0};
Point(104) = {-0.012029, -0.736517, 0, 1.0};
Point(105) = {-0.016894, -0.735998, 0, 1.0};
Point(106) = {-0.021823, -0.735579, 0, 1.0};
Point(107) = {-0.026773, -0.735280, 0, 1.0};
Point(108) = {-0.031713, -0.735109, 0, 1.0};
Point(109) = {-0.036610, -0.735061, 0, 1.0};
Point(110) = {-0.041430, -0.735126, 0, 1.0};
Point(111) = {-0.046140, -0.735287, 0, 1.0};
Point(112) = {-0.050708, -0.735510, 0, 1.0};
Point(113) = {-0.055080, -0.735743, 0, 1.0};
Point(114) = {-0.059178, -0.735951, 0, 1.0};
Point(115) = {-0.062923, -0.736115, 0, 1.0};
Point(116) = {-0.066240, -0.736228, 0, 1.0};
Point(117) = {-0.069058, -0.736298, 0, 1.0};
Point(118) = {-0.071332, -0.736342, 0, 1.0};
Point(119) = {-0.073028, -0.736360, 0, 1.0};
Point(120) = {-0.074093, -0.736345, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html