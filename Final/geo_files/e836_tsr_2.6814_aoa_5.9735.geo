SetFactory("OpenCASCADE");

Point(1) = {0.074593, 0.729493, 0, 1.0};
Point(2) = {0.074053, 0.729583, 0, 1.0};
Point(3) = {0.072487, 0.729892, 0, 1.0};
Point(4) = {0.070003, 0.730444, 0, 1.0};
Point(5) = {0.066680, 0.731216, 0, 1.0};
Point(6) = {0.062565, 0.732194, 0, 1.0};
Point(7) = {0.057733, 0.733389, 0, 1.0};
Point(8) = {0.052288, 0.734792, 0, 1.0};
Point(9) = {0.046338, 0.736370, 0, 1.0};
Point(10) = {0.039995, 0.738069, 0, 1.0};
Point(11) = {0.033361, 0.739815, 0, 1.0};
Point(12) = {0.026498, 0.741513, 0, 1.0};
Point(13) = {0.019445, 0.743106, 0, 1.0};
Point(14) = {0.012244, 0.744557, 0, 1.0};
Point(15) = {0.004942, 0.745840, 0, 1.0};
Point(16) = {-0.002415, 0.746937, 0, 1.0};
Point(17) = {-0.009779, 0.747853, 0, 1.0};
Point(18) = {-0.017080, 0.748602, 0, 1.0};
Point(19) = {-0.024235, 0.749193, 0, 1.0};
Point(20) = {-0.031167, 0.749622, 0, 1.0};
Point(21) = {-0.037799, 0.749891, 0, 1.0};
Point(22) = {-0.044058, 0.750000, 0, 1.0};
Point(23) = {-0.049881, 0.749952, 0, 1.0};
Point(24) = {-0.055202, 0.749745, 0, 1.0};
Point(25) = {-0.059972, 0.749392, 0, 1.0};
Point(26) = {-0.064138, 0.748898, 0, 1.0};
Point(27) = {-0.067661, 0.748275, 0, 1.0};
Point(28) = {-0.070508, 0.747546, 0, 1.0};
Point(29) = {-0.072648, 0.746737, 0, 1.0};
Point(30) = {-0.074047, 0.745891, 0, 1.0};
Point(31) = {-0.074593, 0.745104, 0, 1.0};
Point(32) = {-0.074222, 0.744220, 0, 1.0};
Point(33) = {-0.073028, 0.743103, 0, 1.0};
Point(34) = {-0.071102, 0.741868, 0, 1.0};
Point(35) = {-0.068468, 0.740566, 0, 1.0};
Point(36) = {-0.065150, 0.739227, 0, 1.0};
Point(37) = {-0.061176, 0.737881, 0, 1.0};
Point(38) = {-0.056583, 0.736548, 0, 1.0};
Point(39) = {-0.051419, 0.735245, 0, 1.0};
Point(40) = {-0.045733, 0.733992, 0, 1.0};
Point(41) = {-0.039587, 0.732803, 0, 1.0};
Point(42) = {-0.033043, 0.731693, 0, 1.0};
Point(43) = {-0.026172, 0.730679, 0, 1.0};
Point(44) = {-0.019050, 0.729775, 0, 1.0};
Point(45) = {-0.011752, 0.728996, 0, 1.0};
Point(46) = {-0.004358, 0.728369, 0, 1.0};
Point(47) = {0.003067, 0.727919, 0, 1.0};
Point(48) = {0.010477, 0.727663, 0, 1.0};
Point(49) = {0.017822, 0.727591, 0, 1.0};
Point(50) = {0.025052, 0.727690, 0, 1.0};
Point(51) = {0.032117, 0.727931, 0, 1.0};
Point(52) = {0.038969, 0.728265, 0, 1.0};
Point(53) = {0.045527, 0.728615, 0, 1.0};
Point(54) = {0.051674, 0.728926, 0, 1.0};
Point(55) = {0.057292, 0.729173, 0, 1.0};
Point(56) = {0.062267, 0.729341, 0, 1.0};
Point(57) = {0.066495, 0.729446, 0, 1.0};
Point(58) = {0.069906, 0.729513, 0, 1.0};
Point(59) = {0.072450, 0.729540, 0, 1.0};
Point(60) = {0.074046, 0.729517, 0, 1.0};
Point(61) = {-0.074593, -0.729493, 0, 1.0};
Point(62) = {-0.074053, -0.729583, 0, 1.0};
Point(63) = {-0.072487, -0.729892, 0, 1.0};
Point(64) = {-0.070003, -0.730444, 0, 1.0};
Point(65) = {-0.066680, -0.731216, 0, 1.0};
Point(66) = {-0.062565, -0.732194, 0, 1.0};
Point(67) = {-0.057733, -0.733389, 0, 1.0};
Point(68) = {-0.052288, -0.734792, 0, 1.0};
Point(69) = {-0.046338, -0.736370, 0, 1.0};
Point(70) = {-0.039995, -0.738069, 0, 1.0};
Point(71) = {-0.033361, -0.739815, 0, 1.0};
Point(72) = {-0.026498, -0.741513, 0, 1.0};
Point(73) = {-0.019445, -0.743106, 0, 1.0};
Point(74) = {-0.012244, -0.744557, 0, 1.0};
Point(75) = {-0.004942, -0.745840, 0, 1.0};
Point(76) = {0.002415, -0.746937, 0, 1.0};
Point(77) = {0.009779, -0.747853, 0, 1.0};
Point(78) = {0.017080, -0.748602, 0, 1.0};
Point(79) = {0.024235, -0.749193, 0, 1.0};
Point(80) = {0.031167, -0.749622, 0, 1.0};
Point(81) = {0.037799, -0.749891, 0, 1.0};
Point(82) = {0.044058, -0.750000, 0, 1.0};
Point(83) = {0.049881, -0.749952, 0, 1.0};
Point(84) = {0.055202, -0.749745, 0, 1.0};
Point(85) = {0.059972, -0.749392, 0, 1.0};
Point(86) = {0.064138, -0.748898, 0, 1.0};
Point(87) = {0.067661, -0.748275, 0, 1.0};
Point(88) = {0.070508, -0.747546, 0, 1.0};
Point(89) = {0.072648, -0.746737, 0, 1.0};
Point(90) = {0.074047, -0.745891, 0, 1.0};
Point(91) = {0.074593, -0.745104, 0, 1.0};
Point(92) = {0.074222, -0.744220, 0, 1.0};
Point(93) = {0.073028, -0.743103, 0, 1.0};
Point(94) = {0.071102, -0.741868, 0, 1.0};
Point(95) = {0.068468, -0.740566, 0, 1.0};
Point(96) = {0.065150, -0.739227, 0, 1.0};
Point(97) = {0.061176, -0.737881, 0, 1.0};
Point(98) = {0.056583, -0.736548, 0, 1.0};
Point(99) = {0.051419, -0.735245, 0, 1.0};
Point(100) = {0.045733, -0.733992, 0, 1.0};
Point(101) = {0.039587, -0.732803, 0, 1.0};
Point(102) = {0.033043, -0.731693, 0, 1.0};
Point(103) = {0.026172, -0.730679, 0, 1.0};
Point(104) = {0.019050, -0.729775, 0, 1.0};
Point(105) = {0.011752, -0.728996, 0, 1.0};
Point(106) = {0.004358, -0.728369, 0, 1.0};
Point(107) = {-0.003067, -0.727919, 0, 1.0};
Point(108) = {-0.010477, -0.727663, 0, 1.0};
Point(109) = {-0.017822, -0.727591, 0, 1.0};
Point(110) = {-0.025052, -0.727690, 0, 1.0};
Point(111) = {-0.032117, -0.727931, 0, 1.0};
Point(112) = {-0.038969, -0.728265, 0, 1.0};
Point(113) = {-0.045527, -0.728615, 0, 1.0};
Point(114) = {-0.051674, -0.728926, 0, 1.0};
Point(115) = {-0.057292, -0.729173, 0, 1.0};
Point(116) = {-0.062267, -0.729341, 0, 1.0};
Point(117) = {-0.066495, -0.729446, 0, 1.0};
Point(118) = {-0.069906, -0.729513, 0, 1.0};
Point(119) = {-0.072450, -0.729540, 0, 1.0};
Point(120) = {-0.074046, -0.729517, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html