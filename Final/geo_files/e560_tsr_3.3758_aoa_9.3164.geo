SetFactory("OpenCASCADE");

Point(1) = {0.111014, 0.714293, 0, 1.0};
Point(2) = {0.110531, 0.714577, 0, 1.0};
Point(3) = {0.109218, 0.715412, 0, 1.0};
Point(4) = {0.107265, 0.716662, 0, 1.0};
Point(5) = {0.104680, 0.718130, 0, 1.0};
Point(6) = {0.101378, 0.719757, 0, 1.0};
Point(7) = {0.097364, 0.721578, 0, 1.0};
Point(8) = {0.092707, 0.723589, 0, 1.0};
Point(9) = {0.087476, 0.725763, 0, 1.0};
Point(10) = {0.081744, 0.728069, 0, 1.0};
Point(11) = {0.075587, 0.730466, 0, 1.0};
Point(12) = {0.069086, 0.732913, 0, 1.0};
Point(13) = {0.062320, 0.735364, 0, 1.0};
Point(14) = {0.055368, 0.737769, 0, 1.0};
Point(15) = {0.048306, 0.740078, 0, 1.0};
Point(16) = {0.041207, 0.742244, 0, 1.0};
Point(17) = {0.034141, 0.744220, 0, 1.0};
Point(18) = {0.027174, 0.745965, 0, 1.0};
Point(19) = {0.020364, 0.747438, 0, 1.0};
Point(20) = {0.013770, 0.748605, 0, 1.0};
Point(21) = {0.007433, 0.749430, 0, 1.0};
Point(22) = {0.001383, 0.749895, 0, 1.0};
Point(23) = {-0.004354, 0.750000, 0, 1.0};
Point(24) = {-0.009757, 0.749763, 0, 1.0};
Point(25) = {-0.014794, 0.749218, 0, 1.0};
Point(26) = {-0.019420, 0.748404, 0, 1.0};
Point(27) = {-0.023594, 0.747356, 0, 1.0};
Point(28) = {-0.027271, 0.746112, 0, 1.0};
Point(29) = {-0.030415, 0.744710, 0, 1.0};
Point(30) = {-0.032994, 0.743196, 0, 1.0};
Point(31) = {-0.034973, 0.741618, 0, 1.0};
Point(32) = {-0.036329, 0.740041, 0, 1.0};
Point(33) = {-0.037005, 0.738571, 0, 1.0};
Point(34) = {-0.036793, 0.737188, 0, 1.0};
Point(35) = {-0.035675, 0.735735, 0, 1.0};
Point(36) = {-0.033842, 0.734200, 0, 1.0};
Point(37) = {-0.031332, 0.732674, 0, 1.0};
Point(38) = {-0.028162, 0.731210, 0, 1.0};
Point(39) = {-0.024349, 0.729853, 0, 1.0};
Point(40) = {-0.019912, 0.728642, 0, 1.0};
Point(41) = {-0.014863, 0.727610, 0, 1.0};
Point(42) = {-0.009213, 0.726776, 0, 1.0};
Point(43) = {-0.002972, 0.726143, 0, 1.0};
Point(44) = {0.003841, 0.725689, 0, 1.0};
Point(45) = {0.011197, 0.725379, 0, 1.0};
Point(46) = {0.019053, 0.725149, 0, 1.0};
Point(47) = {0.027315, 0.724910, 0, 1.0};
Point(48) = {0.035848, 0.724606, 0, 1.0};
Point(49) = {0.044516, 0.724204, 0, 1.0};
Point(50) = {0.053179, 0.723683, 0, 1.0};
Point(51) = {0.061694, 0.723034, 0, 1.0};
Point(52) = {0.069922, 0.722257, 0, 1.0};
Point(53) = {0.077729, 0.721361, 0, 1.0};
Point(54) = {0.084984, 0.720364, 0, 1.0};
Point(55) = {0.091559, 0.719290, 0, 1.0};
Point(56) = {0.097340, 0.718176, 0, 1.0};
Point(57) = {0.102220, 0.717062, 0, 1.0};
Point(58) = {0.106085, 0.716002, 0, 1.0};
Point(59) = {0.108842, 0.715109, 0, 1.0};
Point(60) = {0.110474, 0.714506, 0, 1.0};
Point(61) = {-0.111014, -0.714293, 0, 1.0};
Point(62) = {-0.110531, -0.714577, 0, 1.0};
Point(63) = {-0.109218, -0.715412, 0, 1.0};
Point(64) = {-0.107265, -0.716662, 0, 1.0};
Point(65) = {-0.104680, -0.718130, 0, 1.0};
Point(66) = {-0.101378, -0.719757, 0, 1.0};
Point(67) = {-0.097364, -0.721578, 0, 1.0};
Point(68) = {-0.092707, -0.723589, 0, 1.0};
Point(69) = {-0.087476, -0.725763, 0, 1.0};
Point(70) = {-0.081744, -0.728069, 0, 1.0};
Point(71) = {-0.075587, -0.730466, 0, 1.0};
Point(72) = {-0.069086, -0.732913, 0, 1.0};
Point(73) = {-0.062320, -0.735364, 0, 1.0};
Point(74) = {-0.055368, -0.737769, 0, 1.0};
Point(75) = {-0.048306, -0.740078, 0, 1.0};
Point(76) = {-0.041207, -0.742244, 0, 1.0};
Point(77) = {-0.034141, -0.744220, 0, 1.0};
Point(78) = {-0.027174, -0.745965, 0, 1.0};
Point(79) = {-0.020364, -0.747438, 0, 1.0};
Point(80) = {-0.013770, -0.748605, 0, 1.0};
Point(81) = {-0.007433, -0.749430, 0, 1.0};
Point(82) = {-0.001383, -0.749895, 0, 1.0};
Point(83) = {0.004354, -0.750000, 0, 1.0};
Point(84) = {0.009757, -0.749763, 0, 1.0};
Point(85) = {0.014794, -0.749218, 0, 1.0};
Point(86) = {0.019420, -0.748404, 0, 1.0};
Point(87) = {0.023594, -0.747356, 0, 1.0};
Point(88) = {0.027271, -0.746112, 0, 1.0};
Point(89) = {0.030415, -0.744710, 0, 1.0};
Point(90) = {0.032994, -0.743196, 0, 1.0};
Point(91) = {0.034973, -0.741618, 0, 1.0};
Point(92) = {0.036329, -0.740041, 0, 1.0};
Point(93) = {0.037005, -0.738571, 0, 1.0};
Point(94) = {0.036793, -0.737188, 0, 1.0};
Point(95) = {0.035675, -0.735735, 0, 1.0};
Point(96) = {0.033842, -0.734200, 0, 1.0};
Point(97) = {0.031332, -0.732674, 0, 1.0};
Point(98) = {0.028162, -0.731210, 0, 1.0};
Point(99) = {0.024349, -0.729853, 0, 1.0};
Point(100) = {0.019912, -0.728642, 0, 1.0};
Point(101) = {0.014863, -0.727610, 0, 1.0};
Point(102) = {0.009213, -0.726776, 0, 1.0};
Point(103) = {0.002972, -0.726143, 0, 1.0};
Point(104) = {-0.003841, -0.725689, 0, 1.0};
Point(105) = {-0.011197, -0.725379, 0, 1.0};
Point(106) = {-0.019053, -0.725149, 0, 1.0};
Point(107) = {-0.027315, -0.724910, 0, 1.0};
Point(108) = {-0.035848, -0.724606, 0, 1.0};
Point(109) = {-0.044516, -0.724204, 0, 1.0};
Point(110) = {-0.053179, -0.723683, 0, 1.0};
Point(111) = {-0.061694, -0.723034, 0, 1.0};
Point(112) = {-0.069922, -0.722257, 0, 1.0};
Point(113) = {-0.077729, -0.721361, 0, 1.0};
Point(114) = {-0.084984, -0.720364, 0, 1.0};
Point(115) = {-0.091559, -0.719290, 0, 1.0};
Point(116) = {-0.097340, -0.718176, 0, 1.0};
Point(117) = {-0.102220, -0.717062, 0, 1.0};
Point(118) = {-0.106085, -0.716002, 0, 1.0};
Point(119) = {-0.108842, -0.715109, 0, 1.0};
Point(120) = {-0.110474, -0.714506, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html