SetFactory("OpenCASCADE");

Point(1) = {0.074967, 0.733694, 0, 1.0};
Point(2) = {0.074680, 0.733738, 0, 1.0};
Point(3) = {0.073837, 0.733886, 0, 1.0};
Point(4) = {0.072470, 0.734150, 0, 1.0};
Point(5) = {0.070615, 0.734529, 0, 1.0};
Point(6) = {0.068294, 0.735014, 0, 1.0};
Point(7) = {0.065528, 0.735604, 0, 1.0};
Point(8) = {0.062351, 0.736300, 0, 1.0};
Point(9) = {0.058798, 0.737094, 0, 1.0};
Point(10) = {0.054905, 0.737979, 0, 1.0};
Point(11) = {0.050711, 0.738937, 0, 1.0};
Point(12) = {0.046256, 0.739955, 0, 1.0};
Point(13) = {0.041581, 0.741009, 0, 1.0};
Point(14) = {0.036715, 0.742065, 0, 1.0};
Point(15) = {0.031677, 0.743101, 0, 1.0};
Point(16) = {0.026495, 0.744115, 0, 1.0};
Point(17) = {0.021198, 0.745084, 0, 1.0};
Point(18) = {0.015813, 0.745998, 0, 1.0};
Point(19) = {0.010378, 0.746845, 0, 1.0};
Point(20) = {0.004915, 0.747607, 0, 1.0};
Point(21) = {-0.000554, 0.748281, 0, 1.0};
Point(22) = {-0.005990, 0.748853, 0, 1.0};
Point(23) = {-0.011375, 0.749313, 0, 1.0};
Point(24) = {-0.016679, 0.749664, 0, 1.0};
Point(25) = {-0.021876, 0.749893, 0, 1.0};
Point(26) = {-0.026944, 0.750000, 0, 1.0};
Point(27) = {-0.031854, 0.749984, 0, 1.0};
Point(28) = {-0.036588, 0.749842, 0, 1.0};
Point(29) = {-0.041130, 0.749577, 0, 1.0};
Point(30) = {-0.045451, 0.749197, 0, 1.0};
Point(31) = {-0.049536, 0.748700, 0, 1.0};
Point(32) = {-0.053367, 0.748103, 0, 1.0};
Point(33) = {-0.056925, 0.747406, 0, 1.0};
Point(34) = {-0.060199, 0.746621, 0, 1.0};
Point(35) = {-0.063173, 0.745763, 0, 1.0};
Point(36) = {-0.065833, 0.744841, 0, 1.0};
Point(37) = {-0.068173, 0.743874, 0, 1.0};
Point(38) = {-0.070180, 0.742876, 0, 1.0};
Point(39) = {-0.071846, 0.741867, 0, 1.0};
Point(40) = {-0.073169, 0.740871, 0, 1.0};
Point(41) = {-0.074135, 0.739916, 0, 1.0};
Point(42) = {-0.074741, 0.739035, 0, 1.0};
Point(43) = {-0.074962, 0.738308, 0, 1.0};
Point(44) = {-0.074671, 0.737695, 0, 1.0};
Point(45) = {-0.073867, 0.737102, 0, 1.0};
Point(46) = {-0.072646, 0.736580, 0, 1.0};
Point(47) = {-0.070959, 0.736162, 0, 1.0};
Point(48) = {-0.068786, 0.735817, 0, 1.0};
Point(49) = {-0.066149, 0.735519, 0, 1.0};
Point(50) = {-0.063070, 0.735261, 0, 1.0};
Point(51) = {-0.059568, 0.735039, 0, 1.0};
Point(52) = {-0.055669, 0.734848, 0, 1.0};
Point(53) = {-0.051398, 0.734683, 0, 1.0};
Point(54) = {-0.046791, 0.734541, 0, 1.0};
Point(55) = {-0.041879, 0.734424, 0, 1.0};
Point(56) = {-0.036692, 0.734340, 0, 1.0};
Point(57) = {-0.031248, 0.734284, 0, 1.0};
Point(58) = {-0.025584, 0.734243, 0, 1.0};
Point(59) = {-0.019738, 0.734209, 0, 1.0};
Point(60) = {-0.013752, 0.734177, 0, 1.0};
Point(61) = {-0.007667, 0.734144, 0, 1.0};
Point(62) = {-0.001532, 0.734110, 0, 1.0};
Point(63) = {0.004613, 0.734077, 0, 1.0};
Point(64) = {0.010723, 0.734044, 0, 1.0};
Point(65) = {0.016761, 0.734011, 0, 1.0};
Point(66) = {0.022686, 0.733979, 0, 1.0};
Point(67) = {0.028462, 0.733948, 0, 1.0};
Point(68) = {0.034051, 0.733916, 0, 1.0};
Point(69) = {0.039407, 0.733887, 0, 1.0};
Point(70) = {0.044476, 0.733860, 0, 1.0};
Point(71) = {0.049218, 0.733835, 0, 1.0};
Point(72) = {0.053648, 0.733810, 0, 1.0};
Point(73) = {0.057776, 0.733787, 0, 1.0};
Point(74) = {0.061556, 0.733767, 0, 1.0};
Point(75) = {0.064946, 0.733749, 0, 1.0};
Point(76) = {0.067903, 0.733732, 0, 1.0};
Point(77) = {0.070388, 0.733719, 0, 1.0};
Point(78) = {0.072365, 0.733708, 0, 1.0};
Point(79) = {0.073802, 0.733701, 0, 1.0};
Point(80) = {0.074674, 0.733696, 0, 1.0};
Point(81) = {-0.074967, -0.733694, 0, 1.0};
Point(82) = {-0.074680, -0.733738, 0, 1.0};
Point(83) = {-0.073837, -0.733886, 0, 1.0};
Point(84) = {-0.072470, -0.734150, 0, 1.0};
Point(85) = {-0.070615, -0.734529, 0, 1.0};
Point(86) = {-0.068294, -0.735014, 0, 1.0};
Point(87) = {-0.065528, -0.735604, 0, 1.0};
Point(88) = {-0.062351, -0.736300, 0, 1.0};
Point(89) = {-0.058798, -0.737094, 0, 1.0};
Point(90) = {-0.054905, -0.737979, 0, 1.0};
Point(91) = {-0.050711, -0.738937, 0, 1.0};
Point(92) = {-0.046256, -0.739955, 0, 1.0};
Point(93) = {-0.041581, -0.741009, 0, 1.0};
Point(94) = {-0.036715, -0.742065, 0, 1.0};
Point(95) = {-0.031677, -0.743101, 0, 1.0};
Point(96) = {-0.026495, -0.744115, 0, 1.0};
Point(97) = {-0.021198, -0.745084, 0, 1.0};
Point(98) = {-0.015813, -0.745998, 0, 1.0};
Point(99) = {-0.010378, -0.746845, 0, 1.0};
Point(100) = {-0.004915, -0.747607, 0, 1.0};
Point(101) = {0.000554, -0.748281, 0, 1.0};
Point(102) = {0.005990, -0.748853, 0, 1.0};
Point(103) = {0.011375, -0.749313, 0, 1.0};
Point(104) = {0.016679, -0.749664, 0, 1.0};
Point(105) = {0.021876, -0.749893, 0, 1.0};
Point(106) = {0.026944, -0.750000, 0, 1.0};
Point(107) = {0.031854, -0.749984, 0, 1.0};
Point(108) = {0.036588, -0.749842, 0, 1.0};
Point(109) = {0.041130, -0.749577, 0, 1.0};
Point(110) = {0.045451, -0.749197, 0, 1.0};
Point(111) = {0.049536, -0.748700, 0, 1.0};
Point(112) = {0.053367, -0.748103, 0, 1.0};
Point(113) = {0.056925, -0.747406, 0, 1.0};
Point(114) = {0.060199, -0.746621, 0, 1.0};
Point(115) = {0.063173, -0.745763, 0, 1.0};
Point(116) = {0.065833, -0.744841, 0, 1.0};
Point(117) = {0.068173, -0.743874, 0, 1.0};
Point(118) = {0.070180, -0.742876, 0, 1.0};
Point(119) = {0.071846, -0.741867, 0, 1.0};
Point(120) = {0.073169, -0.740871, 0, 1.0};
Point(121) = {0.074135, -0.739916, 0, 1.0};
Point(122) = {0.074741, -0.739035, 0, 1.0};
Point(123) = {0.074962, -0.738308, 0, 1.0};
Point(124) = {0.074671, -0.737695, 0, 1.0};
Point(125) = {0.073867, -0.737102, 0, 1.0};
Point(126) = {0.072646, -0.736580, 0, 1.0};
Point(127) = {0.070959, -0.736162, 0, 1.0};
Point(128) = {0.068786, -0.735817, 0, 1.0};
Point(129) = {0.066149, -0.735519, 0, 1.0};
Point(130) = {0.063070, -0.735261, 0, 1.0};
Point(131) = {0.059568, -0.735039, 0, 1.0};
Point(132) = {0.055669, -0.734848, 0, 1.0};
Point(133) = {0.051398, -0.734683, 0, 1.0};
Point(134) = {0.046791, -0.734541, 0, 1.0};
Point(135) = {0.041879, -0.734424, 0, 1.0};
Point(136) = {0.036692, -0.734340, 0, 1.0};
Point(137) = {0.031248, -0.734284, 0, 1.0};
Point(138) = {0.025584, -0.734243, 0, 1.0};
Point(139) = {0.019738, -0.734209, 0, 1.0};
Point(140) = {0.013752, -0.734177, 0, 1.0};
Point(141) = {0.007667, -0.734144, 0, 1.0};
Point(142) = {0.001532, -0.734110, 0, 1.0};
Point(143) = {-0.004613, -0.734077, 0, 1.0};
Point(144) = {-0.010723, -0.734044, 0, 1.0};
Point(145) = {-0.016761, -0.734011, 0, 1.0};
Point(146) = {-0.022686, -0.733979, 0, 1.0};
Point(147) = {-0.028462, -0.733948, 0, 1.0};
Point(148) = {-0.034051, -0.733916, 0, 1.0};
Point(149) = {-0.039407, -0.733887, 0, 1.0};
Point(150) = {-0.044476, -0.733860, 0, 1.0};
Point(151) = {-0.049218, -0.733835, 0, 1.0};
Point(152) = {-0.053648, -0.733810, 0, 1.0};
Point(153) = {-0.057776, -0.733787, 0, 1.0};
Point(154) = {-0.061556, -0.733767, 0, 1.0};
Point(155) = {-0.064946, -0.733749, 0, 1.0};
Point(156) = {-0.067903, -0.733732, 0, 1.0};
Point(157) = {-0.070388, -0.733719, 0, 1.0};
Point(158) = {-0.072365, -0.733708, 0, 1.0};
Point(159) = {-0.073802, -0.733701, 0, 1.0};
Point(160) = {-0.074674, -0.733696, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html