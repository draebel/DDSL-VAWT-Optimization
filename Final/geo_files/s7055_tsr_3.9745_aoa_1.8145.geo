SetFactory("OpenCASCADE");

Point(1) = {0.112425, 0.733696, 0, 1.0};
Point(2) = {0.112138, 0.733739, 0, 1.0};
Point(3) = {0.111295, 0.733887, 0, 1.0};
Point(4) = {0.109928, 0.734151, 0, 1.0};
Point(5) = {0.108074, 0.734530, 0, 1.0};
Point(6) = {0.105752, 0.735015, 0, 1.0};
Point(7) = {0.102987, 0.735605, 0, 1.0};
Point(8) = {0.099809, 0.736301, 0, 1.0};
Point(9) = {0.096257, 0.737095, 0, 1.0};
Point(10) = {0.092365, 0.737979, 0, 1.0};
Point(11) = {0.088171, 0.738938, 0, 1.0};
Point(12) = {0.083716, 0.739955, 0, 1.0};
Point(13) = {0.079041, 0.741010, 0, 1.0};
Point(14) = {0.074176, 0.742066, 0, 1.0};
Point(15) = {0.069138, 0.743102, 0, 1.0};
Point(16) = {0.063956, 0.744116, 0, 1.0};
Point(17) = {0.058659, 0.745085, 0, 1.0};
Point(18) = {0.053275, 0.745998, 0, 1.0};
Point(19) = {0.047841, 0.746846, 0, 1.0};
Point(20) = {0.042378, 0.747607, 0, 1.0};
Point(21) = {0.036910, 0.748282, 0, 1.0};
Point(22) = {0.031474, 0.748853, 0, 1.0};
Point(23) = {0.026089, 0.749313, 0, 1.0};
Point(24) = {0.020786, 0.749664, 0, 1.0};
Point(25) = {0.015589, 0.749893, 0, 1.0};
Point(26) = {0.010521, 0.750000, 0, 1.0};
Point(27) = {0.005611, 0.749984, 0, 1.0};
Point(28) = {0.000878, 0.749842, 0, 1.0};
Point(29) = {-0.003664, 0.749577, 0, 1.0};
Point(30) = {-0.007985, 0.749197, 0, 1.0};
Point(31) = {-0.012069, 0.748700, 0, 1.0};
Point(32) = {-0.015900, 0.748103, 0, 1.0};
Point(33) = {-0.019458, 0.747406, 0, 1.0};
Point(34) = {-0.022732, 0.746622, 0, 1.0};
Point(35) = {-0.025705, 0.745763, 0, 1.0};
Point(36) = {-0.028365, 0.744842, 0, 1.0};
Point(37) = {-0.030705, 0.743874, 0, 1.0};
Point(38) = {-0.032712, 0.742877, 0, 1.0};
Point(39) = {-0.034378, 0.741867, 0, 1.0};
Point(40) = {-0.035700, 0.740872, 0, 1.0};
Point(41) = {-0.036667, 0.739917, 0, 1.0};
Point(42) = {-0.037273, 0.739035, 0, 1.0};
Point(43) = {-0.037494, 0.738308, 0, 1.0};
Point(44) = {-0.037203, 0.737696, 0, 1.0};
Point(45) = {-0.036399, 0.737103, 0, 1.0};
Point(46) = {-0.035177, 0.736581, 0, 1.0};
Point(47) = {-0.033490, 0.736163, 0, 1.0};
Point(48) = {-0.031318, 0.735818, 0, 1.0};
Point(49) = {-0.028681, 0.735520, 0, 1.0};
Point(50) = {-0.025602, 0.735262, 0, 1.0};
Point(51) = {-0.022101, 0.735040, 0, 1.0};
Point(52) = {-0.018202, 0.734849, 0, 1.0};
Point(53) = {-0.013931, 0.734684, 0, 1.0};
Point(54) = {-0.009324, 0.734542, 0, 1.0};
Point(55) = {-0.004413, 0.734426, 0, 1.0};
Point(56) = {0.000774, 0.734341, 0, 1.0};
Point(57) = {0.006217, 0.734285, 0, 1.0};
Point(58) = {0.011881, 0.734244, 0, 1.0};
Point(59) = {0.017727, 0.734210, 0, 1.0};
Point(60) = {0.023713, 0.734178, 0, 1.0};
Point(61) = {0.029797, 0.734145, 0, 1.0};
Point(62) = {0.035931, 0.734111, 0, 1.0};
Point(63) = {0.042076, 0.734078, 0, 1.0};
Point(64) = {0.048186, 0.734045, 0, 1.0};
Point(65) = {0.054224, 0.734012, 0, 1.0};
Point(66) = {0.060148, 0.733980, 0, 1.0};
Point(67) = {0.065923, 0.733949, 0, 1.0};
Point(68) = {0.071512, 0.733917, 0, 1.0};
Point(69) = {0.076868, 0.733889, 0, 1.0};
Point(70) = {0.081936, 0.733862, 0, 1.0};
Point(71) = {0.086678, 0.733836, 0, 1.0};
Point(72) = {0.091107, 0.733811, 0, 1.0};
Point(73) = {0.095235, 0.733788, 0, 1.0};
Point(74) = {0.099015, 0.733768, 0, 1.0};
Point(75) = {0.102404, 0.733750, 0, 1.0};
Point(76) = {0.105362, 0.733733, 0, 1.0};
Point(77) = {0.107847, 0.733721, 0, 1.0};
Point(78) = {0.109823, 0.733709, 0, 1.0};
Point(79) = {0.111260, 0.733702, 0, 1.0};
Point(80) = {0.112132, 0.733697, 0, 1.0};
Point(81) = {-0.112425, -0.733696, 0, 1.0};
Point(82) = {-0.112138, -0.733739, 0, 1.0};
Point(83) = {-0.111295, -0.733887, 0, 1.0};
Point(84) = {-0.109928, -0.734151, 0, 1.0};
Point(85) = {-0.108074, -0.734530, 0, 1.0};
Point(86) = {-0.105752, -0.735015, 0, 1.0};
Point(87) = {-0.102987, -0.735605, 0, 1.0};
Point(88) = {-0.099809, -0.736301, 0, 1.0};
Point(89) = {-0.096257, -0.737095, 0, 1.0};
Point(90) = {-0.092365, -0.737979, 0, 1.0};
Point(91) = {-0.088171, -0.738938, 0, 1.0};
Point(92) = {-0.083716, -0.739955, 0, 1.0};
Point(93) = {-0.079041, -0.741010, 0, 1.0};
Point(94) = {-0.074176, -0.742066, 0, 1.0};
Point(95) = {-0.069138, -0.743102, 0, 1.0};
Point(96) = {-0.063956, -0.744116, 0, 1.0};
Point(97) = {-0.058659, -0.745085, 0, 1.0};
Point(98) = {-0.053275, -0.745998, 0, 1.0};
Point(99) = {-0.047841, -0.746846, 0, 1.0};
Point(100) = {-0.042378, -0.747607, 0, 1.0};
Point(101) = {-0.036910, -0.748282, 0, 1.0};
Point(102) = {-0.031474, -0.748853, 0, 1.0};
Point(103) = {-0.026089, -0.749313, 0, 1.0};
Point(104) = {-0.020786, -0.749664, 0, 1.0};
Point(105) = {-0.015589, -0.749893, 0, 1.0};
Point(106) = {-0.010521, -0.750000, 0, 1.0};
Point(107) = {-0.005611, -0.749984, 0, 1.0};
Point(108) = {-0.000878, -0.749842, 0, 1.0};
Point(109) = {0.003664, -0.749577, 0, 1.0};
Point(110) = {0.007985, -0.749197, 0, 1.0};
Point(111) = {0.012069, -0.748700, 0, 1.0};
Point(112) = {0.015900, -0.748103, 0, 1.0};
Point(113) = {0.019458, -0.747406, 0, 1.0};
Point(114) = {0.022732, -0.746622, 0, 1.0};
Point(115) = {0.025705, -0.745763, 0, 1.0};
Point(116) = {0.028365, -0.744842, 0, 1.0};
Point(117) = {0.030705, -0.743874, 0, 1.0};
Point(118) = {0.032712, -0.742877, 0, 1.0};
Point(119) = {0.034378, -0.741867, 0, 1.0};
Point(120) = {0.035700, -0.740872, 0, 1.0};
Point(121) = {0.036667, -0.739917, 0, 1.0};
Point(122) = {0.037273, -0.739035, 0, 1.0};
Point(123) = {0.037494, -0.738308, 0, 1.0};
Point(124) = {0.037203, -0.737696, 0, 1.0};
Point(125) = {0.036399, -0.737103, 0, 1.0};
Point(126) = {0.035177, -0.736581, 0, 1.0};
Point(127) = {0.033490, -0.736163, 0, 1.0};
Point(128) = {0.031318, -0.735818, 0, 1.0};
Point(129) = {0.028681, -0.735520, 0, 1.0};
Point(130) = {0.025602, -0.735262, 0, 1.0};
Point(131) = {0.022101, -0.735040, 0, 1.0};
Point(132) = {0.018202, -0.734849, 0, 1.0};
Point(133) = {0.013931, -0.734684, 0, 1.0};
Point(134) = {0.009324, -0.734542, 0, 1.0};
Point(135) = {0.004413, -0.734426, 0, 1.0};
Point(136) = {-0.000774, -0.734341, 0, 1.0};
Point(137) = {-0.006217, -0.734285, 0, 1.0};
Point(138) = {-0.011881, -0.734244, 0, 1.0};
Point(139) = {-0.017727, -0.734210, 0, 1.0};
Point(140) = {-0.023713, -0.734178, 0, 1.0};
Point(141) = {-0.029797, -0.734145, 0, 1.0};
Point(142) = {-0.035931, -0.734111, 0, 1.0};
Point(143) = {-0.042076, -0.734078, 0, 1.0};
Point(144) = {-0.048186, -0.734045, 0, 1.0};
Point(145) = {-0.054224, -0.734012, 0, 1.0};
Point(146) = {-0.060148, -0.733980, 0, 1.0};
Point(147) = {-0.065923, -0.733949, 0, 1.0};
Point(148) = {-0.071512, -0.733917, 0, 1.0};
Point(149) = {-0.076868, -0.733889, 0, 1.0};
Point(150) = {-0.081936, -0.733862, 0, 1.0};
Point(151) = {-0.086678, -0.733836, 0, 1.0};
Point(152) = {-0.091107, -0.733811, 0, 1.0};
Point(153) = {-0.095235, -0.733788, 0, 1.0};
Point(154) = {-0.099015, -0.733768, 0, 1.0};
Point(155) = {-0.102404, -0.733750, 0, 1.0};
Point(156) = {-0.105362, -0.733733, 0, 1.0};
Point(157) = {-0.107847, -0.733721, 0, 1.0};
Point(158) = {-0.109823, -0.733709, 0, 1.0};
Point(159) = {-0.111260, -0.733702, 0, 1.0};
Point(160) = {-0.112132, -0.733697, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html