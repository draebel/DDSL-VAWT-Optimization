SetFactory("OpenCASCADE");

Point(1) = {0.149900, 0.728261, 0, 1.0};
Point(2) = {0.149517, 0.728319, 0, 1.0};
Point(3) = {0.148393, 0.728517, 0, 1.0};
Point(4) = {0.146571, 0.728869, 0, 1.0};
Point(5) = {0.144098, 0.729373, 0, 1.0};
Point(6) = {0.141003, 0.730019, 0, 1.0};
Point(7) = {0.137316, 0.730807, 0, 1.0};
Point(8) = {0.133079, 0.731735, 0, 1.0};
Point(9) = {0.128342, 0.732794, 0, 1.0};
Point(10) = {0.123153, 0.733973, 0, 1.0};
Point(11) = {0.117561, 0.735250, 0, 1.0};
Point(12) = {0.111621, 0.736607, 0, 1.0};
Point(13) = {0.105388, 0.738013, 0, 1.0};
Point(14) = {0.098902, 0.739421, 0, 1.0};
Point(15) = {0.092184, 0.740803, 0, 1.0};
Point(16) = {0.085275, 0.742154, 0, 1.0};
Point(17) = {0.078213, 0.743446, 0, 1.0};
Point(18) = {0.071034, 0.744664, 0, 1.0};
Point(19) = {0.063788, 0.745794, 0, 1.0};
Point(20) = {0.056504, 0.746809, 0, 1.0};
Point(21) = {0.049213, 0.747709, 0, 1.0};
Point(22) = {0.041966, 0.748471, 0, 1.0};
Point(23) = {0.034785, 0.749084, 0, 1.0};
Point(24) = {0.027715, 0.749552, 0, 1.0};
Point(25) = {0.020785, 0.749858, 0, 1.0};
Point(26) = {0.014028, 0.750000, 0, 1.0};
Point(27) = {0.007482, 0.749979, 0, 1.0};
Point(28) = {0.001171, 0.749789, 0, 1.0};
Point(29) = {-0.004885, 0.749437, 0, 1.0};
Point(30) = {-0.010646, 0.748929, 0, 1.0};
Point(31) = {-0.016092, 0.748267, 0, 1.0};
Point(32) = {-0.021200, 0.747470, 0, 1.0};
Point(33) = {-0.025944, 0.746542, 0, 1.0};
Point(34) = {-0.030309, 0.745496, 0, 1.0};
Point(35) = {-0.034273, 0.744351, 0, 1.0};
Point(36) = {-0.037820, 0.743122, 0, 1.0};
Point(37) = {-0.040940, 0.741832, 0, 1.0};
Point(38) = {-0.043616, 0.740502, 0, 1.0};
Point(39) = {-0.045837, 0.739156, 0, 1.0};
Point(40) = {-0.047600, 0.737829, 0, 1.0};
Point(41) = {-0.048889, 0.736555, 0, 1.0};
Point(42) = {-0.049697, 0.735380, 0, 1.0};
Point(43) = {-0.049992, 0.734411, 0, 1.0};
Point(44) = {-0.049603, 0.733595, 0, 1.0};
Point(45) = {-0.048532, 0.732804, 0, 1.0};
Point(46) = {-0.046903, 0.732108, 0, 1.0};
Point(47) = {-0.044654, 0.731551, 0, 1.0};
Point(48) = {-0.041757, 0.731091, 0, 1.0};
Point(49) = {-0.038242, 0.730693, 0, 1.0};
Point(50) = {-0.034136, 0.730349, 0, 1.0};
Point(51) = {-0.029467, 0.730053, 0, 1.0};
Point(52) = {-0.024269, 0.729799, 0, 1.0};
Point(53) = {-0.018575, 0.729578, 0, 1.0};
Point(54) = {-0.012432, 0.729389, 0, 1.0};
Point(55) = {-0.005884, 0.729234, 0, 1.0};
Point(56) = {0.001032, 0.729121, 0, 1.0};
Point(57) = {0.008290, 0.729047, 0, 1.0};
Point(58) = {0.015842, 0.728992, 0, 1.0};
Point(59) = {0.023636, 0.728947, 0, 1.0};
Point(60) = {0.031617, 0.728904, 0, 1.0};
Point(61) = {0.039729, 0.728860, 0, 1.0};
Point(62) = {0.047908, 0.728815, 0, 1.0};
Point(63) = {0.056101, 0.728771, 0, 1.0};
Point(64) = {0.064248, 0.728727, 0, 1.0};
Point(65) = {0.072298, 0.728682, 0, 1.0};
Point(66) = {0.080197, 0.728640, 0, 1.0};
Point(67) = {0.087897, 0.728598, 0, 1.0};
Point(68) = {0.095350, 0.728556, 0, 1.0};
Point(69) = {0.102490, 0.728518, 0, 1.0};
Point(70) = {0.109248, 0.728482, 0, 1.0};
Point(71) = {0.115570, 0.728448, 0, 1.0};
Point(72) = {0.121476, 0.728415, 0, 1.0};
Point(73) = {0.126980, 0.728385, 0, 1.0};
Point(74) = {0.132020, 0.728357, 0, 1.0};
Point(75) = {0.136539, 0.728334, 0, 1.0};
Point(76) = {0.140483, 0.728311, 0, 1.0};
Point(77) = {0.143796, 0.728294, 0, 1.0};
Point(78) = {0.146431, 0.728279, 0, 1.0};
Point(79) = {0.148347, 0.728270, 0, 1.0};
Point(80) = {0.149510, 0.728263, 0, 1.0};
Point(81) = {-0.149900, -0.728261, 0, 1.0};
Point(82) = {-0.149517, -0.728319, 0, 1.0};
Point(83) = {-0.148393, -0.728517, 0, 1.0};
Point(84) = {-0.146571, -0.728869, 0, 1.0};
Point(85) = {-0.144098, -0.729373, 0, 1.0};
Point(86) = {-0.141003, -0.730019, 0, 1.0};
Point(87) = {-0.137316, -0.730807, 0, 1.0};
Point(88) = {-0.133079, -0.731735, 0, 1.0};
Point(89) = {-0.128342, -0.732794, 0, 1.0};
Point(90) = {-0.123153, -0.733973, 0, 1.0};
Point(91) = {-0.117561, -0.735250, 0, 1.0};
Point(92) = {-0.111621, -0.736607, 0, 1.0};
Point(93) = {-0.105388, -0.738013, 0, 1.0};
Point(94) = {-0.098902, -0.739421, 0, 1.0};
Point(95) = {-0.092184, -0.740803, 0, 1.0};
Point(96) = {-0.085275, -0.742154, 0, 1.0};
Point(97) = {-0.078213, -0.743446, 0, 1.0};
Point(98) = {-0.071034, -0.744664, 0, 1.0};
Point(99) = {-0.063788, -0.745794, 0, 1.0};
Point(100) = {-0.056504, -0.746809, 0, 1.0};
Point(101) = {-0.049213, -0.747709, 0, 1.0};
Point(102) = {-0.041966, -0.748471, 0, 1.0};
Point(103) = {-0.034785, -0.749084, 0, 1.0};
Point(104) = {-0.027715, -0.749552, 0, 1.0};
Point(105) = {-0.020785, -0.749858, 0, 1.0};
Point(106) = {-0.014028, -0.750000, 0, 1.0};
Point(107) = {-0.007482, -0.749979, 0, 1.0};
Point(108) = {-0.001171, -0.749789, 0, 1.0};
Point(109) = {0.004885, -0.749437, 0, 1.0};
Point(110) = {0.010646, -0.748929, 0, 1.0};
Point(111) = {0.016092, -0.748267, 0, 1.0};
Point(112) = {0.021200, -0.747470, 0, 1.0};
Point(113) = {0.025944, -0.746542, 0, 1.0};
Point(114) = {0.030309, -0.745496, 0, 1.0};
Point(115) = {0.034273, -0.744351, 0, 1.0};
Point(116) = {0.037820, -0.743122, 0, 1.0};
Point(117) = {0.040940, -0.741832, 0, 1.0};
Point(118) = {0.043616, -0.740502, 0, 1.0};
Point(119) = {0.045837, -0.739156, 0, 1.0};
Point(120) = {0.047600, -0.737829, 0, 1.0};
Point(121) = {0.048889, -0.736555, 0, 1.0};
Point(122) = {0.049697, -0.735380, 0, 1.0};
Point(123) = {0.049992, -0.734411, 0, 1.0};
Point(124) = {0.049603, -0.733595, 0, 1.0};
Point(125) = {0.048532, -0.732804, 0, 1.0};
Point(126) = {0.046903, -0.732108, 0, 1.0};
Point(127) = {0.044654, -0.731551, 0, 1.0};
Point(128) = {0.041757, -0.731091, 0, 1.0};
Point(129) = {0.038242, -0.730693, 0, 1.0};
Point(130) = {0.034136, -0.730349, 0, 1.0};
Point(131) = {0.029467, -0.730053, 0, 1.0};
Point(132) = {0.024269, -0.729799, 0, 1.0};
Point(133) = {0.018575, -0.729578, 0, 1.0};
Point(134) = {0.012432, -0.729389, 0, 1.0};
Point(135) = {0.005884, -0.729234, 0, 1.0};
Point(136) = {-0.001032, -0.729121, 0, 1.0};
Point(137) = {-0.008290, -0.729047, 0, 1.0};
Point(138) = {-0.015842, -0.728992, 0, 1.0};
Point(139) = {-0.023636, -0.728947, 0, 1.0};
Point(140) = {-0.031617, -0.728904, 0, 1.0};
Point(141) = {-0.039729, -0.728860, 0, 1.0};
Point(142) = {-0.047908, -0.728815, 0, 1.0};
Point(143) = {-0.056101, -0.728771, 0, 1.0};
Point(144) = {-0.064248, -0.728727, 0, 1.0};
Point(145) = {-0.072298, -0.728682, 0, 1.0};
Point(146) = {-0.080197, -0.728640, 0, 1.0};
Point(147) = {-0.087897, -0.728598, 0, 1.0};
Point(148) = {-0.095350, -0.728556, 0, 1.0};
Point(149) = {-0.102490, -0.728518, 0, 1.0};
Point(150) = {-0.109248, -0.728482, 0, 1.0};
Point(151) = {-0.115570, -0.728448, 0, 1.0};
Point(152) = {-0.121476, -0.728415, 0, 1.0};
Point(153) = {-0.126980, -0.728385, 0, 1.0};
Point(154) = {-0.132020, -0.728357, 0, 1.0};
Point(155) = {-0.136539, -0.728334, 0, 1.0};
Point(156) = {-0.140483, -0.728311, 0, 1.0};
Point(157) = {-0.143796, -0.728294, 0, 1.0};
Point(158) = {-0.146431, -0.728279, 0, 1.0};
Point(159) = {-0.148347, -0.728270, 0, 1.0};
Point(160) = {-0.149510, -0.728263, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html