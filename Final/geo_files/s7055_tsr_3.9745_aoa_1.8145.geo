SetFactory("OpenCASCADE");

Point(1) = {0.074950, 0.739130, 0, 1.0};
Point(2) = {0.074759, 0.739159, 0, 1.0};
Point(3) = {0.074197, 0.739258, 0, 1.0};
Point(4) = {0.073286, 0.739434, 0, 1.0};
Point(5) = {0.072049, 0.739687, 0, 1.0};
Point(6) = {0.070501, 0.740010, 0, 1.0};
Point(7) = {0.068658, 0.740403, 0, 1.0};
Point(8) = {0.066540, 0.740868, 0, 1.0};
Point(9) = {0.064171, 0.741397, 0, 1.0};
Point(10) = {0.061577, 0.741986, 0, 1.0};
Point(11) = {0.058780, 0.742625, 0, 1.0};
Point(12) = {0.055810, 0.743304, 0, 1.0};
Point(13) = {0.052694, 0.744007, 0, 1.0};
Point(14) = {0.049451, 0.744711, 0, 1.0};
Point(15) = {0.046092, 0.745401, 0, 1.0};
Point(16) = {0.042638, 0.746077, 0, 1.0};
Point(17) = {0.039106, 0.746723, 0, 1.0};
Point(18) = {0.035517, 0.747332, 0, 1.0};
Point(19) = {0.031894, 0.747897, 0, 1.0};
Point(20) = {0.028252, 0.748405, 0, 1.0};
Point(21) = {0.024607, 0.748854, 0, 1.0};
Point(22) = {0.020983, 0.749235, 0, 1.0};
Point(23) = {0.017393, 0.749542, 0, 1.0};
Point(24) = {0.013857, 0.749776, 0, 1.0};
Point(25) = {0.010392, 0.749929, 0, 1.0};
Point(26) = {0.007014, 0.750000, 0, 1.0};
Point(27) = {0.003741, 0.749990, 0, 1.0};
Point(28) = {0.000585, 0.749895, 0, 1.0};
Point(29) = {-0.002443, 0.749718, 0, 1.0};
Point(30) = {-0.005323, 0.749464, 0, 1.0};
Point(31) = {-0.008046, 0.749133, 0, 1.0};
Point(32) = {-0.010600, 0.748735, 0, 1.0};
Point(33) = {-0.012972, 0.748271, 0, 1.0};
Point(34) = {-0.015154, 0.747748, 0, 1.0};
Point(35) = {-0.017137, 0.747175, 0, 1.0};
Point(36) = {-0.018910, 0.746561, 0, 1.0};
Point(37) = {-0.020470, 0.745916, 0, 1.0};
Point(38) = {-0.021808, 0.745251, 0, 1.0};
Point(39) = {-0.022919, 0.744578, 0, 1.0};
Point(40) = {-0.023800, 0.743915, 0, 1.0};
Point(41) = {-0.024445, 0.743278, 0, 1.0};
Point(42) = {-0.024848, 0.742690, 0, 1.0};
Point(43) = {-0.024996, 0.742206, 0, 1.0};
Point(44) = {-0.024802, 0.741797, 0, 1.0};
Point(45) = {-0.024266, 0.741402, 0, 1.0};
Point(46) = {-0.023452, 0.741054, 0, 1.0};
Point(47) = {-0.022327, 0.740775, 0, 1.0};
Point(48) = {-0.020878, 0.740545, 0, 1.0};
Point(49) = {-0.019121, 0.740347, 0, 1.0};
Point(50) = {-0.017068, 0.740175, 0, 1.0};
Point(51) = {-0.014734, 0.740027, 0, 1.0};
Point(52) = {-0.012134, 0.739899, 0, 1.0};
Point(53) = {-0.009288, 0.739789, 0, 1.0};
Point(54) = {-0.006216, 0.739695, 0, 1.0};
Point(55) = {-0.002942, 0.739617, 0, 1.0};
Point(56) = {0.000516, 0.739561, 0, 1.0};
Point(57) = {0.004145, 0.739524, 0, 1.0};
Point(58) = {0.007921, 0.739496, 0, 1.0};
Point(59) = {0.011818, 0.739474, 0, 1.0};
Point(60) = {0.015808, 0.739452, 0, 1.0};
Point(61) = {0.019865, 0.739430, 0, 1.0};
Point(62) = {0.023954, 0.739407, 0, 1.0};
Point(63) = {0.028050, 0.739386, 0, 1.0};
Point(64) = {0.032124, 0.739364, 0, 1.0};
Point(65) = {0.036149, 0.739341, 0, 1.0};
Point(66) = {0.040098, 0.739320, 0, 1.0};
Point(67) = {0.043949, 0.739299, 0, 1.0};
Point(68) = {0.047675, 0.739278, 0, 1.0};
Point(69) = {0.051245, 0.739259, 0, 1.0};
Point(70) = {0.054624, 0.739241, 0, 1.0};
Point(71) = {0.057785, 0.739224, 0, 1.0};
Point(72) = {0.060738, 0.739207, 0, 1.0};
Point(73) = {0.063490, 0.739192, 0, 1.0};
Point(74) = {0.066010, 0.739179, 0, 1.0};
Point(75) = {0.068270, 0.739167, 0, 1.0};
Point(76) = {0.070241, 0.739156, 0, 1.0};
Point(77) = {0.071898, 0.739147, 0, 1.0};
Point(78) = {0.073215, 0.739139, 0, 1.0};
Point(79) = {0.074174, 0.739135, 0, 1.0};
Point(80) = {0.074755, 0.739132, 0, 1.0};
Point(81) = {-0.074950, -0.739130, 0, 1.0};
Point(82) = {-0.074759, -0.739159, 0, 1.0};
Point(83) = {-0.074197, -0.739258, 0, 1.0};
Point(84) = {-0.073286, -0.739434, 0, 1.0};
Point(85) = {-0.072049, -0.739687, 0, 1.0};
Point(86) = {-0.070501, -0.740010, 0, 1.0};
Point(87) = {-0.068658, -0.740403, 0, 1.0};
Point(88) = {-0.066540, -0.740868, 0, 1.0};
Point(89) = {-0.064171, -0.741397, 0, 1.0};
Point(90) = {-0.061577, -0.741986, 0, 1.0};
Point(91) = {-0.058780, -0.742625, 0, 1.0};
Point(92) = {-0.055810, -0.743304, 0, 1.0};
Point(93) = {-0.052694, -0.744007, 0, 1.0};
Point(94) = {-0.049451, -0.744711, 0, 1.0};
Point(95) = {-0.046092, -0.745401, 0, 1.0};
Point(96) = {-0.042638, -0.746077, 0, 1.0};
Point(97) = {-0.039106, -0.746723, 0, 1.0};
Point(98) = {-0.035517, -0.747332, 0, 1.0};
Point(99) = {-0.031894, -0.747897, 0, 1.0};
Point(100) = {-0.028252, -0.748405, 0, 1.0};
Point(101) = {-0.024607, -0.748854, 0, 1.0};
Point(102) = {-0.020983, -0.749235, 0, 1.0};
Point(103) = {-0.017393, -0.749542, 0, 1.0};
Point(104) = {-0.013857, -0.749776, 0, 1.0};
Point(105) = {-0.010392, -0.749929, 0, 1.0};
Point(106) = {-0.007014, -0.750000, 0, 1.0};
Point(107) = {-0.003741, -0.749990, 0, 1.0};
Point(108) = {-0.000585, -0.749895, 0, 1.0};
Point(109) = {0.002443, -0.749718, 0, 1.0};
Point(110) = {0.005323, -0.749464, 0, 1.0};
Point(111) = {0.008046, -0.749133, 0, 1.0};
Point(112) = {0.010600, -0.748735, 0, 1.0};
Point(113) = {0.012972, -0.748271, 0, 1.0};
Point(114) = {0.015154, -0.747748, 0, 1.0};
Point(115) = {0.017137, -0.747175, 0, 1.0};
Point(116) = {0.018910, -0.746561, 0, 1.0};
Point(117) = {0.020470, -0.745916, 0, 1.0};
Point(118) = {0.021808, -0.745251, 0, 1.0};
Point(119) = {0.022919, -0.744578, 0, 1.0};
Point(120) = {0.023800, -0.743915, 0, 1.0};
Point(121) = {0.024445, -0.743278, 0, 1.0};
Point(122) = {0.024848, -0.742690, 0, 1.0};
Point(123) = {0.024996, -0.742206, 0, 1.0};
Point(124) = {0.024802, -0.741797, 0, 1.0};
Point(125) = {0.024266, -0.741402, 0, 1.0};
Point(126) = {0.023452, -0.741054, 0, 1.0};
Point(127) = {0.022327, -0.740775, 0, 1.0};
Point(128) = {0.020878, -0.740545, 0, 1.0};
Point(129) = {0.019121, -0.740347, 0, 1.0};
Point(130) = {0.017068, -0.740175, 0, 1.0};
Point(131) = {0.014734, -0.740027, 0, 1.0};
Point(132) = {0.012134, -0.739899, 0, 1.0};
Point(133) = {0.009288, -0.739789, 0, 1.0};
Point(134) = {0.006216, -0.739695, 0, 1.0};
Point(135) = {0.002942, -0.739617, 0, 1.0};
Point(136) = {-0.000516, -0.739561, 0, 1.0};
Point(137) = {-0.004145, -0.739524, 0, 1.0};
Point(138) = {-0.007921, -0.739496, 0, 1.0};
Point(139) = {-0.011818, -0.739474, 0, 1.0};
Point(140) = {-0.015808, -0.739452, 0, 1.0};
Point(141) = {-0.019865, -0.739430, 0, 1.0};
Point(142) = {-0.023954, -0.739407, 0, 1.0};
Point(143) = {-0.028050, -0.739386, 0, 1.0};
Point(144) = {-0.032124, -0.739364, 0, 1.0};
Point(145) = {-0.036149, -0.739341, 0, 1.0};
Point(146) = {-0.040098, -0.739320, 0, 1.0};
Point(147) = {-0.043949, -0.739299, 0, 1.0};
Point(148) = {-0.047675, -0.739278, 0, 1.0};
Point(149) = {-0.051245, -0.739259, 0, 1.0};
Point(150) = {-0.054624, -0.739241, 0, 1.0};
Point(151) = {-0.057785, -0.739224, 0, 1.0};
Point(152) = {-0.060738, -0.739207, 0, 1.0};
Point(153) = {-0.063490, -0.739192, 0, 1.0};
Point(154) = {-0.066010, -0.739179, 0, 1.0};
Point(155) = {-0.068270, -0.739167, 0, 1.0};
Point(156) = {-0.070241, -0.739156, 0, 1.0};
Point(157) = {-0.071898, -0.739147, 0, 1.0};
Point(158) = {-0.073215, -0.739139, 0, 1.0};
Point(159) = {-0.074174, -0.739135, 0, 1.0};
Point(160) = {-0.074755, -0.739132, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html