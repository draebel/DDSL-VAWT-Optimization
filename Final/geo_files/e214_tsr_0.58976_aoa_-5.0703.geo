SetFactory("OpenCASCADE");

Point(1) = {0.149217, 0.741002, 0, 1.0};
Point(2) = {0.148540, 0.741151, 0, 1.0};
Point(3) = {0.146627, 0.741620, 0, 1.0};
Point(4) = {0.143701, 0.742352, 0, 1.0};
Point(5) = {0.139850, 0.743185, 0, 1.0};
Point(6) = {0.135055, 0.744041, 0, 1.0};
Point(7) = {0.129351, 0.744928, 0, 1.0};
Point(8) = {0.122831, 0.745841, 0, 1.0};
Point(9) = {0.115595, 0.746741, 0, 1.0};
Point(10) = {0.107727, 0.747571, 0, 1.0};
Point(11) = {0.099291, 0.748301, 0, 1.0};
Point(12) = {0.090367, 0.748920, 0, 1.0};
Point(13) = {0.081066, 0.749426, 0, 1.0};
Point(14) = {0.071500, 0.749794, 0, 1.0};
Point(15) = {0.061784, 0.749999, 0, 1.0};
Point(16) = {0.052024, 0.750000, 0, 1.0};
Point(17) = {0.042308, 0.749774, 0, 1.0};
Point(18) = {0.032720, 0.749301, 0, 1.0};
Point(19) = {0.023346, 0.748572, 0, 1.0};
Point(20) = {0.014260, 0.747583, 0, 1.0};
Point(21) = {0.005531, 0.746341, 0, 1.0};
Point(22) = {-0.002771, 0.744863, 0, 1.0};
Point(23) = {-0.010580, 0.743173, 0, 1.0};
Point(24) = {-0.017831, 0.741304, 0, 1.0};
Point(25) = {-0.024463, 0.739290, 0, 1.0};
Point(26) = {-0.030417, 0.737168, 0, 1.0};
Point(27) = {-0.035643, 0.734977, 0, 1.0};
Point(28) = {-0.040096, 0.732755, 0, 1.0};
Point(29) = {-0.043746, 0.730550, 0, 1.0};
Point(30) = {-0.046568, 0.728408, 0, 1.0};
Point(31) = {-0.048554, 0.726397, 0, 1.0};
Point(32) = {-0.049691, 0.724597, 0, 1.0};
Point(33) = {-0.049975, 0.723157, 0, 1.0};
Point(34) = {-0.049171, 0.722132, 0, 1.0};
Point(35) = {-0.047166, 0.721396, 0, 1.0};
Point(36) = {-0.044101, 0.720889, 0, 1.0};
Point(37) = {-0.040007, 0.720632, 0, 1.0};
Point(38) = {-0.034922, 0.720627, 0, 1.0};
Point(39) = {-0.028887, 0.720861, 0, 1.0};
Point(40) = {-0.021965, 0.721325, 0, 1.0};
Point(41) = {-0.014224, 0.721994, 0, 1.0};
Point(42) = {-0.005751, 0.722850, 0, 1.0};
Point(43) = {0.003359, 0.723873, 0, 1.0};
Point(44) = {0.012993, 0.725045, 0, 1.0};
Point(45) = {0.023034, 0.726351, 0, 1.0};
Point(46) = {0.033358, 0.727806, 0, 1.0};
Point(47) = {0.043886, 0.729448, 0, 1.0};
Point(48) = {0.054609, 0.731247, 0, 1.0};
Point(49) = {0.065454, 0.733079, 0, 1.0};
Point(50) = {0.076276, 0.734842, 0, 1.0};
Point(51) = {0.086914, 0.736469, 0, 1.0};
Point(52) = {0.097206, 0.737906, 0, 1.0};
Point(53) = {0.106986, 0.739109, 0, 1.0};
Point(54) = {0.116093, 0.740059, 0, 1.0};
Point(55) = {0.124367, 0.740745, 0, 1.0};
Point(56) = {0.131663, 0.741176, 0, 1.0};
Point(57) = {0.137845, 0.741367, 0, 1.0};
Point(58) = {0.142779, 0.741357, 0, 1.0};
Point(59) = {0.146351, 0.741220, 0, 1.0};
Point(60) = {0.148501, 0.741069, 0, 1.0};
Point(61) = {-0.149217, -0.741002, 0, 1.0};
Point(62) = {-0.148540, -0.741151, 0, 1.0};
Point(63) = {-0.146627, -0.741620, 0, 1.0};
Point(64) = {-0.143701, -0.742352, 0, 1.0};
Point(65) = {-0.139850, -0.743185, 0, 1.0};
Point(66) = {-0.135055, -0.744041, 0, 1.0};
Point(67) = {-0.129351, -0.744928, 0, 1.0};
Point(68) = {-0.122831, -0.745841, 0, 1.0};
Point(69) = {-0.115595, -0.746741, 0, 1.0};
Point(70) = {-0.107727, -0.747571, 0, 1.0};
Point(71) = {-0.099291, -0.748301, 0, 1.0};
Point(72) = {-0.090367, -0.748920, 0, 1.0};
Point(73) = {-0.081066, -0.749426, 0, 1.0};
Point(74) = {-0.071500, -0.749794, 0, 1.0};
Point(75) = {-0.061784, -0.749999, 0, 1.0};
Point(76) = {-0.052024, -0.750000, 0, 1.0};
Point(77) = {-0.042308, -0.749774, 0, 1.0};
Point(78) = {-0.032720, -0.749301, 0, 1.0};
Point(79) = {-0.023346, -0.748572, 0, 1.0};
Point(80) = {-0.014260, -0.747583, 0, 1.0};
Point(81) = {-0.005531, -0.746341, 0, 1.0};
Point(82) = {0.002771, -0.744863, 0, 1.0};
Point(83) = {0.010580, -0.743173, 0, 1.0};
Point(84) = {0.017831, -0.741304, 0, 1.0};
Point(85) = {0.024463, -0.739290, 0, 1.0};
Point(86) = {0.030417, -0.737168, 0, 1.0};
Point(87) = {0.035643, -0.734977, 0, 1.0};
Point(88) = {0.040096, -0.732755, 0, 1.0};
Point(89) = {0.043746, -0.730550, 0, 1.0};
Point(90) = {0.046568, -0.728408, 0, 1.0};
Point(91) = {0.048554, -0.726397, 0, 1.0};
Point(92) = {0.049691, -0.724597, 0, 1.0};
Point(93) = {0.049975, -0.723157, 0, 1.0};
Point(94) = {0.049171, -0.722132, 0, 1.0};
Point(95) = {0.047166, -0.721396, 0, 1.0};
Point(96) = {0.044101, -0.720889, 0, 1.0};
Point(97) = {0.040007, -0.720632, 0, 1.0};
Point(98) = {0.034922, -0.720627, 0, 1.0};
Point(99) = {0.028887, -0.720861, 0, 1.0};
Point(100) = {0.021965, -0.721325, 0, 1.0};
Point(101) = {0.014224, -0.721994, 0, 1.0};
Point(102) = {0.005751, -0.722850, 0, 1.0};
Point(103) = {-0.003359, -0.723873, 0, 1.0};
Point(104) = {-0.012993, -0.725045, 0, 1.0};
Point(105) = {-0.023034, -0.726351, 0, 1.0};
Point(106) = {-0.033358, -0.727806, 0, 1.0};
Point(107) = {-0.043886, -0.729448, 0, 1.0};
Point(108) = {-0.054609, -0.731247, 0, 1.0};
Point(109) = {-0.065454, -0.733079, 0, 1.0};
Point(110) = {-0.076276, -0.734842, 0, 1.0};
Point(111) = {-0.086914, -0.736469, 0, 1.0};
Point(112) = {-0.097206, -0.737906, 0, 1.0};
Point(113) = {-0.106986, -0.739109, 0, 1.0};
Point(114) = {-0.116093, -0.740059, 0, 1.0};
Point(115) = {-0.124367, -0.740745, 0, 1.0};
Point(116) = {-0.131663, -0.741176, 0, 1.0};
Point(117) = {-0.137845, -0.741367, 0, 1.0};
Point(118) = {-0.142779, -0.741357, 0, 1.0};
Point(119) = {-0.146351, -0.741220, 0, 1.0};
Point(120) = {-0.148501, -0.741069, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html