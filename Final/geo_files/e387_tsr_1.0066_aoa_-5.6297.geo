SetFactory("OpenCASCADE");

Point(1) = {0.149035, 0.744879, 0, 1.0};
Point(2) = {0.148384, 0.744901, 0, 1.0};
Point(3) = {0.146470, 0.744988, 0, 1.0};
Point(4) = {0.143375, 0.745171, 0, 1.0};
Point(5) = {0.139189, 0.745442, 0, 1.0};
Point(6) = {0.133983, 0.745775, 0, 1.0};
Point(7) = {0.127827, 0.746163, 0, 1.0};
Point(8) = {0.120800, 0.746602, 0, 1.0};
Point(9) = {0.113011, 0.747088, 0, 1.0};
Point(10) = {0.104567, 0.747610, 0, 1.0};
Point(11) = {0.095591, 0.748150, 0, 1.0};
Point(12) = {0.086203, 0.748684, 0, 1.0};
Point(13) = {0.076536, 0.749180, 0, 1.0};
Point(14) = {0.066719, 0.749607, 0, 1.0};
Point(15) = {0.056886, 0.749904, 0, 1.0};
Point(16) = {0.047140, 0.750000, 0, 1.0};
Point(17) = {0.037545, 0.749838, 0, 1.0};
Point(18) = {0.028164, 0.749390, 0, 1.0};
Point(19) = {0.019049, 0.748640, 0, 1.0};
Point(20) = {0.010256, 0.747590, 0, 1.0};
Point(21) = {0.001816, 0.746260, 0, 1.0};
Point(22) = {-0.006213, 0.744707, 0, 1.0};
Point(23) = {-0.013751, 0.742975, 0, 1.0};
Point(24) = {-0.020723, 0.741104, 0, 1.0};
Point(25) = {-0.027062, 0.739127, 0, 1.0};
Point(26) = {-0.032706, 0.737079, 0, 1.0};
Point(27) = {-0.037610, 0.734998, 0, 1.0};
Point(28) = {-0.041726, 0.732924, 0, 1.0};
Point(29) = {-0.045033, 0.730898, 0, 1.0};
Point(30) = {-0.047506, 0.728974, 0, 1.0};
Point(31) = {-0.049150, 0.727214, 0, 1.0};
Point(32) = {-0.049958, 0.725734, 0, 1.0};
Point(33) = {-0.049763, 0.724708, 0, 1.0};
Point(34) = {-0.048439, 0.724043, 0, 1.0};
Point(35) = {-0.046039, 0.723606, 0, 1.0};
Point(36) = {-0.042595, 0.723447, 0, 1.0};
Point(37) = {-0.038123, 0.723566, 0, 1.0};
Point(38) = {-0.032650, 0.723955, 0, 1.0};
Point(39) = {-0.026219, 0.724585, 0, 1.0};
Point(40) = {-0.018887, 0.725430, 0, 1.0};
Point(41) = {-0.010730, 0.726460, 0, 1.0};
Point(42) = {-0.001835, 0.727642, 0, 1.0};
Point(43) = {0.007701, 0.728942, 0, 1.0};
Point(44) = {0.017766, 0.730324, 0, 1.0};
Point(45) = {0.028244, 0.731756, 0, 1.0};
Point(46) = {0.039007, 0.733209, 0, 1.0};
Point(47) = {0.049925, 0.734651, 0, 1.0};
Point(48) = {0.060863, 0.736057, 0, 1.0};
Point(49) = {0.071690, 0.737404, 0, 1.0};
Point(50) = {0.082266, 0.738671, 0, 1.0};
Point(51) = {0.092461, 0.739841, 0, 1.0};
Point(52) = {0.102149, 0.740900, 0, 1.0};
Point(53) = {0.111205, 0.741837, 0, 1.0};
Point(54) = {0.119516, 0.742647, 0, 1.0};
Point(55) = {0.126970, 0.743321, 0, 1.0};
Point(56) = {0.133470, 0.743863, 0, 1.0};
Point(57) = {0.138930, 0.744277, 0, 1.0};
Point(58) = {0.143273, 0.744576, 0, 1.0};
Point(59) = {0.146444, 0.744766, 0, 1.0};
Point(60) = {0.148382, 0.744857, 0, 1.0};
Point(61) = {-0.149035, -0.744879, 0, 1.0};
Point(62) = {-0.148384, -0.744901, 0, 1.0};
Point(63) = {-0.146470, -0.744988, 0, 1.0};
Point(64) = {-0.143375, -0.745171, 0, 1.0};
Point(65) = {-0.139189, -0.745442, 0, 1.0};
Point(66) = {-0.133983, -0.745775, 0, 1.0};
Point(67) = {-0.127827, -0.746163, 0, 1.0};
Point(68) = {-0.120800, -0.746602, 0, 1.0};
Point(69) = {-0.113011, -0.747088, 0, 1.0};
Point(70) = {-0.104567, -0.747610, 0, 1.0};
Point(71) = {-0.095591, -0.748150, 0, 1.0};
Point(72) = {-0.086203, -0.748684, 0, 1.0};
Point(73) = {-0.076536, -0.749180, 0, 1.0};
Point(74) = {-0.066719, -0.749607, 0, 1.0};
Point(75) = {-0.056886, -0.749904, 0, 1.0};
Point(76) = {-0.047140, -0.750000, 0, 1.0};
Point(77) = {-0.037545, -0.749838, 0, 1.0};
Point(78) = {-0.028164, -0.749390, 0, 1.0};
Point(79) = {-0.019049, -0.748640, 0, 1.0};
Point(80) = {-0.010256, -0.747590, 0, 1.0};
Point(81) = {-0.001816, -0.746260, 0, 1.0};
Point(82) = {0.006213, -0.744707, 0, 1.0};
Point(83) = {0.013751, -0.742975, 0, 1.0};
Point(84) = {0.020723, -0.741104, 0, 1.0};
Point(85) = {0.027062, -0.739127, 0, 1.0};
Point(86) = {0.032706, -0.737079, 0, 1.0};
Point(87) = {0.037610, -0.734998, 0, 1.0};
Point(88) = {0.041726, -0.732924, 0, 1.0};
Point(89) = {0.045033, -0.730898, 0, 1.0};
Point(90) = {0.047506, -0.728974, 0, 1.0};
Point(91) = {0.049150, -0.727214, 0, 1.0};
Point(92) = {0.049958, -0.725734, 0, 1.0};
Point(93) = {0.049763, -0.724708, 0, 1.0};
Point(94) = {0.048439, -0.724043, 0, 1.0};
Point(95) = {0.046039, -0.723606, 0, 1.0};
Point(96) = {0.042595, -0.723447, 0, 1.0};
Point(97) = {0.038123, -0.723566, 0, 1.0};
Point(98) = {0.032650, -0.723955, 0, 1.0};
Point(99) = {0.026219, -0.724585, 0, 1.0};
Point(100) = {0.018887, -0.725430, 0, 1.0};
Point(101) = {0.010730, -0.726460, 0, 1.0};
Point(102) = {0.001835, -0.727642, 0, 1.0};
Point(103) = {-0.007701, -0.728942, 0, 1.0};
Point(104) = {-0.017766, -0.730324, 0, 1.0};
Point(105) = {-0.028244, -0.731756, 0, 1.0};
Point(106) = {-0.039007, -0.733209, 0, 1.0};
Point(107) = {-0.049925, -0.734651, 0, 1.0};
Point(108) = {-0.060863, -0.736057, 0, 1.0};
Point(109) = {-0.071690, -0.737404, 0, 1.0};
Point(110) = {-0.082266, -0.738671, 0, 1.0};
Point(111) = {-0.092461, -0.739841, 0, 1.0};
Point(112) = {-0.102149, -0.740900, 0, 1.0};
Point(113) = {-0.111205, -0.741837, 0, 1.0};
Point(114) = {-0.119516, -0.742647, 0, 1.0};
Point(115) = {-0.126970, -0.743321, 0, 1.0};
Point(116) = {-0.133470, -0.743863, 0, 1.0};
Point(117) = {-0.138930, -0.744277, 0, 1.0};
Point(118) = {-0.143273, -0.744576, 0, 1.0};
Point(119) = {-0.146444, -0.744766, 0, 1.0};
Point(120) = {-0.148382, -0.744857, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html