SetFactory("OpenCASCADE");

Point(1) = {0.111777, 0.746159, 0, 1.0};
Point(2) = {0.111288, 0.746176, 0, 1.0};
Point(3) = {0.109853, 0.746241, 0, 1.0};
Point(4) = {0.107532, 0.746378, 0, 1.0};
Point(5) = {0.104391, 0.746581, 0, 1.0};
Point(6) = {0.100487, 0.746831, 0, 1.0};
Point(7) = {0.095870, 0.747122, 0, 1.0};
Point(8) = {0.090600, 0.747451, 0, 1.0};
Point(9) = {0.084758, 0.747816, 0, 1.0};
Point(10) = {0.078425, 0.748208, 0, 1.0};
Point(11) = {0.071693, 0.748613, 0, 1.0};
Point(12) = {0.064652, 0.749013, 0, 1.0};
Point(13) = {0.057402, 0.749385, 0, 1.0};
Point(14) = {0.050039, 0.749705, 0, 1.0};
Point(15) = {0.042664, 0.749928, 0, 1.0};
Point(16) = {0.035355, 0.750000, 0, 1.0};
Point(17) = {0.028159, 0.749879, 0, 1.0};
Point(18) = {0.021123, 0.749542, 0, 1.0};
Point(19) = {0.014287, 0.748980, 0, 1.0};
Point(20) = {0.007692, 0.748193, 0, 1.0};
Point(21) = {0.001362, 0.747195, 0, 1.0};
Point(22) = {-0.004659, 0.746030, 0, 1.0};
Point(23) = {-0.010313, 0.744731, 0, 1.0};
Point(24) = {-0.015542, 0.743328, 0, 1.0};
Point(25) = {-0.020296, 0.741845, 0, 1.0};
Point(26) = {-0.024530, 0.740309, 0, 1.0};
Point(27) = {-0.028207, 0.738748, 0, 1.0};
Point(28) = {-0.031294, 0.737193, 0, 1.0};
Point(29) = {-0.033775, 0.735673, 0, 1.0};
Point(30) = {-0.035630, 0.734230, 0, 1.0};
Point(31) = {-0.036862, 0.732911, 0, 1.0};
Point(32) = {-0.037469, 0.731800, 0, 1.0};
Point(33) = {-0.037322, 0.731031, 0, 1.0};
Point(34) = {-0.036329, 0.730532, 0, 1.0};
Point(35) = {-0.034529, 0.730205, 0, 1.0};
Point(36) = {-0.031946, 0.730085, 0, 1.0};
Point(37) = {-0.028592, 0.730175, 0, 1.0};
Point(38) = {-0.024488, 0.730466, 0, 1.0};
Point(39) = {-0.019664, 0.730939, 0, 1.0};
Point(40) = {-0.014165, 0.731573, 0, 1.0};
Point(41) = {-0.008048, 0.732345, 0, 1.0};
Point(42) = {-0.001377, 0.733231, 0, 1.0};
Point(43) = {0.005776, 0.734206, 0, 1.0};
Point(44) = {0.013325, 0.735243, 0, 1.0};
Point(45) = {0.021183, 0.736317, 0, 1.0};
Point(46) = {0.029256, 0.737407, 0, 1.0};
Point(47) = {0.037443, 0.738488, 0, 1.0};
Point(48) = {0.045648, 0.739543, 0, 1.0};
Point(49) = {0.053767, 0.740553, 0, 1.0};
Point(50) = {0.061700, 0.741503, 0, 1.0};
Point(51) = {0.069346, 0.742381, 0, 1.0};
Point(52) = {0.076612, 0.743175, 0, 1.0};
Point(53) = {0.083404, 0.743878, 0, 1.0};
Point(54) = {0.089637, 0.744485, 0, 1.0};
Point(55) = {0.095227, 0.744991, 0, 1.0};
Point(56) = {0.100102, 0.745397, 0, 1.0};
Point(57) = {0.104197, 0.745708, 0, 1.0};
Point(58) = {0.107455, 0.745932, 0, 1.0};
Point(59) = {0.109833, 0.746075, 0, 1.0};
Point(60) = {0.111287, 0.746143, 0, 1.0};
Point(61) = {-0.111777, -0.746159, 0, 1.0};
Point(62) = {-0.111288, -0.746176, 0, 1.0};
Point(63) = {-0.109853, -0.746241, 0, 1.0};
Point(64) = {-0.107532, -0.746378, 0, 1.0};
Point(65) = {-0.104391, -0.746581, 0, 1.0};
Point(66) = {-0.100487, -0.746831, 0, 1.0};
Point(67) = {-0.095870, -0.747122, 0, 1.0};
Point(68) = {-0.090600, -0.747451, 0, 1.0};
Point(69) = {-0.084758, -0.747816, 0, 1.0};
Point(70) = {-0.078425, -0.748208, 0, 1.0};
Point(71) = {-0.071693, -0.748613, 0, 1.0};
Point(72) = {-0.064652, -0.749013, 0, 1.0};
Point(73) = {-0.057402, -0.749385, 0, 1.0};
Point(74) = {-0.050039, -0.749705, 0, 1.0};
Point(75) = {-0.042664, -0.749928, 0, 1.0};
Point(76) = {-0.035355, -0.750000, 0, 1.0};
Point(77) = {-0.028159, -0.749879, 0, 1.0};
Point(78) = {-0.021123, -0.749542, 0, 1.0};
Point(79) = {-0.014287, -0.748980, 0, 1.0};
Point(80) = {-0.007692, -0.748193, 0, 1.0};
Point(81) = {-0.001362, -0.747195, 0, 1.0};
Point(82) = {0.004659, -0.746030, 0, 1.0};
Point(83) = {0.010313, -0.744731, 0, 1.0};
Point(84) = {0.015542, -0.743328, 0, 1.0};
Point(85) = {0.020296, -0.741845, 0, 1.0};
Point(86) = {0.024530, -0.740309, 0, 1.0};
Point(87) = {0.028207, -0.738748, 0, 1.0};
Point(88) = {0.031294, -0.737193, 0, 1.0};
Point(89) = {0.033775, -0.735673, 0, 1.0};
Point(90) = {0.035630, -0.734230, 0, 1.0};
Point(91) = {0.036862, -0.732911, 0, 1.0};
Point(92) = {0.037469, -0.731800, 0, 1.0};
Point(93) = {0.037322, -0.731031, 0, 1.0};
Point(94) = {0.036329, -0.730532, 0, 1.0};
Point(95) = {0.034529, -0.730205, 0, 1.0};
Point(96) = {0.031946, -0.730085, 0, 1.0};
Point(97) = {0.028592, -0.730175, 0, 1.0};
Point(98) = {0.024488, -0.730466, 0, 1.0};
Point(99) = {0.019664, -0.730939, 0, 1.0};
Point(100) = {0.014165, -0.731573, 0, 1.0};
Point(101) = {0.008048, -0.732345, 0, 1.0};
Point(102) = {0.001377, -0.733231, 0, 1.0};
Point(103) = {-0.005776, -0.734206, 0, 1.0};
Point(104) = {-0.013325, -0.735243, 0, 1.0};
Point(105) = {-0.021183, -0.736317, 0, 1.0};
Point(106) = {-0.029256, -0.737407, 0, 1.0};
Point(107) = {-0.037443, -0.738488, 0, 1.0};
Point(108) = {-0.045648, -0.739543, 0, 1.0};
Point(109) = {-0.053767, -0.740553, 0, 1.0};
Point(110) = {-0.061700, -0.741503, 0, 1.0};
Point(111) = {-0.069346, -0.742381, 0, 1.0};
Point(112) = {-0.076612, -0.743175, 0, 1.0};
Point(113) = {-0.083404, -0.743878, 0, 1.0};
Point(114) = {-0.089637, -0.744485, 0, 1.0};
Point(115) = {-0.095227, -0.744991, 0, 1.0};
Point(116) = {-0.100102, -0.745397, 0, 1.0};
Point(117) = {-0.104197, -0.745708, 0, 1.0};
Point(118) = {-0.107455, -0.745932, 0, 1.0};
Point(119) = {-0.109833, -0.746075, 0, 1.0};
Point(120) = {-0.111287, -0.746143, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html