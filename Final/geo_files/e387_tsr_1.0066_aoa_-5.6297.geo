SetFactory("OpenCASCADE");

Point(1) = {0.074518, 0.747440, 0, 1.0};
Point(2) = {0.074192, 0.747451, 0, 1.0};
Point(3) = {0.073235, 0.747494, 0, 1.0};
Point(4) = {0.071688, 0.747586, 0, 1.0};
Point(5) = {0.069594, 0.747721, 0, 1.0};
Point(6) = {0.066991, 0.747887, 0, 1.0};
Point(7) = {0.063914, 0.748081, 0, 1.0};
Point(8) = {0.060400, 0.748301, 0, 1.0};
Point(9) = {0.056505, 0.748544, 0, 1.0};
Point(10) = {0.052283, 0.748805, 0, 1.0};
Point(11) = {0.047795, 0.749075, 0, 1.0};
Point(12) = {0.043102, 0.749342, 0, 1.0};
Point(13) = {0.038268, 0.749590, 0, 1.0};
Point(14) = {0.033359, 0.749803, 0, 1.0};
Point(15) = {0.028443, 0.749952, 0, 1.0};
Point(16) = {0.023570, 0.750000, 0, 1.0};
Point(17) = {0.018773, 0.749919, 0, 1.0};
Point(18) = {0.014082, 0.749695, 0, 1.0};
Point(19) = {0.009525, 0.749320, 0, 1.0};
Point(20) = {0.005128, 0.748795, 0, 1.0};
Point(21) = {0.000908, 0.748130, 0, 1.0};
Point(22) = {-0.003106, 0.747353, 0, 1.0};
Point(23) = {-0.006876, 0.746487, 0, 1.0};
Point(24) = {-0.010362, 0.745552, 0, 1.0};
Point(25) = {-0.013531, 0.744563, 0, 1.0};
Point(26) = {-0.016353, 0.743539, 0, 1.0};
Point(27) = {-0.018805, 0.742499, 0, 1.0};
Point(28) = {-0.020863, 0.741462, 0, 1.0};
Point(29) = {-0.022517, 0.740449, 0, 1.0};
Point(30) = {-0.023753, 0.739487, 0, 1.0};
Point(31) = {-0.024575, 0.738607, 0, 1.0};
Point(32) = {-0.024979, 0.737867, 0, 1.0};
Point(33) = {-0.024881, 0.737354, 0, 1.0};
Point(34) = {-0.024220, 0.737021, 0, 1.0};
Point(35) = {-0.023019, 0.736803, 0, 1.0};
Point(36) = {-0.021297, 0.736724, 0, 1.0};
Point(37) = {-0.019061, 0.736783, 0, 1.0};
Point(38) = {-0.016325, 0.736978, 0, 1.0};
Point(39) = {-0.013110, 0.737293, 0, 1.0};
Point(40) = {-0.009443, 0.737715, 0, 1.0};
Point(41) = {-0.005365, 0.738230, 0, 1.0};
Point(42) = {-0.000918, 0.738821, 0, 1.0};
Point(43) = {0.003851, 0.739471, 0, 1.0};
Point(44) = {0.008883, 0.740162, 0, 1.0};
Point(45) = {0.014122, 0.740878, 0, 1.0};
Point(46) = {0.019504, 0.741605, 0, 1.0};
Point(47) = {0.024962, 0.742326, 0, 1.0};
Point(48) = {0.030432, 0.743029, 0, 1.0};
Point(49) = {0.035845, 0.743702, 0, 1.0};
Point(50) = {0.041133, 0.744336, 0, 1.0};
Point(51) = {0.046230, 0.744920, 0, 1.0};
Point(52) = {0.051075, 0.745450, 0, 1.0};
Point(53) = {0.055603, 0.745919, 0, 1.0};
Point(54) = {0.059758, 0.746323, 0, 1.0};
Point(55) = {0.063485, 0.746660, 0, 1.0};
Point(56) = {0.066735, 0.746932, 0, 1.0};
Point(57) = {0.069465, 0.747138, 0, 1.0};
Point(58) = {0.071637, 0.747288, 0, 1.0};
Point(59) = {0.073222, 0.747383, 0, 1.0};
Point(60) = {0.074191, 0.747428, 0, 1.0};
Point(61) = {-0.074518, -0.747440, 0, 1.0};
Point(62) = {-0.074192, -0.747451, 0, 1.0};
Point(63) = {-0.073235, -0.747494, 0, 1.0};
Point(64) = {-0.071688, -0.747586, 0, 1.0};
Point(65) = {-0.069594, -0.747721, 0, 1.0};
Point(66) = {-0.066991, -0.747887, 0, 1.0};
Point(67) = {-0.063914, -0.748081, 0, 1.0};
Point(68) = {-0.060400, -0.748301, 0, 1.0};
Point(69) = {-0.056505, -0.748544, 0, 1.0};
Point(70) = {-0.052283, -0.748805, 0, 1.0};
Point(71) = {-0.047795, -0.749075, 0, 1.0};
Point(72) = {-0.043102, -0.749342, 0, 1.0};
Point(73) = {-0.038268, -0.749590, 0, 1.0};
Point(74) = {-0.033359, -0.749803, 0, 1.0};
Point(75) = {-0.028443, -0.749952, 0, 1.0};
Point(76) = {-0.023570, -0.750000, 0, 1.0};
Point(77) = {-0.018773, -0.749919, 0, 1.0};
Point(78) = {-0.014082, -0.749695, 0, 1.0};
Point(79) = {-0.009525, -0.749320, 0, 1.0};
Point(80) = {-0.005128, -0.748795, 0, 1.0};
Point(81) = {-0.000908, -0.748130, 0, 1.0};
Point(82) = {0.003106, -0.747353, 0, 1.0};
Point(83) = {0.006876, -0.746487, 0, 1.0};
Point(84) = {0.010362, -0.745552, 0, 1.0};
Point(85) = {0.013531, -0.744563, 0, 1.0};
Point(86) = {0.016353, -0.743539, 0, 1.0};
Point(87) = {0.018805, -0.742499, 0, 1.0};
Point(88) = {0.020863, -0.741462, 0, 1.0};
Point(89) = {0.022517, -0.740449, 0, 1.0};
Point(90) = {0.023753, -0.739487, 0, 1.0};
Point(91) = {0.024575, -0.738607, 0, 1.0};
Point(92) = {0.024979, -0.737867, 0, 1.0};
Point(93) = {0.024881, -0.737354, 0, 1.0};
Point(94) = {0.024220, -0.737021, 0, 1.0};
Point(95) = {0.023019, -0.736803, 0, 1.0};
Point(96) = {0.021297, -0.736724, 0, 1.0};
Point(97) = {0.019061, -0.736783, 0, 1.0};
Point(98) = {0.016325, -0.736978, 0, 1.0};
Point(99) = {0.013110, -0.737293, 0, 1.0};
Point(100) = {0.009443, -0.737715, 0, 1.0};
Point(101) = {0.005365, -0.738230, 0, 1.0};
Point(102) = {0.000918, -0.738821, 0, 1.0};
Point(103) = {-0.003851, -0.739471, 0, 1.0};
Point(104) = {-0.008883, -0.740162, 0, 1.0};
Point(105) = {-0.014122, -0.740878, 0, 1.0};
Point(106) = {-0.019504, -0.741605, 0, 1.0};
Point(107) = {-0.024962, -0.742326, 0, 1.0};
Point(108) = {-0.030432, -0.743029, 0, 1.0};
Point(109) = {-0.035845, -0.743702, 0, 1.0};
Point(110) = {-0.041133, -0.744336, 0, 1.0};
Point(111) = {-0.046230, -0.744920, 0, 1.0};
Point(112) = {-0.051075, -0.745450, 0, 1.0};
Point(113) = {-0.055603, -0.745919, 0, 1.0};
Point(114) = {-0.059758, -0.746323, 0, 1.0};
Point(115) = {-0.063485, -0.746660, 0, 1.0};
Point(116) = {-0.066735, -0.746932, 0, 1.0};
Point(117) = {-0.069465, -0.747138, 0, 1.0};
Point(118) = {-0.071637, -0.747288, 0, 1.0};
Point(119) = {-0.073222, -0.747383, 0, 1.0};
Point(120) = {-0.074191, -0.747428, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html