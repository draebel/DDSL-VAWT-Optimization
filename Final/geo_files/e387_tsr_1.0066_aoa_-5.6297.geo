SetFactory("OpenCASCADE");

Point(1) = {0.111860, 0.746161, 0, 1.0};
Point(2) = {0.111372, 0.746178, 0, 1.0};
Point(3) = {0.109938, 0.746243, 0, 1.0};
Point(4) = {0.107617, 0.746380, 0, 1.0};
Point(5) = {0.104479, 0.746583, 0, 1.0};
Point(6) = {0.100576, 0.746832, 0, 1.0};
Point(7) = {0.095961, 0.747123, 0, 1.0};
Point(8) = {0.090693, 0.747452, 0, 1.0};
Point(9) = {0.084854, 0.747817, 0, 1.0};
Point(10) = {0.078524, 0.748208, 0, 1.0};
Point(11) = {0.071795, 0.748613, 0, 1.0};
Point(12) = {0.064757, 0.749013, 0, 1.0};
Point(13) = {0.057510, 0.749385, 0, 1.0};
Point(14) = {0.050150, 0.749705, 0, 1.0};
Point(15) = {0.042779, 0.749928, 0, 1.0};
Point(16) = {0.035472, 0.750000, 0, 1.0};
Point(17) = {0.028280, 0.749879, 0, 1.0};
Point(18) = {0.021247, 0.749542, 0, 1.0};
Point(19) = {0.014414, 0.748980, 0, 1.0};
Point(20) = {0.007822, 0.748193, 0, 1.0};
Point(21) = {0.001494, 0.747196, 0, 1.0};
Point(22) = {-0.004524, 0.746032, 0, 1.0};
Point(23) = {-0.010176, 0.744733, 0, 1.0};
Point(24) = {-0.015402, 0.743331, 0, 1.0};
Point(25) = {-0.020154, 0.741848, 0, 1.0};
Point(26) = {-0.024386, 0.740313, 0, 1.0};
Point(27) = {-0.028062, 0.738753, 0, 1.0};
Point(28) = {-0.031148, 0.737199, 0, 1.0};
Point(29) = {-0.033627, 0.735680, 0, 1.0};
Point(30) = {-0.035481, 0.734237, 0, 1.0};
Point(31) = {-0.036713, 0.732918, 0, 1.0};
Point(32) = {-0.037319, 0.731808, 0, 1.0};
Point(33) = {-0.037173, 0.731039, 0, 1.0};
Point(34) = {-0.036180, 0.730541, 0, 1.0};
Point(35) = {-0.034381, 0.730213, 0, 1.0};
Point(36) = {-0.031799, 0.730094, 0, 1.0};
Point(37) = {-0.028446, 0.730184, 0, 1.0};
Point(38) = {-0.024344, 0.730475, 0, 1.0};
Point(39) = {-0.019523, 0.730947, 0, 1.0};
Point(40) = {-0.014026, 0.731581, 0, 1.0};
Point(41) = {-0.007911, 0.732352, 0, 1.0};
Point(42) = {-0.001243, 0.733239, 0, 1.0};
Point(43) = {0.005906, 0.734213, 0, 1.0};
Point(44) = {0.013452, 0.735249, 0, 1.0};
Point(45) = {0.021307, 0.736323, 0, 1.0};
Point(46) = {0.029376, 0.737412, 0, 1.0};
Point(47) = {0.037560, 0.738493, 0, 1.0};
Point(48) = {0.045761, 0.739547, 0, 1.0};
Point(49) = {0.053877, 0.740557, 0, 1.0};
Point(50) = {0.061806, 0.741507, 0, 1.0};
Point(51) = {0.069448, 0.742384, 0, 1.0};
Point(52) = {0.076712, 0.743178, 0, 1.0};
Point(53) = {0.083500, 0.743881, 0, 1.0};
Point(54) = {0.089731, 0.744487, 0, 1.0};
Point(55) = {0.095319, 0.744993, 0, 1.0};
Point(56) = {0.100192, 0.745399, 0, 1.0};
Point(57) = {0.104285, 0.745710, 0, 1.0};
Point(58) = {0.107541, 0.745934, 0, 1.0};
Point(59) = {0.109918, 0.746076, 0, 1.0};
Point(60) = {0.111371, 0.746144, 0, 1.0};
Point(61) = {-0.111860, -0.746161, 0, 1.0};
Point(62) = {-0.111372, -0.746178, 0, 1.0};
Point(63) = {-0.109938, -0.746243, 0, 1.0};
Point(64) = {-0.107617, -0.746380, 0, 1.0};
Point(65) = {-0.104479, -0.746583, 0, 1.0};
Point(66) = {-0.100576, -0.746832, 0, 1.0};
Point(67) = {-0.095961, -0.747123, 0, 1.0};
Point(68) = {-0.090693, -0.747452, 0, 1.0};
Point(69) = {-0.084854, -0.747817, 0, 1.0};
Point(70) = {-0.078524, -0.748208, 0, 1.0};
Point(71) = {-0.071795, -0.748613, 0, 1.0};
Point(72) = {-0.064757, -0.749013, 0, 1.0};
Point(73) = {-0.057510, -0.749385, 0, 1.0};
Point(74) = {-0.050150, -0.749705, 0, 1.0};
Point(75) = {-0.042779, -0.749928, 0, 1.0};
Point(76) = {-0.035472, -0.750000, 0, 1.0};
Point(77) = {-0.028280, -0.749879, 0, 1.0};
Point(78) = {-0.021247, -0.749542, 0, 1.0};
Point(79) = {-0.014414, -0.748980, 0, 1.0};
Point(80) = {-0.007822, -0.748193, 0, 1.0};
Point(81) = {-0.001494, -0.747196, 0, 1.0};
Point(82) = {0.004524, -0.746032, 0, 1.0};
Point(83) = {0.010176, -0.744733, 0, 1.0};
Point(84) = {0.015402, -0.743331, 0, 1.0};
Point(85) = {0.020154, -0.741848, 0, 1.0};
Point(86) = {0.024386, -0.740313, 0, 1.0};
Point(87) = {0.028062, -0.738753, 0, 1.0};
Point(88) = {0.031148, -0.737199, 0, 1.0};
Point(89) = {0.033627, -0.735680, 0, 1.0};
Point(90) = {0.035481, -0.734237, 0, 1.0};
Point(91) = {0.036713, -0.732918, 0, 1.0};
Point(92) = {0.037319, -0.731808, 0, 1.0};
Point(93) = {0.037173, -0.731039, 0, 1.0};
Point(94) = {0.036180, -0.730541, 0, 1.0};
Point(95) = {0.034381, -0.730213, 0, 1.0};
Point(96) = {0.031799, -0.730094, 0, 1.0};
Point(97) = {0.028446, -0.730184, 0, 1.0};
Point(98) = {0.024344, -0.730475, 0, 1.0};
Point(99) = {0.019523, -0.730947, 0, 1.0};
Point(100) = {0.014026, -0.731581, 0, 1.0};
Point(101) = {0.007911, -0.732352, 0, 1.0};
Point(102) = {0.001243, -0.733239, 0, 1.0};
Point(103) = {-0.005906, -0.734213, 0, 1.0};
Point(104) = {-0.013452, -0.735249, 0, 1.0};
Point(105) = {-0.021307, -0.736323, 0, 1.0};
Point(106) = {-0.029376, -0.737412, 0, 1.0};
Point(107) = {-0.037560, -0.738493, 0, 1.0};
Point(108) = {-0.045761, -0.739547, 0, 1.0};
Point(109) = {-0.053877, -0.740557, 0, 1.0};
Point(110) = {-0.061806, -0.741507, 0, 1.0};
Point(111) = {-0.069448, -0.742384, 0, 1.0};
Point(112) = {-0.076712, -0.743178, 0, 1.0};
Point(113) = {-0.083500, -0.743881, 0, 1.0};
Point(114) = {-0.089731, -0.744487, 0, 1.0};
Point(115) = {-0.095319, -0.744993, 0, 1.0};
Point(116) = {-0.100192, -0.745399, 0, 1.0};
Point(117) = {-0.104285, -0.745710, 0, 1.0};
Point(118) = {-0.107541, -0.745934, 0, 1.0};
Point(119) = {-0.109918, -0.746076, 0, 1.0};
Point(120) = {-0.111371, -0.746144, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html