SetFactory("OpenCASCADE");

Point(1) = {0.074673, 0.746158, 0, 1.0};
Point(2) = {0.074184, 0.746174, 0, 1.0};
Point(3) = {0.072748, 0.746239, 0, 1.0};
Point(4) = {0.070426, 0.746377, 0, 1.0};
Point(5) = {0.067284, 0.746580, 0, 1.0};
Point(6) = {0.063378, 0.746830, 0, 1.0};
Point(7) = {0.058760, 0.747121, 0, 1.0};
Point(8) = {0.053487, 0.747450, 0, 1.0};
Point(9) = {0.047642, 0.747815, 0, 1.0};
Point(10) = {0.041307, 0.748207, 0, 1.0};
Point(11) = {0.034572, 0.748612, 0, 1.0};
Point(12) = {0.027528, 0.749012, 0, 1.0};
Point(13) = {0.020274, 0.749385, 0, 1.0};
Point(14) = {0.012908, 0.749705, 0, 1.0};
Point(15) = {0.005530, 0.749928, 0, 1.0};
Point(16) = {-0.001783, 0.750000, 0, 1.0};
Point(17) = {-0.008982, 0.749878, 0, 1.0};
Point(18) = {-0.016021, 0.749542, 0, 1.0};
Point(19) = {-0.022860, 0.748979, 0, 1.0};
Point(20) = {-0.029458, 0.748192, 0, 1.0};
Point(21) = {-0.035791, 0.747194, 0, 1.0};
Point(22) = {-0.041814, 0.746028, 0, 1.0};
Point(23) = {-0.047471, 0.744729, 0, 1.0};
Point(24) = {-0.052702, 0.743325, 0, 1.0};
Point(25) = {-0.057458, 0.741841, 0, 1.0};
Point(26) = {-0.061693, 0.740305, 0, 1.0};
Point(27) = {-0.065373, 0.738743, 0, 1.0};
Point(28) = {-0.068461, 0.737187, 0, 1.0};
Point(29) = {-0.070943, 0.735667, 0, 1.0};
Point(30) = {-0.072798, 0.734224, 0, 1.0};
Point(31) = {-0.074031, 0.732903, 0, 1.0};
Point(32) = {-0.074638, 0.731792, 0, 1.0};
Point(33) = {-0.074492, 0.731023, 0, 1.0};
Point(34) = {-0.073498, 0.730523, 0, 1.0};
Point(35) = {-0.071697, 0.730196, 0, 1.0};
Point(36) = {-0.069113, 0.730077, 0, 1.0};
Point(37) = {-0.065758, 0.730166, 0, 1.0};
Point(38) = {-0.061652, 0.730458, 0, 1.0};
Point(39) = {-0.056826, 0.730930, 0, 1.0};
Point(40) = {-0.051324, 0.731565, 0, 1.0};
Point(41) = {-0.045204, 0.732337, 0, 1.0};
Point(42) = {-0.038530, 0.733224, 0, 1.0};
Point(43) = {-0.031375, 0.734199, 0, 1.0};
Point(44) = {-0.023823, 0.735236, 0, 1.0};
Point(45) = {-0.015961, 0.736311, 0, 1.0};
Point(46) = {-0.007885, 0.737401, 0, 1.0};
Point(47) = {0.000307, 0.738483, 0, 1.0};
Point(48) = {0.008515, 0.739538, 0, 1.0};
Point(49) = {0.016638, 0.740549, 0, 1.0};
Point(50) = {0.024574, 0.741500, 0, 1.0};
Point(51) = {0.032223, 0.742377, 0, 1.0};
Point(52) = {0.039493, 0.743172, 0, 1.0};
Point(53) = {0.046288, 0.743875, 0, 1.0};
Point(54) = {0.052523, 0.744482, 0, 1.0};
Point(55) = {0.058116, 0.744989, 0, 1.0};
Point(56) = {0.062993, 0.745395, 0, 1.0};
Point(57) = {0.067090, 0.745706, 0, 1.0};
Point(58) = {0.070349, 0.745931, 0, 1.0};
Point(59) = {0.072728, 0.746073, 0, 1.0};
Point(60) = {0.074183, 0.746141, 0, 1.0};
Point(61) = {-0.074673, -0.746158, 0, 1.0};
Point(62) = {-0.074184, -0.746174, 0, 1.0};
Point(63) = {-0.072748, -0.746239, 0, 1.0};
Point(64) = {-0.070426, -0.746377, 0, 1.0};
Point(65) = {-0.067284, -0.746580, 0, 1.0};
Point(66) = {-0.063378, -0.746830, 0, 1.0};
Point(67) = {-0.058760, -0.747121, 0, 1.0};
Point(68) = {-0.053487, -0.747450, 0, 1.0};
Point(69) = {-0.047642, -0.747815, 0, 1.0};
Point(70) = {-0.041307, -0.748207, 0, 1.0};
Point(71) = {-0.034572, -0.748612, 0, 1.0};
Point(72) = {-0.027528, -0.749012, 0, 1.0};
Point(73) = {-0.020274, -0.749385, 0, 1.0};
Point(74) = {-0.012908, -0.749705, 0, 1.0};
Point(75) = {-0.005530, -0.749928, 0, 1.0};
Point(76) = {0.001783, -0.750000, 0, 1.0};
Point(77) = {0.008982, -0.749878, 0, 1.0};
Point(78) = {0.016021, -0.749542, 0, 1.0};
Point(79) = {0.022860, -0.748979, 0, 1.0};
Point(80) = {0.029458, -0.748192, 0, 1.0};
Point(81) = {0.035791, -0.747194, 0, 1.0};
Point(82) = {0.041814, -0.746028, 0, 1.0};
Point(83) = {0.047471, -0.744729, 0, 1.0};
Point(84) = {0.052702, -0.743325, 0, 1.0};
Point(85) = {0.057458, -0.741841, 0, 1.0};
Point(86) = {0.061693, -0.740305, 0, 1.0};
Point(87) = {0.065373, -0.738743, 0, 1.0};
Point(88) = {0.068461, -0.737187, 0, 1.0};
Point(89) = {0.070943, -0.735667, 0, 1.0};
Point(90) = {0.072798, -0.734224, 0, 1.0};
Point(91) = {0.074031, -0.732903, 0, 1.0};
Point(92) = {0.074638, -0.731792, 0, 1.0};
Point(93) = {0.074492, -0.731023, 0, 1.0};
Point(94) = {0.073498, -0.730523, 0, 1.0};
Point(95) = {0.071697, -0.730196, 0, 1.0};
Point(96) = {0.069113, -0.730077, 0, 1.0};
Point(97) = {0.065758, -0.730166, 0, 1.0};
Point(98) = {0.061652, -0.730458, 0, 1.0};
Point(99) = {0.056826, -0.730930, 0, 1.0};
Point(100) = {0.051324, -0.731565, 0, 1.0};
Point(101) = {0.045204, -0.732337, 0, 1.0};
Point(102) = {0.038530, -0.733224, 0, 1.0};
Point(103) = {0.031375, -0.734199, 0, 1.0};
Point(104) = {0.023823, -0.735236, 0, 1.0};
Point(105) = {0.015961, -0.736311, 0, 1.0};
Point(106) = {0.007885, -0.737401, 0, 1.0};
Point(107) = {-0.000307, -0.738483, 0, 1.0};
Point(108) = {-0.008515, -0.739538, 0, 1.0};
Point(109) = {-0.016638, -0.740549, 0, 1.0};
Point(110) = {-0.024574, -0.741500, 0, 1.0};
Point(111) = {-0.032223, -0.742377, 0, 1.0};
Point(112) = {-0.039493, -0.743172, 0, 1.0};
Point(113) = {-0.046288, -0.743875, 0, 1.0};
Point(114) = {-0.052523, -0.744482, 0, 1.0};
Point(115) = {-0.058116, -0.744989, 0, 1.0};
Point(116) = {-0.062993, -0.745395, 0, 1.0};
Point(117) = {-0.067090, -0.745706, 0, 1.0};
Point(118) = {-0.070349, -0.745931, 0, 1.0};
Point(119) = {-0.072728, -0.746073, 0, 1.0};
Point(120) = {-0.074183, -0.746141, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html