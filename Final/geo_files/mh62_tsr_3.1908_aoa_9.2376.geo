SetFactory("OpenCASCADE");

Point(1) = {0.073703, 0.730848, 0, 1.0};
Point(2) = {0.073379, 0.730895, 0, 1.0};
Point(3) = {0.072405, 0.731055, 0, 1.0};
Point(4) = {0.070801, 0.731364, 0, 1.0};
Point(5) = {0.068612, 0.731844, 0, 1.0};
Point(6) = {0.065883, 0.732501, 0, 1.0};
Point(7) = {0.062668, 0.733341, 0, 1.0};
Point(8) = {0.059039, 0.734354, 0, 1.0};
Point(9) = {0.055062, 0.735517, 0, 1.0};
Point(10) = {0.050800, 0.736797, 0, 1.0};
Point(11) = {0.046315, 0.738161, 0, 1.0};
Point(12) = {0.041667, 0.739566, 0, 1.0};
Point(13) = {0.036902, 0.740968, 0, 1.0};
Point(14) = {0.032058, 0.742331, 0, 1.0};
Point(15) = {0.027174, 0.743626, 0, 1.0};
Point(16) = {0.022285, 0.744836, 0, 1.0};
Point(17) = {0.017434, 0.745948, 0, 1.0};
Point(18) = {0.012668, 0.746950, 0, 1.0};
Point(19) = {0.008035, 0.747829, 0, 1.0};
Point(20) = {0.003580, 0.748572, 0, 1.0};
Point(21) = {-0.000657, 0.749166, 0, 1.0};
Point(22) = {-0.004642, 0.749604, 0, 1.0};
Point(23) = {-0.008340, 0.749882, 0, 1.0};
Point(24) = {-0.011724, 0.750000, 0, 1.0};
Point(25) = {-0.014766, 0.749962, 0, 1.0};
Point(26) = {-0.017441, 0.749776, 0, 1.0};
Point(27) = {-0.019733, 0.749450, 0, 1.0};
Point(28) = {-0.021630, 0.749001, 0, 1.0};
Point(29) = {-0.023122, 0.748457, 0, 1.0};
Point(30) = {-0.024199, 0.747854, 0, 1.0};
Point(31) = {-0.024743, 0.747371, 0, 1.0};
Point(32) = {-0.024875, 0.747192, 0, 1.0};
Point(33) = {-0.024964, 0.747021, 0, 1.0};
Point(34) = {-0.024998, 0.746915, 0, 1.0};
Point(35) = {-0.025004, 0.746817, 0, 1.0};
Point(36) = {-0.024977, 0.746721, 0, 1.0};
Point(37) = {-0.024919, 0.746617, 0, 1.0};
Point(38) = {-0.024787, 0.746449, 0, 1.0};
Point(39) = {-0.024607, 0.746268, 0, 1.0};
Point(40) = {-0.024453, 0.746134, 0, 1.0};
Point(41) = {-0.023415, 0.745459, 0, 1.0};
Point(42) = {-0.021883, 0.744726, 0, 1.0};
Point(43) = {-0.019878, 0.743960, 0, 1.0};
Point(44) = {-0.017416, 0.743183, 0, 1.0};
Point(45) = {-0.014516, 0.742414, 0, 1.0};
Point(46) = {-0.011191, 0.741664, 0, 1.0};
Point(47) = {-0.007467, 0.740938, 0, 1.0};
Point(48) = {-0.003372, 0.740235, 0, 1.0};
Point(49) = {0.001056, 0.739550, 0, 1.0};
Point(50) = {0.005769, 0.738883, 0, 1.0};
Point(51) = {0.010718, 0.738230, 0, 1.0};
Point(52) = {0.015848, 0.737589, 0, 1.0};
Point(53) = {0.021100, 0.736957, 0, 1.0};
Point(54) = {0.026410, 0.736332, 0, 1.0};
Point(55) = {0.031714, 0.735715, 0, 1.0};
Point(56) = {0.036946, 0.735109, 0, 1.0};
Point(57) = {0.042040, 0.734517, 0, 1.0};
Point(58) = {0.046933, 0.733946, 0, 1.0};
Point(59) = {0.051567, 0.733401, 0, 1.0};
Point(60) = {0.055883, 0.732891, 0, 1.0};
Point(61) = {0.059829, 0.732420, 0, 1.0};
Point(62) = {0.063354, 0.731998, 0, 1.0};
Point(63) = {0.066416, 0.731631, 0, 1.0};
Point(64) = {0.068975, 0.731328, 0, 1.0};
Point(65) = {0.071001, 0.731097, 0, 1.0};
Point(66) = {0.072474, 0.730949, 0, 1.0};
Point(67) = {0.073387, 0.730873, 0, 1.0};
Point(68) = {-0.073703, -0.730848, 0, 1.0};
Point(69) = {-0.073379, -0.730895, 0, 1.0};
Point(70) = {-0.072405, -0.731055, 0, 1.0};
Point(71) = {-0.070801, -0.731364, 0, 1.0};
Point(72) = {-0.068612, -0.731844, 0, 1.0};
Point(73) = {-0.065883, -0.732501, 0, 1.0};
Point(74) = {-0.062668, -0.733341, 0, 1.0};
Point(75) = {-0.059039, -0.734354, 0, 1.0};
Point(76) = {-0.055062, -0.735517, 0, 1.0};
Point(77) = {-0.050800, -0.736797, 0, 1.0};
Point(78) = {-0.046315, -0.738161, 0, 1.0};
Point(79) = {-0.041667, -0.739566, 0, 1.0};
Point(80) = {-0.036902, -0.740968, 0, 1.0};
Point(81) = {-0.032058, -0.742331, 0, 1.0};
Point(82) = {-0.027174, -0.743626, 0, 1.0};
Point(83) = {-0.022285, -0.744836, 0, 1.0};
Point(84) = {-0.017434, -0.745948, 0, 1.0};
Point(85) = {-0.012668, -0.746950, 0, 1.0};
Point(86) = {-0.008035, -0.747829, 0, 1.0};
Point(87) = {-0.003580, -0.748572, 0, 1.0};
Point(88) = {0.000657, -0.749166, 0, 1.0};
Point(89) = {0.004642, -0.749604, 0, 1.0};
Point(90) = {0.008340, -0.749882, 0, 1.0};
Point(91) = {0.011724, -0.750000, 0, 1.0};
Point(92) = {0.014766, -0.749962, 0, 1.0};
Point(93) = {0.017441, -0.749776, 0, 1.0};
Point(94) = {0.019733, -0.749450, 0, 1.0};
Point(95) = {0.021630, -0.749001, 0, 1.0};
Point(96) = {0.023122, -0.748457, 0, 1.0};
Point(97) = {0.024199, -0.747854, 0, 1.0};
Point(98) = {0.024743, -0.747371, 0, 1.0};
Point(99) = {0.024875, -0.747192, 0, 1.0};
Point(100) = {0.024964, -0.747021, 0, 1.0};
Point(101) = {0.024998, -0.746915, 0, 1.0};
Point(102) = {0.025004, -0.746817, 0, 1.0};
Point(103) = {0.024977, -0.746721, 0, 1.0};
Point(104) = {0.024919, -0.746617, 0, 1.0};
Point(105) = {0.024787, -0.746449, 0, 1.0};
Point(106) = {0.024607, -0.746268, 0, 1.0};
Point(107) = {0.024453, -0.746134, 0, 1.0};
Point(108) = {0.023415, -0.745459, 0, 1.0};
Point(109) = {0.021883, -0.744726, 0, 1.0};
Point(110) = {0.019878, -0.743960, 0, 1.0};
Point(111) = {0.017416, -0.743183, 0, 1.0};
Point(112) = {0.014516, -0.742414, 0, 1.0};
Point(113) = {0.011191, -0.741664, 0, 1.0};
Point(114) = {0.007467, -0.740938, 0, 1.0};
Point(115) = {0.003372, -0.740235, 0, 1.0};
Point(116) = {-0.001056, -0.739550, 0, 1.0};
Point(117) = {-0.005769, -0.738883, 0, 1.0};
Point(118) = {-0.010718, -0.738230, 0, 1.0};
Point(119) = {-0.015848, -0.737589, 0, 1.0};
Point(120) = {-0.021100, -0.736957, 0, 1.0};
Point(121) = {-0.026410, -0.736332, 0, 1.0};
Point(122) = {-0.031714, -0.735715, 0, 1.0};
Point(123) = {-0.036946, -0.735109, 0, 1.0};
Point(124) = {-0.042040, -0.734517, 0, 1.0};
Point(125) = {-0.046933, -0.733946, 0, 1.0};
Point(126) = {-0.051567, -0.733401, 0, 1.0};
Point(127) = {-0.055883, -0.732891, 0, 1.0};
Point(128) = {-0.059829, -0.732420, 0, 1.0};
Point(129) = {-0.063354, -0.731998, 0, 1.0};
Point(130) = {-0.066416, -0.731631, 0, 1.0};
Point(131) = {-0.068975, -0.731328, 0, 1.0};
Point(132) = {-0.071001, -0.731097, 0, 1.0};
Point(133) = {-0.072474, -0.730949, 0, 1.0};
Point(134) = {-0.073387, -0.730873, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html