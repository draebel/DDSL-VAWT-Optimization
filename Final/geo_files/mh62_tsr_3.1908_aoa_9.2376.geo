SetFactory("OpenCASCADE");

Point(1) = {0.147406, 0.711696, 0, 1.0};
Point(2) = {0.146758, 0.711790, 0, 1.0};
Point(3) = {0.144810, 0.712110, 0, 1.0};
Point(4) = {0.141603, 0.712729, 0, 1.0};
Point(5) = {0.137225, 0.713688, 0, 1.0};
Point(6) = {0.131765, 0.715002, 0, 1.0};
Point(7) = {0.125337, 0.716681, 0, 1.0};
Point(8) = {0.118078, 0.718709, 0, 1.0};
Point(9) = {0.110123, 0.721033, 0, 1.0};
Point(10) = {0.101600, 0.723595, 0, 1.0};
Point(11) = {0.092631, 0.726322, 0, 1.0};
Point(12) = {0.083333, 0.729133, 0, 1.0};
Point(13) = {0.073803, 0.731937, 0, 1.0};
Point(14) = {0.064117, 0.734662, 0, 1.0};
Point(15) = {0.054348, 0.737253, 0, 1.0};
Point(16) = {0.044569, 0.739672, 0, 1.0};
Point(17) = {0.034867, 0.741896, 0, 1.0};
Point(18) = {0.025337, 0.743899, 0, 1.0};
Point(19) = {0.016071, 0.745657, 0, 1.0};
Point(20) = {0.007160, 0.747143, 0, 1.0};
Point(21) = {-0.001315, 0.748332, 0, 1.0};
Point(22) = {-0.009283, 0.749208, 0, 1.0};
Point(23) = {-0.016681, 0.749764, 0, 1.0};
Point(24) = {-0.023448, 0.750000, 0, 1.0};
Point(25) = {-0.029531, 0.749925, 0, 1.0};
Point(26) = {-0.034883, 0.749552, 0, 1.0};
Point(27) = {-0.039466, 0.748900, 0, 1.0};
Point(28) = {-0.043261, 0.748002, 0, 1.0};
Point(29) = {-0.046245, 0.746914, 0, 1.0};
Point(30) = {-0.048399, 0.745708, 0, 1.0};
Point(31) = {-0.049486, 0.744741, 0, 1.0};
Point(32) = {-0.049749, 0.744383, 0, 1.0};
Point(33) = {-0.049928, 0.744042, 0, 1.0};
Point(34) = {-0.049995, 0.743829, 0, 1.0};
Point(35) = {-0.050008, 0.743635, 0, 1.0};
Point(36) = {-0.049954, 0.743442, 0, 1.0};
Point(37) = {-0.049838, 0.743233, 0, 1.0};
Point(38) = {-0.049574, 0.742897, 0, 1.0};
Point(39) = {-0.049214, 0.742536, 0, 1.0};
Point(40) = {-0.048907, 0.742269, 0, 1.0};
Point(41) = {-0.046831, 0.740918, 0, 1.0};
Point(42) = {-0.043767, 0.739452, 0, 1.0};
Point(43) = {-0.039756, 0.737920, 0, 1.0};
Point(44) = {-0.034833, 0.736366, 0, 1.0};
Point(45) = {-0.029031, 0.734828, 0, 1.0};
Point(46) = {-0.022383, 0.733328, 0, 1.0};
Point(47) = {-0.014935, 0.731875, 0, 1.0};
Point(48) = {-0.006744, 0.730469, 0, 1.0};
Point(49) = {0.002111, 0.729100, 0, 1.0};
Point(50) = {0.011538, 0.727766, 0, 1.0};
Point(51) = {0.021435, 0.726460, 0, 1.0};
Point(52) = {0.031696, 0.725179, 0, 1.0};
Point(53) = {0.042200, 0.723914, 0, 1.0};
Point(54) = {0.052821, 0.722665, 0, 1.0};
Point(55) = {0.063429, 0.721430, 0, 1.0};
Point(56) = {0.073892, 0.720217, 0, 1.0};
Point(57) = {0.084080, 0.719033, 0, 1.0};
Point(58) = {0.093867, 0.717891, 0, 1.0};
Point(59) = {0.103133, 0.716803, 0, 1.0};
Point(60) = {0.111766, 0.715782, 0, 1.0};
Point(61) = {0.119657, 0.714841, 0, 1.0};
Point(62) = {0.126709, 0.713996, 0, 1.0};
Point(63) = {0.132832, 0.713261, 0, 1.0};
Point(64) = {0.137950, 0.712655, 0, 1.0};
Point(65) = {0.142002, 0.712194, 0, 1.0};
Point(66) = {0.144948, 0.711898, 0, 1.0};
Point(67) = {0.146774, 0.711746, 0, 1.0};
Point(68) = {-0.147406, -0.711696, 0, 1.0};
Point(69) = {-0.146758, -0.711790, 0, 1.0};
Point(70) = {-0.144810, -0.712110, 0, 1.0};
Point(71) = {-0.141603, -0.712729, 0, 1.0};
Point(72) = {-0.137225, -0.713688, 0, 1.0};
Point(73) = {-0.131765, -0.715002, 0, 1.0};
Point(74) = {-0.125337, -0.716681, 0, 1.0};
Point(75) = {-0.118078, -0.718709, 0, 1.0};
Point(76) = {-0.110123, -0.721033, 0, 1.0};
Point(77) = {-0.101600, -0.723595, 0, 1.0};
Point(78) = {-0.092631, -0.726322, 0, 1.0};
Point(79) = {-0.083333, -0.729133, 0, 1.0};
Point(80) = {-0.073803, -0.731937, 0, 1.0};
Point(81) = {-0.064117, -0.734662, 0, 1.0};
Point(82) = {-0.054348, -0.737253, 0, 1.0};
Point(83) = {-0.044569, -0.739672, 0, 1.0};
Point(84) = {-0.034867, -0.741896, 0, 1.0};
Point(85) = {-0.025337, -0.743899, 0, 1.0};
Point(86) = {-0.016071, -0.745657, 0, 1.0};
Point(87) = {-0.007160, -0.747143, 0, 1.0};
Point(88) = {0.001315, -0.748332, 0, 1.0};
Point(89) = {0.009283, -0.749208, 0, 1.0};
Point(90) = {0.016681, -0.749764, 0, 1.0};
Point(91) = {0.023448, -0.750000, 0, 1.0};
Point(92) = {0.029531, -0.749925, 0, 1.0};
Point(93) = {0.034883, -0.749552, 0, 1.0};
Point(94) = {0.039466, -0.748900, 0, 1.0};
Point(95) = {0.043261, -0.748002, 0, 1.0};
Point(96) = {0.046245, -0.746914, 0, 1.0};
Point(97) = {0.048399, -0.745708, 0, 1.0};
Point(98) = {0.049486, -0.744741, 0, 1.0};
Point(99) = {0.049749, -0.744383, 0, 1.0};
Point(100) = {0.049928, -0.744042, 0, 1.0};
Point(101) = {0.049995, -0.743829, 0, 1.0};
Point(102) = {0.050008, -0.743635, 0, 1.0};
Point(103) = {0.049954, -0.743442, 0, 1.0};
Point(104) = {0.049838, -0.743233, 0, 1.0};
Point(105) = {0.049574, -0.742897, 0, 1.0};
Point(106) = {0.049214, -0.742536, 0, 1.0};
Point(107) = {0.048907, -0.742269, 0, 1.0};
Point(108) = {0.046831, -0.740918, 0, 1.0};
Point(109) = {0.043767, -0.739452, 0, 1.0};
Point(110) = {0.039756, -0.737920, 0, 1.0};
Point(111) = {0.034833, -0.736366, 0, 1.0};
Point(112) = {0.029031, -0.734828, 0, 1.0};
Point(113) = {0.022383, -0.733328, 0, 1.0};
Point(114) = {0.014935, -0.731875, 0, 1.0};
Point(115) = {0.006744, -0.730469, 0, 1.0};
Point(116) = {-0.002111, -0.729100, 0, 1.0};
Point(117) = {-0.011538, -0.727766, 0, 1.0};
Point(118) = {-0.021435, -0.726460, 0, 1.0};
Point(119) = {-0.031696, -0.725179, 0, 1.0};
Point(120) = {-0.042200, -0.723914, 0, 1.0};
Point(121) = {-0.052821, -0.722665, 0, 1.0};
Point(122) = {-0.063429, -0.721430, 0, 1.0};
Point(123) = {-0.073892, -0.720217, 0, 1.0};
Point(124) = {-0.084080, -0.719033, 0, 1.0};
Point(125) = {-0.093867, -0.717891, 0, 1.0};
Point(126) = {-0.103133, -0.716803, 0, 1.0};
Point(127) = {-0.111766, -0.715782, 0, 1.0};
Point(128) = {-0.119657, -0.714841, 0, 1.0};
Point(129) = {-0.126709, -0.713996, 0, 1.0};
Point(130) = {-0.132832, -0.713261, 0, 1.0};
Point(131) = {-0.137950, -0.712655, 0, 1.0};
Point(132) = {-0.142002, -0.712194, 0, 1.0};
Point(133) = {-0.144948, -0.711898, 0, 1.0};
Point(134) = {-0.146774, -0.711746, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html