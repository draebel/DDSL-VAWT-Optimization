SetFactory("OpenCASCADE");

Point(1) = {0.110555, 0.721272, 0, 1.0};
Point(2) = {0.110068, 0.721343, 0, 1.0};
Point(3) = {0.108607, 0.721582, 0, 1.0};
Point(4) = {0.106202, 0.722047, 0, 1.0};
Point(5) = {0.102919, 0.722766, 0, 1.0};
Point(6) = {0.098824, 0.723751, 0, 1.0};
Point(7) = {0.094003, 0.725011, 0, 1.0};
Point(8) = {0.088559, 0.726531, 0, 1.0};
Point(9) = {0.082593, 0.728275, 0, 1.0};
Point(10) = {0.076200, 0.730196, 0, 1.0};
Point(11) = {0.069473, 0.732242, 0, 1.0};
Point(12) = {0.062500, 0.734350, 0, 1.0};
Point(13) = {0.055352, 0.736452, 0, 1.0};
Point(14) = {0.048087, 0.738496, 0, 1.0};
Point(15) = {0.040761, 0.740440, 0, 1.0};
Point(16) = {0.033427, 0.742254, 0, 1.0};
Point(17) = {0.026151, 0.743922, 0, 1.0};
Point(18) = {0.019003, 0.745425, 0, 1.0};
Point(19) = {0.012053, 0.746743, 0, 1.0};
Point(20) = {0.005370, 0.747858, 0, 1.0};
Point(21) = {-0.000986, 0.748749, 0, 1.0};
Point(22) = {-0.006963, 0.749406, 0, 1.0};
Point(23) = {-0.012511, 0.749823, 0, 1.0};
Point(24) = {-0.017586, 0.750000, 0, 1.0};
Point(25) = {-0.022148, 0.749944, 0, 1.0};
Point(26) = {-0.026162, 0.749664, 0, 1.0};
Point(27) = {-0.029599, 0.749175, 0, 1.0};
Point(28) = {-0.032446, 0.748501, 0, 1.0};
Point(29) = {-0.034684, 0.747685, 0, 1.0};
Point(30) = {-0.036299, 0.746781, 0, 1.0};
Point(31) = {-0.037114, 0.746056, 0, 1.0};
Point(32) = {-0.037312, 0.745787, 0, 1.0};
Point(33) = {-0.037446, 0.745532, 0, 1.0};
Point(34) = {-0.037496, 0.745372, 0, 1.0};
Point(35) = {-0.037506, 0.745226, 0, 1.0};
Point(36) = {-0.037465, 0.745082, 0, 1.0};
Point(37) = {-0.037378, 0.744925, 0, 1.0};
Point(38) = {-0.037181, 0.744673, 0, 1.0};
Point(39) = {-0.036911, 0.744402, 0, 1.0};
Point(40) = {-0.036680, 0.744202, 0, 1.0};
Point(41) = {-0.035123, 0.743188, 0, 1.0};
Point(42) = {-0.032825, 0.742089, 0, 1.0};
Point(43) = {-0.029817, 0.740940, 0, 1.0};
Point(44) = {-0.026124, 0.739775, 0, 1.0};
Point(45) = {-0.021773, 0.738621, 0, 1.0};
Point(46) = {-0.016787, 0.737496, 0, 1.0};
Point(47) = {-0.011201, 0.736406, 0, 1.0};
Point(48) = {-0.005058, 0.735352, 0, 1.0};
Point(49) = {0.001583, 0.734325, 0, 1.0};
Point(50) = {0.008653, 0.733324, 0, 1.0};
Point(51) = {0.016076, 0.732345, 0, 1.0};
Point(52) = {0.023772, 0.731384, 0, 1.0};
Point(53) = {0.031650, 0.730436, 0, 1.0};
Point(54) = {0.039616, 0.729499, 0, 1.0};
Point(55) = {0.047572, 0.728573, 0, 1.0};
Point(56) = {0.055419, 0.727663, 0, 1.0};
Point(57) = {0.063060, 0.726775, 0, 1.0};
Point(58) = {0.070400, 0.725918, 0, 1.0};
Point(59) = {0.077350, 0.725102, 0, 1.0};
Point(60) = {0.083824, 0.724337, 0, 1.0};
Point(61) = {0.089743, 0.723631, 0, 1.0};
Point(62) = {0.095031, 0.722997, 0, 1.0};
Point(63) = {0.099624, 0.722446, 0, 1.0};
Point(64) = {0.103463, 0.721991, 0, 1.0};
Point(65) = {0.106501, 0.721646, 0, 1.0};
Point(66) = {0.108711, 0.721424, 0, 1.0};
Point(67) = {0.110081, 0.721309, 0, 1.0};
Point(68) = {-0.110555, -0.721272, 0, 1.0};
Point(69) = {-0.110068, -0.721343, 0, 1.0};
Point(70) = {-0.108607, -0.721582, 0, 1.0};
Point(71) = {-0.106202, -0.722047, 0, 1.0};
Point(72) = {-0.102919, -0.722766, 0, 1.0};
Point(73) = {-0.098824, -0.723751, 0, 1.0};
Point(74) = {-0.094003, -0.725011, 0, 1.0};
Point(75) = {-0.088559, -0.726531, 0, 1.0};
Point(76) = {-0.082593, -0.728275, 0, 1.0};
Point(77) = {-0.076200, -0.730196, 0, 1.0};
Point(78) = {-0.069473, -0.732242, 0, 1.0};
Point(79) = {-0.062500, -0.734350, 0, 1.0};
Point(80) = {-0.055352, -0.736452, 0, 1.0};
Point(81) = {-0.048087, -0.738496, 0, 1.0};
Point(82) = {-0.040761, -0.740440, 0, 1.0};
Point(83) = {-0.033427, -0.742254, 0, 1.0};
Point(84) = {-0.026151, -0.743922, 0, 1.0};
Point(85) = {-0.019003, -0.745425, 0, 1.0};
Point(86) = {-0.012053, -0.746743, 0, 1.0};
Point(87) = {-0.005370, -0.747858, 0, 1.0};
Point(88) = {0.000986, -0.748749, 0, 1.0};
Point(89) = {0.006963, -0.749406, 0, 1.0};
Point(90) = {0.012511, -0.749823, 0, 1.0};
Point(91) = {0.017586, -0.750000, 0, 1.0};
Point(92) = {0.022148, -0.749944, 0, 1.0};
Point(93) = {0.026162, -0.749664, 0, 1.0};
Point(94) = {0.029599, -0.749175, 0, 1.0};
Point(95) = {0.032446, -0.748501, 0, 1.0};
Point(96) = {0.034684, -0.747685, 0, 1.0};
Point(97) = {0.036299, -0.746781, 0, 1.0};
Point(98) = {0.037114, -0.746056, 0, 1.0};
Point(99) = {0.037312, -0.745787, 0, 1.0};
Point(100) = {0.037446, -0.745532, 0, 1.0};
Point(101) = {0.037496, -0.745372, 0, 1.0};
Point(102) = {0.037506, -0.745226, 0, 1.0};
Point(103) = {0.037465, -0.745082, 0, 1.0};
Point(104) = {0.037378, -0.744925, 0, 1.0};
Point(105) = {0.037181, -0.744673, 0, 1.0};
Point(106) = {0.036911, -0.744402, 0, 1.0};
Point(107) = {0.036680, -0.744202, 0, 1.0};
Point(108) = {0.035123, -0.743188, 0, 1.0};
Point(109) = {0.032825, -0.742089, 0, 1.0};
Point(110) = {0.029817, -0.740940, 0, 1.0};
Point(111) = {0.026124, -0.739775, 0, 1.0};
Point(112) = {0.021773, -0.738621, 0, 1.0};
Point(113) = {0.016787, -0.737496, 0, 1.0};
Point(114) = {0.011201, -0.736406, 0, 1.0};
Point(115) = {0.005058, -0.735352, 0, 1.0};
Point(116) = {-0.001583, -0.734325, 0, 1.0};
Point(117) = {-0.008653, -0.733324, 0, 1.0};
Point(118) = {-0.016076, -0.732345, 0, 1.0};
Point(119) = {-0.023772, -0.731384, 0, 1.0};
Point(120) = {-0.031650, -0.730436, 0, 1.0};
Point(121) = {-0.039616, -0.729499, 0, 1.0};
Point(122) = {-0.047572, -0.728573, 0, 1.0};
Point(123) = {-0.055419, -0.727663, 0, 1.0};
Point(124) = {-0.063060, -0.726775, 0, 1.0};
Point(125) = {-0.070400, -0.725918, 0, 1.0};
Point(126) = {-0.077350, -0.725102, 0, 1.0};
Point(127) = {-0.083824, -0.724337, 0, 1.0};
Point(128) = {-0.089743, -0.723631, 0, 1.0};
Point(129) = {-0.095031, -0.722997, 0, 1.0};
Point(130) = {-0.099624, -0.722446, 0, 1.0};
Point(131) = {-0.103463, -0.721991, 0, 1.0};
Point(132) = {-0.106501, -0.721646, 0, 1.0};
Point(133) = {-0.108711, -0.721424, 0, 1.0};
Point(134) = {-0.110081, -0.721309, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html