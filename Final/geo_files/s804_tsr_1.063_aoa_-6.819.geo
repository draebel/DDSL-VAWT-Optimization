SetFactory("OpenCASCADE");

Point(1) = {0.148585, 0.739403, 0, 1.0};
Point(2) = {0.147881, 0.739545, 0, 1.0};
Point(3) = {0.145838, 0.739993, 0, 1.0};
Point(4) = {0.142745, 0.740691, 0, 1.0};
Point(5) = {0.138673, 0.741445, 0, 1.0};
Point(6) = {0.133569, 0.742170, 0, 1.0};
Point(7) = {0.127441, 0.742912, 0, 1.0};
Point(8) = {0.120587, 0.743717, 0, 1.0};
Point(9) = {0.112515, 0.744517, 0, 1.0};
Point(10) = {0.103939, 0.745372, 0, 1.0};
Point(11) = {0.094788, 0.746244, 0, 1.0};
Point(12) = {0.085198, 0.747110, 0, 1.0};
Point(13) = {0.075300, 0.747934, 0, 1.0};
Point(14) = {0.065230, 0.748680, 0, 1.0};
Point(15) = {0.055119, 0.749304, 0, 1.0};
Point(16) = {0.045087, 0.749760, 0, 1.0};
Point(17) = {0.035253, 0.750000, 0, 1.0};
Point(18) = {0.025723, 0.749978, 0, 1.0};
Point(19) = {0.016591, 0.749652, 0, 1.0};
Point(20) = {0.007948, 0.748973, 0, 1.0};
Point(21) = {-0.000124, 0.747885, 0, 1.0};
Point(22) = {-0.007619, 0.746289, 0, 1.0};
Point(23) = {-0.014621, 0.744201, 0, 1.0};
Point(24) = {-0.021149, 0.741743, 0, 1.0};
Point(25) = {-0.027140, 0.739014, 0, 1.0};
Point(26) = {-0.032537, 0.736091, 0, 1.0};
Point(27) = {-0.037282, 0.733038, 0, 1.0};
Point(28) = {-0.041329, 0.729923, 0, 1.0};
Point(29) = {-0.044638, 0.726804, 0, 1.0};
Point(30) = {-0.047173, 0.723752, 0, 1.0};
Point(31) = {-0.048918, 0.720824, 0, 1.0};
Point(32) = {-0.049860, 0.718095, 0, 1.0};
Point(33) = {-0.050000, 0.715657, 0, 1.0};
Point(34) = {-0.049338, 0.713675, 0, 1.0};
Point(35) = {-0.047619, 0.712235, 0, 1.0};
Point(36) = {-0.044694, 0.711191, 0, 1.0};
Point(37) = {-0.040721, 0.710423, 0, 1.0};
Point(38) = {-0.035776, 0.709937, 0, 1.0};
Point(39) = {-0.029932, 0.709742, 0, 1.0};
Point(40) = {-0.023256, 0.709837, 0, 1.0};
Point(41) = {-0.015829, 0.710223, 0, 1.0};
Point(42) = {-0.007738, 0.710897, 0, 1.0};
Point(43) = {0.000918, 0.711855, 0, 1.0};
Point(44) = {0.010028, 0.713104, 0, 1.0};
Point(45) = {0.019470, 0.714676, 0, 1.0};
Point(46) = {0.029183, 0.716657, 0, 1.0};
Point(47) = {0.039211, 0.719061, 0, 1.0};
Point(48) = {0.049574, 0.721777, 0, 1.0};
Point(49) = {0.060200, 0.724647, 0, 1.0};
Point(50) = {0.070971, 0.727542, 0, 1.0};
Point(51) = {0.081749, 0.730339, 0, 1.0};
Point(52) = {0.092373, 0.732925, 0, 1.0};
Point(53) = {0.102665, 0.735191, 0, 1.0};
Point(54) = {0.112432, 0.737058, 0, 1.0};
Point(55) = {0.121473, 0.738449, 0, 1.0};
Point(56) = {0.129517, 0.739512, 0, 1.0};
Point(57) = {0.136363, 0.739688, 0, 1.0};
Point(58) = {0.141728, 0.739727, 0, 1.0};
Point(59) = {0.145554, 0.739605, 0, 1.0};
Point(60) = {0.147831, 0.739464, 0, 1.0};
Point(61) = {-0.148585, -0.739403, 0, 1.0};
Point(62) = {-0.147881, -0.739545, 0, 1.0};
Point(63) = {-0.145838, -0.739993, 0, 1.0};
Point(64) = {-0.142745, -0.740691, 0, 1.0};
Point(65) = {-0.138673, -0.741445, 0, 1.0};
Point(66) = {-0.133569, -0.742170, 0, 1.0};
Point(67) = {-0.127441, -0.742912, 0, 1.0};
Point(68) = {-0.120587, -0.743717, 0, 1.0};
Point(69) = {-0.112515, -0.744517, 0, 1.0};
Point(70) = {-0.103939, -0.745372, 0, 1.0};
Point(71) = {-0.094788, -0.746244, 0, 1.0};
Point(72) = {-0.085198, -0.747110, 0, 1.0};
Point(73) = {-0.075300, -0.747934, 0, 1.0};
Point(74) = {-0.065230, -0.748680, 0, 1.0};
Point(75) = {-0.055119, -0.749304, 0, 1.0};
Point(76) = {-0.045087, -0.749760, 0, 1.0};
Point(77) = {-0.035253, -0.750000, 0, 1.0};
Point(78) = {-0.025723, -0.749978, 0, 1.0};
Point(79) = {-0.016591, -0.749652, 0, 1.0};
Point(80) = {-0.007948, -0.748973, 0, 1.0};
Point(81) = {0.000124, -0.747885, 0, 1.0};
Point(82) = {0.007619, -0.746289, 0, 1.0};
Point(83) = {0.014621, -0.744201, 0, 1.0};
Point(84) = {0.021149, -0.741743, 0, 1.0};
Point(85) = {0.027140, -0.739014, 0, 1.0};
Point(86) = {0.032537, -0.736091, 0, 1.0};
Point(87) = {0.037282, -0.733038, 0, 1.0};
Point(88) = {0.041329, -0.729923, 0, 1.0};
Point(89) = {0.044638, -0.726804, 0, 1.0};
Point(90) = {0.047173, -0.723752, 0, 1.0};
Point(91) = {0.048918, -0.720824, 0, 1.0};
Point(92) = {0.049860, -0.718095, 0, 1.0};
Point(93) = {0.050000, -0.715657, 0, 1.0};
Point(94) = {0.049338, -0.713675, 0, 1.0};
Point(95) = {0.047619, -0.712235, 0, 1.0};
Point(96) = {0.044694, -0.711191, 0, 1.0};
Point(97) = {0.040721, -0.710423, 0, 1.0};
Point(98) = {0.035776, -0.709937, 0, 1.0};
Point(99) = {0.029932, -0.709742, 0, 1.0};
Point(100) = {0.023256, -0.709837, 0, 1.0};
Point(101) = {0.015829, -0.710223, 0, 1.0};
Point(102) = {0.007738, -0.710897, 0, 1.0};
Point(103) = {-0.000918, -0.711855, 0, 1.0};
Point(104) = {-0.010028, -0.713104, 0, 1.0};
Point(105) = {-0.019470, -0.714676, 0, 1.0};
Point(106) = {-0.029183, -0.716657, 0, 1.0};
Point(107) = {-0.039211, -0.719061, 0, 1.0};
Point(108) = {-0.049574, -0.721777, 0, 1.0};
Point(109) = {-0.060200, -0.724647, 0, 1.0};
Point(110) = {-0.070971, -0.727542, 0, 1.0};
Point(111) = {-0.081749, -0.730339, 0, 1.0};
Point(112) = {-0.092373, -0.732925, 0, 1.0};
Point(113) = {-0.102665, -0.735191, 0, 1.0};
Point(114) = {-0.112432, -0.737058, 0, 1.0};
Point(115) = {-0.121473, -0.738449, 0, 1.0};
Point(116) = {-0.129517, -0.739512, 0, 1.0};
Point(117) = {-0.136363, -0.739688, 0, 1.0};
Point(118) = {-0.141728, -0.739727, 0, 1.0};
Point(119) = {-0.145554, -0.739605, 0, 1.0};
Point(120) = {-0.147831, -0.739464, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 46 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html