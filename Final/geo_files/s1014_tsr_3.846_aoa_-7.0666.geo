SetFactory("OpenCASCADE");

Point(1) = {0.111645, 0.746057, 0, 1.0};
Point(2) = {0.111061, 0.746018, 0, 1.0};
Point(3) = {0.109338, 0.745951, 0, 1.0};
Point(4) = {0.106554, 0.745941, 0, 1.0};
Point(5) = {0.102808, 0.746034, 0, 1.0};
Point(6) = {0.098197, 0.746261, 0, 1.0};
Point(7) = {0.092835, 0.746651, 0, 1.0};
Point(8) = {0.086872, 0.747221, 0, 1.0};
Point(9) = {0.080474, 0.747945, 0, 1.0};
Point(10) = {0.073828, 0.748767, 0, 1.0};
Point(11) = {0.067123, 0.749532, 0, 1.0};
Point(12) = {0.060393, 0.749977, 0, 1.0};
Point(13) = {0.053471, 0.750000, 0, 1.0};
Point(14) = {0.046296, 0.749721, 0, 1.0};
Point(15) = {0.038954, 0.749222, 0, 1.0};
Point(16) = {0.031531, 0.748535, 0, 1.0};
Point(17) = {0.024114, 0.747682, 0, 1.0};
Point(18) = {0.016787, 0.746684, 0, 1.0};
Point(19) = {0.009639, 0.745564, 0, 1.0};
Point(20) = {0.002748, 0.744333, 0, 1.0};
Point(21) = {-0.003802, 0.743013, 0, 1.0};
Point(22) = {-0.009937, 0.741621, 0, 1.0};
Point(23) = {-0.015578, 0.740171, 0, 1.0};
Point(24) = {-0.020658, 0.738673, 0, 1.0};
Point(25) = {-0.025114, 0.737137, 0, 1.0};
Point(26) = {-0.028901, 0.735558, 0, 1.0};
Point(27) = {-0.031988, 0.733942, 0, 1.0};
Point(28) = {-0.034365, 0.732299, 0, 1.0};
Point(29) = {-0.036034, 0.730655, 0, 1.0};
Point(30) = {-0.036995, 0.729057, 0, 1.0};
Point(31) = {-0.037215, 0.727603, 0, 1.0};
Point(32) = {-0.036646, 0.726247, 0, 1.0};
Point(33) = {-0.035324, 0.724933, 0, 1.0};
Point(34) = {-0.033304, 0.723746, 0, 1.0};
Point(35) = {-0.030599, 0.722733, 0, 1.0};
Point(36) = {-0.027210, 0.721919, 0, 1.0};
Point(37) = {-0.023152, 0.721313, 0, 1.0};
Point(38) = {-0.018456, 0.720911, 0, 1.0};
Point(39) = {-0.013164, 0.720700, 0, 1.0};
Point(40) = {-0.007340, 0.720671, 0, 1.0};
Point(41) = {-0.001051, 0.720818, 0, 1.0};
Point(42) = {0.005624, 0.721138, 0, 1.0};
Point(43) = {0.012607, 0.721627, 0, 1.0};
Point(44) = {0.019812, 0.722286, 0, 1.0};
Point(45) = {0.027160, 0.723108, 0, 1.0};
Point(46) = {0.034561, 0.724092, 0, 1.0};
Point(47) = {0.041928, 0.725238, 0, 1.0};
Point(48) = {0.049169, 0.726547, 0, 1.0};
Point(49) = {0.056195, 0.728028, 0, 1.0};
Point(50) = {0.062902, 0.729741, 0, 1.0};
Point(51) = {0.069319, 0.731815, 0, 1.0};
Point(52) = {0.075634, 0.734194, 0, 1.0};
Point(53) = {0.081879, 0.736614, 0, 1.0};
Point(54) = {0.087906, 0.738879, 0, 1.0};
Point(55) = {0.093550, 0.740887, 0, 1.0};
Point(56) = {0.098654, 0.742575, 0, 1.0};
Point(57) = {0.103070, 0.743921, 0, 1.0};
Point(58) = {0.106680, 0.744926, 0, 1.0};
Point(59) = {0.109382, 0.745596, 0, 1.0};
Point(60) = {0.111069, 0.745952, 0, 1.0};
Point(61) = {-0.111645, -0.746057, 0, 1.0};
Point(62) = {-0.111061, -0.746018, 0, 1.0};
Point(63) = {-0.109338, -0.745951, 0, 1.0};
Point(64) = {-0.106554, -0.745941, 0, 1.0};
Point(65) = {-0.102808, -0.746034, 0, 1.0};
Point(66) = {-0.098197, -0.746261, 0, 1.0};
Point(67) = {-0.092835, -0.746651, 0, 1.0};
Point(68) = {-0.086872, -0.747221, 0, 1.0};
Point(69) = {-0.080474, -0.747945, 0, 1.0};
Point(70) = {-0.073828, -0.748767, 0, 1.0};
Point(71) = {-0.067123, -0.749532, 0, 1.0};
Point(72) = {-0.060393, -0.749977, 0, 1.0};
Point(73) = {-0.053471, -0.750000, 0, 1.0};
Point(74) = {-0.046296, -0.749721, 0, 1.0};
Point(75) = {-0.038954, -0.749222, 0, 1.0};
Point(76) = {-0.031531, -0.748535, 0, 1.0};
Point(77) = {-0.024114, -0.747682, 0, 1.0};
Point(78) = {-0.016787, -0.746684, 0, 1.0};
Point(79) = {-0.009639, -0.745564, 0, 1.0};
Point(80) = {-0.002748, -0.744333, 0, 1.0};
Point(81) = {0.003802, -0.743013, 0, 1.0};
Point(82) = {0.009937, -0.741621, 0, 1.0};
Point(83) = {0.015578, -0.740171, 0, 1.0};
Point(84) = {0.020658, -0.738673, 0, 1.0};
Point(85) = {0.025114, -0.737137, 0, 1.0};
Point(86) = {0.028901, -0.735558, 0, 1.0};
Point(87) = {0.031988, -0.733942, 0, 1.0};
Point(88) = {0.034365, -0.732299, 0, 1.0};
Point(89) = {0.036034, -0.730655, 0, 1.0};
Point(90) = {0.036995, -0.729057, 0, 1.0};
Point(91) = {0.037215, -0.727603, 0, 1.0};
Point(92) = {0.036646, -0.726247, 0, 1.0};
Point(93) = {0.035324, -0.724933, 0, 1.0};
Point(94) = {0.033304, -0.723746, 0, 1.0};
Point(95) = {0.030599, -0.722733, 0, 1.0};
Point(96) = {0.027210, -0.721919, 0, 1.0};
Point(97) = {0.023152, -0.721313, 0, 1.0};
Point(98) = {0.018456, -0.720911, 0, 1.0};
Point(99) = {0.013164, -0.720700, 0, 1.0};
Point(100) = {0.007340, -0.720671, 0, 1.0};
Point(101) = {0.001051, -0.720818, 0, 1.0};
Point(102) = {-0.005624, -0.721138, 0, 1.0};
Point(103) = {-0.012607, -0.721627, 0, 1.0};
Point(104) = {-0.019812, -0.722286, 0, 1.0};
Point(105) = {-0.027160, -0.723108, 0, 1.0};
Point(106) = {-0.034561, -0.724092, 0, 1.0};
Point(107) = {-0.041928, -0.725238, 0, 1.0};
Point(108) = {-0.049169, -0.726547, 0, 1.0};
Point(109) = {-0.056195, -0.728028, 0, 1.0};
Point(110) = {-0.062902, -0.729741, 0, 1.0};
Point(111) = {-0.069319, -0.731815, 0, 1.0};
Point(112) = {-0.075634, -0.734194, 0, 1.0};
Point(113) = {-0.081879, -0.736614, 0, 1.0};
Point(114) = {-0.087906, -0.738879, 0, 1.0};
Point(115) = {-0.093550, -0.740887, 0, 1.0};
Point(116) = {-0.098654, -0.742575, 0, 1.0};
Point(117) = {-0.103070, -0.743921, 0, 1.0};
Point(118) = {-0.106680, -0.744926, 0, 1.0};
Point(119) = {-0.109382, -0.745596, 0, 1.0};
Point(120) = {-0.111069, -0.745952, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html