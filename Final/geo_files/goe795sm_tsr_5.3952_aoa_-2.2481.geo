SetFactory("OpenCASCADE");

Point(1) = {0.112413, 0.743832, 0, 1.0};
Point(2) = {0.111765, 0.743958, 0, 1.0};
Point(3) = {0.109836, 0.744304, 0, 1.0};
Point(4) = {0.106662, 0.744797, 0, 1.0};
Point(5) = {0.102296, 0.745377, 0, 1.0};
Point(6) = {0.096817, 0.746015, 0, 1.0};
Point(7) = {0.090316, 0.746698, 0, 1.0};
Point(8) = {0.082907, 0.747411, 0, 1.0};
Point(9) = {0.074716, 0.748124, 0, 1.0};
Point(10) = {0.065883, 0.748797, 0, 1.0};
Point(11) = {0.056564, 0.749369, 0, 1.0};
Point(12) = {0.046918, 0.749787, 0, 1.0};
Point(13) = {0.037113, 0.750000, 0, 1.0};
Point(14) = {0.027317, 0.749977, 0, 1.0};
Point(15) = {0.017698, 0.749714, 0, 1.0};
Point(16) = {0.013006, 0.749496, 0, 1.0};
Point(17) = {0.008420, 0.749225, 0, 1.0};
Point(18) = {0.003960, 0.748897, 0, 1.0};
Point(19) = {-0.000357, 0.748511, 0, 1.0};
Point(20) = {-0.004512, 0.748064, 0, 1.0};
Point(21) = {-0.008483, 0.747557, 0, 1.0};
Point(22) = {-0.012258, 0.746995, 0, 1.0};
Point(23) = {-0.015818, 0.746383, 0, 1.0};
Point(24) = {-0.019151, 0.745732, 0, 1.0};
Point(25) = {-0.022240, 0.745049, 0, 1.0};
Point(26) = {-0.025072, 0.744340, 0, 1.0};
Point(27) = {-0.027638, 0.743608, 0, 1.0};
Point(28) = {-0.029924, 0.742854, 0, 1.0};
Point(29) = {-0.031921, 0.742084, 0, 1.0};
Point(30) = {-0.033621, 0.741304, 0, 1.0};
Point(31) = {-0.035015, 0.740535, 0, 1.0};
Point(32) = {-0.036102, 0.739796, 0, 1.0};
Point(33) = {-0.036875, 0.739111, 0, 1.0};
Point(34) = {-0.037332, 0.738489, 0, 1.0};
Point(35) = {-0.037471, 0.737935, 0, 1.0};
Point(36) = {-0.037291, 0.737431, 0, 1.0};
Point(37) = {-0.036791, 0.736971, 0, 1.0};
Point(38) = {-0.035974, 0.736557, 0, 1.0};
Point(39) = {-0.034845, 0.736205, 0, 1.0};
Point(40) = {-0.033410, 0.735931, 0, 1.0};
Point(41) = {-0.031672, 0.735741, 0, 1.0};
Point(42) = {-0.029640, 0.735624, 0, 1.0};
Point(43) = {-0.027322, 0.735559, 0, 1.0};
Point(44) = {-0.024727, 0.735532, 0, 1.0};
Point(45) = {-0.021867, 0.735539, 0, 1.0};
Point(46) = {-0.018753, 0.735594, 0, 1.0};
Point(47) = {-0.015399, 0.735706, 0, 1.0};
Point(48) = {-0.011821, 0.735879, 0, 1.0};
Point(49) = {-0.008034, 0.736106, 0, 1.0};
Point(50) = {-0.004052, 0.736366, 0, 1.0};
Point(51) = {0.000109, 0.736639, 0, 1.0};
Point(52) = {0.004430, 0.736915, 0, 1.0};
Point(53) = {0.008893, 0.737192, 0, 1.0};
Point(54) = {0.013478, 0.737474, 0, 1.0};
Point(55) = {0.018167, 0.737762, 0, 1.0};
Point(56) = {0.027774, 0.738348, 0, 1.0};
Point(57) = {0.037547, 0.738940, 0, 1.0};
Point(58) = {0.047321, 0.739526, 0, 1.0};
Point(59) = {0.056928, 0.740100, 0, 1.0};
Point(60) = {0.066203, 0.740652, 0, 1.0};
Point(61) = {0.074988, 0.741180, 0, 1.0};
Point(62) = {0.083132, 0.741671, 0, 1.0};
Point(63) = {0.090496, 0.742117, 0, 1.0};
Point(64) = {0.096955, 0.742512, 0, 1.0};
Point(65) = {0.102395, 0.742865, 0, 1.0};
Point(66) = {0.106724, 0.743196, 0, 1.0};
Point(67) = {0.109868, 0.743502, 0, 1.0};
Point(68) = {0.111774, 0.743741, 0, 1.0};
Point(69) = {-0.112413, -0.743832, 0, 1.0};
Point(70) = {-0.111765, -0.743958, 0, 1.0};
Point(71) = {-0.109836, -0.744304, 0, 1.0};
Point(72) = {-0.106662, -0.744797, 0, 1.0};
Point(73) = {-0.102296, -0.745377, 0, 1.0};
Point(74) = {-0.096817, -0.746015, 0, 1.0};
Point(75) = {-0.090316, -0.746698, 0, 1.0};
Point(76) = {-0.082907, -0.747411, 0, 1.0};
Point(77) = {-0.074716, -0.748124, 0, 1.0};
Point(78) = {-0.065883, -0.748797, 0, 1.0};
Point(79) = {-0.056564, -0.749369, 0, 1.0};
Point(80) = {-0.046918, -0.749787, 0, 1.0};
Point(81) = {-0.037113, -0.750000, 0, 1.0};
Point(82) = {-0.027317, -0.749977, 0, 1.0};
Point(83) = {-0.017698, -0.749714, 0, 1.0};
Point(84) = {-0.013006, -0.749496, 0, 1.0};
Point(85) = {-0.008420, -0.749225, 0, 1.0};
Point(86) = {-0.003960, -0.748897, 0, 1.0};
Point(87) = {0.000357, -0.748511, 0, 1.0};
Point(88) = {0.004512, -0.748064, 0, 1.0};
Point(89) = {0.008483, -0.747557, 0, 1.0};
Point(90) = {0.012258, -0.746995, 0, 1.0};
Point(91) = {0.015818, -0.746383, 0, 1.0};
Point(92) = {0.019151, -0.745732, 0, 1.0};
Point(93) = {0.022240, -0.745049, 0, 1.0};
Point(94) = {0.025072, -0.744340, 0, 1.0};
Point(95) = {0.027638, -0.743608, 0, 1.0};
Point(96) = {0.029924, -0.742854, 0, 1.0};
Point(97) = {0.031921, -0.742084, 0, 1.0};
Point(98) = {0.033621, -0.741304, 0, 1.0};
Point(99) = {0.035015, -0.740535, 0, 1.0};
Point(100) = {0.036102, -0.739796, 0, 1.0};
Point(101) = {0.036875, -0.739111, 0, 1.0};
Point(102) = {0.037332, -0.738489, 0, 1.0};
Point(103) = {0.037471, -0.737935, 0, 1.0};
Point(104) = {0.037291, -0.737431, 0, 1.0};
Point(105) = {0.036791, -0.736971, 0, 1.0};
Point(106) = {0.035974, -0.736557, 0, 1.0};
Point(107) = {0.034845, -0.736205, 0, 1.0};
Point(108) = {0.033410, -0.735931, 0, 1.0};
Point(109) = {0.031672, -0.735741, 0, 1.0};
Point(110) = {0.029640, -0.735624, 0, 1.0};
Point(111) = {0.027322, -0.735559, 0, 1.0};
Point(112) = {0.024727, -0.735532, 0, 1.0};
Point(113) = {0.021867, -0.735539, 0, 1.0};
Point(114) = {0.018753, -0.735594, 0, 1.0};
Point(115) = {0.015399, -0.735706, 0, 1.0};
Point(116) = {0.011821, -0.735879, 0, 1.0};
Point(117) = {0.008034, -0.736106, 0, 1.0};
Point(118) = {0.004052, -0.736366, 0, 1.0};
Point(119) = {-0.000109, -0.736639, 0, 1.0};
Point(120) = {-0.004430, -0.736915, 0, 1.0};
Point(121) = {-0.008893, -0.737192, 0, 1.0};
Point(122) = {-0.013478, -0.737474, 0, 1.0};
Point(123) = {-0.018167, -0.737762, 0, 1.0};
Point(124) = {-0.027774, -0.738348, 0, 1.0};
Point(125) = {-0.037547, -0.738940, 0, 1.0};
Point(126) = {-0.047321, -0.739526, 0, 1.0};
Point(127) = {-0.056928, -0.740100, 0, 1.0};
Point(128) = {-0.066203, -0.740652, 0, 1.0};
Point(129) = {-0.074988, -0.741180, 0, 1.0};
Point(130) = {-0.083132, -0.741671, 0, 1.0};
Point(131) = {-0.090496, -0.742117, 0, 1.0};
Point(132) = {-0.096955, -0.742512, 0, 1.0};
Point(133) = {-0.102395, -0.742865, 0, 1.0};
Point(134) = {-0.106724, -0.743196, 0, 1.0};
Point(135) = {-0.109868, -0.743502, 0, 1.0};
Point(136) = {-0.111774, -0.743741, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:52};
Spline(3) = {52:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:86};
Spline(6) = {86:120};
Spline(7) = {120:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html