SetFactory("OpenCASCADE");

Point(1) = {0.149846, 0.741776, 0, 1.0};
Point(2) = {0.148983, 0.741944, 0, 1.0};
Point(3) = {0.146411, 0.742406, 0, 1.0};
Point(4) = {0.142178, 0.743062, 0, 1.0};
Point(5) = {0.136357, 0.743836, 0, 1.0};
Point(6) = {0.129052, 0.744687, 0, 1.0};
Point(7) = {0.120384, 0.745597, 0, 1.0};
Point(8) = {0.110505, 0.746548, 0, 1.0};
Point(9) = {0.099583, 0.747499, 0, 1.0};
Point(10) = {0.087807, 0.748395, 0, 1.0};
Point(11) = {0.075381, 0.749159, 0, 1.0};
Point(12) = {0.062519, 0.749717, 0, 1.0};
Point(13) = {0.049446, 0.750000, 0, 1.0};
Point(14) = {0.036385, 0.749970, 0, 1.0};
Point(15) = {0.023559, 0.749618, 0, 1.0};
Point(16) = {0.017304, 0.749329, 0, 1.0};
Point(17) = {0.011189, 0.748967, 0, 1.0};
Point(18) = {0.005242, 0.748529, 0, 1.0};
Point(19) = {-0.000514, 0.748015, 0, 1.0};
Point(20) = {-0.006053, 0.747419, 0, 1.0};
Point(21) = {-0.011349, 0.746743, 0, 1.0};
Point(22) = {-0.016381, 0.745993, 0, 1.0};
Point(23) = {-0.021129, 0.745178, 0, 1.0};
Point(24) = {-0.025572, 0.744309, 0, 1.0};
Point(25) = {-0.029692, 0.743399, 0, 1.0};
Point(26) = {-0.033468, 0.742454, 0, 1.0};
Point(27) = {-0.036888, 0.741477, 0, 1.0};
Point(28) = {-0.039937, 0.740473, 0, 1.0};
Point(29) = {-0.042599, 0.739445, 0, 1.0};
Point(30) = {-0.044866, 0.738406, 0, 1.0};
Point(31) = {-0.046725, 0.737380, 0, 1.0};
Point(32) = {-0.048173, 0.736394, 0, 1.0};
Point(33) = {-0.049204, 0.735481, 0, 1.0};
Point(34) = {-0.049814, 0.734653, 0, 1.0};
Point(35) = {-0.049999, 0.733913, 0, 1.0};
Point(36) = {-0.049759, 0.733242, 0, 1.0};
Point(37) = {-0.049092, 0.732627, 0, 1.0};
Point(38) = {-0.048004, 0.732076, 0, 1.0};
Point(39) = {-0.046498, 0.731606, 0, 1.0};
Point(40) = {-0.044584, 0.731241, 0, 1.0};
Point(41) = {-0.042267, 0.730988, 0, 1.0};
Point(42) = {-0.039558, 0.730832, 0, 1.0};
Point(43) = {-0.036467, 0.730745, 0, 1.0};
Point(44) = {-0.033007, 0.730709, 0, 1.0};
Point(45) = {-0.029194, 0.730718, 0, 1.0};
Point(46) = {-0.025042, 0.730791, 0, 1.0};
Point(47) = {-0.020570, 0.730941, 0, 1.0};
Point(48) = {-0.015799, 0.731172, 0, 1.0};
Point(49) = {-0.010749, 0.731475, 0, 1.0};
Point(50) = {-0.005441, 0.731821, 0, 1.0};
Point(51) = {0.000107, 0.732185, 0, 1.0};
Point(52) = {0.005869, 0.732553, 0, 1.0};
Point(53) = {0.011819, 0.732923, 0, 1.0};
Point(54) = {0.017933, 0.733299, 0, 1.0};
Point(55) = {0.024185, 0.733683, 0, 1.0};
Point(56) = {0.036994, 0.734464, 0, 1.0};
Point(57) = {0.050025, 0.735253, 0, 1.0};
Point(58) = {0.063056, 0.736035, 0, 1.0};
Point(59) = {0.075866, 0.736800, 0, 1.0};
Point(60) = {0.088233, 0.737536, 0, 1.0};
Point(61) = {0.099946, 0.738240, 0, 1.0};
Point(62) = {0.110805, 0.738894, 0, 1.0};
Point(63) = {0.120623, 0.739490, 0, 1.0};
Point(64) = {0.129235, 0.740016, 0, 1.0};
Point(65) = {0.136488, 0.740487, 0, 1.0};
Point(66) = {0.142262, 0.740928, 0, 1.0};
Point(67) = {0.146453, 0.741337, 0, 1.0};
Point(68) = {0.148994, 0.741654, 0, 1.0};
Point(69) = {-0.149846, -0.741776, 0, 1.0};
Point(70) = {-0.148983, -0.741944, 0, 1.0};
Point(71) = {-0.146411, -0.742406, 0, 1.0};
Point(72) = {-0.142178, -0.743062, 0, 1.0};
Point(73) = {-0.136357, -0.743836, 0, 1.0};
Point(74) = {-0.129052, -0.744687, 0, 1.0};
Point(75) = {-0.120384, -0.745597, 0, 1.0};
Point(76) = {-0.110505, -0.746548, 0, 1.0};
Point(77) = {-0.099583, -0.747499, 0, 1.0};
Point(78) = {-0.087807, -0.748395, 0, 1.0};
Point(79) = {-0.075381, -0.749159, 0, 1.0};
Point(80) = {-0.062519, -0.749717, 0, 1.0};
Point(81) = {-0.049446, -0.750000, 0, 1.0};
Point(82) = {-0.036385, -0.749970, 0, 1.0};
Point(83) = {-0.023559, -0.749618, 0, 1.0};
Point(84) = {-0.017304, -0.749329, 0, 1.0};
Point(85) = {-0.011189, -0.748967, 0, 1.0};
Point(86) = {-0.005242, -0.748529, 0, 1.0};
Point(87) = {0.000514, -0.748015, 0, 1.0};
Point(88) = {0.006053, -0.747419, 0, 1.0};
Point(89) = {0.011349, -0.746743, 0, 1.0};
Point(90) = {0.016381, -0.745993, 0, 1.0};
Point(91) = {0.021129, -0.745178, 0, 1.0};
Point(92) = {0.025572, -0.744309, 0, 1.0};
Point(93) = {0.029692, -0.743399, 0, 1.0};
Point(94) = {0.033468, -0.742454, 0, 1.0};
Point(95) = {0.036888, -0.741477, 0, 1.0};
Point(96) = {0.039937, -0.740473, 0, 1.0};
Point(97) = {0.042599, -0.739445, 0, 1.0};
Point(98) = {0.044866, -0.738406, 0, 1.0};
Point(99) = {0.046725, -0.737380, 0, 1.0};
Point(100) = {0.048173, -0.736394, 0, 1.0};
Point(101) = {0.049204, -0.735481, 0, 1.0};
Point(102) = {0.049814, -0.734653, 0, 1.0};
Point(103) = {0.049999, -0.733913, 0, 1.0};
Point(104) = {0.049759, -0.733242, 0, 1.0};
Point(105) = {0.049092, -0.732627, 0, 1.0};
Point(106) = {0.048004, -0.732076, 0, 1.0};
Point(107) = {0.046498, -0.731606, 0, 1.0};
Point(108) = {0.044584, -0.731241, 0, 1.0};
Point(109) = {0.042267, -0.730988, 0, 1.0};
Point(110) = {0.039558, -0.730832, 0, 1.0};
Point(111) = {0.036467, -0.730745, 0, 1.0};
Point(112) = {0.033007, -0.730709, 0, 1.0};
Point(113) = {0.029194, -0.730718, 0, 1.0};
Point(114) = {0.025042, -0.730791, 0, 1.0};
Point(115) = {0.020570, -0.730941, 0, 1.0};
Point(116) = {0.015799, -0.731172, 0, 1.0};
Point(117) = {0.010749, -0.731475, 0, 1.0};
Point(118) = {0.005441, -0.731821, 0, 1.0};
Point(119) = {-0.000107, -0.732185, 0, 1.0};
Point(120) = {-0.005869, -0.732553, 0, 1.0};
Point(121) = {-0.011819, -0.732923, 0, 1.0};
Point(122) = {-0.017933, -0.733299, 0, 1.0};
Point(123) = {-0.024185, -0.733683, 0, 1.0};
Point(124) = {-0.036994, -0.734464, 0, 1.0};
Point(125) = {-0.050025, -0.735253, 0, 1.0};
Point(126) = {-0.063056, -0.736035, 0, 1.0};
Point(127) = {-0.075866, -0.736800, 0, 1.0};
Point(128) = {-0.088233, -0.737536, 0, 1.0};
Point(129) = {-0.099946, -0.738240, 0, 1.0};
Point(130) = {-0.110805, -0.738894, 0, 1.0};
Point(131) = {-0.120623, -0.739490, 0, 1.0};
Point(132) = {-0.129235, -0.740016, 0, 1.0};
Point(133) = {-0.136488, -0.740487, 0, 1.0};
Point(134) = {-0.142262, -0.740928, 0, 1.0};
Point(135) = {-0.146453, -0.741337, 0, 1.0};
Point(136) = {-0.148994, -0.741654, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:52};
Spline(3) = {52:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:86};
Spline(6) = {86:120};
Spline(7) = {120:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html