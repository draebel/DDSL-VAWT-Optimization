SetFactory("OpenCASCADE");

Point(1) = {0.074934, 0.735822, 0, 1.0};
Point(2) = {0.074414, 0.735854, 0, 1.0};
Point(3) = {0.072885, 0.735978, 0, 1.0};
Point(4) = {0.070409, 0.736239, 0, 1.0};
Point(5) = {0.067050, 0.736659, 0, 1.0};
Point(6) = {0.062880, 0.737248, 0, 1.0};
Point(7) = {0.057979, 0.738009, 0, 1.0};
Point(8) = {0.052438, 0.738938, 0, 1.0};
Point(9) = {0.046366, 0.740019, 0, 1.0};
Point(10) = {0.039883, 0.741203, 0, 1.0};
Point(11) = {0.033068, 0.742404, 0, 1.0};
Point(12) = {0.025956, 0.743576, 0, 1.0};
Point(13) = {0.018608, 0.744713, 0, 1.0};
Point(14) = {0.011112, 0.745798, 0, 1.0};
Point(15) = {0.003546, 0.746799, 0, 1.0};
Point(16) = {-0.004016, 0.747699, 0, 1.0};
Point(17) = {-0.011493, 0.748477, 0, 1.0};
Point(18) = {-0.018809, 0.749115, 0, 1.0};
Point(19) = {-0.025894, 0.749590, 0, 1.0};
Point(20) = {-0.032686, 0.749888, 0, 1.0};
Point(21) = {-0.039125, 0.750000, 0, 1.0};
Point(22) = {-0.045161, 0.749923, 0, 1.0};
Point(23) = {-0.050742, 0.749661, 0, 1.0};
Point(24) = {-0.055821, 0.749223, 0, 1.0};
Point(25) = {-0.060356, 0.748614, 0, 1.0};
Point(26) = {-0.064317, 0.747849, 0, 1.0};
Point(27) = {-0.067675, 0.746949, 0, 1.0};
Point(28) = {-0.070414, 0.745942, 0, 1.0};
Point(29) = {-0.072518, 0.744863, 0, 1.0};
Point(30) = {-0.073980, 0.743764, 0, 1.0};
Point(31) = {-0.074688, 0.742897, 0, 1.0};
Point(32) = {-0.074831, 0.742598, 0, 1.0};
Point(33) = {-0.074914, 0.742318, 0, 1.0};
Point(34) = {-0.074933, 0.742147, 0, 1.0};
Point(35) = {-0.074914, 0.741994, 0, 1.0};
Point(36) = {-0.074846, 0.741849, 0, 1.0};
Point(37) = {-0.074731, 0.741699, 0, 1.0};
Point(38) = {-0.074487, 0.741465, 0, 1.0};
Point(39) = {-0.074168, 0.741222, 0, 1.0};
Point(40) = {-0.073947, 0.741074, 0, 1.0};
Point(41) = {-0.072235, 0.740226, 0, 1.0};
Point(42) = {-0.069774, 0.739369, 0, 1.0};
Point(43) = {-0.066605, 0.738536, 0, 1.0};
Point(44) = {-0.062768, 0.737762, 0, 1.0};
Point(45) = {-0.058288, 0.737085, 0, 1.0};
Point(46) = {-0.053184, 0.736520, 0, 1.0};
Point(47) = {-0.047486, 0.736066, 0, 1.0};
Point(48) = {-0.041238, 0.735715, 0, 1.0};
Point(49) = {-0.034498, 0.735449, 0, 1.0};
Point(50) = {-0.027339, 0.735257, 0, 1.0};
Point(51) = {-0.019839, 0.735128, 0, 1.0};
Point(52) = {-0.012081, 0.735052, 0, 1.0};
Point(53) = {-0.004152, 0.735015, 0, 1.0};
Point(54) = {0.003855, 0.735008, 0, 1.0};
Point(55) = {0.011845, 0.735018, 0, 1.0};
Point(56) = {0.019720, 0.735040, 0, 1.0};
Point(57) = {0.027382, 0.735068, 0, 1.0};
Point(58) = {0.034738, 0.735100, 0, 1.0};
Point(59) = {0.041696, 0.735135, 0, 1.0};
Point(60) = {0.048174, 0.735175, 0, 1.0};
Point(61) = {0.054091, 0.735220, 0, 1.0};
Point(62) = {0.059377, 0.735272, 0, 1.0};
Point(63) = {0.063965, 0.735334, 0, 1.0};
Point(64) = {0.067800, 0.735410, 0, 1.0};
Point(65) = {0.070832, 0.735506, 0, 1.0};
Point(66) = {0.073040, 0.735639, 0, 1.0};
Point(67) = {0.074435, 0.735771, 0, 1.0};
Point(68) = {-0.074934, -0.735822, 0, 1.0};
Point(69) = {-0.074414, -0.735854, 0, 1.0};
Point(70) = {-0.072885, -0.735978, 0, 1.0};
Point(71) = {-0.070409, -0.736239, 0, 1.0};
Point(72) = {-0.067050, -0.736659, 0, 1.0};
Point(73) = {-0.062880, -0.737248, 0, 1.0};
Point(74) = {-0.057979, -0.738009, 0, 1.0};
Point(75) = {-0.052438, -0.738938, 0, 1.0};
Point(76) = {-0.046366, -0.740019, 0, 1.0};
Point(77) = {-0.039883, -0.741203, 0, 1.0};
Point(78) = {-0.033068, -0.742404, 0, 1.0};
Point(79) = {-0.025956, -0.743576, 0, 1.0};
Point(80) = {-0.018608, -0.744713, 0, 1.0};
Point(81) = {-0.011112, -0.745798, 0, 1.0};
Point(82) = {-0.003546, -0.746799, 0, 1.0};
Point(83) = {0.004016, -0.747699, 0, 1.0};
Point(84) = {0.011493, -0.748477, 0, 1.0};
Point(85) = {0.018809, -0.749115, 0, 1.0};
Point(86) = {0.025894, -0.749590, 0, 1.0};
Point(87) = {0.032686, -0.749888, 0, 1.0};
Point(88) = {0.039125, -0.750000, 0, 1.0};
Point(89) = {0.045161, -0.749923, 0, 1.0};
Point(90) = {0.050742, -0.749661, 0, 1.0};
Point(91) = {0.055821, -0.749223, 0, 1.0};
Point(92) = {0.060356, -0.748614, 0, 1.0};
Point(93) = {0.064317, -0.747849, 0, 1.0};
Point(94) = {0.067675, -0.746949, 0, 1.0};
Point(95) = {0.070414, -0.745942, 0, 1.0};
Point(96) = {0.072518, -0.744863, 0, 1.0};
Point(97) = {0.073980, -0.743764, 0, 1.0};
Point(98) = {0.074688, -0.742897, 0, 1.0};
Point(99) = {0.074831, -0.742598, 0, 1.0};
Point(100) = {0.074914, -0.742318, 0, 1.0};
Point(101) = {0.074933, -0.742147, 0, 1.0};
Point(102) = {0.074914, -0.741994, 0, 1.0};
Point(103) = {0.074846, -0.741849, 0, 1.0};
Point(104) = {0.074731, -0.741699, 0, 1.0};
Point(105) = {0.074487, -0.741465, 0, 1.0};
Point(106) = {0.074168, -0.741222, 0, 1.0};
Point(107) = {0.073947, -0.741074, 0, 1.0};
Point(108) = {0.072235, -0.740226, 0, 1.0};
Point(109) = {0.069774, -0.739369, 0, 1.0};
Point(110) = {0.066605, -0.738536, 0, 1.0};
Point(111) = {0.062768, -0.737762, 0, 1.0};
Point(112) = {0.058288, -0.737085, 0, 1.0};
Point(113) = {0.053184, -0.736520, 0, 1.0};
Point(114) = {0.047486, -0.736066, 0, 1.0};
Point(115) = {0.041238, -0.735715, 0, 1.0};
Point(116) = {0.034498, -0.735449, 0, 1.0};
Point(117) = {0.027339, -0.735257, 0, 1.0};
Point(118) = {0.019839, -0.735128, 0, 1.0};
Point(119) = {0.012081, -0.735052, 0, 1.0};
Point(120) = {0.004152, -0.735015, 0, 1.0};
Point(121) = {-0.003855, -0.735008, 0, 1.0};
Point(122) = {-0.011845, -0.735018, 0, 1.0};
Point(123) = {-0.019720, -0.735040, 0, 1.0};
Point(124) = {-0.027382, -0.735068, 0, 1.0};
Point(125) = {-0.034738, -0.735100, 0, 1.0};
Point(126) = {-0.041696, -0.735135, 0, 1.0};
Point(127) = {-0.048174, -0.735175, 0, 1.0};
Point(128) = {-0.054091, -0.735220, 0, 1.0};
Point(129) = {-0.059377, -0.735272, 0, 1.0};
Point(130) = {-0.063965, -0.735334, 0, 1.0};
Point(131) = {-0.067800, -0.735410, 0, 1.0};
Point(132) = {-0.070832, -0.735506, 0, 1.0};
Point(133) = {-0.073040, -0.735639, 0, 1.0};
Point(134) = {-0.074435, -0.735771, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html