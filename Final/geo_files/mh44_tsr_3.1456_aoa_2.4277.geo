SetFactory("OpenCASCADE");

Point(1) = {0.112399, 0.735822, 0, 1.0};
Point(2) = {0.111879, 0.735854, 0, 1.0};
Point(3) = {0.110351, 0.735978, 0, 1.0};
Point(4) = {0.107874, 0.736239, 0, 1.0};
Point(5) = {0.104515, 0.736659, 0, 1.0};
Point(6) = {0.100345, 0.737248, 0, 1.0};
Point(7) = {0.095444, 0.738010, 0, 1.0};
Point(8) = {0.089904, 0.738938, 0, 1.0};
Point(9) = {0.083832, 0.740019, 0, 1.0};
Point(10) = {0.077348, 0.741203, 0, 1.0};
Point(11) = {0.070533, 0.742404, 0, 1.0};
Point(12) = {0.063421, 0.743576, 0, 1.0};
Point(13) = {0.056074, 0.744713, 0, 1.0};
Point(14) = {0.048577, 0.745798, 0, 1.0};
Point(15) = {0.041012, 0.746799, 0, 1.0};
Point(16) = {0.033450, 0.747699, 0, 1.0};
Point(17) = {0.025973, 0.748478, 0, 1.0};
Point(18) = {0.018657, 0.749115, 0, 1.0};
Point(19) = {0.011572, 0.749590, 0, 1.0};
Point(20) = {0.004780, 0.749888, 0, 1.0};
Point(21) = {-0.001659, 0.750000, 0, 1.0};
Point(22) = {-0.007694, 0.749923, 0, 1.0};
Point(23) = {-0.013276, 0.749661, 0, 1.0};
Point(24) = {-0.018355, 0.749223, 0, 1.0};
Point(25) = {-0.022890, 0.748614, 0, 1.0};
Point(26) = {-0.026850, 0.747849, 0, 1.0};
Point(27) = {-0.030209, 0.746949, 0, 1.0};
Point(28) = {-0.032948, 0.745942, 0, 1.0};
Point(29) = {-0.035051, 0.744863, 0, 1.0};
Point(30) = {-0.036513, 0.743764, 0, 1.0};
Point(31) = {-0.037221, 0.742897, 0, 1.0};
Point(32) = {-0.037365, 0.742598, 0, 1.0};
Point(33) = {-0.037447, 0.742318, 0, 1.0};
Point(34) = {-0.037466, 0.742147, 0, 1.0};
Point(35) = {-0.037448, 0.741994, 0, 1.0};
Point(36) = {-0.037380, 0.741849, 0, 1.0};
Point(37) = {-0.037264, 0.741699, 0, 1.0};
Point(38) = {-0.037021, 0.741465, 0, 1.0};
Point(39) = {-0.036702, 0.741222, 0, 1.0};
Point(40) = {-0.036481, 0.741074, 0, 1.0};
Point(41) = {-0.034769, 0.740226, 0, 1.0};
Point(42) = {-0.032307, 0.739369, 0, 1.0};
Point(43) = {-0.029139, 0.738536, 0, 1.0};
Point(44) = {-0.025302, 0.737762, 0, 1.0};
Point(45) = {-0.020822, 0.737085, 0, 1.0};
Point(46) = {-0.015718, 0.736520, 0, 1.0};
Point(47) = {-0.010020, 0.736066, 0, 1.0};
Point(48) = {-0.003772, 0.735715, 0, 1.0};
Point(49) = {0.002968, 0.735450, 0, 1.0};
Point(50) = {0.010127, 0.735257, 0, 1.0};
Point(51) = {0.017627, 0.735128, 0, 1.0};
Point(52) = {0.025385, 0.735052, 0, 1.0};
Point(53) = {0.033314, 0.735015, 0, 1.0};
Point(54) = {0.041321, 0.735008, 0, 1.0};
Point(55) = {0.049311, 0.735018, 0, 1.0};
Point(56) = {0.057185, 0.735040, 0, 1.0};
Point(57) = {0.064848, 0.735068, 0, 1.0};
Point(58) = {0.072203, 0.735100, 0, 1.0};
Point(59) = {0.079162, 0.735135, 0, 1.0};
Point(60) = {0.085639, 0.735175, 0, 1.0};
Point(61) = {0.091556, 0.735220, 0, 1.0};
Point(62) = {0.096842, 0.735273, 0, 1.0};
Point(63) = {0.101431, 0.735334, 0, 1.0};
Point(64) = {0.105265, 0.735410, 0, 1.0};
Point(65) = {0.108297, 0.735506, 0, 1.0};
Point(66) = {0.110505, 0.735639, 0, 1.0};
Point(67) = {0.111901, 0.735771, 0, 1.0};
Point(68) = {-0.112399, -0.735822, 0, 1.0};
Point(69) = {-0.111879, -0.735854, 0, 1.0};
Point(70) = {-0.110351, -0.735978, 0, 1.0};
Point(71) = {-0.107874, -0.736239, 0, 1.0};
Point(72) = {-0.104515, -0.736659, 0, 1.0};
Point(73) = {-0.100345, -0.737248, 0, 1.0};
Point(74) = {-0.095444, -0.738010, 0, 1.0};
Point(75) = {-0.089904, -0.738938, 0, 1.0};
Point(76) = {-0.083832, -0.740019, 0, 1.0};
Point(77) = {-0.077348, -0.741203, 0, 1.0};
Point(78) = {-0.070533, -0.742404, 0, 1.0};
Point(79) = {-0.063421, -0.743576, 0, 1.0};
Point(80) = {-0.056074, -0.744713, 0, 1.0};
Point(81) = {-0.048577, -0.745798, 0, 1.0};
Point(82) = {-0.041012, -0.746799, 0, 1.0};
Point(83) = {-0.033450, -0.747699, 0, 1.0};
Point(84) = {-0.025973, -0.748478, 0, 1.0};
Point(85) = {-0.018657, -0.749115, 0, 1.0};
Point(86) = {-0.011572, -0.749590, 0, 1.0};
Point(87) = {-0.004780, -0.749888, 0, 1.0};
Point(88) = {0.001659, -0.750000, 0, 1.0};
Point(89) = {0.007694, -0.749923, 0, 1.0};
Point(90) = {0.013276, -0.749661, 0, 1.0};
Point(91) = {0.018355, -0.749223, 0, 1.0};
Point(92) = {0.022890, -0.748614, 0, 1.0};
Point(93) = {0.026850, -0.747849, 0, 1.0};
Point(94) = {0.030209, -0.746949, 0, 1.0};
Point(95) = {0.032948, -0.745942, 0, 1.0};
Point(96) = {0.035051, -0.744863, 0, 1.0};
Point(97) = {0.036513, -0.743764, 0, 1.0};
Point(98) = {0.037221, -0.742897, 0, 1.0};
Point(99) = {0.037365, -0.742598, 0, 1.0};
Point(100) = {0.037447, -0.742318, 0, 1.0};
Point(101) = {0.037466, -0.742147, 0, 1.0};
Point(102) = {0.037448, -0.741994, 0, 1.0};
Point(103) = {0.037380, -0.741849, 0, 1.0};
Point(104) = {0.037264, -0.741699, 0, 1.0};
Point(105) = {0.037021, -0.741465, 0, 1.0};
Point(106) = {0.036702, -0.741222, 0, 1.0};
Point(107) = {0.036481, -0.741074, 0, 1.0};
Point(108) = {0.034769, -0.740226, 0, 1.0};
Point(109) = {0.032307, -0.739369, 0, 1.0};
Point(110) = {0.029139, -0.738536, 0, 1.0};
Point(111) = {0.025302, -0.737762, 0, 1.0};
Point(112) = {0.020822, -0.737085, 0, 1.0};
Point(113) = {0.015718, -0.736520, 0, 1.0};
Point(114) = {0.010020, -0.736066, 0, 1.0};
Point(115) = {0.003772, -0.735715, 0, 1.0};
Point(116) = {-0.002968, -0.735450, 0, 1.0};
Point(117) = {-0.010127, -0.735257, 0, 1.0};
Point(118) = {-0.017627, -0.735128, 0, 1.0};
Point(119) = {-0.025385, -0.735052, 0, 1.0};
Point(120) = {-0.033314, -0.735015, 0, 1.0};
Point(121) = {-0.041321, -0.735008, 0, 1.0};
Point(122) = {-0.049311, -0.735018, 0, 1.0};
Point(123) = {-0.057185, -0.735040, 0, 1.0};
Point(124) = {-0.064848, -0.735068, 0, 1.0};
Point(125) = {-0.072203, -0.735100, 0, 1.0};
Point(126) = {-0.079162, -0.735135, 0, 1.0};
Point(127) = {-0.085639, -0.735175, 0, 1.0};
Point(128) = {-0.091556, -0.735220, 0, 1.0};
Point(129) = {-0.096842, -0.735273, 0, 1.0};
Point(130) = {-0.101431, -0.735334, 0, 1.0};
Point(131) = {-0.105265, -0.735410, 0, 1.0};
Point(132) = {-0.108297, -0.735506, 0, 1.0};
Point(133) = {-0.110505, -0.735639, 0, 1.0};
Point(134) = {-0.111901, -0.735771, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html