SetFactory("OpenCASCADE");

Point(1) = {0.074910, 0.740548, 0, 1.0};
Point(2) = {0.074564, 0.740570, 0, 1.0};
Point(3) = {0.073545, 0.740652, 0, 1.0};
Point(4) = {0.071894, 0.740826, 0, 1.0};
Point(5) = {0.069654, 0.741106, 0, 1.0};
Point(6) = {0.066874, 0.741499, 0, 1.0};
Point(7) = {0.063607, 0.742006, 0, 1.0};
Point(8) = {0.059913, 0.742625, 0, 1.0};
Point(9) = {0.055865, 0.743346, 0, 1.0};
Point(10) = {0.051543, 0.744135, 0, 1.0};
Point(11) = {0.046999, 0.744936, 0, 1.0};
Point(12) = {0.042258, 0.745717, 0, 1.0};
Point(13) = {0.037360, 0.746476, 0, 1.0};
Point(14) = {0.032362, 0.747198, 0, 1.0};
Point(15) = {0.027318, 0.747866, 0, 1.0};
Point(16) = {0.022277, 0.748466, 0, 1.0};
Point(17) = {0.017292, 0.748985, 0, 1.0};
Point(18) = {0.012415, 0.749410, 0, 1.0};
Point(19) = {0.007692, 0.749726, 0, 1.0};
Point(20) = {0.003164, 0.749926, 0, 1.0};
Point(21) = {-0.001129, 0.750000, 0, 1.0};
Point(22) = {-0.005152, 0.749949, 0, 1.0};
Point(23) = {-0.008874, 0.749774, 0, 1.0};
Point(24) = {-0.012260, 0.749482, 0, 1.0};
Point(25) = {-0.015283, 0.749076, 0, 1.0};
Point(26) = {-0.017923, 0.748566, 0, 1.0};
Point(27) = {-0.020162, 0.747966, 0, 1.0};
Point(28) = {-0.021988, 0.747294, 0, 1.0};
Point(29) = {-0.023390, 0.746575, 0, 1.0};
Point(30) = {-0.024365, 0.745843, 0, 1.0};
Point(31) = {-0.024837, 0.745265, 0, 1.0};
Point(32) = {-0.024933, 0.745065, 0, 1.0};
Point(33) = {-0.024988, 0.744879, 0, 1.0};
Point(34) = {-0.025000, 0.744764, 0, 1.0};
Point(35) = {-0.024988, 0.744662, 0, 1.0};
Point(36) = {-0.024943, 0.744566, 0, 1.0};
Point(37) = {-0.024866, 0.744466, 0, 1.0};
Point(38) = {-0.024704, 0.744310, 0, 1.0};
Point(39) = {-0.024491, 0.744148, 0, 1.0};
Point(40) = {-0.024343, 0.744050, 0, 1.0};
Point(41) = {-0.023202, 0.743484, 0, 1.0};
Point(42) = {-0.021561, 0.742913, 0, 1.0};
Point(43) = {-0.019449, 0.742357, 0, 1.0};
Point(44) = {-0.016891, 0.741841, 0, 1.0};
Point(45) = {-0.013904, 0.741390, 0, 1.0};
Point(46) = {-0.010501, 0.741013, 0, 1.0};
Point(47) = {-0.006703, 0.740711, 0, 1.0};
Point(48) = {-0.002537, 0.740477, 0, 1.0};
Point(49) = {0.001956, 0.740300, 0, 1.0};
Point(50) = {0.006729, 0.740172, 0, 1.0};
Point(51) = {0.011728, 0.740085, 0, 1.0};
Point(52) = {0.016901, 0.740035, 0, 1.0};
Point(53) = {0.022186, 0.740010, 0, 1.0};
Point(54) = {0.027525, 0.740005, 0, 1.0};
Point(55) = {0.032851, 0.740012, 0, 1.0};
Point(56) = {0.038101, 0.740027, 0, 1.0};
Point(57) = {0.043209, 0.740045, 0, 1.0};
Point(58) = {0.048113, 0.740067, 0, 1.0};
Point(59) = {0.052752, 0.740090, 0, 1.0};
Point(60) = {0.057070, 0.740117, 0, 1.0};
Point(61) = {0.061015, 0.740146, 0, 1.0};
Point(62) = {0.064539, 0.740182, 0, 1.0};
Point(63) = {0.067598, 0.740223, 0, 1.0};
Point(64) = {0.070154, 0.740273, 0, 1.0};
Point(65) = {0.072176, 0.740337, 0, 1.0};
Point(66) = {0.073647, 0.740426, 0, 1.0};
Point(67) = {0.074578, 0.740514, 0, 1.0};
Point(68) = {-0.074910, -0.740548, 0, 1.0};
Point(69) = {-0.074564, -0.740570, 0, 1.0};
Point(70) = {-0.073545, -0.740652, 0, 1.0};
Point(71) = {-0.071894, -0.740826, 0, 1.0};
Point(72) = {-0.069654, -0.741106, 0, 1.0};
Point(73) = {-0.066874, -0.741499, 0, 1.0};
Point(74) = {-0.063607, -0.742006, 0, 1.0};
Point(75) = {-0.059913, -0.742625, 0, 1.0};
Point(76) = {-0.055865, -0.743346, 0, 1.0};
Point(77) = {-0.051543, -0.744135, 0, 1.0};
Point(78) = {-0.046999, -0.744936, 0, 1.0};
Point(79) = {-0.042258, -0.745717, 0, 1.0};
Point(80) = {-0.037360, -0.746476, 0, 1.0};
Point(81) = {-0.032362, -0.747198, 0, 1.0};
Point(82) = {-0.027318, -0.747866, 0, 1.0};
Point(83) = {-0.022277, -0.748466, 0, 1.0};
Point(84) = {-0.017292, -0.748985, 0, 1.0};
Point(85) = {-0.012415, -0.749410, 0, 1.0};
Point(86) = {-0.007692, -0.749726, 0, 1.0};
Point(87) = {-0.003164, -0.749926, 0, 1.0};
Point(88) = {0.001129, -0.750000, 0, 1.0};
Point(89) = {0.005152, -0.749949, 0, 1.0};
Point(90) = {0.008874, -0.749774, 0, 1.0};
Point(91) = {0.012260, -0.749482, 0, 1.0};
Point(92) = {0.015283, -0.749076, 0, 1.0};
Point(93) = {0.017923, -0.748566, 0, 1.0};
Point(94) = {0.020162, -0.747966, 0, 1.0};
Point(95) = {0.021988, -0.747294, 0, 1.0};
Point(96) = {0.023390, -0.746575, 0, 1.0};
Point(97) = {0.024365, -0.745843, 0, 1.0};
Point(98) = {0.024837, -0.745265, 0, 1.0};
Point(99) = {0.024933, -0.745065, 0, 1.0};
Point(100) = {0.024988, -0.744879, 0, 1.0};
Point(101) = {0.025000, -0.744764, 0, 1.0};
Point(102) = {0.024988, -0.744662, 0, 1.0};
Point(103) = {0.024943, -0.744566, 0, 1.0};
Point(104) = {0.024866, -0.744466, 0, 1.0};
Point(105) = {0.024704, -0.744310, 0, 1.0};
Point(106) = {0.024491, -0.744148, 0, 1.0};
Point(107) = {0.024343, -0.744050, 0, 1.0};
Point(108) = {0.023202, -0.743484, 0, 1.0};
Point(109) = {0.021561, -0.742913, 0, 1.0};
Point(110) = {0.019449, -0.742357, 0, 1.0};
Point(111) = {0.016891, -0.741841, 0, 1.0};
Point(112) = {0.013904, -0.741390, 0, 1.0};
Point(113) = {0.010501, -0.741013, 0, 1.0};
Point(114) = {0.006703, -0.740711, 0, 1.0};
Point(115) = {0.002537, -0.740477, 0, 1.0};
Point(116) = {-0.001956, -0.740300, 0, 1.0};
Point(117) = {-0.006729, -0.740172, 0, 1.0};
Point(118) = {-0.011728, -0.740085, 0, 1.0};
Point(119) = {-0.016901, -0.740035, 0, 1.0};
Point(120) = {-0.022186, -0.740010, 0, 1.0};
Point(121) = {-0.027525, -0.740005, 0, 1.0};
Point(122) = {-0.032851, -0.740012, 0, 1.0};
Point(123) = {-0.038101, -0.740027, 0, 1.0};
Point(124) = {-0.043209, -0.740045, 0, 1.0};
Point(125) = {-0.048113, -0.740067, 0, 1.0};
Point(126) = {-0.052752, -0.740090, 0, 1.0};
Point(127) = {-0.057070, -0.740117, 0, 1.0};
Point(128) = {-0.061015, -0.740146, 0, 1.0};
Point(129) = {-0.064539, -0.740182, 0, 1.0};
Point(130) = {-0.067598, -0.740223, 0, 1.0};
Point(131) = {-0.070154, -0.740273, 0, 1.0};
Point(132) = {-0.072176, -0.740337, 0, 1.0};
Point(133) = {-0.073647, -0.740426, 0, 1.0};
Point(134) = {-0.074578, -0.740514, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html