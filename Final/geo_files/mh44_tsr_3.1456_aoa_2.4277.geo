SetFactory("OpenCASCADE");

Point(1) = {0.149820, 0.731096, 0, 1.0};
Point(2) = {0.149128, 0.731139, 0, 1.0};
Point(3) = {0.147089, 0.731304, 0, 1.0};
Point(4) = {0.143787, 0.731651, 0, 1.0};
Point(5) = {0.139309, 0.732212, 0, 1.0};
Point(6) = {0.133748, 0.732998, 0, 1.0};
Point(7) = {0.127214, 0.734013, 0, 1.0};
Point(8) = {0.119827, 0.735251, 0, 1.0};
Point(9) = {0.111730, 0.736692, 0, 1.0};
Point(10) = {0.103086, 0.738270, 0, 1.0};
Point(11) = {0.093999, 0.739871, 0, 1.0};
Point(12) = {0.084516, 0.741435, 0, 1.0};
Point(13) = {0.074720, 0.742951, 0, 1.0};
Point(14) = {0.064724, 0.744397, 0, 1.0};
Point(15) = {0.054637, 0.745733, 0, 1.0};
Point(16) = {0.044555, 0.746931, 0, 1.0};
Point(17) = {0.034585, 0.747970, 0, 1.0};
Point(18) = {0.024831, 0.748820, 0, 1.0};
Point(19) = {0.015384, 0.749453, 0, 1.0};
Point(20) = {0.006328, 0.749851, 0, 1.0};
Point(21) = {-0.002257, 0.750000, 0, 1.0};
Point(22) = {-0.010305, 0.749897, 0, 1.0};
Point(23) = {-0.017747, 0.749549, 0, 1.0};
Point(24) = {-0.024519, 0.748964, 0, 1.0};
Point(25) = {-0.030566, 0.748152, 0, 1.0};
Point(26) = {-0.035846, 0.747133, 0, 1.0};
Point(27) = {-0.040325, 0.745932, 0, 1.0};
Point(28) = {-0.043976, 0.744589, 0, 1.0};
Point(29) = {-0.046781, 0.743151, 0, 1.0};
Point(30) = {-0.048730, 0.741685, 0, 1.0};
Point(31) = {-0.049674, 0.740529, 0, 1.0};
Point(32) = {-0.049865, 0.740131, 0, 1.0};
Point(33) = {-0.049976, 0.739758, 0, 1.0};
Point(34) = {-0.050001, 0.739529, 0, 1.0};
Point(35) = {-0.049976, 0.739325, 0, 1.0};
Point(36) = {-0.049886, 0.739132, 0, 1.0};
Point(37) = {-0.049732, 0.738932, 0, 1.0};
Point(38) = {-0.049407, 0.738621, 0, 1.0};
Point(39) = {-0.048982, 0.738296, 0, 1.0};
Point(40) = {-0.048686, 0.738099, 0, 1.0};
Point(41) = {-0.046404, 0.736969, 0, 1.0};
Point(42) = {-0.043122, 0.735825, 0, 1.0};
Point(43) = {-0.038898, 0.734714, 0, 1.0};
Point(44) = {-0.033781, 0.733683, 0, 1.0};
Point(45) = {-0.027808, 0.732780, 0, 1.0};
Point(46) = {-0.021002, 0.732026, 0, 1.0};
Point(47) = {-0.013406, 0.731421, 0, 1.0};
Point(48) = {-0.005075, 0.730953, 0, 1.0};
Point(49) = {0.003912, 0.730599, 0, 1.0};
Point(50) = {0.013458, 0.730343, 0, 1.0};
Point(51) = {0.023457, 0.730171, 0, 1.0};
Point(52) = {0.033801, 0.730069, 0, 1.0};
Point(53) = {0.044373, 0.730020, 0, 1.0};
Point(54) = {0.055049, 0.730010, 0, 1.0};
Point(55) = {0.065702, 0.730024, 0, 1.0};
Point(56) = {0.076202, 0.730054, 0, 1.0};
Point(57) = {0.086418, 0.730091, 0, 1.0};
Point(58) = {0.096226, 0.730133, 0, 1.0};
Point(59) = {0.105504, 0.730180, 0, 1.0};
Point(60) = {0.114140, 0.730233, 0, 1.0};
Point(61) = {0.122030, 0.730293, 0, 1.0};
Point(62) = {0.129078, 0.730363, 0, 1.0};
Point(63) = {0.135196, 0.730446, 0, 1.0};
Point(64) = {0.140308, 0.730547, 0, 1.0};
Point(65) = {0.144352, 0.730675, 0, 1.0};
Point(66) = {0.147295, 0.730852, 0, 1.0};
Point(67) = {0.149156, 0.731028, 0, 1.0};
Point(68) = {-0.149820, -0.731096, 0, 1.0};
Point(69) = {-0.149128, -0.731139, 0, 1.0};
Point(70) = {-0.147089, -0.731304, 0, 1.0};
Point(71) = {-0.143787, -0.731651, 0, 1.0};
Point(72) = {-0.139309, -0.732212, 0, 1.0};
Point(73) = {-0.133748, -0.732998, 0, 1.0};
Point(74) = {-0.127214, -0.734013, 0, 1.0};
Point(75) = {-0.119827, -0.735251, 0, 1.0};
Point(76) = {-0.111730, -0.736692, 0, 1.0};
Point(77) = {-0.103086, -0.738270, 0, 1.0};
Point(78) = {-0.093999, -0.739871, 0, 1.0};
Point(79) = {-0.084516, -0.741435, 0, 1.0};
Point(80) = {-0.074720, -0.742951, 0, 1.0};
Point(81) = {-0.064724, -0.744397, 0, 1.0};
Point(82) = {-0.054637, -0.745733, 0, 1.0};
Point(83) = {-0.044555, -0.746931, 0, 1.0};
Point(84) = {-0.034585, -0.747970, 0, 1.0};
Point(85) = {-0.024831, -0.748820, 0, 1.0};
Point(86) = {-0.015384, -0.749453, 0, 1.0};
Point(87) = {-0.006328, -0.749851, 0, 1.0};
Point(88) = {0.002257, -0.750000, 0, 1.0};
Point(89) = {0.010305, -0.749897, 0, 1.0};
Point(90) = {0.017747, -0.749549, 0, 1.0};
Point(91) = {0.024519, -0.748964, 0, 1.0};
Point(92) = {0.030566, -0.748152, 0, 1.0};
Point(93) = {0.035846, -0.747133, 0, 1.0};
Point(94) = {0.040325, -0.745932, 0, 1.0};
Point(95) = {0.043976, -0.744589, 0, 1.0};
Point(96) = {0.046781, -0.743151, 0, 1.0};
Point(97) = {0.048730, -0.741685, 0, 1.0};
Point(98) = {0.049674, -0.740529, 0, 1.0};
Point(99) = {0.049865, -0.740131, 0, 1.0};
Point(100) = {0.049976, -0.739758, 0, 1.0};
Point(101) = {0.050001, -0.739529, 0, 1.0};
Point(102) = {0.049976, -0.739325, 0, 1.0};
Point(103) = {0.049886, -0.739132, 0, 1.0};
Point(104) = {0.049732, -0.738932, 0, 1.0};
Point(105) = {0.049407, -0.738621, 0, 1.0};
Point(106) = {0.048982, -0.738296, 0, 1.0};
Point(107) = {0.048686, -0.738099, 0, 1.0};
Point(108) = {0.046404, -0.736969, 0, 1.0};
Point(109) = {0.043122, -0.735825, 0, 1.0};
Point(110) = {0.038898, -0.734714, 0, 1.0};
Point(111) = {0.033781, -0.733683, 0, 1.0};
Point(112) = {0.027808, -0.732780, 0, 1.0};
Point(113) = {0.021002, -0.732026, 0, 1.0};
Point(114) = {0.013406, -0.731421, 0, 1.0};
Point(115) = {0.005075, -0.730953, 0, 1.0};
Point(116) = {-0.003912, -0.730599, 0, 1.0};
Point(117) = {-0.013458, -0.730343, 0, 1.0};
Point(118) = {-0.023457, -0.730171, 0, 1.0};
Point(119) = {-0.033801, -0.730069, 0, 1.0};
Point(120) = {-0.044373, -0.730020, 0, 1.0};
Point(121) = {-0.055049, -0.730010, 0, 1.0};
Point(122) = {-0.065702, -0.730024, 0, 1.0};
Point(123) = {-0.076202, -0.730054, 0, 1.0};
Point(124) = {-0.086418, -0.730091, 0, 1.0};
Point(125) = {-0.096226, -0.730133, 0, 1.0};
Point(126) = {-0.105504, -0.730180, 0, 1.0};
Point(127) = {-0.114140, -0.730233, 0, 1.0};
Point(128) = {-0.122030, -0.730293, 0, 1.0};
Point(129) = {-0.129078, -0.730363, 0, 1.0};
Point(130) = {-0.135196, -0.730446, 0, 1.0};
Point(131) = {-0.140308, -0.730547, 0, 1.0};
Point(132) = {-0.144352, -0.730675, 0, 1.0};
Point(133) = {-0.147295, -0.730852, 0, 1.0};
Point(134) = {-0.149156, -0.731028, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html