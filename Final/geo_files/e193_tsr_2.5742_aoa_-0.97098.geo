SetFactory("OpenCASCADE");

Point(1) = {0.074994, 0.738697, 0, 1.0};
Point(2) = {0.074484, 0.738764, 0, 1.0};
Point(3) = {0.072999, 0.738993, 0, 1.0};
Point(4) = {0.070642, 0.739406, 0, 1.0};
Point(5) = {0.067504, 0.739968, 0, 1.0};
Point(6) = {0.063635, 0.740627, 0, 1.0};
Point(7) = {0.059064, 0.741363, 0, 1.0};
Point(8) = {0.053844, 0.742177, 0, 1.0};
Point(9) = {0.048053, 0.743064, 0, 1.0};
Point(10) = {0.041775, 0.744007, 0, 1.0};
Point(11) = {0.035097, 0.744988, 0, 1.0};
Point(12) = {0.028110, 0.745978, 0, 1.0};
Point(13) = {0.020910, 0.746952, 0, 1.0};
Point(14) = {0.013594, 0.747872, 0, 1.0};
Point(15) = {0.006256, 0.748692, 0, 1.0};
Point(16) = {-0.001030, 0.749345, 0, 1.0};
Point(17) = {-0.008218, 0.749791, 0, 1.0};
Point(18) = {-0.015265, 0.750000, 0, 1.0};
Point(19) = {-0.022131, 0.749962, 0, 1.0};
Point(20) = {-0.028782, 0.749675, 0, 1.0};
Point(21) = {-0.035184, 0.749155, 0, 1.0};
Point(22) = {-0.041288, 0.748441, 0, 1.0};
Point(23) = {-0.047034, 0.747560, 0, 1.0};
Point(24) = {-0.052363, 0.746538, 0, 1.0};
Point(25) = {-0.057221, 0.745396, 0, 1.0};
Point(26) = {-0.061562, 0.744160, 0, 1.0};
Point(27) = {-0.065345, 0.742852, 0, 1.0};
Point(28) = {-0.068537, 0.741500, 0, 1.0};
Point(29) = {-0.071111, 0.740137, 0, 1.0};
Point(30) = {-0.073051, 0.738800, 0, 1.0};
Point(31) = {-0.074349, 0.737541, 0, 1.0};
Point(32) = {-0.074989, 0.736443, 0, 1.0};
Point(33) = {-0.074820, 0.735598, 0, 1.0};
Point(34) = {-0.073773, 0.734919, 0, 1.0};
Point(35) = {-0.071925, 0.734331, 0, 1.0};
Point(36) = {-0.069296, 0.733871, 0, 1.0};
Point(37) = {-0.065902, 0.733549, 0, 1.0};
Point(38) = {-0.061769, 0.733365, 0, 1.0};
Point(39) = {-0.056929, 0.733314, 0, 1.0};
Point(40) = {-0.051421, 0.733388, 0, 1.0};
Point(41) = {-0.045301, 0.733568, 0, 1.0};
Point(42) = {-0.038629, 0.733839, 0, 1.0};
Point(43) = {-0.031475, 0.734182, 0, 1.0};
Point(44) = {-0.023924, 0.734579, 0, 1.0};
Point(45) = {-0.016060, 0.735009, 0, 1.0};
Point(46) = {-0.007976, 0.735455, 0, 1.0};
Point(47) = {0.000229, 0.735902, 0, 1.0};
Point(48) = {0.008452, 0.736334, 0, 1.0};
Point(49) = {0.016592, 0.736740, 0, 1.0};
Point(50) = {0.024547, 0.737114, 0, 1.0};
Point(51) = {0.032217, 0.737446, 0, 1.0};
Point(52) = {0.039505, 0.737736, 0, 1.0};
Point(53) = {0.046318, 0.737981, 0, 1.0};
Point(54) = {0.052569, 0.738181, 0, 1.0};
Point(55) = {0.058175, 0.738339, 0, 1.0};
Point(56) = {0.063065, 0.738467, 0, 1.0};
Point(57) = {0.067184, 0.738579, 0, 1.0};
Point(58) = {0.070497, 0.738670, 0, 1.0};
Point(59) = {0.072953, 0.738713, 0, 1.0};
Point(60) = {0.074476, 0.738709, 0, 1.0};
Point(61) = {-0.074994, -0.738697, 0, 1.0};
Point(62) = {-0.074484, -0.738764, 0, 1.0};
Point(63) = {-0.072999, -0.738993, 0, 1.0};
Point(64) = {-0.070642, -0.739406, 0, 1.0};
Point(65) = {-0.067504, -0.739968, 0, 1.0};
Point(66) = {-0.063635, -0.740627, 0, 1.0};
Point(67) = {-0.059064, -0.741363, 0, 1.0};
Point(68) = {-0.053844, -0.742177, 0, 1.0};
Point(69) = {-0.048053, -0.743064, 0, 1.0};
Point(70) = {-0.041775, -0.744007, 0, 1.0};
Point(71) = {-0.035097, -0.744988, 0, 1.0};
Point(72) = {-0.028110, -0.745978, 0, 1.0};
Point(73) = {-0.020910, -0.746952, 0, 1.0};
Point(74) = {-0.013594, -0.747872, 0, 1.0};
Point(75) = {-0.006256, -0.748692, 0, 1.0};
Point(76) = {0.001030, -0.749345, 0, 1.0};
Point(77) = {0.008218, -0.749791, 0, 1.0};
Point(78) = {0.015265, -0.750000, 0, 1.0};
Point(79) = {0.022131, -0.749962, 0, 1.0};
Point(80) = {0.028782, -0.749675, 0, 1.0};
Point(81) = {0.035184, -0.749155, 0, 1.0};
Point(82) = {0.041288, -0.748441, 0, 1.0};
Point(83) = {0.047034, -0.747560, 0, 1.0};
Point(84) = {0.052363, -0.746538, 0, 1.0};
Point(85) = {0.057221, -0.745396, 0, 1.0};
Point(86) = {0.061562, -0.744160, 0, 1.0};
Point(87) = {0.065345, -0.742852, 0, 1.0};
Point(88) = {0.068537, -0.741500, 0, 1.0};
Point(89) = {0.071111, -0.740137, 0, 1.0};
Point(90) = {0.073051, -0.738800, 0, 1.0};
Point(91) = {0.074349, -0.737541, 0, 1.0};
Point(92) = {0.074989, -0.736443, 0, 1.0};
Point(93) = {0.074820, -0.735598, 0, 1.0};
Point(94) = {0.073773, -0.734919, 0, 1.0};
Point(95) = {0.071925, -0.734331, 0, 1.0};
Point(96) = {0.069296, -0.733871, 0, 1.0};
Point(97) = {0.065902, -0.733549, 0, 1.0};
Point(98) = {0.061769, -0.733365, 0, 1.0};
Point(99) = {0.056929, -0.733314, 0, 1.0};
Point(100) = {0.051421, -0.733388, 0, 1.0};
Point(101) = {0.045301, -0.733568, 0, 1.0};
Point(102) = {0.038629, -0.733839, 0, 1.0};
Point(103) = {0.031475, -0.734182, 0, 1.0};
Point(104) = {0.023924, -0.734579, 0, 1.0};
Point(105) = {0.016060, -0.735009, 0, 1.0};
Point(106) = {0.007976, -0.735455, 0, 1.0};
Point(107) = {-0.000229, -0.735902, 0, 1.0};
Point(108) = {-0.008452, -0.736334, 0, 1.0};
Point(109) = {-0.016592, -0.736740, 0, 1.0};
Point(110) = {-0.024547, -0.737114, 0, 1.0};
Point(111) = {-0.032217, -0.737446, 0, 1.0};
Point(112) = {-0.039505, -0.737736, 0, 1.0};
Point(113) = {-0.046318, -0.737981, 0, 1.0};
Point(114) = {-0.052569, -0.738181, 0, 1.0};
Point(115) = {-0.058175, -0.738339, 0, 1.0};
Point(116) = {-0.063065, -0.738467, 0, 1.0};
Point(117) = {-0.067184, -0.738579, 0, 1.0};
Point(118) = {-0.070497, -0.738670, 0, 1.0};
Point(119) = {-0.072953, -0.738713, 0, 1.0};
Point(120) = {-0.074476, -0.738709, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html