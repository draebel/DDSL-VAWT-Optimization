SetFactory("OpenCASCADE");

Point(1) = {0.112411, 0.738702, 0, 1.0};
Point(2) = {0.111901, 0.738770, 0, 1.0};
Point(3) = {0.110417, 0.738999, 0, 1.0};
Point(4) = {0.108061, 0.739412, 0, 1.0};
Point(5) = {0.104925, 0.739973, 0, 1.0};
Point(6) = {0.101057, 0.740632, 0, 1.0};
Point(7) = {0.096488, 0.741368, 0, 1.0};
Point(8) = {0.091272, 0.742181, 0, 1.0};
Point(9) = {0.085484, 0.743068, 0, 1.0};
Point(10) = {0.079209, 0.744010, 0, 1.0};
Point(11) = {0.072535, 0.744990, 0, 1.0};
Point(12) = {0.065551, 0.745980, 0, 1.0};
Point(13) = {0.058355, 0.746953, 0, 1.0};
Point(14) = {0.051043, 0.747873, 0, 1.0};
Point(15) = {0.043708, 0.748692, 0, 1.0};
Point(16) = {0.036426, 0.749346, 0, 1.0};
Point(17) = {0.029242, 0.749791, 0, 1.0};
Point(18) = {0.022198, 0.750000, 0, 1.0};
Point(19) = {0.015336, 0.749962, 0, 1.0};
Point(20) = {0.008689, 0.749675, 0, 1.0};
Point(21) = {0.002290, 0.749156, 0, 1.0};
Point(22) = {-0.003811, 0.748442, 0, 1.0};
Point(23) = {-0.009554, 0.747562, 0, 1.0};
Point(24) = {-0.014880, 0.746540, 0, 1.0};
Point(25) = {-0.019735, 0.745399, 0, 1.0};
Point(26) = {-0.024074, 0.744163, 0, 1.0};
Point(27) = {-0.027856, 0.742855, 0, 1.0};
Point(28) = {-0.031046, 0.741504, 0, 1.0};
Point(29) = {-0.033619, 0.740142, 0, 1.0};
Point(30) = {-0.035558, 0.738806, 0, 1.0};
Point(31) = {-0.036855, 0.737548, 0, 1.0};
Point(32) = {-0.037495, 0.736450, 0, 1.0};
Point(33) = {-0.037326, 0.735605, 0, 1.0};
Point(34) = {-0.036279, 0.734927, 0, 1.0};
Point(35) = {-0.034432, 0.734339, 0, 1.0};
Point(36) = {-0.031804, 0.733880, 0, 1.0};
Point(37) = {-0.028412, 0.733558, 0, 1.0};
Point(38) = {-0.024282, 0.733374, 0, 1.0};
Point(39) = {-0.019444, 0.733323, 0, 1.0};
Point(40) = {-0.013939, 0.733396, 0, 1.0};
Point(41) = {-0.007821, 0.733577, 0, 1.0};
Point(42) = {-0.001153, 0.733847, 0, 1.0};
Point(43) = {0.005997, 0.734190, 0, 1.0};
Point(44) = {0.013545, 0.734587, 0, 1.0};
Point(45) = {0.021404, 0.735017, 0, 1.0};
Point(46) = {0.029483, 0.735463, 0, 1.0};
Point(47) = {0.037684, 0.735909, 0, 1.0};
Point(48) = {0.045904, 0.736341, 0, 1.0};
Point(49) = {0.054039, 0.736747, 0, 1.0};
Point(50) = {0.061989, 0.737120, 0, 1.0};
Point(51) = {0.069655, 0.737453, 0, 1.0};
Point(52) = {0.076940, 0.737743, 0, 1.0};
Point(53) = {0.083749, 0.737987, 0, 1.0};
Point(54) = {0.089997, 0.738188, 0, 1.0};
Point(55) = {0.095601, 0.738346, 0, 1.0};
Point(56) = {0.100488, 0.738473, 0, 1.0};
Point(57) = {0.104605, 0.738585, 0, 1.0};
Point(58) = {0.107916, 0.738676, 0, 1.0};
Point(59) = {0.110371, 0.738719, 0, 1.0};
Point(60) = {0.111893, 0.738715, 0, 1.0};
Point(61) = {-0.112411, -0.738702, 0, 1.0};
Point(62) = {-0.111901, -0.738770, 0, 1.0};
Point(63) = {-0.110417, -0.738999, 0, 1.0};
Point(64) = {-0.108061, -0.739412, 0, 1.0};
Point(65) = {-0.104925, -0.739973, 0, 1.0};
Point(66) = {-0.101057, -0.740632, 0, 1.0};
Point(67) = {-0.096488, -0.741368, 0, 1.0};
Point(68) = {-0.091272, -0.742181, 0, 1.0};
Point(69) = {-0.085484, -0.743068, 0, 1.0};
Point(70) = {-0.079209, -0.744010, 0, 1.0};
Point(71) = {-0.072535, -0.744990, 0, 1.0};
Point(72) = {-0.065551, -0.745980, 0, 1.0};
Point(73) = {-0.058355, -0.746953, 0, 1.0};
Point(74) = {-0.051043, -0.747873, 0, 1.0};
Point(75) = {-0.043708, -0.748692, 0, 1.0};
Point(76) = {-0.036426, -0.749346, 0, 1.0};
Point(77) = {-0.029242, -0.749791, 0, 1.0};
Point(78) = {-0.022198, -0.750000, 0, 1.0};
Point(79) = {-0.015336, -0.749962, 0, 1.0};
Point(80) = {-0.008689, -0.749675, 0, 1.0};
Point(81) = {-0.002290, -0.749156, 0, 1.0};
Point(82) = {0.003811, -0.748442, 0, 1.0};
Point(83) = {0.009554, -0.747562, 0, 1.0};
Point(84) = {0.014880, -0.746540, 0, 1.0};
Point(85) = {0.019735, -0.745399, 0, 1.0};
Point(86) = {0.024074, -0.744163, 0, 1.0};
Point(87) = {0.027856, -0.742855, 0, 1.0};
Point(88) = {0.031046, -0.741504, 0, 1.0};
Point(89) = {0.033619, -0.740142, 0, 1.0};
Point(90) = {0.035558, -0.738806, 0, 1.0};
Point(91) = {0.036855, -0.737548, 0, 1.0};
Point(92) = {0.037495, -0.736450, 0, 1.0};
Point(93) = {0.037326, -0.735605, 0, 1.0};
Point(94) = {0.036279, -0.734927, 0, 1.0};
Point(95) = {0.034432, -0.734339, 0, 1.0};
Point(96) = {0.031804, -0.733880, 0, 1.0};
Point(97) = {0.028412, -0.733558, 0, 1.0};
Point(98) = {0.024282, -0.733374, 0, 1.0};
Point(99) = {0.019444, -0.733323, 0, 1.0};
Point(100) = {0.013939, -0.733396, 0, 1.0};
Point(101) = {0.007821, -0.733577, 0, 1.0};
Point(102) = {0.001153, -0.733847, 0, 1.0};
Point(103) = {-0.005997, -0.734190, 0, 1.0};
Point(104) = {-0.013545, -0.734587, 0, 1.0};
Point(105) = {-0.021404, -0.735017, 0, 1.0};
Point(106) = {-0.029483, -0.735463, 0, 1.0};
Point(107) = {-0.037684, -0.735909, 0, 1.0};
Point(108) = {-0.045904, -0.736341, 0, 1.0};
Point(109) = {-0.054039, -0.736747, 0, 1.0};
Point(110) = {-0.061989, -0.737120, 0, 1.0};
Point(111) = {-0.069655, -0.737453, 0, 1.0};
Point(112) = {-0.076940, -0.737743, 0, 1.0};
Point(113) = {-0.083749, -0.737987, 0, 1.0};
Point(114) = {-0.089997, -0.738188, 0, 1.0};
Point(115) = {-0.095601, -0.738346, 0, 1.0};
Point(116) = {-0.100488, -0.738473, 0, 1.0};
Point(117) = {-0.104605, -0.738585, 0, 1.0};
Point(118) = {-0.107916, -0.738676, 0, 1.0};
Point(119) = {-0.110371, -0.738719, 0, 1.0};
Point(120) = {-0.111893, -0.738715, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html