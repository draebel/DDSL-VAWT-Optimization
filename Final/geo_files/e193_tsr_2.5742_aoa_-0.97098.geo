SetFactory("OpenCASCADE");

Point(1) = {0.112478, 0.738700, 0, 1.0};
Point(2) = {0.111969, 0.738767, 0, 1.0};
Point(3) = {0.110484, 0.738996, 0, 1.0};
Point(4) = {0.108128, 0.739409, 0, 1.0};
Point(5) = {0.104990, 0.739971, 0, 1.0};
Point(6) = {0.101122, 0.740630, 0, 1.0};
Point(7) = {0.096552, 0.741366, 0, 1.0};
Point(8) = {0.091334, 0.742179, 0, 1.0};
Point(9) = {0.085545, 0.743066, 0, 1.0};
Point(10) = {0.079268, 0.744008, 0, 1.0};
Point(11) = {0.072592, 0.744989, 0, 1.0};
Point(12) = {0.065607, 0.745979, 0, 1.0};
Point(13) = {0.058409, 0.746952, 0, 1.0};
Point(14) = {0.051095, 0.747873, 0, 1.0};
Point(15) = {0.043758, 0.748692, 0, 1.0};
Point(16) = {0.036474, 0.749346, 0, 1.0};
Point(17) = {0.029288, 0.749791, 0, 1.0};
Point(18) = {0.022243, 0.750000, 0, 1.0};
Point(19) = {0.015378, 0.749962, 0, 1.0};
Point(20) = {0.008730, 0.749675, 0, 1.0};
Point(21) = {0.002329, 0.749155, 0, 1.0};
Point(22) = {-0.003773, 0.748441, 0, 1.0};
Point(23) = {-0.009518, 0.747561, 0, 1.0};
Point(24) = {-0.014846, 0.746539, 0, 1.0};
Point(25) = {-0.019702, 0.745398, 0, 1.0};
Point(26) = {-0.024042, 0.744161, 0, 1.0};
Point(27) = {-0.027825, 0.742854, 0, 1.0};
Point(28) = {-0.031015, 0.741502, 0, 1.0};
Point(29) = {-0.033589, 0.740139, 0, 1.0};
Point(30) = {-0.035529, 0.738803, 0, 1.0};
Point(31) = {-0.036826, 0.737545, 0, 1.0};
Point(32) = {-0.037466, 0.736446, 0, 1.0};
Point(33) = {-0.037297, 0.735601, 0, 1.0};
Point(34) = {-0.036250, 0.734923, 0, 1.0};
Point(35) = {-0.034403, 0.734335, 0, 1.0};
Point(36) = {-0.031774, 0.733875, 0, 1.0};
Point(37) = {-0.028381, 0.733553, 0, 1.0};
Point(38) = {-0.024249, 0.733370, 0, 1.0};
Point(39) = {-0.019410, 0.733318, 0, 1.0};
Point(40) = {-0.013904, 0.733392, 0, 1.0};
Point(41) = {-0.007785, 0.733572, 0, 1.0};
Point(42) = {-0.001115, 0.733843, 0, 1.0};
Point(43) = {0.006037, 0.734186, 0, 1.0};
Point(44) = {0.013587, 0.734583, 0, 1.0};
Point(45) = {0.021448, 0.735013, 0, 1.0};
Point(46) = {0.029529, 0.735459, 0, 1.0};
Point(47) = {0.037733, 0.735905, 0, 1.0};
Point(48) = {0.045954, 0.736337, 0, 1.0};
Point(49) = {0.054092, 0.736744, 0, 1.0};
Point(50) = {0.062044, 0.737117, 0, 1.0};
Point(51) = {0.069712, 0.737450, 0, 1.0};
Point(52) = {0.076998, 0.737740, 0, 1.0};
Point(53) = {0.083809, 0.737984, 0, 1.0};
Point(54) = {0.090059, 0.738185, 0, 1.0};
Point(55) = {0.095664, 0.738343, 0, 1.0};
Point(56) = {0.100553, 0.738470, 0, 1.0};
Point(57) = {0.104670, 0.738582, 0, 1.0};
Point(58) = {0.107983, 0.738673, 0, 1.0};
Point(59) = {0.110438, 0.738716, 0, 1.0};
Point(60) = {0.111961, 0.738712, 0, 1.0};
Point(61) = {-0.112478, -0.738700, 0, 1.0};
Point(62) = {-0.111969, -0.738767, 0, 1.0};
Point(63) = {-0.110484, -0.738996, 0, 1.0};
Point(64) = {-0.108128, -0.739409, 0, 1.0};
Point(65) = {-0.104990, -0.739971, 0, 1.0};
Point(66) = {-0.101122, -0.740630, 0, 1.0};
Point(67) = {-0.096552, -0.741366, 0, 1.0};
Point(68) = {-0.091334, -0.742179, 0, 1.0};
Point(69) = {-0.085545, -0.743066, 0, 1.0};
Point(70) = {-0.079268, -0.744008, 0, 1.0};
Point(71) = {-0.072592, -0.744989, 0, 1.0};
Point(72) = {-0.065607, -0.745979, 0, 1.0};
Point(73) = {-0.058409, -0.746952, 0, 1.0};
Point(74) = {-0.051095, -0.747873, 0, 1.0};
Point(75) = {-0.043758, -0.748692, 0, 1.0};
Point(76) = {-0.036474, -0.749346, 0, 1.0};
Point(77) = {-0.029288, -0.749791, 0, 1.0};
Point(78) = {-0.022243, -0.750000, 0, 1.0};
Point(79) = {-0.015378, -0.749962, 0, 1.0};
Point(80) = {-0.008730, -0.749675, 0, 1.0};
Point(81) = {-0.002329, -0.749155, 0, 1.0};
Point(82) = {0.003773, -0.748441, 0, 1.0};
Point(83) = {0.009518, -0.747561, 0, 1.0};
Point(84) = {0.014846, -0.746539, 0, 1.0};
Point(85) = {0.019702, -0.745398, 0, 1.0};
Point(86) = {0.024042, -0.744161, 0, 1.0};
Point(87) = {0.027825, -0.742854, 0, 1.0};
Point(88) = {0.031015, -0.741502, 0, 1.0};
Point(89) = {0.033589, -0.740139, 0, 1.0};
Point(90) = {0.035529, -0.738803, 0, 1.0};
Point(91) = {0.036826, -0.737545, 0, 1.0};
Point(92) = {0.037466, -0.736446, 0, 1.0};
Point(93) = {0.037297, -0.735601, 0, 1.0};
Point(94) = {0.036250, -0.734923, 0, 1.0};
Point(95) = {0.034403, -0.734335, 0, 1.0};
Point(96) = {0.031774, -0.733875, 0, 1.0};
Point(97) = {0.028381, -0.733553, 0, 1.0};
Point(98) = {0.024249, -0.733370, 0, 1.0};
Point(99) = {0.019410, -0.733318, 0, 1.0};
Point(100) = {0.013904, -0.733392, 0, 1.0};
Point(101) = {0.007785, -0.733572, 0, 1.0};
Point(102) = {0.001115, -0.733843, 0, 1.0};
Point(103) = {-0.006037, -0.734186, 0, 1.0};
Point(104) = {-0.013587, -0.734583, 0, 1.0};
Point(105) = {-0.021448, -0.735013, 0, 1.0};
Point(106) = {-0.029529, -0.735459, 0, 1.0};
Point(107) = {-0.037733, -0.735905, 0, 1.0};
Point(108) = {-0.045954, -0.736337, 0, 1.0};
Point(109) = {-0.054092, -0.736744, 0, 1.0};
Point(110) = {-0.062044, -0.737117, 0, 1.0};
Point(111) = {-0.069712, -0.737450, 0, 1.0};
Point(112) = {-0.076998, -0.737740, 0, 1.0};
Point(113) = {-0.083809, -0.737984, 0, 1.0};
Point(114) = {-0.090059, -0.738185, 0, 1.0};
Point(115) = {-0.095664, -0.738343, 0, 1.0};
Point(116) = {-0.100553, -0.738470, 0, 1.0};
Point(117) = {-0.104670, -0.738582, 0, 1.0};
Point(118) = {-0.107983, -0.738673, 0, 1.0};
Point(119) = {-0.110438, -0.738716, 0, 1.0};
Point(120) = {-0.111961, -0.738712, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html