SetFactory("OpenCASCADE");

Point(1) = {0.074735, 0.726230, 0, 1.0};
Point(2) = {0.071461, 0.727146, 0, 1.0};
Point(3) = {0.063216, 0.729460, 0, 1.0};
Point(4) = {0.054974, 0.731783, 0, 1.0};
Point(5) = {0.045698, 0.734368, 0, 1.0};
Point(6) = {0.037448, 0.736616, 0, 1.0};
Point(7) = {0.029190, 0.738793, 0, 1.0};
Point(8) = {0.020922, 0.740874, 0, 1.0};
Point(9) = {0.012642, 0.742833, 0, 1.0};
Point(10) = {0.004344, 0.744636, 0, 1.0};
Point(11) = {-0.003973, 0.746248, 0, 1.0};
Point(12) = {-0.011271, 0.747473, 0, 1.0};
Point(13) = {-0.018588, 0.748495, 0, 1.0};
Point(14) = {-0.023831, 0.749086, 0, 1.0};
Point(15) = {-0.030140, 0.749621, 0, 1.0};
Point(16) = {-0.036471, 0.749941, 0, 1.0};
Point(17) = {-0.042830, 0.750000, 0, 1.0};
Point(18) = {-0.048154, 0.749799, 0, 1.0};
Point(19) = {-0.053510, 0.749307, 0, 1.0};
Point(20) = {-0.058906, 0.748438, 0, 1.0};
Point(21) = {-0.064355, 0.747060, 0, 1.0};
Point(22) = {-0.066554, 0.746313, 0, 1.0};
Point(23) = {-0.068772, 0.745405, 0, 1.0};
Point(24) = {-0.069888, 0.744871, 0, 1.0};
Point(25) = {-0.071014, 0.744261, 0, 1.0};
Point(26) = {-0.072152, 0.743529, 0, 1.0};
Point(27) = {-0.072728, 0.743091, 0, 1.0};
Point(28) = {-0.073312, 0.742577, 0, 1.0};
Point(29) = {-0.073912, 0.741927, 0, 1.0};
Point(30) = {-0.074589, 0.740520, 0, 1.0};
Point(31) = {-0.074160, 0.739565, 0, 1.0};
Point(32) = {-0.073659, 0.739269, 0, 1.0};
Point(33) = {-0.073149, 0.739080, 0, 1.0};
Point(34) = {-0.072634, 0.738943, 0, 1.0};
Point(35) = {-0.071593, 0.738746, 0, 1.0};
Point(36) = {-0.070547, 0.738599, 0, 1.0};
Point(37) = {-0.069500, 0.738478, 0, 1.0};
Point(38) = {-0.067399, 0.738270, 0, 1.0};
Point(39) = {-0.065298, 0.738080, 0, 1.0};
Point(40) = {-0.060044, 0.737613, 0, 1.0};
Point(41) = {-0.054789, 0.737133, 0, 1.0};
Point(42) = {-0.049538, 0.736635, 0, 1.0};
Point(43) = {-0.044287, 0.736130, 0, 1.0};
Point(44) = {-0.037986, 0.735522, 0, 1.0};
Point(45) = {-0.031685, 0.734917, 0, 1.0};
Point(46) = {-0.025383, 0.734315, 0, 1.0};
Point(47) = {-0.020131, 0.733814, 0, 1.0};
Point(48) = {-0.012780, 0.733112, 0, 1.0};
Point(49) = {-0.005427, 0.732409, 0, 1.0};
Point(50) = {0.002975, 0.731606, 0, 1.0};
Point(51) = {0.011378, 0.730802, 0, 1.0};
Point(52) = {0.019779, 0.729999, 0, 1.0};
Point(53) = {0.028181, 0.729196, 0, 1.0};
Point(54) = {0.036584, 0.728394, 0, 1.0};
Point(55) = {0.044986, 0.727591, 0, 1.0};
Point(56) = {0.054439, 0.726686, 0, 1.0};
Point(57) = {0.062840, 0.725885, 0, 1.0};
Point(58) = {0.071244, 0.725084, 0, 1.0};
Point(59) = {0.074581, 0.724767, 0, 1.0};
Point(60) = {-0.074735, -0.726230, 0, 1.0};
Point(61) = {-0.071461, -0.727146, 0, 1.0};
Point(62) = {-0.063216, -0.729460, 0, 1.0};
Point(63) = {-0.054974, -0.731783, 0, 1.0};
Point(64) = {-0.045698, -0.734368, 0, 1.0};
Point(65) = {-0.037448, -0.736616, 0, 1.0};
Point(66) = {-0.029190, -0.738793, 0, 1.0};
Point(67) = {-0.020922, -0.740874, 0, 1.0};
Point(68) = {-0.012642, -0.742833, 0, 1.0};
Point(69) = {-0.004344, -0.744636, 0, 1.0};
Point(70) = {0.003973, -0.746248, 0, 1.0};
Point(71) = {0.011271, -0.747473, 0, 1.0};
Point(72) = {0.018588, -0.748495, 0, 1.0};
Point(73) = {0.023831, -0.749086, 0, 1.0};
Point(74) = {0.030140, -0.749621, 0, 1.0};
Point(75) = {0.036471, -0.749941, 0, 1.0};
Point(76) = {0.042830, -0.750000, 0, 1.0};
Point(77) = {0.048154, -0.749799, 0, 1.0};
Point(78) = {0.053510, -0.749307, 0, 1.0};
Point(79) = {0.058906, -0.748438, 0, 1.0};
Point(80) = {0.064355, -0.747060, 0, 1.0};
Point(81) = {0.066554, -0.746313, 0, 1.0};
Point(82) = {0.068772, -0.745405, 0, 1.0};
Point(83) = {0.069888, -0.744871, 0, 1.0};
Point(84) = {0.071014, -0.744261, 0, 1.0};
Point(85) = {0.072152, -0.743529, 0, 1.0};
Point(86) = {0.072728, -0.743091, 0, 1.0};
Point(87) = {0.073312, -0.742577, 0, 1.0};
Point(88) = {0.073912, -0.741927, 0, 1.0};
Point(89) = {0.074589, -0.740520, 0, 1.0};
Point(90) = {0.074160, -0.739565, 0, 1.0};
Point(91) = {0.073659, -0.739269, 0, 1.0};
Point(92) = {0.073149, -0.739080, 0, 1.0};
Point(93) = {0.072634, -0.738943, 0, 1.0};
Point(94) = {0.071593, -0.738746, 0, 1.0};
Point(95) = {0.070547, -0.738599, 0, 1.0};
Point(96) = {0.069500, -0.738478, 0, 1.0};
Point(97) = {0.067399, -0.738270, 0, 1.0};
Point(98) = {0.065298, -0.738080, 0, 1.0};
Point(99) = {0.060044, -0.737613, 0, 1.0};
Point(100) = {0.054789, -0.737133, 0, 1.0};
Point(101) = {0.049538, -0.736635, 0, 1.0};
Point(102) = {0.044287, -0.736130, 0, 1.0};
Point(103) = {0.037986, -0.735522, 0, 1.0};
Point(104) = {0.031685, -0.734917, 0, 1.0};
Point(105) = {0.025383, -0.734315, 0, 1.0};
Point(106) = {0.020131, -0.733814, 0, 1.0};
Point(107) = {0.012780, -0.733112, 0, 1.0};
Point(108) = {0.005427, -0.732409, 0, 1.0};
Point(109) = {-0.002975, -0.731606, 0, 1.0};
Point(110) = {-0.011378, -0.730802, 0, 1.0};
Point(111) = {-0.019779, -0.729999, 0, 1.0};
Point(112) = {-0.028181, -0.729196, 0, 1.0};
Point(113) = {-0.036584, -0.728394, 0, 1.0};
Point(114) = {-0.044986, -0.727591, 0, 1.0};
Point(115) = {-0.054439, -0.726686, 0, 1.0};
Point(116) = {-0.062840, -0.725885, 0, 1.0};
Point(117) = {-0.071244, -0.725084, 0, 1.0};
Point(118) = {-0.074581, -0.724767, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:15};
Spline(2) = {15:44};
Spline(3) = {44:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:74};
Spline(6) = {74:103};
Spline(7) = {103:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html