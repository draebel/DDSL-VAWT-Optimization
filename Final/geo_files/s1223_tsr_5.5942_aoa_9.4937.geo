SetFactory("OpenCASCADE");

Point(1) = {0.110900, 0.711539, 0, 1.0};
Point(2) = {0.110692, 0.711765, 0, 1.0};
Point(3) = {0.110160, 0.712414, 0, 1.0};
Point(4) = {0.109419, 0.713364, 0, 1.0};
Point(5) = {0.108460, 0.714450, 0, 1.0};
Point(6) = {0.107183, 0.715582, 0, 1.0};
Point(7) = {0.105517, 0.716778, 0, 1.0};
Point(8) = {0.103459, 0.718069, 0, 1.0};
Point(9) = {0.101029, 0.719449, 0, 1.0};
Point(10) = {0.098234, 0.720908, 0, 1.0};
Point(11) = {0.095091, 0.722436, 0, 1.0};
Point(12) = {0.091617, 0.724023, 0, 1.0};
Point(13) = {0.087830, 0.725660, 0, 1.0};
Point(14) = {0.083753, 0.727335, 0, 1.0};
Point(15) = {0.079411, 0.729038, 0, 1.0};
Point(16) = {0.074827, 0.730758, 0, 1.0};
Point(17) = {0.070032, 0.732481, 0, 1.0};
Point(18) = {0.065052, 0.734199, 0, 1.0};
Point(19) = {0.059920, 0.735898, 0, 1.0};
Point(20) = {0.054664, 0.737573, 0, 1.0};
Point(21) = {0.049322, 0.739211, 0, 1.0};
Point(22) = {0.043930, 0.740806, 0, 1.0};
Point(23) = {0.038533, 0.742351, 0, 1.0};
Point(24) = {0.033175, 0.743825, 0, 1.0};
Point(25) = {0.027902, 0.745205, 0, 1.0};
Point(26) = {0.022747, 0.746463, 0, 1.0};
Point(27) = {0.017737, 0.747568, 0, 1.0};
Point(28) = {0.012891, 0.748499, 0, 1.0};
Point(29) = {0.008239, 0.749245, 0, 1.0};
Point(30) = {0.003796, 0.749746, 0, 1.0};
Point(31) = {-0.000466, 0.749989, 0, 1.0};
Point(32) = {-0.004562, 0.750000, 0, 1.0};
Point(33) = {-0.008490, 0.749793, 0, 1.0};
Point(34) = {-0.012241, 0.749400, 0, 1.0};
Point(35) = {-0.015789, 0.748842, 0, 1.0};
Point(36) = {-0.019114, 0.748139, 0, 1.0};
Point(37) = {-0.022200, 0.747300, 0, 1.0};
Point(38) = {-0.025030, 0.746345, 0, 1.0};
Point(39) = {-0.027588, 0.745290, 0, 1.0};
Point(40) = {-0.029858, 0.744154, 0, 1.0};
Point(41) = {-0.031824, 0.742959, 0, 1.0};
Point(42) = {-0.033462, 0.741704, 0, 1.0};
Point(43) = {-0.034786, 0.740394, 0, 1.0};
Point(44) = {-0.035818, 0.739069, 0, 1.0};
Point(45) = {-0.036553, 0.737768, 0, 1.0};
Point(46) = {-0.036986, 0.736541, 0, 1.0};
Point(47) = {-0.037112, 0.735438, 0, 1.0};
Point(48) = {-0.036924, 0.734556, 0, 1.0};
Point(49) = {-0.036224, 0.733972, 0, 1.0};
Point(50) = {-0.034880, 0.733560, 0, 1.0};
Point(51) = {-0.032983, 0.733191, 0, 1.0};
Point(52) = {-0.030572, 0.732867, 0, 1.0};
Point(53) = {-0.027679, 0.732578, 0, 1.0};
Point(54) = {-0.024336, 0.732326, 0, 1.0};
Point(55) = {-0.020576, 0.732119, 0, 1.0};
Point(56) = {-0.016436, 0.731977, 0, 1.0};
Point(57) = {-0.011898, 0.731960, 0, 1.0};
Point(58) = {-0.006907, 0.732053, 0, 1.0};
Point(59) = {-0.001469, 0.732175, 0, 1.0};
Point(60) = {0.004378, 0.732285, 0, 1.0};
Point(61) = {0.010589, 0.732347, 0, 1.0};
Point(62) = {0.017116, 0.732329, 0, 1.0};
Point(63) = {0.023900, 0.732203, 0, 1.0};
Point(64) = {0.030882, 0.731943, 0, 1.0};
Point(65) = {0.037993, 0.731531, 0, 1.0};
Point(66) = {0.045163, 0.730948, 0, 1.0};
Point(67) = {0.052319, 0.730186, 0, 1.0};
Point(68) = {0.059381, 0.729242, 0, 1.0};
Point(69) = {0.066274, 0.728117, 0, 1.0};
Point(70) = {0.072919, 0.726820, 0, 1.0};
Point(71) = {0.079239, 0.725368, 0, 1.0};
Point(72) = {0.085162, 0.723780, 0, 1.0};
Point(73) = {0.090614, 0.722088, 0, 1.0};
Point(74) = {0.095532, 0.720326, 0, 1.0};
Point(75) = {0.099853, 0.718537, 0, 1.0};
Point(76) = {0.103521, 0.716763, 0, 1.0};
Point(77) = {0.106459, 0.715052, 0, 1.0};
Point(78) = {0.108581, 0.713539, 0, 1.0};
Point(79) = {0.109933, 0.712412, 0, 1.0};
Point(80) = {0.110670, 0.711752, 0, 1.0};
Point(81) = {-0.110900, -0.711539, 0, 1.0};
Point(82) = {-0.110692, -0.711765, 0, 1.0};
Point(83) = {-0.110160, -0.712414, 0, 1.0};
Point(84) = {-0.109419, -0.713364, 0, 1.0};
Point(85) = {-0.108460, -0.714450, 0, 1.0};
Point(86) = {-0.107183, -0.715582, 0, 1.0};
Point(87) = {-0.105517, -0.716778, 0, 1.0};
Point(88) = {-0.103459, -0.718069, 0, 1.0};
Point(89) = {-0.101029, -0.719449, 0, 1.0};
Point(90) = {-0.098234, -0.720908, 0, 1.0};
Point(91) = {-0.095091, -0.722436, 0, 1.0};
Point(92) = {-0.091617, -0.724023, 0, 1.0};
Point(93) = {-0.087830, -0.725660, 0, 1.0};
Point(94) = {-0.083753, -0.727335, 0, 1.0};
Point(95) = {-0.079411, -0.729038, 0, 1.0};
Point(96) = {-0.074827, -0.730758, 0, 1.0};
Point(97) = {-0.070032, -0.732481, 0, 1.0};
Point(98) = {-0.065052, -0.734199, 0, 1.0};
Point(99) = {-0.059920, -0.735898, 0, 1.0};
Point(100) = {-0.054664, -0.737573, 0, 1.0};
Point(101) = {-0.049322, -0.739211, 0, 1.0};
Point(102) = {-0.043930, -0.740806, 0, 1.0};
Point(103) = {-0.038533, -0.742351, 0, 1.0};
Point(104) = {-0.033175, -0.743825, 0, 1.0};
Point(105) = {-0.027902, -0.745205, 0, 1.0};
Point(106) = {-0.022747, -0.746463, 0, 1.0};
Point(107) = {-0.017737, -0.747568, 0, 1.0};
Point(108) = {-0.012891, -0.748499, 0, 1.0};
Point(109) = {-0.008239, -0.749245, 0, 1.0};
Point(110) = {-0.003796, -0.749746, 0, 1.0};
Point(111) = {0.000466, -0.749989, 0, 1.0};
Point(112) = {0.004562, -0.750000, 0, 1.0};
Point(113) = {0.008490, -0.749793, 0, 1.0};
Point(114) = {0.012241, -0.749400, 0, 1.0};
Point(115) = {0.015789, -0.748842, 0, 1.0};
Point(116) = {0.019114, -0.748139, 0, 1.0};
Point(117) = {0.022200, -0.747300, 0, 1.0};
Point(118) = {0.025030, -0.746345, 0, 1.0};
Point(119) = {0.027588, -0.745290, 0, 1.0};
Point(120) = {0.029858, -0.744154, 0, 1.0};
Point(121) = {0.031824, -0.742959, 0, 1.0};
Point(122) = {0.033462, -0.741704, 0, 1.0};
Point(123) = {0.034786, -0.740394, 0, 1.0};
Point(124) = {0.035818, -0.739069, 0, 1.0};
Point(125) = {0.036553, -0.737768, 0, 1.0};
Point(126) = {0.036986, -0.736541, 0, 1.0};
Point(127) = {0.037112, -0.735438, 0, 1.0};
Point(128) = {0.036924, -0.734556, 0, 1.0};
Point(129) = {0.036224, -0.733972, 0, 1.0};
Point(130) = {0.034880, -0.733560, 0, 1.0};
Point(131) = {0.032983, -0.733191, 0, 1.0};
Point(132) = {0.030572, -0.732867, 0, 1.0};
Point(133) = {0.027679, -0.732578, 0, 1.0};
Point(134) = {0.024336, -0.732326, 0, 1.0};
Point(135) = {0.020576, -0.732119, 0, 1.0};
Point(136) = {0.016436, -0.731977, 0, 1.0};
Point(137) = {0.011898, -0.731960, 0, 1.0};
Point(138) = {0.006907, -0.732053, 0, 1.0};
Point(139) = {0.001469, -0.732175, 0, 1.0};
Point(140) = {-0.004378, -0.732285, 0, 1.0};
Point(141) = {-0.010589, -0.732347, 0, 1.0};
Point(142) = {-0.017116, -0.732329, 0, 1.0};
Point(143) = {-0.023900, -0.732203, 0, 1.0};
Point(144) = {-0.030882, -0.731943, 0, 1.0};
Point(145) = {-0.037993, -0.731531, 0, 1.0};
Point(146) = {-0.045163, -0.730948, 0, 1.0};
Point(147) = {-0.052319, -0.730186, 0, 1.0};
Point(148) = {-0.059381, -0.729242, 0, 1.0};
Point(149) = {-0.066274, -0.728117, 0, 1.0};
Point(150) = {-0.072919, -0.726820, 0, 1.0};
Point(151) = {-0.079239, -0.725368, 0, 1.0};
Point(152) = {-0.085162, -0.723780, 0, 1.0};
Point(153) = {-0.090614, -0.722088, 0, 1.0};
Point(154) = {-0.095532, -0.720326, 0, 1.0};
Point(155) = {-0.099853, -0.718537, 0, 1.0};
Point(156) = {-0.103521, -0.716763, 0, 1.0};
Point(157) = {-0.106459, -0.715052, 0, 1.0};
Point(158) = {-0.108581, -0.713539, 0, 1.0};
Point(159) = {-0.109933, -0.712412, 0, 1.0};
Point(160) = {-0.110670, -0.711752, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:29};
Spline(2) = {29:59};
Spline(3) = {59:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:109};
Spline(6) = {109:139};
Spline(7) = {139:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html