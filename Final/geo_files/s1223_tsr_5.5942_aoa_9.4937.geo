SetFactory("OpenCASCADE");

Point(1) = {0.110446, 0.711537, 0, 1.0};
Point(2) = {0.110237, 0.711763, 0, 1.0};
Point(3) = {0.109705, 0.712412, 0, 1.0};
Point(4) = {0.108964, 0.713362, 0, 1.0};
Point(5) = {0.108005, 0.714448, 0, 1.0};
Point(6) = {0.106728, 0.715580, 0, 1.0};
Point(7) = {0.105062, 0.716776, 0, 1.0};
Point(8) = {0.103004, 0.718068, 0, 1.0};
Point(9) = {0.100574, 0.719448, 0, 1.0};
Point(10) = {0.097779, 0.720906, 0, 1.0};
Point(11) = {0.094635, 0.722434, 0, 1.0};
Point(12) = {0.091161, 0.724022, 0, 1.0};
Point(13) = {0.087374, 0.725659, 0, 1.0};
Point(14) = {0.083297, 0.727334, 0, 1.0};
Point(15) = {0.078954, 0.729037, 0, 1.0};
Point(16) = {0.074371, 0.730757, 0, 1.0};
Point(17) = {0.069575, 0.732481, 0, 1.0};
Point(18) = {0.064595, 0.734198, 0, 1.0};
Point(19) = {0.059462, 0.735898, 0, 1.0};
Point(20) = {0.054207, 0.737572, 0, 1.0};
Point(21) = {0.048864, 0.739211, 0, 1.0};
Point(22) = {0.043472, 0.740806, 0, 1.0};
Point(23) = {0.038074, 0.742350, 0, 1.0};
Point(24) = {0.032716, 0.743824, 0, 1.0};
Point(25) = {0.027443, 0.745205, 0, 1.0};
Point(26) = {0.022288, 0.746462, 0, 1.0};
Point(27) = {0.017278, 0.747568, 0, 1.0};
Point(28) = {0.012432, 0.748499, 0, 1.0};
Point(29) = {0.007779, 0.749245, 0, 1.0};
Point(30) = {0.003336, 0.749746, 0, 1.0};
Point(31) = {-0.000926, 0.749989, 0, 1.0};
Point(32) = {-0.005023, 0.750000, 0, 1.0};
Point(33) = {-0.008951, 0.749793, 0, 1.0};
Point(34) = {-0.012702, 0.749400, 0, 1.0};
Point(35) = {-0.016250, 0.748842, 0, 1.0};
Point(36) = {-0.019575, 0.748139, 0, 1.0};
Point(37) = {-0.022661, 0.747300, 0, 1.0};
Point(38) = {-0.025492, 0.746345, 0, 1.0};
Point(39) = {-0.028050, 0.745290, 0, 1.0};
Point(40) = {-0.030320, 0.744153, 0, 1.0};
Point(41) = {-0.032286, 0.742958, 0, 1.0};
Point(42) = {-0.033924, 0.741704, 0, 1.0};
Point(43) = {-0.035248, 0.740394, 0, 1.0};
Point(44) = {-0.036281, 0.739068, 0, 1.0};
Point(45) = {-0.037015, 0.737768, 0, 1.0};
Point(46) = {-0.037449, 0.736540, 0, 1.0};
Point(47) = {-0.037574, 0.735437, 0, 1.0};
Point(48) = {-0.037387, 0.734555, 0, 1.0};
Point(49) = {-0.036686, 0.733971, 0, 1.0};
Point(50) = {-0.035342, 0.733560, 0, 1.0};
Point(51) = {-0.033445, 0.733191, 0, 1.0};
Point(52) = {-0.031034, 0.732867, 0, 1.0};
Point(53) = {-0.028141, 0.732577, 0, 1.0};
Point(54) = {-0.024797, 0.732326, 0, 1.0};
Point(55) = {-0.021038, 0.732118, 0, 1.0};
Point(56) = {-0.016897, 0.731976, 0, 1.0};
Point(57) = {-0.012359, 0.731959, 0, 1.0};
Point(58) = {-0.007367, 0.732052, 0, 1.0};
Point(59) = {-0.001930, 0.732174, 0, 1.0};
Point(60) = {0.003918, 0.732284, 0, 1.0};
Point(61) = {0.010129, 0.732346, 0, 1.0};
Point(62) = {0.016656, 0.732328, 0, 1.0};
Point(63) = {0.023441, 0.732202, 0, 1.0};
Point(64) = {0.030424, 0.731942, 0, 1.0};
Point(65) = {0.037535, 0.731530, 0, 1.0};
Point(66) = {0.044705, 0.730947, 0, 1.0};
Point(67) = {0.051861, 0.730185, 0, 1.0};
Point(68) = {0.058924, 0.729241, 0, 1.0};
Point(69) = {0.065817, 0.728116, 0, 1.0};
Point(70) = {0.072462, 0.726819, 0, 1.0};
Point(71) = {0.078783, 0.725367, 0, 1.0};
Point(72) = {0.084706, 0.723779, 0, 1.0};
Point(73) = {0.090158, 0.722087, 0, 1.0};
Point(74) = {0.095076, 0.720324, 0, 1.0};
Point(75) = {0.099398, 0.718536, 0, 1.0};
Point(76) = {0.103066, 0.716762, 0, 1.0};
Point(77) = {0.106004, 0.715051, 0, 1.0};
Point(78) = {0.108126, 0.713537, 0, 1.0};
Point(79) = {0.109478, 0.712410, 0, 1.0};
Point(80) = {0.110215, 0.711750, 0, 1.0};
Point(81) = {-0.110446, -0.711537, 0, 1.0};
Point(82) = {-0.110237, -0.711763, 0, 1.0};
Point(83) = {-0.109705, -0.712412, 0, 1.0};
Point(84) = {-0.108964, -0.713362, 0, 1.0};
Point(85) = {-0.108005, -0.714448, 0, 1.0};
Point(86) = {-0.106728, -0.715580, 0, 1.0};
Point(87) = {-0.105062, -0.716776, 0, 1.0};
Point(88) = {-0.103004, -0.718068, 0, 1.0};
Point(89) = {-0.100574, -0.719448, 0, 1.0};
Point(90) = {-0.097779, -0.720906, 0, 1.0};
Point(91) = {-0.094635, -0.722434, 0, 1.0};
Point(92) = {-0.091161, -0.724022, 0, 1.0};
Point(93) = {-0.087374, -0.725659, 0, 1.0};
Point(94) = {-0.083297, -0.727334, 0, 1.0};
Point(95) = {-0.078954, -0.729037, 0, 1.0};
Point(96) = {-0.074371, -0.730757, 0, 1.0};
Point(97) = {-0.069575, -0.732481, 0, 1.0};
Point(98) = {-0.064595, -0.734198, 0, 1.0};
Point(99) = {-0.059462, -0.735898, 0, 1.0};
Point(100) = {-0.054207, -0.737572, 0, 1.0};
Point(101) = {-0.048864, -0.739211, 0, 1.0};
Point(102) = {-0.043472, -0.740806, 0, 1.0};
Point(103) = {-0.038074, -0.742350, 0, 1.0};
Point(104) = {-0.032716, -0.743824, 0, 1.0};
Point(105) = {-0.027443, -0.745205, 0, 1.0};
Point(106) = {-0.022288, -0.746462, 0, 1.0};
Point(107) = {-0.017278, -0.747568, 0, 1.0};
Point(108) = {-0.012432, -0.748499, 0, 1.0};
Point(109) = {-0.007779, -0.749245, 0, 1.0};
Point(110) = {-0.003336, -0.749746, 0, 1.0};
Point(111) = {0.000926, -0.749989, 0, 1.0};
Point(112) = {0.005023, -0.750000, 0, 1.0};
Point(113) = {0.008951, -0.749793, 0, 1.0};
Point(114) = {0.012702, -0.749400, 0, 1.0};
Point(115) = {0.016250, -0.748842, 0, 1.0};
Point(116) = {0.019575, -0.748139, 0, 1.0};
Point(117) = {0.022661, -0.747300, 0, 1.0};
Point(118) = {0.025492, -0.746345, 0, 1.0};
Point(119) = {0.028050, -0.745290, 0, 1.0};
Point(120) = {0.030320, -0.744153, 0, 1.0};
Point(121) = {0.032286, -0.742958, 0, 1.0};
Point(122) = {0.033924, -0.741704, 0, 1.0};
Point(123) = {0.035248, -0.740394, 0, 1.0};
Point(124) = {0.036281, -0.739068, 0, 1.0};
Point(125) = {0.037015, -0.737768, 0, 1.0};
Point(126) = {0.037449, -0.736540, 0, 1.0};
Point(127) = {0.037574, -0.735437, 0, 1.0};
Point(128) = {0.037387, -0.734555, 0, 1.0};
Point(129) = {0.036686, -0.733971, 0, 1.0};
Point(130) = {0.035342, -0.733560, 0, 1.0};
Point(131) = {0.033445, -0.733191, 0, 1.0};
Point(132) = {0.031034, -0.732867, 0, 1.0};
Point(133) = {0.028141, -0.732577, 0, 1.0};
Point(134) = {0.024797, -0.732326, 0, 1.0};
Point(135) = {0.021038, -0.732118, 0, 1.0};
Point(136) = {0.016897, -0.731976, 0, 1.0};
Point(137) = {0.012359, -0.731959, 0, 1.0};
Point(138) = {0.007367, -0.732052, 0, 1.0};
Point(139) = {0.001930, -0.732174, 0, 1.0};
Point(140) = {-0.003918, -0.732284, 0, 1.0};
Point(141) = {-0.010129, -0.732346, 0, 1.0};
Point(142) = {-0.016656, -0.732328, 0, 1.0};
Point(143) = {-0.023441, -0.732202, 0, 1.0};
Point(144) = {-0.030424, -0.731942, 0, 1.0};
Point(145) = {-0.037535, -0.731530, 0, 1.0};
Point(146) = {-0.044705, -0.730947, 0, 1.0};
Point(147) = {-0.051861, -0.730185, 0, 1.0};
Point(148) = {-0.058924, -0.729241, 0, 1.0};
Point(149) = {-0.065817, -0.728116, 0, 1.0};
Point(150) = {-0.072462, -0.726819, 0, 1.0};
Point(151) = {-0.078783, -0.725367, 0, 1.0};
Point(152) = {-0.084706, -0.723779, 0, 1.0};
Point(153) = {-0.090158, -0.722087, 0, 1.0};
Point(154) = {-0.095076, -0.720324, 0, 1.0};
Point(155) = {-0.099398, -0.718536, 0, 1.0};
Point(156) = {-0.103066, -0.716762, 0, 1.0};
Point(157) = {-0.106004, -0.715051, 0, 1.0};
Point(158) = {-0.108126, -0.713537, 0, 1.0};
Point(159) = {-0.109478, -0.712410, 0, 1.0};
Point(160) = {-0.110215, -0.711750, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:29};
Spline(2) = {29:59};
Spline(3) = {59:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:109};
Spline(6) = {109:139};
Spline(7) = {139:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html