SetFactory("OpenCASCADE");

Point(1) = {0.147261, 0.698716, 0, 1.0};
Point(2) = {0.146983, 0.699018, 0, 1.0};
Point(3) = {0.146274, 0.699883, 0, 1.0};
Point(4) = {0.145285, 0.701149, 0, 1.0};
Point(5) = {0.144006, 0.702598, 0, 1.0};
Point(6) = {0.142304, 0.704107, 0, 1.0};
Point(7) = {0.140083, 0.705702, 0, 1.0};
Point(8) = {0.137339, 0.707424, 0, 1.0};
Point(9) = {0.134098, 0.709263, 0, 1.0};
Point(10) = {0.130372, 0.711209, 0, 1.0};
Point(11) = {0.126181, 0.713246, 0, 1.0};
Point(12) = {0.121548, 0.715363, 0, 1.0};
Point(13) = {0.116499, 0.717546, 0, 1.0};
Point(14) = {0.111063, 0.719779, 0, 1.0};
Point(15) = {0.105272, 0.722049, 0, 1.0};
Point(16) = {0.099161, 0.724342, 0, 1.0};
Point(17) = {0.092766, 0.726641, 0, 1.0};
Point(18) = {0.086127, 0.728931, 0, 1.0};
Point(19) = {0.079283, 0.731197, 0, 1.0};
Point(20) = {0.072275, 0.733429, 0, 1.0};
Point(21) = {0.065152, 0.735614, 0, 1.0};
Point(22) = {0.057962, 0.737741, 0, 1.0};
Point(23) = {0.050766, 0.739800, 0, 1.0};
Point(24) = {0.043622, 0.741766, 0, 1.0};
Point(25) = {0.036591, 0.743606, 0, 1.0};
Point(26) = {0.029718, 0.745283, 0, 1.0};
Point(27) = {0.023037, 0.746757, 0, 1.0};
Point(28) = {0.016575, 0.747998, 0, 1.0};
Point(29) = {0.010373, 0.748993, 0, 1.0};
Point(30) = {0.004448, 0.749661, 0, 1.0};
Point(31) = {-0.001235, 0.749985, 0, 1.0};
Point(32) = {-0.006697, 0.750000, 0, 1.0};
Point(33) = {-0.011934, 0.749724, 0, 1.0};
Point(34) = {-0.016935, 0.749200, 0, 1.0};
Point(35) = {-0.021667, 0.748456, 0, 1.0};
Point(36) = {-0.026100, 0.747518, 0, 1.0};
Point(37) = {-0.030215, 0.746400, 0, 1.0};
Point(38) = {-0.033989, 0.745127, 0, 1.0};
Point(39) = {-0.037399, 0.743720, 0, 1.0};
Point(40) = {-0.040427, 0.742205, 0, 1.0};
Point(41) = {-0.043048, 0.740611, 0, 1.0};
Point(42) = {-0.045231, 0.738938, 0, 1.0};
Point(43) = {-0.046998, 0.737192, 0, 1.0};
Point(44) = {-0.048374, 0.735425, 0, 1.0};
Point(45) = {-0.049353, 0.733690, 0, 1.0};
Point(46) = {-0.049931, 0.732053, 0, 1.0};
Point(47) = {-0.050098, 0.730583, 0, 1.0};
Point(48) = {-0.049849, 0.729407, 0, 1.0};
Point(49) = {-0.048914, 0.728629, 0, 1.0};
Point(50) = {-0.047122, 0.728079, 0, 1.0};
Point(51) = {-0.044593, 0.727588, 0, 1.0};
Point(52) = {-0.041378, 0.727155, 0, 1.0};
Point(53) = {-0.037521, 0.726770, 0, 1.0};
Point(54) = {-0.033063, 0.726434, 0, 1.0};
Point(55) = {-0.028050, 0.726157, 0, 1.0};
Point(56) = {-0.022530, 0.725968, 0, 1.0};
Point(57) = {-0.016479, 0.725946, 0, 1.0};
Point(58) = {-0.009823, 0.726070, 0, 1.0};
Point(59) = {-0.002573, 0.726232, 0, 1.0};
Point(60) = {0.005224, 0.726378, 0, 1.0};
Point(61) = {0.013505, 0.726461, 0, 1.0};
Point(62) = {0.022208, 0.726438, 0, 1.0};
Point(63) = {0.031255, 0.726269, 0, 1.0};
Point(64) = {0.040565, 0.725923, 0, 1.0};
Point(65) = {0.050046, 0.725374, 0, 1.0};
Point(66) = {0.059607, 0.724596, 0, 1.0};
Point(67) = {0.069148, 0.723580, 0, 1.0};
Point(68) = {0.078565, 0.722322, 0, 1.0};
Point(69) = {0.087756, 0.720821, 0, 1.0};
Point(70) = {0.096616, 0.719092, 0, 1.0};
Point(71) = {0.105044, 0.717156, 0, 1.0};
Point(72) = {0.112941, 0.715038, 0, 1.0};
Point(73) = {0.120210, 0.712782, 0, 1.0};
Point(74) = {0.126769, 0.710432, 0, 1.0};
Point(75) = {0.132530, 0.708047, 0, 1.0};
Point(76) = {0.137421, 0.705682, 0, 1.0};
Point(77) = {0.141338, 0.703401, 0, 1.0};
Point(78) = {0.144168, 0.701383, 0, 1.0};
Point(79) = {0.145971, 0.699881, 0, 1.0};
Point(80) = {0.146953, 0.699001, 0, 1.0};
Point(81) = {-0.147261, -0.698716, 0, 1.0};
Point(82) = {-0.146983, -0.699018, 0, 1.0};
Point(83) = {-0.146274, -0.699883, 0, 1.0};
Point(84) = {-0.145285, -0.701149, 0, 1.0};
Point(85) = {-0.144006, -0.702598, 0, 1.0};
Point(86) = {-0.142304, -0.704107, 0, 1.0};
Point(87) = {-0.140083, -0.705702, 0, 1.0};
Point(88) = {-0.137339, -0.707424, 0, 1.0};
Point(89) = {-0.134098, -0.709263, 0, 1.0};
Point(90) = {-0.130372, -0.711209, 0, 1.0};
Point(91) = {-0.126181, -0.713246, 0, 1.0};
Point(92) = {-0.121548, -0.715363, 0, 1.0};
Point(93) = {-0.116499, -0.717546, 0, 1.0};
Point(94) = {-0.111063, -0.719779, 0, 1.0};
Point(95) = {-0.105272, -0.722049, 0, 1.0};
Point(96) = {-0.099161, -0.724342, 0, 1.0};
Point(97) = {-0.092766, -0.726641, 0, 1.0};
Point(98) = {-0.086127, -0.728931, 0, 1.0};
Point(99) = {-0.079283, -0.731197, 0, 1.0};
Point(100) = {-0.072275, -0.733429, 0, 1.0};
Point(101) = {-0.065152, -0.735614, 0, 1.0};
Point(102) = {-0.057962, -0.737741, 0, 1.0};
Point(103) = {-0.050766, -0.739800, 0, 1.0};
Point(104) = {-0.043622, -0.741766, 0, 1.0};
Point(105) = {-0.036591, -0.743606, 0, 1.0};
Point(106) = {-0.029718, -0.745283, 0, 1.0};
Point(107) = {-0.023037, -0.746757, 0, 1.0};
Point(108) = {-0.016575, -0.747998, 0, 1.0};
Point(109) = {-0.010373, -0.748993, 0, 1.0};
Point(110) = {-0.004448, -0.749661, 0, 1.0};
Point(111) = {0.001235, -0.749985, 0, 1.0};
Point(112) = {0.006697, -0.750000, 0, 1.0};
Point(113) = {0.011934, -0.749724, 0, 1.0};
Point(114) = {0.016935, -0.749200, 0, 1.0};
Point(115) = {0.021667, -0.748456, 0, 1.0};
Point(116) = {0.026100, -0.747518, 0, 1.0};
Point(117) = {0.030215, -0.746400, 0, 1.0};
Point(118) = {0.033989, -0.745127, 0, 1.0};
Point(119) = {0.037399, -0.743720, 0, 1.0};
Point(120) = {0.040427, -0.742205, 0, 1.0};
Point(121) = {0.043048, -0.740611, 0, 1.0};
Point(122) = {0.045231, -0.738938, 0, 1.0};
Point(123) = {0.046998, -0.737192, 0, 1.0};
Point(124) = {0.048374, -0.735425, 0, 1.0};
Point(125) = {0.049353, -0.733690, 0, 1.0};
Point(126) = {0.049931, -0.732053, 0, 1.0};
Point(127) = {0.050098, -0.730583, 0, 1.0};
Point(128) = {0.049849, -0.729407, 0, 1.0};
Point(129) = {0.048914, -0.728629, 0, 1.0};
Point(130) = {0.047122, -0.728079, 0, 1.0};
Point(131) = {0.044593, -0.727588, 0, 1.0};
Point(132) = {0.041378, -0.727155, 0, 1.0};
Point(133) = {0.037521, -0.726770, 0, 1.0};
Point(134) = {0.033063, -0.726434, 0, 1.0};
Point(135) = {0.028050, -0.726157, 0, 1.0};
Point(136) = {0.022530, -0.725968, 0, 1.0};
Point(137) = {0.016479, -0.725946, 0, 1.0};
Point(138) = {0.009823, -0.726070, 0, 1.0};
Point(139) = {0.002573, -0.726232, 0, 1.0};
Point(140) = {-0.005224, -0.726378, 0, 1.0};
Point(141) = {-0.013505, -0.726461, 0, 1.0};
Point(142) = {-0.022208, -0.726438, 0, 1.0};
Point(143) = {-0.031255, -0.726269, 0, 1.0};
Point(144) = {-0.040565, -0.725923, 0, 1.0};
Point(145) = {-0.050046, -0.725374, 0, 1.0};
Point(146) = {-0.059607, -0.724596, 0, 1.0};
Point(147) = {-0.069148, -0.723580, 0, 1.0};
Point(148) = {-0.078565, -0.722322, 0, 1.0};
Point(149) = {-0.087756, -0.720821, 0, 1.0};
Point(150) = {-0.096616, -0.719092, 0, 1.0};
Point(151) = {-0.105044, -0.717156, 0, 1.0};
Point(152) = {-0.112941, -0.715038, 0, 1.0};
Point(153) = {-0.120210, -0.712782, 0, 1.0};
Point(154) = {-0.126769, -0.710432, 0, 1.0};
Point(155) = {-0.132530, -0.708047, 0, 1.0};
Point(156) = {-0.137421, -0.705682, 0, 1.0};
Point(157) = {-0.141338, -0.703401, 0, 1.0};
Point(158) = {-0.144168, -0.701383, 0, 1.0};
Point(159) = {-0.145971, -0.699881, 0, 1.0};
Point(160) = {-0.146953, -0.699001, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:29};
Spline(2) = {29:59};
Spline(3) = {59:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:109};
Spline(6) = {109:139};
Spline(7) = {139:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 46 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html