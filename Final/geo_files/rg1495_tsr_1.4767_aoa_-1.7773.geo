SetFactory("OpenCASCADE");

Point(1) = {0.074964, 0.743488, 0, 1.0};
Point(2) = {0.074450, 0.743544, 0, 1.0};
Point(3) = {0.072936, 0.743749, 0, 1.0};
Point(4) = {0.070482, 0.744105, 0, 1.0};
Point(5) = {0.067153, 0.744545, 0, 1.0};
Point(6) = {0.063005, 0.745028, 0, 1.0};
Point(7) = {0.058108, 0.745567, 0, 1.0};
Point(8) = {0.052552, 0.746143, 0, 1.0};
Point(9) = {0.046435, 0.746743, 0, 1.0};
Point(10) = {0.039861, 0.747343, 0, 1.0};
Point(11) = {0.032916, 0.747923, 0, 1.0};
Point(12) = {0.025626, 0.748465, 0, 1.0};
Point(13) = {0.018029, 0.748956, 0, 1.0};
Point(14) = {0.010219, 0.749372, 0, 1.0};
Point(15) = {0.002288, 0.749698, 0, 1.0};
Point(16) = {-0.005673, 0.749915, 0, 1.0};
Point(17) = {-0.013565, 0.750000, 0, 1.0};
Point(18) = {-0.021299, 0.749945, 0, 1.0};
Point(19) = {-0.028783, 0.749733, 0, 1.0};
Point(20) = {-0.035931, 0.749363, 0, 1.0};
Point(21) = {-0.042663, 0.748828, 0, 1.0};
Point(22) = {-0.048901, 0.748131, 0, 1.0};
Point(23) = {-0.054582, 0.747278, 0, 1.0};
Point(24) = {-0.059646, 0.746373, 0, 1.0};
Point(25) = {-0.064042, 0.745324, 0, 1.0};
Point(26) = {-0.067730, 0.744183, 0, 1.0};
Point(27) = {-0.070683, 0.742965, 0, 1.0};
Point(28) = {-0.072881, 0.741690, 0, 1.0};
Point(29) = {-0.074314, 0.740394, 0, 1.0};
Point(30) = {-0.074964, 0.738835, 0, 1.0};
Point(31) = {-0.074235, 0.737833, 0, 1.0};
Point(32) = {-0.072738, 0.737072, 0, 1.0};
Point(33) = {-0.070480, 0.736417, 0, 1.0};
Point(34) = {-0.067472, 0.735882, 0, 1.0};
Point(35) = {-0.063736, 0.735477, 0, 1.0};
Point(36) = {-0.059299, 0.735197, 0, 1.0};
Point(37) = {-0.054202, 0.735043, 0, 1.0};
Point(38) = {-0.048494, 0.735003, 0, 1.0};
Point(39) = {-0.042236, 0.735073, 0, 1.0};
Point(40) = {-0.035493, 0.735238, 0, 1.0};
Point(41) = {-0.028341, 0.735490, 0, 1.0};
Point(42) = {-0.020861, 0.735821, 0, 1.0};
Point(43) = {-0.013137, 0.736217, 0, 1.0};
Point(44) = {-0.005262, 0.736667, 0, 1.0};
Point(45) = {0.002677, 0.737166, 0, 1.0};
Point(46) = {0.010581, 0.737700, 0, 1.0};
Point(47) = {0.018361, 0.738271, 0, 1.0};
Point(48) = {0.025924, 0.738868, 0, 1.0};
Point(49) = {0.033177, 0.739515, 0, 1.0};
Point(50) = {0.040082, 0.740229, 0, 1.0};
Point(51) = {0.046614, 0.740962, 0, 1.0};
Point(52) = {0.052692, 0.741635, 0, 1.0};
Point(53) = {0.058212, 0.742213, 0, 1.0};
Point(54) = {0.063078, 0.742679, 0, 1.0};
Point(55) = {0.067200, 0.743029, 0, 1.0};
Point(56) = {0.070507, 0.743277, 0, 1.0};
Point(57) = {0.072946, 0.743425, 0, 1.0};
Point(58) = {0.074452, 0.743481, 0, 1.0};
Point(59) = {-0.074964, -0.743488, 0, 1.0};
Point(60) = {-0.074450, -0.743544, 0, 1.0};
Point(61) = {-0.072936, -0.743749, 0, 1.0};
Point(62) = {-0.070482, -0.744105, 0, 1.0};
Point(63) = {-0.067153, -0.744545, 0, 1.0};
Point(64) = {-0.063005, -0.745028, 0, 1.0};
Point(65) = {-0.058108, -0.745567, 0, 1.0};
Point(66) = {-0.052552, -0.746143, 0, 1.0};
Point(67) = {-0.046435, -0.746743, 0, 1.0};
Point(68) = {-0.039861, -0.747343, 0, 1.0};
Point(69) = {-0.032916, -0.747923, 0, 1.0};
Point(70) = {-0.025626, -0.748465, 0, 1.0};
Point(71) = {-0.018029, -0.748956, 0, 1.0};
Point(72) = {-0.010219, -0.749372, 0, 1.0};
Point(73) = {-0.002288, -0.749698, 0, 1.0};
Point(74) = {0.005673, -0.749915, 0, 1.0};
Point(75) = {0.013565, -0.750000, 0, 1.0};
Point(76) = {0.021299, -0.749945, 0, 1.0};
Point(77) = {0.028783, -0.749733, 0, 1.0};
Point(78) = {0.035931, -0.749363, 0, 1.0};
Point(79) = {0.042663, -0.748828, 0, 1.0};
Point(80) = {0.048901, -0.748131, 0, 1.0};
Point(81) = {0.054582, -0.747278, 0, 1.0};
Point(82) = {0.059646, -0.746373, 0, 1.0};
Point(83) = {0.064042, -0.745324, 0, 1.0};
Point(84) = {0.067730, -0.744183, 0, 1.0};
Point(85) = {0.070683, -0.742965, 0, 1.0};
Point(86) = {0.072881, -0.741690, 0, 1.0};
Point(87) = {0.074314, -0.740394, 0, 1.0};
Point(88) = {0.074964, -0.738835, 0, 1.0};
Point(89) = {0.074235, -0.737833, 0, 1.0};
Point(90) = {0.072738, -0.737072, 0, 1.0};
Point(91) = {0.070480, -0.736417, 0, 1.0};
Point(92) = {0.067472, -0.735882, 0, 1.0};
Point(93) = {0.063736, -0.735477, 0, 1.0};
Point(94) = {0.059299, -0.735197, 0, 1.0};
Point(95) = {0.054202, -0.735043, 0, 1.0};
Point(96) = {0.048494, -0.735003, 0, 1.0};
Point(97) = {0.042236, -0.735073, 0, 1.0};
Point(98) = {0.035493, -0.735238, 0, 1.0};
Point(99) = {0.028341, -0.735490, 0, 1.0};
Point(100) = {0.020861, -0.735821, 0, 1.0};
Point(101) = {0.013137, -0.736217, 0, 1.0};
Point(102) = {0.005262, -0.736667, 0, 1.0};
Point(103) = {-0.002677, -0.737166, 0, 1.0};
Point(104) = {-0.010581, -0.737700, 0, 1.0};
Point(105) = {-0.018361, -0.738271, 0, 1.0};
Point(106) = {-0.025924, -0.738868, 0, 1.0};
Point(107) = {-0.033177, -0.739515, 0, 1.0};
Point(108) = {-0.040082, -0.740229, 0, 1.0};
Point(109) = {-0.046614, -0.740962, 0, 1.0};
Point(110) = {-0.052692, -0.741635, 0, 1.0};
Point(111) = {-0.058212, -0.742213, 0, 1.0};
Point(112) = {-0.063078, -0.742679, 0, 1.0};
Point(113) = {-0.067200, -0.743029, 0, 1.0};
Point(114) = {-0.070507, -0.743277, 0, 1.0};
Point(115) = {-0.072946, -0.743425, 0, 1.0};
Point(116) = {-0.074452, -0.743481, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:58};
Spline(4) = {58,1};

// Lines: second blade (splines 5-8)
Spline(5) = {59:78};
Spline(6) = {78:99};
Spline(7) = {99:116};
Spline(8) = {116,59};

// Outer domain (points 20001-4 and lines)
Point(117) = {-13.50000000, -15.00000000, 0, 1.0};
Point(118) = {-13.50000000, 15.00000000, 0, 1.0};
Point(119) = {13.50000000, 15.00000000, 0, 1.0};
Point(120) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {117, 118};
Line(12) = {118, 119};
Line(13) = {119, 120};
Line(14) = {117, 120};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html