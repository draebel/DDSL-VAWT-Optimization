SetFactory("OpenCASCADE");

Point(1) = {0.074952, 0.745658, 0, 1.0};
Point(2) = {0.074610, 0.745696, 0, 1.0};
Point(3) = {0.073600, 0.745833, 0, 1.0};
Point(4) = {0.071964, 0.746070, 0, 1.0};
Point(5) = {0.069745, 0.746363, 0, 1.0};
Point(6) = {0.066979, 0.746686, 0, 1.0};
Point(7) = {0.063714, 0.747044, 0, 1.0};
Point(8) = {0.060011, 0.747429, 0, 1.0};
Point(9) = {0.055932, 0.747829, 0, 1.0};
Point(10) = {0.051550, 0.748229, 0, 1.0};
Point(11) = {0.046920, 0.748615, 0, 1.0};
Point(12) = {0.042060, 0.748977, 0, 1.0};
Point(13) = {0.036996, 0.749304, 0, 1.0};
Point(14) = {0.031788, 0.749582, 0, 1.0};
Point(15) = {0.026501, 0.749799, 0, 1.0};
Point(16) = {0.021194, 0.749943, 0, 1.0};
Point(17) = {0.015933, 0.750000, 0, 1.0};
Point(18) = {0.010777, 0.749963, 0, 1.0};
Point(19) = {0.005787, 0.749822, 0, 1.0};
Point(20) = {0.001022, 0.749575, 0, 1.0};
Point(21) = {-0.003466, 0.749219, 0, 1.0};
Point(22) = {-0.007625, 0.748754, 0, 1.0};
Point(23) = {-0.011412, 0.748185, 0, 1.0};
Point(24) = {-0.014788, 0.747582, 0, 1.0};
Point(25) = {-0.017719, 0.746883, 0, 1.0};
Point(26) = {-0.020177, 0.746122, 0, 1.0};
Point(27) = {-0.022146, 0.745310, 0, 1.0};
Point(28) = {-0.023611, 0.744460, 0, 1.0};
Point(29) = {-0.024567, 0.743596, 0, 1.0};
Point(30) = {-0.025000, 0.742557, 0, 1.0};
Point(31) = {-0.024514, 0.741889, 0, 1.0};
Point(32) = {-0.023516, 0.741381, 0, 1.0};
Point(33) = {-0.022011, 0.740945, 0, 1.0};
Point(34) = {-0.020006, 0.740588, 0, 1.0};
Point(35) = {-0.017515, 0.740318, 0, 1.0};
Point(36) = {-0.014557, 0.740132, 0, 1.0};
Point(37) = {-0.011159, 0.740029, 0, 1.0};
Point(38) = {-0.007353, 0.740002, 0, 1.0};
Point(39) = {-0.003182, 0.740048, 0, 1.0};
Point(40) = {0.001314, 0.740159, 0, 1.0};
Point(41) = {0.006082, 0.740327, 0, 1.0};
Point(42) = {0.011069, 0.740548, 0, 1.0};
Point(43) = {0.016218, 0.740811, 0, 1.0};
Point(44) = {0.021468, 0.741111, 0, 1.0};
Point(45) = {0.026760, 0.741444, 0, 1.0};
Point(46) = {0.032030, 0.741800, 0, 1.0};
Point(47) = {0.037217, 0.742180, 0, 1.0};
Point(48) = {0.042259, 0.742579, 0, 1.0};
Point(49) = {0.047094, 0.743010, 0, 1.0};
Point(50) = {0.051697, 0.743486, 0, 1.0};
Point(51) = {0.056052, 0.743974, 0, 1.0};
Point(52) = {0.060104, 0.744423, 0, 1.0};
Point(53) = {0.063784, 0.744809, 0, 1.0};
Point(54) = {0.067028, 0.745119, 0, 1.0};
Point(55) = {0.069776, 0.745353, 0, 1.0};
Point(56) = {0.071981, 0.745518, 0, 1.0};
Point(57) = {0.073607, 0.745617, 0, 1.0};
Point(58) = {0.074611, 0.745654, 0, 1.0};
Point(59) = {-0.074952, -0.745658, 0, 1.0};
Point(60) = {-0.074610, -0.745696, 0, 1.0};
Point(61) = {-0.073600, -0.745833, 0, 1.0};
Point(62) = {-0.071964, -0.746070, 0, 1.0};
Point(63) = {-0.069745, -0.746363, 0, 1.0};
Point(64) = {-0.066979, -0.746686, 0, 1.0};
Point(65) = {-0.063714, -0.747044, 0, 1.0};
Point(66) = {-0.060011, -0.747429, 0, 1.0};
Point(67) = {-0.055932, -0.747829, 0, 1.0};
Point(68) = {-0.051550, -0.748229, 0, 1.0};
Point(69) = {-0.046920, -0.748615, 0, 1.0};
Point(70) = {-0.042060, -0.748977, 0, 1.0};
Point(71) = {-0.036996, -0.749304, 0, 1.0};
Point(72) = {-0.031788, -0.749582, 0, 1.0};
Point(73) = {-0.026501, -0.749799, 0, 1.0};
Point(74) = {-0.021194, -0.749943, 0, 1.0};
Point(75) = {-0.015933, -0.750000, 0, 1.0};
Point(76) = {-0.010777, -0.749963, 0, 1.0};
Point(77) = {-0.005787, -0.749822, 0, 1.0};
Point(78) = {-0.001022, -0.749575, 0, 1.0};
Point(79) = {0.003466, -0.749219, 0, 1.0};
Point(80) = {0.007625, -0.748754, 0, 1.0};
Point(81) = {0.011412, -0.748185, 0, 1.0};
Point(82) = {0.014788, -0.747582, 0, 1.0};
Point(83) = {0.017719, -0.746883, 0, 1.0};
Point(84) = {0.020177, -0.746122, 0, 1.0};
Point(85) = {0.022146, -0.745310, 0, 1.0};
Point(86) = {0.023611, -0.744460, 0, 1.0};
Point(87) = {0.024567, -0.743596, 0, 1.0};
Point(88) = {0.025000, -0.742557, 0, 1.0};
Point(89) = {0.024514, -0.741889, 0, 1.0};
Point(90) = {0.023516, -0.741381, 0, 1.0};
Point(91) = {0.022011, -0.740945, 0, 1.0};
Point(92) = {0.020006, -0.740588, 0, 1.0};
Point(93) = {0.017515, -0.740318, 0, 1.0};
Point(94) = {0.014557, -0.740132, 0, 1.0};
Point(95) = {0.011159, -0.740029, 0, 1.0};
Point(96) = {0.007353, -0.740002, 0, 1.0};
Point(97) = {0.003182, -0.740048, 0, 1.0};
Point(98) = {-0.001314, -0.740159, 0, 1.0};
Point(99) = {-0.006082, -0.740327, 0, 1.0};
Point(100) = {-0.011069, -0.740548, 0, 1.0};
Point(101) = {-0.016218, -0.740811, 0, 1.0};
Point(102) = {-0.021468, -0.741111, 0, 1.0};
Point(103) = {-0.026760, -0.741444, 0, 1.0};
Point(104) = {-0.032030, -0.741800, 0, 1.0};
Point(105) = {-0.037217, -0.742180, 0, 1.0};
Point(106) = {-0.042259, -0.742579, 0, 1.0};
Point(107) = {-0.047094, -0.743010, 0, 1.0};
Point(108) = {-0.051697, -0.743486, 0, 1.0};
Point(109) = {-0.056052, -0.743974, 0, 1.0};
Point(110) = {-0.060104, -0.744423, 0, 1.0};
Point(111) = {-0.063784, -0.744809, 0, 1.0};
Point(112) = {-0.067028, -0.745119, 0, 1.0};
Point(113) = {-0.069776, -0.745353, 0, 1.0};
Point(114) = {-0.071981, -0.745518, 0, 1.0};
Point(115) = {-0.073607, -0.745617, 0, 1.0};
Point(116) = {-0.074611, -0.745654, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:58};
Spline(4) = {58,1};

// Lines: second blade (splines 5-8)
Spline(5) = {59:78};
Spline(6) = {78:99};
Spline(7) = {99:116};
Spline(8) = {116,59};

// Outer domain (points 20001-4 and lines)
Point(117) = {-13.50000000, -15.00000000, 0, 1.0};
Point(118) = {-13.50000000, 15.00000000, 0, 1.0};
Point(119) = {13.50000000, 15.00000000, 0, 1.0};
Point(120) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {117, 118};
Line(12) = {118, 119};
Line(13) = {119, 120};
Line(14) = {117, 120};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html