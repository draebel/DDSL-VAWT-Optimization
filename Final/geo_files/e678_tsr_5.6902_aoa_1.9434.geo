SetFactory("OpenCASCADE");

Point(1) = {0.112326, 0.728185, 0, 1.0};
Point(2) = {0.111796, 0.728407, 0, 1.0};
Point(3) = {0.110316, 0.729104, 0, 1.0};
Point(4) = {0.108089, 0.730245, 0, 1.0};
Point(5) = {0.105253, 0.731684, 0, 1.0};
Point(6) = {0.101816, 0.733282, 0, 1.0};
Point(7) = {0.097763, 0.735005, 0, 1.0};
Point(8) = {0.093162, 0.736861, 0, 1.0};
Point(9) = {0.088137, 0.738802, 0, 1.0};
Point(10) = {0.082807, 0.740684, 0, 1.0};
Point(11) = {0.077124, 0.742303, 0, 1.0};
Point(12) = {0.070890, 0.743687, 0, 1.0};
Point(13) = {0.064177, 0.745090, 0, 1.0};
Point(14) = {0.057296, 0.746531, 0, 1.0};
Point(15) = {0.050396, 0.747823, 0, 1.0};
Point(16) = {0.043498, 0.748854, 0, 1.0};
Point(17) = {0.036602, 0.749552, 0, 1.0};
Point(18) = {0.029682, 0.749914, 0, 1.0};
Point(19) = {0.022768, 0.750000, 0, 1.0};
Point(20) = {0.015948, 0.749844, 0, 1.0};
Point(21) = {0.009295, 0.749458, 0, 1.0};
Point(22) = {0.002876, 0.748850, 0, 1.0};
Point(23) = {-0.003241, 0.748036, 0, 1.0};
Point(24) = {-0.009001, 0.747030, 0, 1.0};
Point(25) = {-0.014346, 0.745849, 0, 1.0};
Point(26) = {-0.019229, 0.744517, 0, 1.0};
Point(27) = {-0.023601, 0.743057, 0, 1.0};
Point(28) = {-0.027427, 0.741496, 0, 1.0};
Point(29) = {-0.030677, 0.739869, 0, 1.0};
Point(30) = {-0.033329, 0.738217, 0, 1.0};
Point(31) = {-0.035358, 0.736589, 0, 1.0};
Point(32) = {-0.036748, 0.735044, 0, 1.0};
Point(33) = {-0.037478, 0.733672, 0, 1.0};
Point(34) = {-0.037387, 0.732610, 0, 1.0};
Point(35) = {-0.036351, 0.731743, 0, 1.0};
Point(36) = {-0.034434, 0.730928, 0, 1.0};
Point(37) = {-0.031683, 0.730200, 0, 1.0};
Point(38) = {-0.028137, 0.729555, 0, 1.0};
Point(39) = {-0.023838, 0.728998, 0, 1.0};
Point(40) = {-0.018835, 0.728529, 0, 1.0};
Point(41) = {-0.013180, 0.728145, 0, 1.0};
Point(42) = {-0.006941, 0.727838, 0, 1.0};
Point(43) = {-0.000197, 0.727606, 0, 1.0};
Point(44) = {0.006971, 0.727456, 0, 1.0};
Point(45) = {0.014489, 0.727388, 0, 1.0};
Point(46) = {0.022264, 0.727400, 0, 1.0};
Point(47) = {0.030212, 0.727504, 0, 1.0};
Point(48) = {0.038264, 0.727698, 0, 1.0};
Point(49) = {0.046322, 0.727958, 0, 1.0};
Point(50) = {0.054274, 0.728310, 0, 1.0};
Point(51) = {0.062082, 0.728805, 0, 1.0};
Point(52) = {0.069773, 0.729409, 0, 1.0};
Point(53) = {0.077306, 0.729989, 0, 1.0};
Point(54) = {0.084563, 0.730416, 0, 1.0};
Point(55) = {0.091370, 0.730590, 0, 1.0};
Point(56) = {0.097517, 0.730476, 0, 1.0};
Point(57) = {0.102806, 0.730084, 0, 1.0};
Point(58) = {0.107030, 0.729477, 0, 1.0};
Point(59) = {0.110020, 0.728829, 0, 1.0};
Point(60) = {0.111760, 0.728356, 0, 1.0};
Point(61) = {-0.112326, -0.728185, 0, 1.0};
Point(62) = {-0.111796, -0.728407, 0, 1.0};
Point(63) = {-0.110316, -0.729104, 0, 1.0};
Point(64) = {-0.108089, -0.730245, 0, 1.0};
Point(65) = {-0.105253, -0.731684, 0, 1.0};
Point(66) = {-0.101816, -0.733282, 0, 1.0};
Point(67) = {-0.097763, -0.735005, 0, 1.0};
Point(68) = {-0.093162, -0.736861, 0, 1.0};
Point(69) = {-0.088137, -0.738802, 0, 1.0};
Point(70) = {-0.082807, -0.740684, 0, 1.0};
Point(71) = {-0.077124, -0.742303, 0, 1.0};
Point(72) = {-0.070890, -0.743687, 0, 1.0};
Point(73) = {-0.064177, -0.745090, 0, 1.0};
Point(74) = {-0.057296, -0.746531, 0, 1.0};
Point(75) = {-0.050396, -0.747823, 0, 1.0};
Point(76) = {-0.043498, -0.748854, 0, 1.0};
Point(77) = {-0.036602, -0.749552, 0, 1.0};
Point(78) = {-0.029682, -0.749914, 0, 1.0};
Point(79) = {-0.022768, -0.750000, 0, 1.0};
Point(80) = {-0.015948, -0.749844, 0, 1.0};
Point(81) = {-0.009295, -0.749458, 0, 1.0};
Point(82) = {-0.002876, -0.748850, 0, 1.0};
Point(83) = {0.003241, -0.748036, 0, 1.0};
Point(84) = {0.009001, -0.747030, 0, 1.0};
Point(85) = {0.014346, -0.745849, 0, 1.0};
Point(86) = {0.019229, -0.744517, 0, 1.0};
Point(87) = {0.023601, -0.743057, 0, 1.0};
Point(88) = {0.027427, -0.741496, 0, 1.0};
Point(89) = {0.030677, -0.739869, 0, 1.0};
Point(90) = {0.033329, -0.738217, 0, 1.0};
Point(91) = {0.035358, -0.736589, 0, 1.0};
Point(92) = {0.036748, -0.735044, 0, 1.0};
Point(93) = {0.037478, -0.733672, 0, 1.0};
Point(94) = {0.037387, -0.732610, 0, 1.0};
Point(95) = {0.036351, -0.731743, 0, 1.0};
Point(96) = {0.034434, -0.730928, 0, 1.0};
Point(97) = {0.031683, -0.730200, 0, 1.0};
Point(98) = {0.028137, -0.729555, 0, 1.0};
Point(99) = {0.023838, -0.728998, 0, 1.0};
Point(100) = {0.018835, -0.728529, 0, 1.0};
Point(101) = {0.013180, -0.728145, 0, 1.0};
Point(102) = {0.006941, -0.727838, 0, 1.0};
Point(103) = {0.000197, -0.727606, 0, 1.0};
Point(104) = {-0.006971, -0.727456, 0, 1.0};
Point(105) = {-0.014489, -0.727388, 0, 1.0};
Point(106) = {-0.022264, -0.727400, 0, 1.0};
Point(107) = {-0.030212, -0.727504, 0, 1.0};
Point(108) = {-0.038264, -0.727698, 0, 1.0};
Point(109) = {-0.046322, -0.727958, 0, 1.0};
Point(110) = {-0.054274, -0.728310, 0, 1.0};
Point(111) = {-0.062082, -0.728805, 0, 1.0};
Point(112) = {-0.069773, -0.729409, 0, 1.0};
Point(113) = {-0.077306, -0.729989, 0, 1.0};
Point(114) = {-0.084563, -0.730416, 0, 1.0};
Point(115) = {-0.091370, -0.730590, 0, 1.0};
Point(116) = {-0.097517, -0.730476, 0, 1.0};
Point(117) = {-0.102806, -0.730084, 0, 1.0};
Point(118) = {-0.107030, -0.729477, 0, 1.0};
Point(119) = {-0.110020, -0.728829, 0, 1.0};
Point(120) = {-0.111760, -0.728356, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html