SetFactory("OpenCASCADE");

Point(1) = {0.112414, 0.728178, 0, 1.0};
Point(2) = {0.111884, 0.728401, 0, 1.0};
Point(3) = {0.110404, 0.729098, 0, 1.0};
Point(4) = {0.108176, 0.730239, 0, 1.0};
Point(5) = {0.105339, 0.731678, 0, 1.0};
Point(6) = {0.101901, 0.733276, 0, 1.0};
Point(7) = {0.097847, 0.735000, 0, 1.0};
Point(8) = {0.093244, 0.736857, 0, 1.0};
Point(9) = {0.088217, 0.738799, 0, 1.0};
Point(10) = {0.082885, 0.740681, 0, 1.0};
Point(11) = {0.077201, 0.742300, 0, 1.0};
Point(12) = {0.070965, 0.743685, 0, 1.0};
Point(13) = {0.064250, 0.745088, 0, 1.0};
Point(14) = {0.057366, 0.746530, 0, 1.0};
Point(15) = {0.050464, 0.747823, 0, 1.0};
Point(16) = {0.043564, 0.748854, 0, 1.0};
Point(17) = {0.036665, 0.749551, 0, 1.0};
Point(18) = {0.029744, 0.749914, 0, 1.0};
Point(19) = {0.022828, 0.750000, 0, 1.0};
Point(20) = {0.016005, 0.749844, 0, 1.0};
Point(21) = {0.009350, 0.749458, 0, 1.0};
Point(22) = {0.002929, 0.748850, 0, 1.0};
Point(23) = {-0.003190, 0.748036, 0, 1.0};
Point(24) = {-0.008952, 0.747029, 0, 1.0};
Point(25) = {-0.014299, 0.745848, 0, 1.0};
Point(26) = {-0.019183, 0.744515, 0, 1.0};
Point(27) = {-0.023556, 0.743055, 0, 1.0};
Point(28) = {-0.027384, 0.741493, 0, 1.0};
Point(29) = {-0.030635, 0.739866, 0, 1.0};
Point(30) = {-0.033287, 0.738213, 0, 1.0};
Point(31) = {-0.035318, 0.736585, 0, 1.0};
Point(32) = {-0.036707, 0.735039, 0, 1.0};
Point(33) = {-0.037438, 0.733667, 0, 1.0};
Point(34) = {-0.037347, 0.732604, 0, 1.0};
Point(35) = {-0.036311, 0.731737, 0, 1.0};
Point(36) = {-0.034393, 0.730922, 0, 1.0};
Point(37) = {-0.031641, 0.730194, 0, 1.0};
Point(38) = {-0.028094, 0.729548, 0, 1.0};
Point(39) = {-0.023794, 0.728991, 0, 1.0};
Point(40) = {-0.018789, 0.728522, 0, 1.0};
Point(41) = {-0.013132, 0.728138, 0, 1.0};
Point(42) = {-0.006891, 0.727831, 0, 1.0};
Point(43) = {-0.000145, 0.727599, 0, 1.0};
Point(44) = {0.007025, 0.727448, 0, 1.0};
Point(45) = {0.014545, 0.727381, 0, 1.0};
Point(46) = {0.022323, 0.727393, 0, 1.0};
Point(47) = {0.030274, 0.727497, 0, 1.0};
Point(48) = {0.038328, 0.727691, 0, 1.0};
Point(49) = {0.046389, 0.727951, 0, 1.0};
Point(50) = {0.054344, 0.728303, 0, 1.0};
Point(51) = {0.062154, 0.728799, 0, 1.0};
Point(52) = {0.069847, 0.729402, 0, 1.0};
Point(53) = {0.077383, 0.729982, 0, 1.0};
Point(54) = {0.084642, 0.730410, 0, 1.0};
Point(55) = {0.091452, 0.730584, 0, 1.0};
Point(56) = {0.097600, 0.730470, 0, 1.0};
Point(57) = {0.102891, 0.730077, 0, 1.0};
Point(58) = {0.107116, 0.729470, 0, 1.0};
Point(59) = {0.110108, 0.728823, 0, 1.0};
Point(60) = {0.111848, 0.728349, 0, 1.0};
Point(61) = {-0.112414, -0.728178, 0, 1.0};
Point(62) = {-0.111884, -0.728401, 0, 1.0};
Point(63) = {-0.110404, -0.729098, 0, 1.0};
Point(64) = {-0.108176, -0.730239, 0, 1.0};
Point(65) = {-0.105339, -0.731678, 0, 1.0};
Point(66) = {-0.101901, -0.733276, 0, 1.0};
Point(67) = {-0.097847, -0.735000, 0, 1.0};
Point(68) = {-0.093244, -0.736857, 0, 1.0};
Point(69) = {-0.088217, -0.738799, 0, 1.0};
Point(70) = {-0.082885, -0.740681, 0, 1.0};
Point(71) = {-0.077201, -0.742300, 0, 1.0};
Point(72) = {-0.070965, -0.743685, 0, 1.0};
Point(73) = {-0.064250, -0.745088, 0, 1.0};
Point(74) = {-0.057366, -0.746530, 0, 1.0};
Point(75) = {-0.050464, -0.747823, 0, 1.0};
Point(76) = {-0.043564, -0.748854, 0, 1.0};
Point(77) = {-0.036665, -0.749551, 0, 1.0};
Point(78) = {-0.029744, -0.749914, 0, 1.0};
Point(79) = {-0.022828, -0.750000, 0, 1.0};
Point(80) = {-0.016005, -0.749844, 0, 1.0};
Point(81) = {-0.009350, -0.749458, 0, 1.0};
Point(82) = {-0.002929, -0.748850, 0, 1.0};
Point(83) = {0.003190, -0.748036, 0, 1.0};
Point(84) = {0.008952, -0.747029, 0, 1.0};
Point(85) = {0.014299, -0.745848, 0, 1.0};
Point(86) = {0.019183, -0.744515, 0, 1.0};
Point(87) = {0.023556, -0.743055, 0, 1.0};
Point(88) = {0.027384, -0.741493, 0, 1.0};
Point(89) = {0.030635, -0.739866, 0, 1.0};
Point(90) = {0.033287, -0.738213, 0, 1.0};
Point(91) = {0.035318, -0.736585, 0, 1.0};
Point(92) = {0.036707, -0.735039, 0, 1.0};
Point(93) = {0.037438, -0.733667, 0, 1.0};
Point(94) = {0.037347, -0.732604, 0, 1.0};
Point(95) = {0.036311, -0.731737, 0, 1.0};
Point(96) = {0.034393, -0.730922, 0, 1.0};
Point(97) = {0.031641, -0.730194, 0, 1.0};
Point(98) = {0.028094, -0.729548, 0, 1.0};
Point(99) = {0.023794, -0.728991, 0, 1.0};
Point(100) = {0.018789, -0.728522, 0, 1.0};
Point(101) = {0.013132, -0.728138, 0, 1.0};
Point(102) = {0.006891, -0.727831, 0, 1.0};
Point(103) = {0.000145, -0.727599, 0, 1.0};
Point(104) = {-0.007025, -0.727448, 0, 1.0};
Point(105) = {-0.014545, -0.727381, 0, 1.0};
Point(106) = {-0.022323, -0.727393, 0, 1.0};
Point(107) = {-0.030274, -0.727497, 0, 1.0};
Point(108) = {-0.038328, -0.727691, 0, 1.0};
Point(109) = {-0.046389, -0.727951, 0, 1.0};
Point(110) = {-0.054344, -0.728303, 0, 1.0};
Point(111) = {-0.062154, -0.728799, 0, 1.0};
Point(112) = {-0.069847, -0.729402, 0, 1.0};
Point(113) = {-0.077383, -0.729982, 0, 1.0};
Point(114) = {-0.084642, -0.730410, 0, 1.0};
Point(115) = {-0.091452, -0.730584, 0, 1.0};
Point(116) = {-0.097600, -0.730470, 0, 1.0};
Point(117) = {-0.102891, -0.730077, 0, 1.0};
Point(118) = {-0.107116, -0.729470, 0, 1.0};
Point(119) = {-0.110108, -0.728823, 0, 1.0};
Point(120) = {-0.111848, -0.728349, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html