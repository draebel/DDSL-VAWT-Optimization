SetFactory("OpenCASCADE");

Point(1) = {0.149885, 0.720905, 0, 1.0};
Point(2) = {0.149179, 0.721201, 0, 1.0};
Point(3) = {0.147205, 0.722130, 0, 1.0};
Point(4) = {0.144235, 0.723652, 0, 1.0};
Point(5) = {0.140452, 0.725571, 0, 1.0};
Point(6) = {0.135867, 0.727702, 0, 1.0};
Point(7) = {0.130462, 0.730000, 0, 1.0};
Point(8) = {0.124325, 0.732476, 0, 1.0};
Point(9) = {0.117623, 0.735065, 0, 1.0};
Point(10) = {0.110514, 0.737575, 0, 1.0};
Point(11) = {0.102934, 0.739734, 0, 1.0};
Point(12) = {0.094620, 0.741581, 0, 1.0};
Point(13) = {0.085667, 0.743451, 0, 1.0};
Point(14) = {0.076489, 0.745374, 0, 1.0};
Point(15) = {0.067286, 0.747097, 0, 1.0};
Point(16) = {0.058085, 0.748472, 0, 1.0};
Point(17) = {0.048887, 0.749402, 0, 1.0};
Point(18) = {0.039658, 0.749885, 0, 1.0};
Point(19) = {0.030437, 0.750000, 0, 1.0};
Point(20) = {0.021341, 0.749792, 0, 1.0};
Point(21) = {0.012466, 0.749277, 0, 1.0};
Point(22) = {0.003906, 0.748467, 0, 1.0};
Point(23) = {-0.004254, 0.747381, 0, 1.0};
Point(24) = {-0.011936, 0.746039, 0, 1.0};
Point(25) = {-0.019065, 0.744464, 0, 1.0};
Point(26) = {-0.025577, 0.742687, 0, 1.0};
Point(27) = {-0.031409, 0.740740, 0, 1.0};
Point(28) = {-0.036512, 0.738658, 0, 1.0};
Point(29) = {-0.040846, 0.736488, 0, 1.0};
Point(30) = {-0.044383, 0.734284, 0, 1.0};
Point(31) = {-0.047090, 0.732113, 0, 1.0};
Point(32) = {-0.048943, 0.730052, 0, 1.0};
Point(33) = {-0.049918, 0.728222, 0, 1.0};
Point(34) = {-0.049796, 0.726805, 0, 1.0};
Point(35) = {-0.048414, 0.725650, 0, 1.0};
Point(36) = {-0.045858, 0.724563, 0, 1.0};
Point(37) = {-0.042188, 0.723592, 0, 1.0};
Point(38) = {-0.037459, 0.722731, 0, 1.0};
Point(39) = {-0.031725, 0.721988, 0, 1.0};
Point(40) = {-0.025052, 0.721363, 0, 1.0};
Point(41) = {-0.017509, 0.720851, 0, 1.0};
Point(42) = {-0.009188, 0.720441, 0, 1.0};
Point(43) = {-0.000194, 0.720132, 0, 1.0};
Point(44) = {0.009367, 0.719931, 0, 1.0};
Point(45) = {0.019394, 0.719841, 0, 1.0};
Point(46) = {0.029764, 0.719857, 0, 1.0};
Point(47) = {0.040365, 0.719996, 0, 1.0};
Point(48) = {0.051104, 0.720254, 0, 1.0};
Point(49) = {0.061852, 0.720602, 0, 1.0};
Point(50) = {0.072458, 0.721070, 0, 1.0};
Point(51) = {0.082872, 0.721732, 0, 1.0};
Point(52) = {0.093130, 0.722536, 0, 1.0};
Point(53) = {0.103178, 0.723310, 0, 1.0};
Point(54) = {0.112857, 0.723880, 0, 1.0};
Point(55) = {0.121936, 0.724112, 0, 1.0};
Point(56) = {0.130133, 0.723960, 0, 1.0};
Point(57) = {0.137188, 0.723437, 0, 1.0};
Point(58) = {0.142821, 0.722627, 0, 1.0};
Point(59) = {0.146810, 0.721763, 0, 1.0};
Point(60) = {0.149130, 0.721132, 0, 1.0};
Point(61) = {-0.149885, -0.720905, 0, 1.0};
Point(62) = {-0.149179, -0.721201, 0, 1.0};
Point(63) = {-0.147205, -0.722130, 0, 1.0};
Point(64) = {-0.144235, -0.723652, 0, 1.0};
Point(65) = {-0.140452, -0.725571, 0, 1.0};
Point(66) = {-0.135867, -0.727702, 0, 1.0};
Point(67) = {-0.130462, -0.730000, 0, 1.0};
Point(68) = {-0.124325, -0.732476, 0, 1.0};
Point(69) = {-0.117623, -0.735065, 0, 1.0};
Point(70) = {-0.110514, -0.737575, 0, 1.0};
Point(71) = {-0.102934, -0.739734, 0, 1.0};
Point(72) = {-0.094620, -0.741581, 0, 1.0};
Point(73) = {-0.085667, -0.743451, 0, 1.0};
Point(74) = {-0.076489, -0.745374, 0, 1.0};
Point(75) = {-0.067286, -0.747097, 0, 1.0};
Point(76) = {-0.058085, -0.748472, 0, 1.0};
Point(77) = {-0.048887, -0.749402, 0, 1.0};
Point(78) = {-0.039658, -0.749885, 0, 1.0};
Point(79) = {-0.030437, -0.750000, 0, 1.0};
Point(80) = {-0.021341, -0.749792, 0, 1.0};
Point(81) = {-0.012466, -0.749277, 0, 1.0};
Point(82) = {-0.003906, -0.748467, 0, 1.0};
Point(83) = {0.004254, -0.747381, 0, 1.0};
Point(84) = {0.011936, -0.746039, 0, 1.0};
Point(85) = {0.019065, -0.744464, 0, 1.0};
Point(86) = {0.025577, -0.742687, 0, 1.0};
Point(87) = {0.031409, -0.740740, 0, 1.0};
Point(88) = {0.036512, -0.738658, 0, 1.0};
Point(89) = {0.040846, -0.736488, 0, 1.0};
Point(90) = {0.044383, -0.734284, 0, 1.0};
Point(91) = {0.047090, -0.732113, 0, 1.0};
Point(92) = {0.048943, -0.730052, 0, 1.0};
Point(93) = {0.049918, -0.728222, 0, 1.0};
Point(94) = {0.049796, -0.726805, 0, 1.0};
Point(95) = {0.048414, -0.725650, 0, 1.0};
Point(96) = {0.045858, -0.724563, 0, 1.0};
Point(97) = {0.042188, -0.723592, 0, 1.0};
Point(98) = {0.037459, -0.722731, 0, 1.0};
Point(99) = {0.031725, -0.721988, 0, 1.0};
Point(100) = {0.025052, -0.721363, 0, 1.0};
Point(101) = {0.017509, -0.720851, 0, 1.0};
Point(102) = {0.009188, -0.720441, 0, 1.0};
Point(103) = {0.000194, -0.720132, 0, 1.0};
Point(104) = {-0.009367, -0.719931, 0, 1.0};
Point(105) = {-0.019394, -0.719841, 0, 1.0};
Point(106) = {-0.029764, -0.719857, 0, 1.0};
Point(107) = {-0.040365, -0.719996, 0, 1.0};
Point(108) = {-0.051104, -0.720254, 0, 1.0};
Point(109) = {-0.061852, -0.720602, 0, 1.0};
Point(110) = {-0.072458, -0.721070, 0, 1.0};
Point(111) = {-0.082872, -0.721732, 0, 1.0};
Point(112) = {-0.093130, -0.722536, 0, 1.0};
Point(113) = {-0.103178, -0.723310, 0, 1.0};
Point(114) = {-0.112857, -0.723880, 0, 1.0};
Point(115) = {-0.121936, -0.724112, 0, 1.0};
Point(116) = {-0.130133, -0.723960, 0, 1.0};
Point(117) = {-0.137188, -0.723437, 0, 1.0};
Point(118) = {-0.142821, -0.722627, 0, 1.0};
Point(119) = {-0.146810, -0.721763, 0, 1.0};
Point(120) = {-0.149130, -0.721132, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html