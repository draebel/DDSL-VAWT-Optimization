SetFactory("OpenCASCADE");

Point(1) = {0.112422, 0.728171, 0, 1.0};
Point(2) = {0.111892, 0.728394, 0, 1.0};
Point(3) = {0.110411, 0.729091, 0, 1.0};
Point(4) = {0.108183, 0.730232, 0, 1.0};
Point(5) = {0.105344, 0.731673, 0, 1.0};
Point(6) = {0.101905, 0.733271, 0, 1.0};
Point(7) = {0.097850, 0.734996, 0, 1.0};
Point(8) = {0.093245, 0.736853, 0, 1.0};
Point(9) = {0.088217, 0.738795, 0, 1.0};
Point(10) = {0.082884, 0.740679, 0, 1.0};
Point(11) = {0.077197, 0.742298, 0, 1.0};
Point(12) = {0.070960, 0.743683, 0, 1.0};
Point(13) = {0.064242, 0.745087, 0, 1.0};
Point(14) = {0.057357, 0.746529, 0, 1.0};
Point(15) = {0.050452, 0.747822, 0, 1.0};
Point(16) = {0.043550, 0.748853, 0, 1.0};
Point(17) = {0.036649, 0.749551, 0, 1.0};
Point(18) = {0.029725, 0.749914, 0, 1.0};
Point(19) = {0.022807, 0.750000, 0, 1.0};
Point(20) = {0.015983, 0.749844, 0, 1.0};
Point(21) = {0.009324, 0.749458, 0, 1.0};
Point(22) = {0.002902, 0.748850, 0, 1.0};
Point(23) = {-0.003219, 0.748035, 0, 1.0};
Point(24) = {-0.008983, 0.747028, 0, 1.0};
Point(25) = {-0.014332, 0.745846, 0, 1.0};
Point(26) = {-0.019217, 0.744514, 0, 1.0};
Point(27) = {-0.023592, 0.743053, 0, 1.0};
Point(28) = {-0.027421, 0.741491, 0, 1.0};
Point(29) = {-0.030673, 0.739862, 0, 1.0};
Point(30) = {-0.033326, 0.738209, 0, 1.0};
Point(31) = {-0.035357, 0.736580, 0, 1.0};
Point(32) = {-0.036747, 0.735035, 0, 1.0};
Point(33) = {-0.037478, 0.733662, 0, 1.0};
Point(34) = {-0.037387, 0.732599, 0, 1.0};
Point(35) = {-0.036350, 0.731732, 0, 1.0};
Point(36) = {-0.034432, 0.730916, 0, 1.0};
Point(37) = {-0.031680, 0.730187, 0, 1.0};
Point(38) = {-0.028131, 0.729542, 0, 1.0};
Point(39) = {-0.023829, 0.728984, 0, 1.0};
Point(40) = {-0.018823, 0.728516, 0, 1.0};
Point(41) = {-0.013164, 0.728131, 0, 1.0};
Point(42) = {-0.006922, 0.727823, 0, 1.0};
Point(43) = {-0.000173, 0.727591, 0, 1.0};
Point(44) = {0.006999, 0.727441, 0, 1.0};
Point(45) = {0.014522, 0.727374, 0, 1.0};
Point(46) = {0.022302, 0.727386, 0, 1.0};
Point(47) = {0.030255, 0.727490, 0, 1.0};
Point(48) = {0.038312, 0.727683, 0, 1.0};
Point(49) = {0.046376, 0.727944, 0, 1.0};
Point(50) = {0.054333, 0.728296, 0, 1.0};
Point(51) = {0.062146, 0.728792, 0, 1.0};
Point(52) = {0.069841, 0.729396, 0, 1.0};
Point(53) = {0.077380, 0.729976, 0, 1.0};
Point(54) = {0.084641, 0.730404, 0, 1.0};
Point(55) = {0.091453, 0.730578, 0, 1.0};
Point(56) = {0.097603, 0.730464, 0, 1.0};
Point(57) = {0.102895, 0.730071, 0, 1.0};
Point(58) = {0.107122, 0.729464, 0, 1.0};
Point(59) = {0.110115, 0.728816, 0, 1.0};
Point(60) = {0.111855, 0.728342, 0, 1.0};
Point(61) = {-0.112422, -0.728171, 0, 1.0};
Point(62) = {-0.111892, -0.728394, 0, 1.0};
Point(63) = {-0.110411, -0.729091, 0, 1.0};
Point(64) = {-0.108183, -0.730232, 0, 1.0};
Point(65) = {-0.105344, -0.731673, 0, 1.0};
Point(66) = {-0.101905, -0.733271, 0, 1.0};
Point(67) = {-0.097850, -0.734996, 0, 1.0};
Point(68) = {-0.093245, -0.736853, 0, 1.0};
Point(69) = {-0.088217, -0.738795, 0, 1.0};
Point(70) = {-0.082884, -0.740679, 0, 1.0};
Point(71) = {-0.077197, -0.742298, 0, 1.0};
Point(72) = {-0.070960, -0.743683, 0, 1.0};
Point(73) = {-0.064242, -0.745087, 0, 1.0};
Point(74) = {-0.057357, -0.746529, 0, 1.0};
Point(75) = {-0.050452, -0.747822, 0, 1.0};
Point(76) = {-0.043550, -0.748853, 0, 1.0};
Point(77) = {-0.036649, -0.749551, 0, 1.0};
Point(78) = {-0.029725, -0.749914, 0, 1.0};
Point(79) = {-0.022807, -0.750000, 0, 1.0};
Point(80) = {-0.015983, -0.749844, 0, 1.0};
Point(81) = {-0.009324, -0.749458, 0, 1.0};
Point(82) = {-0.002902, -0.748850, 0, 1.0};
Point(83) = {0.003219, -0.748035, 0, 1.0};
Point(84) = {0.008983, -0.747028, 0, 1.0};
Point(85) = {0.014332, -0.745846, 0, 1.0};
Point(86) = {0.019217, -0.744514, 0, 1.0};
Point(87) = {0.023592, -0.743053, 0, 1.0};
Point(88) = {0.027421, -0.741491, 0, 1.0};
Point(89) = {0.030673, -0.739862, 0, 1.0};
Point(90) = {0.033326, -0.738209, 0, 1.0};
Point(91) = {0.035357, -0.736580, 0, 1.0};
Point(92) = {0.036747, -0.735035, 0, 1.0};
Point(93) = {0.037478, -0.733662, 0, 1.0};
Point(94) = {0.037387, -0.732599, 0, 1.0};
Point(95) = {0.036350, -0.731732, 0, 1.0};
Point(96) = {0.034432, -0.730916, 0, 1.0};
Point(97) = {0.031680, -0.730187, 0, 1.0};
Point(98) = {0.028131, -0.729542, 0, 1.0};
Point(99) = {0.023829, -0.728984, 0, 1.0};
Point(100) = {0.018823, -0.728516, 0, 1.0};
Point(101) = {0.013164, -0.728131, 0, 1.0};
Point(102) = {0.006922, -0.727823, 0, 1.0};
Point(103) = {0.000173, -0.727591, 0, 1.0};
Point(104) = {-0.006999, -0.727441, 0, 1.0};
Point(105) = {-0.014522, -0.727374, 0, 1.0};
Point(106) = {-0.022302, -0.727386, 0, 1.0};
Point(107) = {-0.030255, -0.727490, 0, 1.0};
Point(108) = {-0.038312, -0.727683, 0, 1.0};
Point(109) = {-0.046376, -0.727944, 0, 1.0};
Point(110) = {-0.054333, -0.728296, 0, 1.0};
Point(111) = {-0.062146, -0.728792, 0, 1.0};
Point(112) = {-0.069841, -0.729396, 0, 1.0};
Point(113) = {-0.077380, -0.729976, 0, 1.0};
Point(114) = {-0.084641, -0.730404, 0, 1.0};
Point(115) = {-0.091453, -0.730578, 0, 1.0};
Point(116) = {-0.097603, -0.730464, 0, 1.0};
Point(117) = {-0.102895, -0.730071, 0, 1.0};
Point(118) = {-0.107122, -0.729464, 0, 1.0};
Point(119) = {-0.110115, -0.728816, 0, 1.0};
Point(120) = {-0.111855, -0.728342, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html