SetFactory("OpenCASCADE");

Point(1) = {0.074942, 0.735452, 0, 1.0};
Point(2) = {0.074589, 0.735600, 0, 1.0};
Point(3) = {0.073602, 0.736065, 0, 1.0};
Point(4) = {0.072117, 0.736826, 0, 1.0};
Point(5) = {0.070226, 0.737786, 0, 1.0};
Point(6) = {0.067934, 0.738851, 0, 1.0};
Point(7) = {0.065231, 0.740000, 0, 1.0};
Point(8) = {0.062162, 0.741238, 0, 1.0};
Point(9) = {0.058811, 0.742532, 0, 1.0};
Point(10) = {0.055257, 0.743788, 0, 1.0};
Point(11) = {0.051467, 0.744867, 0, 1.0};
Point(12) = {0.047310, 0.745790, 0, 1.0};
Point(13) = {0.042833, 0.746726, 0, 1.0};
Point(14) = {0.038244, 0.747687, 0, 1.0};
Point(15) = {0.033643, 0.748548, 0, 1.0};
Point(16) = {0.029043, 0.749236, 0, 1.0};
Point(17) = {0.024444, 0.749701, 0, 1.0};
Point(18) = {0.019829, 0.749943, 0, 1.0};
Point(19) = {0.015218, 0.750000, 0, 1.0};
Point(20) = {0.010670, 0.749896, 0, 1.0};
Point(21) = {0.006233, 0.749639, 0, 1.0};
Point(22) = {0.001953, 0.749233, 0, 1.0};
Point(23) = {-0.002127, 0.748690, 0, 1.0};
Point(24) = {-0.005968, 0.748019, 0, 1.0};
Point(25) = {-0.009533, 0.747232, 0, 1.0};
Point(26) = {-0.012789, 0.746344, 0, 1.0};
Point(27) = {-0.015704, 0.745370, 0, 1.0};
Point(28) = {-0.018256, 0.744329, 0, 1.0};
Point(29) = {-0.020423, 0.743244, 0, 1.0};
Point(30) = {-0.022192, 0.742142, 0, 1.0};
Point(31) = {-0.023545, 0.741056, 0, 1.0};
Point(32) = {-0.024472, 0.740026, 0, 1.0};
Point(33) = {-0.024959, 0.739111, 0, 1.0};
Point(34) = {-0.024898, 0.738403, 0, 1.0};
Point(35) = {-0.024207, 0.737825, 0, 1.0};
Point(36) = {-0.022929, 0.737281, 0, 1.0};
Point(37) = {-0.021094, 0.736796, 0, 1.0};
Point(38) = {-0.018729, 0.736365, 0, 1.0};
Point(39) = {-0.015862, 0.735994, 0, 1.0};
Point(40) = {-0.012526, 0.735682, 0, 1.0};
Point(41) = {-0.008755, 0.735426, 0, 1.0};
Point(42) = {-0.004594, 0.735220, 0, 1.0};
Point(43) = {-0.000097, 0.735066, 0, 1.0};
Point(44) = {0.004684, 0.734966, 0, 1.0};
Point(45) = {0.009697, 0.734921, 0, 1.0};
Point(46) = {0.014882, 0.734929, 0, 1.0};
Point(47) = {0.020183, 0.734998, 0, 1.0};
Point(48) = {0.025552, 0.735127, 0, 1.0};
Point(49) = {0.030926, 0.735301, 0, 1.0};
Point(50) = {0.036229, 0.735535, 0, 1.0};
Point(51) = {0.041436, 0.735866, 0, 1.0};
Point(52) = {0.046565, 0.736268, 0, 1.0};
Point(53) = {0.051589, 0.736655, 0, 1.0};
Point(54) = {0.056428, 0.736940, 0, 1.0};
Point(55) = {0.060968, 0.737056, 0, 1.0};
Point(56) = {0.065067, 0.736980, 0, 1.0};
Point(57) = {0.068594, 0.736718, 0, 1.0};
Point(58) = {0.071411, 0.736314, 0, 1.0};
Point(59) = {0.073405, 0.735882, 0, 1.0};
Point(60) = {0.074565, 0.735566, 0, 1.0};
Point(61) = {-0.074942, -0.735452, 0, 1.0};
Point(62) = {-0.074589, -0.735600, 0, 1.0};
Point(63) = {-0.073602, -0.736065, 0, 1.0};
Point(64) = {-0.072117, -0.736826, 0, 1.0};
Point(65) = {-0.070226, -0.737786, 0, 1.0};
Point(66) = {-0.067934, -0.738851, 0, 1.0};
Point(67) = {-0.065231, -0.740000, 0, 1.0};
Point(68) = {-0.062162, -0.741238, 0, 1.0};
Point(69) = {-0.058811, -0.742532, 0, 1.0};
Point(70) = {-0.055257, -0.743788, 0, 1.0};
Point(71) = {-0.051467, -0.744867, 0, 1.0};
Point(72) = {-0.047310, -0.745790, 0, 1.0};
Point(73) = {-0.042833, -0.746726, 0, 1.0};
Point(74) = {-0.038244, -0.747687, 0, 1.0};
Point(75) = {-0.033643, -0.748548, 0, 1.0};
Point(76) = {-0.029043, -0.749236, 0, 1.0};
Point(77) = {-0.024444, -0.749701, 0, 1.0};
Point(78) = {-0.019829, -0.749943, 0, 1.0};
Point(79) = {-0.015218, -0.750000, 0, 1.0};
Point(80) = {-0.010670, -0.749896, 0, 1.0};
Point(81) = {-0.006233, -0.749639, 0, 1.0};
Point(82) = {-0.001953, -0.749233, 0, 1.0};
Point(83) = {0.002127, -0.748690, 0, 1.0};
Point(84) = {0.005968, -0.748019, 0, 1.0};
Point(85) = {0.009533, -0.747232, 0, 1.0};
Point(86) = {0.012789, -0.746344, 0, 1.0};
Point(87) = {0.015704, -0.745370, 0, 1.0};
Point(88) = {0.018256, -0.744329, 0, 1.0};
Point(89) = {0.020423, -0.743244, 0, 1.0};
Point(90) = {0.022192, -0.742142, 0, 1.0};
Point(91) = {0.023545, -0.741056, 0, 1.0};
Point(92) = {0.024472, -0.740026, 0, 1.0};
Point(93) = {0.024959, -0.739111, 0, 1.0};
Point(94) = {0.024898, -0.738403, 0, 1.0};
Point(95) = {0.024207, -0.737825, 0, 1.0};
Point(96) = {0.022929, -0.737281, 0, 1.0};
Point(97) = {0.021094, -0.736796, 0, 1.0};
Point(98) = {0.018729, -0.736365, 0, 1.0};
Point(99) = {0.015862, -0.735994, 0, 1.0};
Point(100) = {0.012526, -0.735682, 0, 1.0};
Point(101) = {0.008755, -0.735426, 0, 1.0};
Point(102) = {0.004594, -0.735220, 0, 1.0};
Point(103) = {0.000097, -0.735066, 0, 1.0};
Point(104) = {-0.004684, -0.734966, 0, 1.0};
Point(105) = {-0.009697, -0.734921, 0, 1.0};
Point(106) = {-0.014882, -0.734929, 0, 1.0};
Point(107) = {-0.020183, -0.734998, 0, 1.0};
Point(108) = {-0.025552, -0.735127, 0, 1.0};
Point(109) = {-0.030926, -0.735301, 0, 1.0};
Point(110) = {-0.036229, -0.735535, 0, 1.0};
Point(111) = {-0.041436, -0.735866, 0, 1.0};
Point(112) = {-0.046565, -0.736268, 0, 1.0};
Point(113) = {-0.051589, -0.736655, 0, 1.0};
Point(114) = {-0.056428, -0.736940, 0, 1.0};
Point(115) = {-0.060968, -0.737056, 0, 1.0};
Point(116) = {-0.065067, -0.736980, 0, 1.0};
Point(117) = {-0.068594, -0.736718, 0, 1.0};
Point(118) = {-0.071411, -0.736314, 0, 1.0};
Point(119) = {-0.073405, -0.735882, 0, 1.0};
Point(120) = {-0.074565, -0.735566, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html