SetFactory("OpenCASCADE");

Point(1) = {0.148905, 0.717118, 0, 1.0};
Point(2) = {0.148254, 0.717301, 0, 1.0};
Point(3) = {0.147602, 0.717484, 0, 1.0};
Point(4) = {0.146952, 0.717667, 0, 1.0};
Point(5) = {0.146301, 0.717850, 0, 1.0};
Point(6) = {0.144998, 0.718212, 0, 1.0};
Point(7) = {0.134578, 0.721117, 0, 1.0};
Point(8) = {0.124159, 0.724042, 0, 1.0};
Point(9) = {0.113743, 0.726977, 0, 1.0};
Point(10) = {0.102020, 0.730244, 0, 1.0};
Point(11) = {0.091594, 0.733085, 0, 1.0};
Point(12) = {0.081156, 0.735837, 0, 1.0};
Point(13) = {0.070708, 0.738467, 0, 1.0};
Point(14) = {0.060243, 0.740942, 0, 1.0};
Point(15) = {0.049756, 0.743221, 0, 1.0};
Point(16) = {0.039245, 0.745258, 0, 1.0};
Point(17) = {0.030022, 0.746806, 0, 1.0};
Point(18) = {0.020775, 0.748098, 0, 1.0};
Point(19) = {0.014149, 0.748844, 0, 1.0};
Point(20) = {0.006176, 0.749521, 0, 1.0};
Point(21) = {-0.001826, 0.749926, 0, 1.0};
Point(22) = {-0.009862, 0.750000, 0, 1.0};
Point(23) = {-0.016592, 0.749746, 0, 1.0};
Point(24) = {-0.023360, 0.749124, 0, 1.0};
Point(25) = {-0.030180, 0.748026, 0, 1.0};
Point(26) = {-0.037065, 0.746285, 0, 1.0};
Point(27) = {-0.039845, 0.745340, 0, 1.0};
Point(28) = {-0.042649, 0.744193, 0, 1.0};
Point(29) = {-0.044059, 0.743518, 0, 1.0};
Point(30) = {-0.045481, 0.742747, 0, 1.0};
Point(31) = {-0.046920, 0.741822, 0, 1.0};
Point(32) = {-0.047647, 0.741269, 0, 1.0};
Point(33) = {-0.048385, 0.740618, 0, 1.0};
Point(34) = {-0.049143, 0.739797, 0, 1.0};
Point(35) = {-0.050000, 0.738019, 0, 1.0};
Point(36) = {-0.049457, 0.736812, 0, 1.0};
Point(37) = {-0.048825, 0.736438, 0, 1.0};
Point(38) = {-0.048180, 0.736199, 0, 1.0};
Point(39) = {-0.047529, 0.736026, 0, 1.0};
Point(40) = {-0.046214, 0.735777, 0, 1.0};
Point(41) = {-0.044892, 0.735592, 0, 1.0};
Point(42) = {-0.043568, 0.735439, 0, 1.0};
Point(43) = {-0.040913, 0.735176, 0, 1.0};
Point(44) = {-0.038258, 0.734935, 0, 1.0};
Point(45) = {-0.031617, 0.734346, 0, 1.0};
Point(46) = {-0.024976, 0.733738, 0, 1.0};
Point(47) = {-0.018340, 0.733109, 0, 1.0};
Point(48) = {-0.011704, 0.732471, 0, 1.0};
Point(49) = {-0.003741, 0.731702, 0, 1.0};
Point(50) = {0.004223, 0.730938, 0, 1.0};
Point(51) = {0.012187, 0.730177, 0, 1.0};
Point(52) = {0.018825, 0.729544, 0, 1.0};
Point(53) = {0.028115, 0.728656, 0, 1.0};
Point(54) = {0.037407, 0.727768, 0, 1.0};
Point(55) = {0.048025, 0.726753, 0, 1.0};
Point(56) = {0.058645, 0.725738, 0, 1.0};
Point(57) = {0.069264, 0.724723, 0, 1.0};
Point(58) = {0.079882, 0.723707, 0, 1.0};
Point(59) = {0.090502, 0.722694, 0, 1.0};
Point(60) = {0.101120, 0.721679, 0, 1.0};
Point(61) = {0.113066, 0.720536, 0, 1.0};
Point(62) = {0.123684, 0.719523, 0, 1.0};
Point(63) = {0.134305, 0.718512, 0, 1.0};
Point(64) = {0.144923, 0.717498, 0, 1.0};
Point(65) = {0.146251, 0.717371, 0, 1.0};
Point(66) = {0.146914, 0.717309, 0, 1.0};
Point(67) = {0.147577, 0.717246, 0, 1.0};
Point(68) = {0.148242, 0.717182, 0, 1.0};
Point(69) = {-0.148905, -0.717118, 0, 1.0};
Point(70) = {-0.148254, -0.717301, 0, 1.0};
Point(71) = {-0.147602, -0.717484, 0, 1.0};
Point(72) = {-0.146952, -0.717667, 0, 1.0};
Point(73) = {-0.146301, -0.717850, 0, 1.0};
Point(74) = {-0.144998, -0.718212, 0, 1.0};
Point(75) = {-0.134578, -0.721117, 0, 1.0};
Point(76) = {-0.124159, -0.724042, 0, 1.0};
Point(77) = {-0.113743, -0.726977, 0, 1.0};
Point(78) = {-0.102020, -0.730244, 0, 1.0};
Point(79) = {-0.091594, -0.733085, 0, 1.0};
Point(80) = {-0.081156, -0.735837, 0, 1.0};
Point(81) = {-0.070708, -0.738467, 0, 1.0};
Point(82) = {-0.060243, -0.740942, 0, 1.0};
Point(83) = {-0.049756, -0.743221, 0, 1.0};
Point(84) = {-0.039245, -0.745258, 0, 1.0};
Point(85) = {-0.030022, -0.746806, 0, 1.0};
Point(86) = {-0.020775, -0.748098, 0, 1.0};
Point(87) = {-0.014149, -0.748844, 0, 1.0};
Point(88) = {-0.006176, -0.749521, 0, 1.0};
Point(89) = {0.001826, -0.749926, 0, 1.0};
Point(90) = {0.009862, -0.750000, 0, 1.0};
Point(91) = {0.016592, -0.749746, 0, 1.0};
Point(92) = {0.023360, -0.749124, 0, 1.0};
Point(93) = {0.030180, -0.748026, 0, 1.0};
Point(94) = {0.037065, -0.746285, 0, 1.0};
Point(95) = {0.039845, -0.745340, 0, 1.0};
Point(96) = {0.042649, -0.744193, 0, 1.0};
Point(97) = {0.044059, -0.743518, 0, 1.0};
Point(98) = {0.045481, -0.742747, 0, 1.0};
Point(99) = {0.046920, -0.741822, 0, 1.0};
Point(100) = {0.047647, -0.741269, 0, 1.0};
Point(101) = {0.048385, -0.740618, 0, 1.0};
Point(102) = {0.049143, -0.739797, 0, 1.0};
Point(103) = {0.050000, -0.738019, 0, 1.0};
Point(104) = {0.049457, -0.736812, 0, 1.0};
Point(105) = {0.048825, -0.736438, 0, 1.0};
Point(106) = {0.048180, -0.736199, 0, 1.0};
Point(107) = {0.047529, -0.736026, 0, 1.0};
Point(108) = {0.046214, -0.735777, 0, 1.0};
Point(109) = {0.044892, -0.735592, 0, 1.0};
Point(110) = {0.043568, -0.735439, 0, 1.0};
Point(111) = {0.040913, -0.735176, 0, 1.0};
Point(112) = {0.038258, -0.734935, 0, 1.0};
Point(113) = {0.031617, -0.734346, 0, 1.0};
Point(114) = {0.024976, -0.733738, 0, 1.0};
Point(115) = {0.018340, -0.733109, 0, 1.0};
Point(116) = {0.011704, -0.732471, 0, 1.0};
Point(117) = {0.003741, -0.731702, 0, 1.0};
Point(118) = {-0.004223, -0.730938, 0, 1.0};
Point(119) = {-0.012187, -0.730177, 0, 1.0};
Point(120) = {-0.018825, -0.729544, 0, 1.0};
Point(121) = {-0.028115, -0.728656, 0, 1.0};
Point(122) = {-0.037407, -0.727768, 0, 1.0};
Point(123) = {-0.048025, -0.726753, 0, 1.0};
Point(124) = {-0.058645, -0.725738, 0, 1.0};
Point(125) = {-0.069264, -0.724723, 0, 1.0};
Point(126) = {-0.079882, -0.723707, 0, 1.0};
Point(127) = {-0.090502, -0.722694, 0, 1.0};
Point(128) = {-0.101120, -0.721679, 0, 1.0};
Point(129) = {-0.113066, -0.720536, 0, 1.0};
Point(130) = {-0.123684, -0.719523, 0, 1.0};
Point(131) = {-0.134305, -0.718512, 0, 1.0};
Point(132) = {-0.144923, -0.717498, 0, 1.0};
Point(133) = {-0.146251, -0.717371, 0, 1.0};
Point(134) = {-0.146914, -0.717309, 0, 1.0};
Point(135) = {-0.147577, -0.717246, 0, 1.0};
Point(136) = {-0.148242, -0.717182, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:50};
Spline(3) = {50:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:88};
Spline(6) = {88:118};
Spline(7) = {118:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html