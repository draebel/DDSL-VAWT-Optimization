SetFactory("OpenCASCADE");

Point(1) = {0.074452, 0.733559, 0, 1.0};
Point(2) = {0.074127, 0.733651, 0, 1.0};
Point(3) = {0.073801, 0.733742, 0, 1.0};
Point(4) = {0.073476, 0.733834, 0, 1.0};
Point(5) = {0.073151, 0.733925, 0, 1.0};
Point(6) = {0.072499, 0.734106, 0, 1.0};
Point(7) = {0.067289, 0.735559, 0, 1.0};
Point(8) = {0.062079, 0.737021, 0, 1.0};
Point(9) = {0.056871, 0.738488, 0, 1.0};
Point(10) = {0.051010, 0.740122, 0, 1.0};
Point(11) = {0.045797, 0.741542, 0, 1.0};
Point(12) = {0.040578, 0.742918, 0, 1.0};
Point(13) = {0.035354, 0.744233, 0, 1.0};
Point(14) = {0.030122, 0.745471, 0, 1.0};
Point(15) = {0.024878, 0.746610, 0, 1.0};
Point(16) = {0.019623, 0.747629, 0, 1.0};
Point(17) = {0.015011, 0.748403, 0, 1.0};
Point(18) = {0.010387, 0.749049, 0, 1.0};
Point(19) = {0.007074, 0.749422, 0, 1.0};
Point(20) = {0.003088, 0.749761, 0, 1.0};
Point(21) = {-0.000913, 0.749963, 0, 1.0};
Point(22) = {-0.004931, 0.750000, 0, 1.0};
Point(23) = {-0.008296, 0.749873, 0, 1.0};
Point(24) = {-0.011680, 0.749562, 0, 1.0};
Point(25) = {-0.015090, 0.749013, 0, 1.0};
Point(26) = {-0.018533, 0.748142, 0, 1.0};
Point(27) = {-0.019923, 0.747670, 0, 1.0};
Point(28) = {-0.021324, 0.747096, 0, 1.0};
Point(29) = {-0.022029, 0.746759, 0, 1.0};
Point(30) = {-0.022741, 0.746373, 0, 1.0};
Point(31) = {-0.023460, 0.745911, 0, 1.0};
Point(32) = {-0.023824, 0.745634, 0, 1.0};
Point(33) = {-0.024193, 0.745309, 0, 1.0};
Point(34) = {-0.024572, 0.744899, 0, 1.0};
Point(35) = {-0.025000, 0.744009, 0, 1.0};
Point(36) = {-0.024729, 0.743406, 0, 1.0};
Point(37) = {-0.024412, 0.743219, 0, 1.0};
Point(38) = {-0.024090, 0.743099, 0, 1.0};
Point(39) = {-0.023764, 0.743013, 0, 1.0};
Point(40) = {-0.023107, 0.742889, 0, 1.0};
Point(41) = {-0.022446, 0.742796, 0, 1.0};
Point(42) = {-0.021784, 0.742719, 0, 1.0};
Point(43) = {-0.020457, 0.742588, 0, 1.0};
Point(44) = {-0.019129, 0.742467, 0, 1.0};
Point(45) = {-0.015809, 0.742173, 0, 1.0};
Point(46) = {-0.012488, 0.741869, 0, 1.0};
Point(47) = {-0.009170, 0.741555, 0, 1.0};
Point(48) = {-0.005852, 0.741235, 0, 1.0};
Point(49) = {-0.001870, 0.740851, 0, 1.0};
Point(50) = {0.002111, 0.740469, 0, 1.0};
Point(51) = {0.006094, 0.740089, 0, 1.0};
Point(52) = {0.009413, 0.739772, 0, 1.0};
Point(53) = {0.014058, 0.739328, 0, 1.0};
Point(54) = {0.018704, 0.738884, 0, 1.0};
Point(55) = {0.024013, 0.738377, 0, 1.0};
Point(56) = {0.029323, 0.737869, 0, 1.0};
Point(57) = {0.034632, 0.737361, 0, 1.0};
Point(58) = {0.039941, 0.736854, 0, 1.0};
Point(59) = {0.045251, 0.736347, 0, 1.0};
Point(60) = {0.050560, 0.735839, 0, 1.0};
Point(61) = {0.056533, 0.735268, 0, 1.0};
Point(62) = {0.061842, 0.734761, 0, 1.0};
Point(63) = {0.067152, 0.734256, 0, 1.0};
Point(64) = {0.072461, 0.733749, 0, 1.0};
Point(65) = {0.073125, 0.733685, 0, 1.0};
Point(66) = {0.073457, 0.733655, 0, 1.0};
Point(67) = {0.073788, 0.733623, 0, 1.0};
Point(68) = {0.074121, 0.733591, 0, 1.0};
Point(69) = {-0.074452, -0.733559, 0, 1.0};
Point(70) = {-0.074127, -0.733651, 0, 1.0};
Point(71) = {-0.073801, -0.733742, 0, 1.0};
Point(72) = {-0.073476, -0.733834, 0, 1.0};
Point(73) = {-0.073151, -0.733925, 0, 1.0};
Point(74) = {-0.072499, -0.734106, 0, 1.0};
Point(75) = {-0.067289, -0.735559, 0, 1.0};
Point(76) = {-0.062079, -0.737021, 0, 1.0};
Point(77) = {-0.056871, -0.738488, 0, 1.0};
Point(78) = {-0.051010, -0.740122, 0, 1.0};
Point(79) = {-0.045797, -0.741542, 0, 1.0};
Point(80) = {-0.040578, -0.742918, 0, 1.0};
Point(81) = {-0.035354, -0.744233, 0, 1.0};
Point(82) = {-0.030122, -0.745471, 0, 1.0};
Point(83) = {-0.024878, -0.746610, 0, 1.0};
Point(84) = {-0.019623, -0.747629, 0, 1.0};
Point(85) = {-0.015011, -0.748403, 0, 1.0};
Point(86) = {-0.010387, -0.749049, 0, 1.0};
Point(87) = {-0.007074, -0.749422, 0, 1.0};
Point(88) = {-0.003088, -0.749761, 0, 1.0};
Point(89) = {0.000913, -0.749963, 0, 1.0};
Point(90) = {0.004931, -0.750000, 0, 1.0};
Point(91) = {0.008296, -0.749873, 0, 1.0};
Point(92) = {0.011680, -0.749562, 0, 1.0};
Point(93) = {0.015090, -0.749013, 0, 1.0};
Point(94) = {0.018533, -0.748142, 0, 1.0};
Point(95) = {0.019923, -0.747670, 0, 1.0};
Point(96) = {0.021324, -0.747096, 0, 1.0};
Point(97) = {0.022029, -0.746759, 0, 1.0};
Point(98) = {0.022741, -0.746373, 0, 1.0};
Point(99) = {0.023460, -0.745911, 0, 1.0};
Point(100) = {0.023824, -0.745634, 0, 1.0};
Point(101) = {0.024193, -0.745309, 0, 1.0};
Point(102) = {0.024572, -0.744899, 0, 1.0};
Point(103) = {0.025000, -0.744009, 0, 1.0};
Point(104) = {0.024729, -0.743406, 0, 1.0};
Point(105) = {0.024412, -0.743219, 0, 1.0};
Point(106) = {0.024090, -0.743099, 0, 1.0};
Point(107) = {0.023764, -0.743013, 0, 1.0};
Point(108) = {0.023107, -0.742889, 0, 1.0};
Point(109) = {0.022446, -0.742796, 0, 1.0};
Point(110) = {0.021784, -0.742719, 0, 1.0};
Point(111) = {0.020457, -0.742588, 0, 1.0};
Point(112) = {0.019129, -0.742467, 0, 1.0};
Point(113) = {0.015809, -0.742173, 0, 1.0};
Point(114) = {0.012488, -0.741869, 0, 1.0};
Point(115) = {0.009170, -0.741555, 0, 1.0};
Point(116) = {0.005852, -0.741235, 0, 1.0};
Point(117) = {0.001870, -0.740851, 0, 1.0};
Point(118) = {-0.002111, -0.740469, 0, 1.0};
Point(119) = {-0.006094, -0.740089, 0, 1.0};
Point(120) = {-0.009413, -0.739772, 0, 1.0};
Point(121) = {-0.014058, -0.739328, 0, 1.0};
Point(122) = {-0.018704, -0.738884, 0, 1.0};
Point(123) = {-0.024013, -0.738377, 0, 1.0};
Point(124) = {-0.029323, -0.737869, 0, 1.0};
Point(125) = {-0.034632, -0.737361, 0, 1.0};
Point(126) = {-0.039941, -0.736854, 0, 1.0};
Point(127) = {-0.045251, -0.736347, 0, 1.0};
Point(128) = {-0.050560, -0.735839, 0, 1.0};
Point(129) = {-0.056533, -0.735268, 0, 1.0};
Point(130) = {-0.061842, -0.734761, 0, 1.0};
Point(131) = {-0.067152, -0.734256, 0, 1.0};
Point(132) = {-0.072461, -0.733749, 0, 1.0};
Point(133) = {-0.073125, -0.733685, 0, 1.0};
Point(134) = {-0.073457, -0.733655, 0, 1.0};
Point(135) = {-0.073788, -0.733623, 0, 1.0};
Point(136) = {-0.074121, -0.733591, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:50};
Spline(3) = {50:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:88};
Spline(6) = {88:118};
Spline(7) = {118:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html