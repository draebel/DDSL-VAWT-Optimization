SetFactory("OpenCASCADE");

Point(1) = {0.074589, 0.725339, 0, 1.0};
Point(2) = {0.074102, 0.725476, 0, 1.0};
Point(3) = {0.073612, 0.725613, 0, 1.0};
Point(4) = {0.073124, 0.725750, 0, 1.0};
Point(5) = {0.072637, 0.725888, 0, 1.0};
Point(6) = {0.071659, 0.726159, 0, 1.0};
Point(7) = {0.063844, 0.728338, 0, 1.0};
Point(8) = {0.056030, 0.730532, 0, 1.0};
Point(9) = {0.048218, 0.732733, 0, 1.0};
Point(10) = {0.039426, 0.735183, 0, 1.0};
Point(11) = {0.031606, 0.737314, 0, 1.0};
Point(12) = {0.023778, 0.739377, 0, 1.0};
Point(13) = {0.015941, 0.741350, 0, 1.0};
Point(14) = {0.008093, 0.743207, 0, 1.0};
Point(15) = {0.000228, 0.744915, 0, 1.0};
Point(16) = {-0.007655, 0.746444, 0, 1.0};
Point(17) = {-0.014572, 0.747605, 0, 1.0};
Point(18) = {-0.021508, 0.748573, 0, 1.0};
Point(19) = {-0.026478, 0.749133, 0, 1.0};
Point(20) = {-0.032458, 0.749641, 0, 1.0};
Point(21) = {-0.038459, 0.749944, 0, 1.0};
Point(22) = {-0.044486, 0.750000, 0, 1.0};
Point(23) = {-0.049533, 0.749809, 0, 1.0};
Point(24) = {-0.054609, 0.749343, 0, 1.0};
Point(25) = {-0.059724, 0.748520, 0, 1.0};
Point(26) = {-0.064888, 0.747213, 0, 1.0};
Point(27) = {-0.066973, 0.746505, 0, 1.0};
Point(28) = {-0.069076, 0.745644, 0, 1.0};
Point(29) = {-0.070133, 0.745139, 0, 1.0};
Point(30) = {-0.071200, 0.744560, 0, 1.0};
Point(31) = {-0.072279, 0.743866, 0, 1.0};
Point(32) = {-0.072825, 0.743452, 0, 1.0};
Point(33) = {-0.073378, 0.742964, 0, 1.0};
Point(34) = {-0.073947, 0.742348, 0, 1.0};
Point(35) = {-0.074589, 0.741014, 0, 1.0};
Point(36) = {-0.074182, 0.740109, 0, 1.0};
Point(37) = {-0.073708, 0.739828, 0, 1.0};
Point(38) = {-0.073225, 0.739649, 0, 1.0};
Point(39) = {-0.072736, 0.739519, 0, 1.0};
Point(40) = {-0.071750, 0.739333, 0, 1.0};
Point(41) = {-0.070758, 0.739194, 0, 1.0};
Point(42) = {-0.069766, 0.739079, 0, 1.0};
Point(43) = {-0.067774, 0.738882, 0, 1.0};
Point(44) = {-0.065783, 0.738701, 0, 1.0};
Point(45) = {-0.060802, 0.738259, 0, 1.0};
Point(46) = {-0.055822, 0.737804, 0, 1.0};
Point(47) = {-0.050844, 0.737332, 0, 1.0};
Point(48) = {-0.045867, 0.736853, 0, 1.0};
Point(49) = {-0.039895, 0.736277, 0, 1.0};
Point(50) = {-0.033922, 0.735703, 0, 1.0};
Point(51) = {-0.027949, 0.735133, 0, 1.0};
Point(52) = {-0.022970, 0.734658, 0, 1.0};
Point(53) = {-0.016003, 0.733992, 0, 1.0};
Point(54) = {-0.009034, 0.733326, 0, 1.0};
Point(55) = {-0.001070, 0.732565, 0, 1.0};
Point(56) = {0.006895, 0.731803, 0, 1.0};
Point(57) = {0.014858, 0.731042, 0, 1.0};
Point(58) = {0.022822, 0.730281, 0, 1.0};
Point(59) = {0.030787, 0.729521, 0, 1.0};
Point(60) = {0.038751, 0.728759, 0, 1.0};
Point(61) = {0.047710, 0.727902, 0, 1.0};
Point(62) = {0.055674, 0.727142, 0, 1.0};
Point(63) = {0.063639, 0.726384, 0, 1.0};
Point(64) = {0.071603, 0.725624, 0, 1.0};
Point(65) = {0.072599, 0.725528, 0, 1.0};
Point(66) = {0.073096, 0.725482, 0, 1.0};
Point(67) = {0.073593, 0.725434, 0, 1.0};
Point(68) = {0.074092, 0.725386, 0, 1.0};
Point(69) = {-0.074589, -0.725339, 0, 1.0};
Point(70) = {-0.074102, -0.725476, 0, 1.0};
Point(71) = {-0.073612, -0.725613, 0, 1.0};
Point(72) = {-0.073124, -0.725750, 0, 1.0};
Point(73) = {-0.072637, -0.725888, 0, 1.0};
Point(74) = {-0.071659, -0.726159, 0, 1.0};
Point(75) = {-0.063844, -0.728338, 0, 1.0};
Point(76) = {-0.056030, -0.730532, 0, 1.0};
Point(77) = {-0.048218, -0.732733, 0, 1.0};
Point(78) = {-0.039426, -0.735183, 0, 1.0};
Point(79) = {-0.031606, -0.737314, 0, 1.0};
Point(80) = {-0.023778, -0.739377, 0, 1.0};
Point(81) = {-0.015941, -0.741350, 0, 1.0};
Point(82) = {-0.008093, -0.743207, 0, 1.0};
Point(83) = {-0.000228, -0.744915, 0, 1.0};
Point(84) = {0.007655, -0.746444, 0, 1.0};
Point(85) = {0.014572, -0.747605, 0, 1.0};
Point(86) = {0.021508, -0.748573, 0, 1.0};
Point(87) = {0.026478, -0.749133, 0, 1.0};
Point(88) = {0.032458, -0.749641, 0, 1.0};
Point(89) = {0.038459, -0.749944, 0, 1.0};
Point(90) = {0.044486, -0.750000, 0, 1.0};
Point(91) = {0.049533, -0.749809, 0, 1.0};
Point(92) = {0.054609, -0.749343, 0, 1.0};
Point(93) = {0.059724, -0.748520, 0, 1.0};
Point(94) = {0.064888, -0.747213, 0, 1.0};
Point(95) = {0.066973, -0.746505, 0, 1.0};
Point(96) = {0.069076, -0.745644, 0, 1.0};
Point(97) = {0.070133, -0.745139, 0, 1.0};
Point(98) = {0.071200, -0.744560, 0, 1.0};
Point(99) = {0.072279, -0.743866, 0, 1.0};
Point(100) = {0.072825, -0.743452, 0, 1.0};
Point(101) = {0.073378, -0.742964, 0, 1.0};
Point(102) = {0.073947, -0.742348, 0, 1.0};
Point(103) = {0.074589, -0.741014, 0, 1.0};
Point(104) = {0.074182, -0.740109, 0, 1.0};
Point(105) = {0.073708, -0.739828, 0, 1.0};
Point(106) = {0.073225, -0.739649, 0, 1.0};
Point(107) = {0.072736, -0.739519, 0, 1.0};
Point(108) = {0.071750, -0.739333, 0, 1.0};
Point(109) = {0.070758, -0.739194, 0, 1.0};
Point(110) = {0.069766, -0.739079, 0, 1.0};
Point(111) = {0.067774, -0.738882, 0, 1.0};
Point(112) = {0.065783, -0.738701, 0, 1.0};
Point(113) = {0.060802, -0.738259, 0, 1.0};
Point(114) = {0.055822, -0.737804, 0, 1.0};
Point(115) = {0.050844, -0.737332, 0, 1.0};
Point(116) = {0.045867, -0.736853, 0, 1.0};
Point(117) = {0.039895, -0.736277, 0, 1.0};
Point(118) = {0.033922, -0.735703, 0, 1.0};
Point(119) = {0.027949, -0.735133, 0, 1.0};
Point(120) = {0.022970, -0.734658, 0, 1.0};
Point(121) = {0.016003, -0.733992, 0, 1.0};
Point(122) = {0.009034, -0.733326, 0, 1.0};
Point(123) = {0.001070, -0.732565, 0, 1.0};
Point(124) = {-0.006895, -0.731803, 0, 1.0};
Point(125) = {-0.014858, -0.731042, 0, 1.0};
Point(126) = {-0.022822, -0.730281, 0, 1.0};
Point(127) = {-0.030787, -0.729521, 0, 1.0};
Point(128) = {-0.038751, -0.728759, 0, 1.0};
Point(129) = {-0.047710, -0.727902, 0, 1.0};
Point(130) = {-0.055674, -0.727142, 0, 1.0};
Point(131) = {-0.063639, -0.726384, 0, 1.0};
Point(132) = {-0.071603, -0.725624, 0, 1.0};
Point(133) = {-0.072599, -0.725528, 0, 1.0};
Point(134) = {-0.073096, -0.725482, 0, 1.0};
Point(135) = {-0.073593, -0.725434, 0, 1.0};
Point(136) = {-0.074092, -0.725386, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:50};
Spline(3) = {50:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:88};
Spline(6) = {88:118};
Spline(7) = {118:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html