SetFactory("OpenCASCADE");

Point(1) = {0.110575, 0.722501, 0, 1.0};
Point(2) = {0.110042, 0.722621, 0, 1.0};
Point(3) = {0.108495, 0.723017, 0, 1.0};
Point(4) = {0.106046, 0.723707, 0, 1.0};
Point(5) = {0.102772, 0.724664, 0, 1.0};
Point(6) = {0.098718, 0.725871, 0, 1.0};
Point(7) = {0.093961, 0.727335, 0, 1.0};
Point(8) = {0.088602, 0.729042, 0, 1.0};
Point(9) = {0.082751, 0.730951, 0, 1.0};
Point(10) = {0.076513, 0.733004, 0, 1.0};
Point(11) = {0.069987, 0.735118, 0, 1.0};
Point(12) = {0.063230, 0.737199, 0, 1.0};
Point(13) = {0.056278, 0.739185, 0, 1.0};
Point(14) = {0.049170, 0.741037, 0, 1.0};
Point(15) = {0.041951, 0.742727, 0, 1.0};
Point(16) = {0.034667, 0.744235, 0, 1.0};
Point(17) = {0.027366, 0.745564, 0, 1.0};
Point(18) = {0.020119, 0.746721, 0, 1.0};
Point(19) = {0.013008, 0.747711, 0, 1.0};
Point(20) = {0.006111, 0.748529, 0, 1.0};
Point(21) = {-0.000495, 0.749169, 0, 1.0};
Point(22) = {-0.006739, 0.749629, 0, 1.0};
Point(23) = {-0.012555, 0.749908, 0, 1.0};
Point(24) = {-0.017879, 0.750000, 0, 1.0};
Point(25) = {-0.022661, 0.749915, 0, 1.0};
Point(26) = {-0.026849, 0.749655, 0, 1.0};
Point(27) = {-0.030401, 0.749231, 0, 1.0};
Point(28) = {-0.033285, 0.748663, 0, 1.0};
Point(29) = {-0.035467, 0.747975, 0, 1.0};
Point(30) = {-0.036911, 0.747209, 0, 1.0};
Point(31) = {-0.037500, 0.746453, 0, 1.0};
Point(32) = {-0.037180, 0.745550, 0, 1.0};
Point(33) = {-0.036050, 0.744368, 0, 1.0};
Point(34) = {-0.034196, 0.743027, 0, 1.0};
Point(35) = {-0.031639, 0.741579, 0, 1.0};
Point(36) = {-0.028401, 0.740057, 0, 1.0};
Point(37) = {-0.024509, 0.738490, 0, 1.0};
Point(38) = {-0.019998, 0.736901, 0, 1.0};
Point(39) = {-0.014916, 0.735310, 0, 1.0};
Point(40) = {-0.009309, 0.733741, 0, 1.0};
Point(41) = {-0.003239, 0.732209, 0, 1.0};
Point(42) = {0.003233, 0.730734, 0, 1.0};
Point(43) = {0.010036, 0.729335, 0, 1.0};
Point(44) = {0.017096, 0.728034, 0, 1.0};
Point(45) = {0.024339, 0.726847, 0, 1.0};
Point(46) = {0.031686, 0.725806, 0, 1.0};
Point(47) = {0.039073, 0.724941, 0, 1.0};
Point(48) = {0.046457, 0.724269, 0, 1.0};
Point(49) = {0.053787, 0.723785, 0, 1.0};
Point(50) = {0.061011, 0.723478, 0, 1.0};
Point(51) = {0.068079, 0.723323, 0, 1.0};
Point(52) = {0.074939, 0.723272, 0, 1.0};
Point(53) = {0.081506, 0.723254, 0, 1.0};
Point(54) = {0.087661, 0.723220, 0, 1.0};
Point(55) = {0.093284, 0.723151, 0, 1.0};
Point(56) = {0.098260, 0.723040, 0, 1.0};
Point(57) = {0.102488, 0.722908, 0, 1.0};
Point(58) = {0.105897, 0.722783, 0, 1.0};
Point(59) = {0.108438, 0.722667, 0, 1.0};
Point(60) = {0.110031, 0.722555, 0, 1.0};
Point(61) = {-0.110575, -0.722501, 0, 1.0};
Point(62) = {-0.110042, -0.722621, 0, 1.0};
Point(63) = {-0.108495, -0.723017, 0, 1.0};
Point(64) = {-0.106046, -0.723707, 0, 1.0};
Point(65) = {-0.102772, -0.724664, 0, 1.0};
Point(66) = {-0.098718, -0.725871, 0, 1.0};
Point(67) = {-0.093961, -0.727335, 0, 1.0};
Point(68) = {-0.088602, -0.729042, 0, 1.0};
Point(69) = {-0.082751, -0.730951, 0, 1.0};
Point(70) = {-0.076513, -0.733004, 0, 1.0};
Point(71) = {-0.069987, -0.735118, 0, 1.0};
Point(72) = {-0.063230, -0.737199, 0, 1.0};
Point(73) = {-0.056278, -0.739185, 0, 1.0};
Point(74) = {-0.049170, -0.741037, 0, 1.0};
Point(75) = {-0.041951, -0.742727, 0, 1.0};
Point(76) = {-0.034667, -0.744235, 0, 1.0};
Point(77) = {-0.027366, -0.745564, 0, 1.0};
Point(78) = {-0.020119, -0.746721, 0, 1.0};
Point(79) = {-0.013008, -0.747711, 0, 1.0};
Point(80) = {-0.006111, -0.748529, 0, 1.0};
Point(81) = {0.000495, -0.749169, 0, 1.0};
Point(82) = {0.006739, -0.749629, 0, 1.0};
Point(83) = {0.012555, -0.749908, 0, 1.0};
Point(84) = {0.017879, -0.750000, 0, 1.0};
Point(85) = {0.022661, -0.749915, 0, 1.0};
Point(86) = {0.026849, -0.749655, 0, 1.0};
Point(87) = {0.030401, -0.749231, 0, 1.0};
Point(88) = {0.033285, -0.748663, 0, 1.0};
Point(89) = {0.035467, -0.747975, 0, 1.0};
Point(90) = {0.036911, -0.747209, 0, 1.0};
Point(91) = {0.037500, -0.746453, 0, 1.0};
Point(92) = {0.037180, -0.745550, 0, 1.0};
Point(93) = {0.036050, -0.744368, 0, 1.0};
Point(94) = {0.034196, -0.743027, 0, 1.0};
Point(95) = {0.031639, -0.741579, 0, 1.0};
Point(96) = {0.028401, -0.740057, 0, 1.0};
Point(97) = {0.024509, -0.738490, 0, 1.0};
Point(98) = {0.019998, -0.736901, 0, 1.0};
Point(99) = {0.014916, -0.735310, 0, 1.0};
Point(100) = {0.009309, -0.733741, 0, 1.0};
Point(101) = {0.003239, -0.732209, 0, 1.0};
Point(102) = {-0.003233, -0.730734, 0, 1.0};
Point(103) = {-0.010036, -0.729335, 0, 1.0};
Point(104) = {-0.017096, -0.728034, 0, 1.0};
Point(105) = {-0.024339, -0.726847, 0, 1.0};
Point(106) = {-0.031686, -0.725806, 0, 1.0};
Point(107) = {-0.039073, -0.724941, 0, 1.0};
Point(108) = {-0.046457, -0.724269, 0, 1.0};
Point(109) = {-0.053787, -0.723785, 0, 1.0};
Point(110) = {-0.061011, -0.723478, 0, 1.0};
Point(111) = {-0.068079, -0.723323, 0, 1.0};
Point(112) = {-0.074939, -0.723272, 0, 1.0};
Point(113) = {-0.081506, -0.723254, 0, 1.0};
Point(114) = {-0.087661, -0.723220, 0, 1.0};
Point(115) = {-0.093284, -0.723151, 0, 1.0};
Point(116) = {-0.098260, -0.723040, 0, 1.0};
Point(117) = {-0.102488, -0.722908, 0, 1.0};
Point(118) = {-0.105897, -0.722783, 0, 1.0};
Point(119) = {-0.108438, -0.722667, 0, 1.0};
Point(120) = {-0.110031, -0.722555, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html