SetFactory("OpenCASCADE");

Point(1) = {0.073717, 0.731667, 0, 1.0};
Point(2) = {0.073361, 0.731747, 0, 1.0};
Point(3) = {0.072330, 0.732011, 0, 1.0};
Point(4) = {0.070698, 0.732472, 0, 1.0};
Point(5) = {0.068514, 0.733109, 0, 1.0};
Point(6) = {0.065812, 0.733914, 0, 1.0};
Point(7) = {0.062640, 0.734890, 0, 1.0};
Point(8) = {0.059068, 0.736028, 0, 1.0};
Point(9) = {0.055167, 0.737300, 0, 1.0};
Point(10) = {0.051009, 0.738669, 0, 1.0};
Point(11) = {0.046658, 0.740079, 0, 1.0};
Point(12) = {0.042154, 0.741466, 0, 1.0};
Point(13) = {0.037519, 0.742790, 0, 1.0};
Point(14) = {0.032780, 0.744025, 0, 1.0};
Point(15) = {0.027967, 0.745152, 0, 1.0};
Point(16) = {0.023111, 0.746157, 0, 1.0};
Point(17) = {0.018244, 0.747042, 0, 1.0};
Point(18) = {0.013412, 0.747814, 0, 1.0};
Point(19) = {0.008672, 0.748474, 0, 1.0};
Point(20) = {0.004074, 0.749020, 0, 1.0};
Point(21) = {-0.000330, 0.749446, 0, 1.0};
Point(22) = {-0.004493, 0.749753, 0, 1.0};
Point(23) = {-0.008370, 0.749938, 0, 1.0};
Point(24) = {-0.011920, 0.750000, 0, 1.0};
Point(25) = {-0.015108, 0.749943, 0, 1.0};
Point(26) = {-0.017899, 0.749770, 0, 1.0};
Point(27) = {-0.020268, 0.749487, 0, 1.0};
Point(28) = {-0.022190, 0.749109, 0, 1.0};
Point(29) = {-0.023645, 0.748650, 0, 1.0};
Point(30) = {-0.024608, 0.748139, 0, 1.0};
Point(31) = {-0.025000, 0.747635, 0, 1.0};
Point(32) = {-0.024786, 0.747034, 0, 1.0};
Point(33) = {-0.024034, 0.746245, 0, 1.0};
Point(34) = {-0.022797, 0.745351, 0, 1.0};
Point(35) = {-0.021093, 0.744386, 0, 1.0};
Point(36) = {-0.018934, 0.743371, 0, 1.0};
Point(37) = {-0.016340, 0.742326, 0, 1.0};
Point(38) = {-0.013332, 0.741268, 0, 1.0};
Point(39) = {-0.009944, 0.740207, 0, 1.0};
Point(40) = {-0.006206, 0.739161, 0, 1.0};
Point(41) = {-0.002159, 0.738139, 0, 1.0};
Point(42) = {0.002155, 0.737156, 0, 1.0};
Point(43) = {0.006690, 0.736224, 0, 1.0};
Point(44) = {0.011397, 0.735356, 0, 1.0};
Point(45) = {0.016226, 0.734565, 0, 1.0};
Point(46) = {0.021124, 0.733871, 0, 1.0};
Point(47) = {0.026049, 0.733294, 0, 1.0};
Point(48) = {0.030972, 0.732846, 0, 1.0};
Point(49) = {0.035858, 0.732524, 0, 1.0};
Point(50) = {0.040674, 0.732319, 0, 1.0};
Point(51) = {0.045386, 0.732215, 0, 1.0};
Point(52) = {0.049959, 0.732181, 0, 1.0};
Point(53) = {0.054337, 0.732169, 0, 1.0};
Point(54) = {0.058440, 0.732147, 0, 1.0};
Point(55) = {0.062189, 0.732100, 0, 1.0};
Point(56) = {0.065507, 0.732027, 0, 1.0};
Point(57) = {0.068325, 0.731939, 0, 1.0};
Point(58) = {0.070598, 0.731856, 0, 1.0};
Point(59) = {0.072292, 0.731778, 0, 1.0};
Point(60) = {0.073354, 0.731704, 0, 1.0};
Point(61) = {-0.073717, -0.731667, 0, 1.0};
Point(62) = {-0.073361, -0.731747, 0, 1.0};
Point(63) = {-0.072330, -0.732011, 0, 1.0};
Point(64) = {-0.070698, -0.732472, 0, 1.0};
Point(65) = {-0.068514, -0.733109, 0, 1.0};
Point(66) = {-0.065812, -0.733914, 0, 1.0};
Point(67) = {-0.062640, -0.734890, 0, 1.0};
Point(68) = {-0.059068, -0.736028, 0, 1.0};
Point(69) = {-0.055167, -0.737300, 0, 1.0};
Point(70) = {-0.051009, -0.738669, 0, 1.0};
Point(71) = {-0.046658, -0.740079, 0, 1.0};
Point(72) = {-0.042154, -0.741466, 0, 1.0};
Point(73) = {-0.037519, -0.742790, 0, 1.0};
Point(74) = {-0.032780, -0.744025, 0, 1.0};
Point(75) = {-0.027967, -0.745152, 0, 1.0};
Point(76) = {-0.023111, -0.746157, 0, 1.0};
Point(77) = {-0.018244, -0.747042, 0, 1.0};
Point(78) = {-0.013412, -0.747814, 0, 1.0};
Point(79) = {-0.008672, -0.748474, 0, 1.0};
Point(80) = {-0.004074, -0.749020, 0, 1.0};
Point(81) = {0.000330, -0.749446, 0, 1.0};
Point(82) = {0.004493, -0.749753, 0, 1.0};
Point(83) = {0.008370, -0.749938, 0, 1.0};
Point(84) = {0.011920, -0.750000, 0, 1.0};
Point(85) = {0.015108, -0.749943, 0, 1.0};
Point(86) = {0.017899, -0.749770, 0, 1.0};
Point(87) = {0.020268, -0.749487, 0, 1.0};
Point(88) = {0.022190, -0.749109, 0, 1.0};
Point(89) = {0.023645, -0.748650, 0, 1.0};
Point(90) = {0.024608, -0.748139, 0, 1.0};
Point(91) = {0.025000, -0.747635, 0, 1.0};
Point(92) = {0.024786, -0.747034, 0, 1.0};
Point(93) = {0.024034, -0.746245, 0, 1.0};
Point(94) = {0.022797, -0.745351, 0, 1.0};
Point(95) = {0.021093, -0.744386, 0, 1.0};
Point(96) = {0.018934, -0.743371, 0, 1.0};
Point(97) = {0.016340, -0.742326, 0, 1.0};
Point(98) = {0.013332, -0.741268, 0, 1.0};
Point(99) = {0.009944, -0.740207, 0, 1.0};
Point(100) = {0.006206, -0.739161, 0, 1.0};
Point(101) = {0.002159, -0.738139, 0, 1.0};
Point(102) = {-0.002155, -0.737156, 0, 1.0};
Point(103) = {-0.006690, -0.736224, 0, 1.0};
Point(104) = {-0.011397, -0.735356, 0, 1.0};
Point(105) = {-0.016226, -0.734565, 0, 1.0};
Point(106) = {-0.021124, -0.733871, 0, 1.0};
Point(107) = {-0.026049, -0.733294, 0, 1.0};
Point(108) = {-0.030972, -0.732846, 0, 1.0};
Point(109) = {-0.035858, -0.732524, 0, 1.0};
Point(110) = {-0.040674, -0.732319, 0, 1.0};
Point(111) = {-0.045386, -0.732215, 0, 1.0};
Point(112) = {-0.049959, -0.732181, 0, 1.0};
Point(113) = {-0.054337, -0.732169, 0, 1.0};
Point(114) = {-0.058440, -0.732147, 0, 1.0};
Point(115) = {-0.062189, -0.732100, 0, 1.0};
Point(116) = {-0.065507, -0.732027, 0, 1.0};
Point(117) = {-0.068325, -0.731939, 0, 1.0};
Point(118) = {-0.070598, -0.731856, 0, 1.0};
Point(119) = {-0.072292, -0.731778, 0, 1.0};
Point(120) = {-0.073354, -0.731704, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html