SetFactory("OpenCASCADE");

Point(1) = {0.112442, 0.736759, 0, 1.0};
Point(2) = {0.111933, 0.736849, 0, 1.0};
Point(3) = {0.110434, 0.737156, 0, 1.0};
Point(4) = {0.108008, 0.737680, 0, 1.0};
Point(5) = {0.104714, 0.738348, 0, 1.0};
Point(6) = {0.100606, 0.739113, 0, 1.0};
Point(7) = {0.095753, 0.739987, 0, 1.0};
Point(8) = {0.090246, 0.740943, 0, 1.0};
Point(9) = {0.084180, 0.741963, 0, 1.0};
Point(10) = {0.077658, 0.743012, 0, 1.0};
Point(11) = {0.070765, 0.744062, 0, 1.0};
Point(12) = {0.063525, 0.745095, 0, 1.0};
Point(13) = {0.055975, 0.746095, 0, 1.0};
Point(14) = {0.048208, 0.747029, 0, 1.0};
Point(15) = {0.040314, 0.747878, 0, 1.0};
Point(16) = {0.032383, 0.748617, 0, 1.0};
Point(17) = {0.024513, 0.749214, 0, 1.0};
Point(18) = {0.016791, 0.749656, 0, 1.0};
Point(19) = {0.009309, 0.749921, 0, 1.0};
Point(20) = {0.002151, 0.750000, 0, 1.0};
Point(21) = {-0.004601, 0.749883, 0, 1.0};
Point(22) = {-0.010871, 0.749564, 0, 1.0};
Point(23) = {-0.016596, 0.749048, 0, 1.0};
Point(24) = {-0.021707, 0.748438, 0, 1.0};
Point(25) = {-0.026162, 0.747633, 0, 1.0};
Point(26) = {-0.029916, 0.746687, 0, 1.0};
Point(27) = {-0.032942, 0.745610, 0, 1.0};
Point(28) = {-0.035218, 0.744426, 0, 1.0};
Point(29) = {-0.036732, 0.743172, 0, 1.0};
Point(30) = {-0.037481, 0.741587, 0, 1.0};
Point(31) = {-0.036818, 0.740477, 0, 1.0};
Point(32) = {-0.035374, 0.739566, 0, 1.0};
Point(33) = {-0.033164, 0.738719, 0, 1.0};
Point(34) = {-0.030197, 0.737948, 0, 1.0};
Point(35) = {-0.026496, 0.737267, 0, 1.0};
Point(36) = {-0.022086, 0.736673, 0, 1.0};
Point(37) = {-0.017010, 0.736169, 0, 1.0};
Point(38) = {-0.011317, 0.735746, 0, 1.0};
Point(39) = {-0.005068, 0.735403, 0, 1.0};
Point(40) = {0.001672, 0.735132, 0, 1.0};
Point(41) = {0.008826, 0.734929, 0, 1.0};
Point(42) = {0.016312, 0.734790, 0, 1.0};
Point(43) = {0.024046, 0.734706, 0, 1.0};
Point(44) = {0.031934, 0.734671, 0, 1.0};
Point(45) = {0.039889, 0.734686, 0, 1.0};
Point(46) = {0.047812, 0.734743, 0, 1.0};
Point(47) = {0.055613, 0.734846, 0, 1.0};
Point(48) = {0.063200, 0.734993, 0, 1.0};
Point(49) = {0.070480, 0.735212, 0, 1.0};
Point(50) = {0.077417, 0.735523, 0, 1.0};
Point(51) = {0.083984, 0.735877, 0, 1.0};
Point(52) = {0.090094, 0.736198, 0, 1.0};
Point(53) = {0.095640, 0.736456, 0, 1.0};
Point(54) = {0.100526, 0.736641, 0, 1.0};
Point(55) = {0.104663, 0.736753, 0, 1.0};
Point(56) = {0.107980, 0.736809, 0, 1.0};
Point(57) = {0.110423, 0.736815, 0, 1.0};
Point(58) = {0.111931, 0.736783, 0, 1.0};
Point(59) = {-0.112442, -0.736759, 0, 1.0};
Point(60) = {-0.111933, -0.736849, 0, 1.0};
Point(61) = {-0.110434, -0.737156, 0, 1.0};
Point(62) = {-0.108008, -0.737680, 0, 1.0};
Point(63) = {-0.104714, -0.738348, 0, 1.0};
Point(64) = {-0.100606, -0.739113, 0, 1.0};
Point(65) = {-0.095753, -0.739987, 0, 1.0};
Point(66) = {-0.090246, -0.740943, 0, 1.0};
Point(67) = {-0.084180, -0.741963, 0, 1.0};
Point(68) = {-0.077658, -0.743012, 0, 1.0};
Point(69) = {-0.070765, -0.744062, 0, 1.0};
Point(70) = {-0.063525, -0.745095, 0, 1.0};
Point(71) = {-0.055975, -0.746095, 0, 1.0};
Point(72) = {-0.048208, -0.747029, 0, 1.0};
Point(73) = {-0.040314, -0.747878, 0, 1.0};
Point(74) = {-0.032383, -0.748617, 0, 1.0};
Point(75) = {-0.024513, -0.749214, 0, 1.0};
Point(76) = {-0.016791, -0.749656, 0, 1.0};
Point(77) = {-0.009309, -0.749921, 0, 1.0};
Point(78) = {-0.002151, -0.750000, 0, 1.0};
Point(79) = {0.004601, -0.749883, 0, 1.0};
Point(80) = {0.010871, -0.749564, 0, 1.0};
Point(81) = {0.016596, -0.749048, 0, 1.0};
Point(82) = {0.021707, -0.748438, 0, 1.0};
Point(83) = {0.026162, -0.747633, 0, 1.0};
Point(84) = {0.029916, -0.746687, 0, 1.0};
Point(85) = {0.032942, -0.745610, 0, 1.0};
Point(86) = {0.035218, -0.744426, 0, 1.0};
Point(87) = {0.036732, -0.743172, 0, 1.0};
Point(88) = {0.037481, -0.741587, 0, 1.0};
Point(89) = {0.036818, -0.740477, 0, 1.0};
Point(90) = {0.035374, -0.739566, 0, 1.0};
Point(91) = {0.033164, -0.738719, 0, 1.0};
Point(92) = {0.030197, -0.737948, 0, 1.0};
Point(93) = {0.026496, -0.737267, 0, 1.0};
Point(94) = {0.022086, -0.736673, 0, 1.0};
Point(95) = {0.017010, -0.736169, 0, 1.0};
Point(96) = {0.011317, -0.735746, 0, 1.0};
Point(97) = {0.005068, -0.735403, 0, 1.0};
Point(98) = {-0.001672, -0.735132, 0, 1.0};
Point(99) = {-0.008826, -0.734929, 0, 1.0};
Point(100) = {-0.016312, -0.734790, 0, 1.0};
Point(101) = {-0.024046, -0.734706, 0, 1.0};
Point(102) = {-0.031934, -0.734671, 0, 1.0};
Point(103) = {-0.039889, -0.734686, 0, 1.0};
Point(104) = {-0.047812, -0.734743, 0, 1.0};
Point(105) = {-0.055613, -0.734846, 0, 1.0};
Point(106) = {-0.063200, -0.734993, 0, 1.0};
Point(107) = {-0.070480, -0.735212, 0, 1.0};
Point(108) = {-0.077417, -0.735523, 0, 1.0};
Point(109) = {-0.083984, -0.735877, 0, 1.0};
Point(110) = {-0.090094, -0.736198, 0, 1.0};
Point(111) = {-0.095640, -0.736456, 0, 1.0};
Point(112) = {-0.100526, -0.736641, 0, 1.0};
Point(113) = {-0.104663, -0.736753, 0, 1.0};
Point(114) = {-0.107980, -0.736809, 0, 1.0};
Point(115) = {-0.110423, -0.736815, 0, 1.0};
Point(116) = {-0.111931, -0.736783, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:58};
Spline(4) = {58,1};

// Lines: second blade (splines 5-8)
Spline(5) = {59:78};
Spline(6) = {78:99};
Spline(7) = {99:116};
Spline(8) = {116,59};

// Outer domain (points 20001-4 and lines)
Point(117) = {-13.50000000, -15.00000000, 0, 1.0};
Point(118) = {-13.50000000, 15.00000000, 0, 1.0};
Point(119) = {13.50000000, 15.00000000, 0, 1.0};
Point(120) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {117, 118};
Line(12) = {118, 119};
Line(13) = {119, 120};
Line(14) = {117, 120};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html