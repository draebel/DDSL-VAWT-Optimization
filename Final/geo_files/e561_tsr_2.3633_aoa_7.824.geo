SetFactory("OpenCASCADE");

Point(1) = {0.074069, 0.727372, 0, 1.0};
Point(2) = {0.073736, 0.727552, 0, 1.0};
Point(3) = {0.072829, 0.728084, 0, 1.0};
Point(4) = {0.071474, 0.728888, 0, 1.0};
Point(5) = {0.069688, 0.729834, 0, 1.0};
Point(6) = {0.067413, 0.730885, 0, 1.0};
Point(7) = {0.064657, 0.732062, 0, 1.0};
Point(8) = {0.061469, 0.733366, 0, 1.0};
Point(9) = {0.057897, 0.734779, 0, 1.0};
Point(10) = {0.053994, 0.736282, 0, 1.0};
Point(11) = {0.049815, 0.737847, 0, 1.0};
Point(12) = {0.045417, 0.739446, 0, 1.0};
Point(13) = {0.040855, 0.741044, 0, 1.0};
Point(14) = {0.036183, 0.742609, 0, 1.0};
Point(15) = {0.031453, 0.744105, 0, 1.0};
Point(16) = {0.026715, 0.745498, 0, 1.0};
Point(17) = {0.022016, 0.746755, 0, 1.0};
Point(18) = {0.017398, 0.747845, 0, 1.0};
Point(19) = {0.012901, 0.748742, 0, 1.0};
Point(20) = {0.008560, 0.749413, 0, 1.0};
Point(21) = {0.004393, 0.749833, 0, 1.0};
Point(22) = {0.000408, 0.750000, 0, 1.0};
Point(23) = {-0.003378, 0.749925, 0, 1.0};
Point(24) = {-0.006943, 0.749624, 0, 1.0};
Point(25) = {-0.010263, 0.749118, 0, 1.0};
Point(26) = {-0.013311, 0.748432, 0, 1.0};
Point(27) = {-0.016064, 0.747593, 0, 1.0};
Point(28) = {-0.018493, 0.746630, 0, 1.0};
Point(29) = {-0.020572, 0.745569, 0, 1.0};
Point(30) = {-0.022280, 0.744443, 0, 1.0};
Point(31) = {-0.023597, 0.743286, 0, 1.0};
Point(32) = {-0.024508, 0.742142, 0, 1.0};
Point(33) = {-0.024985, 0.741076, 0, 1.0};
Point(34) = {-0.024888, 0.740135, 0, 1.0};
Point(35) = {-0.024166, 0.739214, 0, 1.0};
Point(36) = {-0.022928, 0.738240, 0, 1.0};
Point(37) = {-0.021224, 0.737268, 0, 1.0};
Point(38) = {-0.019076, 0.736338, 0, 1.0};
Point(39) = {-0.016501, 0.735487, 0, 1.0};
Point(40) = {-0.013510, 0.734740, 0, 1.0};
Point(41) = {-0.010113, 0.734121, 0, 1.0};
Point(42) = {-0.006314, 0.733640, 0, 1.0};
Point(43) = {-0.002128, 0.733296, 0, 1.0};
Point(44) = {0.002429, 0.733078, 0, 1.0};
Point(45) = {0.007337, 0.732970, 0, 1.0};
Point(46) = {0.012573, 0.732931, 0, 1.0};
Point(47) = {0.018082, 0.732899, 0, 1.0};
Point(48) = {0.023773, 0.732832, 0, 1.0};
Point(49) = {0.029555, 0.732706, 0, 1.0};
Point(50) = {0.035333, 0.732506, 0, 1.0};
Point(51) = {0.041017, 0.732220, 0, 1.0};
Point(52) = {0.046513, 0.731850, 0, 1.0};
Point(53) = {0.051731, 0.731394, 0, 1.0};
Point(54) = {0.056581, 0.730866, 0, 1.0};
Point(55) = {0.060982, 0.730278, 0, 1.0};
Point(56) = {0.064856, 0.729652, 0, 1.0};
Point(57) = {0.068130, 0.729013, 0, 1.0};
Point(58) = {0.070729, 0.728395, 0, 1.0};
Point(59) = {0.072593, 0.727865, 0, 1.0};
Point(60) = {0.073702, 0.727502, 0, 1.0};
Point(61) = {-0.074069, -0.727372, 0, 1.0};
Point(62) = {-0.073736, -0.727552, 0, 1.0};
Point(63) = {-0.072829, -0.728084, 0, 1.0};
Point(64) = {-0.071474, -0.728888, 0, 1.0};
Point(65) = {-0.069688, -0.729834, 0, 1.0};
Point(66) = {-0.067413, -0.730885, 0, 1.0};
Point(67) = {-0.064657, -0.732062, 0, 1.0};
Point(68) = {-0.061469, -0.733366, 0, 1.0};
Point(69) = {-0.057897, -0.734779, 0, 1.0};
Point(70) = {-0.053994, -0.736282, 0, 1.0};
Point(71) = {-0.049815, -0.737847, 0, 1.0};
Point(72) = {-0.045417, -0.739446, 0, 1.0};
Point(73) = {-0.040855, -0.741044, 0, 1.0};
Point(74) = {-0.036183, -0.742609, 0, 1.0};
Point(75) = {-0.031453, -0.744105, 0, 1.0};
Point(76) = {-0.026715, -0.745498, 0, 1.0};
Point(77) = {-0.022016, -0.746755, 0, 1.0};
Point(78) = {-0.017398, -0.747845, 0, 1.0};
Point(79) = {-0.012901, -0.748742, 0, 1.0};
Point(80) = {-0.008560, -0.749413, 0, 1.0};
Point(81) = {-0.004393, -0.749833, 0, 1.0};
Point(82) = {-0.000408, -0.750000, 0, 1.0};
Point(83) = {0.003378, -0.749925, 0, 1.0};
Point(84) = {0.006943, -0.749624, 0, 1.0};
Point(85) = {0.010263, -0.749118, 0, 1.0};
Point(86) = {0.013311, -0.748432, 0, 1.0};
Point(87) = {0.016064, -0.747593, 0, 1.0};
Point(88) = {0.018493, -0.746630, 0, 1.0};
Point(89) = {0.020572, -0.745569, 0, 1.0};
Point(90) = {0.022280, -0.744443, 0, 1.0};
Point(91) = {0.023597, -0.743286, 0, 1.0};
Point(92) = {0.024508, -0.742142, 0, 1.0};
Point(93) = {0.024985, -0.741076, 0, 1.0};
Point(94) = {0.024888, -0.740135, 0, 1.0};
Point(95) = {0.024166, -0.739214, 0, 1.0};
Point(96) = {0.022928, -0.738240, 0, 1.0};
Point(97) = {0.021224, -0.737268, 0, 1.0};
Point(98) = {0.019076, -0.736338, 0, 1.0};
Point(99) = {0.016501, -0.735487, 0, 1.0};
Point(100) = {0.013510, -0.734740, 0, 1.0};
Point(101) = {0.010113, -0.734121, 0, 1.0};
Point(102) = {0.006314, -0.733640, 0, 1.0};
Point(103) = {0.002128, -0.733296, 0, 1.0};
Point(104) = {-0.002429, -0.733078, 0, 1.0};
Point(105) = {-0.007337, -0.732970, 0, 1.0};
Point(106) = {-0.012573, -0.732931, 0, 1.0};
Point(107) = {-0.018082, -0.732899, 0, 1.0};
Point(108) = {-0.023773, -0.732832, 0, 1.0};
Point(109) = {-0.029555, -0.732706, 0, 1.0};
Point(110) = {-0.035333, -0.732506, 0, 1.0};
Point(111) = {-0.041017, -0.732220, 0, 1.0};
Point(112) = {-0.046513, -0.731850, 0, 1.0};
Point(113) = {-0.051731, -0.731394, 0, 1.0};
Point(114) = {-0.056581, -0.730866, 0, 1.0};
Point(115) = {-0.060982, -0.730278, 0, 1.0};
Point(116) = {-0.064856, -0.729652, 0, 1.0};
Point(117) = {-0.068130, -0.729013, 0, 1.0};
Point(118) = {-0.070729, -0.728395, 0, 1.0};
Point(119) = {-0.072593, -0.727865, 0, 1.0};
Point(120) = {-0.073702, -0.727502, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 23 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html