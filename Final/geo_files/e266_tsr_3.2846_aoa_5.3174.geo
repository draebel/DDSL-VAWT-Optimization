SetFactory("OpenCASCADE");

Point(1) = {0.074570, 0.732219, 0, 1.0};
Point(2) = {0.074195, 0.732329, 0, 1.0};
Point(3) = {0.073130, 0.732686, 0, 1.0};
Point(4) = {0.071488, 0.733298, 0, 1.0};
Point(5) = {0.069354, 0.734099, 0, 1.0};
Point(6) = {0.066747, 0.735020, 0, 1.0};
Point(7) = {0.063656, 0.736046, 0, 1.0};
Point(8) = {0.060119, 0.737199, 0, 1.0};
Point(9) = {0.056204, 0.738483, 0, 1.0};
Point(10) = {0.051987, 0.739879, 0, 1.0};
Point(11) = {0.047547, 0.741362, 0, 1.0};
Point(12) = {0.042960, 0.742898, 0, 1.0};
Point(13) = {0.038311, 0.744438, 0, 1.0};
Point(14) = {0.033675, 0.745922, 0, 1.0};
Point(15) = {0.029122, 0.747254, 0, 1.0};
Point(16) = {0.024648, 0.748318, 0, 1.0};
Point(17) = {0.020183, 0.749087, 0, 1.0};
Point(18) = {0.015716, 0.749604, 0, 1.0};
Point(19) = {0.011281, 0.749899, 0, 1.0};
Point(20) = {0.006915, 0.750000, 0, 1.0};
Point(21) = {0.002672, 0.749925, 0, 1.0};
Point(22) = {-0.001403, 0.749684, 0, 1.0};
Point(23) = {-0.005266, 0.749292, 0, 1.0};
Point(24) = {-0.008877, 0.748757, 0, 1.0};
Point(25) = {-0.012199, 0.748098, 0, 1.0};
Point(26) = {-0.015197, 0.747330, 0, 1.0};
Point(27) = {-0.017842, 0.746469, 0, 1.0};
Point(28) = {-0.020107, 0.745539, 0, 1.0};
Point(29) = {-0.021970, 0.744562, 0, 1.0};
Point(30) = {-0.023411, 0.743570, 0, 1.0};
Point(31) = {-0.024414, 0.742601, 0, 1.0};
Point(32) = {-0.024955, 0.741713, 0, 1.0};
Point(33) = {-0.024900, 0.740974, 0, 1.0};
Point(34) = {-0.024181, 0.740284, 0, 1.0};
Point(35) = {-0.022869, 0.739540, 0, 1.0};
Point(36) = {-0.021014, 0.738773, 0, 1.0};
Point(37) = {-0.018647, 0.737995, 0, 1.0};
Point(38) = {-0.015796, 0.737217, 0, 1.0};
Point(39) = {-0.012497, 0.736442, 0, 1.0};
Point(40) = {-0.008790, 0.735679, 0, 1.0};
Point(41) = {-0.004726, 0.734937, 0, 1.0};
Point(42) = {-0.000349, 0.734224, 0, 1.0};
Point(43) = {0.004288, 0.733550, 0, 1.0};
Point(44) = {0.009129, 0.732924, 0, 1.0};
Point(45) = {0.014119, 0.732357, 0, 1.0};
Point(46) = {0.019201, 0.731858, 0, 1.0};
Point(47) = {0.024313, 0.731439, 0, 1.0};
Point(48) = {0.029399, 0.731111, 0, 1.0};
Point(49) = {0.034397, 0.730890, 0, 1.0};
Point(50) = {0.039248, 0.730808, 0, 1.0};
Point(51) = {0.043942, 0.730912, 0, 1.0};
Point(52) = {0.048502, 0.731196, 0, 1.0};
Point(53) = {0.052938, 0.731610, 0, 1.0};
Point(54) = {0.057246, 0.732063, 0, 1.0};
Point(55) = {0.061345, 0.732435, 0, 1.0};
Point(56) = {0.065101, 0.732660, 0, 1.0};
Point(57) = {0.068381, 0.732718, 0, 1.0};
Point(58) = {0.071039, 0.732466, 0, 1.0};
Point(59) = {0.072989, 0.732279, 0, 1.0};
Point(60) = {0.074174, 0.732224, 0, 1.0};
Point(61) = {-0.074570, -0.732219, 0, 1.0};
Point(62) = {-0.074195, -0.732329, 0, 1.0};
Point(63) = {-0.073130, -0.732686, 0, 1.0};
Point(64) = {-0.071488, -0.733298, 0, 1.0};
Point(65) = {-0.069354, -0.734099, 0, 1.0};
Point(66) = {-0.066747, -0.735020, 0, 1.0};
Point(67) = {-0.063656, -0.736046, 0, 1.0};
Point(68) = {-0.060119, -0.737199, 0, 1.0};
Point(69) = {-0.056204, -0.738483, 0, 1.0};
Point(70) = {-0.051987, -0.739879, 0, 1.0};
Point(71) = {-0.047547, -0.741362, 0, 1.0};
Point(72) = {-0.042960, -0.742898, 0, 1.0};
Point(73) = {-0.038311, -0.744438, 0, 1.0};
Point(74) = {-0.033675, -0.745922, 0, 1.0};
Point(75) = {-0.029122, -0.747254, 0, 1.0};
Point(76) = {-0.024648, -0.748318, 0, 1.0};
Point(77) = {-0.020183, -0.749087, 0, 1.0};
Point(78) = {-0.015716, -0.749604, 0, 1.0};
Point(79) = {-0.011281, -0.749899, 0, 1.0};
Point(80) = {-0.006915, -0.750000, 0, 1.0};
Point(81) = {-0.002672, -0.749925, 0, 1.0};
Point(82) = {0.001403, -0.749684, 0, 1.0};
Point(83) = {0.005266, -0.749292, 0, 1.0};
Point(84) = {0.008877, -0.748757, 0, 1.0};
Point(85) = {0.012199, -0.748098, 0, 1.0};
Point(86) = {0.015197, -0.747330, 0, 1.0};
Point(87) = {0.017842, -0.746469, 0, 1.0};
Point(88) = {0.020107, -0.745539, 0, 1.0};
Point(89) = {0.021970, -0.744562, 0, 1.0};
Point(90) = {0.023411, -0.743570, 0, 1.0};
Point(91) = {0.024414, -0.742601, 0, 1.0};
Point(92) = {0.024955, -0.741713, 0, 1.0};
Point(93) = {0.024900, -0.740974, 0, 1.0};
Point(94) = {0.024181, -0.740284, 0, 1.0};
Point(95) = {0.022869, -0.739540, 0, 1.0};
Point(96) = {0.021014, -0.738773, 0, 1.0};
Point(97) = {0.018647, -0.737995, 0, 1.0};
Point(98) = {0.015796, -0.737217, 0, 1.0};
Point(99) = {0.012497, -0.736442, 0, 1.0};
Point(100) = {0.008790, -0.735679, 0, 1.0};
Point(101) = {0.004726, -0.734937, 0, 1.0};
Point(102) = {0.000349, -0.734224, 0, 1.0};
Point(103) = {-0.004288, -0.733550, 0, 1.0};
Point(104) = {-0.009129, -0.732924, 0, 1.0};
Point(105) = {-0.014119, -0.732357, 0, 1.0};
Point(106) = {-0.019201, -0.731858, 0, 1.0};
Point(107) = {-0.024313, -0.731439, 0, 1.0};
Point(108) = {-0.029399, -0.731111, 0, 1.0};
Point(109) = {-0.034397, -0.730890, 0, 1.0};
Point(110) = {-0.039248, -0.730808, 0, 1.0};
Point(111) = {-0.043942, -0.730912, 0, 1.0};
Point(112) = {-0.048502, -0.731196, 0, 1.0};
Point(113) = {-0.052938, -0.731610, 0, 1.0};
Point(114) = {-0.057246, -0.732063, 0, 1.0};
Point(115) = {-0.061345, -0.732435, 0, 1.0};
Point(116) = {-0.065101, -0.732660, 0, 1.0};
Point(117) = {-0.068381, -0.732718, 0, 1.0};
Point(118) = {-0.071039, -0.732466, 0, 1.0};
Point(119) = {-0.072989, -0.732279, 0, 1.0};
Point(120) = {-0.074174, -0.732224, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html