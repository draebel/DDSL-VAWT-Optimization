SetFactory("OpenCASCADE");

Point(1) = {0.148753, 0.721457, 0, 1.0};
Point(2) = {0.148108, 0.721523, 0, 1.0};
Point(3) = {0.146186, 0.721735, 0, 1.0};
Point(4) = {0.143001, 0.722139, 0, 1.0};
Point(5) = {0.138601, 0.722793, 0, 1.0};
Point(6) = {0.133079, 0.723755, 0, 1.0};
Point(7) = {0.126573, 0.725035, 0, 1.0};
Point(8) = {0.119215, 0.726609, 0, 1.0};
Point(9) = {0.111123, 0.728444, 0, 1.0};
Point(10) = {0.102426, 0.730501, 0, 1.0};
Point(11) = {0.093258, 0.732735, 0, 1.0};
Point(12) = {0.083753, 0.735086, 0, 1.0};
Point(13) = {0.074044, 0.737485, 0, 1.0};
Point(14) = {0.064267, 0.739834, 0, 1.0};
Point(15) = {0.054491, 0.742030, 0, 1.0};
Point(16) = {0.044779, 0.744007, 0, 1.0};
Point(17) = {0.035188, 0.745717, 0, 1.0};
Point(18) = {0.025777, 0.747133, 0, 1.0};
Point(19) = {0.016590, 0.748235, 0, 1.0};
Point(20) = {0.007675, 0.749046, 0, 1.0};
Point(21) = {-0.000876, 0.749603, 0, 1.0};
Point(22) = {-0.008973, 0.749917, 0, 1.0};
Point(23) = {-0.016525, 0.750000, 0, 1.0};
Point(24) = {-0.023454, 0.749860, 0, 1.0};
Point(25) = {-0.029690, 0.749507, 0, 1.0};
Point(26) = {-0.035172, 0.748955, 0, 1.0};
Point(27) = {-0.039847, 0.748221, 0, 1.0};
Point(28) = {-0.043676, 0.747329, 0, 1.0};
Point(29) = {-0.046636, 0.746310, 0, 1.0};
Point(30) = {-0.048708, 0.745227, 0, 1.0};
Point(31) = {-0.049856, 0.744176, 0, 1.0};
Point(32) = {-0.049873, 0.743190, 0, 1.0};
Point(33) = {-0.048735, 0.742153, 0, 1.0};
Point(34) = {-0.046577, 0.741043, 0, 1.0};
Point(35) = {-0.043403, 0.739914, 0, 1.0};
Point(36) = {-0.039236, 0.738794, 0, 1.0};
Point(37) = {-0.034095, 0.737692, 0, 1.0};
Point(38) = {-0.028024, 0.736609, 0, 1.0};
Point(39) = {-0.021079, 0.735546, 0, 1.0};
Point(40) = {-0.013333, 0.734503, 0, 1.0};
Point(41) = {-0.004862, 0.733481, 0, 1.0};
Point(42) = {0.004238, 0.732476, 0, 1.0};
Point(43) = {0.013868, 0.731488, 0, 1.0};
Point(44) = {0.023919, 0.730519, 0, 1.0};
Point(45) = {0.034276, 0.729570, 0, 1.0};
Point(46) = {0.044818, 0.728641, 0, 1.0};
Point(47) = {0.055422, 0.727741, 0, 1.0};
Point(48) = {0.065967, 0.726874, 0, 1.0};
Point(49) = {0.076329, 0.726047, 0, 1.0};
Point(50) = {0.086388, 0.725265, 0, 1.0};
Point(51) = {0.096029, 0.724537, 0, 1.0};
Point(52) = {0.105140, 0.723869, 0, 1.0};
Point(53) = {0.113612, 0.723271, 0, 1.0};
Point(54) = {0.121348, 0.722745, 0, 1.0};
Point(55) = {0.128257, 0.722302, 0, 1.0};
Point(56) = {0.134255, 0.721949, 0, 1.0};
Point(57) = {0.139273, 0.721702, 0, 1.0};
Point(58) = {0.143275, 0.721571, 0, 1.0};
Point(59) = {0.146248, 0.721519, 0, 1.0};
Point(60) = {0.148113, 0.721479, 0, 1.0};
Point(61) = {-0.148753, -0.721457, 0, 1.0};
Point(62) = {-0.148108, -0.721523, 0, 1.0};
Point(63) = {-0.146186, -0.721735, 0, 1.0};
Point(64) = {-0.143001, -0.722139, 0, 1.0};
Point(65) = {-0.138601, -0.722793, 0, 1.0};
Point(66) = {-0.133079, -0.723755, 0, 1.0};
Point(67) = {-0.126573, -0.725035, 0, 1.0};
Point(68) = {-0.119215, -0.726609, 0, 1.0};
Point(69) = {-0.111123, -0.728444, 0, 1.0};
Point(70) = {-0.102426, -0.730501, 0, 1.0};
Point(71) = {-0.093258, -0.732735, 0, 1.0};
Point(72) = {-0.083753, -0.735086, 0, 1.0};
Point(73) = {-0.074044, -0.737485, 0, 1.0};
Point(74) = {-0.064267, -0.739834, 0, 1.0};
Point(75) = {-0.054491, -0.742030, 0, 1.0};
Point(76) = {-0.044779, -0.744007, 0, 1.0};
Point(77) = {-0.035188, -0.745717, 0, 1.0};
Point(78) = {-0.025777, -0.747133, 0, 1.0};
Point(79) = {-0.016590, -0.748235, 0, 1.0};
Point(80) = {-0.007675, -0.749046, 0, 1.0};
Point(81) = {0.000876, -0.749603, 0, 1.0};
Point(82) = {0.008973, -0.749917, 0, 1.0};
Point(83) = {0.016525, -0.750000, 0, 1.0};
Point(84) = {0.023454, -0.749860, 0, 1.0};
Point(85) = {0.029690, -0.749507, 0, 1.0};
Point(86) = {0.035172, -0.748955, 0, 1.0};
Point(87) = {0.039847, -0.748221, 0, 1.0};
Point(88) = {0.043676, -0.747329, 0, 1.0};
Point(89) = {0.046636, -0.746310, 0, 1.0};
Point(90) = {0.048708, -0.745227, 0, 1.0};
Point(91) = {0.049856, -0.744176, 0, 1.0};
Point(92) = {0.049873, -0.743190, 0, 1.0};
Point(93) = {0.048735, -0.742153, 0, 1.0};
Point(94) = {0.046577, -0.741043, 0, 1.0};
Point(95) = {0.043403, -0.739914, 0, 1.0};
Point(96) = {0.039236, -0.738794, 0, 1.0};
Point(97) = {0.034095, -0.737692, 0, 1.0};
Point(98) = {0.028024, -0.736609, 0, 1.0};
Point(99) = {0.021079, -0.735546, 0, 1.0};
Point(100) = {0.013333, -0.734503, 0, 1.0};
Point(101) = {0.004862, -0.733481, 0, 1.0};
Point(102) = {-0.004238, -0.732476, 0, 1.0};
Point(103) = {-0.013868, -0.731488, 0, 1.0};
Point(104) = {-0.023919, -0.730519, 0, 1.0};
Point(105) = {-0.034276, -0.729570, 0, 1.0};
Point(106) = {-0.044818, -0.728641, 0, 1.0};
Point(107) = {-0.055422, -0.727741, 0, 1.0};
Point(108) = {-0.065967, -0.726874, 0, 1.0};
Point(109) = {-0.076329, -0.726047, 0, 1.0};
Point(110) = {-0.086388, -0.725265, 0, 1.0};
Point(111) = {-0.096029, -0.724537, 0, 1.0};
Point(112) = {-0.105140, -0.723869, 0, 1.0};
Point(113) = {-0.113612, -0.723271, 0, 1.0};
Point(114) = {-0.121348, -0.722745, 0, 1.0};
Point(115) = {-0.128257, -0.722302, 0, 1.0};
Point(116) = {-0.134255, -0.721949, 0, 1.0};
Point(117) = {-0.139273, -0.721702, 0, 1.0};
Point(118) = {-0.143275, -0.721571, 0, 1.0};
Point(119) = {-0.146248, -0.721519, 0, 1.0};
Point(120) = {-0.148113, -0.721479, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html