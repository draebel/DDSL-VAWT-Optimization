SetFactory("OpenCASCADE");

Point(1) = {0.074376, 0.735729, 0, 1.0};
Point(2) = {0.074054, 0.735762, 0, 1.0};
Point(3) = {0.073093, 0.735868, 0, 1.0};
Point(4) = {0.071500, 0.736069, 0, 1.0};
Point(5) = {0.069300, 0.736397, 0, 1.0};
Point(6) = {0.066540, 0.736878, 0, 1.0};
Point(7) = {0.063287, 0.737517, 0, 1.0};
Point(8) = {0.059608, 0.738304, 0, 1.0};
Point(9) = {0.055562, 0.739222, 0, 1.0};
Point(10) = {0.051213, 0.740251, 0, 1.0};
Point(11) = {0.046629, 0.741368, 0, 1.0};
Point(12) = {0.041877, 0.742543, 0, 1.0};
Point(13) = {0.037022, 0.743743, 0, 1.0};
Point(14) = {0.032134, 0.744917, 0, 1.0};
Point(15) = {0.027245, 0.746015, 0, 1.0};
Point(16) = {0.022389, 0.747004, 0, 1.0};
Point(17) = {0.017594, 0.747859, 0, 1.0};
Point(18) = {0.012888, 0.748567, 0, 1.0};
Point(19) = {0.008295, 0.749117, 0, 1.0};
Point(20) = {0.003838, 0.749523, 0, 1.0};
Point(21) = {-0.000438, 0.749801, 0, 1.0};
Point(22) = {-0.004487, 0.749959, 0, 1.0};
Point(23) = {-0.008263, 0.750000, 0, 1.0};
Point(24) = {-0.011727, 0.749930, 0, 1.0};
Point(25) = {-0.014845, 0.749753, 0, 1.0};
Point(26) = {-0.017586, 0.749477, 0, 1.0};
Point(27) = {-0.019923, 0.749111, 0, 1.0};
Point(28) = {-0.021838, 0.748664, 0, 1.0};
Point(29) = {-0.023318, 0.748155, 0, 1.0};
Point(30) = {-0.024354, 0.747613, 0, 1.0};
Point(31) = {-0.024928, 0.747088, 0, 1.0};
Point(32) = {-0.024936, 0.746595, 0, 1.0};
Point(33) = {-0.024368, 0.746076, 0, 1.0};
Point(34) = {-0.023289, 0.745522, 0, 1.0};
Point(35) = {-0.021702, 0.744957, 0, 1.0};
Point(36) = {-0.019618, 0.744397, 0, 1.0};
Point(37) = {-0.017048, 0.743846, 0, 1.0};
Point(38) = {-0.014012, 0.743304, 0, 1.0};
Point(39) = {-0.010540, 0.742773, 0, 1.0};
Point(40) = {-0.006667, 0.742252, 0, 1.0};
Point(41) = {-0.002431, 0.741740, 0, 1.0};
Point(42) = {0.002119, 0.741238, 0, 1.0};
Point(43) = {0.006934, 0.740744, 0, 1.0};
Point(44) = {0.011959, 0.740259, 0, 1.0};
Point(45) = {0.017138, 0.739785, 0, 1.0};
Point(46) = {0.022409, 0.739320, 0, 1.0};
Point(47) = {0.027711, 0.738870, 0, 1.0};
Point(48) = {0.032983, 0.738437, 0, 1.0};
Point(49) = {0.038165, 0.738024, 0, 1.0};
Point(50) = {0.043194, 0.737632, 0, 1.0};
Point(51) = {0.048015, 0.737269, 0, 1.0};
Point(52) = {0.052570, 0.736935, 0, 1.0};
Point(53) = {0.056806, 0.736635, 0, 1.0};
Point(54) = {0.060674, 0.736372, 0, 1.0};
Point(55) = {0.064129, 0.736151, 0, 1.0};
Point(56) = {0.067128, 0.735974, 0, 1.0};
Point(57) = {0.069636, 0.735851, 0, 1.0};
Point(58) = {0.071638, 0.735785, 0, 1.0};
Point(59) = {0.073124, 0.735759, 0, 1.0};
Point(60) = {0.074057, 0.735739, 0, 1.0};
Point(61) = {-0.074376, -0.735729, 0, 1.0};
Point(62) = {-0.074054, -0.735762, 0, 1.0};
Point(63) = {-0.073093, -0.735868, 0, 1.0};
Point(64) = {-0.071500, -0.736069, 0, 1.0};
Point(65) = {-0.069300, -0.736397, 0, 1.0};
Point(66) = {-0.066540, -0.736878, 0, 1.0};
Point(67) = {-0.063287, -0.737517, 0, 1.0};
Point(68) = {-0.059608, -0.738304, 0, 1.0};
Point(69) = {-0.055562, -0.739222, 0, 1.0};
Point(70) = {-0.051213, -0.740251, 0, 1.0};
Point(71) = {-0.046629, -0.741368, 0, 1.0};
Point(72) = {-0.041877, -0.742543, 0, 1.0};
Point(73) = {-0.037022, -0.743743, 0, 1.0};
Point(74) = {-0.032134, -0.744917, 0, 1.0};
Point(75) = {-0.027245, -0.746015, 0, 1.0};
Point(76) = {-0.022389, -0.747004, 0, 1.0};
Point(77) = {-0.017594, -0.747859, 0, 1.0};
Point(78) = {-0.012888, -0.748567, 0, 1.0};
Point(79) = {-0.008295, -0.749117, 0, 1.0};
Point(80) = {-0.003838, -0.749523, 0, 1.0};
Point(81) = {0.000438, -0.749801, 0, 1.0};
Point(82) = {0.004487, -0.749959, 0, 1.0};
Point(83) = {0.008263, -0.750000, 0, 1.0};
Point(84) = {0.011727, -0.749930, 0, 1.0};
Point(85) = {0.014845, -0.749753, 0, 1.0};
Point(86) = {0.017586, -0.749477, 0, 1.0};
Point(87) = {0.019923, -0.749111, 0, 1.0};
Point(88) = {0.021838, -0.748664, 0, 1.0};
Point(89) = {0.023318, -0.748155, 0, 1.0};
Point(90) = {0.024354, -0.747613, 0, 1.0};
Point(91) = {0.024928, -0.747088, 0, 1.0};
Point(92) = {0.024936, -0.746595, 0, 1.0};
Point(93) = {0.024368, -0.746076, 0, 1.0};
Point(94) = {0.023289, -0.745522, 0, 1.0};
Point(95) = {0.021702, -0.744957, 0, 1.0};
Point(96) = {0.019618, -0.744397, 0, 1.0};
Point(97) = {0.017048, -0.743846, 0, 1.0};
Point(98) = {0.014012, -0.743304, 0, 1.0};
Point(99) = {0.010540, -0.742773, 0, 1.0};
Point(100) = {0.006667, -0.742252, 0, 1.0};
Point(101) = {0.002431, -0.741740, 0, 1.0};
Point(102) = {-0.002119, -0.741238, 0, 1.0};
Point(103) = {-0.006934, -0.740744, 0, 1.0};
Point(104) = {-0.011959, -0.740259, 0, 1.0};
Point(105) = {-0.017138, -0.739785, 0, 1.0};
Point(106) = {-0.022409, -0.739320, 0, 1.0};
Point(107) = {-0.027711, -0.738870, 0, 1.0};
Point(108) = {-0.032983, -0.738437, 0, 1.0};
Point(109) = {-0.038165, -0.738024, 0, 1.0};
Point(110) = {-0.043194, -0.737632, 0, 1.0};
Point(111) = {-0.048015, -0.737269, 0, 1.0};
Point(112) = {-0.052570, -0.736935, 0, 1.0};
Point(113) = {-0.056806, -0.736635, 0, 1.0};
Point(114) = {-0.060674, -0.736372, 0, 1.0};
Point(115) = {-0.064129, -0.736151, 0, 1.0};
Point(116) = {-0.067128, -0.735974, 0, 1.0};
Point(117) = {-0.069636, -0.735851, 0, 1.0};
Point(118) = {-0.071638, -0.735785, 0, 1.0};
Point(119) = {-0.073124, -0.735759, 0, 1.0};
Point(120) = {-0.074057, -0.735739, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html