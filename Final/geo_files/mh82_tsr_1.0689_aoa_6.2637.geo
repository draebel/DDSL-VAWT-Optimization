SetFactory("OpenCASCADE");

Point(1) = {0.148806, 0.711496, 0, 1.0};
Point(2) = {0.148135, 0.711591, 0, 1.0};
Point(3) = {0.146132, 0.711905, 0, 1.0};
Point(4) = {0.142831, 0.712489, 0, 1.0};
Point(5) = {0.138299, 0.713389, 0, 1.0};
Point(6) = {0.132627, 0.714631, 0, 1.0};
Point(7) = {0.125930, 0.716230, 0, 1.0};
Point(8) = {0.118337, 0.718178, 0, 1.0};
Point(9) = {0.109987, 0.720449, 0, 1.0};
Point(10) = {0.101024, 0.723003, 0, 1.0};
Point(11) = {0.091591, 0.725780, 0, 1.0};
Point(12) = {0.081828, 0.728715, 0, 1.0};
Point(13) = {0.071869, 0.731729, 0, 1.0};
Point(14) = {0.061838, 0.734744, 0, 1.0};
Point(15) = {0.051850, 0.737677, 0, 1.0};
Point(16) = {0.042009, 0.740448, 0, 1.0};
Point(17) = {0.032410, 0.742982, 0, 1.0};
Point(18) = {0.023134, 0.745210, 0, 1.0};
Point(19) = {0.014257, 0.747074, 0, 1.0};
Point(20) = {0.005841, 0.748521, 0, 1.0};
Point(21) = {-0.002057, 0.749511, 0, 1.0};
Point(22) = {-0.009387, 0.750000, 0, 1.0};
Point(23) = {-0.016144, 0.749945, 0, 1.0};
Point(24) = {-0.022353, 0.749369, 0, 1.0};
Point(25) = {-0.028002, 0.748328, 0, 1.0};
Point(26) = {-0.033077, 0.746882, 0, 1.0};
Point(27) = {-0.037556, 0.745112, 0, 1.0};
Point(28) = {-0.041397, 0.743098, 0, 1.0};
Point(29) = {-0.044566, 0.740913, 0, 1.0};
Point(30) = {-0.047040, 0.738640, 0, 1.0};
Point(31) = {-0.048796, 0.736383, 0, 1.0};
Point(32) = {-0.049797, 0.734270, 0, 1.0};
Point(33) = {-0.049948, 0.733664, 0, 1.0};
Point(34) = {-0.050017, 0.733113, 0, 1.0};
Point(35) = {-0.050008, 0.732607, 0, 1.0};
Point(36) = {-0.049955, 0.732300, 0, 1.0};
Point(37) = {-0.049853, 0.732030, 0, 1.0};
Point(38) = {-0.049681, 0.731784, 0, 1.0};
Point(39) = {-0.049436, 0.731540, 0, 1.0};
Point(40) = {-0.048962, 0.731176, 0, 1.0};
Point(41) = {-0.048371, 0.730811, 0, 1.0};
Point(42) = {-0.046610, 0.729963, 0, 1.0};
Point(43) = {-0.043115, 0.728743, 0, 1.0};
Point(44) = {-0.038571, 0.727574, 0, 1.0};
Point(45) = {-0.033017, 0.726497, 0, 1.0};
Point(46) = {-0.026464, 0.725508, 0, 1.0};
Point(47) = {-0.018976, 0.724562, 0, 1.0};
Point(48) = {-0.010654, 0.723637, 0, 1.0};
Point(49) = {-0.001603, 0.722724, 0, 1.0};
Point(50) = {0.008062, 0.721820, 0, 1.0};
Point(51) = {0.018224, 0.720923, 0, 1.0};
Point(52) = {0.028756, 0.720035, 0, 1.0};
Point(53) = {0.039533, 0.719159, 0, 1.0};
Point(54) = {0.050423, 0.718298, 0, 1.0};
Point(55) = {0.061296, 0.717459, 0, 1.0};
Point(56) = {0.072019, 0.716650, 0, 1.0};
Point(57) = {0.082465, 0.715879, 0, 1.0};
Point(58) = {0.092506, 0.715158, 0, 1.0};
Point(59) = {0.102024, 0.714504, 0, 1.0};
Point(60) = {0.110922, 0.713934, 0, 1.0};
Point(61) = {0.119112, 0.713446, 0, 1.0};
Point(62) = {0.126504, 0.713024, 0, 1.0};
Point(63) = {0.133003, 0.712651, 0, 1.0};
Point(64) = {0.138510, 0.712314, 0, 1.0};
Point(65) = {0.142927, 0.712011, 0, 1.0};
Point(66) = {0.146162, 0.711752, 0, 1.0};
Point(67) = {0.148140, 0.711566, 0, 1.0};
Point(68) = {-0.148806, -0.711496, 0, 1.0};
Point(69) = {-0.148135, -0.711591, 0, 1.0};
Point(70) = {-0.146132, -0.711905, 0, 1.0};
Point(71) = {-0.142831, -0.712489, 0, 1.0};
Point(72) = {-0.138299, -0.713389, 0, 1.0};
Point(73) = {-0.132627, -0.714631, 0, 1.0};
Point(74) = {-0.125930, -0.716230, 0, 1.0};
Point(75) = {-0.118337, -0.718178, 0, 1.0};
Point(76) = {-0.109987, -0.720449, 0, 1.0};
Point(77) = {-0.101024, -0.723003, 0, 1.0};
Point(78) = {-0.091591, -0.725780, 0, 1.0};
Point(79) = {-0.081828, -0.728715, 0, 1.0};
Point(80) = {-0.071869, -0.731729, 0, 1.0};
Point(81) = {-0.061838, -0.734744, 0, 1.0};
Point(82) = {-0.051850, -0.737677, 0, 1.0};
Point(83) = {-0.042009, -0.740448, 0, 1.0};
Point(84) = {-0.032410, -0.742982, 0, 1.0};
Point(85) = {-0.023134, -0.745210, 0, 1.0};
Point(86) = {-0.014257, -0.747074, 0, 1.0};
Point(87) = {-0.005841, -0.748521, 0, 1.0};
Point(88) = {0.002057, -0.749511, 0, 1.0};
Point(89) = {0.009387, -0.750000, 0, 1.0};
Point(90) = {0.016144, -0.749945, 0, 1.0};
Point(91) = {0.022353, -0.749369, 0, 1.0};
Point(92) = {0.028002, -0.748328, 0, 1.0};
Point(93) = {0.033077, -0.746882, 0, 1.0};
Point(94) = {0.037556, -0.745112, 0, 1.0};
Point(95) = {0.041397, -0.743098, 0, 1.0};
Point(96) = {0.044566, -0.740913, 0, 1.0};
Point(97) = {0.047040, -0.738640, 0, 1.0};
Point(98) = {0.048796, -0.736383, 0, 1.0};
Point(99) = {0.049797, -0.734270, 0, 1.0};
Point(100) = {0.049948, -0.733664, 0, 1.0};
Point(101) = {0.050017, -0.733113, 0, 1.0};
Point(102) = {0.050008, -0.732607, 0, 1.0};
Point(103) = {0.049955, -0.732300, 0, 1.0};
Point(104) = {0.049853, -0.732030, 0, 1.0};
Point(105) = {0.049681, -0.731784, 0, 1.0};
Point(106) = {0.049436, -0.731540, 0, 1.0};
Point(107) = {0.048962, -0.731176, 0, 1.0};
Point(108) = {0.048371, -0.730811, 0, 1.0};
Point(109) = {0.046610, -0.729963, 0, 1.0};
Point(110) = {0.043115, -0.728743, 0, 1.0};
Point(111) = {0.038571, -0.727574, 0, 1.0};
Point(112) = {0.033017, -0.726497, 0, 1.0};
Point(113) = {0.026464, -0.725508, 0, 1.0};
Point(114) = {0.018976, -0.724562, 0, 1.0};
Point(115) = {0.010654, -0.723637, 0, 1.0};
Point(116) = {0.001603, -0.722724, 0, 1.0};
Point(117) = {-0.008062, -0.721820, 0, 1.0};
Point(118) = {-0.018224, -0.720923, 0, 1.0};
Point(119) = {-0.028756, -0.720035, 0, 1.0};
Point(120) = {-0.039533, -0.719159, 0, 1.0};
Point(121) = {-0.050423, -0.718298, 0, 1.0};
Point(122) = {-0.061296, -0.717459, 0, 1.0};
Point(123) = {-0.072019, -0.716650, 0, 1.0};
Point(124) = {-0.082465, -0.715879, 0, 1.0};
Point(125) = {-0.092506, -0.715158, 0, 1.0};
Point(126) = {-0.102024, -0.714504, 0, 1.0};
Point(127) = {-0.110922, -0.713934, 0, 1.0};
Point(128) = {-0.119112, -0.713446, 0, 1.0};
Point(129) = {-0.126504, -0.713024, 0, 1.0};
Point(130) = {-0.133003, -0.712651, 0, 1.0};
Point(131) = {-0.138510, -0.712314, 0, 1.0};
Point(132) = {-0.142927, -0.712011, 0, 1.0};
Point(133) = {-0.146162, -0.711752, 0, 1.0};
Point(134) = {-0.148140, -0.711566, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html