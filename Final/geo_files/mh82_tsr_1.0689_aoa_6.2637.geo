SetFactory("OpenCASCADE");

Point(1) = {0.074403, 0.730748, 0, 1.0};
Point(2) = {0.074068, 0.730795, 0, 1.0};
Point(3) = {0.073066, 0.730952, 0, 1.0};
Point(4) = {0.071416, 0.731245, 0, 1.0};
Point(5) = {0.069149, 0.731694, 0, 1.0};
Point(6) = {0.066313, 0.732316, 0, 1.0};
Point(7) = {0.062965, 0.733115, 0, 1.0};
Point(8) = {0.059168, 0.734089, 0, 1.0};
Point(9) = {0.054993, 0.735225, 0, 1.0};
Point(10) = {0.050512, 0.736501, 0, 1.0};
Point(11) = {0.045796, 0.737890, 0, 1.0};
Point(12) = {0.040914, 0.739357, 0, 1.0};
Point(13) = {0.035934, 0.740865, 0, 1.0};
Point(14) = {0.030919, 0.742372, 0, 1.0};
Point(15) = {0.025925, 0.743838, 0, 1.0};
Point(16) = {0.021005, 0.745224, 0, 1.0};
Point(17) = {0.016205, 0.746491, 0, 1.0};
Point(18) = {0.011567, 0.747605, 0, 1.0};
Point(19) = {0.007128, 0.748537, 0, 1.0};
Point(20) = {0.002920, 0.749261, 0, 1.0};
Point(21) = {-0.001029, 0.749756, 0, 1.0};
Point(22) = {-0.004693, 0.750000, 0, 1.0};
Point(23) = {-0.008072, 0.749972, 0, 1.0};
Point(24) = {-0.011176, 0.749684, 0, 1.0};
Point(25) = {-0.014001, 0.749164, 0, 1.0};
Point(26) = {-0.016539, 0.748441, 0, 1.0};
Point(27) = {-0.018778, 0.747556, 0, 1.0};
Point(28) = {-0.020699, 0.746549, 0, 1.0};
Point(29) = {-0.022283, 0.745457, 0, 1.0};
Point(30) = {-0.023520, 0.744320, 0, 1.0};
Point(31) = {-0.024398, 0.743191, 0, 1.0};
Point(32) = {-0.024898, 0.742135, 0, 1.0};
Point(33) = {-0.024974, 0.741832, 0, 1.0};
Point(34) = {-0.025009, 0.741557, 0, 1.0};
Point(35) = {-0.025004, 0.741303, 0, 1.0};
Point(36) = {-0.024977, 0.741150, 0, 1.0};
Point(37) = {-0.024926, 0.741015, 0, 1.0};
Point(38) = {-0.024840, 0.740892, 0, 1.0};
Point(39) = {-0.024718, 0.740770, 0, 1.0};
Point(40) = {-0.024481, 0.740588, 0, 1.0};
Point(41) = {-0.024185, 0.740406, 0, 1.0};
Point(42) = {-0.023305, 0.739982, 0, 1.0};
Point(43) = {-0.021557, 0.739371, 0, 1.0};
Point(44) = {-0.019286, 0.738787, 0, 1.0};
Point(45) = {-0.016508, 0.738249, 0, 1.0};
Point(46) = {-0.013232, 0.737754, 0, 1.0};
Point(47) = {-0.009488, 0.737281, 0, 1.0};
Point(48) = {-0.005327, 0.736818, 0, 1.0};
Point(49) = {-0.000802, 0.736362, 0, 1.0};
Point(50) = {0.004031, 0.735910, 0, 1.0};
Point(51) = {0.009112, 0.735462, 0, 1.0};
Point(52) = {0.014378, 0.735018, 0, 1.0};
Point(53) = {0.019767, 0.734579, 0, 1.0};
Point(54) = {0.025212, 0.734149, 0, 1.0};
Point(55) = {0.030648, 0.733729, 0, 1.0};
Point(56) = {0.036010, 0.733325, 0, 1.0};
Point(57) = {0.041232, 0.732939, 0, 1.0};
Point(58) = {0.046253, 0.732579, 0, 1.0};
Point(59) = {0.051012, 0.732252, 0, 1.0};
Point(60) = {0.055461, 0.731967, 0, 1.0};
Point(61) = {0.059556, 0.731723, 0, 1.0};
Point(62) = {0.063252, 0.731512, 0, 1.0};
Point(63) = {0.066501, 0.731325, 0, 1.0};
Point(64) = {0.069255, 0.731157, 0, 1.0};
Point(65) = {0.071463, 0.731005, 0, 1.0};
Point(66) = {0.073081, 0.730876, 0, 1.0};
Point(67) = {0.074070, 0.730783, 0, 1.0};
Point(68) = {-0.074403, -0.730748, 0, 1.0};
Point(69) = {-0.074068, -0.730795, 0, 1.0};
Point(70) = {-0.073066, -0.730952, 0, 1.0};
Point(71) = {-0.071416, -0.731245, 0, 1.0};
Point(72) = {-0.069149, -0.731694, 0, 1.0};
Point(73) = {-0.066313, -0.732316, 0, 1.0};
Point(74) = {-0.062965, -0.733115, 0, 1.0};
Point(75) = {-0.059168, -0.734089, 0, 1.0};
Point(76) = {-0.054993, -0.735225, 0, 1.0};
Point(77) = {-0.050512, -0.736501, 0, 1.0};
Point(78) = {-0.045796, -0.737890, 0, 1.0};
Point(79) = {-0.040914, -0.739357, 0, 1.0};
Point(80) = {-0.035934, -0.740865, 0, 1.0};
Point(81) = {-0.030919, -0.742372, 0, 1.0};
Point(82) = {-0.025925, -0.743838, 0, 1.0};
Point(83) = {-0.021005, -0.745224, 0, 1.0};
Point(84) = {-0.016205, -0.746491, 0, 1.0};
Point(85) = {-0.011567, -0.747605, 0, 1.0};
Point(86) = {-0.007128, -0.748537, 0, 1.0};
Point(87) = {-0.002920, -0.749261, 0, 1.0};
Point(88) = {0.001029, -0.749756, 0, 1.0};
Point(89) = {0.004693, -0.750000, 0, 1.0};
Point(90) = {0.008072, -0.749972, 0, 1.0};
Point(91) = {0.011176, -0.749684, 0, 1.0};
Point(92) = {0.014001, -0.749164, 0, 1.0};
Point(93) = {0.016539, -0.748441, 0, 1.0};
Point(94) = {0.018778, -0.747556, 0, 1.0};
Point(95) = {0.020699, -0.746549, 0, 1.0};
Point(96) = {0.022283, -0.745457, 0, 1.0};
Point(97) = {0.023520, -0.744320, 0, 1.0};
Point(98) = {0.024398, -0.743191, 0, 1.0};
Point(99) = {0.024898, -0.742135, 0, 1.0};
Point(100) = {0.024974, -0.741832, 0, 1.0};
Point(101) = {0.025009, -0.741557, 0, 1.0};
Point(102) = {0.025004, -0.741303, 0, 1.0};
Point(103) = {0.024977, -0.741150, 0, 1.0};
Point(104) = {0.024926, -0.741015, 0, 1.0};
Point(105) = {0.024840, -0.740892, 0, 1.0};
Point(106) = {0.024718, -0.740770, 0, 1.0};
Point(107) = {0.024481, -0.740588, 0, 1.0};
Point(108) = {0.024185, -0.740406, 0, 1.0};
Point(109) = {0.023305, -0.739982, 0, 1.0};
Point(110) = {0.021557, -0.739371, 0, 1.0};
Point(111) = {0.019286, -0.738787, 0, 1.0};
Point(112) = {0.016508, -0.738249, 0, 1.0};
Point(113) = {0.013232, -0.737754, 0, 1.0};
Point(114) = {0.009488, -0.737281, 0, 1.0};
Point(115) = {0.005327, -0.736818, 0, 1.0};
Point(116) = {0.000802, -0.736362, 0, 1.0};
Point(117) = {-0.004031, -0.735910, 0, 1.0};
Point(118) = {-0.009112, -0.735462, 0, 1.0};
Point(119) = {-0.014378, -0.735018, 0, 1.0};
Point(120) = {-0.019767, -0.734579, 0, 1.0};
Point(121) = {-0.025212, -0.734149, 0, 1.0};
Point(122) = {-0.030648, -0.733729, 0, 1.0};
Point(123) = {-0.036010, -0.733325, 0, 1.0};
Point(124) = {-0.041232, -0.732939, 0, 1.0};
Point(125) = {-0.046253, -0.732579, 0, 1.0};
Point(126) = {-0.051012, -0.732252, 0, 1.0};
Point(127) = {-0.055461, -0.731967, 0, 1.0};
Point(128) = {-0.059556, -0.731723, 0, 1.0};
Point(129) = {-0.063252, -0.731512, 0, 1.0};
Point(130) = {-0.066501, -0.731325, 0, 1.0};
Point(131) = {-0.069255, -0.731157, 0, 1.0};
Point(132) = {-0.071463, -0.731005, 0, 1.0};
Point(133) = {-0.073081, -0.730876, 0, 1.0};
Point(134) = {-0.074070, -0.730783, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html