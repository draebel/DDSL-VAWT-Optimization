SetFactory("OpenCASCADE");

Point(1) = {0.111605, 0.721122, 0, 1.0};
Point(2) = {0.111102, 0.721193, 0, 1.0};
Point(3) = {0.109599, 0.721428, 0, 1.0};
Point(4) = {0.107123, 0.721867, 0, 1.0};
Point(5) = {0.103724, 0.722541, 0, 1.0};
Point(6) = {0.099470, 0.723474, 0, 1.0};
Point(7) = {0.094447, 0.724673, 0, 1.0};
Point(8) = {0.088752, 0.726133, 0, 1.0};
Point(9) = {0.082490, 0.727837, 0, 1.0};
Point(10) = {0.075768, 0.729752, 0, 1.0};
Point(11) = {0.068693, 0.731835, 0, 1.0};
Point(12) = {0.061371, 0.734036, 0, 1.0};
Point(13) = {0.053902, 0.736297, 0, 1.0};
Point(14) = {0.046378, 0.738558, 0, 1.0};
Point(15) = {0.038887, 0.740758, 0, 1.0};
Point(16) = {0.031507, 0.742836, 0, 1.0};
Point(17) = {0.024307, 0.744736, 0, 1.0};
Point(18) = {0.017351, 0.746408, 0, 1.0};
Point(19) = {0.010693, 0.747805, 0, 1.0};
Point(20) = {0.004380, 0.748891, 0, 1.0};
Point(21) = {-0.001543, 0.749634, 0, 1.0};
Point(22) = {-0.007040, 0.750000, 0, 1.0};
Point(23) = {-0.012108, 0.749959, 0, 1.0};
Point(24) = {-0.016764, 0.749527, 0, 1.0};
Point(25) = {-0.021001, 0.748746, 0, 1.0};
Point(26) = {-0.024808, 0.747661, 0, 1.0};
Point(27) = {-0.028167, 0.746334, 0, 1.0};
Point(28) = {-0.031048, 0.744824, 0, 1.0};
Point(29) = {-0.033425, 0.743185, 0, 1.0};
Point(30) = {-0.035280, 0.741480, 0, 1.0};
Point(31) = {-0.036597, 0.739787, 0, 1.0};
Point(32) = {-0.037348, 0.738202, 0, 1.0};
Point(33) = {-0.037461, 0.737748, 0, 1.0};
Point(34) = {-0.037513, 0.737335, 0, 1.0};
Point(35) = {-0.037506, 0.736955, 0, 1.0};
Point(36) = {-0.037466, 0.736725, 0, 1.0};
Point(37) = {-0.037389, 0.736522, 0, 1.0};
Point(38) = {-0.037261, 0.736338, 0, 1.0};
Point(39) = {-0.037077, 0.736155, 0, 1.0};
Point(40) = {-0.036722, 0.735882, 0, 1.0};
Point(41) = {-0.036278, 0.735609, 0, 1.0};
Point(42) = {-0.034958, 0.734972, 0, 1.0};
Point(43) = {-0.032336, 0.734057, 0, 1.0};
Point(44) = {-0.028928, 0.733180, 0, 1.0};
Point(45) = {-0.024763, 0.732373, 0, 1.0};
Point(46) = {-0.019848, 0.731631, 0, 1.0};
Point(47) = {-0.014232, 0.730922, 0, 1.0};
Point(48) = {-0.007990, 0.730228, 0, 1.0};
Point(49) = {-0.001202, 0.729543, 0, 1.0};
Point(50) = {0.006047, 0.728865, 0, 1.0};
Point(51) = {0.013668, 0.728193, 0, 1.0};
Point(52) = {0.021567, 0.727527, 0, 1.0};
Point(53) = {0.029650, 0.726869, 0, 1.0};
Point(54) = {0.037818, 0.726223, 0, 1.0};
Point(55) = {0.045972, 0.725594, 0, 1.0};
Point(56) = {0.054015, 0.724987, 0, 1.0};
Point(57) = {0.061849, 0.724409, 0, 1.0};
Point(58) = {0.069380, 0.723868, 0, 1.0};
Point(59) = {0.076518, 0.723378, 0, 1.0};
Point(60) = {0.083191, 0.722951, 0, 1.0};
Point(61) = {0.089334, 0.722584, 0, 1.0};
Point(62) = {0.094878, 0.722268, 0, 1.0};
Point(63) = {0.099752, 0.721988, 0, 1.0};
Point(64) = {0.103882, 0.721736, 0, 1.0};
Point(65) = {0.107195, 0.721508, 0, 1.0};
Point(66) = {0.109622, 0.721314, 0, 1.0};
Point(67) = {0.111105, 0.721174, 0, 1.0};
Point(68) = {-0.111605, -0.721122, 0, 1.0};
Point(69) = {-0.111102, -0.721193, 0, 1.0};
Point(70) = {-0.109599, -0.721428, 0, 1.0};
Point(71) = {-0.107123, -0.721867, 0, 1.0};
Point(72) = {-0.103724, -0.722541, 0, 1.0};
Point(73) = {-0.099470, -0.723474, 0, 1.0};
Point(74) = {-0.094447, -0.724673, 0, 1.0};
Point(75) = {-0.088752, -0.726133, 0, 1.0};
Point(76) = {-0.082490, -0.727837, 0, 1.0};
Point(77) = {-0.075768, -0.729752, 0, 1.0};
Point(78) = {-0.068693, -0.731835, 0, 1.0};
Point(79) = {-0.061371, -0.734036, 0, 1.0};
Point(80) = {-0.053902, -0.736297, 0, 1.0};
Point(81) = {-0.046378, -0.738558, 0, 1.0};
Point(82) = {-0.038887, -0.740758, 0, 1.0};
Point(83) = {-0.031507, -0.742836, 0, 1.0};
Point(84) = {-0.024307, -0.744736, 0, 1.0};
Point(85) = {-0.017351, -0.746408, 0, 1.0};
Point(86) = {-0.010693, -0.747805, 0, 1.0};
Point(87) = {-0.004380, -0.748891, 0, 1.0};
Point(88) = {0.001543, -0.749634, 0, 1.0};
Point(89) = {0.007040, -0.750000, 0, 1.0};
Point(90) = {0.012108, -0.749959, 0, 1.0};
Point(91) = {0.016764, -0.749527, 0, 1.0};
Point(92) = {0.021001, -0.748746, 0, 1.0};
Point(93) = {0.024808, -0.747661, 0, 1.0};
Point(94) = {0.028167, -0.746334, 0, 1.0};
Point(95) = {0.031048, -0.744824, 0, 1.0};
Point(96) = {0.033425, -0.743185, 0, 1.0};
Point(97) = {0.035280, -0.741480, 0, 1.0};
Point(98) = {0.036597, -0.739787, 0, 1.0};
Point(99) = {0.037348, -0.738202, 0, 1.0};
Point(100) = {0.037461, -0.737748, 0, 1.0};
Point(101) = {0.037513, -0.737335, 0, 1.0};
Point(102) = {0.037506, -0.736955, 0, 1.0};
Point(103) = {0.037466, -0.736725, 0, 1.0};
Point(104) = {0.037389, -0.736522, 0, 1.0};
Point(105) = {0.037261, -0.736338, 0, 1.0};
Point(106) = {0.037077, -0.736155, 0, 1.0};
Point(107) = {0.036722, -0.735882, 0, 1.0};
Point(108) = {0.036278, -0.735609, 0, 1.0};
Point(109) = {0.034958, -0.734972, 0, 1.0};
Point(110) = {0.032336, -0.734057, 0, 1.0};
Point(111) = {0.028928, -0.733180, 0, 1.0};
Point(112) = {0.024763, -0.732373, 0, 1.0};
Point(113) = {0.019848, -0.731631, 0, 1.0};
Point(114) = {0.014232, -0.730922, 0, 1.0};
Point(115) = {0.007990, -0.730228, 0, 1.0};
Point(116) = {0.001202, -0.729543, 0, 1.0};
Point(117) = {-0.006047, -0.728865, 0, 1.0};
Point(118) = {-0.013668, -0.728193, 0, 1.0};
Point(119) = {-0.021567, -0.727527, 0, 1.0};
Point(120) = {-0.029650, -0.726869, 0, 1.0};
Point(121) = {-0.037818, -0.726223, 0, 1.0};
Point(122) = {-0.045972, -0.725594, 0, 1.0};
Point(123) = {-0.054015, -0.724987, 0, 1.0};
Point(124) = {-0.061849, -0.724409, 0, 1.0};
Point(125) = {-0.069380, -0.723868, 0, 1.0};
Point(126) = {-0.076518, -0.723378, 0, 1.0};
Point(127) = {-0.083191, -0.722951, 0, 1.0};
Point(128) = {-0.089334, -0.722584, 0, 1.0};
Point(129) = {-0.094878, -0.722268, 0, 1.0};
Point(130) = {-0.099752, -0.721988, 0, 1.0};
Point(131) = {-0.103882, -0.721736, 0, 1.0};
Point(132) = {-0.107195, -0.721508, 0, 1.0};
Point(133) = {-0.109622, -0.721314, 0, 1.0};
Point(134) = {-0.111105, -0.721174, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html