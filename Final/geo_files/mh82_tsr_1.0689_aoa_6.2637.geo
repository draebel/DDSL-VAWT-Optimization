SetFactory("OpenCASCADE");

Point(1) = {0.074569, 0.721121, 0, 1.0};
Point(2) = {0.074066, 0.721192, 0, 1.0};
Point(3) = {0.072564, 0.721428, 0, 1.0};
Point(4) = {0.070088, 0.721866, 0, 1.0};
Point(5) = {0.066688, 0.722541, 0, 1.0};
Point(6) = {0.062434, 0.723473, 0, 1.0};
Point(7) = {0.057411, 0.724672, 0, 1.0};
Point(8) = {0.051716, 0.726133, 0, 1.0};
Point(9) = {0.045454, 0.727836, 0, 1.0};
Point(10) = {0.038731, 0.729751, 0, 1.0};
Point(11) = {0.031657, 0.731835, 0, 1.0};
Point(12) = {0.024334, 0.734036, 0, 1.0};
Point(13) = {0.016865, 0.736297, 0, 1.0};
Point(14) = {0.009341, 0.738558, 0, 1.0};
Point(15) = {0.001850, 0.740757, 0, 1.0};
Point(16) = {-0.005531, 0.742836, 0, 1.0};
Point(17) = {-0.012731, 0.744736, 0, 1.0};
Point(18) = {-0.019687, 0.746408, 0, 1.0};
Point(19) = {-0.026346, 0.747805, 0, 1.0};
Point(20) = {-0.032658, 0.748891, 0, 1.0};
Point(21) = {-0.038581, 0.749634, 0, 1.0};
Point(22) = {-0.044079, 0.750000, 0, 1.0};
Point(23) = {-0.049147, 0.749959, 0, 1.0};
Point(24) = {-0.053803, 0.749527, 0, 1.0};
Point(25) = {-0.058040, 0.748746, 0, 1.0};
Point(26) = {-0.061847, 0.747661, 0, 1.0};
Point(27) = {-0.065206, 0.746334, 0, 1.0};
Point(28) = {-0.068087, 0.744824, 0, 1.0};
Point(29) = {-0.070464, 0.743185, 0, 1.0};
Point(30) = {-0.072320, 0.741480, 0, 1.0};
Point(31) = {-0.073637, 0.739787, 0, 1.0};
Point(32) = {-0.074387, 0.738202, 0, 1.0};
Point(33) = {-0.074500, 0.737747, 0, 1.0};
Point(34) = {-0.074552, 0.737335, 0, 1.0};
Point(35) = {-0.074545, 0.736955, 0, 1.0};
Point(36) = {-0.074505, 0.736725, 0, 1.0};
Point(37) = {-0.074429, 0.736522, 0, 1.0};
Point(38) = {-0.074300, 0.736337, 0, 1.0};
Point(39) = {-0.074117, 0.736155, 0, 1.0};
Point(40) = {-0.073761, 0.735882, 0, 1.0};
Point(41) = {-0.073318, 0.735608, 0, 1.0};
Point(42) = {-0.071997, 0.734972, 0, 1.0};
Point(43) = {-0.069376, 0.734057, 0, 1.0};
Point(44) = {-0.065968, 0.733180, 0, 1.0};
Point(45) = {-0.061802, 0.732373, 0, 1.0};
Point(46) = {-0.056887, 0.731631, 0, 1.0};
Point(47) = {-0.051271, 0.730921, 0, 1.0};
Point(48) = {-0.045029, 0.730227, 0, 1.0};
Point(49) = {-0.038241, 0.729543, 0, 1.0};
Point(50) = {-0.030992, 0.728865, 0, 1.0};
Point(51) = {-0.023370, 0.728192, 0, 1.0};
Point(52) = {-0.015471, 0.727526, 0, 1.0};
Point(53) = {-0.007388, 0.726868, 0, 1.0};
Point(54) = {0.000780, 0.726223, 0, 1.0};
Point(55) = {0.008935, 0.725594, 0, 1.0};
Point(56) = {0.016977, 0.724987, 0, 1.0};
Point(57) = {0.024812, 0.724408, 0, 1.0};
Point(58) = {0.032343, 0.723868, 0, 1.0};
Point(59) = {0.039482, 0.723377, 0, 1.0};
Point(60) = {0.046155, 0.722950, 0, 1.0};
Point(61) = {0.052298, 0.722584, 0, 1.0};
Point(62) = {0.057842, 0.722267, 0, 1.0};
Point(63) = {0.062716, 0.721987, 0, 1.0};
Point(64) = {0.066847, 0.721735, 0, 1.0};
Point(65) = {0.070159, 0.721507, 0, 1.0};
Point(66) = {0.072586, 0.721313, 0, 1.0};
Point(67) = {0.074070, 0.721174, 0, 1.0};
Point(68) = {-0.074569, -0.721121, 0, 1.0};
Point(69) = {-0.074066, -0.721192, 0, 1.0};
Point(70) = {-0.072564, -0.721428, 0, 1.0};
Point(71) = {-0.070088, -0.721866, 0, 1.0};
Point(72) = {-0.066688, -0.722541, 0, 1.0};
Point(73) = {-0.062434, -0.723473, 0, 1.0};
Point(74) = {-0.057411, -0.724672, 0, 1.0};
Point(75) = {-0.051716, -0.726133, 0, 1.0};
Point(76) = {-0.045454, -0.727836, 0, 1.0};
Point(77) = {-0.038731, -0.729751, 0, 1.0};
Point(78) = {-0.031657, -0.731835, 0, 1.0};
Point(79) = {-0.024334, -0.734036, 0, 1.0};
Point(80) = {-0.016865, -0.736297, 0, 1.0};
Point(81) = {-0.009341, -0.738558, 0, 1.0};
Point(82) = {-0.001850, -0.740757, 0, 1.0};
Point(83) = {0.005531, -0.742836, 0, 1.0};
Point(84) = {0.012731, -0.744736, 0, 1.0};
Point(85) = {0.019687, -0.746408, 0, 1.0};
Point(86) = {0.026346, -0.747805, 0, 1.0};
Point(87) = {0.032658, -0.748891, 0, 1.0};
Point(88) = {0.038581, -0.749634, 0, 1.0};
Point(89) = {0.044079, -0.750000, 0, 1.0};
Point(90) = {0.049147, -0.749959, 0, 1.0};
Point(91) = {0.053803, -0.749527, 0, 1.0};
Point(92) = {0.058040, -0.748746, 0, 1.0};
Point(93) = {0.061847, -0.747661, 0, 1.0};
Point(94) = {0.065206, -0.746334, 0, 1.0};
Point(95) = {0.068087, -0.744824, 0, 1.0};
Point(96) = {0.070464, -0.743185, 0, 1.0};
Point(97) = {0.072320, -0.741480, 0, 1.0};
Point(98) = {0.073637, -0.739787, 0, 1.0};
Point(99) = {0.074387, -0.738202, 0, 1.0};
Point(100) = {0.074500, -0.737747, 0, 1.0};
Point(101) = {0.074552, -0.737335, 0, 1.0};
Point(102) = {0.074545, -0.736955, 0, 1.0};
Point(103) = {0.074505, -0.736725, 0, 1.0};
Point(104) = {0.074429, -0.736522, 0, 1.0};
Point(105) = {0.074300, -0.736337, 0, 1.0};
Point(106) = {0.074117, -0.736155, 0, 1.0};
Point(107) = {0.073761, -0.735882, 0, 1.0};
Point(108) = {0.073318, -0.735608, 0, 1.0};
Point(109) = {0.071997, -0.734972, 0, 1.0};
Point(110) = {0.069376, -0.734057, 0, 1.0};
Point(111) = {0.065968, -0.733180, 0, 1.0};
Point(112) = {0.061802, -0.732373, 0, 1.0};
Point(113) = {0.056887, -0.731631, 0, 1.0};
Point(114) = {0.051271, -0.730921, 0, 1.0};
Point(115) = {0.045029, -0.730227, 0, 1.0};
Point(116) = {0.038241, -0.729543, 0, 1.0};
Point(117) = {0.030992, -0.728865, 0, 1.0};
Point(118) = {0.023370, -0.728192, 0, 1.0};
Point(119) = {0.015471, -0.727526, 0, 1.0};
Point(120) = {0.007388, -0.726868, 0, 1.0};
Point(121) = {-0.000780, -0.726223, 0, 1.0};
Point(122) = {-0.008935, -0.725594, 0, 1.0};
Point(123) = {-0.016977, -0.724987, 0, 1.0};
Point(124) = {-0.024812, -0.724408, 0, 1.0};
Point(125) = {-0.032343, -0.723868, 0, 1.0};
Point(126) = {-0.039482, -0.723377, 0, 1.0};
Point(127) = {-0.046155, -0.722950, 0, 1.0};
Point(128) = {-0.052298, -0.722584, 0, 1.0};
Point(129) = {-0.057842, -0.722267, 0, 1.0};
Point(130) = {-0.062716, -0.721987, 0, 1.0};
Point(131) = {-0.066847, -0.721735, 0, 1.0};
Point(132) = {-0.070159, -0.721507, 0, 1.0};
Point(133) = {-0.072586, -0.721313, 0, 1.0};
Point(134) = {-0.074070, -0.721174, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html