SetFactory("OpenCASCADE");

Point(1) = {0.110855, 0.716018, 0, 1.0};
Point(2) = {0.110308, 0.716159, 0, 1.0};
Point(3) = {0.108755, 0.716624, 0, 1.0};
Point(4) = {0.106349, 0.717405, 0, 1.0};
Point(5) = {0.103155, 0.718417, 0, 1.0};
Point(6) = {0.099158, 0.719628, 0, 1.0};
Point(7) = {0.094394, 0.721073, 0, 1.0};
Point(8) = {0.088956, 0.722763, 0, 1.0};
Point(9) = {0.082936, 0.724688, 0, 1.0};
Point(10) = {0.076434, 0.726822, 0, 1.0};
Point(11) = {0.069558, 0.729128, 0, 1.0};
Point(12) = {0.062412, 0.731561, 0, 1.0};
Point(13) = {0.055095, 0.734068, 0, 1.0};
Point(14) = {0.047710, 0.736589, 0, 1.0};
Point(15) = {0.040340, 0.739059, 0, 1.0};
Point(16) = {0.033070, 0.741413, 0, 1.0};
Point(17) = {0.025971, 0.743590, 0, 1.0};
Point(18) = {0.019104, 0.745531, 0, 1.0};
Point(19) = {0.012528, 0.747180, 0, 1.0};
Point(20) = {0.006284, 0.748481, 0, 1.0};
Point(21) = {0.000379, 0.749380, 0, 1.0};
Point(22) = {-0.005198, 0.749878, 0, 1.0};
Point(23) = {-0.010430, 0.750000, 0, 1.0};
Point(24) = {-0.015308, 0.749778, 0, 1.0};
Point(25) = {-0.019799, 0.749266, 0, 1.0};
Point(26) = {-0.023854, 0.748514, 0, 1.0};
Point(27) = {-0.027426, 0.747560, 0, 1.0};
Point(28) = {-0.030482, 0.746436, 0, 1.0};
Point(29) = {-0.032988, 0.745192, 0, 1.0};
Point(30) = {-0.034916, 0.743871, 0, 1.0};
Point(31) = {-0.036255, 0.742543, 0, 1.0};
Point(32) = {-0.036963, 0.741295, 0, 1.0};
Point(33) = {-0.036948, 0.740315, 0, 1.0};
Point(34) = {-0.035983, 0.739527, 0, 1.0};
Point(35) = {-0.034003, 0.738703, 0, 1.0};
Point(36) = {-0.031121, 0.737832, 0, 1.0};
Point(37) = {-0.027377, 0.736911, 0, 1.0};
Point(38) = {-0.022816, 0.735909, 0, 1.0};
Point(39) = {-0.017513, 0.734796, 0, 1.0};
Point(40) = {-0.011574, 0.733572, 0, 1.0};
Point(41) = {-0.005093, 0.732253, 0, 1.0};
Point(42) = {0.001837, 0.730864, 0, 1.0};
Point(43) = {0.009125, 0.729441, 0, 1.0};
Point(44) = {0.016698, 0.728007, 0, 1.0};
Point(45) = {0.024466, 0.726586, 0, 1.0};
Point(46) = {0.032347, 0.725195, 0, 1.0};
Point(47) = {0.040251, 0.723854, 0, 1.0};
Point(48) = {0.048090, 0.722577, 0, 1.0};
Point(49) = {0.055778, 0.721386, 0, 1.0};
Point(50) = {0.063228, 0.720298, 0, 1.0};
Point(51) = {0.070369, 0.719338, 0, 1.0};
Point(52) = {0.077134, 0.718511, 0, 1.0};
Point(53) = {0.083460, 0.717822, 0, 1.0};
Point(54) = {0.089283, 0.717262, 0, 1.0};
Point(55) = {0.094540, 0.716825, 0, 1.0};
Point(56) = {0.099169, 0.716498, 0, 1.0};
Point(57) = {0.103096, 0.716274, 0, 1.0};
Point(58) = {0.106291, 0.716163, 0, 1.0};
Point(59) = {0.108725, 0.716116, 0, 1.0};
Point(60) = {0.110301, 0.716055, 0, 1.0};
Point(61) = {-0.110855, -0.716018, 0, 1.0};
Point(62) = {-0.110308, -0.716159, 0, 1.0};
Point(63) = {-0.108755, -0.716624, 0, 1.0};
Point(64) = {-0.106349, -0.717405, 0, 1.0};
Point(65) = {-0.103155, -0.718417, 0, 1.0};
Point(66) = {-0.099158, -0.719628, 0, 1.0};
Point(67) = {-0.094394, -0.721073, 0, 1.0};
Point(68) = {-0.088956, -0.722763, 0, 1.0};
Point(69) = {-0.082936, -0.724688, 0, 1.0};
Point(70) = {-0.076434, -0.726822, 0, 1.0};
Point(71) = {-0.069558, -0.729128, 0, 1.0};
Point(72) = {-0.062412, -0.731561, 0, 1.0};
Point(73) = {-0.055095, -0.734068, 0, 1.0};
Point(74) = {-0.047710, -0.736589, 0, 1.0};
Point(75) = {-0.040340, -0.739059, 0, 1.0};
Point(76) = {-0.033070, -0.741413, 0, 1.0};
Point(77) = {-0.025971, -0.743590, 0, 1.0};
Point(78) = {-0.019104, -0.745531, 0, 1.0};
Point(79) = {-0.012528, -0.747180, 0, 1.0};
Point(80) = {-0.006284, -0.748481, 0, 1.0};
Point(81) = {-0.000379, -0.749380, 0, 1.0};
Point(82) = {0.005198, -0.749878, 0, 1.0};
Point(83) = {0.010430, -0.750000, 0, 1.0};
Point(84) = {0.015308, -0.749778, 0, 1.0};
Point(85) = {0.019799, -0.749266, 0, 1.0};
Point(86) = {0.023854, -0.748514, 0, 1.0};
Point(87) = {0.027426, -0.747560, 0, 1.0};
Point(88) = {0.030482, -0.746436, 0, 1.0};
Point(89) = {0.032988, -0.745192, 0, 1.0};
Point(90) = {0.034916, -0.743871, 0, 1.0};
Point(91) = {0.036255, -0.742543, 0, 1.0};
Point(92) = {0.036963, -0.741295, 0, 1.0};
Point(93) = {0.036948, -0.740315, 0, 1.0};
Point(94) = {0.035983, -0.739527, 0, 1.0};
Point(95) = {0.034003, -0.738703, 0, 1.0};
Point(96) = {0.031121, -0.737832, 0, 1.0};
Point(97) = {0.027377, -0.736911, 0, 1.0};
Point(98) = {0.022816, -0.735909, 0, 1.0};
Point(99) = {0.017513, -0.734796, 0, 1.0};
Point(100) = {0.011574, -0.733572, 0, 1.0};
Point(101) = {0.005093, -0.732253, 0, 1.0};
Point(102) = {-0.001837, -0.730864, 0, 1.0};
Point(103) = {-0.009125, -0.729441, 0, 1.0};
Point(104) = {-0.016698, -0.728007, 0, 1.0};
Point(105) = {-0.024466, -0.726586, 0, 1.0};
Point(106) = {-0.032347, -0.725195, 0, 1.0};
Point(107) = {-0.040251, -0.723854, 0, 1.0};
Point(108) = {-0.048090, -0.722577, 0, 1.0};
Point(109) = {-0.055778, -0.721386, 0, 1.0};
Point(110) = {-0.063228, -0.720298, 0, 1.0};
Point(111) = {-0.070369, -0.719338, 0, 1.0};
Point(112) = {-0.077134, -0.718511, 0, 1.0};
Point(113) = {-0.083460, -0.717822, 0, 1.0};
Point(114) = {-0.089283, -0.717262, 0, 1.0};
Point(115) = {-0.094540, -0.716825, 0, 1.0};
Point(116) = {-0.099169, -0.716498, 0, 1.0};
Point(117) = {-0.103096, -0.716274, 0, 1.0};
Point(118) = {-0.106291, -0.716163, 0, 1.0};
Point(119) = {-0.108725, -0.716116, 0, 1.0};
Point(120) = {-0.110301, -0.716055, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html