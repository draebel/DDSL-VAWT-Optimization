SetFactory("OpenCASCADE");

Point(1) = {0.110890, 0.716010, 0, 1.0};
Point(2) = {0.110344, 0.716151, 0, 1.0};
Point(3) = {0.108790, 0.716616, 0, 1.0};
Point(4) = {0.106384, 0.717397, 0, 1.0};
Point(5) = {0.103189, 0.718409, 0, 1.0};
Point(6) = {0.099191, 0.719621, 0, 1.0};
Point(7) = {0.094426, 0.721066, 0, 1.0};
Point(8) = {0.088987, 0.722757, 0, 1.0};
Point(9) = {0.082965, 0.724681, 0, 1.0};
Point(10) = {0.076461, 0.726816, 0, 1.0};
Point(11) = {0.069584, 0.729123, 0, 1.0};
Point(12) = {0.062436, 0.731557, 0, 1.0};
Point(13) = {0.055118, 0.734064, 0, 1.0};
Point(14) = {0.047730, 0.736586, 0, 1.0};
Point(15) = {0.040359, 0.739056, 0, 1.0};
Point(16) = {0.033086, 0.741411, 0, 1.0};
Point(17) = {0.025986, 0.743588, 0, 1.0};
Point(18) = {0.019118, 0.745530, 0, 1.0};
Point(19) = {0.012540, 0.747180, 0, 1.0};
Point(20) = {0.006294, 0.748481, 0, 1.0};
Point(21) = {0.000388, 0.749380, 0, 1.0};
Point(22) = {-0.005190, 0.749878, 0, 1.0};
Point(23) = {-0.010423, 0.750000, 0, 1.0};
Point(24) = {-0.015302, 0.749778, 0, 1.0};
Point(25) = {-0.019795, 0.749266, 0, 1.0};
Point(26) = {-0.023851, 0.748514, 0, 1.0};
Point(27) = {-0.027424, 0.747559, 0, 1.0};
Point(28) = {-0.030480, 0.746435, 0, 1.0};
Point(29) = {-0.032987, 0.745191, 0, 1.0};
Point(30) = {-0.034916, 0.743869, 0, 1.0};
Point(31) = {-0.036255, 0.742541, 0, 1.0};
Point(32) = {-0.036963, 0.741293, 0, 1.0};
Point(33) = {-0.036948, 0.740313, 0, 1.0};
Point(34) = {-0.035983, 0.739524, 0, 1.0};
Point(35) = {-0.034002, 0.738700, 0, 1.0};
Point(36) = {-0.031119, 0.737829, 0, 1.0};
Point(37) = {-0.027375, 0.736908, 0, 1.0};
Point(38) = {-0.022813, 0.735905, 0, 1.0};
Point(39) = {-0.017509, 0.734793, 0, 1.0};
Point(40) = {-0.011568, 0.733568, 0, 1.0};
Point(41) = {-0.005085, 0.732248, 0, 1.0};
Point(42) = {0.001846, 0.730859, 0, 1.0};
Point(43) = {0.009136, 0.729436, 0, 1.0};
Point(44) = {0.016711, 0.728002, 0, 1.0};
Point(45) = {0.024481, 0.726581, 0, 1.0};
Point(46) = {0.032364, 0.725189, 0, 1.0};
Point(47) = {0.040270, 0.723847, 0, 1.0};
Point(48) = {0.048110, 0.722571, 0, 1.0};
Point(49) = {0.055801, 0.721379, 0, 1.0};
Point(50) = {0.063252, 0.720290, 0, 1.0};
Point(51) = {0.070394, 0.719331, 0, 1.0};
Point(52) = {0.077161, 0.718504, 0, 1.0};
Point(53) = {0.083489, 0.717815, 0, 1.0};
Point(54) = {0.089313, 0.717254, 0, 1.0};
Point(55) = {0.094572, 0.716817, 0, 1.0};
Point(56) = {0.099202, 0.716490, 0, 1.0};
Point(57) = {0.103130, 0.716266, 0, 1.0};
Point(58) = {0.106325, 0.716154, 0, 1.0};
Point(59) = {0.108760, 0.716108, 0, 1.0};
Point(60) = {0.110337, 0.716047, 0, 1.0};
Point(61) = {-0.110890, -0.716010, 0, 1.0};
Point(62) = {-0.110344, -0.716151, 0, 1.0};
Point(63) = {-0.108790, -0.716616, 0, 1.0};
Point(64) = {-0.106384, -0.717397, 0, 1.0};
Point(65) = {-0.103189, -0.718409, 0, 1.0};
Point(66) = {-0.099191, -0.719621, 0, 1.0};
Point(67) = {-0.094426, -0.721066, 0, 1.0};
Point(68) = {-0.088987, -0.722757, 0, 1.0};
Point(69) = {-0.082965, -0.724681, 0, 1.0};
Point(70) = {-0.076461, -0.726816, 0, 1.0};
Point(71) = {-0.069584, -0.729123, 0, 1.0};
Point(72) = {-0.062436, -0.731557, 0, 1.0};
Point(73) = {-0.055118, -0.734064, 0, 1.0};
Point(74) = {-0.047730, -0.736586, 0, 1.0};
Point(75) = {-0.040359, -0.739056, 0, 1.0};
Point(76) = {-0.033086, -0.741411, 0, 1.0};
Point(77) = {-0.025986, -0.743588, 0, 1.0};
Point(78) = {-0.019118, -0.745530, 0, 1.0};
Point(79) = {-0.012540, -0.747180, 0, 1.0};
Point(80) = {-0.006294, -0.748481, 0, 1.0};
Point(81) = {-0.000388, -0.749380, 0, 1.0};
Point(82) = {0.005190, -0.749878, 0, 1.0};
Point(83) = {0.010423, -0.750000, 0, 1.0};
Point(84) = {0.015302, -0.749778, 0, 1.0};
Point(85) = {0.019795, -0.749266, 0, 1.0};
Point(86) = {0.023851, -0.748514, 0, 1.0};
Point(87) = {0.027424, -0.747559, 0, 1.0};
Point(88) = {0.030480, -0.746435, 0, 1.0};
Point(89) = {0.032987, -0.745191, 0, 1.0};
Point(90) = {0.034916, -0.743869, 0, 1.0};
Point(91) = {0.036255, -0.742541, 0, 1.0};
Point(92) = {0.036963, -0.741293, 0, 1.0};
Point(93) = {0.036948, -0.740313, 0, 1.0};
Point(94) = {0.035983, -0.739524, 0, 1.0};
Point(95) = {0.034002, -0.738700, 0, 1.0};
Point(96) = {0.031119, -0.737829, 0, 1.0};
Point(97) = {0.027375, -0.736908, 0, 1.0};
Point(98) = {0.022813, -0.735905, 0, 1.0};
Point(99) = {0.017509, -0.734793, 0, 1.0};
Point(100) = {0.011568, -0.733568, 0, 1.0};
Point(101) = {0.005085, -0.732248, 0, 1.0};
Point(102) = {-0.001846, -0.730859, 0, 1.0};
Point(103) = {-0.009136, -0.729436, 0, 1.0};
Point(104) = {-0.016711, -0.728002, 0, 1.0};
Point(105) = {-0.024481, -0.726581, 0, 1.0};
Point(106) = {-0.032364, -0.725189, 0, 1.0};
Point(107) = {-0.040270, -0.723847, 0, 1.0};
Point(108) = {-0.048110, -0.722571, 0, 1.0};
Point(109) = {-0.055801, -0.721379, 0, 1.0};
Point(110) = {-0.063252, -0.720290, 0, 1.0};
Point(111) = {-0.070394, -0.719331, 0, 1.0};
Point(112) = {-0.077161, -0.718504, 0, 1.0};
Point(113) = {-0.083489, -0.717815, 0, 1.0};
Point(114) = {-0.089313, -0.717254, 0, 1.0};
Point(115) = {-0.094572, -0.716817, 0, 1.0};
Point(116) = {-0.099202, -0.716490, 0, 1.0};
Point(117) = {-0.103130, -0.716266, 0, 1.0};
Point(118) = {-0.106325, -0.716154, 0, 1.0};
Point(119) = {-0.108760, -0.716108, 0, 1.0};
Point(120) = {-0.110337, -0.716047, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html