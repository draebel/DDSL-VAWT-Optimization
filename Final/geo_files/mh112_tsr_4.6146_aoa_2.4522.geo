SetFactory("OpenCASCADE");

Point(1) = {0.112400, 0.723277, 0, 1.0};
Point(2) = {0.111882, 0.723504, 0, 1.0};
Point(3) = {0.110427, 0.724184, 0, 1.0};
Point(4) = {0.108195, 0.725258, 0, 1.0};
Point(5) = {0.105252, 0.726611, 0, 1.0};
Point(6) = {0.101605, 0.728186, 0, 1.0};
Point(7) = {0.097302, 0.729974, 0, 1.0};
Point(8) = {0.092426, 0.731947, 0, 1.0};
Point(9) = {0.087063, 0.734051, 0, 1.0};
Point(10) = {0.081289, 0.736226, 0, 1.0};
Point(11) = {0.075176, 0.738411, 0, 1.0};
Point(12) = {0.068793, 0.740543, 0, 1.0};
Point(13) = {0.062205, 0.742559, 0, 1.0};
Point(14) = {0.055463, 0.744399, 0, 1.0};
Point(15) = {0.048609, 0.746018, 0, 1.0};
Point(16) = {0.041692, 0.747390, 0, 1.0};
Point(17) = {0.034767, 0.748491, 0, 1.0};
Point(18) = {0.027890, 0.749304, 0, 1.0};
Point(19) = {0.021120, 0.749813, 0, 1.0};
Point(20) = {0.014503, 0.750000, 0, 1.0};
Point(21) = {0.008076, 0.749871, 0, 1.0};
Point(22) = {0.001890, 0.749455, 0, 1.0};
Point(23) = {-0.003982, 0.748767, 0, 1.0};
Point(24) = {-0.009484, 0.747804, 0, 1.0};
Point(25) = {-0.014581, 0.746578, 0, 1.0};
Point(26) = {-0.019238, 0.745116, 0, 1.0};
Point(27) = {-0.023420, 0.743450, 0, 1.0};
Point(28) = {-0.027096, 0.741612, 0, 1.0};
Point(29) = {-0.030241, 0.739643, 0, 1.0};
Point(30) = {-0.032835, 0.737587, 0, 1.0};
Point(31) = {-0.034856, 0.735495, 0, 1.0};
Point(32) = {-0.036294, 0.733412, 0, 1.0};
Point(33) = {-0.037158, 0.731396, 0, 1.0};
Point(34) = {-0.037466, 0.729550, 0, 1.0};
Point(35) = {-0.037452, 0.729078, 0, 1.0};
Point(36) = {-0.037386, 0.728607, 0, 1.0};
Point(37) = {-0.037266, 0.728178, 0, 1.0};
Point(38) = {-0.037154, 0.727920, 0, 1.0};
Point(39) = {-0.037011, 0.727695, 0, 1.0};
Point(40) = {-0.036819, 0.727496, 0, 1.0};
Point(41) = {-0.036573, 0.727307, 0, 1.0};
Point(42) = {-0.036125, 0.727038, 0, 1.0};
Point(43) = {-0.035589, 0.726782, 0, 1.0};
Point(44) = {-0.033984, 0.726221, 0, 1.0};
Point(45) = {-0.031027, 0.725589, 0, 1.0};
Point(46) = {-0.027255, 0.725138, 0, 1.0};
Point(47) = {-0.022703, 0.724863, 0, 1.0};
Point(48) = {-0.017409, 0.724754, 0, 1.0};
Point(49) = {-0.011421, 0.724796, 0, 1.0};
Point(50) = {-0.004794, 0.724968, 0, 1.0};
Point(51) = {0.002404, 0.725245, 0, 1.0};
Point(52) = {0.010097, 0.725600, 0, 1.0};
Point(53) = {0.018201, 0.726008, 0, 1.0};
Point(54) = {0.026623, 0.726442, 0, 1.0};
Point(55) = {0.035275, 0.726877, 0, 1.0};
Point(56) = {0.044069, 0.727269, 0, 1.0};
Point(57) = {0.052888, 0.727557, 0, 1.0};
Point(58) = {0.061587, 0.727700, 0, 1.0};
Point(59) = {0.070020, 0.727676, 0, 1.0};
Point(60) = {0.078039, 0.727478, 0, 1.0};
Point(61) = {0.085502, 0.727112, 0, 1.0};
Point(62) = {0.092273, 0.726600, 0, 1.0};
Point(63) = {0.098231, 0.725977, 0, 1.0};
Point(64) = {0.103268, 0.725277, 0, 1.0};
Point(65) = {0.107268, 0.724551, 0, 1.0};
Point(66) = {0.110132, 0.723898, 0, 1.0};
Point(67) = {0.111836, 0.723441, 0, 1.0};
Point(68) = {-0.112400, -0.723277, 0, 1.0};
Point(69) = {-0.111882, -0.723504, 0, 1.0};
Point(70) = {-0.110427, -0.724184, 0, 1.0};
Point(71) = {-0.108195, -0.725258, 0, 1.0};
Point(72) = {-0.105252, -0.726611, 0, 1.0};
Point(73) = {-0.101605, -0.728186, 0, 1.0};
Point(74) = {-0.097302, -0.729974, 0, 1.0};
Point(75) = {-0.092426, -0.731947, 0, 1.0};
Point(76) = {-0.087063, -0.734051, 0, 1.0};
Point(77) = {-0.081289, -0.736226, 0, 1.0};
Point(78) = {-0.075176, -0.738411, 0, 1.0};
Point(79) = {-0.068793, -0.740543, 0, 1.0};
Point(80) = {-0.062205, -0.742559, 0, 1.0};
Point(81) = {-0.055463, -0.744399, 0, 1.0};
Point(82) = {-0.048609, -0.746018, 0, 1.0};
Point(83) = {-0.041692, -0.747390, 0, 1.0};
Point(84) = {-0.034767, -0.748491, 0, 1.0};
Point(85) = {-0.027890, -0.749304, 0, 1.0};
Point(86) = {-0.021120, -0.749813, 0, 1.0};
Point(87) = {-0.014503, -0.750000, 0, 1.0};
Point(88) = {-0.008076, -0.749871, 0, 1.0};
Point(89) = {-0.001890, -0.749455, 0, 1.0};
Point(90) = {0.003982, -0.748767, 0, 1.0};
Point(91) = {0.009484, -0.747804, 0, 1.0};
Point(92) = {0.014581, -0.746578, 0, 1.0};
Point(93) = {0.019238, -0.745116, 0, 1.0};
Point(94) = {0.023420, -0.743450, 0, 1.0};
Point(95) = {0.027096, -0.741612, 0, 1.0};
Point(96) = {0.030241, -0.739643, 0, 1.0};
Point(97) = {0.032835, -0.737587, 0, 1.0};
Point(98) = {0.034856, -0.735495, 0, 1.0};
Point(99) = {0.036294, -0.733412, 0, 1.0};
Point(100) = {0.037158, -0.731396, 0, 1.0};
Point(101) = {0.037466, -0.729550, 0, 1.0};
Point(102) = {0.037452, -0.729078, 0, 1.0};
Point(103) = {0.037386, -0.728607, 0, 1.0};
Point(104) = {0.037266, -0.728178, 0, 1.0};
Point(105) = {0.037154, -0.727920, 0, 1.0};
Point(106) = {0.037011, -0.727695, 0, 1.0};
Point(107) = {0.036819, -0.727496, 0, 1.0};
Point(108) = {0.036573, -0.727307, 0, 1.0};
Point(109) = {0.036125, -0.727038, 0, 1.0};
Point(110) = {0.035589, -0.726782, 0, 1.0};
Point(111) = {0.033984, -0.726221, 0, 1.0};
Point(112) = {0.031027, -0.725589, 0, 1.0};
Point(113) = {0.027255, -0.725138, 0, 1.0};
Point(114) = {0.022703, -0.724863, 0, 1.0};
Point(115) = {0.017409, -0.724754, 0, 1.0};
Point(116) = {0.011421, -0.724796, 0, 1.0};
Point(117) = {0.004794, -0.724968, 0, 1.0};
Point(118) = {-0.002404, -0.725245, 0, 1.0};
Point(119) = {-0.010097, -0.725600, 0, 1.0};
Point(120) = {-0.018201, -0.726008, 0, 1.0};
Point(121) = {-0.026623, -0.726442, 0, 1.0};
Point(122) = {-0.035275, -0.726877, 0, 1.0};
Point(123) = {-0.044069, -0.727269, 0, 1.0};
Point(124) = {-0.052888, -0.727557, 0, 1.0};
Point(125) = {-0.061587, -0.727700, 0, 1.0};
Point(126) = {-0.070020, -0.727676, 0, 1.0};
Point(127) = {-0.078039, -0.727478, 0, 1.0};
Point(128) = {-0.085502, -0.727112, 0, 1.0};
Point(129) = {-0.092273, -0.726600, 0, 1.0};
Point(130) = {-0.098231, -0.725977, 0, 1.0};
Point(131) = {-0.103268, -0.725277, 0, 1.0};
Point(132) = {-0.107268, -0.724551, 0, 1.0};
Point(133) = {-0.110132, -0.723898, 0, 1.0};
Point(134) = {-0.111836, -0.723441, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:51};
Spline(3) = {51:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:118};
Spline(7) = {118:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html