SetFactory("OpenCASCADE");

Point(1) = {0.074938, 0.723276, 0, 1.0};
Point(2) = {0.074420, 0.723503, 0, 1.0};
Point(3) = {0.072965, 0.724183, 0, 1.0};
Point(4) = {0.070733, 0.725257, 0, 1.0};
Point(5) = {0.067790, 0.726610, 0, 1.0};
Point(6) = {0.064143, 0.728185, 0, 1.0};
Point(7) = {0.059839, 0.729974, 0, 1.0};
Point(8) = {0.054964, 0.731946, 0, 1.0};
Point(9) = {0.049600, 0.734050, 0, 1.0};
Point(10) = {0.043826, 0.736226, 0, 1.0};
Point(11) = {0.037713, 0.738411, 0, 1.0};
Point(12) = {0.031330, 0.740543, 0, 1.0};
Point(13) = {0.024742, 0.742559, 0, 1.0};
Point(14) = {0.017999, 0.744398, 0, 1.0};
Point(15) = {0.011145, 0.746018, 0, 1.0};
Point(16) = {0.004228, 0.747389, 0, 1.0};
Point(17) = {-0.002697, 0.748491, 0, 1.0};
Point(18) = {-0.009574, 0.749304, 0, 1.0};
Point(19) = {-0.016344, 0.749813, 0, 1.0};
Point(20) = {-0.022961, 0.750000, 0, 1.0};
Point(21) = {-0.029389, 0.749871, 0, 1.0};
Point(22) = {-0.035575, 0.749455, 0, 1.0};
Point(23) = {-0.041447, 0.748767, 0, 1.0};
Point(24) = {-0.046949, 0.747804, 0, 1.0};
Point(25) = {-0.052046, 0.746578, 0, 1.0};
Point(26) = {-0.056703, 0.745116, 0, 1.0};
Point(27) = {-0.060885, 0.743450, 0, 1.0};
Point(28) = {-0.064562, 0.741612, 0, 1.0};
Point(29) = {-0.067707, 0.739643, 0, 1.0};
Point(30) = {-0.070300, 0.737587, 0, 1.0};
Point(31) = {-0.072322, 0.735495, 0, 1.0};
Point(32) = {-0.073760, 0.733411, 0, 1.0};
Point(33) = {-0.074624, 0.731395, 0, 1.0};
Point(34) = {-0.074931, 0.729550, 0, 1.0};
Point(35) = {-0.074917, 0.729077, 0, 1.0};
Point(36) = {-0.074851, 0.728607, 0, 1.0};
Point(37) = {-0.074731, 0.728177, 0, 1.0};
Point(38) = {-0.074620, 0.727920, 0, 1.0};
Point(39) = {-0.074476, 0.727694, 0, 1.0};
Point(40) = {-0.074284, 0.727495, 0, 1.0};
Point(41) = {-0.074039, 0.727307, 0, 1.0};
Point(42) = {-0.073591, 0.727037, 0, 1.0};
Point(43) = {-0.073055, 0.726782, 0, 1.0};
Point(44) = {-0.071450, 0.726221, 0, 1.0};
Point(45) = {-0.068493, 0.725589, 0, 1.0};
Point(46) = {-0.064720, 0.725138, 0, 1.0};
Point(47) = {-0.060168, 0.724862, 0, 1.0};
Point(48) = {-0.054874, 0.724753, 0, 1.0};
Point(49) = {-0.048886, 0.724795, 0, 1.0};
Point(50) = {-0.042259, 0.724967, 0, 1.0};
Point(51) = {-0.035060, 0.725244, 0, 1.0};
Point(52) = {-0.027367, 0.725600, 0, 1.0};
Point(53) = {-0.019264, 0.726008, 0, 1.0};
Point(54) = {-0.010841, 0.726442, 0, 1.0};
Point(55) = {-0.002189, 0.726877, 0, 1.0};
Point(56) = {0.006605, 0.727268, 0, 1.0};
Point(57) = {0.015424, 0.727557, 0, 1.0};
Point(58) = {0.024124, 0.727700, 0, 1.0};
Point(59) = {0.032557, 0.727676, 0, 1.0};
Point(60) = {0.040576, 0.727477, 0, 1.0};
Point(61) = {0.048039, 0.727112, 0, 1.0};
Point(62) = {0.054811, 0.726600, 0, 1.0};
Point(63) = {0.060769, 0.725976, 0, 1.0};
Point(64) = {0.065806, 0.725277, 0, 1.0};
Point(65) = {0.069806, 0.724550, 0, 1.0};
Point(66) = {0.072670, 0.723897, 0, 1.0};
Point(67) = {0.074374, 0.723440, 0, 1.0};
Point(68) = {-0.074938, -0.723276, 0, 1.0};
Point(69) = {-0.074420, -0.723503, 0, 1.0};
Point(70) = {-0.072965, -0.724183, 0, 1.0};
Point(71) = {-0.070733, -0.725257, 0, 1.0};
Point(72) = {-0.067790, -0.726610, 0, 1.0};
Point(73) = {-0.064143, -0.728185, 0, 1.0};
Point(74) = {-0.059839, -0.729974, 0, 1.0};
Point(75) = {-0.054964, -0.731946, 0, 1.0};
Point(76) = {-0.049600, -0.734050, 0, 1.0};
Point(77) = {-0.043826, -0.736226, 0, 1.0};
Point(78) = {-0.037713, -0.738411, 0, 1.0};
Point(79) = {-0.031330, -0.740543, 0, 1.0};
Point(80) = {-0.024742, -0.742559, 0, 1.0};
Point(81) = {-0.017999, -0.744398, 0, 1.0};
Point(82) = {-0.011145, -0.746018, 0, 1.0};
Point(83) = {-0.004228, -0.747389, 0, 1.0};
Point(84) = {0.002697, -0.748491, 0, 1.0};
Point(85) = {0.009574, -0.749304, 0, 1.0};
Point(86) = {0.016344, -0.749813, 0, 1.0};
Point(87) = {0.022961, -0.750000, 0, 1.0};
Point(88) = {0.029389, -0.749871, 0, 1.0};
Point(89) = {0.035575, -0.749455, 0, 1.0};
Point(90) = {0.041447, -0.748767, 0, 1.0};
Point(91) = {0.046949, -0.747804, 0, 1.0};
Point(92) = {0.052046, -0.746578, 0, 1.0};
Point(93) = {0.056703, -0.745116, 0, 1.0};
Point(94) = {0.060885, -0.743450, 0, 1.0};
Point(95) = {0.064562, -0.741612, 0, 1.0};
Point(96) = {0.067707, -0.739643, 0, 1.0};
Point(97) = {0.070300, -0.737587, 0, 1.0};
Point(98) = {0.072322, -0.735495, 0, 1.0};
Point(99) = {0.073760, -0.733411, 0, 1.0};
Point(100) = {0.074624, -0.731395, 0, 1.0};
Point(101) = {0.074931, -0.729550, 0, 1.0};
Point(102) = {0.074917, -0.729077, 0, 1.0};
Point(103) = {0.074851, -0.728607, 0, 1.0};
Point(104) = {0.074731, -0.728177, 0, 1.0};
Point(105) = {0.074620, -0.727920, 0, 1.0};
Point(106) = {0.074476, -0.727694, 0, 1.0};
Point(107) = {0.074284, -0.727495, 0, 1.0};
Point(108) = {0.074039, -0.727307, 0, 1.0};
Point(109) = {0.073591, -0.727037, 0, 1.0};
Point(110) = {0.073055, -0.726782, 0, 1.0};
Point(111) = {0.071450, -0.726221, 0, 1.0};
Point(112) = {0.068493, -0.725589, 0, 1.0};
Point(113) = {0.064720, -0.725138, 0, 1.0};
Point(114) = {0.060168, -0.724862, 0, 1.0};
Point(115) = {0.054874, -0.724753, 0, 1.0};
Point(116) = {0.048886, -0.724795, 0, 1.0};
Point(117) = {0.042259, -0.724967, 0, 1.0};
Point(118) = {0.035060, -0.725244, 0, 1.0};
Point(119) = {0.027367, -0.725600, 0, 1.0};
Point(120) = {0.019264, -0.726008, 0, 1.0};
Point(121) = {0.010841, -0.726442, 0, 1.0};
Point(122) = {0.002189, -0.726877, 0, 1.0};
Point(123) = {-0.006605, -0.727268, 0, 1.0};
Point(124) = {-0.015424, -0.727557, 0, 1.0};
Point(125) = {-0.024124, -0.727700, 0, 1.0};
Point(126) = {-0.032557, -0.727676, 0, 1.0};
Point(127) = {-0.040576, -0.727477, 0, 1.0};
Point(128) = {-0.048039, -0.727112, 0, 1.0};
Point(129) = {-0.054811, -0.726600, 0, 1.0};
Point(130) = {-0.060769, -0.725976, 0, 1.0};
Point(131) = {-0.065806, -0.725277, 0, 1.0};
Point(132) = {-0.069806, -0.724550, 0, 1.0};
Point(133) = {-0.072670, -0.723897, 0, 1.0};
Point(134) = {-0.074374, -0.723440, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:51};
Spline(3) = {51:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:118};
Spline(7) = {118:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html