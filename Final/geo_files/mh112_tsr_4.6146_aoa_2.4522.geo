SetFactory("OpenCASCADE");

Point(1) = {0.149817, 0.714369, 0, 1.0};
Point(2) = {0.149127, 0.714671, 0, 1.0};
Point(3) = {0.147187, 0.715578, 0, 1.0};
Point(4) = {0.144211, 0.717010, 0, 1.0};
Point(5) = {0.140287, 0.718814, 0, 1.0};
Point(6) = {0.135424, 0.720914, 0, 1.0};
Point(7) = {0.129686, 0.723299, 0, 1.0};
Point(8) = {0.123186, 0.725929, 0, 1.0};
Point(9) = {0.116034, 0.728734, 0, 1.0};
Point(10) = {0.108335, 0.731635, 0, 1.0};
Point(11) = {0.100185, 0.734548, 0, 1.0};
Point(12) = {0.091674, 0.737390, 0, 1.0};
Point(13) = {0.082890, 0.740079, 0, 1.0};
Point(14) = {0.073900, 0.742531, 0, 1.0};
Point(15) = {0.064761, 0.744690, 0, 1.0};
Point(16) = {0.055539, 0.746519, 0, 1.0};
Point(17) = {0.046305, 0.747988, 0, 1.0};
Point(18) = {0.037136, 0.749072, 0, 1.0};
Point(19) = {0.028109, 0.749750, 0, 1.0};
Point(20) = {0.019287, 0.750000, 0, 1.0};
Point(21) = {0.010717, 0.749829, 0, 1.0};
Point(22) = {0.002468, 0.749274, 0, 1.0};
Point(23) = {-0.005361, 0.748355, 0, 1.0};
Point(24) = {-0.012697, 0.747072, 0, 1.0};
Point(25) = {-0.019493, 0.745437, 0, 1.0};
Point(26) = {-0.025702, 0.743488, 0, 1.0};
Point(27) = {-0.031278, 0.741266, 0, 1.0};
Point(28) = {-0.036180, 0.738816, 0, 1.0};
Point(29) = {-0.040373, 0.736190, 0, 1.0};
Point(30) = {-0.043831, 0.733449, 0, 1.0};
Point(31) = {-0.046527, 0.730660, 0, 1.0};
Point(32) = {-0.048444, 0.727882, 0, 1.0};
Point(33) = {-0.049596, 0.725194, 0, 1.0};
Point(34) = {-0.050006, 0.722733, 0, 1.0};
Point(35) = {-0.049987, 0.722103, 0, 1.0};
Point(36) = {-0.049899, 0.721476, 0, 1.0};
Point(37) = {-0.049739, 0.720904, 0, 1.0};
Point(38) = {-0.049590, 0.720560, 0, 1.0};
Point(39) = {-0.049399, 0.720260, 0, 1.0};
Point(40) = {-0.049143, 0.719994, 0, 1.0};
Point(41) = {-0.048816, 0.719743, 0, 1.0};
Point(42) = {-0.048218, 0.719383, 0, 1.0};
Point(43) = {-0.047504, 0.719043, 0, 1.0};
Point(44) = {-0.045364, 0.718295, 0, 1.0};
Point(45) = {-0.041421, 0.717452, 0, 1.0};
Point(46) = {-0.036391, 0.716851, 0, 1.0};
Point(47) = {-0.030321, 0.716483, 0, 1.0};
Point(48) = {-0.023263, 0.716338, 0, 1.0};
Point(49) = {-0.015279, 0.716394, 0, 1.0};
Point(50) = {-0.006443, 0.716623, 0, 1.0};
Point(51) = {0.003155, 0.716992, 0, 1.0};
Point(52) = {0.013412, 0.717467, 0, 1.0};
Point(53) = {0.024217, 0.718011, 0, 1.0};
Point(54) = {0.035447, 0.718590, 0, 1.0};
Point(55) = {0.046983, 0.719170, 0, 1.0};
Point(56) = {0.058709, 0.719692, 0, 1.0};
Point(57) = {0.070467, 0.720076, 0, 1.0};
Point(58) = {0.082066, 0.720267, 0, 1.0};
Point(59) = {0.093310, 0.720235, 0, 1.0};
Point(60) = {0.104003, 0.719970, 0, 1.0};
Point(61) = {0.113953, 0.719482, 0, 1.0};
Point(62) = {0.122981, 0.718800, 0, 1.0};
Point(63) = {0.130926, 0.717969, 0, 1.0};
Point(64) = {0.137642, 0.717036, 0, 1.0};
Point(65) = {0.142975, 0.716067, 0, 1.0};
Point(66) = {0.146794, 0.715197, 0, 1.0};
Point(67) = {0.149065, 0.714587, 0, 1.0};
Point(68) = {-0.149817, -0.714369, 0, 1.0};
Point(69) = {-0.149127, -0.714671, 0, 1.0};
Point(70) = {-0.147187, -0.715578, 0, 1.0};
Point(71) = {-0.144211, -0.717010, 0, 1.0};
Point(72) = {-0.140287, -0.718814, 0, 1.0};
Point(73) = {-0.135424, -0.720914, 0, 1.0};
Point(74) = {-0.129686, -0.723299, 0, 1.0};
Point(75) = {-0.123186, -0.725929, 0, 1.0};
Point(76) = {-0.116034, -0.728734, 0, 1.0};
Point(77) = {-0.108335, -0.731635, 0, 1.0};
Point(78) = {-0.100185, -0.734548, 0, 1.0};
Point(79) = {-0.091674, -0.737390, 0, 1.0};
Point(80) = {-0.082890, -0.740079, 0, 1.0};
Point(81) = {-0.073900, -0.742531, 0, 1.0};
Point(82) = {-0.064761, -0.744690, 0, 1.0};
Point(83) = {-0.055539, -0.746519, 0, 1.0};
Point(84) = {-0.046305, -0.747988, 0, 1.0};
Point(85) = {-0.037136, -0.749072, 0, 1.0};
Point(86) = {-0.028109, -0.749750, 0, 1.0};
Point(87) = {-0.019287, -0.750000, 0, 1.0};
Point(88) = {-0.010717, -0.749829, 0, 1.0};
Point(89) = {-0.002468, -0.749274, 0, 1.0};
Point(90) = {0.005361, -0.748355, 0, 1.0};
Point(91) = {0.012697, -0.747072, 0, 1.0};
Point(92) = {0.019493, -0.745437, 0, 1.0};
Point(93) = {0.025702, -0.743488, 0, 1.0};
Point(94) = {0.031278, -0.741266, 0, 1.0};
Point(95) = {0.036180, -0.738816, 0, 1.0};
Point(96) = {0.040373, -0.736190, 0, 1.0};
Point(97) = {0.043831, -0.733449, 0, 1.0};
Point(98) = {0.046527, -0.730660, 0, 1.0};
Point(99) = {0.048444, -0.727882, 0, 1.0};
Point(100) = {0.049596, -0.725194, 0, 1.0};
Point(101) = {0.050006, -0.722733, 0, 1.0};
Point(102) = {0.049987, -0.722103, 0, 1.0};
Point(103) = {0.049899, -0.721476, 0, 1.0};
Point(104) = {0.049739, -0.720904, 0, 1.0};
Point(105) = {0.049590, -0.720560, 0, 1.0};
Point(106) = {0.049399, -0.720260, 0, 1.0};
Point(107) = {0.049143, -0.719994, 0, 1.0};
Point(108) = {0.048816, -0.719743, 0, 1.0};
Point(109) = {0.048218, -0.719383, 0, 1.0};
Point(110) = {0.047504, -0.719043, 0, 1.0};
Point(111) = {0.045364, -0.718295, 0, 1.0};
Point(112) = {0.041421, -0.717452, 0, 1.0};
Point(113) = {0.036391, -0.716851, 0, 1.0};
Point(114) = {0.030321, -0.716483, 0, 1.0};
Point(115) = {0.023263, -0.716338, 0, 1.0};
Point(116) = {0.015279, -0.716394, 0, 1.0};
Point(117) = {0.006443, -0.716623, 0, 1.0};
Point(118) = {-0.003155, -0.716992, 0, 1.0};
Point(119) = {-0.013412, -0.717467, 0, 1.0};
Point(120) = {-0.024217, -0.718011, 0, 1.0};
Point(121) = {-0.035447, -0.718590, 0, 1.0};
Point(122) = {-0.046983, -0.719170, 0, 1.0};
Point(123) = {-0.058709, -0.719692, 0, 1.0};
Point(124) = {-0.070467, -0.720076, 0, 1.0};
Point(125) = {-0.082066, -0.720267, 0, 1.0};
Point(126) = {-0.093310, -0.720235, 0, 1.0};
Point(127) = {-0.104003, -0.719970, 0, 1.0};
Point(128) = {-0.113953, -0.719482, 0, 1.0};
Point(129) = {-0.122981, -0.718800, 0, 1.0};
Point(130) = {-0.130926, -0.717969, 0, 1.0};
Point(131) = {-0.137642, -0.717036, 0, 1.0};
Point(132) = {-0.142975, -0.716067, 0, 1.0};
Point(133) = {-0.146794, -0.715197, 0, 1.0};
Point(134) = {-0.149065, -0.714587, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:51};
Spline(3) = {51:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:118};
Spline(7) = {118:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 46 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html