SetFactory("OpenCASCADE");

Point(1) = {0.074908, 0.732184, 0, 1.0};
Point(2) = {0.074564, 0.732336, 0, 1.0};
Point(3) = {0.073593, 0.732789, 0, 1.0};
Point(4) = {0.072105, 0.733505, 0, 1.0};
Point(5) = {0.070143, 0.734407, 0, 1.0};
Point(6) = {0.067712, 0.735457, 0, 1.0};
Point(7) = {0.064843, 0.736649, 0, 1.0};
Point(8) = {0.061593, 0.737964, 0, 1.0};
Point(9) = {0.058017, 0.739367, 0, 1.0};
Point(10) = {0.054168, 0.740817, 0, 1.0};
Point(11) = {0.050092, 0.742274, 0, 1.0};
Point(12) = {0.045837, 0.743695, 0, 1.0};
Point(13) = {0.041445, 0.745039, 0, 1.0};
Point(14) = {0.036950, 0.746266, 0, 1.0};
Point(15) = {0.032381, 0.747345, 0, 1.0};
Point(16) = {0.027769, 0.748260, 0, 1.0};
Point(17) = {0.023153, 0.748994, 0, 1.0};
Point(18) = {0.018568, 0.749536, 0, 1.0};
Point(19) = {0.014055, 0.749875, 0, 1.0};
Point(20) = {0.009644, 0.750000, 0, 1.0};
Point(21) = {0.005358, 0.749914, 0, 1.0};
Point(22) = {0.001234, 0.749637, 0, 1.0};
Point(23) = {-0.002681, 0.749178, 0, 1.0};
Point(24) = {-0.006349, 0.748536, 0, 1.0};
Point(25) = {-0.009746, 0.747719, 0, 1.0};
Point(26) = {-0.012851, 0.746744, 0, 1.0};
Point(27) = {-0.015639, 0.745633, 0, 1.0};
Point(28) = {-0.018090, 0.744408, 0, 1.0};
Point(29) = {-0.020187, 0.743095, 0, 1.0};
Point(30) = {-0.021916, 0.741725, 0, 1.0};
Point(31) = {-0.023263, 0.740330, 0, 1.0};
Point(32) = {-0.024222, 0.738941, 0, 1.0};
Point(33) = {-0.024798, 0.737597, 0, 1.0};
Point(34) = {-0.025003, 0.736367, 0, 1.0};
Point(35) = {-0.024993, 0.736052, 0, 1.0};
Point(36) = {-0.024950, 0.735738, 0, 1.0};
Point(37) = {-0.024870, 0.735452, 0, 1.0};
Point(38) = {-0.024795, 0.735280, 0, 1.0};
Point(39) = {-0.024700, 0.735130, 0, 1.0};
Point(40) = {-0.024572, 0.734997, 0, 1.0};
Point(41) = {-0.024408, 0.734871, 0, 1.0};
Point(42) = {-0.024109, 0.734692, 0, 1.0};
Point(43) = {-0.023752, 0.734521, 0, 1.0};
Point(44) = {-0.022682, 0.734147, 0, 1.0};
Point(45) = {-0.020711, 0.733726, 0, 1.0};
Point(46) = {-0.018196, 0.733425, 0, 1.0};
Point(47) = {-0.015161, 0.733242, 0, 1.0};
Point(48) = {-0.011632, 0.733169, 0, 1.0};
Point(49) = {-0.007639, 0.733197, 0, 1.0};
Point(50) = {-0.003222, 0.733312, 0, 1.0};
Point(51) = {0.001577, 0.733496, 0, 1.0};
Point(52) = {0.006706, 0.733733, 0, 1.0};
Point(53) = {0.012108, 0.734005, 0, 1.0};
Point(54) = {0.017723, 0.734295, 0, 1.0};
Point(55) = {0.023492, 0.734585, 0, 1.0};
Point(56) = {0.029354, 0.734846, 0, 1.0};
Point(57) = {0.035233, 0.735038, 0, 1.0};
Point(58) = {0.041033, 0.735133, 0, 1.0};
Point(59) = {0.046655, 0.735117, 0, 1.0};
Point(60) = {0.052001, 0.734985, 0, 1.0};
Point(61) = {0.056977, 0.734741, 0, 1.0};
Point(62) = {0.061491, 0.734400, 0, 1.0};
Point(63) = {0.065463, 0.733985, 0, 1.0};
Point(64) = {0.068821, 0.733518, 0, 1.0};
Point(65) = {0.071487, 0.733034, 0, 1.0};
Point(66) = {0.073397, 0.732598, 0, 1.0};
Point(67) = {0.074533, 0.732294, 0, 1.0};
Point(68) = {-0.074908, -0.732184, 0, 1.0};
Point(69) = {-0.074564, -0.732336, 0, 1.0};
Point(70) = {-0.073593, -0.732789, 0, 1.0};
Point(71) = {-0.072105, -0.733505, 0, 1.0};
Point(72) = {-0.070143, -0.734407, 0, 1.0};
Point(73) = {-0.067712, -0.735457, 0, 1.0};
Point(74) = {-0.064843, -0.736649, 0, 1.0};
Point(75) = {-0.061593, -0.737964, 0, 1.0};
Point(76) = {-0.058017, -0.739367, 0, 1.0};
Point(77) = {-0.054168, -0.740817, 0, 1.0};
Point(78) = {-0.050092, -0.742274, 0, 1.0};
Point(79) = {-0.045837, -0.743695, 0, 1.0};
Point(80) = {-0.041445, -0.745039, 0, 1.0};
Point(81) = {-0.036950, -0.746266, 0, 1.0};
Point(82) = {-0.032381, -0.747345, 0, 1.0};
Point(83) = {-0.027769, -0.748260, 0, 1.0};
Point(84) = {-0.023153, -0.748994, 0, 1.0};
Point(85) = {-0.018568, -0.749536, 0, 1.0};
Point(86) = {-0.014055, -0.749875, 0, 1.0};
Point(87) = {-0.009644, -0.750000, 0, 1.0};
Point(88) = {-0.005358, -0.749914, 0, 1.0};
Point(89) = {-0.001234, -0.749637, 0, 1.0};
Point(90) = {0.002681, -0.749178, 0, 1.0};
Point(91) = {0.006349, -0.748536, 0, 1.0};
Point(92) = {0.009746, -0.747719, 0, 1.0};
Point(93) = {0.012851, -0.746744, 0, 1.0};
Point(94) = {0.015639, -0.745633, 0, 1.0};
Point(95) = {0.018090, -0.744408, 0, 1.0};
Point(96) = {0.020187, -0.743095, 0, 1.0};
Point(97) = {0.021916, -0.741725, 0, 1.0};
Point(98) = {0.023263, -0.740330, 0, 1.0};
Point(99) = {0.024222, -0.738941, 0, 1.0};
Point(100) = {0.024798, -0.737597, 0, 1.0};
Point(101) = {0.025003, -0.736367, 0, 1.0};
Point(102) = {0.024993, -0.736052, 0, 1.0};
Point(103) = {0.024950, -0.735738, 0, 1.0};
Point(104) = {0.024870, -0.735452, 0, 1.0};
Point(105) = {0.024795, -0.735280, 0, 1.0};
Point(106) = {0.024700, -0.735130, 0, 1.0};
Point(107) = {0.024572, -0.734997, 0, 1.0};
Point(108) = {0.024408, -0.734871, 0, 1.0};
Point(109) = {0.024109, -0.734692, 0, 1.0};
Point(110) = {0.023752, -0.734521, 0, 1.0};
Point(111) = {0.022682, -0.734147, 0, 1.0};
Point(112) = {0.020711, -0.733726, 0, 1.0};
Point(113) = {0.018196, -0.733425, 0, 1.0};
Point(114) = {0.015161, -0.733242, 0, 1.0};
Point(115) = {0.011632, -0.733169, 0, 1.0};
Point(116) = {0.007639, -0.733197, 0, 1.0};
Point(117) = {0.003222, -0.733312, 0, 1.0};
Point(118) = {-0.001577, -0.733496, 0, 1.0};
Point(119) = {-0.006706, -0.733733, 0, 1.0};
Point(120) = {-0.012108, -0.734005, 0, 1.0};
Point(121) = {-0.017723, -0.734295, 0, 1.0};
Point(122) = {-0.023492, -0.734585, 0, 1.0};
Point(123) = {-0.029354, -0.734846, 0, 1.0};
Point(124) = {-0.035233, -0.735038, 0, 1.0};
Point(125) = {-0.041033, -0.735133, 0, 1.0};
Point(126) = {-0.046655, -0.735117, 0, 1.0};
Point(127) = {-0.052001, -0.734985, 0, 1.0};
Point(128) = {-0.056977, -0.734741, 0, 1.0};
Point(129) = {-0.061491, -0.734400, 0, 1.0};
Point(130) = {-0.065463, -0.733985, 0, 1.0};
Point(131) = {-0.068821, -0.733518, 0, 1.0};
Point(132) = {-0.071487, -0.733034, 0, 1.0};
Point(133) = {-0.073397, -0.732598, 0, 1.0};
Point(134) = {-0.074533, -0.732294, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:51};
Spline(3) = {51:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:118};
Spline(7) = {118:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 23 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html