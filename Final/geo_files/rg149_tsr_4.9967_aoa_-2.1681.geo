SetFactory("OpenCASCADE");

Point(1) = {0.112393, 0.744454, 0, 1.0};
Point(2) = {0.111879, 0.744505, 0, 1.0};
Point(3) = {0.110363, 0.744693, 0, 1.0};
Point(4) = {0.107907, 0.745019, 0, 1.0};
Point(5) = {0.104576, 0.745418, 0, 1.0};
Point(6) = {0.100426, 0.745852, 0, 1.0};
Point(7) = {0.095526, 0.746330, 0, 1.0};
Point(8) = {0.089968, 0.746839, 0, 1.0};
Point(9) = {0.083848, 0.747362, 0, 1.0};
Point(10) = {0.077271, 0.747883, 0, 1.0};
Point(11) = {0.070323, 0.748383, 0, 1.0};
Point(12) = {0.063032, 0.748844, 0, 1.0};
Point(13) = {0.055433, 0.749252, 0, 1.0};
Point(14) = {0.047620, 0.749590, 0, 1.0};
Point(15) = {0.039688, 0.749839, 0, 1.0};
Point(16) = {0.031727, 0.749982, 0, 1.0};
Point(17) = {0.023835, 0.750000, 0, 1.0};
Point(18) = {0.016102, 0.749883, 0, 1.0};
Point(19) = {0.008620, 0.749618, 0, 1.0};
Point(20) = {0.001474, 0.749201, 0, 1.0};
Point(21) = {-0.005255, 0.748630, 0, 1.0};
Point(22) = {-0.011488, 0.747906, 0, 1.0};
Point(23) = {-0.017164, 0.747038, 0, 1.0};
Point(24) = {-0.022223, 0.746126, 0, 1.0};
Point(25) = {-0.026613, 0.745083, 0, 1.0};
Point(26) = {-0.030294, 0.743958, 0, 1.0};
Point(27) = {-0.033241, 0.742766, 0, 1.0};
Point(28) = {-0.035432, 0.741527, 0, 1.0};
Point(29) = {-0.036858, 0.740272, 0, 1.0};
Point(30) = {-0.037500, 0.738780, 0, 1.0};
Point(31) = {-0.036767, 0.737847, 0, 1.0};
Point(32) = {-0.035266, 0.737153, 0, 1.0};
Point(33) = {-0.033006, 0.736564, 0, 1.0};
Point(34) = {-0.029997, 0.736096, 0, 1.0};
Point(35) = {-0.026260, 0.735757, 0, 1.0};
Point(36) = {-0.021822, 0.735542, 0, 1.0};
Point(37) = {-0.016725, 0.735452, 0, 1.0};
Point(38) = {-0.011017, 0.735473, 0, 1.0};
Point(39) = {-0.004761, 0.735601, 0, 1.0};
Point(40) = {0.001981, 0.735824, 0, 1.0};
Point(41) = {0.009131, 0.736127, 0, 1.0};
Point(42) = {0.016608, 0.736506, 0, 1.0};
Point(43) = {0.024330, 0.736946, 0, 1.0};
Point(44) = {0.032202, 0.737436, 0, 1.0};
Point(45) = {0.040138, 0.737969, 0, 1.0};
Point(46) = {0.048039, 0.738535, 0, 1.0};
Point(47) = {0.055816, 0.739133, 0, 1.0};
Point(48) = {0.063376, 0.739754, 0, 1.0};
Point(49) = {0.070625, 0.740419, 0, 1.0};
Point(50) = {0.077526, 0.741145, 0, 1.0};
Point(51) = {0.084055, 0.741886, 0, 1.0};
Point(52) = {0.090130, 0.742568, 0, 1.0};
Point(53) = {0.095646, 0.743154, 0, 1.0};
Point(54) = {0.100510, 0.743626, 0, 1.0};
Point(55) = {0.104630, 0.743982, 0, 1.0};
Point(56) = {0.107937, 0.744235, 0, 1.0};
Point(57) = {0.110375, 0.744387, 0, 1.0};
Point(58) = {0.111881, 0.744445, 0, 1.0};
Point(59) = {-0.112393, -0.744454, 0, 1.0};
Point(60) = {-0.111879, -0.744505, 0, 1.0};
Point(61) = {-0.110363, -0.744693, 0, 1.0};
Point(62) = {-0.107907, -0.745019, 0, 1.0};
Point(63) = {-0.104576, -0.745418, 0, 1.0};
Point(64) = {-0.100426, -0.745852, 0, 1.0};
Point(65) = {-0.095526, -0.746330, 0, 1.0};
Point(66) = {-0.089968, -0.746839, 0, 1.0};
Point(67) = {-0.083848, -0.747362, 0, 1.0};
Point(68) = {-0.077271, -0.747883, 0, 1.0};
Point(69) = {-0.070323, -0.748383, 0, 1.0};
Point(70) = {-0.063032, -0.748844, 0, 1.0};
Point(71) = {-0.055433, -0.749252, 0, 1.0};
Point(72) = {-0.047620, -0.749590, 0, 1.0};
Point(73) = {-0.039688, -0.749839, 0, 1.0};
Point(74) = {-0.031727, -0.749982, 0, 1.0};
Point(75) = {-0.023835, -0.750000, 0, 1.0};
Point(76) = {-0.016102, -0.749883, 0, 1.0};
Point(77) = {-0.008620, -0.749618, 0, 1.0};
Point(78) = {-0.001474, -0.749201, 0, 1.0};
Point(79) = {0.005255, -0.748630, 0, 1.0};
Point(80) = {0.011488, -0.747906, 0, 1.0};
Point(81) = {0.017164, -0.747038, 0, 1.0};
Point(82) = {0.022223, -0.746126, 0, 1.0};
Point(83) = {0.026613, -0.745083, 0, 1.0};
Point(84) = {0.030294, -0.743958, 0, 1.0};
Point(85) = {0.033241, -0.742766, 0, 1.0};
Point(86) = {0.035432, -0.741527, 0, 1.0};
Point(87) = {0.036858, -0.740272, 0, 1.0};
Point(88) = {0.037500, -0.738780, 0, 1.0};
Point(89) = {0.036767, -0.737847, 0, 1.0};
Point(90) = {0.035266, -0.737153, 0, 1.0};
Point(91) = {0.033006, -0.736564, 0, 1.0};
Point(92) = {0.029997, -0.736096, 0, 1.0};
Point(93) = {0.026260, -0.735757, 0, 1.0};
Point(94) = {0.021822, -0.735542, 0, 1.0};
Point(95) = {0.016725, -0.735452, 0, 1.0};
Point(96) = {0.011017, -0.735473, 0, 1.0};
Point(97) = {0.004761, -0.735601, 0, 1.0};
Point(98) = {-0.001981, -0.735824, 0, 1.0};
Point(99) = {-0.009131, -0.736127, 0, 1.0};
Point(100) = {-0.016608, -0.736506, 0, 1.0};
Point(101) = {-0.024330, -0.736946, 0, 1.0};
Point(102) = {-0.032202, -0.737436, 0, 1.0};
Point(103) = {-0.040138, -0.737969, 0, 1.0};
Point(104) = {-0.048039, -0.738535, 0, 1.0};
Point(105) = {-0.055816, -0.739133, 0, 1.0};
Point(106) = {-0.063376, -0.739754, 0, 1.0};
Point(107) = {-0.070625, -0.740419, 0, 1.0};
Point(108) = {-0.077526, -0.741145, 0, 1.0};
Point(109) = {-0.084055, -0.741886, 0, 1.0};
Point(110) = {-0.090130, -0.742568, 0, 1.0};
Point(111) = {-0.095646, -0.743154, 0, 1.0};
Point(112) = {-0.100510, -0.743626, 0, 1.0};
Point(113) = {-0.104630, -0.743982, 0, 1.0};
Point(114) = {-0.107937, -0.744235, 0, 1.0};
Point(115) = {-0.110375, -0.744387, 0, 1.0};
Point(116) = {-0.111881, -0.744445, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:58};
Spline(4) = {58,1};

// Lines: second blade (splines 5-8)
Spline(5) = {59:78};
Spline(6) = {78:99};
Spline(7) = {99:116};
Spline(8) = {116,59};

// Outer domain (points 20001-4 and lines)
Point(117) = {-13.50000000, -15.00000000, 0, 1.0};
Point(118) = {-13.50000000, 15.00000000, 0, 1.0};
Point(119) = {13.50000000, 15.00000000, 0, 1.0};
Point(120) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {117, 118};
Line(12) = {118, 119};
Line(13) = {119, 120};
Line(14) = {117, 120};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html