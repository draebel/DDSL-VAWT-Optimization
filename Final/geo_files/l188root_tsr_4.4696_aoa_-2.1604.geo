SetFactory("OpenCASCADE");

Point(1) = {0.149847, 0.736650, 0, 1.0};
Point(2) = {0.149602, 0.736691, 0, 1.0};
Point(3) = {0.148867, 0.736817, 0, 1.0};
Point(4) = {0.147646, 0.737028, 0, 1.0};
Point(5) = {0.145945, 0.737329, 0, 1.0};
Point(6) = {0.143772, 0.737721, 0, 1.0};
Point(7) = {0.141137, 0.738206, 0, 1.0};
Point(8) = {0.138053, 0.738784, 0, 1.0};
Point(9) = {0.134536, 0.739453, 0, 1.0};
Point(10) = {0.130601, 0.740207, 0, 1.0};
Point(11) = {0.126270, 0.741038, 0, 1.0};
Point(12) = {0.121562, 0.741933, 0, 1.0};
Point(13) = {0.116502, 0.742874, 0, 1.0};
Point(14) = {0.111115, 0.743833, 0, 1.0};
Point(15) = {0.105429, 0.744761, 0, 1.0};
Point(16) = {0.099472, 0.745646, 0, 1.0};
Point(17) = {0.093273, 0.746489, 0, 1.0};
Point(18) = {0.086862, 0.747278, 0, 1.0};
Point(19) = {0.080272, 0.747998, 0, 1.0};
Point(20) = {0.073534, 0.748633, 0, 1.0};
Point(21) = {0.066681, 0.749166, 0, 1.0};
Point(22) = {0.059749, 0.749582, 0, 1.0};
Point(23) = {0.052770, 0.749864, 0, 1.0};
Point(24) = {0.045780, 0.750000, 0, 1.0};
Point(25) = {0.038813, 0.749978, 0, 1.0};
Point(26) = {0.031903, 0.749789, 0, 1.0};
Point(27) = {0.025085, 0.749433, 0, 1.0};
Point(28) = {0.018388, 0.748957, 0, 1.0};
Point(29) = {0.011846, 0.748379, 0, 1.0};
Point(30) = {0.005491, 0.747707, 0, 1.0};
Point(31) = {-0.000648, 0.746950, 0, 1.0};
Point(32) = {-0.006540, 0.746117, 0, 1.0};
Point(33) = {-0.012157, 0.745214, 0, 1.0};
Point(34) = {-0.017471, 0.744247, 0, 1.0};
Point(35) = {-0.022457, 0.743222, 0, 1.0};
Point(36) = {-0.027090, 0.742141, 0, 1.0};
Point(37) = {-0.031347, 0.741007, 0, 1.0};
Point(38) = {-0.035209, 0.739823, 0, 1.0};
Point(39) = {-0.038655, 0.738590, 0, 1.0};
Point(40) = {-0.041668, 0.737309, 0, 1.0};
Point(41) = {-0.044235, 0.735983, 0, 1.0};
Point(42) = {-0.046342, 0.734613, 0, 1.0};
Point(43) = {-0.047978, 0.733204, 0, 1.0};
Point(44) = {-0.049137, 0.731762, 0, 1.0};
Point(45) = {-0.049812, 0.730298, 0, 1.0};
Point(46) = {-0.050000, 0.728831, 0, 1.0};
Point(47) = {-0.049705, 0.727482, 0, 1.0};
Point(48) = {-0.048931, 0.726303, 0, 1.0};
Point(49) = {-0.047679, 0.725270, 0, 1.0};
Point(50) = {-0.045955, 0.724373, 0, 1.0};
Point(51) = {-0.043768, 0.723600, 0, 1.0};
Point(52) = {-0.041126, 0.722941, 0, 1.0};
Point(53) = {-0.038043, 0.722387, 0, 1.0};
Point(54) = {-0.034534, 0.721928, 0, 1.0};
Point(55) = {-0.030614, 0.721556, 0, 1.0};
Point(56) = {-0.026302, 0.721263, 0, 1.0};
Point(57) = {-0.021620, 0.721042, 0, 1.0};
Point(58) = {-0.016590, 0.720887, 0, 1.0};
Point(59) = {-0.011236, 0.720795, 0, 1.0};
Point(60) = {-0.005583, 0.720762, 0, 1.0};
Point(61) = {0.000339, 0.720786, 0, 1.0};
Point(62) = {0.006503, 0.720869, 0, 1.0};
Point(63) = {0.012879, 0.721012, 0, 1.0};
Point(64) = {0.019435, 0.721218, 0, 1.0};
Point(65) = {0.026139, 0.721489, 0, 1.0};
Point(66) = {0.032958, 0.721839, 0, 1.0};
Point(67) = {0.039857, 0.722309, 0, 1.0};
Point(68) = {0.046803, 0.722894, 0, 1.0};
Point(69) = {0.053762, 0.723581, 0, 1.0};
Point(70) = {0.060700, 0.724356, 0, 1.0};
Point(71) = {0.067585, 0.725200, 0, 1.0};
Point(72) = {0.074384, 0.726097, 0, 1.0};
Point(73) = {0.081063, 0.727025, 0, 1.0};
Point(74) = {0.087591, 0.727965, 0, 1.0};
Point(75) = {0.093937, 0.728897, 0, 1.0};
Point(76) = {0.100070, 0.729802, 0, 1.0};
Point(77) = {0.105961, 0.730658, 0, 1.0};
Point(78) = {0.111583, 0.731437, 0, 1.0};
Point(79) = {0.116908, 0.732122, 0, 1.0};
Point(80) = {0.121909, 0.732743, 0, 1.0};
Point(81) = {0.126561, 0.733307, 0, 1.0};
Point(82) = {0.130842, 0.733819, 0, 1.0};
Point(83) = {0.134731, 0.734280, 0, 1.0};
Point(84) = {0.138208, 0.734691, 0, 1.0};
Point(85) = {0.141256, 0.735051, 0, 1.0};
Point(86) = {0.143861, 0.735361, 0, 1.0};
Point(87) = {0.146010, 0.735619, 0, 1.0};
Point(88) = {0.147692, 0.735822, 0, 1.0};
Point(89) = {0.148899, 0.735970, 0, 1.0};
Point(90) = {0.149626, 0.736060, 0, 1.0};
Point(91) = {0.149868, 0.736091, 0, 1.0};
Point(92) = {-0.149847, -0.736650, 0, 1.0};
Point(93) = {-0.149602, -0.736691, 0, 1.0};
Point(94) = {-0.148867, -0.736817, 0, 1.0};
Point(95) = {-0.147646, -0.737028, 0, 1.0};
Point(96) = {-0.145945, -0.737329, 0, 1.0};
Point(97) = {-0.143772, -0.737721, 0, 1.0};
Point(98) = {-0.141137, -0.738206, 0, 1.0};
Point(99) = {-0.138053, -0.738784, 0, 1.0};
Point(100) = {-0.134536, -0.739453, 0, 1.0};
Point(101) = {-0.130601, -0.740207, 0, 1.0};
Point(102) = {-0.126270, -0.741038, 0, 1.0};
Point(103) = {-0.121562, -0.741933, 0, 1.0};
Point(104) = {-0.116502, -0.742874, 0, 1.0};
Point(105) = {-0.111115, -0.743833, 0, 1.0};
Point(106) = {-0.105429, -0.744761, 0, 1.0};
Point(107) = {-0.099472, -0.745646, 0, 1.0};
Point(108) = {-0.093273, -0.746489, 0, 1.0};
Point(109) = {-0.086862, -0.747278, 0, 1.0};
Point(110) = {-0.080272, -0.747998, 0, 1.0};
Point(111) = {-0.073534, -0.748633, 0, 1.0};
Point(112) = {-0.066681, -0.749166, 0, 1.0};
Point(113) = {-0.059749, -0.749582, 0, 1.0};
Point(114) = {-0.052770, -0.749864, 0, 1.0};
Point(115) = {-0.045780, -0.750000, 0, 1.0};
Point(116) = {-0.038813, -0.749978, 0, 1.0};
Point(117) = {-0.031903, -0.749789, 0, 1.0};
Point(118) = {-0.025085, -0.749433, 0, 1.0};
Point(119) = {-0.018388, -0.748957, 0, 1.0};
Point(120) = {-0.011846, -0.748379, 0, 1.0};
Point(121) = {-0.005491, -0.747707, 0, 1.0};
Point(122) = {0.000648, -0.746950, 0, 1.0};
Point(123) = {0.006540, -0.746117, 0, 1.0};
Point(124) = {0.012157, -0.745214, 0, 1.0};
Point(125) = {0.017471, -0.744247, 0, 1.0};
Point(126) = {0.022457, -0.743222, 0, 1.0};
Point(127) = {0.027090, -0.742141, 0, 1.0};
Point(128) = {0.031347, -0.741007, 0, 1.0};
Point(129) = {0.035209, -0.739823, 0, 1.0};
Point(130) = {0.038655, -0.738590, 0, 1.0};
Point(131) = {0.041668, -0.737309, 0, 1.0};
Point(132) = {0.044235, -0.735983, 0, 1.0};
Point(133) = {0.046342, -0.734613, 0, 1.0};
Point(134) = {0.047978, -0.733204, 0, 1.0};
Point(135) = {0.049137, -0.731762, 0, 1.0};
Point(136) = {0.049812, -0.730298, 0, 1.0};
Point(137) = {0.050000, -0.728831, 0, 1.0};
Point(138) = {0.049705, -0.727482, 0, 1.0};
Point(139) = {0.048931, -0.726303, 0, 1.0};
Point(140) = {0.047679, -0.725270, 0, 1.0};
Point(141) = {0.045955, -0.724373, 0, 1.0};
Point(142) = {0.043768, -0.723600, 0, 1.0};
Point(143) = {0.041126, -0.722941, 0, 1.0};
Point(144) = {0.038043, -0.722387, 0, 1.0};
Point(145) = {0.034534, -0.721928, 0, 1.0};
Point(146) = {0.030614, -0.721556, 0, 1.0};
Point(147) = {0.026302, -0.721263, 0, 1.0};
Point(148) = {0.021620, -0.721042, 0, 1.0};
Point(149) = {0.016590, -0.720887, 0, 1.0};
Point(150) = {0.011236, -0.720795, 0, 1.0};
Point(151) = {0.005583, -0.720762, 0, 1.0};
Point(152) = {-0.000339, -0.720786, 0, 1.0};
Point(153) = {-0.006503, -0.720869, 0, 1.0};
Point(154) = {-0.012879, -0.721012, 0, 1.0};
Point(155) = {-0.019435, -0.721218, 0, 1.0};
Point(156) = {-0.026139, -0.721489, 0, 1.0};
Point(157) = {-0.032958, -0.721839, 0, 1.0};
Point(158) = {-0.039857, -0.722309, 0, 1.0};
Point(159) = {-0.046803, -0.722894, 0, 1.0};
Point(160) = {-0.053762, -0.723581, 0, 1.0};
Point(161) = {-0.060700, -0.724356, 0, 1.0};
Point(162) = {-0.067585, -0.725200, 0, 1.0};
Point(163) = {-0.074384, -0.726097, 0, 1.0};
Point(164) = {-0.081063, -0.727025, 0, 1.0};
Point(165) = {-0.087591, -0.727965, 0, 1.0};
Point(166) = {-0.093937, -0.728897, 0, 1.0};
Point(167) = {-0.100070, -0.729802, 0, 1.0};
Point(168) = {-0.105961, -0.730658, 0, 1.0};
Point(169) = {-0.111583, -0.731437, 0, 1.0};
Point(170) = {-0.116908, -0.732122, 0, 1.0};
Point(171) = {-0.121909, -0.732743, 0, 1.0};
Point(172) = {-0.126561, -0.733307, 0, 1.0};
Point(173) = {-0.130842, -0.733819, 0, 1.0};
Point(174) = {-0.134731, -0.734280, 0, 1.0};
Point(175) = {-0.138208, -0.734691, 0, 1.0};
Point(176) = {-0.141256, -0.735051, 0, 1.0};
Point(177) = {-0.143861, -0.735361, 0, 1.0};
Point(178) = {-0.146010, -0.735619, 0, 1.0};
Point(179) = {-0.147692, -0.735822, 0, 1.0};
Point(180) = {-0.148899, -0.735970, 0, 1.0};
Point(181) = {-0.149626, -0.736060, 0, 1.0};
Point(182) = {-0.149868, -0.736091, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:30};
Spline(2) = {30:61};
Spline(3) = {61:91};
Spline(4) = {91,1};

// Lines: second blade (splines 5-8)
Spline(5) = {92:121};
Spline(6) = {121:152};
Spline(7) = {152:182};
Spline(8) = {182,92};

// Outer domain (points 20001-4 and lines)
Point(183) = {-13.50000000, -15.00000000, 0, 1.0};
Point(184) = {-13.50000000, 15.00000000, 0, 1.0};
Point(185) = {13.50000000, 15.00000000, 0, 1.0};
Point(186) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {183, 184};
Line(12) = {184, 185};
Line(13) = {185, 186};
Line(14) = {183, 186};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html