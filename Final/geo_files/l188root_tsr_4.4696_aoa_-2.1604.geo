SetFactory("OpenCASCADE");

Point(1) = {0.112412, 0.739988, 0, 1.0};
Point(2) = {0.112228, 0.740019, 0, 1.0};
Point(3) = {0.111677, 0.740113, 0, 1.0};
Point(4) = {0.110761, 0.740271, 0, 1.0};
Point(5) = {0.109486, 0.740497, 0, 1.0};
Point(6) = {0.107855, 0.740791, 0, 1.0};
Point(7) = {0.105879, 0.741155, 0, 1.0};
Point(8) = {0.103567, 0.741588, 0, 1.0};
Point(9) = {0.100928, 0.742089, 0, 1.0};
Point(10) = {0.097978, 0.742655, 0, 1.0};
Point(11) = {0.094729, 0.743278, 0, 1.0};
Point(12) = {0.091198, 0.743950, 0, 1.0};
Point(13) = {0.087403, 0.744655, 0, 1.0};
Point(14) = {0.083363, 0.745375, 0, 1.0};
Point(15) = {0.079099, 0.746071, 0, 1.0};
Point(16) = {0.074631, 0.746735, 0, 1.0};
Point(17) = {0.069982, 0.747367, 0, 1.0};
Point(18) = {0.065174, 0.747958, 0, 1.0};
Point(19) = {0.060231, 0.748498, 0, 1.0};
Point(20) = {0.055177, 0.748974, 0, 1.0};
Point(21) = {0.050038, 0.749375, 0, 1.0};
Point(22) = {0.044838, 0.749686, 0, 1.0};
Point(23) = {0.039604, 0.749898, 0, 1.0};
Point(24) = {0.034362, 0.750000, 0, 1.0};
Point(25) = {0.029137, 0.749983, 0, 1.0};
Point(26) = {0.023954, 0.749842, 0, 1.0};
Point(27) = {0.018840, 0.749575, 0, 1.0};
Point(28) = {0.013818, 0.749218, 0, 1.0};
Point(29) = {0.008912, 0.748784, 0, 1.0};
Point(30) = {0.004145, 0.748280, 0, 1.0};
Point(31) = {-0.000459, 0.747712, 0, 1.0};
Point(32) = {-0.004878, 0.747088, 0, 1.0};
Point(33) = {-0.009091, 0.746410, 0, 1.0};
Point(34) = {-0.013077, 0.745686, 0, 1.0};
Point(35) = {-0.016816, 0.744916, 0, 1.0};
Point(36) = {-0.020291, 0.744105, 0, 1.0};
Point(37) = {-0.023484, 0.743256, 0, 1.0};
Point(38) = {-0.026380, 0.742367, 0, 1.0};
Point(39) = {-0.028964, 0.741442, 0, 1.0};
Point(40) = {-0.031225, 0.740482, 0, 1.0};
Point(41) = {-0.033149, 0.739487, 0, 1.0};
Point(42) = {-0.034730, 0.738460, 0, 1.0};
Point(43) = {-0.035957, 0.737403, 0, 1.0};
Point(44) = {-0.036826, 0.736321, 0, 1.0};
Point(45) = {-0.037332, 0.735223, 0, 1.0};
Point(46) = {-0.037473, 0.734123, 0, 1.0};
Point(47) = {-0.037252, 0.733112, 0, 1.0};
Point(48) = {-0.036671, 0.732227, 0, 1.0};
Point(49) = {-0.035733, 0.731453, 0, 1.0};
Point(50) = {-0.034440, 0.730780, 0, 1.0};
Point(51) = {-0.032799, 0.730200, 0, 1.0};
Point(52) = {-0.030818, 0.729706, 0, 1.0};
Point(53) = {-0.028506, 0.729290, 0, 1.0};
Point(54) = {-0.025874, 0.728946, 0, 1.0};
Point(55) = {-0.022934, 0.728667, 0, 1.0};
Point(56) = {-0.019700, 0.728447, 0, 1.0};
Point(57) = {-0.016188, 0.728281, 0, 1.0};
Point(58) = {-0.012416, 0.728165, 0, 1.0};
Point(59) = {-0.008400, 0.728096, 0, 1.0};
Point(60) = {-0.004161, 0.728071, 0, 1.0};
Point(61) = {0.000281, 0.728090, 0, 1.0};
Point(62) = {0.004904, 0.728152, 0, 1.0};
Point(63) = {0.009686, 0.728259, 0, 1.0};
Point(64) = {0.014603, 0.728413, 0, 1.0};
Point(65) = {0.019631, 0.728617, 0, 1.0};
Point(66) = {0.024745, 0.728879, 0, 1.0};
Point(67) = {0.029919, 0.729231, 0, 1.0};
Point(68) = {0.035129, 0.729670, 0, 1.0};
Point(69) = {0.040348, 0.730186, 0, 1.0};
Point(70) = {0.045552, 0.730767, 0, 1.0};
Point(71) = {0.050716, 0.731400, 0, 1.0};
Point(72) = {0.055814, 0.732073, 0, 1.0};
Point(73) = {0.060824, 0.732768, 0, 1.0};
Point(74) = {0.065720, 0.733474, 0, 1.0};
Point(75) = {0.070479, 0.734173, 0, 1.0};
Point(76) = {0.075079, 0.734851, 0, 1.0};
Point(77) = {0.079498, 0.735494, 0, 1.0};
Point(78) = {0.083714, 0.736078, 0, 1.0};
Point(79) = {0.087707, 0.736592, 0, 1.0};
Point(80) = {0.091458, 0.737057, 0, 1.0};
Point(81) = {0.094948, 0.737480, 0, 1.0};
Point(82) = {0.098158, 0.737864, 0, 1.0};
Point(83) = {0.101075, 0.738210, 0, 1.0};
Point(84) = {0.103682, 0.738518, 0, 1.0};
Point(85) = {0.105969, 0.738788, 0, 1.0};
Point(86) = {0.107922, 0.739021, 0, 1.0};
Point(87) = {0.109534, 0.739214, 0, 1.0};
Point(88) = {0.110795, 0.739367, 0, 1.0};
Point(89) = {0.111701, 0.739478, 0, 1.0};
Point(90) = {0.112246, 0.739545, 0, 1.0};
Point(91) = {0.112428, 0.739568, 0, 1.0};
Point(92) = {-0.112412, -0.739988, 0, 1.0};
Point(93) = {-0.112228, -0.740019, 0, 1.0};
Point(94) = {-0.111677, -0.740113, 0, 1.0};
Point(95) = {-0.110761, -0.740271, 0, 1.0};
Point(96) = {-0.109486, -0.740497, 0, 1.0};
Point(97) = {-0.107855, -0.740791, 0, 1.0};
Point(98) = {-0.105879, -0.741155, 0, 1.0};
Point(99) = {-0.103567, -0.741588, 0, 1.0};
Point(100) = {-0.100928, -0.742089, 0, 1.0};
Point(101) = {-0.097978, -0.742655, 0, 1.0};
Point(102) = {-0.094729, -0.743278, 0, 1.0};
Point(103) = {-0.091198, -0.743950, 0, 1.0};
Point(104) = {-0.087403, -0.744655, 0, 1.0};
Point(105) = {-0.083363, -0.745375, 0, 1.0};
Point(106) = {-0.079099, -0.746071, 0, 1.0};
Point(107) = {-0.074631, -0.746735, 0, 1.0};
Point(108) = {-0.069982, -0.747367, 0, 1.0};
Point(109) = {-0.065174, -0.747958, 0, 1.0};
Point(110) = {-0.060231, -0.748498, 0, 1.0};
Point(111) = {-0.055177, -0.748974, 0, 1.0};
Point(112) = {-0.050038, -0.749375, 0, 1.0};
Point(113) = {-0.044838, -0.749686, 0, 1.0};
Point(114) = {-0.039604, -0.749898, 0, 1.0};
Point(115) = {-0.034362, -0.750000, 0, 1.0};
Point(116) = {-0.029137, -0.749983, 0, 1.0};
Point(117) = {-0.023954, -0.749842, 0, 1.0};
Point(118) = {-0.018840, -0.749575, 0, 1.0};
Point(119) = {-0.013818, -0.749218, 0, 1.0};
Point(120) = {-0.008912, -0.748784, 0, 1.0};
Point(121) = {-0.004145, -0.748280, 0, 1.0};
Point(122) = {0.000459, -0.747712, 0, 1.0};
Point(123) = {0.004878, -0.747088, 0, 1.0};
Point(124) = {0.009091, -0.746410, 0, 1.0};
Point(125) = {0.013077, -0.745686, 0, 1.0};
Point(126) = {0.016816, -0.744916, 0, 1.0};
Point(127) = {0.020291, -0.744105, 0, 1.0};
Point(128) = {0.023484, -0.743256, 0, 1.0};
Point(129) = {0.026380, -0.742367, 0, 1.0};
Point(130) = {0.028964, -0.741442, 0, 1.0};
Point(131) = {0.031225, -0.740482, 0, 1.0};
Point(132) = {0.033149, -0.739487, 0, 1.0};
Point(133) = {0.034730, -0.738460, 0, 1.0};
Point(134) = {0.035957, -0.737403, 0, 1.0};
Point(135) = {0.036826, -0.736321, 0, 1.0};
Point(136) = {0.037332, -0.735223, 0, 1.0};
Point(137) = {0.037473, -0.734123, 0, 1.0};
Point(138) = {0.037252, -0.733112, 0, 1.0};
Point(139) = {0.036671, -0.732227, 0, 1.0};
Point(140) = {0.035733, -0.731453, 0, 1.0};
Point(141) = {0.034440, -0.730780, 0, 1.0};
Point(142) = {0.032799, -0.730200, 0, 1.0};
Point(143) = {0.030818, -0.729706, 0, 1.0};
Point(144) = {0.028506, -0.729290, 0, 1.0};
Point(145) = {0.025874, -0.728946, 0, 1.0};
Point(146) = {0.022934, -0.728667, 0, 1.0};
Point(147) = {0.019700, -0.728447, 0, 1.0};
Point(148) = {0.016188, -0.728281, 0, 1.0};
Point(149) = {0.012416, -0.728165, 0, 1.0};
Point(150) = {0.008400, -0.728096, 0, 1.0};
Point(151) = {0.004161, -0.728071, 0, 1.0};
Point(152) = {-0.000281, -0.728090, 0, 1.0};
Point(153) = {-0.004904, -0.728152, 0, 1.0};
Point(154) = {-0.009686, -0.728259, 0, 1.0};
Point(155) = {-0.014603, -0.728413, 0, 1.0};
Point(156) = {-0.019631, -0.728617, 0, 1.0};
Point(157) = {-0.024745, -0.728879, 0, 1.0};
Point(158) = {-0.029919, -0.729231, 0, 1.0};
Point(159) = {-0.035129, -0.729670, 0, 1.0};
Point(160) = {-0.040348, -0.730186, 0, 1.0};
Point(161) = {-0.045552, -0.730767, 0, 1.0};
Point(162) = {-0.050716, -0.731400, 0, 1.0};
Point(163) = {-0.055814, -0.732073, 0, 1.0};
Point(164) = {-0.060824, -0.732768, 0, 1.0};
Point(165) = {-0.065720, -0.733474, 0, 1.0};
Point(166) = {-0.070479, -0.734173, 0, 1.0};
Point(167) = {-0.075079, -0.734851, 0, 1.0};
Point(168) = {-0.079498, -0.735494, 0, 1.0};
Point(169) = {-0.083714, -0.736078, 0, 1.0};
Point(170) = {-0.087707, -0.736592, 0, 1.0};
Point(171) = {-0.091458, -0.737057, 0, 1.0};
Point(172) = {-0.094948, -0.737480, 0, 1.0};
Point(173) = {-0.098158, -0.737864, 0, 1.0};
Point(174) = {-0.101075, -0.738210, 0, 1.0};
Point(175) = {-0.103682, -0.738518, 0, 1.0};
Point(176) = {-0.105969, -0.738788, 0, 1.0};
Point(177) = {-0.107922, -0.739021, 0, 1.0};
Point(178) = {-0.109534, -0.739214, 0, 1.0};
Point(179) = {-0.110795, -0.739367, 0, 1.0};
Point(180) = {-0.111701, -0.739478, 0, 1.0};
Point(181) = {-0.112246, -0.739545, 0, 1.0};
Point(182) = {-0.112428, -0.739568, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:30};
Spline(2) = {30:61};
Spline(3) = {61:91};
Spline(4) = {91,1};

// Lines: second blade (splines 5-8)
Spline(5) = {92:121};
Spline(6) = {121:152};
Spline(7) = {152:182};
Spline(8) = {182,92};

// Outer domain (points 20001-4 and lines)
Point(183) = {-13.50000000, -15.00000000, 0, 1.0};
Point(184) = {-13.50000000, 15.00000000, 0, 1.0};
Point(185) = {13.50000000, 15.00000000, 0, 1.0};
Point(186) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {183, 184};
Line(12) = {184, 185};
Line(13) = {185, 186};
Line(14) = {183, 186};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html