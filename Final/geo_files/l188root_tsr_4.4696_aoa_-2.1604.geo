SetFactory("OpenCASCADE");

Point(1) = {0.074924, 0.743325, 0, 1.0};
Point(2) = {0.074801, 0.743346, 0, 1.0};
Point(3) = {0.074434, 0.743408, 0, 1.0};
Point(4) = {0.073823, 0.743514, 0, 1.0};
Point(5) = {0.072973, 0.743664, 0, 1.0};
Point(6) = {0.071886, 0.743861, 0, 1.0};
Point(7) = {0.070569, 0.744103, 0, 1.0};
Point(8) = {0.069027, 0.744392, 0, 1.0};
Point(9) = {0.067268, 0.744726, 0, 1.0};
Point(10) = {0.065301, 0.745103, 0, 1.0};
Point(11) = {0.063135, 0.745519, 0, 1.0};
Point(12) = {0.060781, 0.745966, 0, 1.0};
Point(13) = {0.058251, 0.746437, 0, 1.0};
Point(14) = {0.055558, 0.746917, 0, 1.0};
Point(15) = {0.052715, 0.747381, 0, 1.0};
Point(16) = {0.049736, 0.747823, 0, 1.0};
Point(17) = {0.046637, 0.748245, 0, 1.0};
Point(18) = {0.043431, 0.748639, 0, 1.0};
Point(19) = {0.040136, 0.748999, 0, 1.0};
Point(20) = {0.036767, 0.749316, 0, 1.0};
Point(21) = {0.033341, 0.749583, 0, 1.0};
Point(22) = {0.029874, 0.749791, 0, 1.0};
Point(23) = {0.026385, 0.749932, 0, 1.0};
Point(24) = {0.022890, 0.750000, 0, 1.0};
Point(25) = {0.019407, 0.749989, 0, 1.0};
Point(26) = {0.015952, 0.749895, 0, 1.0};
Point(27) = {0.012542, 0.749717, 0, 1.0};
Point(28) = {0.009194, 0.749479, 0, 1.0};
Point(29) = {0.005923, 0.749189, 0, 1.0};
Point(30) = {0.002745, 0.748853, 0, 1.0};
Point(31) = {-0.000324, 0.748475, 0, 1.0};
Point(32) = {-0.003270, 0.748058, 0, 1.0};
Point(33) = {-0.006078, 0.747607, 0, 1.0};
Point(34) = {-0.008736, 0.747124, 0, 1.0};
Point(35) = {-0.011228, 0.746611, 0, 1.0};
Point(36) = {-0.013545, 0.746070, 0, 1.0};
Point(37) = {-0.015674, 0.745504, 0, 1.0};
Point(38) = {-0.017604, 0.744912, 0, 1.0};
Point(39) = {-0.019327, 0.744295, 0, 1.0};
Point(40) = {-0.020834, 0.743655, 0, 1.0};
Point(41) = {-0.022117, 0.742991, 0, 1.0};
Point(42) = {-0.023171, 0.742306, 0, 1.0};
Point(43) = {-0.023989, 0.741602, 0, 1.0};
Point(44) = {-0.024568, 0.740881, 0, 1.0};
Point(45) = {-0.024906, 0.740149, 0, 1.0};
Point(46) = {-0.025000, 0.739415, 0, 1.0};
Point(47) = {-0.024853, 0.738741, 0, 1.0};
Point(48) = {-0.024465, 0.738151, 0, 1.0};
Point(49) = {-0.023839, 0.737635, 0, 1.0};
Point(50) = {-0.022978, 0.737187, 0, 1.0};
Point(51) = {-0.021884, 0.736800, 0, 1.0};
Point(52) = {-0.020563, 0.736471, 0, 1.0};
Point(53) = {-0.019022, 0.736193, 0, 1.0};
Point(54) = {-0.017267, 0.735964, 0, 1.0};
Point(55) = {-0.015307, 0.735778, 0, 1.0};
Point(56) = {-0.013151, 0.735631, 0, 1.0};
Point(57) = {-0.010810, 0.735521, 0, 1.0};
Point(58) = {-0.008295, 0.735444, 0, 1.0};
Point(59) = {-0.005618, 0.735397, 0, 1.0};
Point(60) = {-0.002792, 0.735381, 0, 1.0};
Point(61) = {0.000170, 0.735393, 0, 1.0};
Point(62) = {0.003252, 0.735435, 0, 1.0};
Point(63) = {0.006439, 0.735506, 0, 1.0};
Point(64) = {0.009717, 0.735609, 0, 1.0};
Point(65) = {0.013069, 0.735744, 0, 1.0};
Point(66) = {0.016479, 0.735919, 0, 1.0};
Point(67) = {0.019928, 0.736154, 0, 1.0};
Point(68) = {0.023401, 0.736447, 0, 1.0};
Point(69) = {0.026881, 0.736791, 0, 1.0};
Point(70) = {0.030350, 0.737178, 0, 1.0};
Point(71) = {0.033793, 0.737600, 0, 1.0};
Point(72) = {0.037192, 0.738048, 0, 1.0};
Point(73) = {0.040532, 0.738512, 0, 1.0};
Point(74) = {0.043796, 0.738982, 0, 1.0};
Point(75) = {0.046969, 0.739449, 0, 1.0};
Point(76) = {0.050035, 0.739901, 0, 1.0};
Point(77) = {0.052981, 0.740329, 0, 1.0};
Point(78) = {0.055791, 0.740718, 0, 1.0};
Point(79) = {0.058454, 0.741061, 0, 1.0};
Point(80) = {0.060954, 0.741371, 0, 1.0};
Point(81) = {0.063281, 0.741654, 0, 1.0};
Point(82) = {0.065421, 0.741909, 0, 1.0};
Point(83) = {0.067365, 0.742140, 0, 1.0};
Point(84) = {0.069104, 0.742345, 0, 1.0};
Point(85) = {0.070628, 0.742526, 0, 1.0};
Point(86) = {0.071930, 0.742680, 0, 1.0};
Point(87) = {0.073005, 0.742809, 0, 1.0};
Point(88) = {0.073846, 0.742911, 0, 1.0};
Point(89) = {0.074450, 0.742985, 0, 1.0};
Point(90) = {0.074813, 0.743030, 0, 1.0};
Point(91) = {0.074934, 0.743045, 0, 1.0};
Point(92) = {-0.074924, -0.743325, 0, 1.0};
Point(93) = {-0.074801, -0.743346, 0, 1.0};
Point(94) = {-0.074434, -0.743408, 0, 1.0};
Point(95) = {-0.073823, -0.743514, 0, 1.0};
Point(96) = {-0.072973, -0.743664, 0, 1.0};
Point(97) = {-0.071886, -0.743861, 0, 1.0};
Point(98) = {-0.070569, -0.744103, 0, 1.0};
Point(99) = {-0.069027, -0.744392, 0, 1.0};
Point(100) = {-0.067268, -0.744726, 0, 1.0};
Point(101) = {-0.065301, -0.745103, 0, 1.0};
Point(102) = {-0.063135, -0.745519, 0, 1.0};
Point(103) = {-0.060781, -0.745966, 0, 1.0};
Point(104) = {-0.058251, -0.746437, 0, 1.0};
Point(105) = {-0.055558, -0.746917, 0, 1.0};
Point(106) = {-0.052715, -0.747381, 0, 1.0};
Point(107) = {-0.049736, -0.747823, 0, 1.0};
Point(108) = {-0.046637, -0.748245, 0, 1.0};
Point(109) = {-0.043431, -0.748639, 0, 1.0};
Point(110) = {-0.040136, -0.748999, 0, 1.0};
Point(111) = {-0.036767, -0.749316, 0, 1.0};
Point(112) = {-0.033341, -0.749583, 0, 1.0};
Point(113) = {-0.029874, -0.749791, 0, 1.0};
Point(114) = {-0.026385, -0.749932, 0, 1.0};
Point(115) = {-0.022890, -0.750000, 0, 1.0};
Point(116) = {-0.019407, -0.749989, 0, 1.0};
Point(117) = {-0.015952, -0.749895, 0, 1.0};
Point(118) = {-0.012542, -0.749717, 0, 1.0};
Point(119) = {-0.009194, -0.749479, 0, 1.0};
Point(120) = {-0.005923, -0.749189, 0, 1.0};
Point(121) = {-0.002745, -0.748853, 0, 1.0};
Point(122) = {0.000324, -0.748475, 0, 1.0};
Point(123) = {0.003270, -0.748058, 0, 1.0};
Point(124) = {0.006078, -0.747607, 0, 1.0};
Point(125) = {0.008736, -0.747124, 0, 1.0};
Point(126) = {0.011228, -0.746611, 0, 1.0};
Point(127) = {0.013545, -0.746070, 0, 1.0};
Point(128) = {0.015674, -0.745504, 0, 1.0};
Point(129) = {0.017604, -0.744912, 0, 1.0};
Point(130) = {0.019327, -0.744295, 0, 1.0};
Point(131) = {0.020834, -0.743655, 0, 1.0};
Point(132) = {0.022117, -0.742991, 0, 1.0};
Point(133) = {0.023171, -0.742306, 0, 1.0};
Point(134) = {0.023989, -0.741602, 0, 1.0};
Point(135) = {0.024568, -0.740881, 0, 1.0};
Point(136) = {0.024906, -0.740149, 0, 1.0};
Point(137) = {0.025000, -0.739415, 0, 1.0};
Point(138) = {0.024853, -0.738741, 0, 1.0};
Point(139) = {0.024465, -0.738151, 0, 1.0};
Point(140) = {0.023839, -0.737635, 0, 1.0};
Point(141) = {0.022978, -0.737187, 0, 1.0};
Point(142) = {0.021884, -0.736800, 0, 1.0};
Point(143) = {0.020563, -0.736471, 0, 1.0};
Point(144) = {0.019022, -0.736193, 0, 1.0};
Point(145) = {0.017267, -0.735964, 0, 1.0};
Point(146) = {0.015307, -0.735778, 0, 1.0};
Point(147) = {0.013151, -0.735631, 0, 1.0};
Point(148) = {0.010810, -0.735521, 0, 1.0};
Point(149) = {0.008295, -0.735444, 0, 1.0};
Point(150) = {0.005618, -0.735397, 0, 1.0};
Point(151) = {0.002792, -0.735381, 0, 1.0};
Point(152) = {-0.000170, -0.735393, 0, 1.0};
Point(153) = {-0.003252, -0.735435, 0, 1.0};
Point(154) = {-0.006439, -0.735506, 0, 1.0};
Point(155) = {-0.009717, -0.735609, 0, 1.0};
Point(156) = {-0.013069, -0.735744, 0, 1.0};
Point(157) = {-0.016479, -0.735919, 0, 1.0};
Point(158) = {-0.019928, -0.736154, 0, 1.0};
Point(159) = {-0.023401, -0.736447, 0, 1.0};
Point(160) = {-0.026881, -0.736791, 0, 1.0};
Point(161) = {-0.030350, -0.737178, 0, 1.0};
Point(162) = {-0.033793, -0.737600, 0, 1.0};
Point(163) = {-0.037192, -0.738048, 0, 1.0};
Point(164) = {-0.040532, -0.738512, 0, 1.0};
Point(165) = {-0.043796, -0.738982, 0, 1.0};
Point(166) = {-0.046969, -0.739449, 0, 1.0};
Point(167) = {-0.050035, -0.739901, 0, 1.0};
Point(168) = {-0.052981, -0.740329, 0, 1.0};
Point(169) = {-0.055791, -0.740718, 0, 1.0};
Point(170) = {-0.058454, -0.741061, 0, 1.0};
Point(171) = {-0.060954, -0.741371, 0, 1.0};
Point(172) = {-0.063281, -0.741654, 0, 1.0};
Point(173) = {-0.065421, -0.741909, 0, 1.0};
Point(174) = {-0.067365, -0.742140, 0, 1.0};
Point(175) = {-0.069104, -0.742345, 0, 1.0};
Point(176) = {-0.070628, -0.742526, 0, 1.0};
Point(177) = {-0.071930, -0.742680, 0, 1.0};
Point(178) = {-0.073005, -0.742809, 0, 1.0};
Point(179) = {-0.073846, -0.742911, 0, 1.0};
Point(180) = {-0.074450, -0.742985, 0, 1.0};
Point(181) = {-0.074813, -0.743030, 0, 1.0};
Point(182) = {-0.074934, -0.743045, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:30};
Spline(2) = {30:61};
Spline(3) = {61:91};
Spline(4) = {91,1};

// Lines: second blade (splines 5-8)
Spline(5) = {92:121};
Spline(6) = {121:152};
Spline(7) = {152:182};
Spline(8) = {182,92};

// Outer domain (points 20001-4 and lines)
Point(183) = {-13.50000000, -15.00000000, 0, 1.0};
Point(184) = {-13.50000000, 15.00000000, 0, 1.0};
Point(185) = {13.50000000, 15.00000000, 0, 1.0};
Point(186) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {183, 184};
Line(12) = {184, 185};
Line(13) = {185, 186};
Line(14) = {183, 186};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html