SetFactory("OpenCASCADE");

Point(1) = {0.074992, 0.742823, 0, 1.0};
Point(2) = {0.074641, 0.742848, 0, 1.0};
Point(3) = {0.073624, 0.742948, 0, 1.0};
Point(4) = {0.072013, 0.743132, 0, 1.0};
Point(5) = {0.069853, 0.743365, 0, 1.0};
Point(6) = {0.067147, 0.743630, 0, 1.0};
Point(7) = {0.063919, 0.743945, 0, 1.0};
Point(8) = {0.060220, 0.744320, 0, 1.0};
Point(9) = {0.056105, 0.744758, 0, 1.0};
Point(10) = {0.051637, 0.745255, 0, 1.0};
Point(11) = {0.046882, 0.745801, 0, 1.0};
Point(12) = {0.041906, 0.746385, 0, 1.0};
Point(13) = {0.036778, 0.746989, 0, 1.0};
Point(14) = {0.031566, 0.747595, 0, 1.0};
Point(15) = {0.026332, 0.748179, 0, 1.0};
Point(16) = {0.021138, 0.748719, 0, 1.0};
Point(17) = {0.016041, 0.749190, 0, 1.0};
Point(18) = {0.011092, 0.749572, 0, 1.0};
Point(19) = {0.006339, 0.749844, 0, 1.0};
Point(20) = {0.001817, 0.749989, 0, 1.0};
Point(21) = {-0.002437, 0.750000, 0, 1.0};
Point(22) = {-0.006388, 0.749869, 0, 1.0};
Point(23) = {-0.010013, 0.749593, 0, 1.0};
Point(24) = {-0.013293, 0.749174, 0, 1.0};
Point(25) = {-0.016211, 0.748628, 0, 1.0};
Point(26) = {-0.018752, 0.747977, 0, 1.0};
Point(27) = {-0.020890, 0.747248, 0, 1.0};
Point(28) = {-0.022606, 0.746463, 0, 1.0};
Point(29) = {-0.023885, 0.745650, 0, 1.0};
Point(30) = {-0.024704, 0.744843, 0, 1.0};
Point(31) = {-0.025000, 0.744114, 0, 1.0};
Point(32) = {-0.024722, 0.743377, 0, 1.0};
Point(33) = {-0.023925, 0.742550, 0, 1.0};
Point(34) = {-0.022668, 0.741703, 0, 1.0};
Point(35) = {-0.020972, 0.740875, 0, 1.0};
Point(36) = {-0.018853, 0.740090, 0, 1.0};
Point(37) = {-0.016330, 0.739374, 0, 1.0};
Point(38) = {-0.013427, 0.738753, 0, 1.0};
Point(39) = {-0.010159, 0.738250, 0, 1.0};
Point(40) = {-0.006543, 0.737880, 0, 1.0};
Point(41) = {-0.002597, 0.737647, 0, 1.0};
Point(42) = {0.001656, 0.737548, 0, 1.0};
Point(43) = {0.006180, 0.737577, 0, 1.0};
Point(44) = {0.010940, 0.737725, 0, 1.0};
Point(45) = {0.015896, 0.737979, 0, 1.0};
Point(46) = {0.021004, 0.738319, 0, 1.0};
Point(47) = {0.026210, 0.738724, 0, 1.0};
Point(48) = {0.031457, 0.739174, 0, 1.0};
Point(49) = {0.036683, 0.739644, 0, 1.0};
Point(50) = {0.041825, 0.740116, 0, 1.0};
Point(51) = {0.046814, 0.740571, 0, 1.0};
Point(52) = {0.051582, 0.740995, 0, 1.0};
Point(53) = {0.056061, 0.741376, 0, 1.0};
Point(54) = {0.060186, 0.741708, 0, 1.0};
Point(55) = {0.063894, 0.741987, 0, 1.0};
Point(56) = {0.067129, 0.742218, 0, 1.0};
Point(57) = {0.069841, 0.742413, 0, 1.0};
Point(58) = {0.072006, 0.742590, 0, 1.0};
Point(59) = {0.073621, 0.742733, 0, 1.0};
Point(60) = {0.074640, 0.742806, 0, 1.0};
Point(61) = {-0.074992, -0.742823, 0, 1.0};
Point(62) = {-0.074641, -0.742848, 0, 1.0};
Point(63) = {-0.073624, -0.742948, 0, 1.0};
Point(64) = {-0.072013, -0.743132, 0, 1.0};
Point(65) = {-0.069853, -0.743365, 0, 1.0};
Point(66) = {-0.067147, -0.743630, 0, 1.0};
Point(67) = {-0.063919, -0.743945, 0, 1.0};
Point(68) = {-0.060220, -0.744320, 0, 1.0};
Point(69) = {-0.056105, -0.744758, 0, 1.0};
Point(70) = {-0.051637, -0.745255, 0, 1.0};
Point(71) = {-0.046882, -0.745801, 0, 1.0};
Point(72) = {-0.041906, -0.746385, 0, 1.0};
Point(73) = {-0.036778, -0.746989, 0, 1.0};
Point(74) = {-0.031566, -0.747595, 0, 1.0};
Point(75) = {-0.026332, -0.748179, 0, 1.0};
Point(76) = {-0.021138, -0.748719, 0, 1.0};
Point(77) = {-0.016041, -0.749190, 0, 1.0};
Point(78) = {-0.011092, -0.749572, 0, 1.0};
Point(79) = {-0.006339, -0.749844, 0, 1.0};
Point(80) = {-0.001817, -0.749989, 0, 1.0};
Point(81) = {0.002437, -0.750000, 0, 1.0};
Point(82) = {0.006388, -0.749869, 0, 1.0};
Point(83) = {0.010013, -0.749593, 0, 1.0};
Point(84) = {0.013293, -0.749174, 0, 1.0};
Point(85) = {0.016211, -0.748628, 0, 1.0};
Point(86) = {0.018752, -0.747977, 0, 1.0};
Point(87) = {0.020890, -0.747248, 0, 1.0};
Point(88) = {0.022606, -0.746463, 0, 1.0};
Point(89) = {0.023885, -0.745650, 0, 1.0};
Point(90) = {0.024704, -0.744843, 0, 1.0};
Point(91) = {0.025000, -0.744114, 0, 1.0};
Point(92) = {0.024722, -0.743377, 0, 1.0};
Point(93) = {0.023925, -0.742550, 0, 1.0};
Point(94) = {0.022668, -0.741703, 0, 1.0};
Point(95) = {0.020972, -0.740875, 0, 1.0};
Point(96) = {0.018853, -0.740090, 0, 1.0};
Point(97) = {0.016330, -0.739374, 0, 1.0};
Point(98) = {0.013427, -0.738753, 0, 1.0};
Point(99) = {0.010159, -0.738250, 0, 1.0};
Point(100) = {0.006543, -0.737880, 0, 1.0};
Point(101) = {0.002597, -0.737647, 0, 1.0};
Point(102) = {-0.001656, -0.737548, 0, 1.0};
Point(103) = {-0.006180, -0.737577, 0, 1.0};
Point(104) = {-0.010940, -0.737725, 0, 1.0};
Point(105) = {-0.015896, -0.737979, 0, 1.0};
Point(106) = {-0.021004, -0.738319, 0, 1.0};
Point(107) = {-0.026210, -0.738724, 0, 1.0};
Point(108) = {-0.031457, -0.739174, 0, 1.0};
Point(109) = {-0.036683, -0.739644, 0, 1.0};
Point(110) = {-0.041825, -0.740116, 0, 1.0};
Point(111) = {-0.046814, -0.740571, 0, 1.0};
Point(112) = {-0.051582, -0.740995, 0, 1.0};
Point(113) = {-0.056061, -0.741376, 0, 1.0};
Point(114) = {-0.060186, -0.741708, 0, 1.0};
Point(115) = {-0.063894, -0.741987, 0, 1.0};
Point(116) = {-0.067129, -0.742218, 0, 1.0};
Point(117) = {-0.069841, -0.742413, 0, 1.0};
Point(118) = {-0.072006, -0.742590, 0, 1.0};
Point(119) = {-0.073621, -0.742733, 0, 1.0};
Point(120) = {-0.074640, -0.742806, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html