SetFactory("OpenCASCADE");

Point(1) = {0.112057, 0.738465, 0, 1.0};
Point(2) = {0.111505, 0.738601, 0, 1.0};
Point(3) = {0.109929, 0.739059, 0, 1.0};
Point(4) = {0.107512, 0.739871, 0, 1.0};
Point(5) = {0.104427, 0.740963, 0, 1.0};
Point(6) = {0.100769, 0.742210, 0, 1.0};
Point(7) = {0.096561, 0.743507, 0, 1.0};
Point(8) = {0.091811, 0.744837, 0, 1.0};
Point(9) = {0.086623, 0.746214, 0, 1.0};
Point(10) = {0.081167, 0.747552, 0, 1.0};
Point(11) = {0.075507, 0.748636, 0, 1.0};
Point(12) = {0.069515, 0.749355, 0, 1.0};
Point(13) = {0.063171, 0.749795, 0, 1.0};
Point(14) = {0.056461, 0.750000, 0, 1.0};
Point(15) = {0.049549, 0.749987, 0, 1.0};
Point(16) = {0.042474, 0.749764, 0, 1.0};
Point(17) = {0.035314, 0.749383, 0, 1.0};
Point(18) = {0.028136, 0.748718, 0, 1.0};
Point(19) = {0.021019, 0.747917, 0, 1.0};
Point(20) = {0.014027, 0.746988, 0, 1.0};
Point(21) = {0.007245, 0.745816, 0, 1.0};
Point(22) = {0.000729, 0.744548, 0, 1.0};
Point(23) = {-0.005453, 0.743164, 0, 1.0};
Point(24) = {-0.011239, 0.741678, 0, 1.0};
Point(25) = {-0.016571, 0.740121, 0, 1.0};
Point(26) = {-0.021396, 0.738514, 0, 1.0};
Point(27) = {-0.025669, 0.736887, 0, 1.0};
Point(28) = {-0.029346, 0.735271, 0, 1.0};
Point(29) = {-0.032397, 0.733700, 0, 1.0};
Point(30) = {-0.034784, 0.732213, 0, 1.0};
Point(31) = {-0.036488, 0.730860, 0, 1.0};
Point(32) = {-0.037475, 0.729711, 0, 1.0};
Point(33) = {-0.037602, 0.728898, 0, 1.0};
Point(34) = {-0.037045, 0.728258, 0, 1.0};
Point(35) = {-0.034958, 0.727715, 0, 1.0};
Point(36) = {-0.032341, 0.727100, 0, 1.0};
Point(37) = {-0.028961, 0.726591, 0, 1.0};
Point(38) = {-0.024864, 0.726158, 0, 1.0};
Point(39) = {-0.020107, 0.725808, 0, 1.0};
Point(40) = {-0.014751, 0.725552, 0, 1.0};
Point(41) = {-0.008863, 0.725400, 0, 1.0};
Point(42) = {-0.002514, 0.725356, 0, 1.0};
Point(43) = {0.004217, 0.725431, 0, 1.0};
Point(44) = {0.011250, 0.725633, 0, 1.0};
Point(45) = {0.018501, 0.725970, 0, 1.0};
Point(46) = {0.025881, 0.726457, 0, 1.0};
Point(47) = {0.033297, 0.727114, 0, 1.0};
Point(48) = {0.040657, 0.727969, 0, 1.0};
Point(49) = {0.047845, 0.729133, 0, 1.0};
Point(50) = {0.055000, 0.730804, 0, 1.0};
Point(51) = {0.062419, 0.732801, 0, 1.0};
Point(52) = {0.070058, 0.734712, 0, 1.0};
Point(53) = {0.077631, 0.736319, 0, 1.0};
Point(54) = {0.084891, 0.737567, 0, 1.0};
Point(55) = {0.091627, 0.738426, 0, 1.0};
Point(56) = {0.097652, 0.738911, 0, 1.0};
Point(57) = {0.102776, 0.739056, 0, 1.0};
Point(58) = {0.106843, 0.738952, 0, 1.0};
Point(59) = {0.109751, 0.738737, 0, 1.0};
Point(60) = {0.111484, 0.738543, 0, 1.0};
Point(61) = {-0.112057, -0.738465, 0, 1.0};
Point(62) = {-0.111505, -0.738601, 0, 1.0};
Point(63) = {-0.109929, -0.739059, 0, 1.0};
Point(64) = {-0.107512, -0.739871, 0, 1.0};
Point(65) = {-0.104427, -0.740963, 0, 1.0};
Point(66) = {-0.100769, -0.742210, 0, 1.0};
Point(67) = {-0.096561, -0.743507, 0, 1.0};
Point(68) = {-0.091811, -0.744837, 0, 1.0};
Point(69) = {-0.086623, -0.746214, 0, 1.0};
Point(70) = {-0.081167, -0.747552, 0, 1.0};
Point(71) = {-0.075507, -0.748636, 0, 1.0};
Point(72) = {-0.069515, -0.749355, 0, 1.0};
Point(73) = {-0.063171, -0.749795, 0, 1.0};
Point(74) = {-0.056461, -0.750000, 0, 1.0};
Point(75) = {-0.049549, -0.749987, 0, 1.0};
Point(76) = {-0.042474, -0.749764, 0, 1.0};
Point(77) = {-0.035314, -0.749383, 0, 1.0};
Point(78) = {-0.028136, -0.748718, 0, 1.0};
Point(79) = {-0.021019, -0.747917, 0, 1.0};
Point(80) = {-0.014027, -0.746988, 0, 1.0};
Point(81) = {-0.007245, -0.745816, 0, 1.0};
Point(82) = {-0.000729, -0.744548, 0, 1.0};
Point(83) = {0.005453, -0.743164, 0, 1.0};
Point(84) = {0.011239, -0.741678, 0, 1.0};
Point(85) = {0.016571, -0.740121, 0, 1.0};
Point(86) = {0.021396, -0.738514, 0, 1.0};
Point(87) = {0.025669, -0.736887, 0, 1.0};
Point(88) = {0.029346, -0.735271, 0, 1.0};
Point(89) = {0.032397, -0.733700, 0, 1.0};
Point(90) = {0.034784, -0.732213, 0, 1.0};
Point(91) = {0.036488, -0.730860, 0, 1.0};
Point(92) = {0.037475, -0.729711, 0, 1.0};
Point(93) = {0.037602, -0.728898, 0, 1.0};
Point(94) = {0.037045, -0.728258, 0, 1.0};
Point(95) = {0.034958, -0.727715, 0, 1.0};
Point(96) = {0.032341, -0.727100, 0, 1.0};
Point(97) = {0.028961, -0.726591, 0, 1.0};
Point(98) = {0.024864, -0.726158, 0, 1.0};
Point(99) = {0.020107, -0.725808, 0, 1.0};
Point(100) = {0.014751, -0.725552, 0, 1.0};
Point(101) = {0.008863, -0.725400, 0, 1.0};
Point(102) = {0.002514, -0.725356, 0, 1.0};
Point(103) = {-0.004217, -0.725431, 0, 1.0};
Point(104) = {-0.011250, -0.725633, 0, 1.0};
Point(105) = {-0.018501, -0.725970, 0, 1.0};
Point(106) = {-0.025881, -0.726457, 0, 1.0};
Point(107) = {-0.033297, -0.727114, 0, 1.0};
Point(108) = {-0.040657, -0.727969, 0, 1.0};
Point(109) = {-0.047845, -0.729133, 0, 1.0};
Point(110) = {-0.055000, -0.730804, 0, 1.0};
Point(111) = {-0.062419, -0.732801, 0, 1.0};
Point(112) = {-0.070058, -0.734712, 0, 1.0};
Point(113) = {-0.077631, -0.736319, 0, 1.0};
Point(114) = {-0.084891, -0.737567, 0, 1.0};
Point(115) = {-0.091627, -0.738426, 0, 1.0};
Point(116) = {-0.097652, -0.738911, 0, 1.0};
Point(117) = {-0.102776, -0.739056, 0, 1.0};
Point(118) = {-0.106843, -0.738952, 0, 1.0};
Point(119) = {-0.109751, -0.738737, 0, 1.0};
Point(120) = {-0.111484, -0.738543, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html