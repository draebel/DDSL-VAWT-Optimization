SetFactory("OpenCASCADE");

Point(1) = {0.074705, 0.742310, 0, 1.0};
Point(2) = {0.074337, 0.742401, 0, 1.0};
Point(3) = {0.073286, 0.742706, 0, 1.0};
Point(4) = {0.071675, 0.743247, 0, 1.0};
Point(5) = {0.069618, 0.743975, 0, 1.0};
Point(6) = {0.067180, 0.744806, 0, 1.0};
Point(7) = {0.064374, 0.745671, 0, 1.0};
Point(8) = {0.061207, 0.746558, 0, 1.0};
Point(9) = {0.057749, 0.747476, 0, 1.0};
Point(10) = {0.054111, 0.748368, 0, 1.0};
Point(11) = {0.050338, 0.749091, 0, 1.0};
Point(12) = {0.046343, 0.749570, 0, 1.0};
Point(13) = {0.042114, 0.749863, 0, 1.0};
Point(14) = {0.037641, 0.750000, 0, 1.0};
Point(15) = {0.033033, 0.749991, 0, 1.0};
Point(16) = {0.028316, 0.749842, 0, 1.0};
Point(17) = {0.023542, 0.749589, 0, 1.0};
Point(18) = {0.018757, 0.749145, 0, 1.0};
Point(19) = {0.014012, 0.748611, 0, 1.0};
Point(20) = {0.009351, 0.747992, 0, 1.0};
Point(21) = {0.004830, 0.747211, 0, 1.0};
Point(22) = {0.000486, 0.746366, 0, 1.0};
Point(23) = {-0.003635, 0.745442, 0, 1.0};
Point(24) = {-0.007493, 0.744452, 0, 1.0};
Point(25) = {-0.011047, 0.743414, 0, 1.0};
Point(26) = {-0.014264, 0.742343, 0, 1.0};
Point(27) = {-0.017113, 0.741258, 0, 1.0};
Point(28) = {-0.019564, 0.740180, 0, 1.0};
Point(29) = {-0.021598, 0.739133, 0, 1.0};
Point(30) = {-0.023189, 0.738142, 0, 1.0};
Point(31) = {-0.024326, 0.737240, 0, 1.0};
Point(32) = {-0.024984, 0.736474, 0, 1.0};
Point(33) = {-0.025068, 0.735932, 0, 1.0};
Point(34) = {-0.024696, 0.735505, 0, 1.0};
Point(35) = {-0.023305, 0.735143, 0, 1.0};
Point(36) = {-0.021561, 0.734733, 0, 1.0};
Point(37) = {-0.019307, 0.734394, 0, 1.0};
Point(38) = {-0.016576, 0.734105, 0, 1.0};
Point(39) = {-0.013405, 0.733872, 0, 1.0};
Point(40) = {-0.009834, 0.733702, 0, 1.0};
Point(41) = {-0.005909, 0.733600, 0, 1.0};
Point(42) = {-0.001676, 0.733571, 0, 1.0};
Point(43) = {0.002812, 0.733621, 0, 1.0};
Point(44) = {0.007500, 0.733755, 0, 1.0};
Point(45) = {0.012334, 0.733980, 0, 1.0};
Point(46) = {0.017254, 0.734305, 0, 1.0};
Point(47) = {0.022198, 0.734743, 0, 1.0};
Point(48) = {0.027104, 0.735312, 0, 1.0};
Point(49) = {0.031897, 0.736089, 0, 1.0};
Point(50) = {0.036667, 0.737202, 0, 1.0};
Point(51) = {0.041613, 0.738534, 0, 1.0};
Point(52) = {0.046705, 0.739808, 0, 1.0};
Point(53) = {0.051754, 0.740879, 0, 1.0};
Point(54) = {0.056594, 0.741711, 0, 1.0};
Point(55) = {0.061084, 0.742284, 0, 1.0};
Point(56) = {0.065101, 0.742607, 0, 1.0};
Point(57) = {0.068517, 0.742704, 0, 1.0};
Point(58) = {0.071228, 0.742635, 0, 1.0};
Point(59) = {0.073167, 0.742491, 0, 1.0};
Point(60) = {0.074323, 0.742362, 0, 1.0};
Point(61) = {-0.074705, -0.742310, 0, 1.0};
Point(62) = {-0.074337, -0.742401, 0, 1.0};
Point(63) = {-0.073286, -0.742706, 0, 1.0};
Point(64) = {-0.071675, -0.743247, 0, 1.0};
Point(65) = {-0.069618, -0.743975, 0, 1.0};
Point(66) = {-0.067180, -0.744806, 0, 1.0};
Point(67) = {-0.064374, -0.745671, 0, 1.0};
Point(68) = {-0.061207, -0.746558, 0, 1.0};
Point(69) = {-0.057749, -0.747476, 0, 1.0};
Point(70) = {-0.054111, -0.748368, 0, 1.0};
Point(71) = {-0.050338, -0.749091, 0, 1.0};
Point(72) = {-0.046343, -0.749570, 0, 1.0};
Point(73) = {-0.042114, -0.749863, 0, 1.0};
Point(74) = {-0.037641, -0.750000, 0, 1.0};
Point(75) = {-0.033033, -0.749991, 0, 1.0};
Point(76) = {-0.028316, -0.749842, 0, 1.0};
Point(77) = {-0.023542, -0.749589, 0, 1.0};
Point(78) = {-0.018757, -0.749145, 0, 1.0};
Point(79) = {-0.014012, -0.748611, 0, 1.0};
Point(80) = {-0.009351, -0.747992, 0, 1.0};
Point(81) = {-0.004830, -0.747211, 0, 1.0};
Point(82) = {-0.000486, -0.746366, 0, 1.0};
Point(83) = {0.003635, -0.745442, 0, 1.0};
Point(84) = {0.007493, -0.744452, 0, 1.0};
Point(85) = {0.011047, -0.743414, 0, 1.0};
Point(86) = {0.014264, -0.742343, 0, 1.0};
Point(87) = {0.017113, -0.741258, 0, 1.0};
Point(88) = {0.019564, -0.740180, 0, 1.0};
Point(89) = {0.021598, -0.739133, 0, 1.0};
Point(90) = {0.023189, -0.738142, 0, 1.0};
Point(91) = {0.024326, -0.737240, 0, 1.0};
Point(92) = {0.024984, -0.736474, 0, 1.0};
Point(93) = {0.025068, -0.735932, 0, 1.0};
Point(94) = {0.024696, -0.735505, 0, 1.0};
Point(95) = {0.023305, -0.735143, 0, 1.0};
Point(96) = {0.021561, -0.734733, 0, 1.0};
Point(97) = {0.019307, -0.734394, 0, 1.0};
Point(98) = {0.016576, -0.734105, 0, 1.0};
Point(99) = {0.013405, -0.733872, 0, 1.0};
Point(100) = {0.009834, -0.733702, 0, 1.0};
Point(101) = {0.005909, -0.733600, 0, 1.0};
Point(102) = {0.001676, -0.733571, 0, 1.0};
Point(103) = {-0.002812, -0.733621, 0, 1.0};
Point(104) = {-0.007500, -0.733755, 0, 1.0};
Point(105) = {-0.012334, -0.733980, 0, 1.0};
Point(106) = {-0.017254, -0.734305, 0, 1.0};
Point(107) = {-0.022198, -0.734743, 0, 1.0};
Point(108) = {-0.027104, -0.735312, 0, 1.0};
Point(109) = {-0.031897, -0.736089, 0, 1.0};
Point(110) = {-0.036667, -0.737202, 0, 1.0};
Point(111) = {-0.041613, -0.738534, 0, 1.0};
Point(112) = {-0.046705, -0.739808, 0, 1.0};
Point(113) = {-0.051754, -0.740879, 0, 1.0};
Point(114) = {-0.056594, -0.741711, 0, 1.0};
Point(115) = {-0.061084, -0.742284, 0, 1.0};
Point(116) = {-0.065101, -0.742607, 0, 1.0};
Point(117) = {-0.068517, -0.742704, 0, 1.0};
Point(118) = {-0.071228, -0.742635, 0, 1.0};
Point(119) = {-0.073167, -0.742491, 0, 1.0};
Point(120) = {-0.074323, -0.742362, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html