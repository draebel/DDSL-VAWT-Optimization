SetFactory("OpenCASCADE");

Point(1) = {0.111439, 0.728029, 0, 1.0};
Point(2) = {0.110966, 0.728116, 0, 1.0};
Point(3) = {0.109567, 0.728385, 0, 1.0};
Point(4) = {0.107285, 0.728865, 0, 1.0};
Point(5) = {0.104177, 0.729559, 0, 1.0};
Point(6) = {0.100311, 0.730462, 0, 1.0};
Point(7) = {0.095758, 0.731558, 0, 1.0};
Point(8) = {0.090592, 0.732821, 0, 1.0};
Point(9) = {0.084887, 0.734216, 0, 1.0};
Point(10) = {0.078719, 0.735712, 0, 1.0};
Point(11) = {0.072158, 0.737266, 0, 1.0};
Point(12) = {0.065279, 0.738845, 0, 1.0};
Point(13) = {0.058151, 0.740411, 0, 1.0};
Point(14) = {0.050843, 0.741934, 0, 1.0};
Point(15) = {0.043432, 0.743387, 0, 1.0};
Point(16) = {0.035991, 0.744745, 0, 1.0};
Point(17) = {0.028589, 0.745978, 0, 1.0};
Point(18) = {0.021296, 0.747068, 0, 1.0};
Point(19) = {0.014177, 0.747999, 0, 1.0};
Point(20) = {0.007300, 0.748760, 0, 1.0};
Point(21) = {0.000725, 0.749342, 0, 1.0};
Point(22) = {-0.005487, 0.749742, 0, 1.0};
Point(23) = {-0.011276, 0.749961, 0, 1.0};
Point(24) = {-0.016589, 0.750000, 0, 1.0};
Point(25) = {-0.021379, 0.749861, 0, 1.0};
Point(26) = {-0.025605, 0.749555, 0, 1.0};
Point(27) = {-0.029231, 0.749096, 0, 1.0};
Point(28) = {-0.032233, 0.748501, 0, 1.0};
Point(29) = {-0.034586, 0.747800, 0, 1.0};
Point(30) = {-0.036278, 0.747029, 0, 1.0};
Point(31) = {-0.037288, 0.746260, 0, 1.0};
Point(32) = {-0.037465, 0.745563, 0, 1.0};
Point(33) = {-0.036770, 0.744836, 0, 1.0};
Point(34) = {-0.035299, 0.744016, 0, 1.0};
Point(35) = {-0.033070, 0.743167, 0, 1.0};
Point(36) = {-0.030097, 0.742308, 0, 1.0};
Point(37) = {-0.026398, 0.741455, 0, 1.0};
Point(38) = {-0.022003, 0.740612, 0, 1.0};
Point(39) = {-0.016949, 0.739784, 0, 1.0};
Point(40) = {-0.011285, 0.738972, 0, 1.0};
Point(41) = {-0.005068, 0.738174, 0, 1.0};
Point(42) = {0.001636, 0.737392, 0, 1.0};
Point(43) = {0.008752, 0.736623, 0, 1.0};
Point(44) = {0.016199, 0.735870, 0, 1.0};
Point(45) = {0.023892, 0.735137, 0, 1.0};
Point(46) = {0.031748, 0.734426, 0, 1.0};
Point(47) = {0.039671, 0.733741, 0, 1.0};
Point(48) = {0.047577, 0.733089, 0, 1.0};
Point(49) = {0.055375, 0.732473, 0, 1.0};
Point(50) = {0.062981, 0.731901, 0, 1.0};
Point(51) = {0.070314, 0.731370, 0, 1.0};
Point(52) = {0.077292, 0.730880, 0, 1.0};
Point(53) = {0.083838, 0.730423, 0, 1.0};
Point(54) = {0.089868, 0.729990, 0, 1.0};
Point(55) = {0.095300, 0.729578, 0, 1.0};
Point(56) = {0.100051, 0.729187, 0, 1.0};
Point(57) = {0.104049, 0.728828, 0, 1.0};
Point(58) = {0.107234, 0.728513, 0, 1.0};
Point(59) = {0.109552, 0.728260, 0, 1.0};
Point(60) = {0.110964, 0.728090, 0, 1.0};
Point(61) = {-0.111439, -0.728029, 0, 1.0};
Point(62) = {-0.110966, -0.728116, 0, 1.0};
Point(63) = {-0.109567, -0.728385, 0, 1.0};
Point(64) = {-0.107285, -0.728865, 0, 1.0};
Point(65) = {-0.104177, -0.729559, 0, 1.0};
Point(66) = {-0.100311, -0.730462, 0, 1.0};
Point(67) = {-0.095758, -0.731558, 0, 1.0};
Point(68) = {-0.090592, -0.732821, 0, 1.0};
Point(69) = {-0.084887, -0.734216, 0, 1.0};
Point(70) = {-0.078719, -0.735712, 0, 1.0};
Point(71) = {-0.072158, -0.737266, 0, 1.0};
Point(72) = {-0.065279, -0.738845, 0, 1.0};
Point(73) = {-0.058151, -0.740411, 0, 1.0};
Point(74) = {-0.050843, -0.741934, 0, 1.0};
Point(75) = {-0.043432, -0.743387, 0, 1.0};
Point(76) = {-0.035991, -0.744745, 0, 1.0};
Point(77) = {-0.028589, -0.745978, 0, 1.0};
Point(78) = {-0.021296, -0.747068, 0, 1.0};
Point(79) = {-0.014177, -0.747999, 0, 1.0};
Point(80) = {-0.007300, -0.748760, 0, 1.0};
Point(81) = {-0.000725, -0.749342, 0, 1.0};
Point(82) = {0.005487, -0.749742, 0, 1.0};
Point(83) = {0.011276, -0.749961, 0, 1.0};
Point(84) = {0.016589, -0.750000, 0, 1.0};
Point(85) = {0.021379, -0.749861, 0, 1.0};
Point(86) = {0.025605, -0.749555, 0, 1.0};
Point(87) = {0.029231, -0.749096, 0, 1.0};
Point(88) = {0.032233, -0.748501, 0, 1.0};
Point(89) = {0.034586, -0.747800, 0, 1.0};
Point(90) = {0.036278, -0.747029, 0, 1.0};
Point(91) = {0.037288, -0.746260, 0, 1.0};
Point(92) = {0.037465, -0.745563, 0, 1.0};
Point(93) = {0.036770, -0.744836, 0, 1.0};
Point(94) = {0.035299, -0.744016, 0, 1.0};
Point(95) = {0.033070, -0.743167, 0, 1.0};
Point(96) = {0.030097, -0.742308, 0, 1.0};
Point(97) = {0.026398, -0.741455, 0, 1.0};
Point(98) = {0.022003, -0.740612, 0, 1.0};
Point(99) = {0.016949, -0.739784, 0, 1.0};
Point(100) = {0.011285, -0.738972, 0, 1.0};
Point(101) = {0.005068, -0.738174, 0, 1.0};
Point(102) = {-0.001636, -0.737392, 0, 1.0};
Point(103) = {-0.008752, -0.736623, 0, 1.0};
Point(104) = {-0.016199, -0.735870, 0, 1.0};
Point(105) = {-0.023892, -0.735137, 0, 1.0};
Point(106) = {-0.031748, -0.734426, 0, 1.0};
Point(107) = {-0.039671, -0.733741, 0, 1.0};
Point(108) = {-0.047577, -0.733089, 0, 1.0};
Point(109) = {-0.055375, -0.732473, 0, 1.0};
Point(110) = {-0.062981, -0.731901, 0, 1.0};
Point(111) = {-0.070314, -0.731370, 0, 1.0};
Point(112) = {-0.077292, -0.730880, 0, 1.0};
Point(113) = {-0.083838, -0.730423, 0, 1.0};
Point(114) = {-0.089868, -0.729990, 0, 1.0};
Point(115) = {-0.095300, -0.729578, 0, 1.0};
Point(116) = {-0.100051, -0.729187, 0, 1.0};
Point(117) = {-0.104049, -0.728828, 0, 1.0};
Point(118) = {-0.107234, -0.728513, 0, 1.0};
Point(119) = {-0.109552, -0.728260, 0, 1.0};
Point(120) = {-0.110964, -0.728090, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html