SetFactory("OpenCASCADE");

Point(1) = {0.074293, 0.735352, 0, 1.0};
Point(2) = {0.073977, 0.735410, 0, 1.0};
Point(3) = {0.073045, 0.735590, 0, 1.0};
Point(4) = {0.071523, 0.735910, 0, 1.0};
Point(5) = {0.069451, 0.736373, 0, 1.0};
Point(6) = {0.066874, 0.736975, 0, 1.0};
Point(7) = {0.063839, 0.737705, 0, 1.0};
Point(8) = {0.060395, 0.738547, 0, 1.0};
Point(9) = {0.056591, 0.739478, 0, 1.0};
Point(10) = {0.052479, 0.740475, 0, 1.0};
Point(11) = {0.048105, 0.741511, 0, 1.0};
Point(12) = {0.043519, 0.742564, 0, 1.0};
Point(13) = {0.038767, 0.743607, 0, 1.0};
Point(14) = {0.033895, 0.744623, 0, 1.0};
Point(15) = {0.028955, 0.745591, 0, 1.0};
Point(16) = {0.023994, 0.746497, 0, 1.0};
Point(17) = {0.019060, 0.747319, 0, 1.0};
Point(18) = {0.014197, 0.748045, 0, 1.0};
Point(19) = {0.009452, 0.748666, 0, 1.0};
Point(20) = {0.004866, 0.749173, 0, 1.0};
Point(21) = {0.000484, 0.749561, 0, 1.0};
Point(22) = {-0.003658, 0.749828, 0, 1.0};
Point(23) = {-0.007517, 0.749974, 0, 1.0};
Point(24) = {-0.011059, 0.750000, 0, 1.0};
Point(25) = {-0.014253, 0.749908, 0, 1.0};
Point(26) = {-0.017070, 0.749704, 0, 1.0};
Point(27) = {-0.019487, 0.749398, 0, 1.0};
Point(28) = {-0.021489, 0.749000, 0, 1.0};
Point(29) = {-0.023057, 0.748533, 0, 1.0};
Point(30) = {-0.024185, 0.748020, 0, 1.0};
Point(31) = {-0.024859, 0.747507, 0, 1.0};
Point(32) = {-0.024977, 0.747042, 0, 1.0};
Point(33) = {-0.024513, 0.746557, 0, 1.0};
Point(34) = {-0.023533, 0.746011, 0, 1.0};
Point(35) = {-0.022047, 0.745444, 0, 1.0};
Point(36) = {-0.020065, 0.744872, 0, 1.0};
Point(37) = {-0.017599, 0.744303, 0, 1.0};
Point(38) = {-0.014669, 0.743741, 0, 1.0};
Point(39) = {-0.011299, 0.743189, 0, 1.0};
Point(40) = {-0.007523, 0.742648, 0, 1.0};
Point(41) = {-0.003379, 0.742116, 0, 1.0};
Point(42) = {0.001091, 0.741595, 0, 1.0};
Point(43) = {0.005834, 0.741082, 0, 1.0};
Point(44) = {0.010799, 0.740580, 0, 1.0};
Point(45) = {0.015928, 0.740091, 0, 1.0};
Point(46) = {0.021165, 0.739617, 0, 1.0};
Point(47) = {0.026447, 0.739161, 0, 1.0};
Point(48) = {0.031718, 0.738726, 0, 1.0};
Point(49) = {0.036917, 0.738316, 0, 1.0};
Point(50) = {0.041987, 0.737934, 0, 1.0};
Point(51) = {0.046876, 0.737580, 0, 1.0};
Point(52) = {0.051528, 0.737253, 0, 1.0};
Point(53) = {0.055892, 0.736949, 0, 1.0};
Point(54) = {0.059912, 0.736660, 0, 1.0};
Point(55) = {0.063533, 0.736385, 0, 1.0};
Point(56) = {0.066700, 0.736124, 0, 1.0};
Point(57) = {0.069366, 0.735885, 0, 1.0};
Point(58) = {0.071489, 0.735676, 0, 1.0};
Point(59) = {0.073035, 0.735507, 0, 1.0};
Point(60) = {0.073976, 0.735393, 0, 1.0};
Point(61) = {-0.074293, -0.735352, 0, 1.0};
Point(62) = {-0.073977, -0.735410, 0, 1.0};
Point(63) = {-0.073045, -0.735590, 0, 1.0};
Point(64) = {-0.071523, -0.735910, 0, 1.0};
Point(65) = {-0.069451, -0.736373, 0, 1.0};
Point(66) = {-0.066874, -0.736975, 0, 1.0};
Point(67) = {-0.063839, -0.737705, 0, 1.0};
Point(68) = {-0.060395, -0.738547, 0, 1.0};
Point(69) = {-0.056591, -0.739478, 0, 1.0};
Point(70) = {-0.052479, -0.740475, 0, 1.0};
Point(71) = {-0.048105, -0.741511, 0, 1.0};
Point(72) = {-0.043519, -0.742564, 0, 1.0};
Point(73) = {-0.038767, -0.743607, 0, 1.0};
Point(74) = {-0.033895, -0.744623, 0, 1.0};
Point(75) = {-0.028955, -0.745591, 0, 1.0};
Point(76) = {-0.023994, -0.746497, 0, 1.0};
Point(77) = {-0.019060, -0.747319, 0, 1.0};
Point(78) = {-0.014197, -0.748045, 0, 1.0};
Point(79) = {-0.009452, -0.748666, 0, 1.0};
Point(80) = {-0.004866, -0.749173, 0, 1.0};
Point(81) = {-0.000484, -0.749561, 0, 1.0};
Point(82) = {0.003658, -0.749828, 0, 1.0};
Point(83) = {0.007517, -0.749974, 0, 1.0};
Point(84) = {0.011059, -0.750000, 0, 1.0};
Point(85) = {0.014253, -0.749908, 0, 1.0};
Point(86) = {0.017070, -0.749704, 0, 1.0};
Point(87) = {0.019487, -0.749398, 0, 1.0};
Point(88) = {0.021489, -0.749000, 0, 1.0};
Point(89) = {0.023057, -0.748533, 0, 1.0};
Point(90) = {0.024185, -0.748020, 0, 1.0};
Point(91) = {0.024859, -0.747507, 0, 1.0};
Point(92) = {0.024977, -0.747042, 0, 1.0};
Point(93) = {0.024513, -0.746557, 0, 1.0};
Point(94) = {0.023533, -0.746011, 0, 1.0};
Point(95) = {0.022047, -0.745444, 0, 1.0};
Point(96) = {0.020065, -0.744872, 0, 1.0};
Point(97) = {0.017599, -0.744303, 0, 1.0};
Point(98) = {0.014669, -0.743741, 0, 1.0};
Point(99) = {0.011299, -0.743189, 0, 1.0};
Point(100) = {0.007523, -0.742648, 0, 1.0};
Point(101) = {0.003379, -0.742116, 0, 1.0};
Point(102) = {-0.001091, -0.741595, 0, 1.0};
Point(103) = {-0.005834, -0.741082, 0, 1.0};
Point(104) = {-0.010799, -0.740580, 0, 1.0};
Point(105) = {-0.015928, -0.740091, 0, 1.0};
Point(106) = {-0.021165, -0.739617, 0, 1.0};
Point(107) = {-0.026447, -0.739161, 0, 1.0};
Point(108) = {-0.031718, -0.738726, 0, 1.0};
Point(109) = {-0.036917, -0.738316, 0, 1.0};
Point(110) = {-0.041987, -0.737934, 0, 1.0};
Point(111) = {-0.046876, -0.737580, 0, 1.0};
Point(112) = {-0.051528, -0.737253, 0, 1.0};
Point(113) = {-0.055892, -0.736949, 0, 1.0};
Point(114) = {-0.059912, -0.736660, 0, 1.0};
Point(115) = {-0.063533, -0.736385, 0, 1.0};
Point(116) = {-0.066700, -0.736124, 0, 1.0};
Point(117) = {-0.069366, -0.735885, 0, 1.0};
Point(118) = {-0.071489, -0.735676, 0, 1.0};
Point(119) = {-0.073035, -0.735507, 0, 1.0};
Point(120) = {-0.073976, -0.735393, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html