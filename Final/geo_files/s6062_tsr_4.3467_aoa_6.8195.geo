SetFactory("OpenCASCADE");

Point(1) = {0.111736, 0.728019, 0, 1.0};
Point(2) = {0.111263, 0.728106, 0, 1.0};
Point(3) = {0.109864, 0.728376, 0, 1.0};
Point(4) = {0.107580, 0.728856, 0, 1.0};
Point(5) = {0.104471, 0.729550, 0, 1.0};
Point(6) = {0.100603, 0.730454, 0, 1.0};
Point(7) = {0.096049, 0.731550, 0, 1.0};
Point(8) = {0.090880, 0.732813, 0, 1.0};
Point(9) = {0.085172, 0.734209, 0, 1.0};
Point(10) = {0.079002, 0.735706, 0, 1.0};
Point(11) = {0.072438, 0.737260, 0, 1.0};
Point(12) = {0.065555, 0.738840, 0, 1.0};
Point(13) = {0.058425, 0.740407, 0, 1.0};
Point(14) = {0.051114, 0.741931, 0, 1.0};
Point(15) = {0.043699, 0.743384, 0, 1.0};
Point(16) = {0.036255, 0.744743, 0, 1.0};
Point(17) = {0.028850, 0.745976, 0, 1.0};
Point(18) = {0.021553, 0.747066, 0, 1.0};
Point(19) = {0.014431, 0.747998, 0, 1.0};
Point(20) = {0.007550, 0.748759, 0, 1.0};
Point(21) = {0.000973, 0.749342, 0, 1.0};
Point(22) = {-0.005242, 0.749742, 0, 1.0};
Point(23) = {-0.011033, 0.749961, 0, 1.0};
Point(24) = {-0.016349, 0.750000, 0, 1.0};
Point(25) = {-0.021141, 0.749861, 0, 1.0};
Point(26) = {-0.025369, 0.749555, 0, 1.0};
Point(27) = {-0.028997, 0.749096, 0, 1.0};
Point(28) = {-0.032000, 0.748500, 0, 1.0};
Point(29) = {-0.034354, 0.747799, 0, 1.0};
Point(30) = {-0.036047, 0.747028, 0, 1.0};
Point(31) = {-0.037057, 0.746259, 0, 1.0};
Point(32) = {-0.037235, 0.745561, 0, 1.0};
Point(33) = {-0.036539, 0.744833, 0, 1.0};
Point(34) = {-0.035068, 0.744014, 0, 1.0};
Point(35) = {-0.032838, 0.743164, 0, 1.0};
Point(36) = {-0.029863, 0.742305, 0, 1.0};
Point(37) = {-0.026163, 0.741451, 0, 1.0};
Point(38) = {-0.021766, 0.740608, 0, 1.0};
Point(39) = {-0.016709, 0.739779, 0, 1.0};
Point(40) = {-0.011042, 0.738967, 0, 1.0};
Point(41) = {-0.004823, 0.738169, 0, 1.0};
Point(42) = {0.001884, 0.737387, 0, 1.0};
Point(43) = {0.009003, 0.736617, 0, 1.0};
Point(44) = {0.016453, 0.735863, 0, 1.0};
Point(45) = {0.024151, 0.735130, 0, 1.0};
Point(46) = {0.032009, 0.734419, 0, 1.0};
Point(47) = {0.039936, 0.733734, 0, 1.0};
Point(48) = {0.047846, 0.733081, 0, 1.0};
Point(49) = {0.055648, 0.732465, 0, 1.0};
Point(50) = {0.063257, 0.731892, 0, 1.0};
Point(51) = {0.070593, 0.731361, 0, 1.0};
Point(52) = {0.077574, 0.730871, 0, 1.0};
Point(53) = {0.084123, 0.730414, 0, 1.0};
Point(54) = {0.090156, 0.729981, 0, 1.0};
Point(55) = {0.095590, 0.729569, 0, 1.0};
Point(56) = {0.100343, 0.729177, 0, 1.0};
Point(57) = {0.104343, 0.728818, 0, 1.0};
Point(58) = {0.107529, 0.728504, 0, 1.0};
Point(59) = {0.109849, 0.728251, 0, 1.0};
Point(60) = {0.111262, 0.728080, 0, 1.0};
Point(61) = {-0.111736, -0.728019, 0, 1.0};
Point(62) = {-0.111263, -0.728106, 0, 1.0};
Point(63) = {-0.109864, -0.728376, 0, 1.0};
Point(64) = {-0.107580, -0.728856, 0, 1.0};
Point(65) = {-0.104471, -0.729550, 0, 1.0};
Point(66) = {-0.100603, -0.730454, 0, 1.0};
Point(67) = {-0.096049, -0.731550, 0, 1.0};
Point(68) = {-0.090880, -0.732813, 0, 1.0};
Point(69) = {-0.085172, -0.734209, 0, 1.0};
Point(70) = {-0.079002, -0.735706, 0, 1.0};
Point(71) = {-0.072438, -0.737260, 0, 1.0};
Point(72) = {-0.065555, -0.738840, 0, 1.0};
Point(73) = {-0.058425, -0.740407, 0, 1.0};
Point(74) = {-0.051114, -0.741931, 0, 1.0};
Point(75) = {-0.043699, -0.743384, 0, 1.0};
Point(76) = {-0.036255, -0.744743, 0, 1.0};
Point(77) = {-0.028850, -0.745976, 0, 1.0};
Point(78) = {-0.021553, -0.747066, 0, 1.0};
Point(79) = {-0.014431, -0.747998, 0, 1.0};
Point(80) = {-0.007550, -0.748759, 0, 1.0};
Point(81) = {-0.000973, -0.749342, 0, 1.0};
Point(82) = {0.005242, -0.749742, 0, 1.0};
Point(83) = {0.011033, -0.749961, 0, 1.0};
Point(84) = {0.016349, -0.750000, 0, 1.0};
Point(85) = {0.021141, -0.749861, 0, 1.0};
Point(86) = {0.025369, -0.749555, 0, 1.0};
Point(87) = {0.028997, -0.749096, 0, 1.0};
Point(88) = {0.032000, -0.748500, 0, 1.0};
Point(89) = {0.034354, -0.747799, 0, 1.0};
Point(90) = {0.036047, -0.747028, 0, 1.0};
Point(91) = {0.037057, -0.746259, 0, 1.0};
Point(92) = {0.037235, -0.745561, 0, 1.0};
Point(93) = {0.036539, -0.744833, 0, 1.0};
Point(94) = {0.035068, -0.744014, 0, 1.0};
Point(95) = {0.032838, -0.743164, 0, 1.0};
Point(96) = {0.029863, -0.742305, 0, 1.0};
Point(97) = {0.026163, -0.741451, 0, 1.0};
Point(98) = {0.021766, -0.740608, 0, 1.0};
Point(99) = {0.016709, -0.739779, 0, 1.0};
Point(100) = {0.011042, -0.738967, 0, 1.0};
Point(101) = {0.004823, -0.738169, 0, 1.0};
Point(102) = {-0.001884, -0.737387, 0, 1.0};
Point(103) = {-0.009003, -0.736617, 0, 1.0};
Point(104) = {-0.016453, -0.735863, 0, 1.0};
Point(105) = {-0.024151, -0.735130, 0, 1.0};
Point(106) = {-0.032009, -0.734419, 0, 1.0};
Point(107) = {-0.039936, -0.733734, 0, 1.0};
Point(108) = {-0.047846, -0.733081, 0, 1.0};
Point(109) = {-0.055648, -0.732465, 0, 1.0};
Point(110) = {-0.063257, -0.731892, 0, 1.0};
Point(111) = {-0.070593, -0.731361, 0, 1.0};
Point(112) = {-0.077574, -0.730871, 0, 1.0};
Point(113) = {-0.084123, -0.730414, 0, 1.0};
Point(114) = {-0.090156, -0.729981, 0, 1.0};
Point(115) = {-0.095590, -0.729569, 0, 1.0};
Point(116) = {-0.100343, -0.729177, 0, 1.0};
Point(117) = {-0.104343, -0.728818, 0, 1.0};
Point(118) = {-0.107529, -0.728504, 0, 1.0};
Point(119) = {-0.109849, -0.728251, 0, 1.0};
Point(120) = {-0.111262, -0.728080, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html