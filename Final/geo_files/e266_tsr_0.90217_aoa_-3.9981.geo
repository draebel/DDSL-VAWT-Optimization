SetFactory("OpenCASCADE");

Point(1) = {0.074757, 0.742158, 0, 1.0};
Point(2) = {0.074369, 0.742206, 0, 1.0};
Point(3) = {0.073260, 0.742386, 0, 1.0};
Point(4) = {0.071541, 0.742724, 0, 1.0};
Point(5) = {0.069306, 0.743170, 0, 1.0};
Point(6) = {0.066583, 0.743656, 0, 1.0};
Point(7) = {0.063368, 0.744168, 0, 1.0};
Point(8) = {0.059690, 0.744734, 0, 1.0};
Point(9) = {0.055619, 0.745367, 0, 1.0};
Point(10) = {0.051232, 0.746062, 0, 1.0};
Point(11) = {0.046610, 0.746807, 0, 1.0};
Point(12) = {0.041835, 0.747580, 0, 1.0};
Point(13) = {0.036998, 0.748347, 0, 1.0};
Point(14) = {0.032183, 0.749061, 0, 1.0};
Point(15) = {0.027475, 0.749639, 0, 1.0};
Point(16) = {0.022887, 0.749965, 0, 1.0};
Point(17) = {0.018357, 0.750000, 0, 1.0};
Point(18) = {0.013866, 0.749787, 0, 1.0};
Point(19) = {0.009441, 0.749361, 0, 1.0};
Point(20) = {0.005116, 0.748754, 0, 1.0};
Point(21) = {0.000941, 0.747993, 0, 1.0};
Point(22) = {-0.003041, 0.747096, 0, 1.0};
Point(23) = {-0.006789, 0.746083, 0, 1.0};
Point(24) = {-0.010266, 0.744971, 0, 1.0};
Point(25) = {-0.013438, 0.743783, 0, 1.0};
Point(26) = {-0.016272, 0.742539, 0, 1.0};
Point(27) = {-0.018743, 0.741262, 0, 1.0};
Point(28) = {-0.020828, 0.739978, 0, 1.0};
Point(29) = {-0.022508, 0.738712, 0, 1.0};
Point(30) = {-0.023769, 0.737499, 0, 1.0};
Point(31) = {-0.024602, 0.736381, 0, 1.0};
Point(32) = {-0.024992, 0.735417, 0, 1.0};
Point(33) = {-0.024818, 0.734696, 0, 1.0};
Point(34) = {-0.023997, 0.734132, 0, 1.0};
Point(35) = {-0.022582, 0.733611, 0, 1.0};
Point(36) = {-0.020628, 0.733154, 0, 1.0};
Point(37) = {-0.018166, 0.732770, 0, 1.0};
Point(38) = {-0.015226, 0.732463, 0, 1.0};
Point(39) = {-0.011845, 0.732232, 0, 1.0};
Point(40) = {-0.008064, 0.732079, 0, 1.0};
Point(41) = {-0.003933, 0.732005, 0, 1.0};
Point(42) = {0.000501, 0.732010, 0, 1.0};
Point(43) = {0.005186, 0.732095, 0, 1.0};
Point(44) = {0.010065, 0.732262, 0, 1.0};
Point(45) = {0.015081, 0.732510, 0, 1.0};
Point(46) = {0.020177, 0.732840, 0, 1.0};
Point(47) = {0.025289, 0.733254, 0, 1.0};
Point(48) = {0.030361, 0.733753, 0, 1.0};
Point(49) = {0.035329, 0.734344, 0, 1.0};
Point(50) = {0.040129, 0.735049, 0, 1.0};
Point(51) = {0.044744, 0.735911, 0, 1.0};
Point(52) = {0.049198, 0.736930, 0, 1.0};
Point(53) = {0.053509, 0.738056, 0, 1.0};
Point(54) = {0.057686, 0.739200, 0, 1.0};
Point(55) = {0.061671, 0.740231, 0, 1.0};
Point(56) = {0.065341, 0.741061, 0, 1.0};
Point(57) = {0.068569, 0.741650, 0, 1.0};
Point(58) = {0.071233, 0.741831, 0, 1.0};
Point(59) = {0.073187, 0.741962, 0, 1.0};
Point(60) = {0.074366, 0.742100, 0, 1.0};
Point(61) = {-0.074757, -0.742158, 0, 1.0};
Point(62) = {-0.074369, -0.742206, 0, 1.0};
Point(63) = {-0.073260, -0.742386, 0, 1.0};
Point(64) = {-0.071541, -0.742724, 0, 1.0};
Point(65) = {-0.069306, -0.743170, 0, 1.0};
Point(66) = {-0.066583, -0.743656, 0, 1.0};
Point(67) = {-0.063368, -0.744168, 0, 1.0};
Point(68) = {-0.059690, -0.744734, 0, 1.0};
Point(69) = {-0.055619, -0.745367, 0, 1.0};
Point(70) = {-0.051232, -0.746062, 0, 1.0};
Point(71) = {-0.046610, -0.746807, 0, 1.0};
Point(72) = {-0.041835, -0.747580, 0, 1.0};
Point(73) = {-0.036998, -0.748347, 0, 1.0};
Point(74) = {-0.032183, -0.749061, 0, 1.0};
Point(75) = {-0.027475, -0.749639, 0, 1.0};
Point(76) = {-0.022887, -0.749965, 0, 1.0};
Point(77) = {-0.018357, -0.750000, 0, 1.0};
Point(78) = {-0.013866, -0.749787, 0, 1.0};
Point(79) = {-0.009441, -0.749361, 0, 1.0};
Point(80) = {-0.005116, -0.748754, 0, 1.0};
Point(81) = {-0.000941, -0.747993, 0, 1.0};
Point(82) = {0.003041, -0.747096, 0, 1.0};
Point(83) = {0.006789, -0.746083, 0, 1.0};
Point(84) = {0.010266, -0.744971, 0, 1.0};
Point(85) = {0.013438, -0.743783, 0, 1.0};
Point(86) = {0.016272, -0.742539, 0, 1.0};
Point(87) = {0.018743, -0.741262, 0, 1.0};
Point(88) = {0.020828, -0.739978, 0, 1.0};
Point(89) = {0.022508, -0.738712, 0, 1.0};
Point(90) = {0.023769, -0.737499, 0, 1.0};
Point(91) = {0.024602, -0.736381, 0, 1.0};
Point(92) = {0.024992, -0.735417, 0, 1.0};
Point(93) = {0.024818, -0.734696, 0, 1.0};
Point(94) = {0.023997, -0.734132, 0, 1.0};
Point(95) = {0.022582, -0.733611, 0, 1.0};
Point(96) = {0.020628, -0.733154, 0, 1.0};
Point(97) = {0.018166, -0.732770, 0, 1.0};
Point(98) = {0.015226, -0.732463, 0, 1.0};
Point(99) = {0.011845, -0.732232, 0, 1.0};
Point(100) = {0.008064, -0.732079, 0, 1.0};
Point(101) = {0.003933, -0.732005, 0, 1.0};
Point(102) = {-0.000501, -0.732010, 0, 1.0};
Point(103) = {-0.005186, -0.732095, 0, 1.0};
Point(104) = {-0.010065, -0.732262, 0, 1.0};
Point(105) = {-0.015081, -0.732510, 0, 1.0};
Point(106) = {-0.020177, -0.732840, 0, 1.0};
Point(107) = {-0.025289, -0.733254, 0, 1.0};
Point(108) = {-0.030361, -0.733753, 0, 1.0};
Point(109) = {-0.035329, -0.734344, 0, 1.0};
Point(110) = {-0.040129, -0.735049, 0, 1.0};
Point(111) = {-0.044744, -0.735911, 0, 1.0};
Point(112) = {-0.049198, -0.736930, 0, 1.0};
Point(113) = {-0.053509, -0.738056, 0, 1.0};
Point(114) = {-0.057686, -0.739200, 0, 1.0};
Point(115) = {-0.061671, -0.740231, 0, 1.0};
Point(116) = {-0.065341, -0.741061, 0, 1.0};
Point(117) = {-0.068569, -0.741650, 0, 1.0};
Point(118) = {-0.071233, -0.741831, 0, 1.0};
Point(119) = {-0.073187, -0.741962, 0, 1.0};
Point(120) = {-0.074366, -0.742100, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html