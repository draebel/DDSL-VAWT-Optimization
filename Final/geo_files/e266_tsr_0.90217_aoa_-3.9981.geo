SetFactory("OpenCASCADE");

Point(1) = {0.112178, 0.738240, 0, 1.0};
Point(2) = {0.111598, 0.738312, 0, 1.0};
Point(3) = {0.109934, 0.738582, 0, 1.0};
Point(4) = {0.107357, 0.739089, 0, 1.0};
Point(5) = {0.104004, 0.739757, 0, 1.0};
Point(6) = {0.099921, 0.740486, 0, 1.0};
Point(7) = {0.095099, 0.741254, 0, 1.0};
Point(8) = {0.089584, 0.742103, 0, 1.0};
Point(9) = {0.083479, 0.743052, 0, 1.0};
Point(10) = {0.076900, 0.744094, 0, 1.0};
Point(11) = {0.069969, 0.745212, 0, 1.0};
Point(12) = {0.062809, 0.746371, 0, 1.0};
Point(13) = {0.055554, 0.747521, 0, 1.0};
Point(14) = {0.048333, 0.748591, 0, 1.0};
Point(15) = {0.041273, 0.749458, 0, 1.0};
Point(16) = {0.034393, 0.749947, 0, 1.0};
Point(17) = {0.027599, 0.750000, 0, 1.0};
Point(18) = {0.020864, 0.749681, 0, 1.0};
Point(19) = {0.014228, 0.749041, 0, 1.0};
Point(20) = {0.007743, 0.748131, 0, 1.0};
Point(21) = {0.001482, 0.746990, 0, 1.0};
Point(22) = {-0.004490, 0.745645, 0, 1.0};
Point(23) = {-0.010111, 0.744126, 0, 1.0};
Point(24) = {-0.015325, 0.742458, 0, 1.0};
Point(25) = {-0.020082, 0.740677, 0, 1.0};
Point(26) = {-0.024332, 0.738812, 0, 1.0};
Point(27) = {-0.028038, 0.736896, 0, 1.0};
Point(28) = {-0.031164, 0.734970, 0, 1.0};
Point(29) = {-0.033683, 0.733073, 0, 1.0};
Point(30) = {-0.035575, 0.731254, 0, 1.0};
Point(31) = {-0.036824, 0.729576, 0, 1.0};
Point(32) = {-0.037409, 0.728131, 0, 1.0};
Point(33) = {-0.037148, 0.727050, 0, 1.0};
Point(34) = {-0.035917, 0.726204, 0, 1.0};
Point(35) = {-0.033795, 0.725422, 0, 1.0};
Point(36) = {-0.030864, 0.724737, 0, 1.0};
Point(37) = {-0.027172, 0.724161, 0, 1.0};
Point(38) = {-0.022764, 0.723701, 0, 1.0};
Point(39) = {-0.017693, 0.723354, 0, 1.0};
Point(40) = {-0.012023, 0.723125, 0, 1.0};
Point(41) = {-0.005828, 0.723014, 0, 1.0};
Point(42) = {0.000822, 0.723022, 0, 1.0};
Point(43) = {0.007847, 0.723149, 0, 1.0};
Point(44) = {0.015165, 0.723399, 0, 1.0};
Point(45) = {0.022687, 0.723771, 0, 1.0};
Point(46) = {0.030328, 0.724266, 0, 1.0};
Point(47) = {0.037995, 0.724886, 0, 1.0};
Point(48) = {0.045600, 0.725636, 0, 1.0};
Point(49) = {0.053050, 0.726522, 0, 1.0};
Point(50) = {0.060250, 0.727578, 0, 1.0};
Point(51) = {0.067171, 0.728871, 0, 1.0};
Point(52) = {0.073850, 0.730399, 0, 1.0};
Point(53) = {0.080315, 0.732088, 0, 1.0};
Point(54) = {0.086579, 0.733804, 0, 1.0};
Point(55) = {0.092555, 0.735350, 0, 1.0};
Point(56) = {0.098059, 0.736595, 0, 1.0};
Point(57) = {0.102899, 0.737477, 0, 1.0};
Point(58) = {0.106894, 0.737749, 0, 1.0};
Point(59) = {0.109825, 0.737946, 0, 1.0};
Point(60) = {0.111592, 0.738153, 0, 1.0};
Point(61) = {-0.112178, -0.738240, 0, 1.0};
Point(62) = {-0.111598, -0.738312, 0, 1.0};
Point(63) = {-0.109934, -0.738582, 0, 1.0};
Point(64) = {-0.107357, -0.739089, 0, 1.0};
Point(65) = {-0.104004, -0.739757, 0, 1.0};
Point(66) = {-0.099921, -0.740486, 0, 1.0};
Point(67) = {-0.095099, -0.741254, 0, 1.0};
Point(68) = {-0.089584, -0.742103, 0, 1.0};
Point(69) = {-0.083479, -0.743052, 0, 1.0};
Point(70) = {-0.076900, -0.744094, 0, 1.0};
Point(71) = {-0.069969, -0.745212, 0, 1.0};
Point(72) = {-0.062809, -0.746371, 0, 1.0};
Point(73) = {-0.055554, -0.747521, 0, 1.0};
Point(74) = {-0.048333, -0.748591, 0, 1.0};
Point(75) = {-0.041273, -0.749458, 0, 1.0};
Point(76) = {-0.034393, -0.749947, 0, 1.0};
Point(77) = {-0.027599, -0.750000, 0, 1.0};
Point(78) = {-0.020864, -0.749681, 0, 1.0};
Point(79) = {-0.014228, -0.749041, 0, 1.0};
Point(80) = {-0.007743, -0.748131, 0, 1.0};
Point(81) = {-0.001482, -0.746990, 0, 1.0};
Point(82) = {0.004490, -0.745645, 0, 1.0};
Point(83) = {0.010111, -0.744126, 0, 1.0};
Point(84) = {0.015325, -0.742458, 0, 1.0};
Point(85) = {0.020082, -0.740677, 0, 1.0};
Point(86) = {0.024332, -0.738812, 0, 1.0};
Point(87) = {0.028038, -0.736896, 0, 1.0};
Point(88) = {0.031164, -0.734970, 0, 1.0};
Point(89) = {0.033683, -0.733073, 0, 1.0};
Point(90) = {0.035575, -0.731254, 0, 1.0};
Point(91) = {0.036824, -0.729576, 0, 1.0};
Point(92) = {0.037409, -0.728131, 0, 1.0};
Point(93) = {0.037148, -0.727050, 0, 1.0};
Point(94) = {0.035917, -0.726204, 0, 1.0};
Point(95) = {0.033795, -0.725422, 0, 1.0};
Point(96) = {0.030864, -0.724737, 0, 1.0};
Point(97) = {0.027172, -0.724161, 0, 1.0};
Point(98) = {0.022764, -0.723701, 0, 1.0};
Point(99) = {0.017693, -0.723354, 0, 1.0};
Point(100) = {0.012023, -0.723125, 0, 1.0};
Point(101) = {0.005828, -0.723014, 0, 1.0};
Point(102) = {-0.000822, -0.723022, 0, 1.0};
Point(103) = {-0.007847, -0.723149, 0, 1.0};
Point(104) = {-0.015165, -0.723399, 0, 1.0};
Point(105) = {-0.022687, -0.723771, 0, 1.0};
Point(106) = {-0.030328, -0.724266, 0, 1.0};
Point(107) = {-0.037995, -0.724886, 0, 1.0};
Point(108) = {-0.045600, -0.725636, 0, 1.0};
Point(109) = {-0.053050, -0.726522, 0, 1.0};
Point(110) = {-0.060250, -0.727578, 0, 1.0};
Point(111) = {-0.067171, -0.728871, 0, 1.0};
Point(112) = {-0.073850, -0.730399, 0, 1.0};
Point(113) = {-0.080315, -0.732088, 0, 1.0};
Point(114) = {-0.086579, -0.733804, 0, 1.0};
Point(115) = {-0.092555, -0.735350, 0, 1.0};
Point(116) = {-0.098059, -0.736595, 0, 1.0};
Point(117) = {-0.102899, -0.737477, 0, 1.0};
Point(118) = {-0.106894, -0.737749, 0, 1.0};
Point(119) = {-0.109825, -0.737946, 0, 1.0};
Point(120) = {-0.111592, -0.738153, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html