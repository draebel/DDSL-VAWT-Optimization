SetFactory("OpenCASCADE");

Point(1) = {0.112135, 0.738237, 0, 1.0};
Point(2) = {0.111554, 0.738310, 0, 1.0};
Point(3) = {0.109890, 0.738580, 0, 1.0};
Point(4) = {0.107312, 0.739087, 0, 1.0};
Point(5) = {0.103959, 0.739755, 0, 1.0};
Point(6) = {0.099875, 0.740484, 0, 1.0};
Point(7) = {0.095052, 0.741252, 0, 1.0};
Point(8) = {0.089536, 0.742101, 0, 1.0};
Point(9) = {0.083429, 0.743050, 0, 1.0};
Point(10) = {0.076848, 0.744092, 0, 1.0};
Point(11) = {0.069915, 0.745211, 0, 1.0};
Point(12) = {0.062753, 0.746370, 0, 1.0};
Point(13) = {0.055497, 0.747520, 0, 1.0};
Point(14) = {0.048274, 0.748591, 0, 1.0};
Point(15) = {0.041213, 0.749458, 0, 1.0};
Point(16) = {0.034331, 0.749947, 0, 1.0};
Point(17) = {0.027535, 0.750000, 0, 1.0};
Point(18) = {0.020798, 0.749681, 0, 1.0};
Point(19) = {0.014161, 0.749041, 0, 1.0};
Point(20) = {0.007674, 0.748131, 0, 1.0};
Point(21) = {0.001412, 0.746989, 0, 1.0};
Point(22) = {-0.004561, 0.745644, 0, 1.0};
Point(23) = {-0.010184, 0.744125, 0, 1.0};
Point(24) = {-0.015400, 0.742457, 0, 1.0};
Point(25) = {-0.020157, 0.740675, 0, 1.0};
Point(26) = {-0.024409, 0.738809, 0, 1.0};
Point(27) = {-0.028115, 0.736893, 0, 1.0};
Point(28) = {-0.031242, 0.734966, 0, 1.0};
Point(29) = {-0.033762, 0.733069, 0, 1.0};
Point(30) = {-0.035654, 0.731249, 0, 1.0};
Point(31) = {-0.036903, 0.729571, 0, 1.0};
Point(32) = {-0.037488, 0.728126, 0, 1.0};
Point(33) = {-0.037228, 0.727045, 0, 1.0};
Point(34) = {-0.035996, 0.726199, 0, 1.0};
Point(35) = {-0.033873, 0.725416, 0, 1.0};
Point(36) = {-0.030942, 0.724731, 0, 1.0};
Point(37) = {-0.027249, 0.724154, 0, 1.0};
Point(38) = {-0.022840, 0.723694, 0, 1.0};
Point(39) = {-0.017768, 0.723348, 0, 1.0};
Point(40) = {-0.012096, 0.723119, 0, 1.0};
Point(41) = {-0.005899, 0.723008, 0, 1.0};
Point(42) = {0.000752, 0.723015, 0, 1.0};
Point(43) = {0.007779, 0.723143, 0, 1.0};
Point(44) = {0.015098, 0.723393, 0, 1.0};
Point(45) = {0.022622, 0.723765, 0, 1.0};
Point(46) = {0.030265, 0.724260, 0, 1.0};
Point(47) = {0.037934, 0.724880, 0, 1.0};
Point(48) = {0.045541, 0.725630, 0, 1.0};
Point(49) = {0.052993, 0.726516, 0, 1.0};
Point(50) = {0.060194, 0.727573, 0, 1.0};
Point(51) = {0.067116, 0.728866, 0, 1.0};
Point(52) = {0.073797, 0.730394, 0, 1.0};
Point(53) = {0.080263, 0.732084, 0, 1.0};
Point(54) = {0.086530, 0.733800, 0, 1.0};
Point(55) = {0.092507, 0.735347, 0, 1.0};
Point(56) = {0.098012, 0.736592, 0, 1.0};
Point(57) = {0.102854, 0.737474, 0, 1.0};
Point(58) = {0.106849, 0.737746, 0, 1.0};
Point(59) = {0.109781, 0.737944, 0, 1.0};
Point(60) = {0.111549, 0.738150, 0, 1.0};
Point(61) = {-0.112135, -0.738237, 0, 1.0};
Point(62) = {-0.111554, -0.738310, 0, 1.0};
Point(63) = {-0.109890, -0.738580, 0, 1.0};
Point(64) = {-0.107312, -0.739087, 0, 1.0};
Point(65) = {-0.103959, -0.739755, 0, 1.0};
Point(66) = {-0.099875, -0.740484, 0, 1.0};
Point(67) = {-0.095052, -0.741252, 0, 1.0};
Point(68) = {-0.089536, -0.742101, 0, 1.0};
Point(69) = {-0.083429, -0.743050, 0, 1.0};
Point(70) = {-0.076848, -0.744092, 0, 1.0};
Point(71) = {-0.069915, -0.745211, 0, 1.0};
Point(72) = {-0.062753, -0.746370, 0, 1.0};
Point(73) = {-0.055497, -0.747520, 0, 1.0};
Point(74) = {-0.048274, -0.748591, 0, 1.0};
Point(75) = {-0.041213, -0.749458, 0, 1.0};
Point(76) = {-0.034331, -0.749947, 0, 1.0};
Point(77) = {-0.027535, -0.750000, 0, 1.0};
Point(78) = {-0.020798, -0.749681, 0, 1.0};
Point(79) = {-0.014161, -0.749041, 0, 1.0};
Point(80) = {-0.007674, -0.748131, 0, 1.0};
Point(81) = {-0.001412, -0.746989, 0, 1.0};
Point(82) = {0.004561, -0.745644, 0, 1.0};
Point(83) = {0.010184, -0.744125, 0, 1.0};
Point(84) = {0.015400, -0.742457, 0, 1.0};
Point(85) = {0.020157, -0.740675, 0, 1.0};
Point(86) = {0.024409, -0.738809, 0, 1.0};
Point(87) = {0.028115, -0.736893, 0, 1.0};
Point(88) = {0.031242, -0.734966, 0, 1.0};
Point(89) = {0.033762, -0.733069, 0, 1.0};
Point(90) = {0.035654, -0.731249, 0, 1.0};
Point(91) = {0.036903, -0.729571, 0, 1.0};
Point(92) = {0.037488, -0.728126, 0, 1.0};
Point(93) = {0.037228, -0.727045, 0, 1.0};
Point(94) = {0.035996, -0.726199, 0, 1.0};
Point(95) = {0.033873, -0.725416, 0, 1.0};
Point(96) = {0.030942, -0.724731, 0, 1.0};
Point(97) = {0.027249, -0.724154, 0, 1.0};
Point(98) = {0.022840, -0.723694, 0, 1.0};
Point(99) = {0.017768, -0.723348, 0, 1.0};
Point(100) = {0.012096, -0.723119, 0, 1.0};
Point(101) = {0.005899, -0.723008, 0, 1.0};
Point(102) = {-0.000752, -0.723015, 0, 1.0};
Point(103) = {-0.007779, -0.723143, 0, 1.0};
Point(104) = {-0.015098, -0.723393, 0, 1.0};
Point(105) = {-0.022622, -0.723765, 0, 1.0};
Point(106) = {-0.030265, -0.724260, 0, 1.0};
Point(107) = {-0.037934, -0.724880, 0, 1.0};
Point(108) = {-0.045541, -0.725630, 0, 1.0};
Point(109) = {-0.052993, -0.726516, 0, 1.0};
Point(110) = {-0.060194, -0.727573, 0, 1.0};
Point(111) = {-0.067116, -0.728866, 0, 1.0};
Point(112) = {-0.073797, -0.730394, 0, 1.0};
Point(113) = {-0.080263, -0.732084, 0, 1.0};
Point(114) = {-0.086530, -0.733800, 0, 1.0};
Point(115) = {-0.092507, -0.735347, 0, 1.0};
Point(116) = {-0.098012, -0.736592, 0, 1.0};
Point(117) = {-0.102854, -0.737474, 0, 1.0};
Point(118) = {-0.106849, -0.737746, 0, 1.0};
Point(119) = {-0.109781, -0.737944, 0, 1.0};
Point(120) = {-0.111549, -0.738150, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html