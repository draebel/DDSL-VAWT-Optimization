SetFactory("OpenCASCADE");

Point(1) = {0.074842, 0.738235, 0, 1.0};
Point(2) = {0.074260, 0.738307, 0, 1.0};
Point(3) = {0.072596, 0.738577, 0, 1.0};
Point(4) = {0.070017, 0.739084, 0, 1.0};
Point(5) = {0.066663, 0.739752, 0, 1.0};
Point(6) = {0.062579, 0.740482, 0, 1.0};
Point(7) = {0.057754, 0.741250, 0, 1.0};
Point(8) = {0.052237, 0.742099, 0, 1.0};
Point(9) = {0.046129, 0.743049, 0, 1.0};
Point(10) = {0.039546, 0.744091, 0, 1.0};
Point(11) = {0.032611, 0.745210, 0, 1.0};
Point(12) = {0.025448, 0.746369, 0, 1.0};
Point(13) = {0.018190, 0.747519, 0, 1.0};
Point(14) = {0.010965, 0.748591, 0, 1.0};
Point(15) = {0.003902, 0.749458, 0, 1.0};
Point(16) = {-0.002981, 0.749947, 0, 1.0};
Point(17) = {-0.009779, 0.750000, 0, 1.0};
Point(18) = {-0.016517, 0.749681, 0, 1.0};
Point(19) = {-0.023156, 0.749041, 0, 1.0};
Point(20) = {-0.029644, 0.748130, 0, 1.0};
Point(21) = {-0.035908, 0.746989, 0, 1.0};
Point(22) = {-0.041883, 0.745643, 0, 1.0};
Point(23) = {-0.047507, 0.744123, 0, 1.0};
Point(24) = {-0.052724, 0.742455, 0, 1.0};
Point(25) = {-0.057483, 0.740672, 0, 1.0};
Point(26) = {-0.061735, 0.738806, 0, 1.0};
Point(27) = {-0.065442, 0.736890, 0, 1.0};
Point(28) = {-0.068570, 0.734963, 0, 1.0};
Point(29) = {-0.071090, 0.733064, 0, 1.0};
Point(30) = {-0.072983, 0.731245, 0, 1.0};
Point(31) = {-0.074233, 0.729566, 0, 1.0};
Point(32) = {-0.074817, 0.728120, 0, 1.0};
Point(33) = {-0.074557, 0.727039, 0, 1.0};
Point(34) = {-0.073325, 0.726193, 0, 1.0};
Point(35) = {-0.071202, 0.725410, 0, 1.0};
Point(36) = {-0.068269, 0.724725, 0, 1.0};
Point(37) = {-0.064576, 0.724148, 0, 1.0};
Point(38) = {-0.060165, 0.723688, 0, 1.0};
Point(39) = {-0.055092, 0.723342, 0, 1.0};
Point(40) = {-0.049420, 0.723112, 0, 1.0};
Point(41) = {-0.043221, 0.723001, 0, 1.0};
Point(42) = {-0.036568, 0.723009, 0, 1.0};
Point(43) = {-0.029540, 0.723136, 0, 1.0};
Point(44) = {-0.022219, 0.723386, 0, 1.0};
Point(45) = {-0.014693, 0.723759, 0, 1.0};
Point(46) = {-0.007048, 0.724254, 0, 1.0};
Point(47) = {0.000622, 0.724874, 0, 1.0};
Point(48) = {0.008232, 0.725624, 0, 1.0};
Point(49) = {0.015685, 0.726511, 0, 1.0};
Point(50) = {0.022888, 0.727568, 0, 1.0};
Point(51) = {0.029812, 0.728861, 0, 1.0};
Point(52) = {0.036494, 0.730390, 0, 1.0};
Point(53) = {0.042962, 0.732079, 0, 1.0};
Point(54) = {0.049230, 0.733796, 0, 1.0};
Point(55) = {0.055209, 0.735343, 0, 1.0};
Point(56) = {0.060715, 0.736589, 0, 1.0};
Point(57) = {0.065558, 0.737471, 0, 1.0};
Point(58) = {0.069555, 0.737743, 0, 1.0};
Point(59) = {0.072487, 0.737941, 0, 1.0};
Point(60) = {0.074255, 0.738147, 0, 1.0};
Point(61) = {-0.074842, -0.738235, 0, 1.0};
Point(62) = {-0.074260, -0.738307, 0, 1.0};
Point(63) = {-0.072596, -0.738577, 0, 1.0};
Point(64) = {-0.070017, -0.739084, 0, 1.0};
Point(65) = {-0.066663, -0.739752, 0, 1.0};
Point(66) = {-0.062579, -0.740482, 0, 1.0};
Point(67) = {-0.057754, -0.741250, 0, 1.0};
Point(68) = {-0.052237, -0.742099, 0, 1.0};
Point(69) = {-0.046129, -0.743049, 0, 1.0};
Point(70) = {-0.039546, -0.744091, 0, 1.0};
Point(71) = {-0.032611, -0.745210, 0, 1.0};
Point(72) = {-0.025448, -0.746369, 0, 1.0};
Point(73) = {-0.018190, -0.747519, 0, 1.0};
Point(74) = {-0.010965, -0.748591, 0, 1.0};
Point(75) = {-0.003902, -0.749458, 0, 1.0};
Point(76) = {0.002981, -0.749947, 0, 1.0};
Point(77) = {0.009779, -0.750000, 0, 1.0};
Point(78) = {0.016517, -0.749681, 0, 1.0};
Point(79) = {0.023156, -0.749041, 0, 1.0};
Point(80) = {0.029644, -0.748130, 0, 1.0};
Point(81) = {0.035908, -0.746989, 0, 1.0};
Point(82) = {0.041883, -0.745643, 0, 1.0};
Point(83) = {0.047507, -0.744123, 0, 1.0};
Point(84) = {0.052724, -0.742455, 0, 1.0};
Point(85) = {0.057483, -0.740672, 0, 1.0};
Point(86) = {0.061735, -0.738806, 0, 1.0};
Point(87) = {0.065442, -0.736890, 0, 1.0};
Point(88) = {0.068570, -0.734963, 0, 1.0};
Point(89) = {0.071090, -0.733064, 0, 1.0};
Point(90) = {0.072983, -0.731245, 0, 1.0};
Point(91) = {0.074233, -0.729566, 0, 1.0};
Point(92) = {0.074817, -0.728120, 0, 1.0};
Point(93) = {0.074557, -0.727039, 0, 1.0};
Point(94) = {0.073325, -0.726193, 0, 1.0};
Point(95) = {0.071202, -0.725410, 0, 1.0};
Point(96) = {0.068269, -0.724725, 0, 1.0};
Point(97) = {0.064576, -0.724148, 0, 1.0};
Point(98) = {0.060165, -0.723688, 0, 1.0};
Point(99) = {0.055092, -0.723342, 0, 1.0};
Point(100) = {0.049420, -0.723112, 0, 1.0};
Point(101) = {0.043221, -0.723001, 0, 1.0};
Point(102) = {0.036568, -0.723009, 0, 1.0};
Point(103) = {0.029540, -0.723136, 0, 1.0};
Point(104) = {0.022219, -0.723386, 0, 1.0};
Point(105) = {0.014693, -0.723759, 0, 1.0};
Point(106) = {0.007048, -0.724254, 0, 1.0};
Point(107) = {-0.000622, -0.724874, 0, 1.0};
Point(108) = {-0.008232, -0.725624, 0, 1.0};
Point(109) = {-0.015685, -0.726511, 0, 1.0};
Point(110) = {-0.022888, -0.727568, 0, 1.0};
Point(111) = {-0.029812, -0.728861, 0, 1.0};
Point(112) = {-0.036494, -0.730390, 0, 1.0};
Point(113) = {-0.042962, -0.732079, 0, 1.0};
Point(114) = {-0.049230, -0.733796, 0, 1.0};
Point(115) = {-0.055209, -0.735343, 0, 1.0};
Point(116) = {-0.060715, -0.736589, 0, 1.0};
Point(117) = {-0.065558, -0.737471, 0, 1.0};
Point(118) = {-0.069555, -0.737743, 0, 1.0};
Point(119) = {-0.072487, -0.737941, 0, 1.0};
Point(120) = {-0.074255, -0.738147, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html