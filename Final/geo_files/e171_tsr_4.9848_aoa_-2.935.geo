SetFactory("OpenCASCADE");

Point(1) = {0.112303, 0.745495, 0, 1.0};
Point(2) = {0.111768, 0.745502, 0, 1.0};
Point(3) = {0.110216, 0.745568, 0, 1.0};
Point(4) = {0.107763, 0.745716, 0, 1.0};
Point(5) = {0.104481, 0.745899, 0, 1.0};
Point(6) = {0.100386, 0.746097, 0, 1.0};
Point(7) = {0.095518, 0.746337, 0, 1.0};
Point(8) = {0.089955, 0.746640, 0, 1.0};
Point(9) = {0.083790, 0.747007, 0, 1.0};
Point(10) = {0.077119, 0.747435, 0, 1.0};
Point(11) = {0.070049, 0.747912, 0, 1.0};
Point(12) = {0.062682, 0.748415, 0, 1.0};
Point(13) = {0.055125, 0.748914, 0, 1.0};
Point(14) = {0.047482, 0.749373, 0, 1.0};
Point(15) = {0.039851, 0.749744, 0, 1.0};
Point(16) = {0.032300, 0.749965, 0, 1.0};
Point(17) = {0.024872, 0.750000, 0, 1.0};
Point(18) = {0.017610, 0.749836, 0, 1.0};
Point(19) = {0.010549, 0.749480, 0, 1.0};
Point(20) = {0.003742, 0.748960, 0, 1.0};
Point(21) = {-0.002740, 0.748302, 0, 1.0};
Point(22) = {-0.008826, 0.747518, 0, 1.0};
Point(23) = {-0.014453, 0.746623, 0, 1.0};
Point(24) = {-0.019566, 0.745632, 0, 1.0};
Point(25) = {-0.024115, 0.744560, 0, 1.0};
Point(26) = {-0.028053, 0.743423, 0, 1.0};
Point(27) = {-0.031348, 0.742244, 0, 1.0};
Point(28) = {-0.033969, 0.741049, 0, 1.0};
Point(29) = {-0.035896, 0.739870, 0, 1.0};
Point(30) = {-0.037102, 0.738755, 0, 1.0};
Point(31) = {-0.037500, 0.737814, 0, 1.0};
Point(32) = {-0.037008, 0.736919, 0, 1.0};
Point(33) = {-0.035694, 0.735933, 0, 1.0};
Point(34) = {-0.033657, 0.734958, 0, 1.0};
Point(35) = {-0.030927, 0.734037, 0, 1.0};
Point(36) = {-0.027529, 0.733201, 0, 1.0};
Point(37) = {-0.023495, 0.732473, 0, 1.0};
Point(38) = {-0.018861, 0.731871, 0, 1.0};
Point(39) = {-0.013673, 0.731409, 0, 1.0};
Point(40) = {-0.007984, 0.731094, 0, 1.0};
Point(41) = {-0.001850, 0.730937, 0, 1.0};
Point(42) = {0.004666, 0.730945, 0, 1.0};
Point(43) = {0.011490, 0.731124, 0, 1.0};
Point(44) = {0.018550, 0.731492, 0, 1.0};
Point(45) = {0.025792, 0.732072, 0, 1.0};
Point(46) = {0.033177, 0.732866, 0, 1.0};
Point(47) = {0.040666, 0.733858, 0, 1.0};
Point(48) = {0.048219, 0.735007, 0, 1.0};
Point(49) = {0.055775, 0.736246, 0, 1.0};
Point(50) = {0.063240, 0.737515, 0, 1.0};
Point(51) = {0.070518, 0.738768, 0, 1.0};
Point(52) = {0.077502, 0.739966, 0, 1.0};
Point(53) = {0.084095, 0.741075, 0, 1.0};
Point(54) = {0.090190, 0.742071, 0, 1.0};
Point(55) = {0.095692, 0.742940, 0, 1.0};
Point(56) = {0.100510, 0.743677, 0, 1.0};
Point(57) = {0.104564, 0.744293, 0, 1.0};
Point(58) = {0.107810, 0.744811, 0, 1.0};
Point(59) = {0.110235, 0.745209, 0, 1.0};
Point(60) = {0.111772, 0.745433, 0, 1.0};
Point(61) = {-0.112303, -0.745495, 0, 1.0};
Point(62) = {-0.111768, -0.745502, 0, 1.0};
Point(63) = {-0.110216, -0.745568, 0, 1.0};
Point(64) = {-0.107763, -0.745716, 0, 1.0};
Point(65) = {-0.104481, -0.745899, 0, 1.0};
Point(66) = {-0.100386, -0.746097, 0, 1.0};
Point(67) = {-0.095518, -0.746337, 0, 1.0};
Point(68) = {-0.089955, -0.746640, 0, 1.0};
Point(69) = {-0.083790, -0.747007, 0, 1.0};
Point(70) = {-0.077119, -0.747435, 0, 1.0};
Point(71) = {-0.070049, -0.747912, 0, 1.0};
Point(72) = {-0.062682, -0.748415, 0, 1.0};
Point(73) = {-0.055125, -0.748914, 0, 1.0};
Point(74) = {-0.047482, -0.749373, 0, 1.0};
Point(75) = {-0.039851, -0.749744, 0, 1.0};
Point(76) = {-0.032300, -0.749965, 0, 1.0};
Point(77) = {-0.024872, -0.750000, 0, 1.0};
Point(78) = {-0.017610, -0.749836, 0, 1.0};
Point(79) = {-0.010549, -0.749480, 0, 1.0};
Point(80) = {-0.003742, -0.748960, 0, 1.0};
Point(81) = {0.002740, -0.748302, 0, 1.0};
Point(82) = {0.008826, -0.747518, 0, 1.0};
Point(83) = {0.014453, -0.746623, 0, 1.0};
Point(84) = {0.019566, -0.745632, 0, 1.0};
Point(85) = {0.024115, -0.744560, 0, 1.0};
Point(86) = {0.028053, -0.743423, 0, 1.0};
Point(87) = {0.031348, -0.742244, 0, 1.0};
Point(88) = {0.033969, -0.741049, 0, 1.0};
Point(89) = {0.035896, -0.739870, 0, 1.0};
Point(90) = {0.037102, -0.738755, 0, 1.0};
Point(91) = {0.037500, -0.737814, 0, 1.0};
Point(92) = {0.037008, -0.736919, 0, 1.0};
Point(93) = {0.035694, -0.735933, 0, 1.0};
Point(94) = {0.033657, -0.734958, 0, 1.0};
Point(95) = {0.030927, -0.734037, 0, 1.0};
Point(96) = {0.027529, -0.733201, 0, 1.0};
Point(97) = {0.023495, -0.732473, 0, 1.0};
Point(98) = {0.018861, -0.731871, 0, 1.0};
Point(99) = {0.013673, -0.731409, 0, 1.0};
Point(100) = {0.007984, -0.731094, 0, 1.0};
Point(101) = {0.001850, -0.730937, 0, 1.0};
Point(102) = {-0.004666, -0.730945, 0, 1.0};
Point(103) = {-0.011490, -0.731124, 0, 1.0};
Point(104) = {-0.018550, -0.731492, 0, 1.0};
Point(105) = {-0.025792, -0.732072, 0, 1.0};
Point(106) = {-0.033177, -0.732866, 0, 1.0};
Point(107) = {-0.040666, -0.733858, 0, 1.0};
Point(108) = {-0.048219, -0.735007, 0, 1.0};
Point(109) = {-0.055775, -0.736246, 0, 1.0};
Point(110) = {-0.063240, -0.737515, 0, 1.0};
Point(111) = {-0.070518, -0.738768, 0, 1.0};
Point(112) = {-0.077502, -0.739966, 0, 1.0};
Point(113) = {-0.084095, -0.741075, 0, 1.0};
Point(114) = {-0.090190, -0.742071, 0, 1.0};
Point(115) = {-0.095692, -0.742940, 0, 1.0};
Point(116) = {-0.100510, -0.743677, 0, 1.0};
Point(117) = {-0.104564, -0.744293, 0, 1.0};
Point(118) = {-0.107810, -0.744811, 0, 1.0};
Point(119) = {-0.110235, -0.745209, 0, 1.0};
Point(120) = {-0.111772, -0.745433, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html