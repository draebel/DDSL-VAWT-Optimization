SetFactory("OpenCASCADE");

Point(1) = {0.074869, 0.746997, 0, 1.0};
Point(2) = {0.074512, 0.747001, 0, 1.0};
Point(3) = {0.073478, 0.747045, 0, 1.0};
Point(4) = {0.071842, 0.747144, 0, 1.0};
Point(5) = {0.069654, 0.747266, 0, 1.0};
Point(6) = {0.066924, 0.747398, 0, 1.0};
Point(7) = {0.063678, 0.747558, 0, 1.0};
Point(8) = {0.059970, 0.747760, 0, 1.0};
Point(9) = {0.055860, 0.748005, 0, 1.0};
Point(10) = {0.051413, 0.748290, 0, 1.0};
Point(11) = {0.046699, 0.748608, 0, 1.0};
Point(12) = {0.041788, 0.748943, 0, 1.0};
Point(13) = {0.036750, 0.749276, 0, 1.0};
Point(14) = {0.031655, 0.749582, 0, 1.0};
Point(15) = {0.026567, 0.749829, 0, 1.0};
Point(16) = {0.021533, 0.749977, 0, 1.0};
Point(17) = {0.016582, 0.750000, 0, 1.0};
Point(18) = {0.011740, 0.749891, 0, 1.0};
Point(19) = {0.007033, 0.749654, 0, 1.0};
Point(20) = {0.002495, 0.749307, 0, 1.0};
Point(21) = {-0.001827, 0.748868, 0, 1.0};
Point(22) = {-0.005884, 0.748346, 0, 1.0};
Point(23) = {-0.009636, 0.747749, 0, 1.0};
Point(24) = {-0.013044, 0.747088, 0, 1.0};
Point(25) = {-0.016077, 0.746373, 0, 1.0};
Point(26) = {-0.018702, 0.745616, 0, 1.0};
Point(27) = {-0.020899, 0.744829, 0, 1.0};
Point(28) = {-0.022646, 0.744033, 0, 1.0};
Point(29) = {-0.023931, 0.743247, 0, 1.0};
Point(30) = {-0.024735, 0.742504, 0, 1.0};
Point(31) = {-0.025000, 0.741876, 0, 1.0};
Point(32) = {-0.024672, 0.741279, 0, 1.0};
Point(33) = {-0.023796, 0.740622, 0, 1.0};
Point(34) = {-0.022438, 0.739972, 0, 1.0};
Point(35) = {-0.020618, 0.739358, 0, 1.0};
Point(36) = {-0.018353, 0.738801, 0, 1.0};
Point(37) = {-0.015663, 0.738316, 0, 1.0};
Point(38) = {-0.012574, 0.737914, 0, 1.0};
Point(39) = {-0.009116, 0.737606, 0, 1.0};
Point(40) = {-0.005323, 0.737396, 0, 1.0};
Point(41) = {-0.001233, 0.737291, 0, 1.0};
Point(42) = {0.003110, 0.737297, 0, 1.0};
Point(43) = {0.007660, 0.737416, 0, 1.0};
Point(44) = {0.012367, 0.737661, 0, 1.0};
Point(45) = {0.017194, 0.738048, 0, 1.0};
Point(46) = {0.022118, 0.738577, 0, 1.0};
Point(47) = {0.027110, 0.739239, 0, 1.0};
Point(48) = {0.032146, 0.740005, 0, 1.0};
Point(49) = {0.037183, 0.740831, 0, 1.0};
Point(50) = {0.042160, 0.741677, 0, 1.0};
Point(51) = {0.047012, 0.742512, 0, 1.0};
Point(52) = {0.051668, 0.743311, 0, 1.0};
Point(53) = {0.056063, 0.744050, 0, 1.0};
Point(54) = {0.060126, 0.744714, 0, 1.0};
Point(55) = {0.063795, 0.745293, 0, 1.0};
Point(56) = {0.067007, 0.745784, 0, 1.0};
Point(57) = {0.069709, 0.746195, 0, 1.0};
Point(58) = {0.071873, 0.746541, 0, 1.0};
Point(59) = {0.073490, 0.746806, 0, 1.0};
Point(60) = {0.074514, 0.746955, 0, 1.0};
Point(61) = {-0.074869, -0.746997, 0, 1.0};
Point(62) = {-0.074512, -0.747001, 0, 1.0};
Point(63) = {-0.073478, -0.747045, 0, 1.0};
Point(64) = {-0.071842, -0.747144, 0, 1.0};
Point(65) = {-0.069654, -0.747266, 0, 1.0};
Point(66) = {-0.066924, -0.747398, 0, 1.0};
Point(67) = {-0.063678, -0.747558, 0, 1.0};
Point(68) = {-0.059970, -0.747760, 0, 1.0};
Point(69) = {-0.055860, -0.748005, 0, 1.0};
Point(70) = {-0.051413, -0.748290, 0, 1.0};
Point(71) = {-0.046699, -0.748608, 0, 1.0};
Point(72) = {-0.041788, -0.748943, 0, 1.0};
Point(73) = {-0.036750, -0.749276, 0, 1.0};
Point(74) = {-0.031655, -0.749582, 0, 1.0};
Point(75) = {-0.026567, -0.749829, 0, 1.0};
Point(76) = {-0.021533, -0.749977, 0, 1.0};
Point(77) = {-0.016582, -0.750000, 0, 1.0};
Point(78) = {-0.011740, -0.749891, 0, 1.0};
Point(79) = {-0.007033, -0.749654, 0, 1.0};
Point(80) = {-0.002495, -0.749307, 0, 1.0};
Point(81) = {0.001827, -0.748868, 0, 1.0};
Point(82) = {0.005884, -0.748346, 0, 1.0};
Point(83) = {0.009636, -0.747749, 0, 1.0};
Point(84) = {0.013044, -0.747088, 0, 1.0};
Point(85) = {0.016077, -0.746373, 0, 1.0};
Point(86) = {0.018702, -0.745616, 0, 1.0};
Point(87) = {0.020899, -0.744829, 0, 1.0};
Point(88) = {0.022646, -0.744033, 0, 1.0};
Point(89) = {0.023931, -0.743247, 0, 1.0};
Point(90) = {0.024735, -0.742504, 0, 1.0};
Point(91) = {0.025000, -0.741876, 0, 1.0};
Point(92) = {0.024672, -0.741279, 0, 1.0};
Point(93) = {0.023796, -0.740622, 0, 1.0};
Point(94) = {0.022438, -0.739972, 0, 1.0};
Point(95) = {0.020618, -0.739358, 0, 1.0};
Point(96) = {0.018353, -0.738801, 0, 1.0};
Point(97) = {0.015663, -0.738316, 0, 1.0};
Point(98) = {0.012574, -0.737914, 0, 1.0};
Point(99) = {0.009116, -0.737606, 0, 1.0};
Point(100) = {0.005323, -0.737396, 0, 1.0};
Point(101) = {0.001233, -0.737291, 0, 1.0};
Point(102) = {-0.003110, -0.737297, 0, 1.0};
Point(103) = {-0.007660, -0.737416, 0, 1.0};
Point(104) = {-0.012367, -0.737661, 0, 1.0};
Point(105) = {-0.017194, -0.738048, 0, 1.0};
Point(106) = {-0.022118, -0.738577, 0, 1.0};
Point(107) = {-0.027110, -0.739239, 0, 1.0};
Point(108) = {-0.032146, -0.740005, 0, 1.0};
Point(109) = {-0.037183, -0.740831, 0, 1.0};
Point(110) = {-0.042160, -0.741677, 0, 1.0};
Point(111) = {-0.047012, -0.742512, 0, 1.0};
Point(112) = {-0.051668, -0.743311, 0, 1.0};
Point(113) = {-0.056063, -0.744050, 0, 1.0};
Point(114) = {-0.060126, -0.744714, 0, 1.0};
Point(115) = {-0.063795, -0.745293, 0, 1.0};
Point(116) = {-0.067007, -0.745784, 0, 1.0};
Point(117) = {-0.069709, -0.746195, 0, 1.0};
Point(118) = {-0.071873, -0.746541, 0, 1.0};
Point(119) = {-0.073490, -0.746806, 0, 1.0};
Point(120) = {-0.074514, -0.746955, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html