SetFactory("OpenCASCADE");

Point(1) = {0.074294, 0.722702, 0, 1.0};
Point(2) = {0.073814, 0.722977, 0, 1.0};
Point(3) = {0.072422, 0.723569, 0, 1.0};
Point(4) = {0.070194, 0.724379, 0, 1.0};
Point(5) = {0.067139, 0.725416, 0, 1.0};
Point(6) = {0.063329, 0.726684, 0, 1.0};
Point(7) = {0.058839, 0.728167, 0, 1.0};
Point(8) = {0.053745, 0.729832, 0, 1.0};
Point(9) = {0.048132, 0.731641, 0, 1.0};
Point(10) = {0.042065, 0.733537, 0, 1.0};
Point(11) = {0.035606, 0.735487, 0, 1.0};
Point(12) = {0.028827, 0.737462, 0, 1.0};
Point(13) = {0.021823, 0.739428, 0, 1.0};
Point(14) = {0.014668, 0.741329, 0, 1.0};
Point(15) = {0.007439, 0.743125, 0, 1.0};
Point(16) = {0.000198, 0.744765, 0, 1.0};
Point(17) = {-0.006990, 0.746221, 0, 1.0};
Point(18) = {-0.014072, 0.747454, 0, 1.0};
Point(19) = {-0.020995, 0.748449, 0, 1.0};
Point(20) = {-0.027715, 0.749189, 0, 1.0};
Point(21) = {-0.034187, 0.749683, 0, 1.0};
Point(22) = {-0.040355, 0.749948, 0, 1.0};
Point(23) = {-0.046147, 0.750000, 0, 1.0};
Point(24) = {-0.051506, 0.749833, 0, 1.0};
Point(25) = {-0.056386, 0.749459, 0, 1.0};
Point(26) = {-0.060747, 0.748893, 0, 1.0};
Point(27) = {-0.064547, 0.748157, 0, 1.0};
Point(28) = {-0.067758, 0.747269, 0, 1.0};
Point(29) = {-0.070363, 0.746266, 0, 1.0};
Point(30) = {-0.072342, 0.745200, 0, 1.0};
Point(31) = {-0.073669, 0.744139, 0, 1.0};
Point(32) = {-0.074300, 0.743194, 0, 1.0};
Point(33) = {-0.073998, 0.742371, 0, 1.0};
Point(34) = {-0.072705, 0.741496, 0, 1.0};
Point(35) = {-0.070591, 0.740510, 0, 1.0};
Point(36) = {-0.067705, 0.739458, 0, 1.0};
Point(37) = {-0.064088, 0.738365, 0, 1.0};
Point(38) = {-0.059776, 0.737253, 0, 1.0};
Point(39) = {-0.054821, 0.736137, 0, 1.0};
Point(40) = {-0.049271, 0.735043, 0, 1.0};
Point(41) = {-0.043178, 0.733984, 0, 1.0};
Point(42) = {-0.036594, 0.732977, 0, 1.0};
Point(43) = {-0.029577, 0.732021, 0, 1.0};
Point(44) = {-0.022195, 0.731120, 0, 1.0};
Point(45) = {-0.014525, 0.730262, 0, 1.0};
Point(46) = {-0.006650, 0.729452, 0, 1.0};
Point(47) = {0.001345, 0.728675, 0, 1.0};
Point(48) = {0.009363, 0.727930, 0, 1.0};
Point(49) = {0.017304, 0.727206, 0, 1.0};
Point(50) = {0.025067, 0.726514, 0, 1.0};
Point(51) = {0.032555, 0.725849, 0, 1.0};
Point(52) = {0.039675, 0.725223, 0, 1.0};
Point(53) = {0.046334, 0.724636, 0, 1.0};
Point(54) = {0.052448, 0.724101, 0, 1.0};
Point(55) = {0.057934, 0.723623, 0, 1.0};
Point(56) = {0.062721, 0.723217, 0, 1.0};
Point(57) = {0.066743, 0.722894, 0, 1.0};
Point(58) = {0.069943, 0.722669, 0, 1.0};
Point(59) = {0.072276, 0.722573, 0, 1.0};
Point(60) = {0.073757, 0.722616, 0, 1.0};
Point(61) = {-0.074294, -0.722702, 0, 1.0};
Point(62) = {-0.073814, -0.722977, 0, 1.0};
Point(63) = {-0.072422, -0.723569, 0, 1.0};
Point(64) = {-0.070194, -0.724379, 0, 1.0};
Point(65) = {-0.067139, -0.725416, 0, 1.0};
Point(66) = {-0.063329, -0.726684, 0, 1.0};
Point(67) = {-0.058839, -0.728167, 0, 1.0};
Point(68) = {-0.053745, -0.729832, 0, 1.0};
Point(69) = {-0.048132, -0.731641, 0, 1.0};
Point(70) = {-0.042065, -0.733537, 0, 1.0};
Point(71) = {-0.035606, -0.735487, 0, 1.0};
Point(72) = {-0.028827, -0.737462, 0, 1.0};
Point(73) = {-0.021823, -0.739428, 0, 1.0};
Point(74) = {-0.014668, -0.741329, 0, 1.0};
Point(75) = {-0.007439, -0.743125, 0, 1.0};
Point(76) = {-0.000198, -0.744765, 0, 1.0};
Point(77) = {0.006990, -0.746221, 0, 1.0};
Point(78) = {0.014072, -0.747454, 0, 1.0};
Point(79) = {0.020995, -0.748449, 0, 1.0};
Point(80) = {0.027715, -0.749189, 0, 1.0};
Point(81) = {0.034187, -0.749683, 0, 1.0};
Point(82) = {0.040355, -0.749948, 0, 1.0};
Point(83) = {0.046147, -0.750000, 0, 1.0};
Point(84) = {0.051506, -0.749833, 0, 1.0};
Point(85) = {0.056386, -0.749459, 0, 1.0};
Point(86) = {0.060747, -0.748893, 0, 1.0};
Point(87) = {0.064547, -0.748157, 0, 1.0};
Point(88) = {0.067758, -0.747269, 0, 1.0};
Point(89) = {0.070363, -0.746266, 0, 1.0};
Point(90) = {0.072342, -0.745200, 0, 1.0};
Point(91) = {0.073669, -0.744139, 0, 1.0};
Point(92) = {0.074300, -0.743194, 0, 1.0};
Point(93) = {0.073998, -0.742371, 0, 1.0};
Point(94) = {0.072705, -0.741496, 0, 1.0};
Point(95) = {0.070591, -0.740510, 0, 1.0};
Point(96) = {0.067705, -0.739458, 0, 1.0};
Point(97) = {0.064088, -0.738365, 0, 1.0};
Point(98) = {0.059776, -0.737253, 0, 1.0};
Point(99) = {0.054821, -0.736137, 0, 1.0};
Point(100) = {0.049271, -0.735043, 0, 1.0};
Point(101) = {0.043178, -0.733984, 0, 1.0};
Point(102) = {0.036594, -0.732977, 0, 1.0};
Point(103) = {0.029577, -0.732021, 0, 1.0};
Point(104) = {0.022195, -0.731120, 0, 1.0};
Point(105) = {0.014525, -0.730262, 0, 1.0};
Point(106) = {0.006650, -0.729452, 0, 1.0};
Point(107) = {-0.001345, -0.728675, 0, 1.0};
Point(108) = {-0.009363, -0.727930, 0, 1.0};
Point(109) = {-0.017304, -0.727206, 0, 1.0};
Point(110) = {-0.025067, -0.726514, 0, 1.0};
Point(111) = {-0.032555, -0.725849, 0, 1.0};
Point(112) = {-0.039675, -0.725223, 0, 1.0};
Point(113) = {-0.046334, -0.724636, 0, 1.0};
Point(114) = {-0.052448, -0.724101, 0, 1.0};
Point(115) = {-0.057934, -0.723623, 0, 1.0};
Point(116) = {-0.062721, -0.723217, 0, 1.0};
Point(117) = {-0.066743, -0.722894, 0, 1.0};
Point(118) = {-0.069943, -0.722669, 0, 1.0};
Point(119) = {-0.072276, -0.722573, 0, 1.0};
Point(120) = {-0.073757, -0.722616, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html