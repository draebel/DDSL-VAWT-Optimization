SetFactory("OpenCASCADE");

Point(1) = {0.148132, 0.713603, 0, 1.0};
Point(2) = {0.147492, 0.713969, 0, 1.0};
Point(3) = {0.145637, 0.714759, 0, 1.0};
Point(4) = {0.142665, 0.715839, 0, 1.0};
Point(5) = {0.138593, 0.717221, 0, 1.0};
Point(6) = {0.133513, 0.718912, 0, 1.0};
Point(7) = {0.127525, 0.720890, 0, 1.0};
Point(8) = {0.120734, 0.723109, 0, 1.0};
Point(9) = {0.113249, 0.725522, 0, 1.0};
Point(10) = {0.105160, 0.728049, 0, 1.0};
Point(11) = {0.096548, 0.730650, 0, 1.0};
Point(12) = {0.087510, 0.733283, 0, 1.0};
Point(13) = {0.078171, 0.735904, 0, 1.0};
Point(14) = {0.068632, 0.738438, 0, 1.0};
Point(15) = {0.058993, 0.740833, 0, 1.0};
Point(16) = {0.049339, 0.743020, 0, 1.0};
Point(17) = {0.039754, 0.744961, 0, 1.0};
Point(18) = {0.030311, 0.746605, 0, 1.0};
Point(19) = {0.021081, 0.747932, 0, 1.0};
Point(20) = {0.012121, 0.748918, 0, 1.0};
Point(21) = {0.003492, 0.749577, 0, 1.0};
Point(22) = {-0.004732, 0.749931, 0, 1.0};
Point(23) = {-0.012455, 0.750000, 0, 1.0};
Point(24) = {-0.019600, 0.749777, 0, 1.0};
Point(25) = {-0.026107, 0.749279, 0, 1.0};
Point(26) = {-0.031921, 0.748524, 0, 1.0};
Point(27) = {-0.036988, 0.747543, 0, 1.0};
Point(28) = {-0.041270, 0.746359, 0, 1.0};
Point(29) = {-0.044742, 0.745022, 0, 1.0};
Point(30) = {-0.047381, 0.743600, 0, 1.0};
Point(31) = {-0.049151, 0.742185, 0, 1.0};
Point(32) = {-0.049991, 0.740926, 0, 1.0};
Point(33) = {-0.049589, 0.739828, 0, 1.0};
Point(34) = {-0.047865, 0.738661, 0, 1.0};
Point(35) = {-0.045047, 0.737346, 0, 1.0};
Point(36) = {-0.041198, 0.735945, 0, 1.0};
Point(37) = {-0.036376, 0.734486, 0, 1.0};
Point(38) = {-0.030627, 0.733005, 0, 1.0};
Point(39) = {-0.024019, 0.731516, 0, 1.0};
Point(40) = {-0.016620, 0.730057, 0, 1.0};
Point(41) = {-0.008496, 0.728645, 0, 1.0};
Point(42) = {0.000283, 0.727303, 0, 1.0};
Point(43) = {0.009639, 0.726028, 0, 1.0};
Point(44) = {0.019481, 0.724827, 0, 1.0};
Point(45) = {0.029707, 0.723683, 0, 1.0};
Point(46) = {0.040208, 0.722604, 0, 1.0};
Point(47) = {0.050868, 0.721567, 0, 1.0};
Point(48) = {0.061559, 0.720574, 0, 1.0};
Point(49) = {0.072146, 0.719608, 0, 1.0};
Point(50) = {0.082496, 0.718686, 0, 1.0};
Point(51) = {0.092481, 0.717799, 0, 1.0};
Point(52) = {0.101974, 0.716965, 0, 1.0};
Point(53) = {0.110853, 0.716181, 0, 1.0};
Point(54) = {0.119004, 0.715468, 0, 1.0};
Point(55) = {0.126319, 0.714831, 0, 1.0};
Point(56) = {0.132701, 0.714290, 0, 1.0};
Point(57) = {0.138064, 0.713859, 0, 1.0};
Point(58) = {0.142331, 0.713559, 0, 1.0};
Point(59) = {0.145442, 0.713431, 0, 1.0};
Point(60) = {0.147416, 0.713489, 0, 1.0};
Point(61) = {-0.148132, -0.713603, 0, 1.0};
Point(62) = {-0.147492, -0.713969, 0, 1.0};
Point(63) = {-0.145637, -0.714759, 0, 1.0};
Point(64) = {-0.142665, -0.715839, 0, 1.0};
Point(65) = {-0.138593, -0.717221, 0, 1.0};
Point(66) = {-0.133513, -0.718912, 0, 1.0};
Point(67) = {-0.127525, -0.720890, 0, 1.0};
Point(68) = {-0.120734, -0.723109, 0, 1.0};
Point(69) = {-0.113249, -0.725522, 0, 1.0};
Point(70) = {-0.105160, -0.728049, 0, 1.0};
Point(71) = {-0.096548, -0.730650, 0, 1.0};
Point(72) = {-0.087510, -0.733283, 0, 1.0};
Point(73) = {-0.078171, -0.735904, 0, 1.0};
Point(74) = {-0.068632, -0.738438, 0, 1.0};
Point(75) = {-0.058993, -0.740833, 0, 1.0};
Point(76) = {-0.049339, -0.743020, 0, 1.0};
Point(77) = {-0.039754, -0.744961, 0, 1.0};
Point(78) = {-0.030311, -0.746605, 0, 1.0};
Point(79) = {-0.021081, -0.747932, 0, 1.0};
Point(80) = {-0.012121, -0.748918, 0, 1.0};
Point(81) = {-0.003492, -0.749577, 0, 1.0};
Point(82) = {0.004732, -0.749931, 0, 1.0};
Point(83) = {0.012455, -0.750000, 0, 1.0};
Point(84) = {0.019600, -0.749777, 0, 1.0};
Point(85) = {0.026107, -0.749279, 0, 1.0};
Point(86) = {0.031921, -0.748524, 0, 1.0};
Point(87) = {0.036988, -0.747543, 0, 1.0};
Point(88) = {0.041270, -0.746359, 0, 1.0};
Point(89) = {0.044742, -0.745022, 0, 1.0};
Point(90) = {0.047381, -0.743600, 0, 1.0};
Point(91) = {0.049151, -0.742185, 0, 1.0};
Point(92) = {0.049991, -0.740926, 0, 1.0};
Point(93) = {0.049589, -0.739828, 0, 1.0};
Point(94) = {0.047865, -0.738661, 0, 1.0};
Point(95) = {0.045047, -0.737346, 0, 1.0};
Point(96) = {0.041198, -0.735945, 0, 1.0};
Point(97) = {0.036376, -0.734486, 0, 1.0};
Point(98) = {0.030627, -0.733005, 0, 1.0};
Point(99) = {0.024019, -0.731516, 0, 1.0};
Point(100) = {0.016620, -0.730057, 0, 1.0};
Point(101) = {0.008496, -0.728645, 0, 1.0};
Point(102) = {-0.000283, -0.727303, 0, 1.0};
Point(103) = {-0.009639, -0.726028, 0, 1.0};
Point(104) = {-0.019481, -0.724827, 0, 1.0};
Point(105) = {-0.029707, -0.723683, 0, 1.0};
Point(106) = {-0.040208, -0.722604, 0, 1.0};
Point(107) = {-0.050868, -0.721567, 0, 1.0};
Point(108) = {-0.061559, -0.720574, 0, 1.0};
Point(109) = {-0.072146, -0.719608, 0, 1.0};
Point(110) = {-0.082496, -0.718686, 0, 1.0};
Point(111) = {-0.092481, -0.717799, 0, 1.0};
Point(112) = {-0.101974, -0.716965, 0, 1.0};
Point(113) = {-0.110853, -0.716181, 0, 1.0};
Point(114) = {-0.119004, -0.715468, 0, 1.0};
Point(115) = {-0.126319, -0.714831, 0, 1.0};
Point(116) = {-0.132701, -0.714290, 0, 1.0};
Point(117) = {-0.138064, -0.713859, 0, 1.0};
Point(118) = {-0.142331, -0.713559, 0, 1.0};
Point(119) = {-0.145442, -0.713431, 0, 1.0};
Point(120) = {-0.147416, -0.713489, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html