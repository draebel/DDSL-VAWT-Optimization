SetFactory("OpenCASCADE");

Point(1) = {0.074637, 0.746382, 0, 1.0};
Point(2) = {0.074197, 0.746369, 0, 1.0};
Point(3) = {0.072873, 0.746338, 0, 1.0};
Point(4) = {0.070670, 0.746318, 0, 1.0};
Point(5) = {0.067616, 0.746343, 0, 1.0};
Point(6) = {0.063772, 0.746437, 0, 1.0};
Point(7) = {0.059210, 0.746602, 0, 1.0};
Point(8) = {0.053997, 0.746831, 0, 1.0};
Point(9) = {0.048205, 0.747123, 0, 1.0};
Point(10) = {0.041916, 0.747466, 0, 1.0};
Point(11) = {0.035218, 0.747850, 0, 1.0};
Point(12) = {0.028200, 0.748264, 0, 1.0};
Point(13) = {0.020952, 0.748688, 0, 1.0};
Point(14) = {0.013573, 0.749101, 0, 1.0};
Point(15) = {0.006160, 0.749479, 0, 1.0};
Point(16) = {-0.001191, 0.749789, 0, 1.0};
Point(17) = {-0.008383, 0.749985, 0, 1.0};
Point(18) = {-0.015349, 0.750000, 0, 1.0};
Point(19) = {-0.022061, 0.749792, 0, 1.0};
Point(20) = {-0.028488, 0.749346, 0, 1.0};
Point(21) = {-0.034606, 0.748656, 0, 1.0};
Point(22) = {-0.040395, 0.747729, 0, 1.0};
Point(23) = {-0.045840, 0.746591, 0, 1.0};
Point(24) = {-0.050915, 0.745289, 0, 1.0};
Point(25) = {-0.055574, 0.743868, 0, 1.0};
Point(26) = {-0.059776, 0.742363, 0, 1.0};
Point(27) = {-0.063487, 0.740805, 0, 1.0};
Point(28) = {-0.066679, 0.739228, 0, 1.0};
Point(29) = {-0.069335, 0.737667, 0, 1.0};
Point(30) = {-0.071445, 0.736162, 0, 1.0};
Point(31) = {-0.073006, 0.734751, 0, 1.0};
Point(32) = {-0.074034, 0.733495, 0, 1.0};
Point(33) = {-0.074555, 0.732450, 0, 1.0};
Point(34) = {-0.074647, 0.731738, 0, 1.0};
Point(35) = {-0.074233, 0.731718, 0, 1.0};
Point(36) = {-0.072970, 0.732363, 0, 1.0};
Point(37) = {-0.070752, 0.733550, 0, 1.0};
Point(38) = {-0.067550, 0.735273, 0, 1.0};
Point(39) = {-0.063242, 0.737466, 0, 1.0};
Point(40) = {-0.057728, 0.740005, 0, 1.0};
Point(41) = {-0.050896, 0.742638, 0, 1.0};
Point(42) = {-0.042867, 0.744951, 0, 1.0};
Point(43) = {-0.034020, 0.746689, 0, 1.0};
Point(44) = {-0.024737, 0.747872, 0, 1.0};
Point(45) = {-0.015267, 0.748552, 0, 1.0};
Point(46) = {-0.005830, 0.748831, 0, 1.0};
Point(47) = {0.003410, 0.748801, 0, 1.0};
Point(48) = {0.012333, 0.748584, 0, 1.0};
Point(49) = {0.020867, 0.748249, 0, 1.0};
Point(50) = {0.028941, 0.747861, 0, 1.0};
Point(51) = {0.036496, 0.747453, 0, 1.0};
Point(52) = {0.043473, 0.747066, 0, 1.0};
Point(53) = {0.049824, 0.746715, 0, 1.0};
Point(54) = {0.055502, 0.746431, 0, 1.0};
Point(55) = {0.060473, 0.746217, 0, 1.0};
Point(56) = {0.064707, 0.746091, 0, 1.0};
Point(57) = {0.068180, 0.746060, 0, 1.0};
Point(58) = {0.070908, 0.746138, 0, 1.0};
Point(59) = {0.072926, 0.746265, 0, 1.0};
Point(60) = {0.074198, 0.746357, 0, 1.0};
Point(61) = {-0.074637, -0.746382, 0, 1.0};
Point(62) = {-0.074197, -0.746369, 0, 1.0};
Point(63) = {-0.072873, -0.746338, 0, 1.0};
Point(64) = {-0.070670, -0.746318, 0, 1.0};
Point(65) = {-0.067616, -0.746343, 0, 1.0};
Point(66) = {-0.063772, -0.746437, 0, 1.0};
Point(67) = {-0.059210, -0.746602, 0, 1.0};
Point(68) = {-0.053997, -0.746831, 0, 1.0};
Point(69) = {-0.048205, -0.747123, 0, 1.0};
Point(70) = {-0.041916, -0.747466, 0, 1.0};
Point(71) = {-0.035218, -0.747850, 0, 1.0};
Point(72) = {-0.028200, -0.748264, 0, 1.0};
Point(73) = {-0.020952, -0.748688, 0, 1.0};
Point(74) = {-0.013573, -0.749101, 0, 1.0};
Point(75) = {-0.006160, -0.749479, 0, 1.0};
Point(76) = {0.001191, -0.749789, 0, 1.0};
Point(77) = {0.008383, -0.749985, 0, 1.0};
Point(78) = {0.015349, -0.750000, 0, 1.0};
Point(79) = {0.022061, -0.749792, 0, 1.0};
Point(80) = {0.028488, -0.749346, 0, 1.0};
Point(81) = {0.034606, -0.748656, 0, 1.0};
Point(82) = {0.040395, -0.747729, 0, 1.0};
Point(83) = {0.045840, -0.746591, 0, 1.0};
Point(84) = {0.050915, -0.745289, 0, 1.0};
Point(85) = {0.055574, -0.743868, 0, 1.0};
Point(86) = {0.059776, -0.742363, 0, 1.0};
Point(87) = {0.063487, -0.740805, 0, 1.0};
Point(88) = {0.066679, -0.739228, 0, 1.0};
Point(89) = {0.069335, -0.737667, 0, 1.0};
Point(90) = {0.071445, -0.736162, 0, 1.0};
Point(91) = {0.073006, -0.734751, 0, 1.0};
Point(92) = {0.074034, -0.733495, 0, 1.0};
Point(93) = {0.074555, -0.732450, 0, 1.0};
Point(94) = {0.074647, -0.731738, 0, 1.0};
Point(95) = {0.074233, -0.731718, 0, 1.0};
Point(96) = {0.072970, -0.732363, 0, 1.0};
Point(97) = {0.070752, -0.733550, 0, 1.0};
Point(98) = {0.067550, -0.735273, 0, 1.0};
Point(99) = {0.063242, -0.737466, 0, 1.0};
Point(100) = {0.057728, -0.740005, 0, 1.0};
Point(101) = {0.050896, -0.742638, 0, 1.0};
Point(102) = {0.042867, -0.744951, 0, 1.0};
Point(103) = {0.034020, -0.746689, 0, 1.0};
Point(104) = {0.024737, -0.747872, 0, 1.0};
Point(105) = {0.015267, -0.748552, 0, 1.0};
Point(106) = {0.005830, -0.748831, 0, 1.0};
Point(107) = {-0.003410, -0.748801, 0, 1.0};
Point(108) = {-0.012333, -0.748584, 0, 1.0};
Point(109) = {-0.020867, -0.748249, 0, 1.0};
Point(110) = {-0.028941, -0.747861, 0, 1.0};
Point(111) = {-0.036496, -0.747453, 0, 1.0};
Point(112) = {-0.043473, -0.747066, 0, 1.0};
Point(113) = {-0.049824, -0.746715, 0, 1.0};
Point(114) = {-0.055502, -0.746431, 0, 1.0};
Point(115) = {-0.060473, -0.746217, 0, 1.0};
Point(116) = {-0.064707, -0.746091, 0, 1.0};
Point(117) = {-0.068180, -0.746060, 0, 1.0};
Point(118) = {-0.070908, -0.746138, 0, 1.0};
Point(119) = {-0.072926, -0.746265, 0, 1.0};
Point(120) = {-0.074198, -0.746357, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html