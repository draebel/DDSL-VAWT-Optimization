SetFactory("OpenCASCADE");

Point(1) = {0.074235, 0.747580, 0, 1.0};
Point(2) = {0.073353, 0.747559, 0, 1.0};
Point(3) = {0.071884, 0.747546, 0, 1.0};
Point(4) = {0.069848, 0.747562, 0, 1.0};
Point(5) = {0.067286, 0.747625, 0, 1.0};
Point(6) = {0.064245, 0.747735, 0, 1.0};
Point(7) = {0.060770, 0.747887, 0, 1.0};
Point(8) = {0.056909, 0.748082, 0, 1.0};
Point(9) = {0.052717, 0.748311, 0, 1.0};
Point(10) = {0.048252, 0.748567, 0, 1.0};
Point(11) = {0.043573, 0.748842, 0, 1.0};
Point(12) = {0.038742, 0.749125, 0, 1.0};
Point(13) = {0.033823, 0.749401, 0, 1.0};
Point(14) = {0.028881, 0.749653, 0, 1.0};
Point(15) = {0.023981, 0.749860, 0, 1.0};
Point(16) = {0.019187, 0.749990, 0, 1.0};
Point(17) = {0.014543, 0.750000, 0, 1.0};
Point(18) = {0.010070, 0.749862, 0, 1.0};
Point(19) = {0.005785, 0.749564, 0, 1.0};
Point(20) = {0.001707, 0.749104, 0, 1.0};
Point(21) = {-0.002153, 0.748486, 0, 1.0};
Point(22) = {-0.005782, 0.747727, 0, 1.0};
Point(23) = {-0.009165, 0.746859, 0, 1.0};
Point(24) = {-0.012271, 0.745913, 0, 1.0};
Point(25) = {-0.015072, 0.744909, 0, 1.0};
Point(26) = {-0.017546, 0.743871, 0, 1.0};
Point(27) = {-0.019674, 0.742819, 0, 1.0};
Point(28) = {-0.021444, 0.741779, 0, 1.0};
Point(29) = {-0.022851, 0.740776, 0, 1.0};
Point(30) = {-0.023891, 0.739835, 0, 1.0};
Point(31) = {-0.024576, 0.738998, 0, 1.0};
Point(32) = {-0.024923, 0.738301, 0, 1.0};
Point(33) = {-0.024985, 0.737827, 0, 1.0};
Point(34) = {-0.024709, 0.737813, 0, 1.0};
Point(35) = {-0.023867, 0.738243, 0, 1.0};
Point(36) = {-0.022388, 0.739034, 0, 1.0};
Point(37) = {-0.020254, 0.740183, 0, 1.0};
Point(38) = {-0.017382, 0.741645, 0, 1.0};
Point(39) = {-0.013707, 0.743337, 0, 1.0};
Point(40) = {-0.009153, 0.745092, 0, 1.0};
Point(41) = {-0.003800, 0.746634, 0, 1.0};
Point(42) = {0.002098, 0.747793, 0, 1.0};
Point(43) = {0.008285, 0.748582, 0, 1.0};
Point(44) = {0.014598, 0.749035, 0, 1.0};
Point(45) = {0.020889, 0.749221, 0, 1.0};
Point(46) = {0.027049, 0.749201, 0, 1.0};
Point(47) = {0.032997, 0.749056, 0, 1.0};
Point(48) = {0.038685, 0.748832, 0, 1.0};
Point(49) = {0.044068, 0.748574, 0, 1.0};
Point(50) = {0.049104, 0.748302, 0, 1.0};
Point(51) = {0.053755, 0.748044, 0, 1.0};
Point(52) = {0.057988, 0.747810, 0, 1.0};
Point(53) = {0.061774, 0.747621, 0, 1.0};
Point(54) = {0.065087, 0.747478, 0, 1.0};
Point(55) = {0.067909, 0.747394, 0, 1.0};
Point(56) = {0.070224, 0.747374, 0, 1.0};
Point(57) = {0.072043, 0.747425, 0, 1.0};
Point(58) = {0.073388, 0.747510, 0, 1.0};
Point(59) = {0.074236, 0.747572, 0, 1.0};
Point(60) = {-0.074235, -0.747580, 0, 1.0};
Point(61) = {-0.073353, -0.747559, 0, 1.0};
Point(62) = {-0.071884, -0.747546, 0, 1.0};
Point(63) = {-0.069848, -0.747562, 0, 1.0};
Point(64) = {-0.067286, -0.747625, 0, 1.0};
Point(65) = {-0.064245, -0.747735, 0, 1.0};
Point(66) = {-0.060770, -0.747887, 0, 1.0};
Point(67) = {-0.056909, -0.748082, 0, 1.0};
Point(68) = {-0.052717, -0.748311, 0, 1.0};
Point(69) = {-0.048252, -0.748567, 0, 1.0};
Point(70) = {-0.043573, -0.748842, 0, 1.0};
Point(71) = {-0.038742, -0.749125, 0, 1.0};
Point(72) = {-0.033823, -0.749401, 0, 1.0};
Point(73) = {-0.028881, -0.749653, 0, 1.0};
Point(74) = {-0.023981, -0.749860, 0, 1.0};
Point(75) = {-0.019187, -0.749990, 0, 1.0};
Point(76) = {-0.014543, -0.750000, 0, 1.0};
Point(77) = {-0.010070, -0.749862, 0, 1.0};
Point(78) = {-0.005785, -0.749564, 0, 1.0};
Point(79) = {-0.001707, -0.749104, 0, 1.0};
Point(80) = {0.002153, -0.748486, 0, 1.0};
Point(81) = {0.005782, -0.747727, 0, 1.0};
Point(82) = {0.009165, -0.746859, 0, 1.0};
Point(83) = {0.012271, -0.745913, 0, 1.0};
Point(84) = {0.015072, -0.744909, 0, 1.0};
Point(85) = {0.017546, -0.743871, 0, 1.0};
Point(86) = {0.019674, -0.742819, 0, 1.0};
Point(87) = {0.021444, -0.741779, 0, 1.0};
Point(88) = {0.022851, -0.740776, 0, 1.0};
Point(89) = {0.023891, -0.739835, 0, 1.0};
Point(90) = {0.024576, -0.738998, 0, 1.0};
Point(91) = {0.024923, -0.738301, 0, 1.0};
Point(92) = {0.024985, -0.737827, 0, 1.0};
Point(93) = {0.024709, -0.737813, 0, 1.0};
Point(94) = {0.023867, -0.738243, 0, 1.0};
Point(95) = {0.022388, -0.739034, 0, 1.0};
Point(96) = {0.020254, -0.740183, 0, 1.0};
Point(97) = {0.017382, -0.741645, 0, 1.0};
Point(98) = {0.013707, -0.743337, 0, 1.0};
Point(99) = {0.009153, -0.745092, 0, 1.0};
Point(100) = {0.003800, -0.746634, 0, 1.0};
Point(101) = {-0.002098, -0.747793, 0, 1.0};
Point(102) = {-0.008285, -0.748582, 0, 1.0};
Point(103) = {-0.014598, -0.749035, 0, 1.0};
Point(104) = {-0.020889, -0.749221, 0, 1.0};
Point(105) = {-0.027049, -0.749201, 0, 1.0};
Point(106) = {-0.032997, -0.749056, 0, 1.0};
Point(107) = {-0.038685, -0.748832, 0, 1.0};
Point(108) = {-0.044068, -0.748574, 0, 1.0};
Point(109) = {-0.049104, -0.748302, 0, 1.0};
Point(110) = {-0.053755, -0.748044, 0, 1.0};
Point(111) = {-0.057988, -0.747810, 0, 1.0};
Point(112) = {-0.061774, -0.747621, 0, 1.0};
Point(113) = {-0.065087, -0.747478, 0, 1.0};
Point(114) = {-0.067909, -0.747394, 0, 1.0};
Point(115) = {-0.070224, -0.747374, 0, 1.0};
Point(116) = {-0.072043, -0.747425, 0, 1.0};
Point(117) = {-0.073388, -0.747510, 0, 1.0};
Point(118) = {-0.074236, -0.747572, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:79};
Spline(6) = {79:101};
Spline(7) = {101:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html