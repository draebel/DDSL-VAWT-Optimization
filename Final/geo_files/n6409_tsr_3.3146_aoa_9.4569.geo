SetFactory("OpenCASCADE");

Point(1) = {0.073641, 0.728100, 0, 1.0};
Point(2) = {0.073390, 0.728227, 0, 1.0};
Point(3) = {0.072640, 0.728604, 0, 1.0};
Point(4) = {0.071398, 0.729221, 0, 1.0};
Point(5) = {0.069670, 0.730063, 0, 1.0};
Point(6) = {0.067474, 0.731108, 0, 1.0};
Point(7) = {0.064831, 0.732329, 0, 1.0};
Point(8) = {0.061757, 0.733700, 0, 1.0};
Point(9) = {0.058286, 0.735183, 0, 1.0};
Point(10) = {0.054448, 0.736749, 0, 1.0};
Point(11) = {0.050281, 0.738361, 0, 1.0};
Point(12) = {0.045824, 0.739985, 0, 1.0};
Point(13) = {0.041125, 0.741587, 0, 1.0};
Point(14) = {0.036230, 0.743135, 0, 1.0};
Point(15) = {0.031188, 0.744602, 0, 1.0};
Point(16) = {0.026060, 0.745957, 0, 1.0};
Point(17) = {0.020899, 0.747177, 0, 1.0};
Point(18) = {0.015754, 0.748245, 0, 1.0};
Point(19) = {0.010601, 0.749095, 0, 1.0};
Point(20) = {0.005574, 0.749663, 0, 1.0};
Point(21) = {0.000744, 0.749959, 0, 1.0};
Point(22) = {-0.003826, 0.750000, 0, 1.0};
Point(23) = {-0.008072, 0.749813, 0, 1.0};
Point(24) = {-0.011937, 0.749433, 0, 1.0};
Point(25) = {-0.015372, 0.748897, 0, 1.0};
Point(26) = {-0.018331, 0.748247, 0, 1.0};
Point(27) = {-0.020774, 0.747523, 0, 1.0};
Point(28) = {-0.022682, 0.746761, 0, 1.0};
Point(29) = {-0.024026, 0.745994, 0, 1.0};
Point(30) = {-0.024800, 0.745245, 0, 1.0};
Point(31) = {-0.025000, 0.744531, 0, 1.0};
Point(32) = {-0.024633, 0.743889, 0, 1.0};
Point(33) = {-0.023710, 0.743347, 0, 1.0};
Point(34) = {-0.022258, 0.742901, 0, 1.0};
Point(35) = {-0.020293, 0.742538, 0, 1.0};
Point(36) = {-0.017850, 0.742245, 0, 1.0};
Point(37) = {-0.014962, 0.742003, 0, 1.0};
Point(38) = {-0.011662, 0.741789, 0, 1.0};
Point(39) = {-0.007997, 0.741578, 0, 1.0};
Point(40) = {-0.004003, 0.741345, 0, 1.0};
Point(41) = {0.000271, 0.741060, 0, 1.0};
Point(42) = {0.004787, 0.740696, 0, 1.0};
Point(43) = {0.009492, 0.740230, 0, 1.0};
Point(44) = {0.014349, 0.739638, 0, 1.0};
Point(45) = {0.019391, 0.738933, 0, 1.0};
Point(46) = {0.024498, 0.738183, 0, 1.0};
Point(47) = {0.029608, 0.737386, 0, 1.0};
Point(48) = {0.034666, 0.736548, 0, 1.0};
Point(49) = {0.039616, 0.735674, 0, 1.0};
Point(50) = {0.044405, 0.734774, 0, 1.0};
Point(51) = {0.048981, 0.733864, 0, 1.0};
Point(52) = {0.053293, 0.732961, 0, 1.0};
Point(53) = {0.057296, 0.732081, 0, 1.0};
Point(54) = {0.060942, 0.731246, 0, 1.0};
Point(55) = {0.064191, 0.730476, 0, 1.0};
Point(56) = {0.067008, 0.729789, 0, 1.0};
Point(57) = {0.069357, 0.729202, 0, 1.0};
Point(58) = {0.071214, 0.728728, 0, 1.0};
Point(59) = {0.072556, 0.728383, 0, 1.0};
Point(60) = {0.073371, 0.728171, 0, 1.0};
Point(61) = {-0.073641, -0.728100, 0, 1.0};
Point(62) = {-0.073390, -0.728227, 0, 1.0};
Point(63) = {-0.072640, -0.728604, 0, 1.0};
Point(64) = {-0.071398, -0.729221, 0, 1.0};
Point(65) = {-0.069670, -0.730063, 0, 1.0};
Point(66) = {-0.067474, -0.731108, 0, 1.0};
Point(67) = {-0.064831, -0.732329, 0, 1.0};
Point(68) = {-0.061757, -0.733700, 0, 1.0};
Point(69) = {-0.058286, -0.735183, 0, 1.0};
Point(70) = {-0.054448, -0.736749, 0, 1.0};
Point(71) = {-0.050281, -0.738361, 0, 1.0};
Point(72) = {-0.045824, -0.739985, 0, 1.0};
Point(73) = {-0.041125, -0.741587, 0, 1.0};
Point(74) = {-0.036230, -0.743135, 0, 1.0};
Point(75) = {-0.031188, -0.744602, 0, 1.0};
Point(76) = {-0.026060, -0.745957, 0, 1.0};
Point(77) = {-0.020899, -0.747177, 0, 1.0};
Point(78) = {-0.015754, -0.748245, 0, 1.0};
Point(79) = {-0.010601, -0.749095, 0, 1.0};
Point(80) = {-0.005574, -0.749663, 0, 1.0};
Point(81) = {-0.000744, -0.749959, 0, 1.0};
Point(82) = {0.003826, -0.750000, 0, 1.0};
Point(83) = {0.008072, -0.749813, 0, 1.0};
Point(84) = {0.011937, -0.749433, 0, 1.0};
Point(85) = {0.015372, -0.748897, 0, 1.0};
Point(86) = {0.018331, -0.748247, 0, 1.0};
Point(87) = {0.020774, -0.747523, 0, 1.0};
Point(88) = {0.022682, -0.746761, 0, 1.0};
Point(89) = {0.024026, -0.745994, 0, 1.0};
Point(90) = {0.024800, -0.745245, 0, 1.0};
Point(91) = {0.025000, -0.744531, 0, 1.0};
Point(92) = {0.024633, -0.743889, 0, 1.0};
Point(93) = {0.023710, -0.743347, 0, 1.0};
Point(94) = {0.022258, -0.742901, 0, 1.0};
Point(95) = {0.020293, -0.742538, 0, 1.0};
Point(96) = {0.017850, -0.742245, 0, 1.0};
Point(97) = {0.014962, -0.742003, 0, 1.0};
Point(98) = {0.011662, -0.741789, 0, 1.0};
Point(99) = {0.007997, -0.741578, 0, 1.0};
Point(100) = {0.004003, -0.741345, 0, 1.0};
Point(101) = {-0.000271, -0.741060, 0, 1.0};
Point(102) = {-0.004787, -0.740696, 0, 1.0};
Point(103) = {-0.009492, -0.740230, 0, 1.0};
Point(104) = {-0.014349, -0.739638, 0, 1.0};
Point(105) = {-0.019391, -0.738933, 0, 1.0};
Point(106) = {-0.024498, -0.738183, 0, 1.0};
Point(107) = {-0.029608, -0.737386, 0, 1.0};
Point(108) = {-0.034666, -0.736548, 0, 1.0};
Point(109) = {-0.039616, -0.735674, 0, 1.0};
Point(110) = {-0.044405, -0.734774, 0, 1.0};
Point(111) = {-0.048981, -0.733864, 0, 1.0};
Point(112) = {-0.053293, -0.732961, 0, 1.0};
Point(113) = {-0.057296, -0.732081, 0, 1.0};
Point(114) = {-0.060942, -0.731246, 0, 1.0};
Point(115) = {-0.064191, -0.730476, 0, 1.0};
Point(116) = {-0.067008, -0.729789, 0, 1.0};
Point(117) = {-0.069357, -0.729202, 0, 1.0};
Point(118) = {-0.071214, -0.728728, 0, 1.0};
Point(119) = {-0.072556, -0.728383, 0, 1.0};
Point(120) = {-0.073371, -0.728171, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:101};
Spline(7) = {101:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html