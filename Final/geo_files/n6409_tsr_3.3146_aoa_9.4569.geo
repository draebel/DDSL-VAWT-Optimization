SetFactory("OpenCASCADE");

Point(1) = {0.110461, 0.717150, 0, 1.0};
Point(2) = {0.110086, 0.717341, 0, 1.0};
Point(3) = {0.108960, 0.717907, 0, 1.0};
Point(4) = {0.107096, 0.718832, 0, 1.0};
Point(5) = {0.104504, 0.720095, 0, 1.0};
Point(6) = {0.101212, 0.721662, 0, 1.0};
Point(7) = {0.097247, 0.723494, 0, 1.0};
Point(8) = {0.092635, 0.725550, 0, 1.0};
Point(9) = {0.087429, 0.727775, 0, 1.0};
Point(10) = {0.081672, 0.730124, 0, 1.0};
Point(11) = {0.075422, 0.732541, 0, 1.0};
Point(12) = {0.068736, 0.734978, 0, 1.0};
Point(13) = {0.061688, 0.737381, 0, 1.0};
Point(14) = {0.054345, 0.739703, 0, 1.0};
Point(15) = {0.046782, 0.741902, 0, 1.0};
Point(16) = {0.039090, 0.743935, 0, 1.0};
Point(17) = {0.031348, 0.745766, 0, 1.0};
Point(18) = {0.023631, 0.747368, 0, 1.0};
Point(19) = {0.015901, 0.748643, 0, 1.0};
Point(20) = {0.008361, 0.749495, 0, 1.0};
Point(21) = {0.001116, 0.749938, 0, 1.0};
Point(22) = {-0.005738, 0.750000, 0, 1.0};
Point(23) = {-0.012108, 0.749720, 0, 1.0};
Point(24) = {-0.017905, 0.749150, 0, 1.0};
Point(25) = {-0.023058, 0.748346, 0, 1.0};
Point(26) = {-0.027496, 0.747371, 0, 1.0};
Point(27) = {-0.031161, 0.746285, 0, 1.0};
Point(28) = {-0.034023, 0.745142, 0, 1.0};
Point(29) = {-0.036040, 0.743990, 0, 1.0};
Point(30) = {-0.037200, 0.742867, 0, 1.0};
Point(31) = {-0.037500, 0.741796, 0, 1.0};
Point(32) = {-0.036950, 0.740833, 0, 1.0};
Point(33) = {-0.035565, 0.740020, 0, 1.0};
Point(34) = {-0.033386, 0.739351, 0, 1.0};
Point(35) = {-0.030440, 0.738808, 0, 1.0};
Point(36) = {-0.026776, 0.738367, 0, 1.0};
Point(37) = {-0.022443, 0.738005, 0, 1.0};
Point(38) = {-0.017493, 0.737684, 0, 1.0};
Point(39) = {-0.011996, 0.737367, 0, 1.0};
Point(40) = {-0.006005, 0.737017, 0, 1.0};
Point(41) = {0.000407, 0.736591, 0, 1.0};
Point(42) = {0.007180, 0.736045, 0, 1.0};
Point(43) = {0.014238, 0.735345, 0, 1.0};
Point(44) = {0.021523, 0.734457, 0, 1.0};
Point(45) = {0.029086, 0.733400, 0, 1.0};
Point(46) = {0.036747, 0.732274, 0, 1.0};
Point(47) = {0.044412, 0.731079, 0, 1.0};
Point(48) = {0.051999, 0.729822, 0, 1.0};
Point(49) = {0.059424, 0.728510, 0, 1.0};
Point(50) = {0.066608, 0.727162, 0, 1.0};
Point(51) = {0.073471, 0.725796, 0, 1.0};
Point(52) = {0.079939, 0.724441, 0, 1.0};
Point(53) = {0.085944, 0.723121, 0, 1.0};
Point(54) = {0.091413, 0.721870, 0, 1.0};
Point(55) = {0.096286, 0.720714, 0, 1.0};
Point(56) = {0.100512, 0.719683, 0, 1.0};
Point(57) = {0.104035, 0.718803, 0, 1.0};
Point(58) = {0.106821, 0.718093, 0, 1.0};
Point(59) = {0.108834, 0.717575, 0, 1.0};
Point(60) = {0.110056, 0.717256, 0, 1.0};
Point(61) = {-0.110461, -0.717150, 0, 1.0};
Point(62) = {-0.110086, -0.717341, 0, 1.0};
Point(63) = {-0.108960, -0.717907, 0, 1.0};
Point(64) = {-0.107096, -0.718832, 0, 1.0};
Point(65) = {-0.104504, -0.720095, 0, 1.0};
Point(66) = {-0.101212, -0.721662, 0, 1.0};
Point(67) = {-0.097247, -0.723494, 0, 1.0};
Point(68) = {-0.092635, -0.725550, 0, 1.0};
Point(69) = {-0.087429, -0.727775, 0, 1.0};
Point(70) = {-0.081672, -0.730124, 0, 1.0};
Point(71) = {-0.075422, -0.732541, 0, 1.0};
Point(72) = {-0.068736, -0.734978, 0, 1.0};
Point(73) = {-0.061688, -0.737381, 0, 1.0};
Point(74) = {-0.054345, -0.739703, 0, 1.0};
Point(75) = {-0.046782, -0.741902, 0, 1.0};
Point(76) = {-0.039090, -0.743935, 0, 1.0};
Point(77) = {-0.031348, -0.745766, 0, 1.0};
Point(78) = {-0.023631, -0.747368, 0, 1.0};
Point(79) = {-0.015901, -0.748643, 0, 1.0};
Point(80) = {-0.008361, -0.749495, 0, 1.0};
Point(81) = {-0.001116, -0.749938, 0, 1.0};
Point(82) = {0.005738, -0.750000, 0, 1.0};
Point(83) = {0.012108, -0.749720, 0, 1.0};
Point(84) = {0.017905, -0.749150, 0, 1.0};
Point(85) = {0.023058, -0.748346, 0, 1.0};
Point(86) = {0.027496, -0.747371, 0, 1.0};
Point(87) = {0.031161, -0.746285, 0, 1.0};
Point(88) = {0.034023, -0.745142, 0, 1.0};
Point(89) = {0.036040, -0.743990, 0, 1.0};
Point(90) = {0.037200, -0.742867, 0, 1.0};
Point(91) = {0.037500, -0.741796, 0, 1.0};
Point(92) = {0.036950, -0.740833, 0, 1.0};
Point(93) = {0.035565, -0.740020, 0, 1.0};
Point(94) = {0.033386, -0.739351, 0, 1.0};
Point(95) = {0.030440, -0.738808, 0, 1.0};
Point(96) = {0.026776, -0.738367, 0, 1.0};
Point(97) = {0.022443, -0.738005, 0, 1.0};
Point(98) = {0.017493, -0.737684, 0, 1.0};
Point(99) = {0.011996, -0.737367, 0, 1.0};
Point(100) = {0.006005, -0.737017, 0, 1.0};
Point(101) = {-0.000407, -0.736591, 0, 1.0};
Point(102) = {-0.007180, -0.736045, 0, 1.0};
Point(103) = {-0.014238, -0.735345, 0, 1.0};
Point(104) = {-0.021523, -0.734457, 0, 1.0};
Point(105) = {-0.029086, -0.733400, 0, 1.0};
Point(106) = {-0.036747, -0.732274, 0, 1.0};
Point(107) = {-0.044412, -0.731079, 0, 1.0};
Point(108) = {-0.051999, -0.729822, 0, 1.0};
Point(109) = {-0.059424, -0.728510, 0, 1.0};
Point(110) = {-0.066608, -0.727162, 0, 1.0};
Point(111) = {-0.073471, -0.725796, 0, 1.0};
Point(112) = {-0.079939, -0.724441, 0, 1.0};
Point(113) = {-0.085944, -0.723121, 0, 1.0};
Point(114) = {-0.091413, -0.721870, 0, 1.0};
Point(115) = {-0.096286, -0.720714, 0, 1.0};
Point(116) = {-0.100512, -0.719683, 0, 1.0};
Point(117) = {-0.104035, -0.718803, 0, 1.0};
Point(118) = {-0.106821, -0.718093, 0, 1.0};
Point(119) = {-0.108834, -0.717575, 0, 1.0};
Point(120) = {-0.110056, -0.717256, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:101};
Spline(7) = {101:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html