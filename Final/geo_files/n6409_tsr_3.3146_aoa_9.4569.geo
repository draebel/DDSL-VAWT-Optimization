SetFactory("OpenCASCADE");

Point(1) = {0.147282, 0.706200, 0, 1.0};
Point(2) = {0.146781, 0.706454, 0, 1.0};
Point(3) = {0.145280, 0.707209, 0, 1.0};
Point(4) = {0.142795, 0.708442, 0, 1.0};
Point(5) = {0.139339, 0.710127, 0, 1.0};
Point(6) = {0.134949, 0.712217, 0, 1.0};
Point(7) = {0.129662, 0.714658, 0, 1.0};
Point(8) = {0.123513, 0.717400, 0, 1.0};
Point(9) = {0.116572, 0.720367, 0, 1.0};
Point(10) = {0.108896, 0.723498, 0, 1.0};
Point(11) = {0.100563, 0.726721, 0, 1.0};
Point(12) = {0.091647, 0.729970, 0, 1.0};
Point(13) = {0.082250, 0.733174, 0, 1.0};
Point(14) = {0.072460, 0.736271, 0, 1.0};
Point(15) = {0.062377, 0.739203, 0, 1.0};
Point(16) = {0.052120, 0.741913, 0, 1.0};
Point(17) = {0.041797, 0.744355, 0, 1.0};
Point(18) = {0.031508, 0.746490, 0, 1.0};
Point(19) = {0.021202, 0.748191, 0, 1.0};
Point(20) = {0.011148, 0.749326, 0, 1.0};
Point(21) = {0.001487, 0.749917, 0, 1.0};
Point(22) = {-0.007651, 0.750000, 0, 1.0};
Point(23) = {-0.016144, 0.749626, 0, 1.0};
Point(24) = {-0.023874, 0.748866, 0, 1.0};
Point(25) = {-0.030743, 0.747794, 0, 1.0};
Point(26) = {-0.036661, 0.746495, 0, 1.0};
Point(27) = {-0.041548, 0.745046, 0, 1.0};
Point(28) = {-0.045364, 0.743522, 0, 1.0};
Point(29) = {-0.048053, 0.741987, 0, 1.0};
Point(30) = {-0.049600, 0.740489, 0, 1.0};
Point(31) = {-0.050000, 0.739061, 0, 1.0};
Point(32) = {-0.049267, 0.737778, 0, 1.0};
Point(33) = {-0.047420, 0.736693, 0, 1.0};
Point(34) = {-0.044515, 0.735802, 0, 1.0};
Point(35) = {-0.040587, 0.735077, 0, 1.0};
Point(36) = {-0.035701, 0.734490, 0, 1.0};
Point(37) = {-0.029924, 0.734006, 0, 1.0};
Point(38) = {-0.023324, 0.733578, 0, 1.0};
Point(39) = {-0.015994, 0.733156, 0, 1.0};
Point(40) = {-0.008006, 0.732689, 0, 1.0};
Point(41) = {0.000542, 0.732121, 0, 1.0};
Point(42) = {0.009574, 0.731393, 0, 1.0};
Point(43) = {0.018984, 0.730460, 0, 1.0};
Point(44) = {0.028698, 0.729276, 0, 1.0};
Point(45) = {0.038781, 0.727866, 0, 1.0};
Point(46) = {0.048995, 0.726365, 0, 1.0};
Point(47) = {0.059217, 0.724772, 0, 1.0};
Point(48) = {0.069332, 0.723095, 0, 1.0};
Point(49) = {0.079232, 0.721347, 0, 1.0};
Point(50) = {0.088810, 0.719549, 0, 1.0};
Point(51) = {0.097962, 0.717729, 0, 1.0};
Point(52) = {0.106586, 0.715921, 0, 1.0};
Point(53) = {0.114592, 0.714162, 0, 1.0};
Point(54) = {0.121885, 0.712493, 0, 1.0};
Point(55) = {0.128382, 0.710952, 0, 1.0};
Point(56) = {0.134017, 0.709578, 0, 1.0};
Point(57) = {0.138714, 0.708404, 0, 1.0};
Point(58) = {0.142428, 0.707457, 0, 1.0};
Point(59) = {0.145111, 0.706767, 0, 1.0};
Point(60) = {0.146742, 0.706341, 0, 1.0};
Point(61) = {-0.147282, -0.706200, 0, 1.0};
Point(62) = {-0.146781, -0.706454, 0, 1.0};
Point(63) = {-0.145280, -0.707209, 0, 1.0};
Point(64) = {-0.142795, -0.708442, 0, 1.0};
Point(65) = {-0.139339, -0.710127, 0, 1.0};
Point(66) = {-0.134949, -0.712217, 0, 1.0};
Point(67) = {-0.129662, -0.714658, 0, 1.0};
Point(68) = {-0.123513, -0.717400, 0, 1.0};
Point(69) = {-0.116572, -0.720367, 0, 1.0};
Point(70) = {-0.108896, -0.723498, 0, 1.0};
Point(71) = {-0.100563, -0.726721, 0, 1.0};
Point(72) = {-0.091647, -0.729970, 0, 1.0};
Point(73) = {-0.082250, -0.733174, 0, 1.0};
Point(74) = {-0.072460, -0.736271, 0, 1.0};
Point(75) = {-0.062377, -0.739203, 0, 1.0};
Point(76) = {-0.052120, -0.741913, 0, 1.0};
Point(77) = {-0.041797, -0.744355, 0, 1.0};
Point(78) = {-0.031508, -0.746490, 0, 1.0};
Point(79) = {-0.021202, -0.748191, 0, 1.0};
Point(80) = {-0.011148, -0.749326, 0, 1.0};
Point(81) = {-0.001487, -0.749917, 0, 1.0};
Point(82) = {0.007651, -0.750000, 0, 1.0};
Point(83) = {0.016144, -0.749626, 0, 1.0};
Point(84) = {0.023874, -0.748866, 0, 1.0};
Point(85) = {0.030743, -0.747794, 0, 1.0};
Point(86) = {0.036661, -0.746495, 0, 1.0};
Point(87) = {0.041548, -0.745046, 0, 1.0};
Point(88) = {0.045364, -0.743522, 0, 1.0};
Point(89) = {0.048053, -0.741987, 0, 1.0};
Point(90) = {0.049600, -0.740489, 0, 1.0};
Point(91) = {0.050000, -0.739061, 0, 1.0};
Point(92) = {0.049267, -0.737778, 0, 1.0};
Point(93) = {0.047420, -0.736693, 0, 1.0};
Point(94) = {0.044515, -0.735802, 0, 1.0};
Point(95) = {0.040587, -0.735077, 0, 1.0};
Point(96) = {0.035701, -0.734490, 0, 1.0};
Point(97) = {0.029924, -0.734006, 0, 1.0};
Point(98) = {0.023324, -0.733578, 0, 1.0};
Point(99) = {0.015994, -0.733156, 0, 1.0};
Point(100) = {0.008006, -0.732689, 0, 1.0};
Point(101) = {-0.000542, -0.732121, 0, 1.0};
Point(102) = {-0.009574, -0.731393, 0, 1.0};
Point(103) = {-0.018984, -0.730460, 0, 1.0};
Point(104) = {-0.028698, -0.729276, 0, 1.0};
Point(105) = {-0.038781, -0.727866, 0, 1.0};
Point(106) = {-0.048995, -0.726365, 0, 1.0};
Point(107) = {-0.059217, -0.724772, 0, 1.0};
Point(108) = {-0.069332, -0.723095, 0, 1.0};
Point(109) = {-0.079232, -0.721347, 0, 1.0};
Point(110) = {-0.088810, -0.719549, 0, 1.0};
Point(111) = {-0.097962, -0.717729, 0, 1.0};
Point(112) = {-0.106586, -0.715921, 0, 1.0};
Point(113) = {-0.114592, -0.714162, 0, 1.0};
Point(114) = {-0.121885, -0.712493, 0, 1.0};
Point(115) = {-0.128382, -0.710952, 0, 1.0};
Point(116) = {-0.134017, -0.709578, 0, 1.0};
Point(117) = {-0.138714, -0.708404, 0, 1.0};
Point(118) = {-0.142428, -0.707457, 0, 1.0};
Point(119) = {-0.145111, -0.706767, 0, 1.0};
Point(120) = {-0.146742, -0.706341, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:101};
Spline(7) = {101:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html