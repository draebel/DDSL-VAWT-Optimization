SetFactory("OpenCASCADE");

Point(1) = {0.074254, 0.722105, 0, 1.0};
Point(2) = {0.070431, 0.723527, 0, 1.0};
Point(3) = {0.066561, 0.724933, 0, 1.0};
Point(4) = {0.062685, 0.726307, 0, 1.0};
Point(5) = {0.058806, 0.727665, 0, 1.0};
Point(6) = {0.054919, 0.728975, 0, 1.0};
Point(7) = {0.051024, 0.730237, 0, 1.0};
Point(8) = {0.047128, 0.731499, 0, 1.0};
Point(9) = {0.043225, 0.732713, 0, 1.0};
Point(10) = {0.039315, 0.733896, 0, 1.0};
Point(11) = {0.035397, 0.735030, 0, 1.0};
Point(12) = {0.031474, 0.736132, 0, 1.0};
Point(13) = {0.027539, 0.737171, 0, 1.0};
Point(14) = {0.023596, 0.738161, 0, 1.0};
Point(15) = {0.019644, 0.739104, 0, 1.0};
Point(16) = {0.015684, 0.739999, 0, 1.0};
Point(17) = {0.007750, 0.741708, 0, 1.0};
Point(18) = {-0.000213, 0.743258, 0, 1.0};
Point(19) = {-0.008197, 0.744680, 0, 1.0};
Point(20) = {-0.016205, 0.745974, 0, 1.0};
Point(21) = {-0.024237, 0.747124, 0, 1.0};
Point(22) = {-0.032293, 0.748147, 0, 1.0};
Point(23) = {-0.040376, 0.749009, 0, 1.0};
Point(24) = {-0.044432, 0.749361, 0, 1.0};
Point(25) = {-0.048498, 0.749648, 0, 1.0};
Point(26) = {-0.052577, 0.749872, 0, 1.0};
Point(27) = {-0.056672, 0.750000, 0, 1.0};
Point(28) = {-0.060789, 0.750000, 0, 1.0};
Point(29) = {-0.064941, 0.749808, 0, 1.0};
Point(30) = {-0.067042, 0.749569, 0, 1.0};
Point(31) = {-0.069171, 0.749169, 0, 1.0};
Point(32) = {-0.071364, 0.748403, 0, 1.0};
Point(33) = {-0.072731, 0.747655, 0, 1.0};
Point(34) = {-0.073329, 0.747068, 0, 1.0};
Point(35) = {-0.073865, 0.745894, 0, 1.0};
Point(36) = {-0.073635, 0.745327, 0, 1.0};
Point(37) = {-0.073181, 0.745099, 0, 1.0};
Point(38) = {-0.072036, 0.744584, 0, 1.0};
Point(39) = {-0.070087, 0.743961, 0, 1.0};
Point(40) = {-0.068127, 0.743402, 0, 1.0};
Point(41) = {-0.066158, 0.742891, 0, 1.0};
Point(42) = {-0.062215, 0.741901, 0, 1.0};
Point(43) = {-0.058260, 0.740974, 0, 1.0};
Point(44) = {-0.054300, 0.740079, 0, 1.0};
Point(45) = {-0.050335, 0.739217, 0, 1.0};
Point(46) = {-0.046360, 0.738402, 0, 1.0};
Point(47) = {-0.042383, 0.737603, 0, 1.0};
Point(48) = {-0.034418, 0.736069, 0, 1.0};
Point(49) = {-0.026433, 0.734647, 0, 1.0};
Point(50) = {-0.018440, 0.733273, 0, 1.0};
Point(51) = {-0.010436, 0.731963, 0, 1.0};
Point(52) = {-0.002420, 0.730717, 0, 1.0};
Point(53) = {0.005607, 0.729535, 0, 1.0};
Point(54) = {0.013657, 0.728480, 0, 1.0};
Point(55) = {0.017695, 0.728033, 0, 1.0};
Point(56) = {0.021734, 0.727586, 0, 1.0};
Point(57) = {0.025782, 0.727186, 0, 1.0};
Point(58) = {0.029829, 0.726787, 0, 1.0};
Point(59) = {0.033876, 0.726387, 0, 1.0};
Point(60) = {0.037920, 0.725972, 0, 1.0};
Point(61) = {0.041968, 0.725572, 0, 1.0};
Point(62) = {0.046007, 0.725125, 0, 1.0};
Point(63) = {0.050045, 0.724678, 0, 1.0};
Point(64) = {0.054076, 0.724182, 0, 1.0};
Point(65) = {0.058101, 0.723655, 0, 1.0};
Point(66) = {0.062108, 0.723032, 0, 1.0};
Point(67) = {0.066099, 0.722313, 0, 1.0};
Point(68) = {0.070079, 0.721530, 0, 1.0};
Point(69) = {0.073993, 0.720623, 0, 1.0};
Point(70) = {-0.074254, -0.722105, 0, 1.0};
Point(71) = {-0.070431, -0.723527, 0, 1.0};
Point(72) = {-0.066561, -0.724933, 0, 1.0};
Point(73) = {-0.062685, -0.726307, 0, 1.0};
Point(74) = {-0.058806, -0.727665, 0, 1.0};
Point(75) = {-0.054919, -0.728975, 0, 1.0};
Point(76) = {-0.051024, -0.730237, 0, 1.0};
Point(77) = {-0.047128, -0.731499, 0, 1.0};
Point(78) = {-0.043225, -0.732713, 0, 1.0};
Point(79) = {-0.039315, -0.733896, 0, 1.0};
Point(80) = {-0.035397, -0.735030, 0, 1.0};
Point(81) = {-0.031474, -0.736132, 0, 1.0};
Point(82) = {-0.027539, -0.737171, 0, 1.0};
Point(83) = {-0.023596, -0.738161, 0, 1.0};
Point(84) = {-0.019644, -0.739104, 0, 1.0};
Point(85) = {-0.015684, -0.739999, 0, 1.0};
Point(86) = {-0.007750, -0.741708, 0, 1.0};
Point(87) = {0.000213, -0.743258, 0, 1.0};
Point(88) = {0.008197, -0.744680, 0, 1.0};
Point(89) = {0.016205, -0.745974, 0, 1.0};
Point(90) = {0.024237, -0.747124, 0, 1.0};
Point(91) = {0.032293, -0.748147, 0, 1.0};
Point(92) = {0.040376, -0.749009, 0, 1.0};
Point(93) = {0.044432, -0.749361, 0, 1.0};
Point(94) = {0.048498, -0.749648, 0, 1.0};
Point(95) = {0.052577, -0.749872, 0, 1.0};
Point(96) = {0.056672, -0.750000, 0, 1.0};
Point(97) = {0.060789, -0.750000, 0, 1.0};
Point(98) = {0.064941, -0.749808, 0, 1.0};
Point(99) = {0.067042, -0.749569, 0, 1.0};
Point(100) = {0.069171, -0.749169, 0, 1.0};
Point(101) = {0.071364, -0.748403, 0, 1.0};
Point(102) = {0.072731, -0.747655, 0, 1.0};
Point(103) = {0.073329, -0.747068, 0, 1.0};
Point(104) = {0.073865, -0.745894, 0, 1.0};
Point(105) = {0.073635, -0.745327, 0, 1.0};
Point(106) = {0.073181, -0.745099, 0, 1.0};
Point(107) = {0.072036, -0.744584, 0, 1.0};
Point(108) = {0.070087, -0.743961, 0, 1.0};
Point(109) = {0.068127, -0.743402, 0, 1.0};
Point(110) = {0.066158, -0.742891, 0, 1.0};
Point(111) = {0.062215, -0.741901, 0, 1.0};
Point(112) = {0.058260, -0.740974, 0, 1.0};
Point(113) = {0.054300, -0.740079, 0, 1.0};
Point(114) = {0.050335, -0.739217, 0, 1.0};
Point(115) = {0.046360, -0.738402, 0, 1.0};
Point(116) = {0.042383, -0.737603, 0, 1.0};
Point(117) = {0.034418, -0.736069, 0, 1.0};
Point(118) = {0.026433, -0.734647, 0, 1.0};
Point(119) = {0.018440, -0.733273, 0, 1.0};
Point(120) = {0.010436, -0.731963, 0, 1.0};
Point(121) = {0.002420, -0.730717, 0, 1.0};
Point(122) = {-0.005607, -0.729535, 0, 1.0};
Point(123) = {-0.013657, -0.728480, 0, 1.0};
Point(124) = {-0.017695, -0.728033, 0, 1.0};
Point(125) = {-0.021734, -0.727586, 0, 1.0};
Point(126) = {-0.025782, -0.727186, 0, 1.0};
Point(127) = {-0.029829, -0.726787, 0, 1.0};
Point(128) = {-0.033876, -0.726387, 0, 1.0};
Point(129) = {-0.037920, -0.725972, 0, 1.0};
Point(130) = {-0.041968, -0.725572, 0, 1.0};
Point(131) = {-0.046007, -0.725125, 0, 1.0};
Point(132) = {-0.050045, -0.724678, 0, 1.0};
Point(133) = {-0.054076, -0.724182, 0, 1.0};
Point(134) = {-0.058101, -0.723655, 0, 1.0};
Point(135) = {-0.062108, -0.723032, 0, 1.0};
Point(136) = {-0.066099, -0.722313, 0, 1.0};
Point(137) = {-0.070079, -0.721530, 0, 1.0};
Point(138) = {-0.073993, -0.720623, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:48};
Spline(3) = {48:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:91};
Spline(6) = {91:117};
Spline(7) = {117:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html