SetFactory("OpenCASCADE");

Point(1) = {0.074570, 0.737266, 0, 1.0};
Point(2) = {0.074249, 0.737343, 0, 1.0};
Point(3) = {0.073327, 0.737592, 0, 1.0};
Point(4) = {0.071878, 0.738002, 0, 1.0};
Point(5) = {0.069946, 0.738521, 0, 1.0};
Point(6) = {0.067536, 0.739104, 0, 1.0};
Point(7) = {0.064652, 0.739751, 0, 1.0};
Point(8) = {0.061329, 0.740462, 0, 1.0};
Point(9) = {0.057608, 0.741228, 0, 1.0};
Point(10) = {0.053535, 0.742041, 0, 1.0};
Point(11) = {0.049159, 0.742890, 0, 1.0};
Point(12) = {0.044535, 0.743765, 0, 1.0};
Point(13) = {0.039726, 0.744651, 0, 1.0};
Point(14) = {0.034789, 0.745516, 0, 1.0};
Point(15) = {0.029771, 0.746342, 0, 1.0};
Point(16) = {0.024722, 0.747116, 0, 1.0};
Point(17) = {0.019695, 0.747823, 0, 1.0};
Point(18) = {0.014742, 0.748447, 0, 1.0};
Point(19) = {0.009908, 0.748980, 0, 1.0};
Point(20) = {0.005244, 0.749408, 0, 1.0};
Point(21) = {0.000793, 0.749725, 0, 1.0};
Point(22) = {-0.003404, 0.749924, 0, 1.0};
Point(23) = {-0.007309, 0.750000, 0, 1.0};
Point(24) = {-0.010891, 0.749956, 0, 1.0};
Point(25) = {-0.014117, 0.749792, 0, 1.0};
Point(26) = {-0.016961, 0.749514, 0, 1.0};
Point(27) = {-0.019403, 0.749133, 0, 1.0};
Point(28) = {-0.021424, 0.748660, 0, 1.0};
Point(29) = {-0.023012, 0.748116, 0, 1.0};
Point(30) = {-0.024148, 0.747524, 0, 1.0};
Point(31) = {-0.024827, 0.746906, 0, 1.0};
Point(32) = {-0.024984, 0.746336, 0, 1.0};
Point(33) = {-0.024586, 0.745758, 0, 1.0};
Point(34) = {-0.023682, 0.745115, 0, 1.0};
Point(35) = {-0.022299, 0.744477, 0, 1.0};
Point(36) = {-0.020435, 0.743865, 0, 1.0};
Point(37) = {-0.018088, 0.743295, 0, 1.0};
Point(38) = {-0.015268, 0.742758, 0, 1.0};
Point(39) = {-0.012000, 0.742252, 0, 1.0};
Point(40) = {-0.008317, 0.741775, 0, 1.0};
Point(41) = {-0.004259, 0.741320, 0, 1.0};
Point(42) = {0.000124, 0.740889, 0, 1.0};
Point(43) = {0.004784, 0.740485, 0, 1.0};
Point(44) = {0.009665, 0.740108, 0, 1.0};
Point(45) = {0.014711, 0.739764, 0, 1.0};
Point(46) = {0.019865, 0.739459, 0, 1.0};
Point(47) = {0.025068, 0.739201, 0, 1.0};
Point(48) = {0.030260, 0.738999, 0, 1.0};
Point(49) = {0.035411, 0.738893, 0, 1.0};
Point(50) = {0.040517, 0.738860, 0, 1.0};
Point(51) = {0.045531, 0.738837, 0, 1.0};
Point(52) = {0.050369, 0.738792, 0, 1.0};
Point(53) = {0.054957, 0.738712, 0, 1.0};
Point(54) = {0.059216, 0.738588, 0, 1.0};
Point(55) = {0.063077, 0.738419, 0, 1.0};
Point(56) = {0.066474, 0.738210, 0, 1.0};
Point(57) = {0.069342, 0.737969, 0, 1.0};
Point(58) = {0.071619, 0.737714, 0, 1.0};
Point(59) = {0.073259, 0.737486, 0, 1.0};
Point(60) = {0.074243, 0.737326, 0, 1.0};
Point(61) = {-0.074570, -0.737266, 0, 1.0};
Point(62) = {-0.074249, -0.737343, 0, 1.0};
Point(63) = {-0.073327, -0.737592, 0, 1.0};
Point(64) = {-0.071878, -0.738002, 0, 1.0};
Point(65) = {-0.069946, -0.738521, 0, 1.0};
Point(66) = {-0.067536, -0.739104, 0, 1.0};
Point(67) = {-0.064652, -0.739751, 0, 1.0};
Point(68) = {-0.061329, -0.740462, 0, 1.0};
Point(69) = {-0.057608, -0.741228, 0, 1.0};
Point(70) = {-0.053535, -0.742041, 0, 1.0};
Point(71) = {-0.049159, -0.742890, 0, 1.0};
Point(72) = {-0.044535, -0.743765, 0, 1.0};
Point(73) = {-0.039726, -0.744651, 0, 1.0};
Point(74) = {-0.034789, -0.745516, 0, 1.0};
Point(75) = {-0.029771, -0.746342, 0, 1.0};
Point(76) = {-0.024722, -0.747116, 0, 1.0};
Point(77) = {-0.019695, -0.747823, 0, 1.0};
Point(78) = {-0.014742, -0.748447, 0, 1.0};
Point(79) = {-0.009908, -0.748980, 0, 1.0};
Point(80) = {-0.005244, -0.749408, 0, 1.0};
Point(81) = {-0.000793, -0.749725, 0, 1.0};
Point(82) = {0.003404, -0.749924, 0, 1.0};
Point(83) = {0.007309, -0.750000, 0, 1.0};
Point(84) = {0.010891, -0.749956, 0, 1.0};
Point(85) = {0.014117, -0.749792, 0, 1.0};
Point(86) = {0.016961, -0.749514, 0, 1.0};
Point(87) = {0.019403, -0.749133, 0, 1.0};
Point(88) = {0.021424, -0.748660, 0, 1.0};
Point(89) = {0.023012, -0.748116, 0, 1.0};
Point(90) = {0.024148, -0.747524, 0, 1.0};
Point(91) = {0.024827, -0.746906, 0, 1.0};
Point(92) = {0.024984, -0.746336, 0, 1.0};
Point(93) = {0.024586, -0.745758, 0, 1.0};
Point(94) = {0.023682, -0.745115, 0, 1.0};
Point(95) = {0.022299, -0.744477, 0, 1.0};
Point(96) = {0.020435, -0.743865, 0, 1.0};
Point(97) = {0.018088, -0.743295, 0, 1.0};
Point(98) = {0.015268, -0.742758, 0, 1.0};
Point(99) = {0.012000, -0.742252, 0, 1.0};
Point(100) = {0.008317, -0.741775, 0, 1.0};
Point(101) = {0.004259, -0.741320, 0, 1.0};
Point(102) = {-0.000124, -0.740889, 0, 1.0};
Point(103) = {-0.004784, -0.740485, 0, 1.0};
Point(104) = {-0.009665, -0.740108, 0, 1.0};
Point(105) = {-0.014711, -0.739764, 0, 1.0};
Point(106) = {-0.019865, -0.739459, 0, 1.0};
Point(107) = {-0.025068, -0.739201, 0, 1.0};
Point(108) = {-0.030260, -0.738999, 0, 1.0};
Point(109) = {-0.035411, -0.738893, 0, 1.0};
Point(110) = {-0.040517, -0.738860, 0, 1.0};
Point(111) = {-0.045531, -0.738837, 0, 1.0};
Point(112) = {-0.050369, -0.738792, 0, 1.0};
Point(113) = {-0.054957, -0.738712, 0, 1.0};
Point(114) = {-0.059216, -0.738588, 0, 1.0};
Point(115) = {-0.063077, -0.738419, 0, 1.0};
Point(116) = {-0.066474, -0.738210, 0, 1.0};
Point(117) = {-0.069342, -0.737969, 0, 1.0};
Point(118) = {-0.071619, -0.737714, 0, 1.0};
Point(119) = {-0.073259, -0.737486, 0, 1.0};
Point(120) = {-0.074243, -0.737326, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html