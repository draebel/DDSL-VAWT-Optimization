SetFactory("OpenCASCADE");

Point(1) = {0.074704, 0.730892, 0, 1.0};
Point(2) = {0.074222, 0.731008, 0, 1.0};
Point(3) = {0.072839, 0.731382, 0, 1.0};
Point(4) = {0.070664, 0.731997, 0, 1.0};
Point(5) = {0.067766, 0.732775, 0, 1.0};
Point(6) = {0.064150, 0.733651, 0, 1.0};
Point(7) = {0.059822, 0.734622, 0, 1.0};
Point(8) = {0.054836, 0.735688, 0, 1.0};
Point(9) = {0.049253, 0.736838, 0, 1.0};
Point(10) = {0.043141, 0.738057, 0, 1.0};
Point(11) = {0.036574, 0.739332, 0, 1.0};
Point(12) = {0.029636, 0.740645, 0, 1.0};
Point(13) = {0.022421, 0.741973, 0, 1.0};
Point(14) = {0.015013, 0.743271, 0, 1.0};
Point(15) = {0.007483, 0.744511, 0, 1.0};
Point(16) = {-0.000093, 0.745673, 0, 1.0};
Point(17) = {-0.007636, 0.746733, 0, 1.0};
Point(18) = {-0.015069, 0.747670, 0, 1.0};
Point(19) = {-0.022322, 0.748469, 0, 1.0};
Point(20) = {-0.029321, 0.749111, 0, 1.0};
Point(21) = {-0.035999, 0.749588, 0, 1.0};
Point(22) = {-0.042296, 0.749886, 0, 1.0};
Point(23) = {-0.048157, 0.750000, 0, 1.0};
Point(24) = {-0.053531, 0.749933, 0, 1.0};
Point(25) = {-0.058372, 0.749688, 0, 1.0};
Point(26) = {-0.062639, 0.749271, 0, 1.0};
Point(27) = {-0.066303, 0.748698, 0, 1.0};
Point(28) = {-0.069336, 0.747989, 0, 1.0};
Point(29) = {-0.071718, 0.747172, 0, 1.0};
Point(30) = {-0.073423, 0.746285, 0, 1.0};
Point(31) = {-0.074443, 0.745357, 0, 1.0};
Point(32) = {-0.074677, 0.744502, 0, 1.0};
Point(33) = {-0.074080, 0.743635, 0, 1.0};
Point(34) = {-0.072725, 0.742670, 0, 1.0};
Point(35) = {-0.070648, 0.741712, 0, 1.0};
Point(36) = {-0.067852, 0.740794, 0, 1.0};
Point(37) = {-0.064330, 0.739939, 0, 1.0};
Point(38) = {-0.060098, 0.739133, 0, 1.0};
Point(39) = {-0.055196, 0.738374, 0, 1.0};
Point(40) = {-0.049668, 0.737658, 0, 1.0};
Point(41) = {-0.043580, 0.736976, 0, 1.0};
Point(42) = {-0.037002, 0.736329, 0, 1.0};
Point(43) = {-0.030010, 0.735722, 0, 1.0};
Point(44) = {-0.022686, 0.735157, 0, 1.0};
Point(45) = {-0.015115, 0.734641, 0, 1.0};
Point(46) = {-0.007381, 0.734183, 0, 1.0};
Point(47) = {0.000427, 0.733796, 0, 1.0};
Point(48) = {0.008217, 0.733493, 0, 1.0};
Point(49) = {0.015946, 0.733335, 0, 1.0};
Point(50) = {0.023608, 0.733285, 0, 1.0};
Point(51) = {0.031130, 0.733249, 0, 1.0};
Point(52) = {0.038391, 0.733183, 0, 1.0};
Point(53) = {0.045274, 0.733062, 0, 1.0};
Point(54) = {0.051666, 0.732876, 0, 1.0};
Point(55) = {0.057459, 0.732623, 0, 1.0};
Point(56) = {0.062555, 0.732309, 0, 1.0};
Point(57) = {0.066859, 0.731948, 0, 1.0};
Point(58) = {0.070276, 0.731565, 0, 1.0};
Point(59) = {0.072737, 0.731223, 0, 1.0};
Point(60) = {0.074214, 0.730983, 0, 1.0};
Point(61) = {-0.074704, -0.730892, 0, 1.0};
Point(62) = {-0.074222, -0.731008, 0, 1.0};
Point(63) = {-0.072839, -0.731382, 0, 1.0};
Point(64) = {-0.070664, -0.731997, 0, 1.0};
Point(65) = {-0.067766, -0.732775, 0, 1.0};
Point(66) = {-0.064150, -0.733651, 0, 1.0};
Point(67) = {-0.059822, -0.734622, 0, 1.0};
Point(68) = {-0.054836, -0.735688, 0, 1.0};
Point(69) = {-0.049253, -0.736838, 0, 1.0};
Point(70) = {-0.043141, -0.738057, 0, 1.0};
Point(71) = {-0.036574, -0.739332, 0, 1.0};
Point(72) = {-0.029636, -0.740645, 0, 1.0};
Point(73) = {-0.022421, -0.741973, 0, 1.0};
Point(74) = {-0.015013, -0.743271, 0, 1.0};
Point(75) = {-0.007483, -0.744511, 0, 1.0};
Point(76) = {0.000093, -0.745673, 0, 1.0};
Point(77) = {0.007636, -0.746733, 0, 1.0};
Point(78) = {0.015069, -0.747670, 0, 1.0};
Point(79) = {0.022322, -0.748469, 0, 1.0};
Point(80) = {0.029321, -0.749111, 0, 1.0};
Point(81) = {0.035999, -0.749588, 0, 1.0};
Point(82) = {0.042296, -0.749886, 0, 1.0};
Point(83) = {0.048157, -0.750000, 0, 1.0};
Point(84) = {0.053531, -0.749933, 0, 1.0};
Point(85) = {0.058372, -0.749688, 0, 1.0};
Point(86) = {0.062639, -0.749271, 0, 1.0};
Point(87) = {0.066303, -0.748698, 0, 1.0};
Point(88) = {0.069336, -0.747989, 0, 1.0};
Point(89) = {0.071718, -0.747172, 0, 1.0};
Point(90) = {0.073423, -0.746285, 0, 1.0};
Point(91) = {0.074443, -0.745357, 0, 1.0};
Point(92) = {0.074677, -0.744502, 0, 1.0};
Point(93) = {0.074080, -0.743635, 0, 1.0};
Point(94) = {0.072725, -0.742670, 0, 1.0};
Point(95) = {0.070648, -0.741712, 0, 1.0};
Point(96) = {0.067852, -0.740794, 0, 1.0};
Point(97) = {0.064330, -0.739939, 0, 1.0};
Point(98) = {0.060098, -0.739133, 0, 1.0};
Point(99) = {0.055196, -0.738374, 0, 1.0};
Point(100) = {0.049668, -0.737658, 0, 1.0};
Point(101) = {0.043580, -0.736976, 0, 1.0};
Point(102) = {0.037002, -0.736329, 0, 1.0};
Point(103) = {0.030010, -0.735722, 0, 1.0};
Point(104) = {0.022686, -0.735157, 0, 1.0};
Point(105) = {0.015115, -0.734641, 0, 1.0};
Point(106) = {0.007381, -0.734183, 0, 1.0};
Point(107) = {-0.000427, -0.733796, 0, 1.0};
Point(108) = {-0.008217, -0.733493, 0, 1.0};
Point(109) = {-0.015946, -0.733335, 0, 1.0};
Point(110) = {-0.023608, -0.733285, 0, 1.0};
Point(111) = {-0.031130, -0.733249, 0, 1.0};
Point(112) = {-0.038391, -0.733183, 0, 1.0};
Point(113) = {-0.045274, -0.733062, 0, 1.0};
Point(114) = {-0.051666, -0.732876, 0, 1.0};
Point(115) = {-0.057459, -0.732623, 0, 1.0};
Point(116) = {-0.062555, -0.732309, 0, 1.0};
Point(117) = {-0.066859, -0.731948, 0, 1.0};
Point(118) = {-0.070276, -0.731565, 0, 1.0};
Point(119) = {-0.072737, -0.731223, 0, 1.0};
Point(120) = {-0.074214, -0.730983, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html