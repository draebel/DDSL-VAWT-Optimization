SetFactory("OpenCASCADE");

Point(1) = {0.112252, 0.734276, 0, 1.0};
Point(2) = {0.111762, 0.734330, 0, 1.0};
Point(3) = {0.110314, 0.734507, 0, 1.0};
Point(4) = {0.107955, 0.734834, 0, 1.0};
Point(5) = {0.104742, 0.735325, 0, 1.0};
Point(6) = {0.100739, 0.735981, 0, 1.0};
Point(7) = {0.096018, 0.736797, 0, 1.0};
Point(8) = {0.090658, 0.737758, 0, 1.0};
Point(9) = {0.084740, 0.738841, 0, 1.0};
Point(10) = {0.078346, 0.740022, 0, 1.0};
Point(11) = {0.071561, 0.741271, 0, 1.0};
Point(12) = {0.064474, 0.742558, 0, 1.0};
Point(13) = {0.057172, 0.743848, 0, 1.0};
Point(14) = {0.049745, 0.745100, 0, 1.0};
Point(15) = {0.042268, 0.746267, 0, 1.0};
Point(16) = {0.034808, 0.747313, 0, 1.0};
Point(17) = {0.027427, 0.748209, 0, 1.0};
Point(18) = {0.020184, 0.748935, 0, 1.0};
Point(19) = {0.013140, 0.749479, 0, 1.0};
Point(20) = {0.006352, 0.749835, 0, 1.0};
Point(21) = {-0.000121, 0.750000, 0, 1.0};
Point(22) = {-0.006223, 0.749978, 0, 1.0};
Point(23) = {-0.011900, 0.749774, 0, 1.0};
Point(24) = {-0.017104, 0.749397, 0, 1.0};
Point(25) = {-0.021790, 0.748861, 0, 1.0};
Point(26) = {-0.025917, 0.748181, 0, 1.0};
Point(27) = {-0.029450, 0.747375, 0, 1.0};
Point(28) = {-0.032366, 0.746469, 0, 1.0};
Point(29) = {-0.034642, 0.745492, 0, 1.0};
Point(30) = {-0.036271, 0.744488, 0, 1.0};
Point(31) = {-0.037172, 0.743612, 0, 1.0};
Point(32) = {-0.037347, 0.743339, 0, 1.0};
Point(33) = {-0.037459, 0.743084, 0, 1.0};
Point(34) = {-0.037497, 0.742928, 0, 1.0};
Point(35) = {-0.037495, 0.742789, 0, 1.0};
Point(36) = {-0.037445, 0.742656, 0, 1.0};
Point(37) = {-0.037348, 0.742516, 0, 1.0};
Point(38) = {-0.037136, 0.742295, 0, 1.0};
Point(39) = {-0.036852, 0.742064, 0, 1.0};
Point(40) = {-0.035225, 0.741205, 0, 1.0};
Point(41) = {-0.032945, 0.740417, 0, 1.0};
Point(42) = {-0.029937, 0.739664, 0, 1.0};
Point(43) = {-0.026223, 0.738971, 0, 1.0};
Point(44) = {-0.021826, 0.738360, 0, 1.0};
Point(45) = {-0.016763, 0.737832, 0, 1.0};
Point(46) = {-0.011074, 0.737372, 0, 1.0};
Point(47) = {-0.004822, 0.736969, 0, 1.0};
Point(48) = {0.001925, 0.736613, 0, 1.0};
Point(49) = {0.009089, 0.736301, 0, 1.0};
Point(50) = {0.016589, 0.736029, 0, 1.0};
Point(51) = {0.024343, 0.735796, 0, 1.0};
Point(52) = {0.032264, 0.735595, 0, 1.0};
Point(53) = {0.040261, 0.735423, 0, 1.0};
Point(54) = {0.048243, 0.735274, 0, 1.0};
Point(55) = {0.056118, 0.735148, 0, 1.0};
Point(56) = {0.063795, 0.735041, 0, 1.0};
Point(57) = {0.071190, 0.734949, 0, 1.0};
Point(58) = {0.078215, 0.734863, 0, 1.0};
Point(59) = {0.084784, 0.734779, 0, 1.0};
Point(60) = {0.090812, 0.734692, 0, 1.0};
Point(61) = {0.096221, 0.734602, 0, 1.0};
Point(62) = {0.100939, 0.734513, 0, 1.0};
Point(63) = {0.104900, 0.734428, 0, 1.0};
Point(64) = {0.108050, 0.734356, 0, 1.0};
Point(65) = {0.110347, 0.734310, 0, 1.0};
Point(66) = {0.111765, 0.734286, 0, 1.0};
Point(67) = {-0.112252, -0.734276, 0, 1.0};
Point(68) = {-0.111762, -0.734330, 0, 1.0};
Point(69) = {-0.110314, -0.734507, 0, 1.0};
Point(70) = {-0.107955, -0.734834, 0, 1.0};
Point(71) = {-0.104742, -0.735325, 0, 1.0};
Point(72) = {-0.100739, -0.735981, 0, 1.0};
Point(73) = {-0.096018, -0.736797, 0, 1.0};
Point(74) = {-0.090658, -0.737758, 0, 1.0};
Point(75) = {-0.084740, -0.738841, 0, 1.0};
Point(76) = {-0.078346, -0.740022, 0, 1.0};
Point(77) = {-0.071561, -0.741271, 0, 1.0};
Point(78) = {-0.064474, -0.742558, 0, 1.0};
Point(79) = {-0.057172, -0.743848, 0, 1.0};
Point(80) = {-0.049745, -0.745100, 0, 1.0};
Point(81) = {-0.042268, -0.746267, 0, 1.0};
Point(82) = {-0.034808, -0.747313, 0, 1.0};
Point(83) = {-0.027427, -0.748209, 0, 1.0};
Point(84) = {-0.020184, -0.748935, 0, 1.0};
Point(85) = {-0.013140, -0.749479, 0, 1.0};
Point(86) = {-0.006352, -0.749835, 0, 1.0};
Point(87) = {0.000121, -0.750000, 0, 1.0};
Point(88) = {0.006223, -0.749978, 0, 1.0};
Point(89) = {0.011900, -0.749774, 0, 1.0};
Point(90) = {0.017104, -0.749397, 0, 1.0};
Point(91) = {0.021790, -0.748861, 0, 1.0};
Point(92) = {0.025917, -0.748181, 0, 1.0};
Point(93) = {0.029450, -0.747375, 0, 1.0};
Point(94) = {0.032366, -0.746469, 0, 1.0};
Point(95) = {0.034642, -0.745492, 0, 1.0};
Point(96) = {0.036271, -0.744488, 0, 1.0};
Point(97) = {0.037172, -0.743612, 0, 1.0};
Point(98) = {0.037347, -0.743339, 0, 1.0};
Point(99) = {0.037459, -0.743084, 0, 1.0};
Point(100) = {0.037497, -0.742928, 0, 1.0};
Point(101) = {0.037495, -0.742789, 0, 1.0};
Point(102) = {0.037445, -0.742656, 0, 1.0};
Point(103) = {0.037348, -0.742516, 0, 1.0};
Point(104) = {0.037136, -0.742295, 0, 1.0};
Point(105) = {0.036852, -0.742064, 0, 1.0};
Point(106) = {0.035225, -0.741205, 0, 1.0};
Point(107) = {0.032945, -0.740417, 0, 1.0};
Point(108) = {0.029937, -0.739664, 0, 1.0};
Point(109) = {0.026223, -0.738971, 0, 1.0};
Point(110) = {0.021826, -0.738360, 0, 1.0};
Point(111) = {0.016763, -0.737832, 0, 1.0};
Point(112) = {0.011074, -0.737372, 0, 1.0};
Point(113) = {0.004822, -0.736969, 0, 1.0};
Point(114) = {-0.001925, -0.736613, 0, 1.0};
Point(115) = {-0.009089, -0.736301, 0, 1.0};
Point(116) = {-0.016589, -0.736029, 0, 1.0};
Point(117) = {-0.024343, -0.735796, 0, 1.0};
Point(118) = {-0.032264, -0.735595, 0, 1.0};
Point(119) = {-0.040261, -0.735423, 0, 1.0};
Point(120) = {-0.048243, -0.735274, 0, 1.0};
Point(121) = {-0.056118, -0.735148, 0, 1.0};
Point(122) = {-0.063795, -0.735041, 0, 1.0};
Point(123) = {-0.071190, -0.734949, 0, 1.0};
Point(124) = {-0.078215, -0.734863, 0, 1.0};
Point(125) = {-0.084784, -0.734779, 0, 1.0};
Point(126) = {-0.090812, -0.734692, 0, 1.0};
Point(127) = {-0.096221, -0.734602, 0, 1.0};
Point(128) = {-0.100939, -0.734513, 0, 1.0};
Point(129) = {-0.104900, -0.734428, 0, 1.0};
Point(130) = {-0.108050, -0.734356, 0, 1.0};
Point(131) = {-0.110347, -0.734310, 0, 1.0};
Point(132) = {-0.111765, -0.734286, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:48};
Spline(3) = {48:66};
Spline(4) = {66,1};

// Lines: second blade (splines 5-8)
Spline(5) = {67:86};
Spline(6) = {86:114};
Spline(7) = {114:132};
Spline(8) = {132,67};

// Outer domain (points 20001-4 and lines)
Point(133) = {-13.50000000, -15.00000000, 0, 1.0};
Point(134) = {-13.50000000, 15.00000000, 0, 1.0};
Point(135) = {13.50000000, 15.00000000, 0, 1.0};
Point(136) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {133, 134};
Line(12) = {134, 135};
Line(13) = {135, 136};
Line(14) = {133, 136};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html