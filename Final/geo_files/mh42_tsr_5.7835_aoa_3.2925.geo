SetFactory("OpenCASCADE");

Point(1) = {0.074874, 0.734276, 0, 1.0};
Point(2) = {0.074384, 0.734330, 0, 1.0};
Point(3) = {0.072935, 0.734506, 0, 1.0};
Point(4) = {0.070577, 0.734834, 0, 1.0};
Point(5) = {0.067364, 0.735325, 0, 1.0};
Point(6) = {0.063360, 0.735981, 0, 1.0};
Point(7) = {0.058639, 0.736797, 0, 1.0};
Point(8) = {0.053279, 0.737758, 0, 1.0};
Point(9) = {0.047361, 0.738841, 0, 1.0};
Point(10) = {0.040967, 0.740022, 0, 1.0};
Point(11) = {0.034183, 0.741271, 0, 1.0};
Point(12) = {0.027095, 0.742558, 0, 1.0};
Point(13) = {0.019793, 0.743848, 0, 1.0};
Point(14) = {0.012366, 0.745100, 0, 1.0};
Point(15) = {0.004889, 0.746267, 0, 1.0};
Point(16) = {-0.002571, 0.747313, 0, 1.0};
Point(17) = {-0.009952, 0.748209, 0, 1.0};
Point(18) = {-0.017195, 0.748935, 0, 1.0};
Point(19) = {-0.024240, 0.749479, 0, 1.0};
Point(20) = {-0.031027, 0.749835, 0, 1.0};
Point(21) = {-0.037500, 0.750000, 0, 1.0};
Point(22) = {-0.043602, 0.749978, 0, 1.0};
Point(23) = {-0.049279, 0.749774, 0, 1.0};
Point(24) = {-0.054484, 0.749397, 0, 1.0};
Point(25) = {-0.059169, 0.748861, 0, 1.0};
Point(26) = {-0.063296, 0.748181, 0, 1.0};
Point(27) = {-0.066830, 0.747375, 0, 1.0};
Point(28) = {-0.069745, 0.746469, 0, 1.0};
Point(29) = {-0.072021, 0.745492, 0, 1.0};
Point(30) = {-0.073651, 0.744487, 0, 1.0};
Point(31) = {-0.074552, 0.743612, 0, 1.0};
Point(32) = {-0.074726, 0.743339, 0, 1.0};
Point(33) = {-0.074839, 0.743084, 0, 1.0};
Point(34) = {-0.074876, 0.742928, 0, 1.0};
Point(35) = {-0.074875, 0.742789, 0, 1.0};
Point(36) = {-0.074824, 0.742656, 0, 1.0};
Point(37) = {-0.074727, 0.742516, 0, 1.0};
Point(38) = {-0.074516, 0.742295, 0, 1.0};
Point(39) = {-0.074231, 0.742064, 0, 1.0};
Point(40) = {-0.072604, 0.741205, 0, 1.0};
Point(41) = {-0.070325, 0.740417, 0, 1.0};
Point(42) = {-0.067316, 0.739664, 0, 1.0};
Point(43) = {-0.063603, 0.738970, 0, 1.0};
Point(44) = {-0.059206, 0.738360, 0, 1.0};
Point(45) = {-0.054142, 0.737832, 0, 1.0};
Point(46) = {-0.048454, 0.737372, 0, 1.0};
Point(47) = {-0.042201, 0.736969, 0, 1.0};
Point(48) = {-0.035454, 0.736613, 0, 1.0};
Point(49) = {-0.028290, 0.736301, 0, 1.0};
Point(50) = {-0.020790, 0.736029, 0, 1.0};
Point(51) = {-0.013036, 0.735796, 0, 1.0};
Point(52) = {-0.005115, 0.735595, 0, 1.0};
Point(53) = {0.002882, 0.735423, 0, 1.0};
Point(54) = {0.010865, 0.735274, 0, 1.0};
Point(55) = {0.018739, 0.735148, 0, 1.0};
Point(56) = {0.026417, 0.735041, 0, 1.0};
Point(57) = {0.033811, 0.734949, 0, 1.0};
Point(58) = {0.040837, 0.734863, 0, 1.0};
Point(59) = {0.047405, 0.734779, 0, 1.0};
Point(60) = {0.053433, 0.734692, 0, 1.0};
Point(61) = {0.058842, 0.734602, 0, 1.0};
Point(62) = {0.063560, 0.734513, 0, 1.0};
Point(63) = {0.067522, 0.734428, 0, 1.0};
Point(64) = {0.070672, 0.734356, 0, 1.0};
Point(65) = {0.072969, 0.734310, 0, 1.0};
Point(66) = {0.074387, 0.734285, 0, 1.0};
Point(67) = {-0.074874, -0.734276, 0, 1.0};
Point(68) = {-0.074384, -0.734330, 0, 1.0};
Point(69) = {-0.072935, -0.734506, 0, 1.0};
Point(70) = {-0.070577, -0.734834, 0, 1.0};
Point(71) = {-0.067364, -0.735325, 0, 1.0};
Point(72) = {-0.063360, -0.735981, 0, 1.0};
Point(73) = {-0.058639, -0.736797, 0, 1.0};
Point(74) = {-0.053279, -0.737758, 0, 1.0};
Point(75) = {-0.047361, -0.738841, 0, 1.0};
Point(76) = {-0.040967, -0.740022, 0, 1.0};
Point(77) = {-0.034183, -0.741271, 0, 1.0};
Point(78) = {-0.027095, -0.742558, 0, 1.0};
Point(79) = {-0.019793, -0.743848, 0, 1.0};
Point(80) = {-0.012366, -0.745100, 0, 1.0};
Point(81) = {-0.004889, -0.746267, 0, 1.0};
Point(82) = {0.002571, -0.747313, 0, 1.0};
Point(83) = {0.009952, -0.748209, 0, 1.0};
Point(84) = {0.017195, -0.748935, 0, 1.0};
Point(85) = {0.024240, -0.749479, 0, 1.0};
Point(86) = {0.031027, -0.749835, 0, 1.0};
Point(87) = {0.037500, -0.750000, 0, 1.0};
Point(88) = {0.043602, -0.749978, 0, 1.0};
Point(89) = {0.049279, -0.749774, 0, 1.0};
Point(90) = {0.054484, -0.749397, 0, 1.0};
Point(91) = {0.059169, -0.748861, 0, 1.0};
Point(92) = {0.063296, -0.748181, 0, 1.0};
Point(93) = {0.066830, -0.747375, 0, 1.0};
Point(94) = {0.069745, -0.746469, 0, 1.0};
Point(95) = {0.072021, -0.745492, 0, 1.0};
Point(96) = {0.073651, -0.744487, 0, 1.0};
Point(97) = {0.074552, -0.743612, 0, 1.0};
Point(98) = {0.074726, -0.743339, 0, 1.0};
Point(99) = {0.074839, -0.743084, 0, 1.0};
Point(100) = {0.074876, -0.742928, 0, 1.0};
Point(101) = {0.074875, -0.742789, 0, 1.0};
Point(102) = {0.074824, -0.742656, 0, 1.0};
Point(103) = {0.074727, -0.742516, 0, 1.0};
Point(104) = {0.074516, -0.742295, 0, 1.0};
Point(105) = {0.074231, -0.742064, 0, 1.0};
Point(106) = {0.072604, -0.741205, 0, 1.0};
Point(107) = {0.070325, -0.740417, 0, 1.0};
Point(108) = {0.067316, -0.739664, 0, 1.0};
Point(109) = {0.063603, -0.738970, 0, 1.0};
Point(110) = {0.059206, -0.738360, 0, 1.0};
Point(111) = {0.054142, -0.737832, 0, 1.0};
Point(112) = {0.048454, -0.737372, 0, 1.0};
Point(113) = {0.042201, -0.736969, 0, 1.0};
Point(114) = {0.035454, -0.736613, 0, 1.0};
Point(115) = {0.028290, -0.736301, 0, 1.0};
Point(116) = {0.020790, -0.736029, 0, 1.0};
Point(117) = {0.013036, -0.735796, 0, 1.0};
Point(118) = {0.005115, -0.735595, 0, 1.0};
Point(119) = {-0.002882, -0.735423, 0, 1.0};
Point(120) = {-0.010865, -0.735274, 0, 1.0};
Point(121) = {-0.018739, -0.735148, 0, 1.0};
Point(122) = {-0.026417, -0.735041, 0, 1.0};
Point(123) = {-0.033811, -0.734949, 0, 1.0};
Point(124) = {-0.040837, -0.734863, 0, 1.0};
Point(125) = {-0.047405, -0.734779, 0, 1.0};
Point(126) = {-0.053433, -0.734692, 0, 1.0};
Point(127) = {-0.058842, -0.734602, 0, 1.0};
Point(128) = {-0.063560, -0.734513, 0, 1.0};
Point(129) = {-0.067522, -0.734428, 0, 1.0};
Point(130) = {-0.070672, -0.734356, 0, 1.0};
Point(131) = {-0.072969, -0.734310, 0, 1.0};
Point(132) = {-0.074387, -0.734285, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:48};
Spline(3) = {48:66};
Spline(4) = {66,1};

// Lines: second blade (splines 5-8)
Spline(5) = {67:86};
Spline(6) = {86:114};
Spline(7) = {114:132};
Spline(8) = {132,67};

// Outer domain (points 20001-4 and lines)
Point(133) = {-13.50000000, -15.00000000, 0, 1.0};
Point(134) = {-13.50000000, 15.00000000, 0, 1.0};
Point(135) = {13.50000000, 15.00000000, 0, 1.0};
Point(136) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {133, 134};
Line(12) = {134, 135};
Line(13) = {135, 136};
Line(14) = {133, 136};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html