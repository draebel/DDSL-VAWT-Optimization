SetFactory("OpenCASCADE");

Point(1) = {0.075004, 0.737298, 0, 1.0};
Point(2) = {0.071653, 0.737875, 0, 1.0};
Point(3) = {0.063216, 0.739338, 0, 1.0};
Point(4) = {0.054780, 0.740809, 0, 1.0};
Point(5) = {0.045289, 0.742437, 0, 1.0};
Point(6) = {0.036853, 0.743833, 0, 1.0};
Point(7) = {0.028416, 0.745159, 0, 1.0};
Point(8) = {0.019979, 0.746387, 0, 1.0};
Point(9) = {0.011543, 0.747493, 0, 1.0};
Point(10) = {0.003104, 0.748441, 0, 1.0};
Point(11) = {-0.005333, 0.749199, 0, 1.0};
Point(12) = {-0.012718, 0.749674, 0, 1.0};
Point(13) = {-0.020101, 0.749946, 0, 1.0};
Point(14) = {-0.025377, 0.750000, 0, 1.0};
Point(15) = {-0.031708, 0.749891, 0, 1.0};
Point(16) = {-0.038039, 0.749564, 0, 1.0};
Point(17) = {-0.044370, 0.748975, 0, 1.0};
Point(18) = {-0.049647, 0.748233, 0, 1.0};
Point(19) = {-0.054924, 0.747198, 0, 1.0};
Point(20) = {-0.060204, 0.745785, 0, 1.0};
Point(21) = {-0.065484, 0.743859, 0, 1.0};
Point(22) = {-0.067596, 0.742892, 0, 1.0};
Point(23) = {-0.069710, 0.741763, 0, 1.0};
Point(24) = {-0.070766, 0.741119, 0, 1.0};
Point(25) = {-0.071824, 0.740397, 0, 1.0};
Point(26) = {-0.072881, 0.739553, 0, 1.0};
Point(27) = {-0.073410, 0.739059, 0, 1.0};
Point(28) = {-0.073938, 0.738488, 0, 1.0};
Point(29) = {-0.074469, 0.737780, 0, 1.0};
Point(30) = {-0.075000, 0.736311, 0, 1.0};
Point(31) = {-0.074475, 0.735405, 0, 1.0};
Point(32) = {-0.073947, 0.735161, 0, 1.0};
Point(33) = {-0.073421, 0.735025, 0, 1.0};
Point(34) = {-0.072894, 0.734941, 0, 1.0};
Point(35) = {-0.071839, 0.734852, 0, 1.0};
Point(36) = {-0.070783, 0.734812, 0, 1.0};
Point(37) = {-0.069729, 0.734798, 0, 1.0};
Point(38) = {-0.067618, 0.734805, 0, 1.0};
Point(39) = {-0.065509, 0.734830, 0, 1.0};
Point(40) = {-0.060234, 0.734901, 0, 1.0};
Point(41) = {-0.054957, 0.734958, 0, 1.0};
Point(42) = {-0.049683, 0.734997, 0, 1.0};
Point(43) = {-0.044408, 0.735029, 0, 1.0};
Point(44) = {-0.038078, 0.735065, 0, 1.0};
Point(45) = {-0.031748, 0.735105, 0, 1.0};
Point(46) = {-0.025417, 0.735148, 0, 1.0};
Point(47) = {-0.020141, 0.735184, 0, 1.0};
Point(48) = {-0.012757, 0.735234, 0, 1.0};
Point(49) = {-0.005371, 0.735284, 0, 1.0};
Point(50) = {0.003069, 0.735340, 0, 1.0};
Point(51) = {0.011510, 0.735396, 0, 1.0};
Point(52) = {0.019950, 0.735452, 0, 1.0};
Point(53) = {0.028390, 0.735508, 0, 1.0};
Point(54) = {0.036831, 0.735566, 0, 1.0};
Point(55) = {0.045271, 0.735622, 0, 1.0};
Point(56) = {0.054766, 0.735685, 0, 1.0};
Point(57) = {0.063206, 0.735743, 0, 1.0};
Point(58) = {0.071647, 0.735802, 0, 1.0};
Point(59) = {0.075000, 0.735826, 0, 1.0};
Point(60) = {-0.075004, -0.737298, 0, 1.0};
Point(61) = {-0.071653, -0.737875, 0, 1.0};
Point(62) = {-0.063216, -0.739338, 0, 1.0};
Point(63) = {-0.054780, -0.740809, 0, 1.0};
Point(64) = {-0.045289, -0.742437, 0, 1.0};
Point(65) = {-0.036853, -0.743833, 0, 1.0};
Point(66) = {-0.028416, -0.745159, 0, 1.0};
Point(67) = {-0.019979, -0.746387, 0, 1.0};
Point(68) = {-0.011543, -0.747493, 0, 1.0};
Point(69) = {-0.003104, -0.748441, 0, 1.0};
Point(70) = {0.005333, -0.749199, 0, 1.0};
Point(71) = {0.012718, -0.749674, 0, 1.0};
Point(72) = {0.020101, -0.749946, 0, 1.0};
Point(73) = {0.025377, -0.750000, 0, 1.0};
Point(74) = {0.031708, -0.749891, 0, 1.0};
Point(75) = {0.038039, -0.749564, 0, 1.0};
Point(76) = {0.044370, -0.748975, 0, 1.0};
Point(77) = {0.049647, -0.748233, 0, 1.0};
Point(78) = {0.054924, -0.747198, 0, 1.0};
Point(79) = {0.060204, -0.745785, 0, 1.0};
Point(80) = {0.065484, -0.743859, 0, 1.0};
Point(81) = {0.067596, -0.742892, 0, 1.0};
Point(82) = {0.069710, -0.741763, 0, 1.0};
Point(83) = {0.070766, -0.741119, 0, 1.0};
Point(84) = {0.071824, -0.740397, 0, 1.0};
Point(85) = {0.072881, -0.739553, 0, 1.0};
Point(86) = {0.073410, -0.739059, 0, 1.0};
Point(87) = {0.073938, -0.738488, 0, 1.0};
Point(88) = {0.074469, -0.737780, 0, 1.0};
Point(89) = {0.075000, -0.736311, 0, 1.0};
Point(90) = {0.074475, -0.735405, 0, 1.0};
Point(91) = {0.073947, -0.735161, 0, 1.0};
Point(92) = {0.073421, -0.735025, 0, 1.0};
Point(93) = {0.072894, -0.734941, 0, 1.0};
Point(94) = {0.071839, -0.734852, 0, 1.0};
Point(95) = {0.070783, -0.734812, 0, 1.0};
Point(96) = {0.069729, -0.734798, 0, 1.0};
Point(97) = {0.067618, -0.734805, 0, 1.0};
Point(98) = {0.065509, -0.734830, 0, 1.0};
Point(99) = {0.060234, -0.734901, 0, 1.0};
Point(100) = {0.054957, -0.734958, 0, 1.0};
Point(101) = {0.049683, -0.734997, 0, 1.0};
Point(102) = {0.044408, -0.735029, 0, 1.0};
Point(103) = {0.038078, -0.735065, 0, 1.0};
Point(104) = {0.031748, -0.735105, 0, 1.0};
Point(105) = {0.025417, -0.735148, 0, 1.0};
Point(106) = {0.020141, -0.735184, 0, 1.0};
Point(107) = {0.012757, -0.735234, 0, 1.0};
Point(108) = {0.005371, -0.735284, 0, 1.0};
Point(109) = {-0.003069, -0.735340, 0, 1.0};
Point(110) = {-0.011510, -0.735396, 0, 1.0};
Point(111) = {-0.019950, -0.735452, 0, 1.0};
Point(112) = {-0.028390, -0.735508, 0, 1.0};
Point(113) = {-0.036831, -0.735566, 0, 1.0};
Point(114) = {-0.045271, -0.735622, 0, 1.0};
Point(115) = {-0.054766, -0.735685, 0, 1.0};
Point(116) = {-0.063206, -0.735743, 0, 1.0};
Point(117) = {-0.071647, -0.735802, 0, 1.0};
Point(118) = {-0.075000, -0.735826, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:15};
Spline(2) = {15:44};
Spline(3) = {44:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:74};
Spline(6) = {74:103};
Spline(7) = {103:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {36.00000000, 15.00000000, 0, 1.0};
Point(122) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html