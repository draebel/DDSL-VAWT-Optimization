SetFactory("OpenCASCADE");

Point(1) = {0.074983, 0.732326, 0, 1.0};
Point(2) = {0.074421, 0.732425, 0, 1.0};
Point(3) = {0.072802, 0.732769, 0, 1.0};
Point(4) = {0.070275, 0.733390, 0, 1.0};
Point(5) = {0.066961, 0.734229, 0, 1.0};
Point(6) = {0.062908, 0.735204, 0, 1.0};
Point(7) = {0.058119, 0.736299, 0, 1.0};
Point(8) = {0.052655, 0.737547, 0, 1.0};
Point(9) = {0.046625, 0.738955, 0, 1.0};
Point(10) = {0.040148, 0.740506, 0, 1.0};
Point(11) = {0.033345, 0.742165, 0, 1.0};
Point(12) = {0.026349, 0.743877, 0, 1.0};
Point(13) = {0.019286, 0.745567, 0, 1.0};
Point(14) = {0.012277, 0.747104, 0, 1.0};
Point(15) = {0.005336, 0.748320, 0, 1.0};
Point(16) = {-0.001627, 0.749165, 0, 1.0};
Point(17) = {-0.008612, 0.749707, 0, 1.0};
Point(18) = {-0.015548, 0.749983, 0, 1.0};
Point(19) = {-0.022364, 0.750000, 0, 1.0};
Point(20) = {-0.029002, 0.749772, 0, 1.0};
Point(21) = {-0.035396, 0.749315, 0, 1.0};
Point(22) = {-0.041484, 0.748645, 0, 1.0};
Point(23) = {-0.047203, 0.747778, 0, 1.0};
Point(24) = {-0.052499, 0.746732, 0, 1.0};
Point(25) = {-0.057323, 0.745528, 0, 1.0};
Point(26) = {-0.061628, 0.744186, 0, 1.0};
Point(27) = {-0.065377, 0.742732, 0, 1.0};
Point(28) = {-0.068549, 0.741197, 0, 1.0};
Point(29) = {-0.071121, 0.739630, 0, 1.0};
Point(30) = {-0.073065, 0.738082, 0, 1.0};
Point(31) = {-0.074360, 0.736609, 0, 1.0};
Point(32) = {-0.074987, 0.735300, 0, 1.0};
Point(33) = {-0.074760, 0.734271, 0, 1.0};
Point(34) = {-0.073570, 0.733400, 0, 1.0};
Point(35) = {-0.071506, 0.732541, 0, 1.0};
Point(36) = {-0.068631, 0.731734, 0, 1.0};
Point(37) = {-0.064981, 0.730992, 0, 1.0};
Point(38) = {-0.060589, 0.730317, 0, 1.0};
Point(39) = {-0.055506, 0.729701, 0, 1.0};
Point(40) = {-0.049800, 0.729143, 0, 1.0};
Point(41) = {-0.043539, 0.728647, 0, 1.0};
Point(42) = {-0.036798, 0.728215, 0, 1.0};
Point(43) = {-0.029660, 0.727848, 0, 1.0};
Point(44) = {-0.022205, 0.727554, 0, 1.0};
Point(45) = {-0.014522, 0.727330, 0, 1.0};
Point(46) = {-0.006702, 0.727185, 0, 1.0};
Point(47) = {0.001164, 0.727119, 0, 1.0};
Point(48) = {0.008986, 0.727137, 0, 1.0};
Point(49) = {0.016666, 0.727241, 0, 1.0};
Point(50) = {0.024107, 0.727443, 0, 1.0};
Point(51) = {0.031214, 0.727764, 0, 1.0};
Point(52) = {0.037895, 0.728275, 0, 1.0};
Point(53) = {0.044198, 0.729082, 0, 1.0};
Point(54) = {0.050278, 0.730082, 0, 1.0};
Point(55) = {0.056090, 0.731011, 0, 1.0};
Point(56) = {0.061423, 0.731723, 0, 1.0};
Point(57) = {0.066083, 0.732179, 0, 1.0};
Point(58) = {0.069889, 0.732390, 0, 1.0};
Point(59) = {0.072697, 0.732419, 0, 1.0};
Point(60) = {0.074409, 0.732363, 0, 1.0};
Point(61) = {-0.074983, -0.732326, 0, 1.0};
Point(62) = {-0.074421, -0.732425, 0, 1.0};
Point(63) = {-0.072802, -0.732769, 0, 1.0};
Point(64) = {-0.070275, -0.733390, 0, 1.0};
Point(65) = {-0.066961, -0.734229, 0, 1.0};
Point(66) = {-0.062908, -0.735204, 0, 1.0};
Point(67) = {-0.058119, -0.736299, 0, 1.0};
Point(68) = {-0.052655, -0.737547, 0, 1.0};
Point(69) = {-0.046625, -0.738955, 0, 1.0};
Point(70) = {-0.040148, -0.740506, 0, 1.0};
Point(71) = {-0.033345, -0.742165, 0, 1.0};
Point(72) = {-0.026349, -0.743877, 0, 1.0};
Point(73) = {-0.019286, -0.745567, 0, 1.0};
Point(74) = {-0.012277, -0.747104, 0, 1.0};
Point(75) = {-0.005336, -0.748320, 0, 1.0};
Point(76) = {0.001627, -0.749165, 0, 1.0};
Point(77) = {0.008612, -0.749707, 0, 1.0};
Point(78) = {0.015548, -0.749983, 0, 1.0};
Point(79) = {0.022364, -0.750000, 0, 1.0};
Point(80) = {0.029002, -0.749772, 0, 1.0};
Point(81) = {0.035396, -0.749315, 0, 1.0};
Point(82) = {0.041484, -0.748645, 0, 1.0};
Point(83) = {0.047203, -0.747778, 0, 1.0};
Point(84) = {0.052499, -0.746732, 0, 1.0};
Point(85) = {0.057323, -0.745528, 0, 1.0};
Point(86) = {0.061628, -0.744186, 0, 1.0};
Point(87) = {0.065377, -0.742732, 0, 1.0};
Point(88) = {0.068549, -0.741197, 0, 1.0};
Point(89) = {0.071121, -0.739630, 0, 1.0};
Point(90) = {0.073065, -0.738082, 0, 1.0};
Point(91) = {0.074360, -0.736609, 0, 1.0};
Point(92) = {0.074987, -0.735300, 0, 1.0};
Point(93) = {0.074760, -0.734271, 0, 1.0};
Point(94) = {0.073570, -0.733400, 0, 1.0};
Point(95) = {0.071506, -0.732541, 0, 1.0};
Point(96) = {0.068631, -0.731734, 0, 1.0};
Point(97) = {0.064981, -0.730992, 0, 1.0};
Point(98) = {0.060589, -0.730317, 0, 1.0};
Point(99) = {0.055506, -0.729701, 0, 1.0};
Point(100) = {0.049800, -0.729143, 0, 1.0};
Point(101) = {0.043539, -0.728647, 0, 1.0};
Point(102) = {0.036798, -0.728215, 0, 1.0};
Point(103) = {0.029660, -0.727848, 0, 1.0};
Point(104) = {0.022205, -0.727554, 0, 1.0};
Point(105) = {0.014522, -0.727330, 0, 1.0};
Point(106) = {0.006702, -0.727185, 0, 1.0};
Point(107) = {-0.001164, -0.727119, 0, 1.0};
Point(108) = {-0.008986, -0.727137, 0, 1.0};
Point(109) = {-0.016666, -0.727241, 0, 1.0};
Point(110) = {-0.024107, -0.727443, 0, 1.0};
Point(111) = {-0.031214, -0.727764, 0, 1.0};
Point(112) = {-0.037895, -0.728275, 0, 1.0};
Point(113) = {-0.044198, -0.729082, 0, 1.0};
Point(114) = {-0.050278, -0.730082, 0, 1.0};
Point(115) = {-0.056090, -0.731011, 0, 1.0};
Point(116) = {-0.061423, -0.731723, 0, 1.0};
Point(117) = {-0.066083, -0.732179, 0, 1.0};
Point(118) = {-0.069889, -0.732390, 0, 1.0};
Point(119) = {-0.072697, -0.732419, 0, 1.0};
Point(120) = {-0.074409, -0.732363, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html