SetFactory("OpenCASCADE");

Point(1) = {0.074983, 0.738219, 0, 1.0};
Point(2) = {0.074608, 0.738285, 0, 1.0};
Point(3) = {0.073529, 0.738514, 0, 1.0};
Point(4) = {0.071845, 0.738928, 0, 1.0};
Point(5) = {0.069636, 0.739487, 0, 1.0};
Point(6) = {0.066934, 0.740137, 0, 1.0};
Point(7) = {0.063742, 0.740867, 0, 1.0};
Point(8) = {0.060100, 0.741699, 0, 1.0};
Point(9) = {0.056080, 0.742638, 0, 1.0};
Point(10) = {0.051762, 0.743671, 0, 1.0};
Point(11) = {0.047228, 0.744778, 0, 1.0};
Point(12) = {0.042564, 0.745918, 0, 1.0};
Point(13) = {0.037856, 0.747045, 0, 1.0};
Point(14) = {0.033184, 0.748070, 0, 1.0};
Point(15) = {0.028557, 0.748880, 0, 1.0};
Point(16) = {0.023916, 0.749443, 0, 1.0};
Point(17) = {0.019259, 0.749805, 0, 1.0};
Point(18) = {0.014636, 0.749989, 0, 1.0};
Point(19) = {0.010092, 0.750000, 0, 1.0};
Point(20) = {0.005668, 0.749848, 0, 1.0};
Point(21) = {0.001406, 0.749543, 0, 1.0};
Point(22) = {-0.002652, 0.749097, 0, 1.0};
Point(23) = {-0.006465, 0.748519, 0, 1.0};
Point(24) = {-0.009995, 0.747821, 0, 1.0};
Point(25) = {-0.013210, 0.747019, 0, 1.0};
Point(26) = {-0.016080, 0.746125, 0, 1.0};
Point(27) = {-0.018579, 0.745155, 0, 1.0};
Point(28) = {-0.020693, 0.744132, 0, 1.0};
Point(29) = {-0.022408, 0.743087, 0, 1.0};
Point(30) = {-0.023704, 0.742056, 0, 1.0};
Point(31) = {-0.024567, 0.741074, 0, 1.0};
Point(32) = {-0.024985, 0.740201, 0, 1.0};
Point(33) = {-0.024834, 0.739515, 0, 1.0};
Point(34) = {-0.024040, 0.738935, 0, 1.0};
Point(35) = {-0.022665, 0.738362, 0, 1.0};
Point(36) = {-0.020748, 0.737824, 0, 1.0};
Point(37) = {-0.018315, 0.737329, 0, 1.0};
Point(38) = {-0.015388, 0.736879, 0, 1.0};
Point(39) = {-0.012000, 0.736469, 0, 1.0};
Point(40) = {-0.008196, 0.736097, 0, 1.0};
Point(41) = {-0.004022, 0.735767, 0, 1.0};
Point(42) = {0.000471, 0.735478, 0, 1.0};
Point(43) = {0.005230, 0.735234, 0, 1.0};
Point(44) = {0.010199, 0.735038, 0, 1.0};
Point(45) = {0.015320, 0.734889, 0, 1.0};
Point(46) = {0.020533, 0.734792, 0, 1.0};
Point(47) = {0.025776, 0.734748, 0, 1.0};
Point(48) = {0.030990, 0.734760, 0, 1.0};
Point(49) = {0.036109, 0.734829, 0, 1.0};
Point(50) = {0.041070, 0.734964, 0, 1.0};
Point(51) = {0.045807, 0.735178, 0, 1.0};
Point(52) = {0.050260, 0.735518, 0, 1.0};
Point(53) = {0.054462, 0.736056, 0, 1.0};
Point(54) = {0.058515, 0.736723, 0, 1.0};
Point(55) = {0.062389, 0.737342, 0, 1.0};
Point(56) = {0.065944, 0.737817, 0, 1.0};
Point(57) = {0.069050, 0.738121, 0, 1.0};
Point(58) = {0.071587, 0.738261, 0, 1.0};
Point(59) = {0.073459, 0.738281, 0, 1.0};
Point(60) = {0.074601, 0.738243, 0, 1.0};
Point(61) = {-0.074983, -0.738219, 0, 1.0};
Point(62) = {-0.074608, -0.738285, 0, 1.0};
Point(63) = {-0.073529, -0.738514, 0, 1.0};
Point(64) = {-0.071845, -0.738928, 0, 1.0};
Point(65) = {-0.069636, -0.739487, 0, 1.0};
Point(66) = {-0.066934, -0.740137, 0, 1.0};
Point(67) = {-0.063742, -0.740867, 0, 1.0};
Point(68) = {-0.060100, -0.741699, 0, 1.0};
Point(69) = {-0.056080, -0.742638, 0, 1.0};
Point(70) = {-0.051762, -0.743671, 0, 1.0};
Point(71) = {-0.047228, -0.744778, 0, 1.0};
Point(72) = {-0.042564, -0.745918, 0, 1.0};
Point(73) = {-0.037856, -0.747045, 0, 1.0};
Point(74) = {-0.033184, -0.748070, 0, 1.0};
Point(75) = {-0.028557, -0.748880, 0, 1.0};
Point(76) = {-0.023916, -0.749443, 0, 1.0};
Point(77) = {-0.019259, -0.749805, 0, 1.0};
Point(78) = {-0.014636, -0.749989, 0, 1.0};
Point(79) = {-0.010092, -0.750000, 0, 1.0};
Point(80) = {-0.005668, -0.749848, 0, 1.0};
Point(81) = {-0.001406, -0.749543, 0, 1.0};
Point(82) = {0.002652, -0.749097, 0, 1.0};
Point(83) = {0.006465, -0.748519, 0, 1.0};
Point(84) = {0.009995, -0.747821, 0, 1.0};
Point(85) = {0.013210, -0.747019, 0, 1.0};
Point(86) = {0.016080, -0.746125, 0, 1.0};
Point(87) = {0.018579, -0.745155, 0, 1.0};
Point(88) = {0.020693, -0.744132, 0, 1.0};
Point(89) = {0.022408, -0.743087, 0, 1.0};
Point(90) = {0.023704, -0.742056, 0, 1.0};
Point(91) = {0.024567, -0.741074, 0, 1.0};
Point(92) = {0.024985, -0.740201, 0, 1.0};
Point(93) = {0.024834, -0.739515, 0, 1.0};
Point(94) = {0.024040, -0.738935, 0, 1.0};
Point(95) = {0.022665, -0.738362, 0, 1.0};
Point(96) = {0.020748, -0.737824, 0, 1.0};
Point(97) = {0.018315, -0.737329, 0, 1.0};
Point(98) = {0.015388, -0.736879, 0, 1.0};
Point(99) = {0.012000, -0.736469, 0, 1.0};
Point(100) = {0.008196, -0.736097, 0, 1.0};
Point(101) = {0.004022, -0.735767, 0, 1.0};
Point(102) = {-0.000471, -0.735478, 0, 1.0};
Point(103) = {-0.005230, -0.735234, 0, 1.0};
Point(104) = {-0.010199, -0.735038, 0, 1.0};
Point(105) = {-0.015320, -0.734889, 0, 1.0};
Point(106) = {-0.020533, -0.734792, 0, 1.0};
Point(107) = {-0.025776, -0.734748, 0, 1.0};
Point(108) = {-0.030990, -0.734760, 0, 1.0};
Point(109) = {-0.036109, -0.734829, 0, 1.0};
Point(110) = {-0.041070, -0.734964, 0, 1.0};
Point(111) = {-0.045807, -0.735178, 0, 1.0};
Point(112) = {-0.050260, -0.735518, 0, 1.0};
Point(113) = {-0.054462, -0.736056, 0, 1.0};
Point(114) = {-0.058515, -0.736723, 0, 1.0};
Point(115) = {-0.062389, -0.737342, 0, 1.0};
Point(116) = {-0.065944, -0.737817, 0, 1.0};
Point(117) = {-0.069050, -0.738121, 0, 1.0};
Point(118) = {-0.071587, -0.738261, 0, 1.0};
Point(119) = {-0.073459, -0.738281, 0, 1.0};
Point(120) = {-0.074601, -0.738243, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html