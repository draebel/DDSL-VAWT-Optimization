SetFactory("OpenCASCADE");

Point(1) = {0.112475, 0.732329, 0, 1.0};
Point(2) = {0.111912, 0.732427, 0, 1.0};
Point(3) = {0.110294, 0.732771, 0, 1.0};
Point(4) = {0.107767, 0.733392, 0, 1.0};
Point(5) = {0.104453, 0.734231, 0, 1.0};
Point(6) = {0.100401, 0.735206, 0, 1.0};
Point(7) = {0.095613, 0.736300, 0, 1.0};
Point(8) = {0.090149, 0.737548, 0, 1.0};
Point(9) = {0.084120, 0.738957, 0, 1.0};
Point(10) = {0.077643, 0.740507, 0, 1.0};
Point(11) = {0.070842, 0.742166, 0, 1.0};
Point(12) = {0.063846, 0.743878, 0, 1.0};
Point(13) = {0.056784, 0.745567, 0, 1.0};
Point(14) = {0.049776, 0.747105, 0, 1.0};
Point(15) = {0.042835, 0.748320, 0, 1.0};
Point(16) = {0.035873, 0.749165, 0, 1.0};
Point(17) = {0.028889, 0.749707, 0, 1.0};
Point(18) = {0.021954, 0.749983, 0, 1.0};
Point(19) = {0.015139, 0.750000, 0, 1.0};
Point(20) = {0.008502, 0.749772, 0, 1.0};
Point(21) = {0.002108, 0.749315, 0, 1.0};
Point(22) = {-0.003978, 0.748645, 0, 1.0};
Point(23) = {-0.009697, 0.747778, 0, 1.0};
Point(24) = {-0.014992, 0.746732, 0, 1.0};
Point(25) = {-0.019815, 0.745529, 0, 1.0};
Point(26) = {-0.024120, 0.744187, 0, 1.0};
Point(27) = {-0.027869, 0.742733, 0, 1.0};
Point(28) = {-0.031040, 0.741198, 0, 1.0};
Point(29) = {-0.033612, 0.739631, 0, 1.0};
Point(30) = {-0.035556, 0.738084, 0, 1.0};
Point(31) = {-0.036851, 0.736610, 0, 1.0};
Point(32) = {-0.037478, 0.735302, 0, 1.0};
Point(33) = {-0.037251, 0.734273, 0, 1.0};
Point(34) = {-0.036061, 0.733402, 0, 1.0};
Point(35) = {-0.033997, 0.732543, 0, 1.0};
Point(36) = {-0.031122, 0.731736, 0, 1.0};
Point(37) = {-0.027472, 0.730994, 0, 1.0};
Point(38) = {-0.023081, 0.730319, 0, 1.0};
Point(39) = {-0.017999, 0.729704, 0, 1.0};
Point(40) = {-0.012294, 0.729146, 0, 1.0};
Point(41) = {-0.006033, 0.728650, 0, 1.0};
Point(42) = {0.000707, 0.728217, 0, 1.0};
Point(43) = {0.007844, 0.727851, 0, 1.0};
Point(44) = {0.015298, 0.727556, 0, 1.0};
Point(45) = {0.022980, 0.727333, 0, 1.0};
Point(46) = {0.030800, 0.727188, 0, 1.0};
Point(47) = {0.038664, 0.727121, 0, 1.0};
Point(48) = {0.046485, 0.727140, 0, 1.0};
Point(49) = {0.054164, 0.727243, 0, 1.0};
Point(50) = {0.061605, 0.727446, 0, 1.0};
Point(51) = {0.068711, 0.727767, 0, 1.0};
Point(52) = {0.075391, 0.728278, 0, 1.0};
Point(53) = {0.081693, 0.729084, 0, 1.0};
Point(54) = {0.087772, 0.730085, 0, 1.0};
Point(55) = {0.093583, 0.731013, 0, 1.0};
Point(56) = {0.098916, 0.731725, 0, 1.0};
Point(57) = {0.103576, 0.732181, 0, 1.0};
Point(58) = {0.107381, 0.732392, 0, 1.0};
Point(59) = {0.110189, 0.732422, 0, 1.0};
Point(60) = {0.111901, 0.732365, 0, 1.0};
Point(61) = {-0.112475, -0.732329, 0, 1.0};
Point(62) = {-0.111912, -0.732427, 0, 1.0};
Point(63) = {-0.110294, -0.732771, 0, 1.0};
Point(64) = {-0.107767, -0.733392, 0, 1.0};
Point(65) = {-0.104453, -0.734231, 0, 1.0};
Point(66) = {-0.100401, -0.735206, 0, 1.0};
Point(67) = {-0.095613, -0.736300, 0, 1.0};
Point(68) = {-0.090149, -0.737548, 0, 1.0};
Point(69) = {-0.084120, -0.738957, 0, 1.0};
Point(70) = {-0.077643, -0.740507, 0, 1.0};
Point(71) = {-0.070842, -0.742166, 0, 1.0};
Point(72) = {-0.063846, -0.743878, 0, 1.0};
Point(73) = {-0.056784, -0.745567, 0, 1.0};
Point(74) = {-0.049776, -0.747105, 0, 1.0};
Point(75) = {-0.042835, -0.748320, 0, 1.0};
Point(76) = {-0.035873, -0.749165, 0, 1.0};
Point(77) = {-0.028889, -0.749707, 0, 1.0};
Point(78) = {-0.021954, -0.749983, 0, 1.0};
Point(79) = {-0.015139, -0.750000, 0, 1.0};
Point(80) = {-0.008502, -0.749772, 0, 1.0};
Point(81) = {-0.002108, -0.749315, 0, 1.0};
Point(82) = {0.003978, -0.748645, 0, 1.0};
Point(83) = {0.009697, -0.747778, 0, 1.0};
Point(84) = {0.014992, -0.746732, 0, 1.0};
Point(85) = {0.019815, -0.745529, 0, 1.0};
Point(86) = {0.024120, -0.744187, 0, 1.0};
Point(87) = {0.027869, -0.742733, 0, 1.0};
Point(88) = {0.031040, -0.741198, 0, 1.0};
Point(89) = {0.033612, -0.739631, 0, 1.0};
Point(90) = {0.035556, -0.738084, 0, 1.0};
Point(91) = {0.036851, -0.736610, 0, 1.0};
Point(92) = {0.037478, -0.735302, 0, 1.0};
Point(93) = {0.037251, -0.734273, 0, 1.0};
Point(94) = {0.036061, -0.733402, 0, 1.0};
Point(95) = {0.033997, -0.732543, 0, 1.0};
Point(96) = {0.031122, -0.731736, 0, 1.0};
Point(97) = {0.027472, -0.730994, 0, 1.0};
Point(98) = {0.023081, -0.730319, 0, 1.0};
Point(99) = {0.017999, -0.729704, 0, 1.0};
Point(100) = {0.012294, -0.729146, 0, 1.0};
Point(101) = {0.006033, -0.728650, 0, 1.0};
Point(102) = {-0.000707, -0.728217, 0, 1.0};
Point(103) = {-0.007844, -0.727851, 0, 1.0};
Point(104) = {-0.015298, -0.727556, 0, 1.0};
Point(105) = {-0.022980, -0.727333, 0, 1.0};
Point(106) = {-0.030800, -0.727188, 0, 1.0};
Point(107) = {-0.038664, -0.727121, 0, 1.0};
Point(108) = {-0.046485, -0.727140, 0, 1.0};
Point(109) = {-0.054164, -0.727243, 0, 1.0};
Point(110) = {-0.061605, -0.727446, 0, 1.0};
Point(111) = {-0.068711, -0.727767, 0, 1.0};
Point(112) = {-0.075391, -0.728278, 0, 1.0};
Point(113) = {-0.081693, -0.729084, 0, 1.0};
Point(114) = {-0.087772, -0.730085, 0, 1.0};
Point(115) = {-0.093583, -0.731013, 0, 1.0};
Point(116) = {-0.098916, -0.731725, 0, 1.0};
Point(117) = {-0.103576, -0.732181, 0, 1.0};
Point(118) = {-0.107381, -0.732392, 0, 1.0};
Point(119) = {-0.110189, -0.732422, 0, 1.0};
Point(120) = {-0.111901, -0.732365, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html