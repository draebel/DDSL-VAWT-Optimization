SetFactory("OpenCASCADE");

Point(1) = {0.074879, 0.745049, 0, 1.0};
Point(2) = {0.074378, 0.745059, 0, 1.0};
Point(3) = {0.073877, 0.745068, 0, 1.0};
Point(4) = {0.072875, 0.745086, 0, 1.0};
Point(5) = {0.071873, 0.745110, 0, 1.0};
Point(6) = {0.070360, 0.745360, 0, 1.0};
Point(7) = {0.068341, 0.745707, 0, 1.0};
Point(8) = {0.065819, 0.746130, 0, 1.0};
Point(9) = {0.062791, 0.746668, 0, 1.0};
Point(10) = {0.059260, 0.747248, 0, 1.0};
Point(11) = {0.055724, 0.747946, 0, 1.0};
Point(12) = {0.051686, 0.748682, 0, 1.0};
Point(13) = {0.047656, 0.749220, 0, 1.0};
Point(14) = {0.043636, 0.749563, 0, 1.0};
Point(15) = {0.039624, 0.749736, 0, 1.0};
Point(16) = {0.034611, 0.749905, 0, 1.0};
Point(17) = {0.029603, 0.749960, 0, 1.0};
Point(18) = {0.024595, 0.750000, 0, 1.0};
Point(19) = {0.019593, 0.749947, 0, 1.0};
Point(20) = {0.014593, 0.749822, 0, 1.0};
Point(21) = {0.009597, 0.749620, 0, 1.0};
Point(22) = {0.004605, 0.749330, 0, 1.0};
Point(23) = {-0.000384, 0.748985, 0, 1.0};
Point(24) = {-0.005367, 0.748489, 0, 1.0};
Point(25) = {-0.010342, 0.747842, 0, 1.0};
Point(26) = {-0.015305, 0.746934, 0, 1.0};
Point(27) = {-0.017773, 0.746188, 0, 1.0};
Point(28) = {-0.020228, 0.745154, 0, 1.0};
Point(29) = {-0.022662, 0.743679, 0, 1.0};
Point(30) = {-0.023863, 0.742592, 0, 1.0};
Point(31) = {-0.024340, 0.742080, 0, 1.0};
Point(32) = {-0.024575, 0.741739, 0, 1.0};
Point(33) = {-0.024849, 0.741175, 0, 1.0};
Point(34) = {-0.025000, 0.740117, 0, 1.0};
Point(35) = {-0.024779, 0.739677, 0, 1.0};
Point(36) = {-0.024470, 0.739471, 0, 1.0};
Point(37) = {-0.024215, 0.739373, 0, 1.0};
Point(38) = {-0.023708, 0.739236, 0, 1.0};
Point(39) = {-0.022446, 0.739004, 0, 1.0};
Point(40) = {-0.019931, 0.738750, 0, 1.0};
Point(41) = {-0.017421, 0.738577, 0, 1.0};
Point(42) = {-0.014913, 0.738473, 0, 1.0};
Point(43) = {-0.009903, 0.738365, 0, 1.0};
Point(44) = {-0.004897, 0.738354, 0, 1.0};
Point(45) = {0.000107, 0.738393, 0, 1.0};
Point(46) = {0.005107, 0.738510, 0, 1.0};
Point(47) = {0.010105, 0.738662, 0, 1.0};
Point(48) = {0.015101, 0.738863, 0, 1.0};
Point(49) = {0.020095, 0.739105, 0, 1.0};
Point(50) = {0.025087, 0.739401, 0, 1.0};
Point(51) = {0.030076, 0.739748, 0, 1.0};
Point(52) = {0.035064, 0.740129, 0, 1.0};
Point(53) = {0.040051, 0.740531, 0, 1.0};
Point(54) = {0.044039, 0.740866, 0, 1.0};
Point(55) = {0.048027, 0.741221, 0, 1.0};
Point(56) = {0.052014, 0.741601, 0, 1.0};
Point(57) = {0.056001, 0.741981, 0, 1.0};
Point(58) = {0.059488, 0.742343, 0, 1.0};
Point(59) = {0.062973, 0.742735, 0, 1.0};
Point(60) = {0.065958, 0.743124, 0, 1.0};
Point(61) = {0.068446, 0.743449, 0, 1.0};
Point(62) = {0.070435, 0.743742, 0, 1.0};
Point(63) = {0.071924, 0.744001, 0, 1.0};
Point(64) = {0.072916, 0.744197, 0, 1.0};
Point(65) = {0.073907, 0.744423, 0, 1.0};
Point(66) = {0.074401, 0.744566, 0, 1.0};
Point(67) = {0.074893, 0.744749, 0, 1.0};
Point(68) = {-0.074879, -0.745049, 0, 1.0};
Point(69) = {-0.074378, -0.745059, 0, 1.0};
Point(70) = {-0.073877, -0.745068, 0, 1.0};
Point(71) = {-0.072875, -0.745086, 0, 1.0};
Point(72) = {-0.071873, -0.745110, 0, 1.0};
Point(73) = {-0.070360, -0.745360, 0, 1.0};
Point(74) = {-0.068341, -0.745707, 0, 1.0};
Point(75) = {-0.065819, -0.746130, 0, 1.0};
Point(76) = {-0.062791, -0.746668, 0, 1.0};
Point(77) = {-0.059260, -0.747248, 0, 1.0};
Point(78) = {-0.055724, -0.747946, 0, 1.0};
Point(79) = {-0.051686, -0.748682, 0, 1.0};
Point(80) = {-0.047656, -0.749220, 0, 1.0};
Point(81) = {-0.043636, -0.749563, 0, 1.0};
Point(82) = {-0.039624, -0.749736, 0, 1.0};
Point(83) = {-0.034611, -0.749905, 0, 1.0};
Point(84) = {-0.029603, -0.749960, 0, 1.0};
Point(85) = {-0.024595, -0.750000, 0, 1.0};
Point(86) = {-0.019593, -0.749947, 0, 1.0};
Point(87) = {-0.014593, -0.749822, 0, 1.0};
Point(88) = {-0.009597, -0.749620, 0, 1.0};
Point(89) = {-0.004605, -0.749330, 0, 1.0};
Point(90) = {0.000384, -0.748985, 0, 1.0};
Point(91) = {0.005367, -0.748489, 0, 1.0};
Point(92) = {0.010342, -0.747842, 0, 1.0};
Point(93) = {0.015305, -0.746934, 0, 1.0};
Point(94) = {0.017773, -0.746188, 0, 1.0};
Point(95) = {0.020228, -0.745154, 0, 1.0};
Point(96) = {0.022662, -0.743679, 0, 1.0};
Point(97) = {0.023863, -0.742592, 0, 1.0};
Point(98) = {0.024340, -0.742080, 0, 1.0};
Point(99) = {0.024575, -0.741739, 0, 1.0};
Point(100) = {0.024849, -0.741175, 0, 1.0};
Point(101) = {0.025000, -0.740117, 0, 1.0};
Point(102) = {0.024779, -0.739677, 0, 1.0};
Point(103) = {0.024470, -0.739471, 0, 1.0};
Point(104) = {0.024215, -0.739373, 0, 1.0};
Point(105) = {0.023708, -0.739236, 0, 1.0};
Point(106) = {0.022446, -0.739004, 0, 1.0};
Point(107) = {0.019931, -0.738750, 0, 1.0};
Point(108) = {0.017421, -0.738577, 0, 1.0};
Point(109) = {0.014913, -0.738473, 0, 1.0};
Point(110) = {0.009903, -0.738365, 0, 1.0};
Point(111) = {0.004897, -0.738354, 0, 1.0};
Point(112) = {-0.000107, -0.738393, 0, 1.0};
Point(113) = {-0.005107, -0.738510, 0, 1.0};
Point(114) = {-0.010105, -0.738662, 0, 1.0};
Point(115) = {-0.015101, -0.738863, 0, 1.0};
Point(116) = {-0.020095, -0.739105, 0, 1.0};
Point(117) = {-0.025087, -0.739401, 0, 1.0};
Point(118) = {-0.030076, -0.739748, 0, 1.0};
Point(119) = {-0.035064, -0.740129, 0, 1.0};
Point(120) = {-0.040051, -0.740531, 0, 1.0};
Point(121) = {-0.044039, -0.740866, 0, 1.0};
Point(122) = {-0.048027, -0.741221, 0, 1.0};
Point(123) = {-0.052014, -0.741601, 0, 1.0};
Point(124) = {-0.056001, -0.741981, 0, 1.0};
Point(125) = {-0.059488, -0.742343, 0, 1.0};
Point(126) = {-0.062973, -0.742735, 0, 1.0};
Point(127) = {-0.065958, -0.743124, 0, 1.0};
Point(128) = {-0.068446, -0.743449, 0, 1.0};
Point(129) = {-0.070435, -0.743742, 0, 1.0};
Point(130) = {-0.071924, -0.744001, 0, 1.0};
Point(131) = {-0.072916, -0.744197, 0, 1.0};
Point(132) = {-0.073907, -0.744423, 0, 1.0};
Point(133) = {-0.074401, -0.744566, 0, 1.0};
Point(134) = {-0.074893, -0.744749, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:45};
Spline(3) = {45:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:112};
Spline(7) = {112:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html