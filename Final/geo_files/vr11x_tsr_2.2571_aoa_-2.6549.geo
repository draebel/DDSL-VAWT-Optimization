SetFactory("OpenCASCADE");

Point(1) = {0.112318, 0.742573, 0, 1.0};
Point(2) = {0.111567, 0.742588, 0, 1.0};
Point(3) = {0.110815, 0.742603, 0, 1.0};
Point(4) = {0.109312, 0.742629, 0, 1.0};
Point(5) = {0.107809, 0.742664, 0, 1.0};
Point(6) = {0.105539, 0.743040, 0, 1.0};
Point(7) = {0.102512, 0.743560, 0, 1.0};
Point(8) = {0.098728, 0.744195, 0, 1.0};
Point(9) = {0.094186, 0.745001, 0, 1.0};
Point(10) = {0.088890, 0.745872, 0, 1.0};
Point(11) = {0.083586, 0.746918, 0, 1.0};
Point(12) = {0.077528, 0.748024, 0, 1.0};
Point(13) = {0.071484, 0.748831, 0, 1.0};
Point(14) = {0.065454, 0.749345, 0, 1.0};
Point(15) = {0.059436, 0.749604, 0, 1.0};
Point(16) = {0.051916, 0.749857, 0, 1.0};
Point(17) = {0.044404, 0.749940, 0, 1.0};
Point(18) = {0.036893, 0.750000, 0, 1.0};
Point(19) = {0.029389, 0.749921, 0, 1.0};
Point(20) = {0.021889, 0.749734, 0, 1.0};
Point(21) = {0.014395, 0.749430, 0, 1.0};
Point(22) = {0.006908, 0.748995, 0, 1.0};
Point(23) = {-0.000576, 0.748477, 0, 1.0};
Point(24) = {-0.008050, 0.747733, 0, 1.0};
Point(25) = {-0.015513, 0.746764, 0, 1.0};
Point(26) = {-0.022958, 0.745400, 0, 1.0};
Point(27) = {-0.026660, 0.744283, 0, 1.0};
Point(28) = {-0.030342, 0.742730, 0, 1.0};
Point(29) = {-0.033994, 0.740519, 0, 1.0};
Point(30) = {-0.035795, 0.738889, 0, 1.0};
Point(31) = {-0.036510, 0.738120, 0, 1.0};
Point(32) = {-0.036862, 0.737608, 0, 1.0};
Point(33) = {-0.037273, 0.736763, 0, 1.0};
Point(34) = {-0.037500, 0.735176, 0, 1.0};
Point(35) = {-0.037169, 0.734515, 0, 1.0};
Point(36) = {-0.036704, 0.734207, 0, 1.0};
Point(37) = {-0.036322, 0.734059, 0, 1.0};
Point(38) = {-0.035562, 0.733854, 0, 1.0};
Point(39) = {-0.033669, 0.733506, 0, 1.0};
Point(40) = {-0.029897, 0.733126, 0, 1.0};
Point(41) = {-0.026131, 0.732865, 0, 1.0};
Point(42) = {-0.022369, 0.732709, 0, 1.0};
Point(43) = {-0.014854, 0.732547, 0, 1.0};
Point(44) = {-0.007345, 0.732532, 0, 1.0};
Point(45) = {0.000160, 0.732590, 0, 1.0};
Point(46) = {0.007660, 0.732765, 0, 1.0};
Point(47) = {0.015158, 0.732992, 0, 1.0};
Point(48) = {0.022652, 0.733295, 0, 1.0};
Point(49) = {0.030143, 0.733657, 0, 1.0};
Point(50) = {0.037630, 0.734102, 0, 1.0};
Point(51) = {0.045114, 0.734622, 0, 1.0};
Point(52) = {0.052596, 0.735194, 0, 1.0};
Point(53) = {0.060076, 0.735796, 0, 1.0};
Point(54) = {0.066059, 0.736299, 0, 1.0};
Point(55) = {0.072041, 0.736831, 0, 1.0};
Point(56) = {0.078021, 0.737402, 0, 1.0};
Point(57) = {0.084001, 0.737972, 0, 1.0};
Point(58) = {0.089231, 0.738514, 0, 1.0};
Point(59) = {0.094460, 0.739102, 0, 1.0};
Point(60) = {0.098938, 0.739685, 0, 1.0};
Point(61) = {0.102669, 0.740174, 0, 1.0};
Point(62) = {0.105652, 0.740612, 0, 1.0};
Point(63) = {0.107886, 0.741001, 0, 1.0};
Point(64) = {0.109374, 0.741295, 0, 1.0};
Point(65) = {0.110860, 0.741635, 0, 1.0};
Point(66) = {0.111601, 0.741849, 0, 1.0};
Point(67) = {0.112339, 0.742124, 0, 1.0};
Point(68) = {-0.112318, -0.742573, 0, 1.0};
Point(69) = {-0.111567, -0.742588, 0, 1.0};
Point(70) = {-0.110815, -0.742603, 0, 1.0};
Point(71) = {-0.109312, -0.742629, 0, 1.0};
Point(72) = {-0.107809, -0.742664, 0, 1.0};
Point(73) = {-0.105539, -0.743040, 0, 1.0};
Point(74) = {-0.102512, -0.743560, 0, 1.0};
Point(75) = {-0.098728, -0.744195, 0, 1.0};
Point(76) = {-0.094186, -0.745001, 0, 1.0};
Point(77) = {-0.088890, -0.745872, 0, 1.0};
Point(78) = {-0.083586, -0.746918, 0, 1.0};
Point(79) = {-0.077528, -0.748024, 0, 1.0};
Point(80) = {-0.071484, -0.748831, 0, 1.0};
Point(81) = {-0.065454, -0.749345, 0, 1.0};
Point(82) = {-0.059436, -0.749604, 0, 1.0};
Point(83) = {-0.051916, -0.749857, 0, 1.0};
Point(84) = {-0.044404, -0.749940, 0, 1.0};
Point(85) = {-0.036893, -0.750000, 0, 1.0};
Point(86) = {-0.029389, -0.749921, 0, 1.0};
Point(87) = {-0.021889, -0.749734, 0, 1.0};
Point(88) = {-0.014395, -0.749430, 0, 1.0};
Point(89) = {-0.006908, -0.748995, 0, 1.0};
Point(90) = {0.000576, -0.748477, 0, 1.0};
Point(91) = {0.008050, -0.747733, 0, 1.0};
Point(92) = {0.015513, -0.746764, 0, 1.0};
Point(93) = {0.022958, -0.745400, 0, 1.0};
Point(94) = {0.026660, -0.744283, 0, 1.0};
Point(95) = {0.030342, -0.742730, 0, 1.0};
Point(96) = {0.033994, -0.740519, 0, 1.0};
Point(97) = {0.035795, -0.738889, 0, 1.0};
Point(98) = {0.036510, -0.738120, 0, 1.0};
Point(99) = {0.036862, -0.737608, 0, 1.0};
Point(100) = {0.037273, -0.736763, 0, 1.0};
Point(101) = {0.037500, -0.735176, 0, 1.0};
Point(102) = {0.037169, -0.734515, 0, 1.0};
Point(103) = {0.036704, -0.734207, 0, 1.0};
Point(104) = {0.036322, -0.734059, 0, 1.0};
Point(105) = {0.035562, -0.733854, 0, 1.0};
Point(106) = {0.033669, -0.733506, 0, 1.0};
Point(107) = {0.029897, -0.733126, 0, 1.0};
Point(108) = {0.026131, -0.732865, 0, 1.0};
Point(109) = {0.022369, -0.732709, 0, 1.0};
Point(110) = {0.014854, -0.732547, 0, 1.0};
Point(111) = {0.007345, -0.732532, 0, 1.0};
Point(112) = {-0.000160, -0.732590, 0, 1.0};
Point(113) = {-0.007660, -0.732765, 0, 1.0};
Point(114) = {-0.015158, -0.732992, 0, 1.0};
Point(115) = {-0.022652, -0.733295, 0, 1.0};
Point(116) = {-0.030143, -0.733657, 0, 1.0};
Point(117) = {-0.037630, -0.734102, 0, 1.0};
Point(118) = {-0.045114, -0.734622, 0, 1.0};
Point(119) = {-0.052596, -0.735194, 0, 1.0};
Point(120) = {-0.060076, -0.735796, 0, 1.0};
Point(121) = {-0.066059, -0.736299, 0, 1.0};
Point(122) = {-0.072041, -0.736831, 0, 1.0};
Point(123) = {-0.078021, -0.737402, 0, 1.0};
Point(124) = {-0.084001, -0.737972, 0, 1.0};
Point(125) = {-0.089231, -0.738514, 0, 1.0};
Point(126) = {-0.094460, -0.739102, 0, 1.0};
Point(127) = {-0.098938, -0.739685, 0, 1.0};
Point(128) = {-0.102669, -0.740174, 0, 1.0};
Point(129) = {-0.105652, -0.740612, 0, 1.0};
Point(130) = {-0.107886, -0.741001, 0, 1.0};
Point(131) = {-0.109374, -0.741295, 0, 1.0};
Point(132) = {-0.110860, -0.741635, 0, 1.0};
Point(133) = {-0.111601, -0.741849, 0, 1.0};
Point(134) = {-0.112339, -0.742124, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:45};
Spline(3) = {45:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:112};
Spline(7) = {112:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html