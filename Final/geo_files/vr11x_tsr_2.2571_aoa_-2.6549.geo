SetFactory("OpenCASCADE");

Point(1) = {0.149758, 0.740098, 0, 1.0};
Point(2) = {0.148756, 0.740117, 0, 1.0};
Point(3) = {0.147754, 0.740137, 0, 1.0};
Point(4) = {0.145750, 0.740172, 0, 1.0};
Point(5) = {0.143745, 0.740219, 0, 1.0};
Point(6) = {0.140719, 0.740720, 0, 1.0};
Point(7) = {0.136683, 0.741413, 0, 1.0};
Point(8) = {0.131638, 0.742261, 0, 1.0};
Point(9) = {0.125582, 0.743335, 0, 1.0};
Point(10) = {0.118520, 0.744495, 0, 1.0};
Point(11) = {0.111448, 0.745891, 0, 1.0};
Point(12) = {0.103371, 0.747365, 0, 1.0};
Point(13) = {0.095313, 0.748441, 0, 1.0};
Point(14) = {0.087272, 0.749127, 0, 1.0};
Point(15) = {0.079248, 0.749472, 0, 1.0};
Point(16) = {0.069221, 0.749810, 0, 1.0};
Point(17) = {0.059205, 0.749920, 0, 1.0};
Point(18) = {0.049191, 0.750000, 0, 1.0};
Point(19) = {0.039185, 0.749894, 0, 1.0};
Point(20) = {0.029186, 0.749645, 0, 1.0};
Point(21) = {0.019194, 0.749240, 0, 1.0};
Point(22) = {0.009210, 0.748661, 0, 1.0};
Point(23) = {-0.000769, 0.747970, 0, 1.0};
Point(24) = {-0.010733, 0.746977, 0, 1.0};
Point(25) = {-0.020684, 0.745685, 0, 1.0};
Point(26) = {-0.030611, 0.743867, 0, 1.0};
Point(27) = {-0.035547, 0.742377, 0, 1.0};
Point(28) = {-0.040456, 0.740307, 0, 1.0};
Point(29) = {-0.045325, 0.737358, 0, 1.0};
Point(30) = {-0.047727, 0.735185, 0, 1.0};
Point(31) = {-0.048680, 0.734160, 0, 1.0};
Point(32) = {-0.049149, 0.733477, 0, 1.0};
Point(33) = {-0.049698, 0.732351, 0, 1.0};
Point(34) = {-0.050000, 0.730234, 0, 1.0};
Point(35) = {-0.049559, 0.729354, 0, 1.0};
Point(36) = {-0.048939, 0.728942, 0, 1.0};
Point(37) = {-0.048429, 0.728745, 0, 1.0};
Point(38) = {-0.047416, 0.728472, 0, 1.0};
Point(39) = {-0.044891, 0.728009, 0, 1.0};
Point(40) = {-0.039863, 0.727501, 0, 1.0};
Point(41) = {-0.034841, 0.727153, 0, 1.0};
Point(42) = {-0.029826, 0.726945, 0, 1.0};
Point(43) = {-0.019805, 0.726729, 0, 1.0};
Point(44) = {-0.009794, 0.726709, 0, 1.0};
Point(45) = {0.000214, 0.726786, 0, 1.0};
Point(46) = {0.010214, 0.727020, 0, 1.0};
Point(47) = {0.020210, 0.727323, 0, 1.0};
Point(48) = {0.030202, 0.727727, 0, 1.0};
Point(49) = {0.040191, 0.728210, 0, 1.0};
Point(50) = {0.050174, 0.728803, 0, 1.0};
Point(51) = {0.060152, 0.729496, 0, 1.0};
Point(52) = {0.070128, 0.730259, 0, 1.0};
Point(53) = {0.080101, 0.731061, 0, 1.0};
Point(54) = {0.088079, 0.731732, 0, 1.0};
Point(55) = {0.096055, 0.732442, 0, 1.0};
Point(56) = {0.104028, 0.733202, 0, 1.0};
Point(57) = {0.112001, 0.733962, 0, 1.0};
Point(58) = {0.118975, 0.734686, 0, 1.0};
Point(59) = {0.125946, 0.735470, 0, 1.0};
Point(60) = {0.131917, 0.736247, 0, 1.0};
Point(61) = {0.136892, 0.736898, 0, 1.0};
Point(62) = {0.140869, 0.737483, 0, 1.0};
Point(63) = {0.143848, 0.738002, 0, 1.0};
Point(64) = {0.145832, 0.738394, 0, 1.0};
Point(65) = {0.147813, 0.738846, 0, 1.0};
Point(66) = {0.148801, 0.739132, 0, 1.0};
Point(67) = {0.149785, 0.739498, 0, 1.0};
Point(68) = {-0.149758, -0.740098, 0, 1.0};
Point(69) = {-0.148756, -0.740117, 0, 1.0};
Point(70) = {-0.147754, -0.740137, 0, 1.0};
Point(71) = {-0.145750, -0.740172, 0, 1.0};
Point(72) = {-0.143745, -0.740219, 0, 1.0};
Point(73) = {-0.140719, -0.740720, 0, 1.0};
Point(74) = {-0.136683, -0.741413, 0, 1.0};
Point(75) = {-0.131638, -0.742261, 0, 1.0};
Point(76) = {-0.125582, -0.743335, 0, 1.0};
Point(77) = {-0.118520, -0.744495, 0, 1.0};
Point(78) = {-0.111448, -0.745891, 0, 1.0};
Point(79) = {-0.103371, -0.747365, 0, 1.0};
Point(80) = {-0.095313, -0.748441, 0, 1.0};
Point(81) = {-0.087272, -0.749127, 0, 1.0};
Point(82) = {-0.079248, -0.749472, 0, 1.0};
Point(83) = {-0.069221, -0.749810, 0, 1.0};
Point(84) = {-0.059205, -0.749920, 0, 1.0};
Point(85) = {-0.049191, -0.750000, 0, 1.0};
Point(86) = {-0.039185, -0.749894, 0, 1.0};
Point(87) = {-0.029186, -0.749645, 0, 1.0};
Point(88) = {-0.019194, -0.749240, 0, 1.0};
Point(89) = {-0.009210, -0.748661, 0, 1.0};
Point(90) = {0.000769, -0.747970, 0, 1.0};
Point(91) = {0.010733, -0.746977, 0, 1.0};
Point(92) = {0.020684, -0.745685, 0, 1.0};
Point(93) = {0.030611, -0.743867, 0, 1.0};
Point(94) = {0.035547, -0.742377, 0, 1.0};
Point(95) = {0.040456, -0.740307, 0, 1.0};
Point(96) = {0.045325, -0.737358, 0, 1.0};
Point(97) = {0.047727, -0.735185, 0, 1.0};
Point(98) = {0.048680, -0.734160, 0, 1.0};
Point(99) = {0.049149, -0.733477, 0, 1.0};
Point(100) = {0.049698, -0.732351, 0, 1.0};
Point(101) = {0.050000, -0.730234, 0, 1.0};
Point(102) = {0.049559, -0.729354, 0, 1.0};
Point(103) = {0.048939, -0.728942, 0, 1.0};
Point(104) = {0.048429, -0.728745, 0, 1.0};
Point(105) = {0.047416, -0.728472, 0, 1.0};
Point(106) = {0.044891, -0.728009, 0, 1.0};
Point(107) = {0.039863, -0.727501, 0, 1.0};
Point(108) = {0.034841, -0.727153, 0, 1.0};
Point(109) = {0.029826, -0.726945, 0, 1.0};
Point(110) = {0.019805, -0.726729, 0, 1.0};
Point(111) = {0.009794, -0.726709, 0, 1.0};
Point(112) = {-0.000214, -0.726786, 0, 1.0};
Point(113) = {-0.010214, -0.727020, 0, 1.0};
Point(114) = {-0.020210, -0.727323, 0, 1.0};
Point(115) = {-0.030202, -0.727727, 0, 1.0};
Point(116) = {-0.040191, -0.728210, 0, 1.0};
Point(117) = {-0.050174, -0.728803, 0, 1.0};
Point(118) = {-0.060152, -0.729496, 0, 1.0};
Point(119) = {-0.070128, -0.730259, 0, 1.0};
Point(120) = {-0.080101, -0.731061, 0, 1.0};
Point(121) = {-0.088079, -0.731732, 0, 1.0};
Point(122) = {-0.096055, -0.732442, 0, 1.0};
Point(123) = {-0.104028, -0.733202, 0, 1.0};
Point(124) = {-0.112001, -0.733962, 0, 1.0};
Point(125) = {-0.118975, -0.734686, 0, 1.0};
Point(126) = {-0.125946, -0.735470, 0, 1.0};
Point(127) = {-0.131917, -0.736247, 0, 1.0};
Point(128) = {-0.136892, -0.736898, 0, 1.0};
Point(129) = {-0.140869, -0.737483, 0, 1.0};
Point(130) = {-0.143848, -0.738002, 0, 1.0};
Point(131) = {-0.145832, -0.738394, 0, 1.0};
Point(132) = {-0.147813, -0.738846, 0, 1.0};
Point(133) = {-0.148801, -0.739132, 0, 1.0};
Point(134) = {-0.149785, -0.739498, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:45};
Spline(3) = {45:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:112};
Spline(7) = {112:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html