SetFactory("OpenCASCADE");

Point(1) = {0.147910, 0.708854, 0, 1.0};
Point(2) = {0.147183, 0.709079, 0, 1.0};
Point(3) = {0.145100, 0.709805, 0, 1.0};
Point(4) = {0.141862, 0.711051, 0, 1.0};
Point(5) = {0.137620, 0.712718, 0, 1.0};
Point(6) = {0.132423, 0.714688, 0, 1.0};
Point(7) = {0.126274, 0.716940, 0, 1.0};
Point(8) = {0.119257, 0.719508, 0, 1.0};
Point(9) = {0.111519, 0.722384, 0, 1.0};
Point(10) = {0.103212, 0.725523, 0, 1.0};
Point(11) = {0.094495, 0.728861, 0, 1.0};
Point(12) = {0.085529, 0.732299, 0, 1.0};
Point(13) = {0.076472, 0.735721, 0, 1.0};
Point(14) = {0.067460, 0.738932, 0, 1.0};
Point(15) = {0.058484, 0.741705, 0, 1.0};
Point(16) = {0.049417, 0.743992, 0, 1.0};
Point(17) = {0.040270, 0.745883, 0, 1.0};
Point(18) = {0.031144, 0.747413, 0, 1.0};
Point(19) = {0.022132, 0.748580, 0, 1.0};
Point(20) = {0.013315, 0.749394, 0, 1.0};
Point(21) = {0.004782, 0.749863, 0, 1.0};
Point(22) = {-0.003382, 0.750000, 0, 1.0};
Point(23) = {-0.011092, 0.749814, 0, 1.0};
Point(24) = {-0.018272, 0.749320, 0, 1.0};
Point(25) = {-0.024853, 0.748539, 0, 1.0};
Point(26) = {-0.030773, 0.747487, 0, 1.0};
Point(27) = {-0.035975, 0.746194, 0, 1.0};
Point(28) = {-0.040428, 0.744696, 0, 1.0};
Point(29) = {-0.044093, 0.743055, 0, 1.0};
Point(30) = {-0.046924, 0.741336, 0, 1.0};
Point(31) = {-0.048884, 0.739604, 0, 1.0};
Point(32) = {-0.049934, 0.737979, 0, 1.0};
Point(33) = {-0.049806, 0.736580, 0, 1.0};
Point(34) = {-0.048378, 0.735228, 0, 1.0};
Point(35) = {-0.045793, 0.733745, 0, 1.0};
Point(36) = {-0.042126, 0.732194, 0, 1.0};
Point(37) = {-0.037423, 0.730600, 0, 1.0};
Point(38) = {-0.031729, 0.728969, 0, 1.0};
Point(39) = {-0.025110, 0.727302, 0, 1.0};
Point(40) = {-0.017657, 0.725605, 0, 1.0};
Point(41) = {-0.009459, 0.723897, 0, 1.0};
Point(42) = {-0.000617, 0.722193, 0, 1.0};
Point(43) = {0.008763, 0.720509, 0, 1.0};
Point(44) = {0.018572, 0.718867, 0, 1.0};
Point(45) = {0.028695, 0.717281, 0, 1.0};
Point(46) = {0.039014, 0.715775, 0, 1.0};
Point(47) = {0.049406, 0.714366, 0, 1.0};
Point(48) = {0.059754, 0.713077, 0, 1.0};
Point(49) = {0.069928, 0.711924, 0, 1.0};
Point(50) = {0.079803, 0.710942, 0, 1.0};
Point(51) = {0.089257, 0.710172, 0, 1.0};
Point(52) = {0.098178, 0.709725, 0, 1.0};
Point(53) = {0.106650, 0.709734, 0, 1.0};
Point(54) = {0.114859, 0.710036, 0, 1.0};
Point(55) = {0.122701, 0.710287, 0, 1.0};
Point(56) = {0.129875, 0.710334, 0, 1.0};
Point(57) = {0.136114, 0.710154, 0, 1.0};
Point(58) = {0.141183, 0.709793, 0, 1.0};
Point(59) = {0.144902, 0.709361, 0, 1.0};
Point(60) = {0.147157, 0.708998, 0, 1.0};
Point(61) = {-0.147910, -0.708854, 0, 1.0};
Point(62) = {-0.147183, -0.709079, 0, 1.0};
Point(63) = {-0.145100, -0.709805, 0, 1.0};
Point(64) = {-0.141862, -0.711051, 0, 1.0};
Point(65) = {-0.137620, -0.712718, 0, 1.0};
Point(66) = {-0.132423, -0.714688, 0, 1.0};
Point(67) = {-0.126274, -0.716940, 0, 1.0};
Point(68) = {-0.119257, -0.719508, 0, 1.0};
Point(69) = {-0.111519, -0.722384, 0, 1.0};
Point(70) = {-0.103212, -0.725523, 0, 1.0};
Point(71) = {-0.094495, -0.728861, 0, 1.0};
Point(72) = {-0.085529, -0.732299, 0, 1.0};
Point(73) = {-0.076472, -0.735721, 0, 1.0};
Point(74) = {-0.067460, -0.738932, 0, 1.0};
Point(75) = {-0.058484, -0.741705, 0, 1.0};
Point(76) = {-0.049417, -0.743992, 0, 1.0};
Point(77) = {-0.040270, -0.745883, 0, 1.0};
Point(78) = {-0.031144, -0.747413, 0, 1.0};
Point(79) = {-0.022132, -0.748580, 0, 1.0};
Point(80) = {-0.013315, -0.749394, 0, 1.0};
Point(81) = {-0.004782, -0.749863, 0, 1.0};
Point(82) = {0.003382, -0.750000, 0, 1.0};
Point(83) = {0.011092, -0.749814, 0, 1.0};
Point(84) = {0.018272, -0.749320, 0, 1.0};
Point(85) = {0.024853, -0.748539, 0, 1.0};
Point(86) = {0.030773, -0.747487, 0, 1.0};
Point(87) = {0.035975, -0.746194, 0, 1.0};
Point(88) = {0.040428, -0.744696, 0, 1.0};
Point(89) = {0.044093, -0.743055, 0, 1.0};
Point(90) = {0.046924, -0.741336, 0, 1.0};
Point(91) = {0.048884, -0.739604, 0, 1.0};
Point(92) = {0.049934, -0.737979, 0, 1.0};
Point(93) = {0.049806, -0.736580, 0, 1.0};
Point(94) = {0.048378, -0.735228, 0, 1.0};
Point(95) = {0.045793, -0.733745, 0, 1.0};
Point(96) = {0.042126, -0.732194, 0, 1.0};
Point(97) = {0.037423, -0.730600, 0, 1.0};
Point(98) = {0.031729, -0.728969, 0, 1.0};
Point(99) = {0.025110, -0.727302, 0, 1.0};
Point(100) = {0.017657, -0.725605, 0, 1.0};
Point(101) = {0.009459, -0.723897, 0, 1.0};
Point(102) = {0.000617, -0.722193, 0, 1.0};
Point(103) = {-0.008763, -0.720509, 0, 1.0};
Point(104) = {-0.018572, -0.718867, 0, 1.0};
Point(105) = {-0.028695, -0.717281, 0, 1.0};
Point(106) = {-0.039014, -0.715775, 0, 1.0};
Point(107) = {-0.049406, -0.714366, 0, 1.0};
Point(108) = {-0.059754, -0.713077, 0, 1.0};
Point(109) = {-0.069928, -0.711924, 0, 1.0};
Point(110) = {-0.079803, -0.710942, 0, 1.0};
Point(111) = {-0.089257, -0.710172, 0, 1.0};
Point(112) = {-0.098178, -0.709725, 0, 1.0};
Point(113) = {-0.106650, -0.709734, 0, 1.0};
Point(114) = {-0.114859, -0.710036, 0, 1.0};
Point(115) = {-0.122701, -0.710287, 0, 1.0};
Point(116) = {-0.129875, -0.710334, 0, 1.0};
Point(117) = {-0.136114, -0.710154, 0, 1.0};
Point(118) = {-0.141183, -0.709793, 0, 1.0};
Point(119) = {-0.144902, -0.709361, 0, 1.0};
Point(120) = {-0.147157, -0.708998, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html