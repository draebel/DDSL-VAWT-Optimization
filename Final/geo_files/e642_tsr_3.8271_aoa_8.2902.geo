SetFactory("OpenCASCADE");

Point(1) = {0.111293, 0.719137, 0, 1.0};
Point(2) = {0.110747, 0.719305, 0, 1.0};
Point(3) = {0.109185, 0.719850, 0, 1.0};
Point(4) = {0.106756, 0.720785, 0, 1.0};
Point(5) = {0.103574, 0.722035, 0, 1.0};
Point(6) = {0.099676, 0.723512, 0, 1.0};
Point(7) = {0.095064, 0.725202, 0, 1.0};
Point(8) = {0.089800, 0.727129, 0, 1.0};
Point(9) = {0.083996, 0.729286, 0, 1.0};
Point(10) = {0.077765, 0.731640, 0, 1.0};
Point(11) = {0.071226, 0.734143, 0, 1.0};
Point(12) = {0.064501, 0.736723, 0, 1.0};
Point(13) = {0.057707, 0.739289, 0, 1.0};
Point(14) = {0.050948, 0.741698, 0, 1.0};
Point(15) = {0.044215, 0.743778, 0, 1.0};
Point(16) = {0.037414, 0.745494, 0, 1.0};
Point(17) = {0.030553, 0.746912, 0, 1.0};
Point(18) = {0.023707, 0.748059, 0, 1.0};
Point(19) = {0.016948, 0.748935, 0, 1.0};
Point(20) = {0.010334, 0.749546, 0, 1.0};
Point(21) = {0.003933, 0.749898, 0, 1.0};
Point(22) = {-0.002190, 0.750000, 0, 1.0};
Point(23) = {-0.007973, 0.749860, 0, 1.0};
Point(24) = {-0.013359, 0.749490, 0, 1.0};
Point(25) = {-0.018295, 0.748904, 0, 1.0};
Point(26) = {-0.022735, 0.748115, 0, 1.0};
Point(27) = {-0.026638, 0.747145, 0, 1.0};
Point(28) = {-0.029978, 0.746022, 0, 1.0};
Point(29) = {-0.032727, 0.744791, 0, 1.0};
Point(30) = {-0.034851, 0.743501, 0, 1.0};
Point(31) = {-0.036321, 0.742202, 0, 1.0};
Point(32) = {-0.037108, 0.740983, 0, 1.0};
Point(33) = {-0.037012, 0.739933, 0, 1.0};
Point(34) = {-0.035941, 0.738919, 0, 1.0};
Point(35) = {-0.034002, 0.737807, 0, 1.0};
Point(36) = {-0.031252, 0.736644, 0, 1.0};
Point(37) = {-0.027724, 0.735448, 0, 1.0};
Point(38) = {-0.023453, 0.734225, 0, 1.0};
Point(39) = {-0.018488, 0.732974, 0, 1.0};
Point(40) = {-0.012897, 0.731702, 0, 1.0};
Point(41) = {-0.006749, 0.730421, 0, 1.0};
Point(42) = {-0.000116, 0.729142, 0, 1.0};
Point(43) = {0.006919, 0.727879, 0, 1.0};
Point(44) = {0.014278, 0.726648, 0, 1.0};
Point(45) = {0.021871, 0.725458, 0, 1.0};
Point(46) = {0.029611, 0.724328, 0, 1.0};
Point(47) = {0.037405, 0.723272, 0, 1.0};
Point(48) = {0.045167, 0.722304, 0, 1.0};
Point(49) = {0.052799, 0.721439, 0, 1.0};
Point(50) = {0.060207, 0.720703, 0, 1.0};
Point(51) = {0.067298, 0.720126, 0, 1.0};
Point(52) = {0.073989, 0.719790, 0, 1.0};
Point(53) = {0.080344, 0.719797, 0, 1.0};
Point(54) = {0.086501, 0.720023, 0, 1.0};
Point(55) = {0.092384, 0.720212, 0, 1.0};
Point(56) = {0.097765, 0.720247, 0, 1.0};
Point(57) = {0.102445, 0.720112, 0, 1.0};
Point(58) = {0.106247, 0.719841, 0, 1.0};
Point(59) = {0.109036, 0.719517, 0, 1.0};
Point(60) = {0.110728, 0.719245, 0, 1.0};
Point(61) = {-0.111293, -0.719137, 0, 1.0};
Point(62) = {-0.110747, -0.719305, 0, 1.0};
Point(63) = {-0.109185, -0.719850, 0, 1.0};
Point(64) = {-0.106756, -0.720785, 0, 1.0};
Point(65) = {-0.103574, -0.722035, 0, 1.0};
Point(66) = {-0.099676, -0.723512, 0, 1.0};
Point(67) = {-0.095064, -0.725202, 0, 1.0};
Point(68) = {-0.089800, -0.727129, 0, 1.0};
Point(69) = {-0.083996, -0.729286, 0, 1.0};
Point(70) = {-0.077765, -0.731640, 0, 1.0};
Point(71) = {-0.071226, -0.734143, 0, 1.0};
Point(72) = {-0.064501, -0.736723, 0, 1.0};
Point(73) = {-0.057707, -0.739289, 0, 1.0};
Point(74) = {-0.050948, -0.741698, 0, 1.0};
Point(75) = {-0.044215, -0.743778, 0, 1.0};
Point(76) = {-0.037414, -0.745494, 0, 1.0};
Point(77) = {-0.030553, -0.746912, 0, 1.0};
Point(78) = {-0.023707, -0.748059, 0, 1.0};
Point(79) = {-0.016948, -0.748935, 0, 1.0};
Point(80) = {-0.010334, -0.749546, 0, 1.0};
Point(81) = {-0.003933, -0.749898, 0, 1.0};
Point(82) = {0.002190, -0.750000, 0, 1.0};
Point(83) = {0.007973, -0.749860, 0, 1.0};
Point(84) = {0.013359, -0.749490, 0, 1.0};
Point(85) = {0.018295, -0.748904, 0, 1.0};
Point(86) = {0.022735, -0.748115, 0, 1.0};
Point(87) = {0.026638, -0.747145, 0, 1.0};
Point(88) = {0.029978, -0.746022, 0, 1.0};
Point(89) = {0.032727, -0.744791, 0, 1.0};
Point(90) = {0.034851, -0.743501, 0, 1.0};
Point(91) = {0.036321, -0.742202, 0, 1.0};
Point(92) = {0.037108, -0.740983, 0, 1.0};
Point(93) = {0.037012, -0.739933, 0, 1.0};
Point(94) = {0.035941, -0.738919, 0, 1.0};
Point(95) = {0.034002, -0.737807, 0, 1.0};
Point(96) = {0.031252, -0.736644, 0, 1.0};
Point(97) = {0.027724, -0.735448, 0, 1.0};
Point(98) = {0.023453, -0.734225, 0, 1.0};
Point(99) = {0.018488, -0.732974, 0, 1.0};
Point(100) = {0.012897, -0.731702, 0, 1.0};
Point(101) = {0.006749, -0.730421, 0, 1.0};
Point(102) = {0.000116, -0.729142, 0, 1.0};
Point(103) = {-0.006919, -0.727879, 0, 1.0};
Point(104) = {-0.014278, -0.726648, 0, 1.0};
Point(105) = {-0.021871, -0.725458, 0, 1.0};
Point(106) = {-0.029611, -0.724328, 0, 1.0};
Point(107) = {-0.037405, -0.723272, 0, 1.0};
Point(108) = {-0.045167, -0.722304, 0, 1.0};
Point(109) = {-0.052799, -0.721439, 0, 1.0};
Point(110) = {-0.060207, -0.720703, 0, 1.0};
Point(111) = {-0.067298, -0.720126, 0, 1.0};
Point(112) = {-0.073989, -0.719790, 0, 1.0};
Point(113) = {-0.080344, -0.719797, 0, 1.0};
Point(114) = {-0.086501, -0.720023, 0, 1.0};
Point(115) = {-0.092384, -0.720212, 0, 1.0};
Point(116) = {-0.097765, -0.720247, 0, 1.0};
Point(117) = {-0.102445, -0.720112, 0, 1.0};
Point(118) = {-0.106247, -0.719841, 0, 1.0};
Point(119) = {-0.109036, -0.719517, 0, 1.0};
Point(120) = {-0.110728, -0.719245, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html