SetFactory("OpenCASCADE");

Point(1) = {0.110933, 0.719140, 0, 1.0};
Point(2) = {0.110387, 0.719309, 0, 1.0};
Point(3) = {0.108825, 0.719854, 0, 1.0};
Point(4) = {0.106396, 0.720788, 0, 1.0};
Point(5) = {0.103215, 0.722038, 0, 1.0};
Point(6) = {0.099318, 0.723516, 0, 1.0};
Point(7) = {0.094705, 0.725205, 0, 1.0};
Point(8) = {0.089443, 0.727131, 0, 1.0};
Point(9) = {0.083639, 0.729288, 0, 1.0};
Point(10) = {0.077409, 0.731642, 0, 1.0};
Point(11) = {0.070871, 0.734145, 0, 1.0};
Point(12) = {0.064147, 0.736724, 0, 1.0};
Point(13) = {0.057354, 0.739291, 0, 1.0};
Point(14) = {0.050595, 0.741699, 0, 1.0};
Point(15) = {0.043863, 0.743779, 0, 1.0};
Point(16) = {0.037063, 0.745494, 0, 1.0};
Point(17) = {0.030203, 0.746912, 0, 1.0};
Point(18) = {0.023358, 0.748060, 0, 1.0};
Point(19) = {0.016599, 0.748935, 0, 1.0};
Point(20) = {0.009986, 0.749546, 0, 1.0};
Point(21) = {0.003586, 0.749898, 0, 1.0};
Point(22) = {-0.002537, 0.750000, 0, 1.0};
Point(23) = {-0.008319, 0.749860, 0, 1.0};
Point(24) = {-0.013704, 0.749490, 0, 1.0};
Point(25) = {-0.018640, 0.748904, 0, 1.0};
Point(26) = {-0.023079, 0.748115, 0, 1.0};
Point(27) = {-0.026982, 0.747145, 0, 1.0};
Point(28) = {-0.030321, 0.746022, 0, 1.0};
Point(29) = {-0.033070, 0.744792, 0, 1.0};
Point(30) = {-0.035193, 0.743502, 0, 1.0};
Point(31) = {-0.036663, 0.742203, 0, 1.0};
Point(32) = {-0.037450, 0.740984, 0, 1.0};
Point(33) = {-0.037355, 0.739935, 0, 1.0};
Point(34) = {-0.036284, 0.738921, 0, 1.0};
Point(35) = {-0.034345, 0.737809, 0, 1.0};
Point(36) = {-0.031595, 0.736646, 0, 1.0};
Point(37) = {-0.028067, 0.735450, 0, 1.0};
Point(38) = {-0.023796, 0.734227, 0, 1.0};
Point(39) = {-0.018832, 0.732976, 0, 1.0};
Point(40) = {-0.013242, 0.731704, 0, 1.0};
Point(41) = {-0.007094, 0.730423, 0, 1.0};
Point(42) = {-0.000462, 0.729145, 0, 1.0};
Point(43) = {0.006572, 0.727882, 0, 1.0};
Point(44) = {0.013929, 0.726650, 0, 1.0};
Point(45) = {0.021522, 0.725461, 0, 1.0};
Point(46) = {0.029261, 0.724332, 0, 1.0};
Point(47) = {0.037054, 0.723275, 0, 1.0};
Point(48) = {0.044815, 0.722308, 0, 1.0};
Point(49) = {0.052446, 0.721443, 0, 1.0};
Point(50) = {0.059853, 0.720706, 0, 1.0};
Point(51) = {0.066943, 0.720129, 0, 1.0};
Point(52) = {0.073634, 0.719794, 0, 1.0};
Point(53) = {0.079987, 0.719801, 0, 1.0};
Point(54) = {0.086144, 0.720027, 0, 1.0};
Point(55) = {0.092026, 0.720216, 0, 1.0};
Point(56) = {0.097406, 0.720250, 0, 1.0};
Point(57) = {0.102086, 0.720116, 0, 1.0};
Point(58) = {0.105887, 0.719845, 0, 1.0};
Point(59) = {0.108676, 0.719521, 0, 1.0};
Point(60) = {0.110368, 0.719248, 0, 1.0};
Point(61) = {-0.110933, -0.719140, 0, 1.0};
Point(62) = {-0.110387, -0.719309, 0, 1.0};
Point(63) = {-0.108825, -0.719854, 0, 1.0};
Point(64) = {-0.106396, -0.720788, 0, 1.0};
Point(65) = {-0.103215, -0.722038, 0, 1.0};
Point(66) = {-0.099318, -0.723516, 0, 1.0};
Point(67) = {-0.094705, -0.725205, 0, 1.0};
Point(68) = {-0.089443, -0.727131, 0, 1.0};
Point(69) = {-0.083639, -0.729288, 0, 1.0};
Point(70) = {-0.077409, -0.731642, 0, 1.0};
Point(71) = {-0.070871, -0.734145, 0, 1.0};
Point(72) = {-0.064147, -0.736724, 0, 1.0};
Point(73) = {-0.057354, -0.739291, 0, 1.0};
Point(74) = {-0.050595, -0.741699, 0, 1.0};
Point(75) = {-0.043863, -0.743779, 0, 1.0};
Point(76) = {-0.037063, -0.745494, 0, 1.0};
Point(77) = {-0.030203, -0.746912, 0, 1.0};
Point(78) = {-0.023358, -0.748060, 0, 1.0};
Point(79) = {-0.016599, -0.748935, 0, 1.0};
Point(80) = {-0.009986, -0.749546, 0, 1.0};
Point(81) = {-0.003586, -0.749898, 0, 1.0};
Point(82) = {0.002537, -0.750000, 0, 1.0};
Point(83) = {0.008319, -0.749860, 0, 1.0};
Point(84) = {0.013704, -0.749490, 0, 1.0};
Point(85) = {0.018640, -0.748904, 0, 1.0};
Point(86) = {0.023079, -0.748115, 0, 1.0};
Point(87) = {0.026982, -0.747145, 0, 1.0};
Point(88) = {0.030321, -0.746022, 0, 1.0};
Point(89) = {0.033070, -0.744792, 0, 1.0};
Point(90) = {0.035193, -0.743502, 0, 1.0};
Point(91) = {0.036663, -0.742203, 0, 1.0};
Point(92) = {0.037450, -0.740984, 0, 1.0};
Point(93) = {0.037355, -0.739935, 0, 1.0};
Point(94) = {0.036284, -0.738921, 0, 1.0};
Point(95) = {0.034345, -0.737809, 0, 1.0};
Point(96) = {0.031595, -0.736646, 0, 1.0};
Point(97) = {0.028067, -0.735450, 0, 1.0};
Point(98) = {0.023796, -0.734227, 0, 1.0};
Point(99) = {0.018832, -0.732976, 0, 1.0};
Point(100) = {0.013242, -0.731704, 0, 1.0};
Point(101) = {0.007094, -0.730423, 0, 1.0};
Point(102) = {0.000462, -0.729145, 0, 1.0};
Point(103) = {-0.006572, -0.727882, 0, 1.0};
Point(104) = {-0.013929, -0.726650, 0, 1.0};
Point(105) = {-0.021522, -0.725461, 0, 1.0};
Point(106) = {-0.029261, -0.724332, 0, 1.0};
Point(107) = {-0.037054, -0.723275, 0, 1.0};
Point(108) = {-0.044815, -0.722308, 0, 1.0};
Point(109) = {-0.052446, -0.721443, 0, 1.0};
Point(110) = {-0.059853, -0.720706, 0, 1.0};
Point(111) = {-0.066943, -0.720129, 0, 1.0};
Point(112) = {-0.073634, -0.719794, 0, 1.0};
Point(113) = {-0.079987, -0.719801, 0, 1.0};
Point(114) = {-0.086144, -0.720027, 0, 1.0};
Point(115) = {-0.092026, -0.720216, 0, 1.0};
Point(116) = {-0.097406, -0.720250, 0, 1.0};
Point(117) = {-0.102086, -0.720116, 0, 1.0};
Point(118) = {-0.105887, -0.719845, 0, 1.0};
Point(119) = {-0.108676, -0.719521, 0, 1.0};
Point(120) = {-0.110368, -0.719248, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html