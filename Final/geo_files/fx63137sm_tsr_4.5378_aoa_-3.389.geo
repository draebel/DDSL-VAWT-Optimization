SetFactory("OpenCASCADE");

Point(1) = {0.149650, 0.732662, 0, 1.0};
Point(2) = {0.148769, 0.733063, 0, 1.0};
Point(3) = {0.146151, 0.734102, 0, 1.0};
Point(4) = {0.141857, 0.735491, 0, 1.0};
Point(5) = {0.135970, 0.737024, 0, 1.0};
Point(6) = {0.128595, 0.738659, 0, 1.0};
Point(7) = {0.119849, 0.740428, 0, 1.0};
Point(8) = {0.109885, 0.742330, 0, 1.0};
Point(9) = {0.098874, 0.744290, 0, 1.0};
Point(10) = {0.087010, 0.746175, 0, 1.0};
Point(11) = {0.074505, 0.747822, 0, 1.0};
Point(12) = {0.061578, 0.749083, 0, 1.0};
Point(13) = {0.048458, 0.749835, 0, 1.0};
Point(14) = {0.035373, 0.750000, 0, 1.0};
Point(15) = {0.022548, 0.749538, 0, 1.0};
Point(16) = {0.016303, 0.749069, 0, 1.0};
Point(17) = {0.010205, 0.748443, 0, 1.0};
Point(18) = {0.004281, 0.747665, 0, 1.0};
Point(19) = {-0.001446, 0.746739, 0, 1.0};
Point(20) = {-0.006951, 0.745672, 0, 1.0};
Point(21) = {-0.012207, 0.744475, 0, 1.0};
Point(22) = {-0.017196, 0.743155, 0, 1.0};
Point(23) = {-0.021895, 0.741720, 0, 1.0};
Point(24) = {-0.026286, 0.740184, 0, 1.0};
Point(25) = {-0.030350, 0.738572, 0, 1.0};
Point(26) = {-0.034068, 0.736913, 0, 1.0};
Point(27) = {-0.037431, 0.735231, 0, 1.0};
Point(28) = {-0.040422, 0.733532, 0, 1.0};
Point(29) = {-0.043024, 0.731798, 0, 1.0};
Point(30) = {-0.045227, 0.729998, 0, 1.0};
Point(31) = {-0.047017, 0.728125, 0, 1.0};
Point(32) = {-0.048393, 0.726216, 0, 1.0};
Point(33) = {-0.049351, 0.724368, 0, 1.0};
Point(34) = {-0.049896, 0.722702, 0, 1.0};
Point(35) = {-0.050029, 0.721321, 0, 1.0};
Point(36) = {-0.049751, 0.720261, 0, 1.0};
Point(37) = {-0.049062, 0.719488, 0, 1.0};
Point(38) = {-0.047961, 0.718925, 0, 1.0};
Point(39) = {-0.046447, 0.718495, 0, 1.0};
Point(40) = {-0.044526, 0.718152, 0, 1.0};
Point(41) = {-0.042200, 0.717883, 0, 1.0};
Point(42) = {-0.039484, 0.717697, 0, 1.0};
Point(43) = {-0.036387, 0.717603, 0, 1.0};
Point(44) = {-0.032924, 0.717597, 0, 1.0};
Point(45) = {-0.029112, 0.717671, 0, 1.0};
Point(46) = {-0.024962, 0.717818, 0, 1.0};
Point(47) = {-0.020493, 0.718035, 0, 1.0};
Point(48) = {-0.015726, 0.718328, 0, 1.0};
Point(49) = {-0.010681, 0.718701, 0, 1.0};
Point(50) = {-0.005381, 0.719161, 0, 1.0};
Point(51) = {0.000154, 0.719716, 0, 1.0};
Point(52) = {0.005897, 0.720375, 0, 1.0};
Point(53) = {0.011822, 0.721144, 0, 1.0};
Point(54) = {0.017905, 0.722020, 0, 1.0};
Point(55) = {0.024121, 0.722990, 0, 1.0};
Point(56) = {0.036846, 0.725139, 0, 1.0};
Point(57) = {0.049785, 0.727431, 0, 1.0};
Point(58) = {0.062725, 0.729702, 0, 1.0};
Point(59) = {0.075454, 0.731796, 0, 1.0};
Point(60) = {0.087756, 0.733579, 0, 1.0};
Point(61) = {0.099427, 0.734956, 0, 1.0};
Point(62) = {0.110269, 0.735856, 0, 1.0};
Point(63) = {0.120097, 0.736243, 0, 1.0};
Point(64) = {0.128745, 0.736118, 0, 1.0};
Point(65) = {0.136058, 0.735545, 0, 1.0};
Point(66) = {0.141906, 0.734665, 0, 1.0};
Point(67) = {0.146175, 0.733705, 0, 1.0};
Point(68) = {0.148776, 0.732950, 0, 1.0};
Point(69) = {-0.149650, -0.732662, 0, 1.0};
Point(70) = {-0.148769, -0.733063, 0, 1.0};
Point(71) = {-0.146151, -0.734102, 0, 1.0};
Point(72) = {-0.141857, -0.735491, 0, 1.0};
Point(73) = {-0.135970, -0.737024, 0, 1.0};
Point(74) = {-0.128595, -0.738659, 0, 1.0};
Point(75) = {-0.119849, -0.740428, 0, 1.0};
Point(76) = {-0.109885, -0.742330, 0, 1.0};
Point(77) = {-0.098874, -0.744290, 0, 1.0};
Point(78) = {-0.087010, -0.746175, 0, 1.0};
Point(79) = {-0.074505, -0.747822, 0, 1.0};
Point(80) = {-0.061578, -0.749083, 0, 1.0};
Point(81) = {-0.048458, -0.749835, 0, 1.0};
Point(82) = {-0.035373, -0.750000, 0, 1.0};
Point(83) = {-0.022548, -0.749538, 0, 1.0};
Point(84) = {-0.016303, -0.749069, 0, 1.0};
Point(85) = {-0.010205, -0.748443, 0, 1.0};
Point(86) = {-0.004281, -0.747665, 0, 1.0};
Point(87) = {0.001446, -0.746739, 0, 1.0};
Point(88) = {0.006951, -0.745672, 0, 1.0};
Point(89) = {0.012207, -0.744475, 0, 1.0};
Point(90) = {0.017196, -0.743155, 0, 1.0};
Point(91) = {0.021895, -0.741720, 0, 1.0};
Point(92) = {0.026286, -0.740184, 0, 1.0};
Point(93) = {0.030350, -0.738572, 0, 1.0};
Point(94) = {0.034068, -0.736913, 0, 1.0};
Point(95) = {0.037431, -0.735231, 0, 1.0};
Point(96) = {0.040422, -0.733532, 0, 1.0};
Point(97) = {0.043024, -0.731798, 0, 1.0};
Point(98) = {0.045227, -0.729998, 0, 1.0};
Point(99) = {0.047017, -0.728125, 0, 1.0};
Point(100) = {0.048393, -0.726216, 0, 1.0};
Point(101) = {0.049351, -0.724368, 0, 1.0};
Point(102) = {0.049896, -0.722702, 0, 1.0};
Point(103) = {0.050029, -0.721321, 0, 1.0};
Point(104) = {0.049751, -0.720261, 0, 1.0};
Point(105) = {0.049062, -0.719488, 0, 1.0};
Point(106) = {0.047961, -0.718925, 0, 1.0};
Point(107) = {0.046447, -0.718495, 0, 1.0};
Point(108) = {0.044526, -0.718152, 0, 1.0};
Point(109) = {0.042200, -0.717883, 0, 1.0};
Point(110) = {0.039484, -0.717697, 0, 1.0};
Point(111) = {0.036387, -0.717603, 0, 1.0};
Point(112) = {0.032924, -0.717597, 0, 1.0};
Point(113) = {0.029112, -0.717671, 0, 1.0};
Point(114) = {0.024962, -0.717818, 0, 1.0};
Point(115) = {0.020493, -0.718035, 0, 1.0};
Point(116) = {0.015726, -0.718328, 0, 1.0};
Point(117) = {0.010681, -0.718701, 0, 1.0};
Point(118) = {0.005381, -0.719161, 0, 1.0};
Point(119) = {-0.000154, -0.719716, 0, 1.0};
Point(120) = {-0.005897, -0.720375, 0, 1.0};
Point(121) = {-0.011822, -0.721144, 0, 1.0};
Point(122) = {-0.017905, -0.722020, 0, 1.0};
Point(123) = {-0.024121, -0.722990, 0, 1.0};
Point(124) = {-0.036846, -0.725139, 0, 1.0};
Point(125) = {-0.049785, -0.727431, 0, 1.0};
Point(126) = {-0.062725, -0.729702, 0, 1.0};
Point(127) = {-0.075454, -0.731796, 0, 1.0};
Point(128) = {-0.087756, -0.733579, 0, 1.0};
Point(129) = {-0.099427, -0.734956, 0, 1.0};
Point(130) = {-0.110269, -0.735856, 0, 1.0};
Point(131) = {-0.120097, -0.736243, 0, 1.0};
Point(132) = {-0.128745, -0.736118, 0, 1.0};
Point(133) = {-0.136058, -0.735545, 0, 1.0};
Point(134) = {-0.141906, -0.734665, 0, 1.0};
Point(135) = {-0.146175, -0.733705, 0, 1.0};
Point(136) = {-0.148776, -0.732950, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:51};
Spline(3) = {51:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:86};
Spline(6) = {86:119};
Spline(7) = {119:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html