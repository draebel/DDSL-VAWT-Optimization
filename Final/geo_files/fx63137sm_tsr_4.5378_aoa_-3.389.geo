SetFactory("OpenCASCADE");

Point(1) = {0.112325, 0.736997, 0, 1.0};
Point(2) = {0.111664, 0.737297, 0, 1.0};
Point(3) = {0.109700, 0.738077, 0, 1.0};
Point(4) = {0.106480, 0.739118, 0, 1.0};
Point(5) = {0.102065, 0.740268, 0, 1.0};
Point(6) = {0.096533, 0.741494, 0, 1.0};
Point(7) = {0.089974, 0.742821, 0, 1.0};
Point(8) = {0.082501, 0.744247, 0, 1.0};
Point(9) = {0.074242, 0.745718, 0, 1.0};
Point(10) = {0.065344, 0.747131, 0, 1.0};
Point(11) = {0.055965, 0.748367, 0, 1.0};
Point(12) = {0.046270, 0.749312, 0, 1.0};
Point(13) = {0.036431, 0.749876, 0, 1.0};
Point(14) = {0.026617, 0.750000, 0, 1.0};
Point(15) = {0.016998, 0.749653, 0, 1.0};
Point(16) = {0.012314, 0.749302, 0, 1.0};
Point(17) = {0.007741, 0.748832, 0, 1.0};
Point(18) = {0.003298, 0.748249, 0, 1.0};
Point(19) = {-0.000998, 0.747554, 0, 1.0};
Point(20) = {-0.005126, 0.746754, 0, 1.0};
Point(21) = {-0.009068, 0.745856, 0, 1.0};
Point(22) = {-0.012810, 0.744866, 0, 1.0};
Point(23) = {-0.016334, 0.743790, 0, 1.0};
Point(24) = {-0.019628, 0.742638, 0, 1.0};
Point(25) = {-0.022675, 0.741429, 0, 1.0};
Point(26) = {-0.025464, 0.740185, 0, 1.0};
Point(27) = {-0.027986, 0.738923, 0, 1.0};
Point(28) = {-0.030229, 0.737649, 0, 1.0};
Point(29) = {-0.032181, 0.736349, 0, 1.0};
Point(30) = {-0.033833, 0.734998, 0, 1.0};
Point(31) = {-0.035176, 0.733594, 0, 1.0};
Point(32) = {-0.036208, 0.732162, 0, 1.0};
Point(33) = {-0.036927, 0.730776, 0, 1.0};
Point(34) = {-0.037335, 0.729526, 0, 1.0};
Point(35) = {-0.037434, 0.728491, 0, 1.0};
Point(36) = {-0.037227, 0.727696, 0, 1.0};
Point(37) = {-0.036710, 0.727116, 0, 1.0};
Point(38) = {-0.035884, 0.726694, 0, 1.0};
Point(39) = {-0.034748, 0.726371, 0, 1.0};
Point(40) = {-0.033307, 0.726114, 0, 1.0};
Point(41) = {-0.031563, 0.725912, 0, 1.0};
Point(42) = {-0.029526, 0.725773, 0, 1.0};
Point(43) = {-0.027203, 0.725702, 0, 1.0};
Point(44) = {-0.024606, 0.725698, 0, 1.0};
Point(45) = {-0.021747, 0.725753, 0, 1.0};
Point(46) = {-0.018634, 0.725863, 0, 1.0};
Point(47) = {-0.015283, 0.726026, 0, 1.0};
Point(48) = {-0.011707, 0.726246, 0, 1.0};
Point(49) = {-0.007924, 0.726525, 0, 1.0};
Point(50) = {-0.003949, 0.726871, 0, 1.0};
Point(51) = {0.000203, 0.727287, 0, 1.0};
Point(52) = {0.004510, 0.727781, 0, 1.0};
Point(53) = {0.008954, 0.728358, 0, 1.0};
Point(54) = {0.013516, 0.729015, 0, 1.0};
Point(55) = {0.018177, 0.729742, 0, 1.0};
Point(56) = {0.027721, 0.731354, 0, 1.0};
Point(57) = {0.037426, 0.733074, 0, 1.0};
Point(58) = {0.047131, 0.734777, 0, 1.0};
Point(59) = {0.056677, 0.736347, 0, 1.0};
Point(60) = {0.065904, 0.737684, 0, 1.0};
Point(61) = {0.074657, 0.738717, 0, 1.0};
Point(62) = {0.082788, 0.739392, 0, 1.0};
Point(63) = {0.090160, 0.739682, 0, 1.0};
Point(64) = {0.096646, 0.739589, 0, 1.0};
Point(65) = {0.102130, 0.739159, 0, 1.0};
Point(66) = {0.106517, 0.738499, 0, 1.0};
Point(67) = {0.109718, 0.737778, 0, 1.0};
Point(68) = {0.111669, 0.737213, 0, 1.0};
Point(69) = {-0.112325, -0.736997, 0, 1.0};
Point(70) = {-0.111664, -0.737297, 0, 1.0};
Point(71) = {-0.109700, -0.738077, 0, 1.0};
Point(72) = {-0.106480, -0.739118, 0, 1.0};
Point(73) = {-0.102065, -0.740268, 0, 1.0};
Point(74) = {-0.096533, -0.741494, 0, 1.0};
Point(75) = {-0.089974, -0.742821, 0, 1.0};
Point(76) = {-0.082501, -0.744247, 0, 1.0};
Point(77) = {-0.074242, -0.745718, 0, 1.0};
Point(78) = {-0.065344, -0.747131, 0, 1.0};
Point(79) = {-0.055965, -0.748367, 0, 1.0};
Point(80) = {-0.046270, -0.749312, 0, 1.0};
Point(81) = {-0.036431, -0.749876, 0, 1.0};
Point(82) = {-0.026617, -0.750000, 0, 1.0};
Point(83) = {-0.016998, -0.749653, 0, 1.0};
Point(84) = {-0.012314, -0.749302, 0, 1.0};
Point(85) = {-0.007741, -0.748832, 0, 1.0};
Point(86) = {-0.003298, -0.748249, 0, 1.0};
Point(87) = {0.000998, -0.747554, 0, 1.0};
Point(88) = {0.005126, -0.746754, 0, 1.0};
Point(89) = {0.009068, -0.745856, 0, 1.0};
Point(90) = {0.012810, -0.744866, 0, 1.0};
Point(91) = {0.016334, -0.743790, 0, 1.0};
Point(92) = {0.019628, -0.742638, 0, 1.0};
Point(93) = {0.022675, -0.741429, 0, 1.0};
Point(94) = {0.025464, -0.740185, 0, 1.0};
Point(95) = {0.027986, -0.738923, 0, 1.0};
Point(96) = {0.030229, -0.737649, 0, 1.0};
Point(97) = {0.032181, -0.736349, 0, 1.0};
Point(98) = {0.033833, -0.734998, 0, 1.0};
Point(99) = {0.035176, -0.733594, 0, 1.0};
Point(100) = {0.036208, -0.732162, 0, 1.0};
Point(101) = {0.036927, -0.730776, 0, 1.0};
Point(102) = {0.037335, -0.729526, 0, 1.0};
Point(103) = {0.037434, -0.728491, 0, 1.0};
Point(104) = {0.037227, -0.727696, 0, 1.0};
Point(105) = {0.036710, -0.727116, 0, 1.0};
Point(106) = {0.035884, -0.726694, 0, 1.0};
Point(107) = {0.034748, -0.726371, 0, 1.0};
Point(108) = {0.033307, -0.726114, 0, 1.0};
Point(109) = {0.031563, -0.725912, 0, 1.0};
Point(110) = {0.029526, -0.725773, 0, 1.0};
Point(111) = {0.027203, -0.725702, 0, 1.0};
Point(112) = {0.024606, -0.725698, 0, 1.0};
Point(113) = {0.021747, -0.725753, 0, 1.0};
Point(114) = {0.018634, -0.725863, 0, 1.0};
Point(115) = {0.015283, -0.726026, 0, 1.0};
Point(116) = {0.011707, -0.726246, 0, 1.0};
Point(117) = {0.007924, -0.726525, 0, 1.0};
Point(118) = {0.003949, -0.726871, 0, 1.0};
Point(119) = {-0.000203, -0.727287, 0, 1.0};
Point(120) = {-0.004510, -0.727781, 0, 1.0};
Point(121) = {-0.008954, -0.728358, 0, 1.0};
Point(122) = {-0.013516, -0.729015, 0, 1.0};
Point(123) = {-0.018177, -0.729742, 0, 1.0};
Point(124) = {-0.027721, -0.731354, 0, 1.0};
Point(125) = {-0.037426, -0.733074, 0, 1.0};
Point(126) = {-0.047131, -0.734777, 0, 1.0};
Point(127) = {-0.056677, -0.736347, 0, 1.0};
Point(128) = {-0.065904, -0.737684, 0, 1.0};
Point(129) = {-0.074657, -0.738717, 0, 1.0};
Point(130) = {-0.082788, -0.739392, 0, 1.0};
Point(131) = {-0.090160, -0.739682, 0, 1.0};
Point(132) = {-0.096646, -0.739589, 0, 1.0};
Point(133) = {-0.102130, -0.739159, 0, 1.0};
Point(134) = {-0.106517, -0.738499, 0, 1.0};
Point(135) = {-0.109718, -0.737778, 0, 1.0};
Point(136) = {-0.111669, -0.737213, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:51};
Spline(3) = {51:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:86};
Spline(6) = {86:119};
Spline(7) = {119:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html