SetFactory("OpenCASCADE");

Point(1) = {0.073905, 0.717493, 0, 1.0};
Point(2) = {0.073359, 0.717665, 0, 1.0};
Point(3) = {0.071785, 0.718248, 0, 1.0};
Point(4) = {0.069328, 0.719282, 0, 1.0};
Point(5) = {0.066128, 0.720728, 0, 1.0};
Point(6) = {0.062284, 0.722499, 0, 1.0};
Point(7) = {0.057841, 0.724508, 0, 1.0};
Point(8) = {0.052824, 0.726735, 0, 1.0};
Point(9) = {0.047335, 0.729165, 0, 1.0};
Point(10) = {0.041483, 0.731741, 0, 1.0};
Point(11) = {0.035370, 0.734381, 0, 1.0};
Point(12) = {0.029088, 0.736980, 0, 1.0};
Point(13) = {0.022680, 0.739389, 0, 1.0};
Point(14) = {0.016091, 0.741563, 0, 1.0};
Point(15) = {0.009379, 0.743482, 0, 1.0};
Point(16) = {0.002550, 0.745102, 0, 1.0};
Point(17) = {-0.004396, 0.746453, 0, 1.0};
Point(18) = {-0.011382, 0.747575, 0, 1.0};
Point(19) = {-0.018328, 0.748479, 0, 1.0};
Point(20) = {-0.025152, 0.749169, 0, 1.0};
Point(21) = {-0.031778, 0.749650, 0, 1.0};
Point(22) = {-0.038131, 0.749925, 0, 1.0};
Point(23) = {-0.044140, 0.750000, 0, 1.0};
Point(24) = {-0.049736, 0.749880, 0, 1.0};
Point(25) = {-0.054856, 0.749569, 0, 1.0};
Point(26) = {-0.059447, 0.749076, 0, 1.0};
Point(27) = {-0.063457, 0.748411, 0, 1.0};
Point(28) = {-0.066853, 0.747588, 0, 1.0};
Point(29) = {-0.069593, 0.746619, 0, 1.0};
Point(30) = {-0.071689, 0.745533, 0, 1.0};
Point(31) = {-0.073111, 0.744408, 0, 1.0};
Point(32) = {-0.073835, 0.743330, 0, 1.0};
Point(33) = {-0.073840, 0.743314, 0, 1.0};
Point(34) = {-0.073897, 0.743076, 0, 1.0};
Point(35) = {-0.073903, 0.742965, 0, 1.0};
Point(36) = {-0.073891, 0.742864, 0, 1.0};
Point(37) = {-0.073854, 0.742766, 0, 1.0};
Point(38) = {-0.073793, 0.742663, 0, 1.0};
Point(39) = {-0.073631, 0.742458, 0, 1.0};
Point(40) = {-0.073617, 0.742443, 0, 1.0};
Point(41) = {-0.072336, 0.741420, 0, 1.0};
Point(42) = {-0.070193, 0.740184, 0, 1.0};
Point(43) = {-0.067265, 0.738786, 0, 1.0};
Point(44) = {-0.063620, 0.737260, 0, 1.0};
Point(45) = {-0.059308, 0.735634, 0, 1.0};
Point(46) = {-0.054394, 0.733938, 0, 1.0};
Point(47) = {-0.048937, 0.732203, 0, 1.0};
Point(48) = {-0.043008, 0.730461, 0, 1.0};
Point(49) = {-0.036674, 0.728744, 0, 1.0};
Point(50) = {-0.030012, 0.727084, 0, 1.0};
Point(51) = {-0.023094, 0.725518, 0, 1.0};
Point(52) = {-0.016000, 0.724084, 0, 1.0};
Point(53) = {-0.008808, 0.722831, 0, 1.0};
Point(54) = {-0.001578, 0.721840, 0, 1.0};
Point(55) = {0.005720, 0.721160, 0, 1.0};
Point(56) = {0.013107, 0.720730, 0, 1.0};
Point(57) = {0.020503, 0.720505, 0, 1.0};
Point(58) = {0.027907, 0.720420, 0, 1.0};
Point(59) = {0.035208, 0.720356, 0, 1.0};
Point(60) = {0.042266, 0.720248, 0, 1.0};
Point(61) = {0.048939, 0.720056, 0, 1.0};
Point(62) = {0.055079, 0.719761, 0, 1.0};
Point(63) = {0.060545, 0.719369, 0, 1.0};
Point(64) = {0.065208, 0.718904, 0, 1.0};
Point(65) = {0.068951, 0.718414, 0, 1.0};
Point(66) = {0.071686, 0.717963, 0, 1.0};
Point(67) = {0.073349, 0.717627, 0, 1.0};
Point(68) = {-0.073905, -0.717493, 0, 1.0};
Point(69) = {-0.073359, -0.717665, 0, 1.0};
Point(70) = {-0.071785, -0.718248, 0, 1.0};
Point(71) = {-0.069328, -0.719282, 0, 1.0};
Point(72) = {-0.066128, -0.720728, 0, 1.0};
Point(73) = {-0.062284, -0.722499, 0, 1.0};
Point(74) = {-0.057841, -0.724508, 0, 1.0};
Point(75) = {-0.052824, -0.726735, 0, 1.0};
Point(76) = {-0.047335, -0.729165, 0, 1.0};
Point(77) = {-0.041483, -0.731741, 0, 1.0};
Point(78) = {-0.035370, -0.734381, 0, 1.0};
Point(79) = {-0.029088, -0.736980, 0, 1.0};
Point(80) = {-0.022680, -0.739389, 0, 1.0};
Point(81) = {-0.016091, -0.741563, 0, 1.0};
Point(82) = {-0.009379, -0.743482, 0, 1.0};
Point(83) = {-0.002550, -0.745102, 0, 1.0};
Point(84) = {0.004396, -0.746453, 0, 1.0};
Point(85) = {0.011382, -0.747575, 0, 1.0};
Point(86) = {0.018328, -0.748479, 0, 1.0};
Point(87) = {0.025152, -0.749169, 0, 1.0};
Point(88) = {0.031778, -0.749650, 0, 1.0};
Point(89) = {0.038131, -0.749925, 0, 1.0};
Point(90) = {0.044140, -0.750000, 0, 1.0};
Point(91) = {0.049736, -0.749880, 0, 1.0};
Point(92) = {0.054856, -0.749569, 0, 1.0};
Point(93) = {0.059447, -0.749076, 0, 1.0};
Point(94) = {0.063457, -0.748411, 0, 1.0};
Point(95) = {0.066853, -0.747588, 0, 1.0};
Point(96) = {0.069593, -0.746619, 0, 1.0};
Point(97) = {0.071689, -0.745533, 0, 1.0};
Point(98) = {0.073111, -0.744408, 0, 1.0};
Point(99) = {0.073835, -0.743330, 0, 1.0};
Point(100) = {0.073840, -0.743314, 0, 1.0};
Point(101) = {0.073897, -0.743076, 0, 1.0};
Point(102) = {0.073903, -0.742965, 0, 1.0};
Point(103) = {0.073891, -0.742864, 0, 1.0};
Point(104) = {0.073854, -0.742766, 0, 1.0};
Point(105) = {0.073793, -0.742663, 0, 1.0};
Point(106) = {0.073631, -0.742458, 0, 1.0};
Point(107) = {0.073617, -0.742443, 0, 1.0};
Point(108) = {0.072336, -0.741420, 0, 1.0};
Point(109) = {0.070193, -0.740184, 0, 1.0};
Point(110) = {0.067265, -0.738786, 0, 1.0};
Point(111) = {0.063620, -0.737260, 0, 1.0};
Point(112) = {0.059308, -0.735634, 0, 1.0};
Point(113) = {0.054394, -0.733938, 0, 1.0};
Point(114) = {0.048937, -0.732203, 0, 1.0};
Point(115) = {0.043008, -0.730461, 0, 1.0};
Point(116) = {0.036674, -0.728744, 0, 1.0};
Point(117) = {0.030012, -0.727084, 0, 1.0};
Point(118) = {0.023094, -0.725518, 0, 1.0};
Point(119) = {0.016000, -0.724084, 0, 1.0};
Point(120) = {0.008808, -0.722831, 0, 1.0};
Point(121) = {0.001578, -0.721840, 0, 1.0};
Point(122) = {-0.005720, -0.721160, 0, 1.0};
Point(123) = {-0.013107, -0.720730, 0, 1.0};
Point(124) = {-0.020503, -0.720505, 0, 1.0};
Point(125) = {-0.027907, -0.720420, 0, 1.0};
Point(126) = {-0.035208, -0.720356, 0, 1.0};
Point(127) = {-0.042266, -0.720248, 0, 1.0};
Point(128) = {-0.048939, -0.720056, 0, 1.0};
Point(129) = {-0.055079, -0.719761, 0, 1.0};
Point(130) = {-0.060545, -0.719369, 0, 1.0};
Point(131) = {-0.065208, -0.718904, 0, 1.0};
Point(132) = {-0.068951, -0.718414, 0, 1.0};
Point(133) = {-0.071686, -0.717963, 0, 1.0};
Point(134) = {-0.073349, -0.717627, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html