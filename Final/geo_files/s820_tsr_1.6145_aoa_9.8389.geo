SetFactory("OpenCASCADE");

Point(1) = {0.147058, 0.706658, 0, 1.0};
Point(2) = {0.146330, 0.706887, 0, 1.0};
Point(3) = {0.144231, 0.707664, 0, 1.0};
Point(4) = {0.140955, 0.709043, 0, 1.0};
Point(5) = {0.136689, 0.710971, 0, 1.0};
Point(6) = {0.131564, 0.713332, 0, 1.0};
Point(7) = {0.125639, 0.716011, 0, 1.0};
Point(8) = {0.118950, 0.718980, 0, 1.0};
Point(9) = {0.111631, 0.722221, 0, 1.0};
Point(10) = {0.103828, 0.725655, 0, 1.0};
Point(11) = {0.095678, 0.729175, 0, 1.0};
Point(12) = {0.087302, 0.732640, 0, 1.0};
Point(13) = {0.078758, 0.735852, 0, 1.0};
Point(14) = {0.069973, 0.738750, 0, 1.0};
Point(15) = {0.061023, 0.741309, 0, 1.0};
Point(16) = {0.051919, 0.743470, 0, 1.0};
Point(17) = {0.042657, 0.745271, 0, 1.0};
Point(18) = {0.033342, 0.746767, 0, 1.0};
Point(19) = {0.024082, 0.747972, 0, 1.0};
Point(20) = {0.014983, 0.748893, 0, 1.0};
Point(21) = {0.006148, 0.749534, 0, 1.0};
Point(22) = {-0.002322, 0.749900, 0, 1.0};
Point(23) = {-0.010335, 0.750000, 0, 1.0};
Point(24) = {-0.017796, 0.749840, 0, 1.0};
Point(25) = {-0.024623, 0.749425, 0, 1.0};
Point(26) = {-0.030744, 0.748769, 0, 1.0};
Point(27) = {-0.036091, 0.747881, 0, 1.0};
Point(28) = {-0.040618, 0.746783, 0, 1.0};
Point(29) = {-0.044271, 0.745492, 0, 1.0};
Point(30) = {-0.047066, 0.744045, 0, 1.0};
Point(31) = {-0.048963, 0.742543, 0, 1.0};
Point(32) = {-0.049927, 0.741107, 0, 1.0};
Point(33) = {-0.049934, 0.741085, 0, 1.0};
Point(34) = {-0.050010, 0.740767, 0, 1.0};
Point(35) = {-0.050018, 0.740621, 0, 1.0};
Point(36) = {-0.050002, 0.740485, 0, 1.0};
Point(37) = {-0.049952, 0.740354, 0, 1.0};
Point(38) = {-0.049871, 0.740217, 0, 1.0};
Point(39) = {-0.049655, 0.739944, 0, 1.0};
Point(40) = {-0.049637, 0.739924, 0, 1.0};
Point(41) = {-0.047929, 0.738560, 0, 1.0};
Point(42) = {-0.045071, 0.736912, 0, 1.0};
Point(43) = {-0.041168, 0.735049, 0, 1.0};
Point(44) = {-0.036307, 0.733014, 0, 1.0};
Point(45) = {-0.030558, 0.730845, 0, 1.0};
Point(46) = {-0.024006, 0.728585, 0, 1.0};
Point(47) = {-0.016731, 0.726271, 0, 1.0};
Point(48) = {-0.008825, 0.723948, 0, 1.0};
Point(49) = {-0.000380, 0.721658, 0, 1.0};
Point(50) = {0.008504, 0.719446, 0, 1.0};
Point(51) = {0.017727, 0.717357, 0, 1.0};
Point(52) = {0.027185, 0.715446, 0, 1.0};
Point(53) = {0.036774, 0.713774, 0, 1.0};
Point(54) = {0.046414, 0.712453, 0, 1.0};
Point(55) = {0.056146, 0.711548, 0, 1.0};
Point(56) = {0.065995, 0.710973, 0, 1.0};
Point(57) = {0.075856, 0.710674, 0, 1.0};
Point(58) = {0.085728, 0.710561, 0, 1.0};
Point(59) = {0.095462, 0.710476, 0, 1.0};
Point(60) = {0.104873, 0.710331, 0, 1.0};
Point(61) = {0.113769, 0.710075, 0, 1.0};
Point(62) = {0.121956, 0.709682, 0, 1.0};
Point(63) = {0.129245, 0.709159, 0, 1.0};
Point(64) = {0.135461, 0.708539, 0, 1.0};
Point(65) = {0.140453, 0.707886, 0, 1.0};
Point(66) = {0.144099, 0.707285, 0, 1.0};
Point(67) = {0.146317, 0.706836, 0, 1.0};
Point(68) = {-0.147058, -0.706658, 0, 1.0};
Point(69) = {-0.146330, -0.706887, 0, 1.0};
Point(70) = {-0.144231, -0.707664, 0, 1.0};
Point(71) = {-0.140955, -0.709043, 0, 1.0};
Point(72) = {-0.136689, -0.710971, 0, 1.0};
Point(73) = {-0.131564, -0.713332, 0, 1.0};
Point(74) = {-0.125639, -0.716011, 0, 1.0};
Point(75) = {-0.118950, -0.718980, 0, 1.0};
Point(76) = {-0.111631, -0.722221, 0, 1.0};
Point(77) = {-0.103828, -0.725655, 0, 1.0};
Point(78) = {-0.095678, -0.729175, 0, 1.0};
Point(79) = {-0.087302, -0.732640, 0, 1.0};
Point(80) = {-0.078758, -0.735852, 0, 1.0};
Point(81) = {-0.069973, -0.738750, 0, 1.0};
Point(82) = {-0.061023, -0.741309, 0, 1.0};
Point(83) = {-0.051919, -0.743470, 0, 1.0};
Point(84) = {-0.042657, -0.745271, 0, 1.0};
Point(85) = {-0.033342, -0.746767, 0, 1.0};
Point(86) = {-0.024082, -0.747972, 0, 1.0};
Point(87) = {-0.014983, -0.748893, 0, 1.0};
Point(88) = {-0.006148, -0.749534, 0, 1.0};
Point(89) = {0.002322, -0.749900, 0, 1.0};
Point(90) = {0.010335, -0.750000, 0, 1.0};
Point(91) = {0.017796, -0.749840, 0, 1.0};
Point(92) = {0.024623, -0.749425, 0, 1.0};
Point(93) = {0.030744, -0.748769, 0, 1.0};
Point(94) = {0.036091, -0.747881, 0, 1.0};
Point(95) = {0.040618, -0.746783, 0, 1.0};
Point(96) = {0.044271, -0.745492, 0, 1.0};
Point(97) = {0.047066, -0.744045, 0, 1.0};
Point(98) = {0.048963, -0.742543, 0, 1.0};
Point(99) = {0.049927, -0.741107, 0, 1.0};
Point(100) = {0.049934, -0.741085, 0, 1.0};
Point(101) = {0.050010, -0.740767, 0, 1.0};
Point(102) = {0.050018, -0.740621, 0, 1.0};
Point(103) = {0.050002, -0.740485, 0, 1.0};
Point(104) = {0.049952, -0.740354, 0, 1.0};
Point(105) = {0.049871, -0.740217, 0, 1.0};
Point(106) = {0.049655, -0.739944, 0, 1.0};
Point(107) = {0.049637, -0.739924, 0, 1.0};
Point(108) = {0.047929, -0.738560, 0, 1.0};
Point(109) = {0.045071, -0.736912, 0, 1.0};
Point(110) = {0.041168, -0.735049, 0, 1.0};
Point(111) = {0.036307, -0.733014, 0, 1.0};
Point(112) = {0.030558, -0.730845, 0, 1.0};
Point(113) = {0.024006, -0.728585, 0, 1.0};
Point(114) = {0.016731, -0.726271, 0, 1.0};
Point(115) = {0.008825, -0.723948, 0, 1.0};
Point(116) = {0.000380, -0.721658, 0, 1.0};
Point(117) = {-0.008504, -0.719446, 0, 1.0};
Point(118) = {-0.017727, -0.717357, 0, 1.0};
Point(119) = {-0.027185, -0.715446, 0, 1.0};
Point(120) = {-0.036774, -0.713774, 0, 1.0};
Point(121) = {-0.046414, -0.712453, 0, 1.0};
Point(122) = {-0.056146, -0.711548, 0, 1.0};
Point(123) = {-0.065995, -0.710973, 0, 1.0};
Point(124) = {-0.075856, -0.710674, 0, 1.0};
Point(125) = {-0.085728, -0.710561, 0, 1.0};
Point(126) = {-0.095462, -0.710476, 0, 1.0};
Point(127) = {-0.104873, -0.710331, 0, 1.0};
Point(128) = {-0.113769, -0.710075, 0, 1.0};
Point(129) = {-0.121956, -0.709682, 0, 1.0};
Point(130) = {-0.129245, -0.709159, 0, 1.0};
Point(131) = {-0.135461, -0.708539, 0, 1.0};
Point(132) = {-0.140453, -0.707886, 0, 1.0};
Point(133) = {-0.144099, -0.707285, 0, 1.0};
Point(134) = {-0.146317, -0.706836, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html