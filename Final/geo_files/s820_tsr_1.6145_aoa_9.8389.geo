SetFactory("OpenCASCADE");

Point(1) = {0.073529, 0.728329, 0, 1.0};
Point(2) = {0.073165, 0.728443, 0, 1.0};
Point(3) = {0.072116, 0.728832, 0, 1.0};
Point(4) = {0.070477, 0.729522, 0, 1.0};
Point(5) = {0.068344, 0.730486, 0, 1.0};
Point(6) = {0.065782, 0.731666, 0, 1.0};
Point(7) = {0.062819, 0.733006, 0, 1.0};
Point(8) = {0.059475, 0.734490, 0, 1.0};
Point(9) = {0.055816, 0.736110, 0, 1.0};
Point(10) = {0.051914, 0.737828, 0, 1.0};
Point(11) = {0.047839, 0.739587, 0, 1.0};
Point(12) = {0.043651, 0.741320, 0, 1.0};
Point(13) = {0.039379, 0.742926, 0, 1.0};
Point(14) = {0.034987, 0.744375, 0, 1.0};
Point(15) = {0.030512, 0.745655, 0, 1.0};
Point(16) = {0.025960, 0.746735, 0, 1.0};
Point(17) = {0.021329, 0.747635, 0, 1.0};
Point(18) = {0.016671, 0.748383, 0, 1.0};
Point(19) = {0.012041, 0.748986, 0, 1.0};
Point(20) = {0.007492, 0.749446, 0, 1.0};
Point(21) = {0.003074, 0.749767, 0, 1.0};
Point(22) = {-0.001161, 0.749950, 0, 1.0};
Point(23) = {-0.005167, 0.750000, 0, 1.0};
Point(24) = {-0.008898, 0.749920, 0, 1.0};
Point(25) = {-0.012311, 0.749713, 0, 1.0};
Point(26) = {-0.015372, 0.749384, 0, 1.0};
Point(27) = {-0.018045, 0.748941, 0, 1.0};
Point(28) = {-0.020309, 0.748392, 0, 1.0};
Point(29) = {-0.022136, 0.747746, 0, 1.0};
Point(30) = {-0.023533, 0.747022, 0, 1.0};
Point(31) = {-0.024481, 0.746272, 0, 1.0};
Point(32) = {-0.024963, 0.745553, 0, 1.0};
Point(33) = {-0.024967, 0.745542, 0, 1.0};
Point(34) = {-0.025005, 0.745384, 0, 1.0};
Point(35) = {-0.025009, 0.745310, 0, 1.0};
Point(36) = {-0.025001, 0.745243, 0, 1.0};
Point(37) = {-0.024976, 0.745177, 0, 1.0};
Point(38) = {-0.024936, 0.745108, 0, 1.0};
Point(39) = {-0.024828, 0.744972, 0, 1.0};
Point(40) = {-0.024818, 0.744962, 0, 1.0};
Point(41) = {-0.023965, 0.744280, 0, 1.0};
Point(42) = {-0.022536, 0.743456, 0, 1.0};
Point(43) = {-0.020584, 0.742524, 0, 1.0};
Point(44) = {-0.018154, 0.741507, 0, 1.0};
Point(45) = {-0.015279, 0.740423, 0, 1.0};
Point(46) = {-0.012003, 0.739292, 0, 1.0};
Point(47) = {-0.008365, 0.738136, 0, 1.0};
Point(48) = {-0.004413, 0.736974, 0, 1.0};
Point(49) = {-0.000190, 0.735829, 0, 1.0};
Point(50) = {0.004252, 0.734723, 0, 1.0};
Point(51) = {0.008864, 0.733679, 0, 1.0};
Point(52) = {0.013592, 0.732723, 0, 1.0};
Point(53) = {0.018387, 0.731887, 0, 1.0};
Point(54) = {0.023207, 0.731227, 0, 1.0};
Point(55) = {0.028073, 0.730774, 0, 1.0};
Point(56) = {0.032997, 0.730487, 0, 1.0};
Point(57) = {0.037928, 0.730337, 0, 1.0};
Point(58) = {0.042864, 0.730280, 0, 1.0};
Point(59) = {0.047731, 0.730238, 0, 1.0};
Point(60) = {0.052437, 0.730166, 0, 1.0};
Point(61) = {0.056885, 0.730037, 0, 1.0};
Point(62) = {0.060978, 0.729841, 0, 1.0};
Point(63) = {0.064622, 0.729579, 0, 1.0};
Point(64) = {0.067731, 0.729270, 0, 1.0};
Point(65) = {0.070227, 0.728943, 0, 1.0};
Point(66) = {0.072050, 0.728642, 0, 1.0};
Point(67) = {0.073158, 0.728418, 0, 1.0};
Point(68) = {-0.073529, -0.728329, 0, 1.0};
Point(69) = {-0.073165, -0.728443, 0, 1.0};
Point(70) = {-0.072116, -0.728832, 0, 1.0};
Point(71) = {-0.070477, -0.729522, 0, 1.0};
Point(72) = {-0.068344, -0.730486, 0, 1.0};
Point(73) = {-0.065782, -0.731666, 0, 1.0};
Point(74) = {-0.062819, -0.733006, 0, 1.0};
Point(75) = {-0.059475, -0.734490, 0, 1.0};
Point(76) = {-0.055816, -0.736110, 0, 1.0};
Point(77) = {-0.051914, -0.737828, 0, 1.0};
Point(78) = {-0.047839, -0.739587, 0, 1.0};
Point(79) = {-0.043651, -0.741320, 0, 1.0};
Point(80) = {-0.039379, -0.742926, 0, 1.0};
Point(81) = {-0.034987, -0.744375, 0, 1.0};
Point(82) = {-0.030512, -0.745655, 0, 1.0};
Point(83) = {-0.025960, -0.746735, 0, 1.0};
Point(84) = {-0.021329, -0.747635, 0, 1.0};
Point(85) = {-0.016671, -0.748383, 0, 1.0};
Point(86) = {-0.012041, -0.748986, 0, 1.0};
Point(87) = {-0.007492, -0.749446, 0, 1.0};
Point(88) = {-0.003074, -0.749767, 0, 1.0};
Point(89) = {0.001161, -0.749950, 0, 1.0};
Point(90) = {0.005167, -0.750000, 0, 1.0};
Point(91) = {0.008898, -0.749920, 0, 1.0};
Point(92) = {0.012311, -0.749713, 0, 1.0};
Point(93) = {0.015372, -0.749384, 0, 1.0};
Point(94) = {0.018045, -0.748941, 0, 1.0};
Point(95) = {0.020309, -0.748392, 0, 1.0};
Point(96) = {0.022136, -0.747746, 0, 1.0};
Point(97) = {0.023533, -0.747022, 0, 1.0};
Point(98) = {0.024481, -0.746272, 0, 1.0};
Point(99) = {0.024963, -0.745553, 0, 1.0};
Point(100) = {0.024967, -0.745542, 0, 1.0};
Point(101) = {0.025005, -0.745384, 0, 1.0};
Point(102) = {0.025009, -0.745310, 0, 1.0};
Point(103) = {0.025001, -0.745243, 0, 1.0};
Point(104) = {0.024976, -0.745177, 0, 1.0};
Point(105) = {0.024936, -0.745108, 0, 1.0};
Point(106) = {0.024828, -0.744972, 0, 1.0};
Point(107) = {0.024818, -0.744962, 0, 1.0};
Point(108) = {0.023965, -0.744280, 0, 1.0};
Point(109) = {0.022536, -0.743456, 0, 1.0};
Point(110) = {0.020584, -0.742524, 0, 1.0};
Point(111) = {0.018154, -0.741507, 0, 1.0};
Point(112) = {0.015279, -0.740423, 0, 1.0};
Point(113) = {0.012003, -0.739292, 0, 1.0};
Point(114) = {0.008365, -0.738136, 0, 1.0};
Point(115) = {0.004413, -0.736974, 0, 1.0};
Point(116) = {0.000190, -0.735829, 0, 1.0};
Point(117) = {-0.004252, -0.734723, 0, 1.0};
Point(118) = {-0.008864, -0.733679, 0, 1.0};
Point(119) = {-0.013592, -0.732723, 0, 1.0};
Point(120) = {-0.018387, -0.731887, 0, 1.0};
Point(121) = {-0.023207, -0.731227, 0, 1.0};
Point(122) = {-0.028073, -0.730774, 0, 1.0};
Point(123) = {-0.032997, -0.730487, 0, 1.0};
Point(124) = {-0.037928, -0.730337, 0, 1.0};
Point(125) = {-0.042864, -0.730280, 0, 1.0};
Point(126) = {-0.047731, -0.730238, 0, 1.0};
Point(127) = {-0.052437, -0.730166, 0, 1.0};
Point(128) = {-0.056885, -0.730037, 0, 1.0};
Point(129) = {-0.060978, -0.729841, 0, 1.0};
Point(130) = {-0.064622, -0.729579, 0, 1.0};
Point(131) = {-0.067731, -0.729270, 0, 1.0};
Point(132) = {-0.070227, -0.728943, 0, 1.0};
Point(133) = {-0.072050, -0.728642, 0, 1.0};
Point(134) = {-0.073158, -0.728418, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html