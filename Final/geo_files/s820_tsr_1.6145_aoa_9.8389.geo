SetFactory("OpenCASCADE");

Point(1) = {0.110852, 0.717494, 0, 1.0};
Point(2) = {0.110305, 0.717665, 0, 1.0};
Point(3) = {0.108731, 0.718248, 0, 1.0};
Point(4) = {0.106274, 0.719283, 0, 1.0};
Point(5) = {0.103074, 0.720729, 0, 1.0};
Point(6) = {0.099231, 0.722499, 0, 1.0};
Point(7) = {0.094787, 0.724508, 0, 1.0};
Point(8) = {0.089771, 0.726735, 0, 1.0};
Point(9) = {0.084281, 0.729166, 0, 1.0};
Point(10) = {0.078429, 0.731742, 0, 1.0};
Point(11) = {0.072317, 0.734381, 0, 1.0};
Point(12) = {0.066034, 0.736980, 0, 1.0};
Point(13) = {0.059627, 0.739389, 0, 1.0};
Point(14) = {0.053038, 0.741563, 0, 1.0};
Point(15) = {0.046326, 0.743482, 0, 1.0};
Point(16) = {0.039498, 0.745102, 0, 1.0};
Point(17) = {0.032551, 0.746453, 0, 1.0};
Point(18) = {0.025565, 0.747575, 0, 1.0};
Point(19) = {0.018620, 0.748479, 0, 1.0};
Point(20) = {0.011796, 0.749169, 0, 1.0};
Point(21) = {0.005170, 0.749650, 0, 1.0};
Point(22) = {-0.001183, 0.749925, 0, 1.0};
Point(23) = {-0.007192, 0.750000, 0, 1.0};
Point(24) = {-0.012788, 0.749880, 0, 1.0};
Point(25) = {-0.017908, 0.749569, 0, 1.0};
Point(26) = {-0.022499, 0.749076, 0, 1.0};
Point(27) = {-0.026509, 0.748411, 0, 1.0};
Point(28) = {-0.029905, 0.747588, 0, 1.0};
Point(29) = {-0.032644, 0.746619, 0, 1.0};
Point(30) = {-0.034741, 0.745533, 0, 1.0};
Point(31) = {-0.036163, 0.744408, 0, 1.0};
Point(32) = {-0.036886, 0.743330, 0, 1.0};
Point(33) = {-0.036892, 0.743314, 0, 1.0};
Point(34) = {-0.036948, 0.743076, 0, 1.0};
Point(35) = {-0.036955, 0.742965, 0, 1.0};
Point(36) = {-0.036943, 0.742864, 0, 1.0};
Point(37) = {-0.036905, 0.742766, 0, 1.0};
Point(38) = {-0.036844, 0.742663, 0, 1.0};
Point(39) = {-0.036682, 0.742458, 0, 1.0};
Point(40) = {-0.036668, 0.742443, 0, 1.0};
Point(41) = {-0.035388, 0.741420, 0, 1.0};
Point(42) = {-0.033245, 0.740184, 0, 1.0};
Point(43) = {-0.030317, 0.738787, 0, 1.0};
Point(44) = {-0.026671, 0.737260, 0, 1.0};
Point(45) = {-0.022360, 0.735634, 0, 1.0};
Point(46) = {-0.017446, 0.733939, 0, 1.0};
Point(47) = {-0.011989, 0.732204, 0, 1.0};
Point(48) = {-0.006060, 0.730462, 0, 1.0};
Point(49) = {0.000274, 0.728744, 0, 1.0};
Point(50) = {0.006936, 0.727084, 0, 1.0};
Point(51) = {0.013854, 0.725518, 0, 1.0};
Point(52) = {0.020947, 0.724085, 0, 1.0};
Point(53) = {0.028139, 0.722831, 0, 1.0};
Point(54) = {0.035369, 0.721840, 0, 1.0};
Point(55) = {0.042668, 0.721161, 0, 1.0};
Point(56) = {0.050054, 0.720730, 0, 1.0};
Point(57) = {0.057450, 0.720506, 0, 1.0};
Point(58) = {0.064854, 0.720421, 0, 1.0};
Point(59) = {0.072155, 0.720357, 0, 1.0};
Point(60) = {0.079213, 0.720249, 0, 1.0};
Point(61) = {0.085885, 0.720056, 0, 1.0};
Point(62) = {0.092025, 0.719762, 0, 1.0};
Point(63) = {0.097492, 0.719369, 0, 1.0};
Point(64) = {0.102154, 0.718905, 0, 1.0};
Point(65) = {0.105898, 0.718415, 0, 1.0};
Point(66) = {0.108632, 0.717964, 0, 1.0};
Point(67) = {0.110295, 0.717628, 0, 1.0};
Point(68) = {-0.110852, -0.717494, 0, 1.0};
Point(69) = {-0.110305, -0.717665, 0, 1.0};
Point(70) = {-0.108731, -0.718248, 0, 1.0};
Point(71) = {-0.106274, -0.719283, 0, 1.0};
Point(72) = {-0.103074, -0.720729, 0, 1.0};
Point(73) = {-0.099231, -0.722499, 0, 1.0};
Point(74) = {-0.094787, -0.724508, 0, 1.0};
Point(75) = {-0.089771, -0.726735, 0, 1.0};
Point(76) = {-0.084281, -0.729166, 0, 1.0};
Point(77) = {-0.078429, -0.731742, 0, 1.0};
Point(78) = {-0.072317, -0.734381, 0, 1.0};
Point(79) = {-0.066034, -0.736980, 0, 1.0};
Point(80) = {-0.059627, -0.739389, 0, 1.0};
Point(81) = {-0.053038, -0.741563, 0, 1.0};
Point(82) = {-0.046326, -0.743482, 0, 1.0};
Point(83) = {-0.039498, -0.745102, 0, 1.0};
Point(84) = {-0.032551, -0.746453, 0, 1.0};
Point(85) = {-0.025565, -0.747575, 0, 1.0};
Point(86) = {-0.018620, -0.748479, 0, 1.0};
Point(87) = {-0.011796, -0.749169, 0, 1.0};
Point(88) = {-0.005170, -0.749650, 0, 1.0};
Point(89) = {0.001183, -0.749925, 0, 1.0};
Point(90) = {0.007192, -0.750000, 0, 1.0};
Point(91) = {0.012788, -0.749880, 0, 1.0};
Point(92) = {0.017908, -0.749569, 0, 1.0};
Point(93) = {0.022499, -0.749076, 0, 1.0};
Point(94) = {0.026509, -0.748411, 0, 1.0};
Point(95) = {0.029905, -0.747588, 0, 1.0};
Point(96) = {0.032644, -0.746619, 0, 1.0};
Point(97) = {0.034741, -0.745533, 0, 1.0};
Point(98) = {0.036163, -0.744408, 0, 1.0};
Point(99) = {0.036886, -0.743330, 0, 1.0};
Point(100) = {0.036892, -0.743314, 0, 1.0};
Point(101) = {0.036948, -0.743076, 0, 1.0};
Point(102) = {0.036955, -0.742965, 0, 1.0};
Point(103) = {0.036943, -0.742864, 0, 1.0};
Point(104) = {0.036905, -0.742766, 0, 1.0};
Point(105) = {0.036844, -0.742663, 0, 1.0};
Point(106) = {0.036682, -0.742458, 0, 1.0};
Point(107) = {0.036668, -0.742443, 0, 1.0};
Point(108) = {0.035388, -0.741420, 0, 1.0};
Point(109) = {0.033245, -0.740184, 0, 1.0};
Point(110) = {0.030317, -0.738787, 0, 1.0};
Point(111) = {0.026671, -0.737260, 0, 1.0};
Point(112) = {0.022360, -0.735634, 0, 1.0};
Point(113) = {0.017446, -0.733939, 0, 1.0};
Point(114) = {0.011989, -0.732204, 0, 1.0};
Point(115) = {0.006060, -0.730462, 0, 1.0};
Point(116) = {-0.000274, -0.728744, 0, 1.0};
Point(117) = {-0.006936, -0.727084, 0, 1.0};
Point(118) = {-0.013854, -0.725518, 0, 1.0};
Point(119) = {-0.020947, -0.724085, 0, 1.0};
Point(120) = {-0.028139, -0.722831, 0, 1.0};
Point(121) = {-0.035369, -0.721840, 0, 1.0};
Point(122) = {-0.042668, -0.721161, 0, 1.0};
Point(123) = {-0.050054, -0.720730, 0, 1.0};
Point(124) = {-0.057450, -0.720506, 0, 1.0};
Point(125) = {-0.064854, -0.720421, 0, 1.0};
Point(126) = {-0.072155, -0.720357, 0, 1.0};
Point(127) = {-0.079213, -0.720249, 0, 1.0};
Point(128) = {-0.085885, -0.720056, 0, 1.0};
Point(129) = {-0.092025, -0.719762, 0, 1.0};
Point(130) = {-0.097492, -0.719369, 0, 1.0};
Point(131) = {-0.102154, -0.718905, 0, 1.0};
Point(132) = {-0.105898, -0.718415, 0, 1.0};
Point(133) = {-0.108632, -0.717964, 0, 1.0};
Point(134) = {-0.110295, -0.717628, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html