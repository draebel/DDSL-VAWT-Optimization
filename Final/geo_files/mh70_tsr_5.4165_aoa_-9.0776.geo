SetFactory("OpenCASCADE");

Point(1) = {0.147495, 0.749942, 0, 1.0};
Point(2) = {0.146819, 0.749913, 0, 1.0};
Point(3) = {0.144841, 0.749842, 0, 1.0};
Point(4) = {0.141635, 0.749748, 0, 1.0};
Point(5) = {0.137251, 0.749645, 0, 1.0};
Point(6) = {0.131760, 0.749565, 0, 1.0};
Point(7) = {0.125261, 0.749539, 0, 1.0};
Point(8) = {0.117884, 0.749579, 0, 1.0};
Point(9) = {0.109762, 0.749672, 0, 1.0};
Point(10) = {0.101026, 0.749795, 0, 1.0};
Point(11) = {0.091812, 0.749919, 0, 1.0};
Point(12) = {0.082252, 0.750000, 0, 1.0};
Point(13) = {0.072467, 0.749984, 0, 1.0};
Point(14) = {0.062559, 0.749821, 0, 1.0};
Point(15) = {0.052617, 0.749466, 0, 1.0};
Point(16) = {0.042714, 0.748896, 0, 1.0};
Point(17) = {0.032932, 0.748114, 0, 1.0};
Point(18) = {0.023366, 0.747119, 0, 1.0};
Point(19) = {0.014103, 0.745911, 0, 1.0};
Point(20) = {0.005227, 0.744495, 0, 1.0};
Point(21) = {-0.003186, 0.742883, 0, 1.0};
Point(22) = {-0.011058, 0.741089, 0, 1.0};
Point(23) = {-0.018321, 0.739131, 0, 1.0};
Point(24) = {-0.024913, 0.737027, 0, 1.0};
Point(25) = {-0.030782, 0.734795, 0, 1.0};
Point(26) = {-0.035892, 0.732459, 0, 1.0};
Point(27) = {-0.040220, 0.730050, 0, 1.0};
Point(28) = {-0.043756, 0.727610, 0, 1.0};
Point(29) = {-0.046502, 0.725197, 0, 1.0};
Point(30) = {-0.048458, 0.722882, 0, 1.0};
Point(31) = {-0.049631, 0.720750, 0, 1.0};
Point(32) = {-0.050024, 0.719156, 0, 1.0};
Point(33) = {-0.050029, 0.718666, 0, 1.0};
Point(34) = {-0.049969, 0.718228, 0, 1.0};
Point(35) = {-0.049890, 0.717971, 0, 1.0};
Point(36) = {-0.049771, 0.717755, 0, 1.0};
Point(37) = {-0.049594, 0.717572, 0, 1.0};
Point(38) = {-0.049353, 0.717403, 0, 1.0};
Point(39) = {-0.048895, 0.717171, 0, 1.0};
Point(40) = {-0.048335, 0.716962, 0, 1.0};
Point(41) = {-0.048027, 0.716867, 0, 1.0};
Point(42) = {-0.045279, 0.716364, 0, 1.0};
Point(43) = {-0.041509, 0.716130, 0, 1.0};
Point(44) = {-0.036779, 0.716183, 0, 1.0};
Point(45) = {-0.031141, 0.716540, 0, 1.0};
Point(46) = {-0.024641, 0.717204, 0, 1.0};
Point(47) = {-0.017333, 0.718170, 0, 1.0};
Point(48) = {-0.009273, 0.719419, 0, 1.0};
Point(49) = {-0.000532, 0.720919, 0, 1.0};
Point(50) = {0.008800, 0.722633, 0, 1.0};
Point(51) = {0.018629, 0.724526, 0, 1.0};
Point(52) = {0.028849, 0.726555, 0, 1.0};
Point(53) = {0.039347, 0.728675, 0, 1.0};
Point(54) = {0.049998, 0.730841, 0, 1.0};
Point(55) = {0.060670, 0.733015, 0, 1.0};
Point(56) = {0.071230, 0.735160, 0, 1.0};
Point(57) = {0.081547, 0.737252, 0, 1.0};
Point(58) = {0.091499, 0.739264, 0, 1.0};
Point(59) = {0.100969, 0.741168, 0, 1.0};
Point(60) = {0.109839, 0.742937, 0, 1.0};
Point(61) = {0.118001, 0.744549, 0, 1.0};
Point(62) = {0.125352, 0.745981, 0, 1.0};
Point(63) = {0.131798, 0.747213, 0, 1.0};
Point(64) = {0.137250, 0.748226, 0, 1.0};
Point(65) = {0.141624, 0.749006, 0, 1.0};
Point(66) = {0.144840, 0.749545, 0, 1.0};
Point(67) = {0.146822, 0.749847, 0, 1.0};
Point(68) = {-0.147495, -0.749942, 0, 1.0};
Point(69) = {-0.146819, -0.749913, 0, 1.0};
Point(70) = {-0.144841, -0.749842, 0, 1.0};
Point(71) = {-0.141635, -0.749748, 0, 1.0};
Point(72) = {-0.137251, -0.749645, 0, 1.0};
Point(73) = {-0.131760, -0.749565, 0, 1.0};
Point(74) = {-0.125261, -0.749539, 0, 1.0};
Point(75) = {-0.117884, -0.749579, 0, 1.0};
Point(76) = {-0.109762, -0.749672, 0, 1.0};
Point(77) = {-0.101026, -0.749795, 0, 1.0};
Point(78) = {-0.091812, -0.749919, 0, 1.0};
Point(79) = {-0.082252, -0.750000, 0, 1.0};
Point(80) = {-0.072467, -0.749984, 0, 1.0};
Point(81) = {-0.062559, -0.749821, 0, 1.0};
Point(82) = {-0.052617, -0.749466, 0, 1.0};
Point(83) = {-0.042714, -0.748896, 0, 1.0};
Point(84) = {-0.032932, -0.748114, 0, 1.0};
Point(85) = {-0.023366, -0.747119, 0, 1.0};
Point(86) = {-0.014103, -0.745911, 0, 1.0};
Point(87) = {-0.005227, -0.744495, 0, 1.0};
Point(88) = {0.003186, -0.742883, 0, 1.0};
Point(89) = {0.011058, -0.741089, 0, 1.0};
Point(90) = {0.018321, -0.739131, 0, 1.0};
Point(91) = {0.024913, -0.737027, 0, 1.0};
Point(92) = {0.030782, -0.734795, 0, 1.0};
Point(93) = {0.035892, -0.732459, 0, 1.0};
Point(94) = {0.040220, -0.730050, 0, 1.0};
Point(95) = {0.043756, -0.727610, 0, 1.0};
Point(96) = {0.046502, -0.725197, 0, 1.0};
Point(97) = {0.048458, -0.722882, 0, 1.0};
Point(98) = {0.049631, -0.720750, 0, 1.0};
Point(99) = {0.050024, -0.719156, 0, 1.0};
Point(100) = {0.050029, -0.718666, 0, 1.0};
Point(101) = {0.049969, -0.718228, 0, 1.0};
Point(102) = {0.049890, -0.717971, 0, 1.0};
Point(103) = {0.049771, -0.717755, 0, 1.0};
Point(104) = {0.049594, -0.717572, 0, 1.0};
Point(105) = {0.049353, -0.717403, 0, 1.0};
Point(106) = {0.048895, -0.717171, 0, 1.0};
Point(107) = {0.048335, -0.716962, 0, 1.0};
Point(108) = {0.048027, -0.716867, 0, 1.0};
Point(109) = {0.045279, -0.716364, 0, 1.0};
Point(110) = {0.041509, -0.716130, 0, 1.0};
Point(111) = {0.036779, -0.716183, 0, 1.0};
Point(112) = {0.031141, -0.716540, 0, 1.0};
Point(113) = {0.024641, -0.717204, 0, 1.0};
Point(114) = {0.017333, -0.718170, 0, 1.0};
Point(115) = {0.009273, -0.719419, 0, 1.0};
Point(116) = {0.000532, -0.720919, 0, 1.0};
Point(117) = {-0.008800, -0.722633, 0, 1.0};
Point(118) = {-0.018629, -0.724526, 0, 1.0};
Point(119) = {-0.028849, -0.726555, 0, 1.0};
Point(120) = {-0.039347, -0.728675, 0, 1.0};
Point(121) = {-0.049998, -0.730841, 0, 1.0};
Point(122) = {-0.060670, -0.733015, 0, 1.0};
Point(123) = {-0.071230, -0.735160, 0, 1.0};
Point(124) = {-0.081547, -0.737252, 0, 1.0};
Point(125) = {-0.091499, -0.739264, 0, 1.0};
Point(126) = {-0.100969, -0.741168, 0, 1.0};
Point(127) = {-0.109839, -0.742937, 0, 1.0};
Point(128) = {-0.118001, -0.744549, 0, 1.0};
Point(129) = {-0.125352, -0.745981, 0, 1.0};
Point(130) = {-0.131798, -0.747213, 0, 1.0};
Point(131) = {-0.137250, -0.748226, 0, 1.0};
Point(132) = {-0.141624, -0.749006, 0, 1.0};
Point(133) = {-0.144840, -0.749545, 0, 1.0};
Point(134) = {-0.146822, -0.749847, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html