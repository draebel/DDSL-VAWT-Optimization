SetFactory("OpenCASCADE");

Point(1) = {0.111063, 0.749957, 0, 1.0};
Point(2) = {0.110556, 0.749935, 0, 1.0};
Point(3) = {0.109073, 0.749882, 0, 1.0};
Point(4) = {0.106668, 0.749811, 0, 1.0};
Point(5) = {0.103380, 0.749734, 0, 1.0};
Point(6) = {0.099262, 0.749674, 0, 1.0};
Point(7) = {0.094388, 0.749654, 0, 1.0};
Point(8) = {0.088856, 0.749684, 0, 1.0};
Point(9) = {0.082764, 0.749754, 0, 1.0};
Point(10) = {0.076213, 0.749846, 0, 1.0};
Point(11) = {0.069302, 0.749939, 0, 1.0};
Point(12) = {0.062132, 0.750000, 0, 1.0};
Point(13) = {0.054793, 0.749988, 0, 1.0};
Point(14) = {0.047363, 0.749866, 0, 1.0};
Point(15) = {0.039906, 0.749600, 0, 1.0};
Point(16) = {0.032480, 0.749172, 0, 1.0};
Point(17) = {0.025144, 0.748585, 0, 1.0};
Point(18) = {0.017969, 0.747839, 0, 1.0};
Point(19) = {0.011022, 0.746933, 0, 1.0};
Point(20) = {0.004365, 0.745871, 0, 1.0};
Point(21) = {-0.001944, 0.744662, 0, 1.0};
Point(22) = {-0.007848, 0.743317, 0, 1.0};
Point(23) = {-0.013296, 0.741849, 0, 1.0};
Point(24) = {-0.018239, 0.740271, 0, 1.0};
Point(25) = {-0.022640, 0.738597, 0, 1.0};
Point(26) = {-0.026473, 0.736845, 0, 1.0};
Point(27) = {-0.029719, 0.735038, 0, 1.0};
Point(28) = {-0.032371, 0.733208, 0, 1.0};
Point(29) = {-0.034431, 0.731398, 0, 1.0};
Point(30) = {-0.035897, 0.729662, 0, 1.0};
Point(31) = {-0.036777, 0.728063, 0, 1.0};
Point(32) = {-0.037072, 0.726868, 0, 1.0};
Point(33) = {-0.037076, 0.726500, 0, 1.0};
Point(34) = {-0.037030, 0.726171, 0, 1.0};
Point(35) = {-0.036971, 0.725979, 0, 1.0};
Point(36) = {-0.036883, 0.725817, 0, 1.0};
Point(37) = {-0.036749, 0.725679, 0, 1.0};
Point(38) = {-0.036568, 0.725553, 0, 1.0};
Point(39) = {-0.036226, 0.725379, 0, 1.0};
Point(40) = {-0.035805, 0.725222, 0, 1.0};
Point(41) = {-0.035575, 0.725151, 0, 1.0};
Point(42) = {-0.033514, 0.724774, 0, 1.0};
Point(43) = {-0.030686, 0.724598, 0, 1.0};
Point(44) = {-0.027139, 0.724638, 0, 1.0};
Point(45) = {-0.022910, 0.724906, 0, 1.0};
Point(46) = {-0.018036, 0.725403, 0, 1.0};
Point(47) = {-0.012554, 0.726128, 0, 1.0};
Point(48) = {-0.006509, 0.727065, 0, 1.0};
Point(49) = {0.000046, 0.728190, 0, 1.0};
Point(50) = {0.007045, 0.729475, 0, 1.0};
Point(51) = {0.014416, 0.730895, 0, 1.0};
Point(52) = {0.022081, 0.732417, 0, 1.0};
Point(53) = {0.029955, 0.734007, 0, 1.0};
Point(54) = {0.037942, 0.735631, 0, 1.0};
Point(55) = {0.045946, 0.737261, 0, 1.0};
Point(56) = {0.053866, 0.738870, 0, 1.0};
Point(57) = {0.061603, 0.740439, 0, 1.0};
Point(58) = {0.069067, 0.741948, 0, 1.0};
Point(59) = {0.076169, 0.743376, 0, 1.0};
Point(60) = {0.082822, 0.744703, 0, 1.0};
Point(61) = {0.088943, 0.745912, 0, 1.0};
Point(62) = {0.094456, 0.746986, 0, 1.0};
Point(63) = {0.099291, 0.747910, 0, 1.0};
Point(64) = {0.103380, 0.748669, 0, 1.0};
Point(65) = {0.106660, 0.749254, 0, 1.0};
Point(66) = {0.109072, 0.749659, 0, 1.0};
Point(67) = {0.110558, 0.749885, 0, 1.0};
Point(68) = {-0.111063, -0.749957, 0, 1.0};
Point(69) = {-0.110556, -0.749935, 0, 1.0};
Point(70) = {-0.109073, -0.749882, 0, 1.0};
Point(71) = {-0.106668, -0.749811, 0, 1.0};
Point(72) = {-0.103380, -0.749734, 0, 1.0};
Point(73) = {-0.099262, -0.749674, 0, 1.0};
Point(74) = {-0.094388, -0.749654, 0, 1.0};
Point(75) = {-0.088856, -0.749684, 0, 1.0};
Point(76) = {-0.082764, -0.749754, 0, 1.0};
Point(77) = {-0.076213, -0.749846, 0, 1.0};
Point(78) = {-0.069302, -0.749939, 0, 1.0};
Point(79) = {-0.062132, -0.750000, 0, 1.0};
Point(80) = {-0.054793, -0.749988, 0, 1.0};
Point(81) = {-0.047363, -0.749866, 0, 1.0};
Point(82) = {-0.039906, -0.749600, 0, 1.0};
Point(83) = {-0.032480, -0.749172, 0, 1.0};
Point(84) = {-0.025144, -0.748585, 0, 1.0};
Point(85) = {-0.017969, -0.747839, 0, 1.0};
Point(86) = {-0.011022, -0.746933, 0, 1.0};
Point(87) = {-0.004365, -0.745871, 0, 1.0};
Point(88) = {0.001944, -0.744662, 0, 1.0};
Point(89) = {0.007848, -0.743317, 0, 1.0};
Point(90) = {0.013296, -0.741849, 0, 1.0};
Point(91) = {0.018239, -0.740271, 0, 1.0};
Point(92) = {0.022640, -0.738597, 0, 1.0};
Point(93) = {0.026473, -0.736845, 0, 1.0};
Point(94) = {0.029719, -0.735038, 0, 1.0};
Point(95) = {0.032371, -0.733208, 0, 1.0};
Point(96) = {0.034431, -0.731398, 0, 1.0};
Point(97) = {0.035897, -0.729662, 0, 1.0};
Point(98) = {0.036777, -0.728063, 0, 1.0};
Point(99) = {0.037072, -0.726868, 0, 1.0};
Point(100) = {0.037076, -0.726500, 0, 1.0};
Point(101) = {0.037030, -0.726171, 0, 1.0};
Point(102) = {0.036971, -0.725979, 0, 1.0};
Point(103) = {0.036883, -0.725817, 0, 1.0};
Point(104) = {0.036749, -0.725679, 0, 1.0};
Point(105) = {0.036568, -0.725553, 0, 1.0};
Point(106) = {0.036226, -0.725379, 0, 1.0};
Point(107) = {0.035805, -0.725222, 0, 1.0};
Point(108) = {0.035575, -0.725151, 0, 1.0};
Point(109) = {0.033514, -0.724774, 0, 1.0};
Point(110) = {0.030686, -0.724598, 0, 1.0};
Point(111) = {0.027139, -0.724638, 0, 1.0};
Point(112) = {0.022910, -0.724906, 0, 1.0};
Point(113) = {0.018036, -0.725403, 0, 1.0};
Point(114) = {0.012554, -0.726128, 0, 1.0};
Point(115) = {0.006509, -0.727065, 0, 1.0};
Point(116) = {-0.000046, -0.728190, 0, 1.0};
Point(117) = {-0.007045, -0.729475, 0, 1.0};
Point(118) = {-0.014416, -0.730895, 0, 1.0};
Point(119) = {-0.022081, -0.732417, 0, 1.0};
Point(120) = {-0.029955, -0.734007, 0, 1.0};
Point(121) = {-0.037942, -0.735631, 0, 1.0};
Point(122) = {-0.045946, -0.737261, 0, 1.0};
Point(123) = {-0.053866, -0.738870, 0, 1.0};
Point(124) = {-0.061603, -0.740439, 0, 1.0};
Point(125) = {-0.069067, -0.741948, 0, 1.0};
Point(126) = {-0.076169, -0.743376, 0, 1.0};
Point(127) = {-0.082822, -0.744703, 0, 1.0};
Point(128) = {-0.088943, -0.745912, 0, 1.0};
Point(129) = {-0.094456, -0.746986, 0, 1.0};
Point(130) = {-0.099291, -0.747910, 0, 1.0};
Point(131) = {-0.103380, -0.748669, 0, 1.0};
Point(132) = {-0.106660, -0.749254, 0, 1.0};
Point(133) = {-0.109072, -0.749659, 0, 1.0};
Point(134) = {-0.110558, -0.749885, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html