SetFactory("OpenCASCADE");

Point(1) = {0.074041, 0.749957, 0, 1.0};
Point(2) = {0.073534, 0.749935, 0, 1.0};
Point(3) = {0.072051, 0.749882, 0, 1.0};
Point(4) = {0.069646, 0.749811, 0, 1.0};
Point(5) = {0.066358, 0.749734, 0, 1.0};
Point(6) = {0.062239, 0.749674, 0, 1.0};
Point(7) = {0.057366, 0.749654, 0, 1.0};
Point(8) = {0.051833, 0.749684, 0, 1.0};
Point(9) = {0.045741, 0.749754, 0, 1.0};
Point(10) = {0.039189, 0.749846, 0, 1.0};
Point(11) = {0.032278, 0.749939, 0, 1.0};
Point(12) = {0.025107, 0.750000, 0, 1.0};
Point(13) = {0.017768, 0.749988, 0, 1.0};
Point(14) = {0.010337, 0.749866, 0, 1.0};
Point(15) = {0.002881, 0.749600, 0, 1.0};
Point(16) = {-0.004547, 0.749172, 0, 1.0};
Point(17) = {-0.011883, 0.748585, 0, 1.0};
Point(18) = {-0.019058, 0.747839, 0, 1.0};
Point(19) = {-0.026005, 0.746933, 0, 1.0};
Point(20) = {-0.032663, 0.745871, 0, 1.0};
Point(21) = {-0.038973, 0.744662, 0, 1.0};
Point(22) = {-0.044877, 0.743317, 0, 1.0};
Point(23) = {-0.050325, 0.741848, 0, 1.0};
Point(24) = {-0.055268, 0.740270, 0, 1.0};
Point(25) = {-0.059670, 0.738596, 0, 1.0};
Point(26) = {-0.063503, 0.736844, 0, 1.0};
Point(27) = {-0.066749, 0.735037, 0, 1.0};
Point(28) = {-0.069401, 0.733207, 0, 1.0};
Point(29) = {-0.071461, 0.731397, 0, 1.0};
Point(30) = {-0.072927, 0.729661, 0, 1.0};
Point(31) = {-0.073807, 0.728062, 0, 1.0};
Point(32) = {-0.074102, 0.726866, 0, 1.0};
Point(33) = {-0.074106, 0.726499, 0, 1.0};
Point(34) = {-0.074061, 0.726170, 0, 1.0};
Point(35) = {-0.074001, 0.725977, 0, 1.0};
Point(36) = {-0.073913, 0.725815, 0, 1.0};
Point(37) = {-0.073780, 0.725678, 0, 1.0};
Point(38) = {-0.073599, 0.725552, 0, 1.0};
Point(39) = {-0.073256, 0.725378, 0, 1.0};
Point(40) = {-0.072836, 0.725221, 0, 1.0};
Point(41) = {-0.072605, 0.725150, 0, 1.0};
Point(42) = {-0.070544, 0.724772, 0, 1.0};
Point(43) = {-0.067716, 0.724597, 0, 1.0};
Point(44) = {-0.064169, 0.724637, 0, 1.0};
Point(45) = {-0.059940, 0.724904, 0, 1.0};
Point(46) = {-0.055065, 0.725402, 0, 1.0};
Point(47) = {-0.049583, 0.726127, 0, 1.0};
Point(48) = {-0.043538, 0.727063, 0, 1.0};
Point(49) = {-0.036982, 0.728188, 0, 1.0};
Point(50) = {-0.029983, 0.729474, 0, 1.0};
Point(51) = {-0.022611, 0.730894, 0, 1.0};
Point(52) = {-0.014946, 0.732416, 0, 1.0};
Point(53) = {-0.007072, 0.734006, 0, 1.0};
Point(54) = {0.000916, 0.735631, 0, 1.0};
Point(55) = {0.008921, 0.737261, 0, 1.0};
Point(56) = {0.016841, 0.738869, 0, 1.0};
Point(57) = {0.024579, 0.740439, 0, 1.0};
Point(58) = {0.032043, 0.741948, 0, 1.0};
Point(59) = {0.039145, 0.743376, 0, 1.0};
Point(60) = {0.045798, 0.744702, 0, 1.0};
Point(61) = {0.051920, 0.745912, 0, 1.0};
Point(62) = {0.057434, 0.746985, 0, 1.0};
Point(63) = {0.062268, 0.747909, 0, 1.0};
Point(64) = {0.066357, 0.748669, 0, 1.0};
Point(65) = {0.069638, 0.749254, 0, 1.0};
Point(66) = {0.072050, 0.749659, 0, 1.0};
Point(67) = {0.073537, 0.749885, 0, 1.0};
Point(68) = {-0.074041, -0.749957, 0, 1.0};
Point(69) = {-0.073534, -0.749935, 0, 1.0};
Point(70) = {-0.072051, -0.749882, 0, 1.0};
Point(71) = {-0.069646, -0.749811, 0, 1.0};
Point(72) = {-0.066358, -0.749734, 0, 1.0};
Point(73) = {-0.062239, -0.749674, 0, 1.0};
Point(74) = {-0.057366, -0.749654, 0, 1.0};
Point(75) = {-0.051833, -0.749684, 0, 1.0};
Point(76) = {-0.045741, -0.749754, 0, 1.0};
Point(77) = {-0.039189, -0.749846, 0, 1.0};
Point(78) = {-0.032278, -0.749939, 0, 1.0};
Point(79) = {-0.025107, -0.750000, 0, 1.0};
Point(80) = {-0.017768, -0.749988, 0, 1.0};
Point(81) = {-0.010337, -0.749866, 0, 1.0};
Point(82) = {-0.002881, -0.749600, 0, 1.0};
Point(83) = {0.004547, -0.749172, 0, 1.0};
Point(84) = {0.011883, -0.748585, 0, 1.0};
Point(85) = {0.019058, -0.747839, 0, 1.0};
Point(86) = {0.026005, -0.746933, 0, 1.0};
Point(87) = {0.032663, -0.745871, 0, 1.0};
Point(88) = {0.038973, -0.744662, 0, 1.0};
Point(89) = {0.044877, -0.743317, 0, 1.0};
Point(90) = {0.050325, -0.741848, 0, 1.0};
Point(91) = {0.055268, -0.740270, 0, 1.0};
Point(92) = {0.059670, -0.738596, 0, 1.0};
Point(93) = {0.063503, -0.736844, 0, 1.0};
Point(94) = {0.066749, -0.735037, 0, 1.0};
Point(95) = {0.069401, -0.733207, 0, 1.0};
Point(96) = {0.071461, -0.731397, 0, 1.0};
Point(97) = {0.072927, -0.729661, 0, 1.0};
Point(98) = {0.073807, -0.728062, 0, 1.0};
Point(99) = {0.074102, -0.726866, 0, 1.0};
Point(100) = {0.074106, -0.726499, 0, 1.0};
Point(101) = {0.074061, -0.726170, 0, 1.0};
Point(102) = {0.074001, -0.725977, 0, 1.0};
Point(103) = {0.073913, -0.725815, 0, 1.0};
Point(104) = {0.073780, -0.725678, 0, 1.0};
Point(105) = {0.073599, -0.725552, 0, 1.0};
Point(106) = {0.073256, -0.725378, 0, 1.0};
Point(107) = {0.072836, -0.725221, 0, 1.0};
Point(108) = {0.072605, -0.725150, 0, 1.0};
Point(109) = {0.070544, -0.724772, 0, 1.0};
Point(110) = {0.067716, -0.724597, 0, 1.0};
Point(111) = {0.064169, -0.724637, 0, 1.0};
Point(112) = {0.059940, -0.724904, 0, 1.0};
Point(113) = {0.055065, -0.725402, 0, 1.0};
Point(114) = {0.049583, -0.726127, 0, 1.0};
Point(115) = {0.043538, -0.727063, 0, 1.0};
Point(116) = {0.036982, -0.728188, 0, 1.0};
Point(117) = {0.029983, -0.729474, 0, 1.0};
Point(118) = {0.022611, -0.730894, 0, 1.0};
Point(119) = {0.014946, -0.732416, 0, 1.0};
Point(120) = {0.007072, -0.734006, 0, 1.0};
Point(121) = {-0.000916, -0.735631, 0, 1.0};
Point(122) = {-0.008921, -0.737261, 0, 1.0};
Point(123) = {-0.016841, -0.738869, 0, 1.0};
Point(124) = {-0.024579, -0.740439, 0, 1.0};
Point(125) = {-0.032043, -0.741948, 0, 1.0};
Point(126) = {-0.039145, -0.743376, 0, 1.0};
Point(127) = {-0.045798, -0.744702, 0, 1.0};
Point(128) = {-0.051920, -0.745912, 0, 1.0};
Point(129) = {-0.057434, -0.746985, 0, 1.0};
Point(130) = {-0.062268, -0.747909, 0, 1.0};
Point(131) = {-0.066357, -0.748669, 0, 1.0};
Point(132) = {-0.069638, -0.749254, 0, 1.0};
Point(133) = {-0.072050, -0.749659, 0, 1.0};
Point(134) = {-0.073537, -0.749885, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html