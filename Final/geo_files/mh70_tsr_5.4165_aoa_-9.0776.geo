SetFactory("OpenCASCADE");

Point(1) = {0.073748, 0.749971, 0, 1.0};
Point(2) = {0.073410, 0.749957, 0, 1.0};
Point(3) = {0.072421, 0.749921, 0, 1.0};
Point(4) = {0.070817, 0.749874, 0, 1.0};
Point(5) = {0.068625, 0.749823, 0, 1.0};
Point(6) = {0.065880, 0.749783, 0, 1.0};
Point(7) = {0.062631, 0.749770, 0, 1.0};
Point(8) = {0.058942, 0.749789, 0, 1.0};
Point(9) = {0.054881, 0.749836, 0, 1.0};
Point(10) = {0.050513, 0.749898, 0, 1.0};
Point(11) = {0.045906, 0.749960, 0, 1.0};
Point(12) = {0.041126, 0.750000, 0, 1.0};
Point(13) = {0.036233, 0.749992, 0, 1.0};
Point(14) = {0.031279, 0.749910, 0, 1.0};
Point(15) = {0.026308, 0.749733, 0, 1.0};
Point(16) = {0.021357, 0.749448, 0, 1.0};
Point(17) = {0.016466, 0.749057, 0, 1.0};
Point(18) = {0.011683, 0.748559, 0, 1.0};
Point(19) = {0.007052, 0.747955, 0, 1.0};
Point(20) = {0.002613, 0.747247, 0, 1.0};
Point(21) = {-0.001593, 0.746441, 0, 1.0};
Point(22) = {-0.005529, 0.745545, 0, 1.0};
Point(23) = {-0.009161, 0.744566, 0, 1.0};
Point(24) = {-0.012456, 0.743514, 0, 1.0};
Point(25) = {-0.015391, 0.742398, 0, 1.0};
Point(26) = {-0.017946, 0.741230, 0, 1.0};
Point(27) = {-0.020110, 0.740025, 0, 1.0};
Point(28) = {-0.021878, 0.738805, 0, 1.0};
Point(29) = {-0.023251, 0.737598, 0, 1.0};
Point(30) = {-0.024229, 0.736441, 0, 1.0};
Point(31) = {-0.024815, 0.735375, 0, 1.0};
Point(32) = {-0.025012, 0.734578, 0, 1.0};
Point(33) = {-0.025015, 0.734333, 0, 1.0};
Point(34) = {-0.024984, 0.734114, 0, 1.0};
Point(35) = {-0.024945, 0.733985, 0, 1.0};
Point(36) = {-0.024886, 0.733877, 0, 1.0};
Point(37) = {-0.024797, 0.733786, 0, 1.0};
Point(38) = {-0.024676, 0.733702, 0, 1.0};
Point(39) = {-0.024448, 0.733586, 0, 1.0};
Point(40) = {-0.024168, 0.733481, 0, 1.0};
Point(41) = {-0.024014, 0.733434, 0, 1.0};
Point(42) = {-0.022640, 0.733182, 0, 1.0};
Point(43) = {-0.020754, 0.733065, 0, 1.0};
Point(44) = {-0.018390, 0.733092, 0, 1.0};
Point(45) = {-0.015570, 0.733270, 0, 1.0};
Point(46) = {-0.012321, 0.733602, 0, 1.0};
Point(47) = {-0.008667, 0.734085, 0, 1.0};
Point(48) = {-0.004636, 0.734709, 0, 1.0};
Point(49) = {-0.000266, 0.735459, 0, 1.0};
Point(50) = {0.004400, 0.736317, 0, 1.0};
Point(51) = {0.009314, 0.737263, 0, 1.0};
Point(52) = {0.014425, 0.738277, 0, 1.0};
Point(53) = {0.019674, 0.739337, 0, 1.0};
Point(54) = {0.024999, 0.740421, 0, 1.0};
Point(55) = {0.030335, 0.741507, 0, 1.0};
Point(56) = {0.035615, 0.742580, 0, 1.0};
Point(57) = {0.040773, 0.743626, 0, 1.0};
Point(58) = {0.045750, 0.744632, 0, 1.0};
Point(59) = {0.050484, 0.745584, 0, 1.0};
Point(60) = {0.054919, 0.746468, 0, 1.0};
Point(61) = {0.059000, 0.747274, 0, 1.0};
Point(62) = {0.062676, 0.747990, 0, 1.0};
Point(63) = {0.065899, 0.748606, 0, 1.0};
Point(64) = {0.068625, 0.749113, 0, 1.0};
Point(65) = {0.070812, 0.749503, 0, 1.0};
Point(66) = {0.072420, 0.749772, 0, 1.0};
Point(67) = {0.073411, 0.749924, 0, 1.0};
Point(68) = {-0.073748, -0.749971, 0, 1.0};
Point(69) = {-0.073410, -0.749957, 0, 1.0};
Point(70) = {-0.072421, -0.749921, 0, 1.0};
Point(71) = {-0.070817, -0.749874, 0, 1.0};
Point(72) = {-0.068625, -0.749823, 0, 1.0};
Point(73) = {-0.065880, -0.749783, 0, 1.0};
Point(74) = {-0.062631, -0.749770, 0, 1.0};
Point(75) = {-0.058942, -0.749789, 0, 1.0};
Point(76) = {-0.054881, -0.749836, 0, 1.0};
Point(77) = {-0.050513, -0.749898, 0, 1.0};
Point(78) = {-0.045906, -0.749960, 0, 1.0};
Point(79) = {-0.041126, -0.750000, 0, 1.0};
Point(80) = {-0.036233, -0.749992, 0, 1.0};
Point(81) = {-0.031279, -0.749910, 0, 1.0};
Point(82) = {-0.026308, -0.749733, 0, 1.0};
Point(83) = {-0.021357, -0.749448, 0, 1.0};
Point(84) = {-0.016466, -0.749057, 0, 1.0};
Point(85) = {-0.011683, -0.748559, 0, 1.0};
Point(86) = {-0.007052, -0.747955, 0, 1.0};
Point(87) = {-0.002613, -0.747247, 0, 1.0};
Point(88) = {0.001593, -0.746441, 0, 1.0};
Point(89) = {0.005529, -0.745545, 0, 1.0};
Point(90) = {0.009161, -0.744566, 0, 1.0};
Point(91) = {0.012456, -0.743514, 0, 1.0};
Point(92) = {0.015391, -0.742398, 0, 1.0};
Point(93) = {0.017946, -0.741230, 0, 1.0};
Point(94) = {0.020110, -0.740025, 0, 1.0};
Point(95) = {0.021878, -0.738805, 0, 1.0};
Point(96) = {0.023251, -0.737598, 0, 1.0};
Point(97) = {0.024229, -0.736441, 0, 1.0};
Point(98) = {0.024815, -0.735375, 0, 1.0};
Point(99) = {0.025012, -0.734578, 0, 1.0};
Point(100) = {0.025015, -0.734333, 0, 1.0};
Point(101) = {0.024984, -0.734114, 0, 1.0};
Point(102) = {0.024945, -0.733985, 0, 1.0};
Point(103) = {0.024886, -0.733877, 0, 1.0};
Point(104) = {0.024797, -0.733786, 0, 1.0};
Point(105) = {0.024676, -0.733702, 0, 1.0};
Point(106) = {0.024448, -0.733586, 0, 1.0};
Point(107) = {0.024168, -0.733481, 0, 1.0};
Point(108) = {0.024014, -0.733434, 0, 1.0};
Point(109) = {0.022640, -0.733182, 0, 1.0};
Point(110) = {0.020754, -0.733065, 0, 1.0};
Point(111) = {0.018390, -0.733092, 0, 1.0};
Point(112) = {0.015570, -0.733270, 0, 1.0};
Point(113) = {0.012321, -0.733602, 0, 1.0};
Point(114) = {0.008667, -0.734085, 0, 1.0};
Point(115) = {0.004636, -0.734709, 0, 1.0};
Point(116) = {0.000266, -0.735459, 0, 1.0};
Point(117) = {-0.004400, -0.736317, 0, 1.0};
Point(118) = {-0.009314, -0.737263, 0, 1.0};
Point(119) = {-0.014425, -0.738277, 0, 1.0};
Point(120) = {-0.019674, -0.739337, 0, 1.0};
Point(121) = {-0.024999, -0.740421, 0, 1.0};
Point(122) = {-0.030335, -0.741507, 0, 1.0};
Point(123) = {-0.035615, -0.742580, 0, 1.0};
Point(124) = {-0.040773, -0.743626, 0, 1.0};
Point(125) = {-0.045750, -0.744632, 0, 1.0};
Point(126) = {-0.050484, -0.745584, 0, 1.0};
Point(127) = {-0.054919, -0.746468, 0, 1.0};
Point(128) = {-0.059000, -0.747274, 0, 1.0};
Point(129) = {-0.062676, -0.747990, 0, 1.0};
Point(130) = {-0.065899, -0.748606, 0, 1.0};
Point(131) = {-0.068625, -0.749113, 0, 1.0};
Point(132) = {-0.070812, -0.749503, 0, 1.0};
Point(133) = {-0.072420, -0.749772, 0, 1.0};
Point(134) = {-0.073411, -0.749924, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html