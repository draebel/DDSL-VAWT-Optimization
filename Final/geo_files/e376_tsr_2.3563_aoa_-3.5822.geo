SetFactory("OpenCASCADE");

Point(1) = {0.149030, 0.739801, 0, 1.0};
Point(2) = {0.147294, 0.739910, 0, 1.0};
Point(3) = {0.144420, 0.740107, 0, 1.0};
Point(4) = {0.140448, 0.740422, 0, 1.0};
Point(5) = {0.135459, 0.740865, 0, 1.0};
Point(6) = {0.129530, 0.741429, 0, 1.0};
Point(7) = {0.122747, 0.742103, 0, 1.0};
Point(8) = {0.115208, 0.742875, 0, 1.0};
Point(9) = {0.107008, 0.743727, 0, 1.0};
Point(10) = {0.098260, 0.744638, 0, 1.0};
Point(11) = {0.089079, 0.745586, 0, 1.0};
Point(12) = {0.079581, 0.746535, 0, 1.0};
Point(13) = {0.069891, 0.747459, 0, 1.0};
Point(14) = {0.060132, 0.748325, 0, 1.0};
Point(15) = {0.050426, 0.749078, 0, 1.0};
Point(16) = {0.040898, 0.749662, 0, 1.0};
Point(17) = {0.031636, 0.749988, 0, 1.0};
Point(18) = {0.022676, 0.750000, 0, 1.0};
Point(19) = {0.014059, 0.749675, 0, 1.0};
Point(20) = {0.005821, 0.749011, 0, 1.0};
Point(21) = {-0.002008, 0.748010, 0, 1.0};
Point(22) = {-0.009403, 0.746709, 0, 1.0};
Point(23) = {-0.016328, 0.745166, 0, 1.0};
Point(24) = {-0.022719, 0.743439, 0, 1.0};
Point(25) = {-0.028515, 0.741565, 0, 1.0};
Point(26) = {-0.033674, 0.739593, 0, 1.0};
Point(27) = {-0.038150, 0.737563, 0, 1.0};
Point(28) = {-0.041922, 0.735520, 0, 1.0};
Point(29) = {-0.044964, 0.733516, 0, 1.0};
Point(30) = {-0.047279, 0.731603, 0, 1.0};
Point(31) = {-0.048867, 0.729855, 0, 1.0};
Point(32) = {-0.049759, 0.728342, 0, 1.0};
Point(33) = {-0.049994, 0.727205, 0, 1.0};
Point(34) = {-0.049548, 0.726708, 0, 1.0};
Point(35) = {-0.048271, 0.726958, 0, 1.0};
Point(36) = {-0.046003, 0.728042, 0, 1.0};
Point(37) = {-0.042534, 0.730035, 0, 1.0};
Point(38) = {-0.037638, 0.732912, 0, 1.0};
Point(39) = {-0.031051, 0.736521, 0, 1.0};
Point(40) = {-0.022523, 0.740596, 0, 1.0};
Point(41) = {-0.011800, 0.744539, 0, 1.0};
Point(42) = {0.000772, 0.747354, 0, 1.0};
Point(43) = {0.014017, 0.748690, 0, 1.0};
Point(44) = {0.027201, 0.749039, 0, 1.0};
Point(45) = {0.040138, 0.748813, 0, 1.0};
Point(46) = {0.052713, 0.748193, 0, 1.0};
Point(47) = {0.064820, 0.747348, 0, 1.0};
Point(48) = {0.076379, 0.746374, 0, 1.0};
Point(49) = {0.087324, 0.745362, 0, 1.0};
Point(50) = {0.097582, 0.744343, 0, 1.0};
Point(51) = {0.107071, 0.743366, 0, 1.0};
Point(52) = {0.115723, 0.742461, 0, 1.0};
Point(53) = {0.123472, 0.741661, 0, 1.0};
Point(54) = {0.130267, 0.740985, 0, 1.0};
Point(55) = {0.136068, 0.740454, 0, 1.0};
Point(56) = {0.140836, 0.740083, 0, 1.0};
Point(57) = {0.144584, 0.739889, 0, 1.0};
Point(58) = {0.147330, 0.739812, 0, 1.0};
Point(59) = {0.149031, 0.739781, 0, 1.0};
Point(60) = {-0.149030, -0.739801, 0, 1.0};
Point(61) = {-0.147294, -0.739910, 0, 1.0};
Point(62) = {-0.144420, -0.740107, 0, 1.0};
Point(63) = {-0.140448, -0.740422, 0, 1.0};
Point(64) = {-0.135459, -0.740865, 0, 1.0};
Point(65) = {-0.129530, -0.741429, 0, 1.0};
Point(66) = {-0.122747, -0.742103, 0, 1.0};
Point(67) = {-0.115208, -0.742875, 0, 1.0};
Point(68) = {-0.107008, -0.743727, 0, 1.0};
Point(69) = {-0.098260, -0.744638, 0, 1.0};
Point(70) = {-0.089079, -0.745586, 0, 1.0};
Point(71) = {-0.079581, -0.746535, 0, 1.0};
Point(72) = {-0.069891, -0.747459, 0, 1.0};
Point(73) = {-0.060132, -0.748325, 0, 1.0};
Point(74) = {-0.050426, -0.749078, 0, 1.0};
Point(75) = {-0.040898, -0.749662, 0, 1.0};
Point(76) = {-0.031636, -0.749988, 0, 1.0};
Point(77) = {-0.022676, -0.750000, 0, 1.0};
Point(78) = {-0.014059, -0.749675, 0, 1.0};
Point(79) = {-0.005821, -0.749011, 0, 1.0};
Point(80) = {0.002008, -0.748010, 0, 1.0};
Point(81) = {0.009403, -0.746709, 0, 1.0};
Point(82) = {0.016328, -0.745166, 0, 1.0};
Point(83) = {0.022719, -0.743439, 0, 1.0};
Point(84) = {0.028515, -0.741565, 0, 1.0};
Point(85) = {0.033674, -0.739593, 0, 1.0};
Point(86) = {0.038150, -0.737563, 0, 1.0};
Point(87) = {0.041922, -0.735520, 0, 1.0};
Point(88) = {0.044964, -0.733516, 0, 1.0};
Point(89) = {0.047279, -0.731603, 0, 1.0};
Point(90) = {0.048867, -0.729855, 0, 1.0};
Point(91) = {0.049759, -0.728342, 0, 1.0};
Point(92) = {0.049994, -0.727205, 0, 1.0};
Point(93) = {0.049548, -0.726708, 0, 1.0};
Point(94) = {0.048271, -0.726958, 0, 1.0};
Point(95) = {0.046003, -0.728042, 0, 1.0};
Point(96) = {0.042534, -0.730035, 0, 1.0};
Point(97) = {0.037638, -0.732912, 0, 1.0};
Point(98) = {0.031051, -0.736521, 0, 1.0};
Point(99) = {0.022523, -0.740596, 0, 1.0};
Point(100) = {0.011800, -0.744539, 0, 1.0};
Point(101) = {-0.000772, -0.747354, 0, 1.0};
Point(102) = {-0.014017, -0.748690, 0, 1.0};
Point(103) = {-0.027201, -0.749039, 0, 1.0};
Point(104) = {-0.040138, -0.748813, 0, 1.0};
Point(105) = {-0.052713, -0.748193, 0, 1.0};
Point(106) = {-0.064820, -0.747348, 0, 1.0};
Point(107) = {-0.076379, -0.746374, 0, 1.0};
Point(108) = {-0.087324, -0.745362, 0, 1.0};
Point(109) = {-0.097582, -0.744343, 0, 1.0};
Point(110) = {-0.107071, -0.743366, 0, 1.0};
Point(111) = {-0.115723, -0.742461, 0, 1.0};
Point(112) = {-0.123472, -0.741661, 0, 1.0};
Point(113) = {-0.130267, -0.740985, 0, 1.0};
Point(114) = {-0.136068, -0.740454, 0, 1.0};
Point(115) = {-0.140836, -0.740083, 0, 1.0};
Point(116) = {-0.144584, -0.739889, 0, 1.0};
Point(117) = {-0.147330, -0.739812, 0, 1.0};
Point(118) = {-0.149031, -0.739781, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:79};
Spline(6) = {79:101};
Spline(7) = {101:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html