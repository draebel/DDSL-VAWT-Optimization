SetFactory("OpenCASCADE");

Point(1) = {0.112274, 0.742324, 0, 1.0};
Point(2) = {0.111840, 0.742351, 0, 1.0};
Point(3) = {0.110538, 0.742433, 0, 1.0};
Point(4) = {0.108382, 0.742580, 0, 1.0};
Point(5) = {0.105404, 0.742816, 0, 1.0};
Point(6) = {0.101662, 0.743149, 0, 1.0};
Point(7) = {0.097215, 0.743572, 0, 1.0};
Point(8) = {0.092127, 0.744077, 0, 1.0};
Point(9) = {0.086473, 0.744657, 0, 1.0};
Point(10) = {0.080324, 0.745295, 0, 1.0};
Point(11) = {0.073763, 0.745979, 0, 1.0};
Point(12) = {0.066877, 0.746690, 0, 1.0};
Point(13) = {0.059754, 0.747401, 0, 1.0};
Point(14) = {0.052486, 0.748094, 0, 1.0};
Point(15) = {0.045167, 0.748744, 0, 1.0};
Point(16) = {0.037887, 0.749309, 0, 1.0};
Point(17) = {0.030742, 0.749746, 0, 1.0};
Point(18) = {0.023795, 0.749991, 0, 1.0};
Point(19) = {0.017075, 0.750000, 0, 1.0};
Point(20) = {0.010613, 0.749756, 0, 1.0};
Point(21) = {0.004434, 0.749258, 0, 1.0};
Point(22) = {-0.001438, 0.748507, 0, 1.0};
Point(23) = {-0.006984, 0.747532, 0, 1.0};
Point(24) = {-0.012178, 0.746374, 0, 1.0};
Point(25) = {-0.016971, 0.745079, 0, 1.0};
Point(26) = {-0.021318, 0.743674, 0, 1.0};
Point(27) = {-0.025187, 0.742195, 0, 1.0};
Point(28) = {-0.028544, 0.740673, 0, 1.0};
Point(29) = {-0.031373, 0.739140, 0, 1.0};
Point(30) = {-0.033655, 0.737637, 0, 1.0};
Point(31) = {-0.035391, 0.736203, 0, 1.0};
Point(32) = {-0.036582, 0.734891, 0, 1.0};
Point(33) = {-0.037250, 0.733757, 0, 1.0};
Point(34) = {-0.037427, 0.732904, 0, 1.0};
Point(35) = {-0.037092, 0.732531, 0, 1.0};
Point(36) = {-0.036135, 0.732719, 0, 1.0};
Point(37) = {-0.034433, 0.733532, 0, 1.0};
Point(38) = {-0.031832, 0.735026, 0, 1.0};
Point(39) = {-0.028160, 0.737184, 0, 1.0};
Point(40) = {-0.023220, 0.739891, 0, 1.0};
Point(41) = {-0.016824, 0.742947, 0, 1.0};
Point(42) = {-0.008782, 0.745904, 0, 1.0};
Point(43) = {0.000648, 0.748016, 0, 1.0};
Point(44) = {0.010581, 0.749018, 0, 1.0};
Point(45) = {0.020469, 0.749279, 0, 1.0};
Point(46) = {0.030172, 0.749110, 0, 1.0};
Point(47) = {0.039603, 0.748645, 0, 1.0};
Point(48) = {0.048683, 0.748011, 0, 1.0};
Point(49) = {0.057352, 0.747281, 0, 1.0};
Point(50) = {0.065561, 0.746522, 0, 1.0};
Point(51) = {0.073254, 0.745757, 0, 1.0};
Point(52) = {0.080371, 0.745025, 0, 1.0};
Point(53) = {0.086859, 0.744346, 0, 1.0};
Point(54) = {0.092671, 0.743746, 0, 1.0};
Point(55) = {0.097768, 0.743239, 0, 1.0};
Point(56) = {0.102118, 0.742841, 0, 1.0};
Point(57) = {0.105694, 0.742563, 0, 1.0};
Point(58) = {0.108505, 0.742417, 0, 1.0};
Point(59) = {0.110565, 0.742359, 0, 1.0};
Point(60) = {0.111841, 0.742336, 0, 1.0};
Point(61) = {-0.112274, -0.742324, 0, 1.0};
Point(62) = {-0.111840, -0.742351, 0, 1.0};
Point(63) = {-0.110538, -0.742433, 0, 1.0};
Point(64) = {-0.108382, -0.742580, 0, 1.0};
Point(65) = {-0.105404, -0.742816, 0, 1.0};
Point(66) = {-0.101662, -0.743149, 0, 1.0};
Point(67) = {-0.097215, -0.743572, 0, 1.0};
Point(68) = {-0.092127, -0.744077, 0, 1.0};
Point(69) = {-0.086473, -0.744657, 0, 1.0};
Point(70) = {-0.080324, -0.745295, 0, 1.0};
Point(71) = {-0.073763, -0.745979, 0, 1.0};
Point(72) = {-0.066877, -0.746690, 0, 1.0};
Point(73) = {-0.059754, -0.747401, 0, 1.0};
Point(74) = {-0.052486, -0.748094, 0, 1.0};
Point(75) = {-0.045167, -0.748744, 0, 1.0};
Point(76) = {-0.037887, -0.749309, 0, 1.0};
Point(77) = {-0.030742, -0.749746, 0, 1.0};
Point(78) = {-0.023795, -0.749991, 0, 1.0};
Point(79) = {-0.017075, -0.750000, 0, 1.0};
Point(80) = {-0.010613, -0.749756, 0, 1.0};
Point(81) = {-0.004434, -0.749258, 0, 1.0};
Point(82) = {0.001438, -0.748507, 0, 1.0};
Point(83) = {0.006984, -0.747532, 0, 1.0};
Point(84) = {0.012178, -0.746374, 0, 1.0};
Point(85) = {0.016971, -0.745079, 0, 1.0};
Point(86) = {0.021318, -0.743674, 0, 1.0};
Point(87) = {0.025187, -0.742195, 0, 1.0};
Point(88) = {0.028544, -0.740673, 0, 1.0};
Point(89) = {0.031373, -0.739140, 0, 1.0};
Point(90) = {0.033655, -0.737637, 0, 1.0};
Point(91) = {0.035391, -0.736203, 0, 1.0};
Point(92) = {0.036582, -0.734891, 0, 1.0};
Point(93) = {0.037250, -0.733757, 0, 1.0};
Point(94) = {0.037427, -0.732904, 0, 1.0};
Point(95) = {0.037092, -0.732531, 0, 1.0};
Point(96) = {0.036135, -0.732719, 0, 1.0};
Point(97) = {0.034433, -0.733532, 0, 1.0};
Point(98) = {0.031832, -0.735026, 0, 1.0};
Point(99) = {0.028160, -0.737184, 0, 1.0};
Point(100) = {0.023220, -0.739891, 0, 1.0};
Point(101) = {0.016824, -0.742947, 0, 1.0};
Point(102) = {0.008782, -0.745904, 0, 1.0};
Point(103) = {-0.000648, -0.748016, 0, 1.0};
Point(104) = {-0.010581, -0.749018, 0, 1.0};
Point(105) = {-0.020469, -0.749279, 0, 1.0};
Point(106) = {-0.030172, -0.749110, 0, 1.0};
Point(107) = {-0.039603, -0.748645, 0, 1.0};
Point(108) = {-0.048683, -0.748011, 0, 1.0};
Point(109) = {-0.057352, -0.747281, 0, 1.0};
Point(110) = {-0.065561, -0.746522, 0, 1.0};
Point(111) = {-0.073254, -0.745757, 0, 1.0};
Point(112) = {-0.080371, -0.745025, 0, 1.0};
Point(113) = {-0.086859, -0.744346, 0, 1.0};
Point(114) = {-0.092671, -0.743746, 0, 1.0};
Point(115) = {-0.097768, -0.743239, 0, 1.0};
Point(116) = {-0.102118, -0.742841, 0, 1.0};
Point(117) = {-0.105694, -0.742563, 0, 1.0};
Point(118) = {-0.108505, -0.742417, 0, 1.0};
Point(119) = {-0.110565, -0.742359, 0, 1.0};
Point(120) = {-0.111841, -0.742336, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html