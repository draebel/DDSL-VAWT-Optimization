SetFactory("OpenCASCADE");

Point(1) = {0.112442, 0.741715, 0, 1.0};
Point(2) = {0.112015, 0.741884, 0, 1.0};
Point(3) = {0.110828, 0.742377, 0, 1.0};
Point(4) = {0.109024, 0.743093, 0, 1.0};
Point(5) = {0.106631, 0.743872, 0, 1.0};
Point(6) = {0.103591, 0.744640, 0, 1.0};
Point(7) = {0.099894, 0.745404, 0, 1.0};
Point(8) = {0.095583, 0.746163, 0, 1.0};
Point(9) = {0.090701, 0.746893, 0, 1.0};
Point(10) = {0.085297, 0.747579, 0, 1.0};
Point(11) = {0.079425, 0.748204, 0, 1.0};
Point(12) = {0.073143, 0.748758, 0, 1.0};
Point(13) = {0.066513, 0.749220, 0, 1.0};
Point(14) = {0.059603, 0.749586, 0, 1.0};
Point(15) = {0.052481, 0.749841, 0, 1.0};
Point(16) = {0.045217, 0.749983, 0, 1.0};
Point(17) = {0.037881, 0.750000, 0, 1.0};
Point(18) = {0.030550, 0.749896, 0, 1.0};
Point(19) = {0.023292, 0.749662, 0, 1.0};
Point(20) = {0.016181, 0.749306, 0, 1.0};
Point(21) = {0.009286, 0.748826, 0, 1.0};
Point(22) = {0.002675, 0.748230, 0, 1.0};
Point(23) = {-0.003589, 0.747520, 0, 1.0};
Point(24) = {-0.009451, 0.746708, 0, 1.0};
Point(25) = {-0.014853, 0.745802, 0, 1.0};
Point(26) = {-0.019749, 0.744818, 0, 1.0};
Point(27) = {-0.024102, 0.743768, 0, 1.0};
Point(28) = {-0.027875, 0.742672, 0, 1.0};
Point(29) = {-0.031044, 0.741552, 0, 1.0};
Point(30) = {-0.033595, 0.740436, 0, 1.0};
Point(31) = {-0.035511, 0.739359, 0, 1.0};
Point(32) = {-0.036802, 0.738362, 0, 1.0};
Point(33) = {-0.037468, 0.737519, 0, 1.0};
Point(34) = {-0.037483, 0.736980, 0, 1.0};
Point(35) = {-0.036722, 0.736755, 0, 1.0};
Point(36) = {-0.035080, 0.736768, 0, 1.0};
Point(37) = {-0.032587, 0.736998, 0, 1.0};
Point(38) = {-0.029246, 0.737434, 0, 1.0};
Point(39) = {-0.025072, 0.738039, 0, 1.0};
Point(40) = {-0.020096, 0.738779, 0, 1.0};
Point(41) = {-0.014366, 0.739617, 0, 1.0};
Point(42) = {-0.007942, 0.740515, 0, 1.0};
Point(43) = {-0.000900, 0.741438, 0, 1.0};
Point(44) = {0.006678, 0.742347, 0, 1.0};
Point(45) = {0.014696, 0.743213, 0, 1.0};
Point(46) = {0.023053, 0.744001, 0, 1.0};
Point(47) = {0.031642, 0.744690, 0, 1.0};
Point(48) = {0.040347, 0.745250, 0, 1.0};
Point(49) = {0.049048, 0.745669, 0, 1.0};
Point(50) = {0.057624, 0.745928, 0, 1.0};
Point(51) = {0.065953, 0.746027, 0, 1.0};
Point(52) = {0.073921, 0.745964, 0, 1.0};
Point(53) = {0.081411, 0.745749, 0, 1.0};
Point(54) = {0.088314, 0.745387, 0, 1.0};
Point(55) = {0.094526, 0.744901, 0, 1.0};
Point(56) = {0.099954, 0.744310, 0, 1.0};
Point(57) = {0.104511, 0.743637, 0, 1.0};
Point(58) = {0.108074, 0.742915, 0, 1.0};
Point(59) = {0.110555, 0.742274, 0, 1.0};
Point(60) = {0.111980, 0.741854, 0, 1.0};
Point(61) = {-0.112442, -0.741715, 0, 1.0};
Point(62) = {-0.112015, -0.741884, 0, 1.0};
Point(63) = {-0.110828, -0.742377, 0, 1.0};
Point(64) = {-0.109024, -0.743093, 0, 1.0};
Point(65) = {-0.106631, -0.743872, 0, 1.0};
Point(66) = {-0.103591, -0.744640, 0, 1.0};
Point(67) = {-0.099894, -0.745404, 0, 1.0};
Point(68) = {-0.095583, -0.746163, 0, 1.0};
Point(69) = {-0.090701, -0.746893, 0, 1.0};
Point(70) = {-0.085297, -0.747579, 0, 1.0};
Point(71) = {-0.079425, -0.748204, 0, 1.0};
Point(72) = {-0.073143, -0.748758, 0, 1.0};
Point(73) = {-0.066513, -0.749220, 0, 1.0};
Point(74) = {-0.059603, -0.749586, 0, 1.0};
Point(75) = {-0.052481, -0.749841, 0, 1.0};
Point(76) = {-0.045217, -0.749983, 0, 1.0};
Point(77) = {-0.037881, -0.750000, 0, 1.0};
Point(78) = {-0.030550, -0.749896, 0, 1.0};
Point(79) = {-0.023292, -0.749662, 0, 1.0};
Point(80) = {-0.016181, -0.749306, 0, 1.0};
Point(81) = {-0.009286, -0.748826, 0, 1.0};
Point(82) = {-0.002675, -0.748230, 0, 1.0};
Point(83) = {0.003589, -0.747520, 0, 1.0};
Point(84) = {0.009451, -0.746708, 0, 1.0};
Point(85) = {0.014853, -0.745802, 0, 1.0};
Point(86) = {0.019749, -0.744818, 0, 1.0};
Point(87) = {0.024102, -0.743768, 0, 1.0};
Point(88) = {0.027875, -0.742672, 0, 1.0};
Point(89) = {0.031044, -0.741552, 0, 1.0};
Point(90) = {0.033595, -0.740436, 0, 1.0};
Point(91) = {0.035511, -0.739359, 0, 1.0};
Point(92) = {0.036802, -0.738362, 0, 1.0};
Point(93) = {0.037468, -0.737519, 0, 1.0};
Point(94) = {0.037483, -0.736980, 0, 1.0};
Point(95) = {0.036722, -0.736755, 0, 1.0};
Point(96) = {0.035080, -0.736768, 0, 1.0};
Point(97) = {0.032587, -0.736998, 0, 1.0};
Point(98) = {0.029246, -0.737434, 0, 1.0};
Point(99) = {0.025072, -0.738039, 0, 1.0};
Point(100) = {0.020096, -0.738779, 0, 1.0};
Point(101) = {0.014366, -0.739617, 0, 1.0};
Point(102) = {0.007942, -0.740515, 0, 1.0};
Point(103) = {0.000900, -0.741438, 0, 1.0};
Point(104) = {-0.006678, -0.742347, 0, 1.0};
Point(105) = {-0.014696, -0.743213, 0, 1.0};
Point(106) = {-0.023053, -0.744001, 0, 1.0};
Point(107) = {-0.031642, -0.744690, 0, 1.0};
Point(108) = {-0.040347, -0.745250, 0, 1.0};
Point(109) = {-0.049048, -0.745669, 0, 1.0};
Point(110) = {-0.057624, -0.745928, 0, 1.0};
Point(111) = {-0.065953, -0.746027, 0, 1.0};
Point(112) = {-0.073921, -0.745964, 0, 1.0};
Point(113) = {-0.081411, -0.745749, 0, 1.0};
Point(114) = {-0.088314, -0.745387, 0, 1.0};
Point(115) = {-0.094526, -0.744901, 0, 1.0};
Point(116) = {-0.099954, -0.744310, 0, 1.0};
Point(117) = {-0.104511, -0.743637, 0, 1.0};
Point(118) = {-0.108074, -0.742915, 0, 1.0};
Point(119) = {-0.110555, -0.742274, 0, 1.0};
Point(120) = {-0.111980, -0.741854, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html