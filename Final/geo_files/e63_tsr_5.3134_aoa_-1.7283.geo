SetFactory("OpenCASCADE");

Point(1) = {0.112432, 0.741720, 0, 1.0};
Point(2) = {0.112005, 0.741889, 0, 1.0};
Point(3) = {0.110818, 0.742381, 0, 1.0};
Point(4) = {0.109015, 0.743096, 0, 1.0};
Point(5) = {0.106624, 0.743875, 0, 1.0};
Point(6) = {0.103586, 0.744643, 0, 1.0};
Point(7) = {0.099890, 0.745407, 0, 1.0};
Point(8) = {0.095582, 0.746165, 0, 1.0};
Point(9) = {0.090702, 0.746894, 0, 1.0};
Point(10) = {0.085301, 0.747581, 0, 1.0};
Point(11) = {0.079433, 0.748205, 0, 1.0};
Point(12) = {0.073154, 0.748758, 0, 1.0};
Point(13) = {0.066528, 0.749220, 0, 1.0};
Point(14) = {0.059621, 0.749587, 0, 1.0};
Point(15) = {0.052503, 0.749842, 0, 1.0};
Point(16) = {0.045243, 0.749983, 0, 1.0};
Point(17) = {0.037912, 0.750000, 0, 1.0};
Point(18) = {0.030584, 0.749896, 0, 1.0};
Point(19) = {0.023331, 0.749662, 0, 1.0};
Point(20) = {0.016224, 0.749307, 0, 1.0};
Point(21) = {0.009332, 0.748827, 0, 1.0};
Point(22) = {0.002724, 0.748231, 0, 1.0};
Point(23) = {-0.003536, 0.747522, 0, 1.0};
Point(24) = {-0.009394, 0.746710, 0, 1.0};
Point(25) = {-0.014793, 0.745804, 0, 1.0};
Point(26) = {-0.019687, 0.744821, 0, 1.0};
Point(27) = {-0.024038, 0.743771, 0, 1.0};
Point(28) = {-0.027809, 0.742676, 0, 1.0};
Point(29) = {-0.030976, 0.741557, 0, 1.0};
Point(30) = {-0.033525, 0.740442, 0, 1.0};
Point(31) = {-0.035440, 0.739365, 0, 1.0};
Point(32) = {-0.036731, 0.738368, 0, 1.0};
Point(33) = {-0.037396, 0.737526, 0, 1.0};
Point(34) = {-0.037411, 0.736987, 0, 1.0};
Point(35) = {-0.036651, 0.736762, 0, 1.0};
Point(36) = {-0.035010, 0.736776, 0, 1.0};
Point(37) = {-0.032518, 0.737005, 0, 1.0};
Point(38) = {-0.029179, 0.737441, 0, 1.0};
Point(39) = {-0.025007, 0.738045, 0, 1.0};
Point(40) = {-0.020033, 0.738785, 0, 1.0};
Point(41) = {-0.014307, 0.739623, 0, 1.0};
Point(42) = {-0.007887, 0.740520, 0, 1.0};
Point(43) = {-0.000848, 0.741443, 0, 1.0};
Point(44) = {0.006726, 0.742351, 0, 1.0};
Point(45) = {0.014739, 0.743217, 0, 1.0};
Point(46) = {0.023092, 0.744005, 0, 1.0};
Point(47) = {0.031676, 0.744693, 0, 1.0};
Point(48) = {0.040376, 0.745253, 0, 1.0};
Point(49) = {0.049072, 0.745671, 0, 1.0};
Point(50) = {0.057644, 0.745930, 0, 1.0};
Point(51) = {0.065968, 0.746029, 0, 1.0};
Point(52) = {0.073931, 0.745967, 0, 1.0};
Point(53) = {0.081417, 0.745751, 0, 1.0};
Point(54) = {0.088316, 0.745389, 0, 1.0};
Point(55) = {0.094526, 0.744904, 0, 1.0};
Point(56) = {0.099950, 0.744313, 0, 1.0};
Point(57) = {0.104504, 0.743640, 0, 1.0};
Point(58) = {0.108066, 0.742919, 0, 1.0};
Point(59) = {0.110545, 0.742278, 0, 1.0};
Point(60) = {0.111970, 0.741859, 0, 1.0};
Point(61) = {-0.112432, -0.741720, 0, 1.0};
Point(62) = {-0.112005, -0.741889, 0, 1.0};
Point(63) = {-0.110818, -0.742381, 0, 1.0};
Point(64) = {-0.109015, -0.743096, 0, 1.0};
Point(65) = {-0.106624, -0.743875, 0, 1.0};
Point(66) = {-0.103586, -0.744643, 0, 1.0};
Point(67) = {-0.099890, -0.745407, 0, 1.0};
Point(68) = {-0.095582, -0.746165, 0, 1.0};
Point(69) = {-0.090702, -0.746894, 0, 1.0};
Point(70) = {-0.085301, -0.747581, 0, 1.0};
Point(71) = {-0.079433, -0.748205, 0, 1.0};
Point(72) = {-0.073154, -0.748758, 0, 1.0};
Point(73) = {-0.066528, -0.749220, 0, 1.0};
Point(74) = {-0.059621, -0.749587, 0, 1.0};
Point(75) = {-0.052503, -0.749842, 0, 1.0};
Point(76) = {-0.045243, -0.749983, 0, 1.0};
Point(77) = {-0.037912, -0.750000, 0, 1.0};
Point(78) = {-0.030584, -0.749896, 0, 1.0};
Point(79) = {-0.023331, -0.749662, 0, 1.0};
Point(80) = {-0.016224, -0.749307, 0, 1.0};
Point(81) = {-0.009332, -0.748827, 0, 1.0};
Point(82) = {-0.002724, -0.748231, 0, 1.0};
Point(83) = {0.003536, -0.747522, 0, 1.0};
Point(84) = {0.009394, -0.746710, 0, 1.0};
Point(85) = {0.014793, -0.745804, 0, 1.0};
Point(86) = {0.019687, -0.744821, 0, 1.0};
Point(87) = {0.024038, -0.743771, 0, 1.0};
Point(88) = {0.027809, -0.742676, 0, 1.0};
Point(89) = {0.030976, -0.741557, 0, 1.0};
Point(90) = {0.033525, -0.740442, 0, 1.0};
Point(91) = {0.035440, -0.739365, 0, 1.0};
Point(92) = {0.036731, -0.738368, 0, 1.0};
Point(93) = {0.037396, -0.737526, 0, 1.0};
Point(94) = {0.037411, -0.736987, 0, 1.0};
Point(95) = {0.036651, -0.736762, 0, 1.0};
Point(96) = {0.035010, -0.736776, 0, 1.0};
Point(97) = {0.032518, -0.737005, 0, 1.0};
Point(98) = {0.029179, -0.737441, 0, 1.0};
Point(99) = {0.025007, -0.738045, 0, 1.0};
Point(100) = {0.020033, -0.738785, 0, 1.0};
Point(101) = {0.014307, -0.739623, 0, 1.0};
Point(102) = {0.007887, -0.740520, 0, 1.0};
Point(103) = {0.000848, -0.741443, 0, 1.0};
Point(104) = {-0.006726, -0.742351, 0, 1.0};
Point(105) = {-0.014739, -0.743217, 0, 1.0};
Point(106) = {-0.023092, -0.744005, 0, 1.0};
Point(107) = {-0.031676, -0.744693, 0, 1.0};
Point(108) = {-0.040376, -0.745253, 0, 1.0};
Point(109) = {-0.049072, -0.745671, 0, 1.0};
Point(110) = {-0.057644, -0.745930, 0, 1.0};
Point(111) = {-0.065968, -0.746029, 0, 1.0};
Point(112) = {-0.073931, -0.745967, 0, 1.0};
Point(113) = {-0.081417, -0.745751, 0, 1.0};
Point(114) = {-0.088316, -0.745389, 0, 1.0};
Point(115) = {-0.094526, -0.744904, 0, 1.0};
Point(116) = {-0.099950, -0.744313, 0, 1.0};
Point(117) = {-0.104504, -0.743640, 0, 1.0};
Point(118) = {-0.108066, -0.742919, 0, 1.0};
Point(119) = {-0.110545, -0.742278, 0, 1.0};
Point(120) = {-0.111970, -0.741859, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html