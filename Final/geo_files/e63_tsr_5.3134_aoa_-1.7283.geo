SetFactory("OpenCASCADE");

Point(1) = {0.149909, 0.738960, 0, 1.0};
Point(2) = {0.149340, 0.739185, 0, 1.0};
Point(3) = {0.147757, 0.739841, 0, 1.0};
Point(4) = {0.145354, 0.740795, 0, 1.0};
Point(5) = {0.142165, 0.741833, 0, 1.0};
Point(6) = {0.138114, 0.742858, 0, 1.0};
Point(7) = {0.133187, 0.743876, 0, 1.0};
Point(8) = {0.127442, 0.744887, 0, 1.0};
Point(9) = {0.120936, 0.745859, 0, 1.0};
Point(10) = {0.113735, 0.746774, 0, 1.0};
Point(11) = {0.105910, 0.747607, 0, 1.0};
Point(12) = {0.097538, 0.748344, 0, 1.0};
Point(13) = {0.088704, 0.748960, 0, 1.0};
Point(14) = {0.079495, 0.749449, 0, 1.0};
Point(15) = {0.070004, 0.749789, 0, 1.0};
Point(16) = {0.060324, 0.749977, 0, 1.0};
Point(17) = {0.050549, 0.750000, 0, 1.0};
Point(18) = {0.040779, 0.749861, 0, 1.0};
Point(19) = {0.031108, 0.749549, 0, 1.0};
Point(20) = {0.021632, 0.749075, 0, 1.0};
Point(21) = {0.012443, 0.748436, 0, 1.0};
Point(22) = {0.003633, 0.747642, 0, 1.0};
Point(23) = {-0.004715, 0.746696, 0, 1.0};
Point(24) = {-0.012526, 0.745614, 0, 1.0};
Point(25) = {-0.019724, 0.744406, 0, 1.0};
Point(26) = {-0.026250, 0.743095, 0, 1.0};
Point(27) = {-0.032050, 0.741695, 0, 1.0};
Point(28) = {-0.037079, 0.740235, 0, 1.0};
Point(29) = {-0.041301, 0.738743, 0, 1.0};
Point(30) = {-0.044700, 0.737255, 0, 1.0};
Point(31) = {-0.047254, 0.735820, 0, 1.0};
Point(32) = {-0.048975, 0.734491, 0, 1.0};
Point(33) = {-0.049861, 0.733368, 0, 1.0};
Point(34) = {-0.049882, 0.732649, 0, 1.0};
Point(35) = {-0.048868, 0.732349, 0, 1.0};
Point(36) = {-0.046680, 0.732368, 0, 1.0};
Point(37) = {-0.043357, 0.732674, 0, 1.0};
Point(38) = {-0.038905, 0.733254, 0, 1.0};
Point(39) = {-0.033343, 0.734061, 0, 1.0};
Point(40) = {-0.026711, 0.735047, 0, 1.0};
Point(41) = {-0.019076, 0.736164, 0, 1.0};
Point(42) = {-0.010516, 0.737361, 0, 1.0};
Point(43) = {-0.001131, 0.738590, 0, 1.0};
Point(44) = {0.008968, 0.739801, 0, 1.0};
Point(45) = {0.019652, 0.740956, 0, 1.0};
Point(46) = {0.030789, 0.742006, 0, 1.0};
Point(47) = {0.042234, 0.742924, 0, 1.0};
Point(48) = {0.053835, 0.743670, 0, 1.0};
Point(49) = {0.065430, 0.744228, 0, 1.0};
Point(50) = {0.076858, 0.744573, 0, 1.0};
Point(51) = {0.087958, 0.744706, 0, 1.0};
Point(52) = {0.098575, 0.744622, 0, 1.0};
Point(53) = {0.108556, 0.744335, 0, 1.0};
Point(54) = {0.117755, 0.743852, 0, 1.0};
Point(55) = {0.126034, 0.743206, 0, 1.0};
Point(56) = {0.133267, 0.742417, 0, 1.0};
Point(57) = {0.139339, 0.741520, 0, 1.0};
Point(58) = {0.144088, 0.740559, 0, 1.0};
Point(59) = {0.147393, 0.739704, 0, 1.0};
Point(60) = {0.149293, 0.739145, 0, 1.0};
Point(61) = {-0.149909, -0.738960, 0, 1.0};
Point(62) = {-0.149340, -0.739185, 0, 1.0};
Point(63) = {-0.147757, -0.739841, 0, 1.0};
Point(64) = {-0.145354, -0.740795, 0, 1.0};
Point(65) = {-0.142165, -0.741833, 0, 1.0};
Point(66) = {-0.138114, -0.742858, 0, 1.0};
Point(67) = {-0.133187, -0.743876, 0, 1.0};
Point(68) = {-0.127442, -0.744887, 0, 1.0};
Point(69) = {-0.120936, -0.745859, 0, 1.0};
Point(70) = {-0.113735, -0.746774, 0, 1.0};
Point(71) = {-0.105910, -0.747607, 0, 1.0};
Point(72) = {-0.097538, -0.748344, 0, 1.0};
Point(73) = {-0.088704, -0.748960, 0, 1.0};
Point(74) = {-0.079495, -0.749449, 0, 1.0};
Point(75) = {-0.070004, -0.749789, 0, 1.0};
Point(76) = {-0.060324, -0.749977, 0, 1.0};
Point(77) = {-0.050549, -0.750000, 0, 1.0};
Point(78) = {-0.040779, -0.749861, 0, 1.0};
Point(79) = {-0.031108, -0.749549, 0, 1.0};
Point(80) = {-0.021632, -0.749075, 0, 1.0};
Point(81) = {-0.012443, -0.748436, 0, 1.0};
Point(82) = {-0.003633, -0.747642, 0, 1.0};
Point(83) = {0.004715, -0.746696, 0, 1.0};
Point(84) = {0.012526, -0.745614, 0, 1.0};
Point(85) = {0.019724, -0.744406, 0, 1.0};
Point(86) = {0.026250, -0.743095, 0, 1.0};
Point(87) = {0.032050, -0.741695, 0, 1.0};
Point(88) = {0.037079, -0.740235, 0, 1.0};
Point(89) = {0.041301, -0.738743, 0, 1.0};
Point(90) = {0.044700, -0.737255, 0, 1.0};
Point(91) = {0.047254, -0.735820, 0, 1.0};
Point(92) = {0.048975, -0.734491, 0, 1.0};
Point(93) = {0.049861, -0.733368, 0, 1.0};
Point(94) = {0.049882, -0.732649, 0, 1.0};
Point(95) = {0.048868, -0.732349, 0, 1.0};
Point(96) = {0.046680, -0.732368, 0, 1.0};
Point(97) = {0.043357, -0.732674, 0, 1.0};
Point(98) = {0.038905, -0.733254, 0, 1.0};
Point(99) = {0.033343, -0.734061, 0, 1.0};
Point(100) = {0.026711, -0.735047, 0, 1.0};
Point(101) = {0.019076, -0.736164, 0, 1.0};
Point(102) = {0.010516, -0.737361, 0, 1.0};
Point(103) = {0.001131, -0.738590, 0, 1.0};
Point(104) = {-0.008968, -0.739801, 0, 1.0};
Point(105) = {-0.019652, -0.740956, 0, 1.0};
Point(106) = {-0.030789, -0.742006, 0, 1.0};
Point(107) = {-0.042234, -0.742924, 0, 1.0};
Point(108) = {-0.053835, -0.743670, 0, 1.0};
Point(109) = {-0.065430, -0.744228, 0, 1.0};
Point(110) = {-0.076858, -0.744573, 0, 1.0};
Point(111) = {-0.087958, -0.744706, 0, 1.0};
Point(112) = {-0.098575, -0.744622, 0, 1.0};
Point(113) = {-0.108556, -0.744335, 0, 1.0};
Point(114) = {-0.117755, -0.743852, 0, 1.0};
Point(115) = {-0.126034, -0.743206, 0, 1.0};
Point(116) = {-0.133267, -0.742417, 0, 1.0};
Point(117) = {-0.139339, -0.741520, 0, 1.0};
Point(118) = {-0.144088, -0.740559, 0, 1.0};
Point(119) = {-0.147393, -0.739704, 0, 1.0};
Point(120) = {-0.149293, -0.739145, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html