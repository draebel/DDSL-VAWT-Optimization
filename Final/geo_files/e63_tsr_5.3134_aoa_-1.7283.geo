SetFactory("OpenCASCADE");

Point(1) = {0.074955, 0.744480, 0, 1.0};
Point(2) = {0.074670, 0.744592, 0, 1.0};
Point(3) = {0.073879, 0.744921, 0, 1.0};
Point(4) = {0.072677, 0.745398, 0, 1.0};
Point(5) = {0.071082, 0.745917, 0, 1.0};
Point(6) = {0.069057, 0.746429, 0, 1.0};
Point(7) = {0.066594, 0.746938, 0, 1.0};
Point(8) = {0.063721, 0.747443, 0, 1.0};
Point(9) = {0.060468, 0.747930, 0, 1.0};
Point(10) = {0.056867, 0.748387, 0, 1.0};
Point(11) = {0.052955, 0.748803, 0, 1.0};
Point(12) = {0.048769, 0.749172, 0, 1.0};
Point(13) = {0.044352, 0.749480, 0, 1.0};
Point(14) = {0.039747, 0.749724, 0, 1.0};
Point(15) = {0.035002, 0.749894, 0, 1.0};
Point(16) = {0.030162, 0.749988, 0, 1.0};
Point(17) = {0.025274, 0.750000, 0, 1.0};
Point(18) = {0.020389, 0.749931, 0, 1.0};
Point(19) = {0.015554, 0.749775, 0, 1.0};
Point(20) = {0.010816, 0.749538, 0, 1.0};
Point(21) = {0.006221, 0.749218, 0, 1.0};
Point(22) = {0.001816, 0.748821, 0, 1.0};
Point(23) = {-0.002357, 0.748348, 0, 1.0};
Point(24) = {-0.006263, 0.747807, 0, 1.0};
Point(25) = {-0.009862, 0.747203, 0, 1.0};
Point(26) = {-0.013125, 0.746547, 0, 1.0};
Point(27) = {-0.016025, 0.745847, 0, 1.0};
Point(28) = {-0.018539, 0.745117, 0, 1.0};
Point(29) = {-0.020651, 0.744371, 0, 1.0};
Point(30) = {-0.022350, 0.743628, 0, 1.0};
Point(31) = {-0.023627, 0.742910, 0, 1.0};
Point(32) = {-0.024487, 0.742246, 0, 1.0};
Point(33) = {-0.024931, 0.741684, 0, 1.0};
Point(34) = {-0.024941, 0.741325, 0, 1.0};
Point(35) = {-0.024434, 0.741175, 0, 1.0};
Point(36) = {-0.023340, 0.741184, 0, 1.0};
Point(37) = {-0.021679, 0.741337, 0, 1.0};
Point(38) = {-0.019452, 0.741627, 0, 1.0};
Point(39) = {-0.016671, 0.742030, 0, 1.0};
Point(40) = {-0.013356, 0.742523, 0, 1.0};
Point(41) = {-0.009538, 0.743082, 0, 1.0};
Point(42) = {-0.005258, 0.743680, 0, 1.0};
Point(43) = {-0.000565, 0.744295, 0, 1.0};
Point(44) = {0.004484, 0.744901, 0, 1.0};
Point(45) = {0.009826, 0.745478, 0, 1.0};
Point(46) = {0.015394, 0.746003, 0, 1.0};
Point(47) = {0.021117, 0.746462, 0, 1.0};
Point(48) = {0.026918, 0.746835, 0, 1.0};
Point(49) = {0.032715, 0.747114, 0, 1.0};
Point(50) = {0.038429, 0.747287, 0, 1.0};
Point(51) = {0.043979, 0.747353, 0, 1.0};
Point(52) = {0.049287, 0.747311, 0, 1.0};
Point(53) = {0.054278, 0.747167, 0, 1.0};
Point(54) = {0.058877, 0.746926, 0, 1.0};
Point(55) = {0.063017, 0.746603, 0, 1.0};
Point(56) = {0.066634, 0.746209, 0, 1.0};
Point(57) = {0.069669, 0.745760, 0, 1.0};
Point(58) = {0.072044, 0.745279, 0, 1.0};
Point(59) = {0.073697, 0.744852, 0, 1.0};
Point(60) = {0.074647, 0.744573, 0, 1.0};
Point(61) = {-0.074955, -0.744480, 0, 1.0};
Point(62) = {-0.074670, -0.744592, 0, 1.0};
Point(63) = {-0.073879, -0.744921, 0, 1.0};
Point(64) = {-0.072677, -0.745398, 0, 1.0};
Point(65) = {-0.071082, -0.745917, 0, 1.0};
Point(66) = {-0.069057, -0.746429, 0, 1.0};
Point(67) = {-0.066594, -0.746938, 0, 1.0};
Point(68) = {-0.063721, -0.747443, 0, 1.0};
Point(69) = {-0.060468, -0.747930, 0, 1.0};
Point(70) = {-0.056867, -0.748387, 0, 1.0};
Point(71) = {-0.052955, -0.748803, 0, 1.0};
Point(72) = {-0.048769, -0.749172, 0, 1.0};
Point(73) = {-0.044352, -0.749480, 0, 1.0};
Point(74) = {-0.039747, -0.749724, 0, 1.0};
Point(75) = {-0.035002, -0.749894, 0, 1.0};
Point(76) = {-0.030162, -0.749988, 0, 1.0};
Point(77) = {-0.025274, -0.750000, 0, 1.0};
Point(78) = {-0.020389, -0.749931, 0, 1.0};
Point(79) = {-0.015554, -0.749775, 0, 1.0};
Point(80) = {-0.010816, -0.749538, 0, 1.0};
Point(81) = {-0.006221, -0.749218, 0, 1.0};
Point(82) = {-0.001816, -0.748821, 0, 1.0};
Point(83) = {0.002357, -0.748348, 0, 1.0};
Point(84) = {0.006263, -0.747807, 0, 1.0};
Point(85) = {0.009862, -0.747203, 0, 1.0};
Point(86) = {0.013125, -0.746547, 0, 1.0};
Point(87) = {0.016025, -0.745847, 0, 1.0};
Point(88) = {0.018539, -0.745117, 0, 1.0};
Point(89) = {0.020651, -0.744371, 0, 1.0};
Point(90) = {0.022350, -0.743628, 0, 1.0};
Point(91) = {0.023627, -0.742910, 0, 1.0};
Point(92) = {0.024487, -0.742246, 0, 1.0};
Point(93) = {0.024931, -0.741684, 0, 1.0};
Point(94) = {0.024941, -0.741325, 0, 1.0};
Point(95) = {0.024434, -0.741175, 0, 1.0};
Point(96) = {0.023340, -0.741184, 0, 1.0};
Point(97) = {0.021679, -0.741337, 0, 1.0};
Point(98) = {0.019452, -0.741627, 0, 1.0};
Point(99) = {0.016671, -0.742030, 0, 1.0};
Point(100) = {0.013356, -0.742523, 0, 1.0};
Point(101) = {0.009538, -0.743082, 0, 1.0};
Point(102) = {0.005258, -0.743680, 0, 1.0};
Point(103) = {0.000565, -0.744295, 0, 1.0};
Point(104) = {-0.004484, -0.744901, 0, 1.0};
Point(105) = {-0.009826, -0.745478, 0, 1.0};
Point(106) = {-0.015394, -0.746003, 0, 1.0};
Point(107) = {-0.021117, -0.746462, 0, 1.0};
Point(108) = {-0.026918, -0.746835, 0, 1.0};
Point(109) = {-0.032715, -0.747114, 0, 1.0};
Point(110) = {-0.038429, -0.747287, 0, 1.0};
Point(111) = {-0.043979, -0.747353, 0, 1.0};
Point(112) = {-0.049287, -0.747311, 0, 1.0};
Point(113) = {-0.054278, -0.747167, 0, 1.0};
Point(114) = {-0.058877, -0.746926, 0, 1.0};
Point(115) = {-0.063017, -0.746603, 0, 1.0};
Point(116) = {-0.066634, -0.746209, 0, 1.0};
Point(117) = {-0.069669, -0.745760, 0, 1.0};
Point(118) = {-0.072044, -0.745279, 0, 1.0};
Point(119) = {-0.073697, -0.744852, 0, 1.0};
Point(120) = {-0.074647, -0.744573, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html