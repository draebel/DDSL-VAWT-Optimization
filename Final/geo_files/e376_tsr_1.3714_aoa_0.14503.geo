SetFactory("OpenCASCADE");

Point(1) = {0.112497, 0.735975, 0, 1.0};
Point(2) = {0.112065, 0.736030, 0, 1.0};
Point(3) = {0.110771, 0.736196, 0, 1.0};
Point(4) = {0.108630, 0.736484, 0, 1.0};
Point(5) = {0.105673, 0.736913, 0, 1.0};
Point(6) = {0.101960, 0.737488, 0, 1.0};
Point(7) = {0.097550, 0.738199, 0, 1.0};
Point(8) = {0.092507, 0.739034, 0, 1.0};
Point(9) = {0.086902, 0.739980, 0, 1.0};
Point(10) = {0.080807, 0.741017, 0, 1.0};
Point(11) = {0.074305, 0.742125, 0, 1.0};
Point(12) = {0.067480, 0.743282, 0, 1.0};
Point(13) = {0.060418, 0.744455, 0, 1.0};
Point(14) = {0.053210, 0.745620, 0, 1.0};
Point(15) = {0.045948, 0.746743, 0, 1.0};
Point(16) = {0.038721, 0.747780, 0, 1.0};
Point(17) = {0.031619, 0.748682, 0, 1.0};
Point(18) = {0.024703, 0.749377, 0, 1.0};
Point(19) = {0.017998, 0.749823, 0, 1.0};
Point(20) = {0.011533, 0.750000, 0, 1.0};
Point(21) = {0.005335, 0.749905, 0, 1.0};
Point(22) = {-0.000573, 0.749537, 0, 1.0};
Point(23) = {-0.006171, 0.748924, 0, 1.0};
Point(24) = {-0.011429, 0.748107, 0, 1.0};
Point(25) = {-0.016296, 0.747126, 0, 1.0};
Point(26) = {-0.020725, 0.746006, 0, 1.0};
Point(27) = {-0.024682, 0.744782, 0, 1.0};
Point(28) = {-0.028131, 0.743481, 0, 1.0};
Point(29) = {-0.031053, 0.742135, 0, 1.0};
Point(30) = {-0.033428, 0.740784, 0, 1.0};
Point(31) = {-0.035254, 0.739466, 0, 1.0};
Point(32) = {-0.036528, 0.738234, 0, 1.0};
Point(33) = {-0.037268, 0.737146, 0, 1.0};
Point(34) = {-0.037500, 0.736306, 0, 1.0};
Point(35) = {-0.037190, 0.735912, 0, 1.0};
Point(36) = {-0.036223, 0.736037, 0, 1.0};
Point(37) = {-0.034472, 0.736738, 0, 1.0};
Point(38) = {-0.031779, 0.738060, 0, 1.0};
Point(39) = {-0.027975, 0.739975, 0, 1.0};
Point(40) = {-0.022869, 0.742355, 0, 1.0};
Point(41) = {-0.016288, 0.744988, 0, 1.0};
Point(42) = {-0.008070, 0.747417, 0, 1.0};
Point(43) = {0.001476, 0.748911, 0, 1.0};
Point(44) = {0.011454, 0.749265, 0, 1.0};
Point(45) = {0.021338, 0.748883, 0, 1.0};
Point(46) = {0.031009, 0.748083, 0, 1.0};
Point(47) = {0.040390, 0.747006, 0, 1.0};
Point(48) = {0.049410, 0.745784, 0, 1.0};
Point(49) = {0.058013, 0.744491, 0, 1.0};
Point(50) = {0.066155, 0.743200, 0, 1.0};
Point(51) = {0.073782, 0.741937, 0, 1.0};
Point(52) = {0.080837, 0.740744, 0, 1.0};
Point(53) = {0.087267, 0.739644, 0, 1.0};
Point(54) = {0.093028, 0.738668, 0, 1.0};
Point(55) = {0.098081, 0.737831, 0, 1.0};
Point(56) = {0.102396, 0.737151, 0, 1.0};
Point(57) = {0.105946, 0.736641, 0, 1.0};
Point(58) = {0.108742, 0.736313, 0, 1.0};
Point(59) = {0.110793, 0.736121, 0, 1.0};
Point(60) = {0.112065, 0.736015, 0, 1.0};
Point(61) = {-0.112497, -0.735975, 0, 1.0};
Point(62) = {-0.112065, -0.736030, 0, 1.0};
Point(63) = {-0.110771, -0.736196, 0, 1.0};
Point(64) = {-0.108630, -0.736484, 0, 1.0};
Point(65) = {-0.105673, -0.736913, 0, 1.0};
Point(66) = {-0.101960, -0.737488, 0, 1.0};
Point(67) = {-0.097550, -0.738199, 0, 1.0};
Point(68) = {-0.092507, -0.739034, 0, 1.0};
Point(69) = {-0.086902, -0.739980, 0, 1.0};
Point(70) = {-0.080807, -0.741017, 0, 1.0};
Point(71) = {-0.074305, -0.742125, 0, 1.0};
Point(72) = {-0.067480, -0.743282, 0, 1.0};
Point(73) = {-0.060418, -0.744455, 0, 1.0};
Point(74) = {-0.053210, -0.745620, 0, 1.0};
Point(75) = {-0.045948, -0.746743, 0, 1.0};
Point(76) = {-0.038721, -0.747780, 0, 1.0};
Point(77) = {-0.031619, -0.748682, 0, 1.0};
Point(78) = {-0.024703, -0.749377, 0, 1.0};
Point(79) = {-0.017998, -0.749823, 0, 1.0};
Point(80) = {-0.011533, -0.750000, 0, 1.0};
Point(81) = {-0.005335, -0.749905, 0, 1.0};
Point(82) = {0.000573, -0.749537, 0, 1.0};
Point(83) = {0.006171, -0.748924, 0, 1.0};
Point(84) = {0.011429, -0.748107, 0, 1.0};
Point(85) = {0.016296, -0.747126, 0, 1.0};
Point(86) = {0.020725, -0.746006, 0, 1.0};
Point(87) = {0.024682, -0.744782, 0, 1.0};
Point(88) = {0.028131, -0.743481, 0, 1.0};
Point(89) = {0.031053, -0.742135, 0, 1.0};
Point(90) = {0.033428, -0.740784, 0, 1.0};
Point(91) = {0.035254, -0.739466, 0, 1.0};
Point(92) = {0.036528, -0.738234, 0, 1.0};
Point(93) = {0.037268, -0.737146, 0, 1.0};
Point(94) = {0.037500, -0.736306, 0, 1.0};
Point(95) = {0.037190, -0.735912, 0, 1.0};
Point(96) = {0.036223, -0.736037, 0, 1.0};
Point(97) = {0.034472, -0.736738, 0, 1.0};
Point(98) = {0.031779, -0.738060, 0, 1.0};
Point(99) = {0.027975, -0.739975, 0, 1.0};
Point(100) = {0.022869, -0.742355, 0, 1.0};
Point(101) = {0.016288, -0.744988, 0, 1.0};
Point(102) = {0.008070, -0.747417, 0, 1.0};
Point(103) = {-0.001476, -0.748911, 0, 1.0};
Point(104) = {-0.011454, -0.749265, 0, 1.0};
Point(105) = {-0.021338, -0.748883, 0, 1.0};
Point(106) = {-0.031009, -0.748083, 0, 1.0};
Point(107) = {-0.040390, -0.747006, 0, 1.0};
Point(108) = {-0.049410, -0.745784, 0, 1.0};
Point(109) = {-0.058013, -0.744491, 0, 1.0};
Point(110) = {-0.066155, -0.743200, 0, 1.0};
Point(111) = {-0.073782, -0.741937, 0, 1.0};
Point(112) = {-0.080837, -0.740744, 0, 1.0};
Point(113) = {-0.087267, -0.739644, 0, 1.0};
Point(114) = {-0.093028, -0.738668, 0, 1.0};
Point(115) = {-0.098081, -0.737831, 0, 1.0};
Point(116) = {-0.102396, -0.737151, 0, 1.0};
Point(117) = {-0.105946, -0.736641, 0, 1.0};
Point(118) = {-0.108742, -0.736313, 0, 1.0};
Point(119) = {-0.110793, -0.736121, 0, 1.0};
Point(120) = {-0.112065, -0.736015, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html