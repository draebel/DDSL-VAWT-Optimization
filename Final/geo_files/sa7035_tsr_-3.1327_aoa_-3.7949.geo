SetFactory("OpenCASCADE");

Point(1) = {0.074709, 0.745882, 0, 1.0};
Point(2) = {0.072275, 0.746128, 0, 1.0};
Point(3) = {0.068489, 0.746511, 0, 1.0};
Point(4) = {0.064341, 0.746922, 0, 1.0};
Point(5) = {0.059863, 0.747345, 0, 1.0};
Point(6) = {0.055085, 0.747764, 0, 1.0};
Point(7) = {0.050034, 0.748168, 0, 1.0};
Point(8) = {0.044737, 0.748547, 0, 1.0};
Point(9) = {0.039225, 0.748891, 0, 1.0};
Point(10) = {0.033530, 0.749201, 0, 1.0};
Point(11) = {0.027690, 0.749472, 0, 1.0};
Point(12) = {0.021740, 0.749692, 0, 1.0};
Point(13) = {0.015717, 0.749858, 0, 1.0};
Point(14) = {0.009661, 0.749964, 0, 1.0};
Point(15) = {0.003602, 0.750000, 0, 1.0};
Point(16) = {-0.002424, 0.749967, 0, 1.0};
Point(17) = {-0.008379, 0.749854, 0, 1.0};
Point(18) = {-0.014233, 0.749660, 0, 1.0};
Point(19) = {-0.019954, 0.749383, 0, 1.0};
Point(20) = {-0.025510, 0.749018, 0, 1.0};
Point(21) = {-0.030875, 0.748564, 0, 1.0};
Point(22) = {-0.036017, 0.748022, 0, 1.0};
Point(23) = {-0.040914, 0.747393, 0, 1.0};
Point(24) = {-0.045548, 0.746680, 0, 1.0};
Point(25) = {-0.049888, 0.745885, 0, 1.0};
Point(26) = {-0.053922, 0.745013, 0, 1.0};
Point(27) = {-0.057634, 0.744076, 0, 1.0};
Point(28) = {-0.061004, 0.743076, 0, 1.0};
Point(29) = {-0.064028, 0.742024, 0, 1.0};
Point(30) = {-0.066690, 0.740939, 0, 1.0};
Point(31) = {-0.068984, 0.739827, 0, 1.0};
Point(32) = {-0.070913, 0.738709, 0, 1.0};
Point(33) = {-0.072467, 0.737614, 0, 1.0};
Point(34) = {-0.073635, 0.736558, 0, 1.0};
Point(35) = {-0.074425, 0.735571, 0, 1.0};
Point(36) = {-0.074835, 0.734692, 0, 1.0};
Point(37) = {-0.074836, 0.734041, 0, 1.0};
Point(38) = {-0.074283, 0.733565, 0, 1.0};
Point(39) = {-0.073154, 0.733116, 0, 1.0};
Point(40) = {-0.071555, 0.732722, 0, 1.0};
Point(41) = {-0.069501, 0.732413, 0, 1.0};
Point(42) = {-0.066992, 0.732200, 0, 1.0};
Point(43) = {-0.064036, 0.732077, 0, 1.0};
Point(44) = {-0.060656, 0.732039, 0, 1.0};
Point(45) = {-0.056863, 0.732091, 0, 1.0};
Point(46) = {-0.052680, 0.732229, 0, 1.0};
Point(47) = {-0.048129, 0.732451, 0, 1.0};
Point(48) = {-0.043234, 0.732749, 0, 1.0};
Point(49) = {-0.038026, 0.733121, 0, 1.0};
Point(50) = {-0.032532, 0.733559, 0, 1.0};
Point(51) = {-0.026785, 0.734057, 0, 1.0};
Point(52) = {-0.020822, 0.734607, 0, 1.0};
Point(53) = {-0.014676, 0.735202, 0, 1.0};
Point(54) = {-0.008390, 0.735832, 0, 1.0};
Point(55) = {-0.002001, 0.736490, 0, 1.0};
Point(56) = {0.004445, 0.737171, 0, 1.0};
Point(57) = {0.010911, 0.737873, 0, 1.0};
Point(58) = {0.017364, 0.738588, 0, 1.0};
Point(59) = {0.023763, 0.739300, 0, 1.0};
Point(60) = {0.030066, 0.739999, 0, 1.0};
Point(61) = {0.036231, 0.740672, 0, 1.0};
Point(62) = {0.042209, 0.741311, 0, 1.0};
Point(63) = {0.047960, 0.741909, 0, 1.0};
Point(64) = {0.053441, 0.742458, 0, 1.0};
Point(65) = {0.058608, 0.742956, 0, 1.0};
Point(66) = {0.063421, 0.743397, 0, 1.0};
Point(67) = {0.067844, 0.743786, 0, 1.0};
Point(68) = {0.071845, 0.744122, 0, 1.0};
Point(69) = {0.074810, 0.744360, 0, 1.0};
Point(70) = {-0.074709, -0.745882, 0, 1.0};
Point(71) = {-0.072275, -0.746128, 0, 1.0};
Point(72) = {-0.068489, -0.746511, 0, 1.0};
Point(73) = {-0.064341, -0.746922, 0, 1.0};
Point(74) = {-0.059863, -0.747345, 0, 1.0};
Point(75) = {-0.055085, -0.747764, 0, 1.0};
Point(76) = {-0.050034, -0.748168, 0, 1.0};
Point(77) = {-0.044737, -0.748547, 0, 1.0};
Point(78) = {-0.039225, -0.748891, 0, 1.0};
Point(79) = {-0.033530, -0.749201, 0, 1.0};
Point(80) = {-0.027690, -0.749472, 0, 1.0};
Point(81) = {-0.021740, -0.749692, 0, 1.0};
Point(82) = {-0.015717, -0.749858, 0, 1.0};
Point(83) = {-0.009661, -0.749964, 0, 1.0};
Point(84) = {-0.003602, -0.750000, 0, 1.0};
Point(85) = {0.002424, -0.749967, 0, 1.0};
Point(86) = {0.008379, -0.749854, 0, 1.0};
Point(87) = {0.014233, -0.749660, 0, 1.0};
Point(88) = {0.019954, -0.749383, 0, 1.0};
Point(89) = {0.025510, -0.749018, 0, 1.0};
Point(90) = {0.030875, -0.748564, 0, 1.0};
Point(91) = {0.036017, -0.748022, 0, 1.0};
Point(92) = {0.040914, -0.747393, 0, 1.0};
Point(93) = {0.045548, -0.746680, 0, 1.0};
Point(94) = {0.049888, -0.745885, 0, 1.0};
Point(95) = {0.053922, -0.745013, 0, 1.0};
Point(96) = {0.057634, -0.744076, 0, 1.0};
Point(97) = {0.061004, -0.743076, 0, 1.0};
Point(98) = {0.064028, -0.742024, 0, 1.0};
Point(99) = {0.066690, -0.740939, 0, 1.0};
Point(100) = {0.068984, -0.739827, 0, 1.0};
Point(101) = {0.070913, -0.738709, 0, 1.0};
Point(102) = {0.072467, -0.737614, 0, 1.0};
Point(103) = {0.073635, -0.736558, 0, 1.0};
Point(104) = {0.074425, -0.735571, 0, 1.0};
Point(105) = {0.074835, -0.734692, 0, 1.0};
Point(106) = {0.074836, -0.734041, 0, 1.0};
Point(107) = {0.074283, -0.733565, 0, 1.0};
Point(108) = {0.073154, -0.733116, 0, 1.0};
Point(109) = {0.071555, -0.732722, 0, 1.0};
Point(110) = {0.069501, -0.732413, 0, 1.0};
Point(111) = {0.066992, -0.732200, 0, 1.0};
Point(112) = {0.064036, -0.732077, 0, 1.0};
Point(113) = {0.060656, -0.732039, 0, 1.0};
Point(114) = {0.056863, -0.732091, 0, 1.0};
Point(115) = {0.052680, -0.732229, 0, 1.0};
Point(116) = {0.048129, -0.732451, 0, 1.0};
Point(117) = {0.043234, -0.732749, 0, 1.0};
Point(118) = {0.038026, -0.733121, 0, 1.0};
Point(119) = {0.032532, -0.733559, 0, 1.0};
Point(120) = {0.026785, -0.734057, 0, 1.0};
Point(121) = {0.020822, -0.734607, 0, 1.0};
Point(122) = {0.014676, -0.735202, 0, 1.0};
Point(123) = {0.008390, -0.735832, 0, 1.0};
Point(124) = {0.002001, -0.736490, 0, 1.0};
Point(125) = {-0.004445, -0.737171, 0, 1.0};
Point(126) = {-0.010911, -0.737873, 0, 1.0};
Point(127) = {-0.017364, -0.738588, 0, 1.0};
Point(128) = {-0.023763, -0.739300, 0, 1.0};
Point(129) = {-0.030066, -0.739999, 0, 1.0};
Point(130) = {-0.036231, -0.740672, 0, 1.0};
Point(131) = {-0.042209, -0.741311, 0, 1.0};
Point(132) = {-0.047960, -0.741909, 0, 1.0};
Point(133) = {-0.053441, -0.742458, 0, 1.0};
Point(134) = {-0.058608, -0.742956, 0, 1.0};
Point(135) = {-0.063421, -0.743397, 0, 1.0};
Point(136) = {-0.067844, -0.743786, 0, 1.0};
Point(137) = {-0.071845, -0.744122, 0, 1.0};
Point(138) = {-0.074810, -0.744360, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:50};
Spline(3) = {50:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:91};
Spline(6) = {91:119};
Spline(7) = {119:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {36.00000000, 15.00000000, 0, 1.0};
Point(142) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html