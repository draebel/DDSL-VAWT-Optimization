SetFactory("OpenCASCADE");

Point(1) = {0.147610, 0.748573, 0, 1.0};
Point(2) = {0.146953, 0.748584, 0, 1.0};
Point(3) = {0.145023, 0.748641, 0, 1.0};
Point(4) = {0.141927, 0.748774, 0, 1.0};
Point(5) = {0.137771, 0.748960, 0, 1.0};
Point(6) = {0.132624, 0.749151, 0, 1.0};
Point(7) = {0.126540, 0.749327, 0, 1.0};
Point(8) = {0.119593, 0.749496, 0, 1.0};
Point(9) = {0.111880, 0.749657, 0, 1.0};
Point(10) = {0.103516, 0.749804, 0, 1.0};
Point(11) = {0.094613, 0.749923, 0, 1.0};
Point(12) = {0.085296, 0.749996, 0, 1.0};
Point(13) = {0.075693, 0.750000, 0, 1.0};
Point(14) = {0.065930, 0.749908, 0, 1.0};
Point(15) = {0.056148, 0.749674, 0, 1.0};
Point(16) = {0.046447, 0.749227, 0, 1.0};
Point(17) = {0.036897, 0.748521, 0, 1.0};
Point(18) = {0.027563, 0.747530, 0, 1.0};
Point(19) = {0.018500, 0.746246, 0, 1.0};
Point(20) = {0.009761, 0.744668, 0, 1.0};
Point(21) = {0.001381, 0.742825, 0, 1.0};
Point(22) = {-0.006585, 0.740768, 0, 1.0};
Point(23) = {-0.014059, 0.738554, 0, 1.0};
Point(24) = {-0.020970, 0.736221, 0, 1.0};
Point(25) = {-0.027251, 0.733808, 0, 1.0};
Point(26) = {-0.032843, 0.731357, 0, 1.0};
Point(27) = {-0.037697, 0.728907, 0, 1.0};
Point(28) = {-0.041775, 0.726500, 0, 1.0};
Point(29) = {-0.045049, 0.724186, 0, 1.0};
Point(30) = {-0.047499, 0.722010, 0, 1.0};
Point(31) = {-0.049130, 0.720045, 0, 1.0};
Point(32) = {-0.049939, 0.718395, 0, 1.0};
Point(33) = {-0.049793, 0.717266, 0, 1.0};
Point(34) = {-0.048539, 0.716567, 0, 1.0};
Point(35) = {-0.046194, 0.716135, 0, 1.0};
Point(36) = {-0.042822, 0.716020, 0, 1.0};
Point(37) = {-0.038452, 0.716228, 0, 1.0};
Point(38) = {-0.033109, 0.716753, 0, 1.0};
Point(39) = {-0.026841, 0.717575, 0, 1.0};
Point(40) = {-0.019702, 0.718671, 0, 1.0};
Point(41) = {-0.011772, 0.720009, 0, 1.0};
Point(42) = {-0.003130, 0.721561, 0, 1.0};
Point(43) = {0.006125, 0.723299, 0, 1.0};
Point(44) = {0.015883, 0.725195, 0, 1.0};
Point(45) = {0.026041, 0.727231, 0, 1.0};
Point(46) = {0.036505, 0.729380, 0, 1.0};
Point(47) = {0.047168, 0.731598, 0, 1.0};
Point(48) = {0.057928, 0.733835, 0, 1.0};
Point(49) = {0.068658, 0.736031, 0, 1.0};
Point(50) = {0.079218, 0.738134, 0, 1.0};
Point(51) = {0.089471, 0.740103, 0, 1.0};
Point(52) = {0.099276, 0.741908, 0, 1.0};
Point(53) = {0.108500, 0.743517, 0, 1.0};
Point(54) = {0.117015, 0.744912, 0, 1.0};
Point(55) = {0.124699, 0.746078, 0, 1.0};
Point(56) = {0.131436, 0.747010, 0, 1.0};
Point(57) = {0.137125, 0.747701, 0, 1.0};
Point(58) = {0.141665, 0.748160, 0, 1.0};
Point(59) = {0.144956, 0.748420, 0, 1.0};
Point(60) = {0.146945, 0.748541, 0, 1.0};
Point(61) = {-0.147610, -0.748573, 0, 1.0};
Point(62) = {-0.146953, -0.748584, 0, 1.0};
Point(63) = {-0.145023, -0.748641, 0, 1.0};
Point(64) = {-0.141927, -0.748774, 0, 1.0};
Point(65) = {-0.137771, -0.748960, 0, 1.0};
Point(66) = {-0.132624, -0.749151, 0, 1.0};
Point(67) = {-0.126540, -0.749327, 0, 1.0};
Point(68) = {-0.119593, -0.749496, 0, 1.0};
Point(69) = {-0.111880, -0.749657, 0, 1.0};
Point(70) = {-0.103516, -0.749804, 0, 1.0};
Point(71) = {-0.094613, -0.749923, 0, 1.0};
Point(72) = {-0.085296, -0.749996, 0, 1.0};
Point(73) = {-0.075693, -0.750000, 0, 1.0};
Point(74) = {-0.065930, -0.749908, 0, 1.0};
Point(75) = {-0.056148, -0.749674, 0, 1.0};
Point(76) = {-0.046447, -0.749227, 0, 1.0};
Point(77) = {-0.036897, -0.748521, 0, 1.0};
Point(78) = {-0.027563, -0.747530, 0, 1.0};
Point(79) = {-0.018500, -0.746246, 0, 1.0};
Point(80) = {-0.009761, -0.744668, 0, 1.0};
Point(81) = {-0.001381, -0.742825, 0, 1.0};
Point(82) = {0.006585, -0.740768, 0, 1.0};
Point(83) = {0.014059, -0.738554, 0, 1.0};
Point(84) = {0.020970, -0.736221, 0, 1.0};
Point(85) = {0.027251, -0.733808, 0, 1.0};
Point(86) = {0.032843, -0.731357, 0, 1.0};
Point(87) = {0.037697, -0.728907, 0, 1.0};
Point(88) = {0.041775, -0.726500, 0, 1.0};
Point(89) = {0.045049, -0.724186, 0, 1.0};
Point(90) = {0.047499, -0.722010, 0, 1.0};
Point(91) = {0.049130, -0.720045, 0, 1.0};
Point(92) = {0.049939, -0.718395, 0, 1.0};
Point(93) = {0.049793, -0.717266, 0, 1.0};
Point(94) = {0.048539, -0.716567, 0, 1.0};
Point(95) = {0.046194, -0.716135, 0, 1.0};
Point(96) = {0.042822, -0.716020, 0, 1.0};
Point(97) = {0.038452, -0.716228, 0, 1.0};
Point(98) = {0.033109, -0.716753, 0, 1.0};
Point(99) = {0.026841, -0.717575, 0, 1.0};
Point(100) = {0.019702, -0.718671, 0, 1.0};
Point(101) = {0.011772, -0.720009, 0, 1.0};
Point(102) = {0.003130, -0.721561, 0, 1.0};
Point(103) = {-0.006125, -0.723299, 0, 1.0};
Point(104) = {-0.015883, -0.725195, 0, 1.0};
Point(105) = {-0.026041, -0.727231, 0, 1.0};
Point(106) = {-0.036505, -0.729380, 0, 1.0};
Point(107) = {-0.047168, -0.731598, 0, 1.0};
Point(108) = {-0.057928, -0.733835, 0, 1.0};
Point(109) = {-0.068658, -0.736031, 0, 1.0};
Point(110) = {-0.079218, -0.738134, 0, 1.0};
Point(111) = {-0.089471, -0.740103, 0, 1.0};
Point(112) = {-0.099276, -0.741908, 0, 1.0};
Point(113) = {-0.108500, -0.743517, 0, 1.0};
Point(114) = {-0.117015, -0.744912, 0, 1.0};
Point(115) = {-0.124699, -0.746078, 0, 1.0};
Point(116) = {-0.131436, -0.747010, 0, 1.0};
Point(117) = {-0.137125, -0.747701, 0, 1.0};
Point(118) = {-0.141665, -0.748160, 0, 1.0};
Point(119) = {-0.144956, -0.748420, 0, 1.0};
Point(120) = {-0.146945, -0.748541, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html