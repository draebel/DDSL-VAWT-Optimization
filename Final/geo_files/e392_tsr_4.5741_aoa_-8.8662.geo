SetFactory("OpenCASCADE");

Point(1) = {0.110708, 0.748930, 0, 1.0};
Point(2) = {0.110215, 0.748938, 0, 1.0};
Point(3) = {0.108767, 0.748981, 0, 1.0};
Point(4) = {0.106446, 0.749080, 0, 1.0};
Point(5) = {0.103328, 0.749220, 0, 1.0};
Point(6) = {0.099468, 0.749363, 0, 1.0};
Point(7) = {0.094905, 0.749495, 0, 1.0};
Point(8) = {0.089695, 0.749622, 0, 1.0};
Point(9) = {0.083910, 0.749743, 0, 1.0};
Point(10) = {0.077637, 0.749853, 0, 1.0};
Point(11) = {0.070960, 0.749942, 0, 1.0};
Point(12) = {0.063972, 0.749997, 0, 1.0};
Point(13) = {0.056770, 0.750000, 0, 1.0};
Point(14) = {0.049448, 0.749931, 0, 1.0};
Point(15) = {0.042111, 0.749755, 0, 1.0};
Point(16) = {0.034835, 0.749420, 0, 1.0};
Point(17) = {0.027673, 0.748891, 0, 1.0};
Point(18) = {0.020672, 0.748148, 0, 1.0};
Point(19) = {0.013875, 0.747185, 0, 1.0};
Point(20) = {0.007321, 0.746001, 0, 1.0};
Point(21) = {0.001036, 0.744619, 0, 1.0};
Point(22) = {-0.004939, 0.743076, 0, 1.0};
Point(23) = {-0.010545, 0.741415, 0, 1.0};
Point(24) = {-0.015728, 0.739666, 0, 1.0};
Point(25) = {-0.020439, 0.737856, 0, 1.0};
Point(26) = {-0.024632, 0.736018, 0, 1.0};
Point(27) = {-0.028273, 0.734181, 0, 1.0};
Point(28) = {-0.031331, 0.732375, 0, 1.0};
Point(29) = {-0.033787, 0.730639, 0, 1.0};
Point(30) = {-0.035624, 0.729008, 0, 1.0};
Point(31) = {-0.036847, 0.727534, 0, 1.0};
Point(32) = {-0.037454, 0.726296, 0, 1.0};
Point(33) = {-0.037345, 0.725449, 0, 1.0};
Point(34) = {-0.036404, 0.724925, 0, 1.0};
Point(35) = {-0.034645, 0.724601, 0, 1.0};
Point(36) = {-0.032116, 0.724515, 0, 1.0};
Point(37) = {-0.028839, 0.724671, 0, 1.0};
Point(38) = {-0.024832, 0.725065, 0, 1.0};
Point(39) = {-0.020131, 0.725681, 0, 1.0};
Point(40) = {-0.014777, 0.726503, 0, 1.0};
Point(41) = {-0.008829, 0.727507, 0, 1.0};
Point(42) = {-0.002347, 0.728671, 0, 1.0};
Point(43) = {0.004594, 0.729974, 0, 1.0};
Point(44) = {0.011913, 0.731396, 0, 1.0};
Point(45) = {0.019531, 0.732923, 0, 1.0};
Point(46) = {0.027379, 0.734535, 0, 1.0};
Point(47) = {0.035376, 0.736198, 0, 1.0};
Point(48) = {0.043446, 0.737876, 0, 1.0};
Point(49) = {0.051493, 0.739523, 0, 1.0};
Point(50) = {0.059414, 0.741100, 0, 1.0};
Point(51) = {0.067103, 0.742577, 0, 1.0};
Point(52) = {0.074457, 0.743931, 0, 1.0};
Point(53) = {0.081375, 0.745138, 0, 1.0};
Point(54) = {0.087761, 0.746184, 0, 1.0};
Point(55) = {0.093524, 0.747059, 0, 1.0};
Point(56) = {0.098577, 0.747757, 0, 1.0};
Point(57) = {0.102844, 0.748276, 0, 1.0};
Point(58) = {0.106249, 0.748620, 0, 1.0};
Point(59) = {0.108717, 0.748815, 0, 1.0};
Point(60) = {0.110209, 0.748905, 0, 1.0};
Point(61) = {-0.110708, -0.748930, 0, 1.0};
Point(62) = {-0.110215, -0.748938, 0, 1.0};
Point(63) = {-0.108767, -0.748981, 0, 1.0};
Point(64) = {-0.106446, -0.749080, 0, 1.0};
Point(65) = {-0.103328, -0.749220, 0, 1.0};
Point(66) = {-0.099468, -0.749363, 0, 1.0};
Point(67) = {-0.094905, -0.749495, 0, 1.0};
Point(68) = {-0.089695, -0.749622, 0, 1.0};
Point(69) = {-0.083910, -0.749743, 0, 1.0};
Point(70) = {-0.077637, -0.749853, 0, 1.0};
Point(71) = {-0.070960, -0.749942, 0, 1.0};
Point(72) = {-0.063972, -0.749997, 0, 1.0};
Point(73) = {-0.056770, -0.750000, 0, 1.0};
Point(74) = {-0.049448, -0.749931, 0, 1.0};
Point(75) = {-0.042111, -0.749755, 0, 1.0};
Point(76) = {-0.034835, -0.749420, 0, 1.0};
Point(77) = {-0.027673, -0.748891, 0, 1.0};
Point(78) = {-0.020672, -0.748148, 0, 1.0};
Point(79) = {-0.013875, -0.747185, 0, 1.0};
Point(80) = {-0.007321, -0.746001, 0, 1.0};
Point(81) = {-0.001036, -0.744619, 0, 1.0};
Point(82) = {0.004939, -0.743076, 0, 1.0};
Point(83) = {0.010545, -0.741415, 0, 1.0};
Point(84) = {0.015728, -0.739666, 0, 1.0};
Point(85) = {0.020439, -0.737856, 0, 1.0};
Point(86) = {0.024632, -0.736018, 0, 1.0};
Point(87) = {0.028273, -0.734181, 0, 1.0};
Point(88) = {0.031331, -0.732375, 0, 1.0};
Point(89) = {0.033787, -0.730639, 0, 1.0};
Point(90) = {0.035624, -0.729008, 0, 1.0};
Point(91) = {0.036847, -0.727534, 0, 1.0};
Point(92) = {0.037454, -0.726296, 0, 1.0};
Point(93) = {0.037345, -0.725449, 0, 1.0};
Point(94) = {0.036404, -0.724925, 0, 1.0};
Point(95) = {0.034645, -0.724601, 0, 1.0};
Point(96) = {0.032116, -0.724515, 0, 1.0};
Point(97) = {0.028839, -0.724671, 0, 1.0};
Point(98) = {0.024832, -0.725065, 0, 1.0};
Point(99) = {0.020131, -0.725681, 0, 1.0};
Point(100) = {0.014777, -0.726503, 0, 1.0};
Point(101) = {0.008829, -0.727507, 0, 1.0};
Point(102) = {0.002347, -0.728671, 0, 1.0};
Point(103) = {-0.004594, -0.729974, 0, 1.0};
Point(104) = {-0.011913, -0.731396, 0, 1.0};
Point(105) = {-0.019531, -0.732923, 0, 1.0};
Point(106) = {-0.027379, -0.734535, 0, 1.0};
Point(107) = {-0.035376, -0.736198, 0, 1.0};
Point(108) = {-0.043446, -0.737876, 0, 1.0};
Point(109) = {-0.051493, -0.739523, 0, 1.0};
Point(110) = {-0.059414, -0.741100, 0, 1.0};
Point(111) = {-0.067103, -0.742577, 0, 1.0};
Point(112) = {-0.074457, -0.743931, 0, 1.0};
Point(113) = {-0.081375, -0.745138, 0, 1.0};
Point(114) = {-0.087761, -0.746184, 0, 1.0};
Point(115) = {-0.093524, -0.747059, 0, 1.0};
Point(116) = {-0.098577, -0.747757, 0, 1.0};
Point(117) = {-0.102844, -0.748276, 0, 1.0};
Point(118) = {-0.106249, -0.748620, 0, 1.0};
Point(119) = {-0.108717, -0.748815, 0, 1.0};
Point(120) = {-0.110209, -0.748905, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html