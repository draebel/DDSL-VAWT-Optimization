SetFactory("OpenCASCADE");

Point(1) = {0.073805, 0.749287, 0, 1.0};
Point(2) = {0.073476, 0.749292, 0, 1.0};
Point(3) = {0.072511, 0.749321, 0, 1.0};
Point(4) = {0.070964, 0.749387, 0, 1.0};
Point(5) = {0.068886, 0.749480, 0, 1.0};
Point(6) = {0.066312, 0.749575, 0, 1.0};
Point(7) = {0.063270, 0.749663, 0, 1.0};
Point(8) = {0.059797, 0.749748, 0, 1.0};
Point(9) = {0.055940, 0.749829, 0, 1.0};
Point(10) = {0.051758, 0.749902, 0, 1.0};
Point(11) = {0.047306, 0.749962, 0, 1.0};
Point(12) = {0.042648, 0.749998, 0, 1.0};
Point(13) = {0.037846, 0.750000, 0, 1.0};
Point(14) = {0.032965, 0.749954, 0, 1.0};
Point(15) = {0.028074, 0.749837, 0, 1.0};
Point(16) = {0.023223, 0.749614, 0, 1.0};
Point(17) = {0.018449, 0.749260, 0, 1.0};
Point(18) = {0.013781, 0.748765, 0, 1.0};
Point(19) = {0.009250, 0.748123, 0, 1.0};
Point(20) = {0.004880, 0.747334, 0, 1.0};
Point(21) = {0.000690, 0.746412, 0, 1.0};
Point(22) = {-0.003293, 0.745384, 0, 1.0};
Point(23) = {-0.007030, 0.744277, 0, 1.0};
Point(24) = {-0.010485, 0.743110, 0, 1.0};
Point(25) = {-0.013626, 0.741904, 0, 1.0};
Point(26) = {-0.016421, 0.740678, 0, 1.0};
Point(27) = {-0.018848, 0.739454, 0, 1.0};
Point(28) = {-0.020887, 0.738250, 0, 1.0};
Point(29) = {-0.022525, 0.737093, 0, 1.0};
Point(30) = {-0.023750, 0.736005, 0, 1.0};
Point(31) = {-0.024565, 0.735023, 0, 1.0};
Point(32) = {-0.024970, 0.734197, 0, 1.0};
Point(33) = {-0.024897, 0.733633, 0, 1.0};
Point(34) = {-0.024269, 0.733283, 0, 1.0};
Point(35) = {-0.023097, 0.733068, 0, 1.0};
Point(36) = {-0.021411, 0.733010, 0, 1.0};
Point(37) = {-0.019226, 0.733114, 0, 1.0};
Point(38) = {-0.016554, 0.733377, 0, 1.0};
Point(39) = {-0.013420, 0.733788, 0, 1.0};
Point(40) = {-0.009851, 0.734335, 0, 1.0};
Point(41) = {-0.005886, 0.735004, 0, 1.0};
Point(42) = {-0.001565, 0.735781, 0, 1.0};
Point(43) = {0.003063, 0.736649, 0, 1.0};
Point(44) = {0.007942, 0.737598, 0, 1.0};
Point(45) = {0.013020, 0.738616, 0, 1.0};
Point(46) = {0.018252, 0.739690, 0, 1.0};
Point(47) = {0.023584, 0.740799, 0, 1.0};
Point(48) = {0.028964, 0.741917, 0, 1.0};
Point(49) = {0.034329, 0.743015, 0, 1.0};
Point(50) = {0.039609, 0.744067, 0, 1.0};
Point(51) = {0.044735, 0.745052, 0, 1.0};
Point(52) = {0.049638, 0.745954, 0, 1.0};
Point(53) = {0.054250, 0.746759, 0, 1.0};
Point(54) = {0.058507, 0.747456, 0, 1.0};
Point(55) = {0.062349, 0.748039, 0, 1.0};
Point(56) = {0.065718, 0.748505, 0, 1.0};
Point(57) = {0.068563, 0.748850, 0, 1.0};
Point(58) = {0.070832, 0.749080, 0, 1.0};
Point(59) = {0.072478, 0.749210, 0, 1.0};
Point(60) = {0.073473, 0.749270, 0, 1.0};
Point(61) = {-0.073805, -0.749287, 0, 1.0};
Point(62) = {-0.073476, -0.749292, 0, 1.0};
Point(63) = {-0.072511, -0.749321, 0, 1.0};
Point(64) = {-0.070964, -0.749387, 0, 1.0};
Point(65) = {-0.068886, -0.749480, 0, 1.0};
Point(66) = {-0.066312, -0.749575, 0, 1.0};
Point(67) = {-0.063270, -0.749663, 0, 1.0};
Point(68) = {-0.059797, -0.749748, 0, 1.0};
Point(69) = {-0.055940, -0.749829, 0, 1.0};
Point(70) = {-0.051758, -0.749902, 0, 1.0};
Point(71) = {-0.047306, -0.749962, 0, 1.0};
Point(72) = {-0.042648, -0.749998, 0, 1.0};
Point(73) = {-0.037846, -0.750000, 0, 1.0};
Point(74) = {-0.032965, -0.749954, 0, 1.0};
Point(75) = {-0.028074, -0.749837, 0, 1.0};
Point(76) = {-0.023223, -0.749614, 0, 1.0};
Point(77) = {-0.018449, -0.749260, 0, 1.0};
Point(78) = {-0.013781, -0.748765, 0, 1.0};
Point(79) = {-0.009250, -0.748123, 0, 1.0};
Point(80) = {-0.004880, -0.747334, 0, 1.0};
Point(81) = {-0.000690, -0.746412, 0, 1.0};
Point(82) = {0.003293, -0.745384, 0, 1.0};
Point(83) = {0.007030, -0.744277, 0, 1.0};
Point(84) = {0.010485, -0.743110, 0, 1.0};
Point(85) = {0.013626, -0.741904, 0, 1.0};
Point(86) = {0.016421, -0.740678, 0, 1.0};
Point(87) = {0.018848, -0.739454, 0, 1.0};
Point(88) = {0.020887, -0.738250, 0, 1.0};
Point(89) = {0.022525, -0.737093, 0, 1.0};
Point(90) = {0.023750, -0.736005, 0, 1.0};
Point(91) = {0.024565, -0.735023, 0, 1.0};
Point(92) = {0.024970, -0.734197, 0, 1.0};
Point(93) = {0.024897, -0.733633, 0, 1.0};
Point(94) = {0.024269, -0.733283, 0, 1.0};
Point(95) = {0.023097, -0.733068, 0, 1.0};
Point(96) = {0.021411, -0.733010, 0, 1.0};
Point(97) = {0.019226, -0.733114, 0, 1.0};
Point(98) = {0.016554, -0.733377, 0, 1.0};
Point(99) = {0.013420, -0.733788, 0, 1.0};
Point(100) = {0.009851, -0.734335, 0, 1.0};
Point(101) = {0.005886, -0.735004, 0, 1.0};
Point(102) = {0.001565, -0.735781, 0, 1.0};
Point(103) = {-0.003063, -0.736649, 0, 1.0};
Point(104) = {-0.007942, -0.737598, 0, 1.0};
Point(105) = {-0.013020, -0.738616, 0, 1.0};
Point(106) = {-0.018252, -0.739690, 0, 1.0};
Point(107) = {-0.023584, -0.740799, 0, 1.0};
Point(108) = {-0.028964, -0.741917, 0, 1.0};
Point(109) = {-0.034329, -0.743015, 0, 1.0};
Point(110) = {-0.039609, -0.744067, 0, 1.0};
Point(111) = {-0.044735, -0.745052, 0, 1.0};
Point(112) = {-0.049638, -0.745954, 0, 1.0};
Point(113) = {-0.054250, -0.746759, 0, 1.0};
Point(114) = {-0.058507, -0.747456, 0, 1.0};
Point(115) = {-0.062349, -0.748039, 0, 1.0};
Point(116) = {-0.065718, -0.748505, 0, 1.0};
Point(117) = {-0.068563, -0.748850, 0, 1.0};
Point(118) = {-0.070832, -0.749080, 0, 1.0};
Point(119) = {-0.072478, -0.749210, 0, 1.0};
Point(120) = {-0.073473, -0.749270, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html