SetFactory("OpenCASCADE");

Point(1) = {0.074043, 0.749242, 0, 1.0};
Point(2) = {0.069968, 0.749443, 0, 1.0};
Point(3) = {0.065854, 0.749613, 0, 1.0};
Point(4) = {0.061744, 0.749752, 0, 1.0};
Point(5) = {0.057637, 0.749874, 0, 1.0};
Point(6) = {0.053536, 0.749948, 0, 1.0};
Point(7) = {0.049441, 0.749974, 0, 1.0};
Point(8) = {0.045346, 0.750000, 0, 1.0};
Point(9) = {0.041258, 0.749978, 0, 1.0};
Point(10) = {0.037174, 0.749923, 0, 1.0};
Point(11) = {0.033097, 0.749820, 0, 1.0};
Point(12) = {0.029023, 0.749686, 0, 1.0};
Point(13) = {0.024959, 0.749486, 0, 1.0};
Point(14) = {0.020901, 0.749239, 0, 1.0};
Point(15) = {0.016849, 0.748943, 0, 1.0};
Point(16) = {0.012804, 0.748599, 0, 1.0};
Point(17) = {0.004724, 0.747831, 0, 1.0};
Point(18) = {-0.003335, 0.746902, 0, 1.0};
Point(19) = {-0.011376, 0.745845, 0, 1.0};
Point(20) = {-0.019400, 0.744659, 0, 1.0};
Point(21) = {-0.027405, 0.743328, 0, 1.0};
Point(22) = {-0.035392, 0.741868, 0, 1.0};
Point(23) = {-0.043358, 0.740248, 0, 1.0};
Point(24) = {-0.047331, 0.739357, 0, 1.0};
Point(25) = {-0.051294, 0.738402, 0, 1.0};
Point(26) = {-0.055249, 0.737383, 0, 1.0};
Point(27) = {-0.059192, 0.736268, 0, 1.0};
Point(28) = {-0.063117, 0.735023, 0, 1.0};
Point(29) = {-0.067016, 0.733586, 0, 1.0};
Point(30) = {-0.068946, 0.732723, 0, 1.0};
Point(31) = {-0.070855, 0.731699, 0, 1.0};
Point(32) = {-0.072715, 0.730305, 0, 1.0};
Point(33) = {-0.073792, 0.729179, 0, 1.0};
Point(34) = {-0.074184, 0.728439, 0, 1.0};
Point(35) = {-0.074340, 0.727159, 0, 1.0};
Point(36) = {-0.073950, 0.726687, 0, 1.0};
Point(37) = {-0.073448, 0.726607, 0, 1.0};
Point(38) = {-0.072201, 0.726462, 0, 1.0};
Point(39) = {-0.070155, 0.726457, 0, 1.0};
Point(40) = {-0.068117, 0.726517, 0, 1.0};
Point(41) = {-0.066086, 0.726624, 0, 1.0};
Point(42) = {-0.062028, 0.726872, 0, 1.0};
Point(43) = {-0.057978, 0.727184, 0, 1.0};
Point(44) = {-0.053933, 0.727527, 0, 1.0};
Point(45) = {-0.049892, 0.727903, 0, 1.0};
Point(46) = {-0.045857, 0.728328, 0, 1.0};
Point(47) = {-0.041825, 0.728768, 0, 1.0};
Point(48) = {-0.033769, 0.729713, 0, 1.0};
Point(49) = {-0.025728, 0.730771, 0, 1.0};
Point(50) = {-0.017693, 0.731876, 0, 1.0};
Point(51) = {-0.009667, 0.733047, 0, 1.0};
Point(52) = {-0.001649, 0.734281, 0, 1.0};
Point(53) = {0.006360, 0.735580, 0, 1.0};
Point(54) = {0.014352, 0.737007, 0, 1.0};
Point(55) = {0.018337, 0.737801, 0, 1.0};
Point(56) = {0.022322, 0.738595, 0, 1.0};
Point(57) = {0.026301, 0.739438, 0, 1.0};
Point(58) = {0.030280, 0.740280, 0, 1.0};
Point(59) = {0.034258, 0.741122, 0, 1.0};
Point(60) = {0.038239, 0.741948, 0, 1.0};
Point(61) = {0.042218, 0.742791, 0, 1.0};
Point(62) = {0.046203, 0.743585, 0, 1.0};
Point(63) = {0.050188, 0.744379, 0, 1.0};
Point(64) = {0.054180, 0.745125, 0, 1.0};
Point(65) = {0.058176, 0.745838, 0, 1.0};
Point(66) = {0.062185, 0.746456, 0, 1.0};
Point(67) = {0.066206, 0.746976, 0, 1.0};
Point(68) = {0.070237, 0.747433, 0, 1.0};
Point(69) = {0.074242, 0.747751, 0, 1.0};
Point(70) = {-0.074043, -0.749242, 0, 1.0};
Point(71) = {-0.069968, -0.749443, 0, 1.0};
Point(72) = {-0.065854, -0.749613, 0, 1.0};
Point(73) = {-0.061744, -0.749752, 0, 1.0};
Point(74) = {-0.057637, -0.749874, 0, 1.0};
Point(75) = {-0.053536, -0.749948, 0, 1.0};
Point(76) = {-0.049441, -0.749974, 0, 1.0};
Point(77) = {-0.045346, -0.750000, 0, 1.0};
Point(78) = {-0.041258, -0.749978, 0, 1.0};
Point(79) = {-0.037174, -0.749923, 0, 1.0};
Point(80) = {-0.033097, -0.749820, 0, 1.0};
Point(81) = {-0.029023, -0.749686, 0, 1.0};
Point(82) = {-0.024959, -0.749486, 0, 1.0};
Point(83) = {-0.020901, -0.749239, 0, 1.0};
Point(84) = {-0.016849, -0.748943, 0, 1.0};
Point(85) = {-0.012804, -0.748599, 0, 1.0};
Point(86) = {-0.004724, -0.747831, 0, 1.0};
Point(87) = {0.003335, -0.746902, 0, 1.0};
Point(88) = {0.011376, -0.745845, 0, 1.0};
Point(89) = {0.019400, -0.744659, 0, 1.0};
Point(90) = {0.027405, -0.743328, 0, 1.0};
Point(91) = {0.035392, -0.741868, 0, 1.0};
Point(92) = {0.043358, -0.740248, 0, 1.0};
Point(93) = {0.047331, -0.739357, 0, 1.0};
Point(94) = {0.051294, -0.738402, 0, 1.0};
Point(95) = {0.055249, -0.737383, 0, 1.0};
Point(96) = {0.059192, -0.736268, 0, 1.0};
Point(97) = {0.063117, -0.735023, 0, 1.0};
Point(98) = {0.067016, -0.733586, 0, 1.0};
Point(99) = {0.068946, -0.732723, 0, 1.0};
Point(100) = {0.070855, -0.731699, 0, 1.0};
Point(101) = {0.072715, -0.730305, 0, 1.0};
Point(102) = {0.073792, -0.729179, 0, 1.0};
Point(103) = {0.074184, -0.728439, 0, 1.0};
Point(104) = {0.074340, -0.727159, 0, 1.0};
Point(105) = {0.073950, -0.726687, 0, 1.0};
Point(106) = {0.073448, -0.726607, 0, 1.0};
Point(107) = {0.072201, -0.726462, 0, 1.0};
Point(108) = {0.070155, -0.726457, 0, 1.0};
Point(109) = {0.068117, -0.726517, 0, 1.0};
Point(110) = {0.066086, -0.726624, 0, 1.0};
Point(111) = {0.062028, -0.726872, 0, 1.0};
Point(112) = {0.057978, -0.727184, 0, 1.0};
Point(113) = {0.053933, -0.727527, 0, 1.0};
Point(114) = {0.049892, -0.727903, 0, 1.0};
Point(115) = {0.045857, -0.728328, 0, 1.0};
Point(116) = {0.041825, -0.728768, 0, 1.0};
Point(117) = {0.033769, -0.729713, 0, 1.0};
Point(118) = {0.025728, -0.730771, 0, 1.0};
Point(119) = {0.017693, -0.731876, 0, 1.0};
Point(120) = {0.009667, -0.733047, 0, 1.0};
Point(121) = {0.001649, -0.734281, 0, 1.0};
Point(122) = {-0.006360, -0.735580, 0, 1.0};
Point(123) = {-0.014352, -0.737007, 0, 1.0};
Point(124) = {-0.018337, -0.737801, 0, 1.0};
Point(125) = {-0.022322, -0.738595, 0, 1.0};
Point(126) = {-0.026301, -0.739438, 0, 1.0};
Point(127) = {-0.030280, -0.740280, 0, 1.0};
Point(128) = {-0.034258, -0.741122, 0, 1.0};
Point(129) = {-0.038239, -0.741948, 0, 1.0};
Point(130) = {-0.042218, -0.742791, 0, 1.0};
Point(131) = {-0.046203, -0.743585, 0, 1.0};
Point(132) = {-0.050188, -0.744379, 0, 1.0};
Point(133) = {-0.054180, -0.745125, 0, 1.0};
Point(134) = {-0.058176, -0.745838, 0, 1.0};
Point(135) = {-0.062185, -0.746456, 0, 1.0};
Point(136) = {-0.066206, -0.746976, 0, 1.0};
Point(137) = {-0.070237, -0.747433, 0, 1.0};
Point(138) = {-0.074242, -0.747751, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:48};
Spline(3) = {48:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:91};
Spline(6) = {91:117};
Spline(7) = {117:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html