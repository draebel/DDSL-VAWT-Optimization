SetFactory("OpenCASCADE");

Point(1) = {0.074357, 0.724026, 0, 1.0};
Point(2) = {0.073806, 0.724161, 0, 1.0};
Point(3) = {0.072265, 0.724600, 0, 1.0};
Point(4) = {0.069915, 0.725313, 0, 1.0};
Point(5) = {0.066824, 0.726175, 0, 1.0};
Point(6) = {0.062962, 0.727130, 0, 1.0};
Point(7) = {0.058340, 0.728201, 0, 1.0};
Point(8) = {0.053027, 0.729395, 0, 1.0};
Point(9) = {0.047090, 0.730704, 0, 1.0};
Point(10) = {0.040607, 0.732116, 0, 1.0};
Point(11) = {0.033660, 0.733612, 0, 1.0};
Point(12) = {0.026334, 0.735175, 0, 1.0};
Point(13) = {0.018721, 0.736785, 0, 1.0};
Point(14) = {0.010915, 0.738419, 0, 1.0};
Point(15) = {0.003009, 0.740054, 0, 1.0};
Point(16) = {-0.004901, 0.741664, 0, 1.0};
Point(17) = {-0.012717, 0.743222, 0, 1.0};
Point(18) = {-0.020346, 0.744699, 0, 1.0};
Point(19) = {-0.027696, 0.746069, 0, 1.0};
Point(20) = {-0.034678, 0.747298, 0, 1.0};
Point(21) = {-0.041207, 0.748353, 0, 1.0};
Point(22) = {-0.047203, 0.749198, 0, 1.0};
Point(23) = {-0.052591, 0.749773, 0, 1.0};
Point(24) = {-0.057354, 0.750000, 0, 1.0};
Point(25) = {-0.061526, 0.749855, 0, 1.0};
Point(26) = {-0.065123, 0.749366, 0, 1.0};
Point(27) = {-0.068153, 0.748571, 0, 1.0};
Point(28) = {-0.070616, 0.747524, 0, 1.0};
Point(29) = {-0.072502, 0.746291, 0, 1.0};
Point(30) = {-0.073785, 0.744955, 0, 1.0};
Point(31) = {-0.074357, 0.743624, 0, 1.0};
Point(32) = {-0.074150, 0.742192, 0, 1.0};
Point(33) = {-0.073256, 0.740568, 0, 1.0};
Point(34) = {-0.071754, 0.738889, 0, 1.0};
Point(35) = {-0.069646, 0.737239, 0, 1.0};
Point(36) = {-0.066926, 0.735687, 0, 1.0};
Point(37) = {-0.063578, 0.734282, 0, 1.0};
Point(38) = {-0.059586, 0.733061, 0, 1.0};
Point(39) = {-0.054927, 0.732046, 0, 1.0};
Point(40) = {-0.049574, 0.731206, 0, 1.0};
Point(41) = {-0.043563, 0.730469, 0, 1.0};
Point(42) = {-0.036984, 0.729797, 0, 1.0};
Point(43) = {-0.029922, 0.729175, 0, 1.0};
Point(44) = {-0.022469, 0.728594, 0, 1.0};
Point(45) = {-0.014718, 0.728044, 0, 1.0};
Point(46) = {-0.006764, 0.727524, 0, 1.0};
Point(47) = {0.001292, 0.727030, 0, 1.0};
Point(48) = {0.009352, 0.726561, 0, 1.0};
Point(49) = {0.017315, 0.726116, 0, 1.0};
Point(50) = {0.025085, 0.725699, 0, 1.0};
Point(51) = {0.032566, 0.725311, 0, 1.0};
Point(52) = {0.039663, 0.724956, 0, 1.0};
Point(53) = {0.046291, 0.724640, 0, 1.0};
Point(54) = {0.052364, 0.724366, 0, 1.0};
Point(55) = {0.057806, 0.724144, 0, 1.0};
Point(56) = {0.062547, 0.723980, 0, 1.0};
Point(57) = {0.066525, 0.723902, 0, 1.0};
Point(58) = {0.069733, 0.723933, 0, 1.0};
Point(59) = {0.072187, 0.724014, 0, 1.0};
Point(60) = {0.073790, 0.724039, 0, 1.0};
Point(61) = {-0.074357, -0.724026, 0, 1.0};
Point(62) = {-0.073806, -0.724161, 0, 1.0};
Point(63) = {-0.072265, -0.724600, 0, 1.0};
Point(64) = {-0.069915, -0.725313, 0, 1.0};
Point(65) = {-0.066824, -0.726175, 0, 1.0};
Point(66) = {-0.062962, -0.727130, 0, 1.0};
Point(67) = {-0.058340, -0.728201, 0, 1.0};
Point(68) = {-0.053027, -0.729395, 0, 1.0};
Point(69) = {-0.047090, -0.730704, 0, 1.0};
Point(70) = {-0.040607, -0.732116, 0, 1.0};
Point(71) = {-0.033660, -0.733612, 0, 1.0};
Point(72) = {-0.026334, -0.735175, 0, 1.0};
Point(73) = {-0.018721, -0.736785, 0, 1.0};
Point(74) = {-0.010915, -0.738419, 0, 1.0};
Point(75) = {-0.003009, -0.740054, 0, 1.0};
Point(76) = {0.004901, -0.741664, 0, 1.0};
Point(77) = {0.012717, -0.743222, 0, 1.0};
Point(78) = {0.020346, -0.744699, 0, 1.0};
Point(79) = {0.027696, -0.746069, 0, 1.0};
Point(80) = {0.034678, -0.747298, 0, 1.0};
Point(81) = {0.041207, -0.748353, 0, 1.0};
Point(82) = {0.047203, -0.749198, 0, 1.0};
Point(83) = {0.052591, -0.749773, 0, 1.0};
Point(84) = {0.057354, -0.750000, 0, 1.0};
Point(85) = {0.061526, -0.749855, 0, 1.0};
Point(86) = {0.065123, -0.749366, 0, 1.0};
Point(87) = {0.068153, -0.748571, 0, 1.0};
Point(88) = {0.070616, -0.747524, 0, 1.0};
Point(89) = {0.072502, -0.746291, 0, 1.0};
Point(90) = {0.073785, -0.744955, 0, 1.0};
Point(91) = {0.074357, -0.743624, 0, 1.0};
Point(92) = {0.074150, -0.742192, 0, 1.0};
Point(93) = {0.073256, -0.740568, 0, 1.0};
Point(94) = {0.071754, -0.738889, 0, 1.0};
Point(95) = {0.069646, -0.737239, 0, 1.0};
Point(96) = {0.066926, -0.735687, 0, 1.0};
Point(97) = {0.063578, -0.734282, 0, 1.0};
Point(98) = {0.059586, -0.733061, 0, 1.0};
Point(99) = {0.054927, -0.732046, 0, 1.0};
Point(100) = {0.049574, -0.731206, 0, 1.0};
Point(101) = {0.043563, -0.730469, 0, 1.0};
Point(102) = {0.036984, -0.729797, 0, 1.0};
Point(103) = {0.029922, -0.729175, 0, 1.0};
Point(104) = {0.022469, -0.728594, 0, 1.0};
Point(105) = {0.014718, -0.728044, 0, 1.0};
Point(106) = {0.006764, -0.727524, 0, 1.0};
Point(107) = {-0.001292, -0.727030, 0, 1.0};
Point(108) = {-0.009352, -0.726561, 0, 1.0};
Point(109) = {-0.017315, -0.726116, 0, 1.0};
Point(110) = {-0.025085, -0.725699, 0, 1.0};
Point(111) = {-0.032566, -0.725311, 0, 1.0};
Point(112) = {-0.039663, -0.724956, 0, 1.0};
Point(113) = {-0.046291, -0.724640, 0, 1.0};
Point(114) = {-0.052364, -0.724366, 0, 1.0};
Point(115) = {-0.057806, -0.724144, 0, 1.0};
Point(116) = {-0.062547, -0.723980, 0, 1.0};
Point(117) = {-0.066525, -0.723902, 0, 1.0};
Point(118) = {-0.069733, -0.723933, 0, 1.0};
Point(119) = {-0.072187, -0.724014, 0, 1.0};
Point(120) = {-0.073790, -0.724039, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html