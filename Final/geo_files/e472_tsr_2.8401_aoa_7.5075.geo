SetFactory("OpenCASCADE");

Point(1) = {0.074143, 0.732684, 0, 1.0};
Point(2) = {0.073775, 0.732774, 0, 1.0};
Point(3) = {0.072748, 0.733067, 0, 1.0};
Point(4) = {0.071182, 0.733542, 0, 1.0};
Point(5) = {0.069121, 0.734116, 0, 1.0};
Point(6) = {0.066546, 0.734753, 0, 1.0};
Point(7) = {0.063465, 0.735467, 0, 1.0};
Point(8) = {0.059923, 0.736264, 0, 1.0};
Point(9) = {0.055965, 0.737136, 0, 1.0};
Point(10) = {0.051643, 0.738077, 0, 1.0};
Point(11) = {0.047011, 0.739075, 0, 1.0};
Point(12) = {0.042127, 0.740117, 0, 1.0};
Point(13) = {0.037052, 0.741190, 0, 1.0};
Point(14) = {0.031848, 0.742279, 0, 1.0};
Point(15) = {0.026577, 0.743369, 0, 1.0};
Point(16) = {0.021304, 0.744442, 0, 1.0};
Point(17) = {0.016093, 0.745481, 0, 1.0};
Point(18) = {0.011007, 0.746466, 0, 1.0};
Point(19) = {0.006108, 0.747379, 0, 1.0};
Point(20) = {0.001453, 0.748198, 0, 1.0};
Point(21) = {-0.002900, 0.748902, 0, 1.0};
Point(22) = {-0.006897, 0.749465, 0, 1.0};
Point(23) = {-0.010489, 0.749849, 0, 1.0};
Point(24) = {-0.013664, 0.750000, 0, 1.0};
Point(25) = {-0.016446, 0.749904, 0, 1.0};
Point(26) = {-0.018844, 0.749577, 0, 1.0};
Point(27) = {-0.020864, 0.749047, 0, 1.0};
Point(28) = {-0.022506, 0.748349, 0, 1.0};
Point(29) = {-0.023763, 0.747527, 0, 1.0};
Point(30) = {-0.024619, 0.746636, 0, 1.0};
Point(31) = {-0.025000, 0.745750, 0, 1.0};
Point(32) = {-0.024862, 0.744794, 0, 1.0};
Point(33) = {-0.024266, 0.743712, 0, 1.0};
Point(34) = {-0.023265, 0.742593, 0, 1.0};
Point(35) = {-0.021859, 0.741493, 0, 1.0};
Point(36) = {-0.020046, 0.740458, 0, 1.0};
Point(37) = {-0.017814, 0.739521, 0, 1.0};
Point(38) = {-0.015153, 0.738708, 0, 1.0};
Point(39) = {-0.012046, 0.738031, 0, 1.0};
Point(40) = {-0.008478, 0.737471, 0, 1.0};
Point(41) = {-0.004471, 0.736979, 0, 1.0};
Point(42) = {-0.000085, 0.736531, 0, 1.0};
Point(43) = {0.004623, 0.736117, 0, 1.0};
Point(44) = {0.009592, 0.735729, 0, 1.0};
Point(45) = {0.014760, 0.735363, 0, 1.0};
Point(46) = {0.020062, 0.735016, 0, 1.0};
Point(47) = {0.025433, 0.734686, 0, 1.0};
Point(48) = {0.030806, 0.734374, 0, 1.0};
Point(49) = {0.036115, 0.734078, 0, 1.0};
Point(50) = {0.041295, 0.733799, 0, 1.0};
Point(51) = {0.046282, 0.733541, 0, 1.0};
Point(52) = {0.051014, 0.733304, 0, 1.0};
Point(53) = {0.055432, 0.733093, 0, 1.0};
Point(54) = {0.059481, 0.732911, 0, 1.0};
Point(55) = {0.063108, 0.732762, 0, 1.0};
Point(56) = {0.066269, 0.732653, 0, 1.0};
Point(57) = {0.068921, 0.732602, 0, 1.0};
Point(58) = {0.071060, 0.732622, 0, 1.0};
Point(59) = {0.072696, 0.732676, 0, 1.0};
Point(60) = {0.073765, 0.732692, 0, 1.0};
Point(61) = {-0.074143, -0.732684, 0, 1.0};
Point(62) = {-0.073775, -0.732774, 0, 1.0};
Point(63) = {-0.072748, -0.733067, 0, 1.0};
Point(64) = {-0.071182, -0.733542, 0, 1.0};
Point(65) = {-0.069121, -0.734116, 0, 1.0};
Point(66) = {-0.066546, -0.734753, 0, 1.0};
Point(67) = {-0.063465, -0.735467, 0, 1.0};
Point(68) = {-0.059923, -0.736264, 0, 1.0};
Point(69) = {-0.055965, -0.737136, 0, 1.0};
Point(70) = {-0.051643, -0.738077, 0, 1.0};
Point(71) = {-0.047011, -0.739075, 0, 1.0};
Point(72) = {-0.042127, -0.740117, 0, 1.0};
Point(73) = {-0.037052, -0.741190, 0, 1.0};
Point(74) = {-0.031848, -0.742279, 0, 1.0};
Point(75) = {-0.026577, -0.743369, 0, 1.0};
Point(76) = {-0.021304, -0.744442, 0, 1.0};
Point(77) = {-0.016093, -0.745481, 0, 1.0};
Point(78) = {-0.011007, -0.746466, 0, 1.0};
Point(79) = {-0.006108, -0.747379, 0, 1.0};
Point(80) = {-0.001453, -0.748198, 0, 1.0};
Point(81) = {0.002900, -0.748902, 0, 1.0};
Point(82) = {0.006897, -0.749465, 0, 1.0};
Point(83) = {0.010489, -0.749849, 0, 1.0};
Point(84) = {0.013664, -0.750000, 0, 1.0};
Point(85) = {0.016446, -0.749904, 0, 1.0};
Point(86) = {0.018844, -0.749577, 0, 1.0};
Point(87) = {0.020864, -0.749047, 0, 1.0};
Point(88) = {0.022506, -0.748349, 0, 1.0};
Point(89) = {0.023763, -0.747527, 0, 1.0};
Point(90) = {0.024619, -0.746636, 0, 1.0};
Point(91) = {0.025000, -0.745750, 0, 1.0};
Point(92) = {0.024862, -0.744794, 0, 1.0};
Point(93) = {0.024266, -0.743712, 0, 1.0};
Point(94) = {0.023265, -0.742593, 0, 1.0};
Point(95) = {0.021859, -0.741493, 0, 1.0};
Point(96) = {0.020046, -0.740458, 0, 1.0};
Point(97) = {0.017814, -0.739521, 0, 1.0};
Point(98) = {0.015153, -0.738708, 0, 1.0};
Point(99) = {0.012046, -0.738031, 0, 1.0};
Point(100) = {0.008478, -0.737471, 0, 1.0};
Point(101) = {0.004471, -0.736979, 0, 1.0};
Point(102) = {0.000085, -0.736531, 0, 1.0};
Point(103) = {-0.004623, -0.736117, 0, 1.0};
Point(104) = {-0.009592, -0.735729, 0, 1.0};
Point(105) = {-0.014760, -0.735363, 0, 1.0};
Point(106) = {-0.020062, -0.735016, 0, 1.0};
Point(107) = {-0.025433, -0.734686, 0, 1.0};
Point(108) = {-0.030806, -0.734374, 0, 1.0};
Point(109) = {-0.036115, -0.734078, 0, 1.0};
Point(110) = {-0.041295, -0.733799, 0, 1.0};
Point(111) = {-0.046282, -0.733541, 0, 1.0};
Point(112) = {-0.051014, -0.733304, 0, 1.0};
Point(113) = {-0.055432, -0.733093, 0, 1.0};
Point(114) = {-0.059481, -0.732911, 0, 1.0};
Point(115) = {-0.063108, -0.732762, 0, 1.0};
Point(116) = {-0.066269, -0.732653, 0, 1.0};
Point(117) = {-0.068921, -0.732602, 0, 1.0};
Point(118) = {-0.071060, -0.732622, 0, 1.0};
Point(119) = {-0.072696, -0.732676, 0, 1.0};
Point(120) = {-0.073765, -0.732692, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html