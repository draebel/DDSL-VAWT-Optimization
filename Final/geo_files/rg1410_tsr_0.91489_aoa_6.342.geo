SetFactory("OpenCASCADE");

Point(1) = {0.148776, 0.720087, 0, 1.0};
Point(2) = {0.148109, 0.720259, 0, 1.0};
Point(3) = {0.146150, 0.720825, 0, 1.0};
Point(4) = {0.142979, 0.721775, 0, 1.0};
Point(5) = {0.138671, 0.723007, 0, 1.0};
Point(6) = {0.133290, 0.724454, 0, 1.0};
Point(7) = {0.126931, 0.726123, 0, 1.0};
Point(8) = {0.119711, 0.727970, 0, 1.0};
Point(9) = {0.111754, 0.729959, 0, 1.0};
Point(10) = {0.103195, 0.732035, 0, 1.0};
Point(11) = {0.094141, 0.734152, 0, 1.0};
Point(12) = {0.084626, 0.736282, 0, 1.0};
Point(13) = {0.074696, 0.738400, 0, 1.0};
Point(14) = {0.064468, 0.740454, 0, 1.0};
Point(15) = {0.054064, 0.742407, 0, 1.0};
Point(16) = {0.043600, 0.744218, 0, 1.0};
Point(17) = {0.033201, 0.745835, 0, 1.0};
Point(18) = {0.022983, 0.747230, 0, 1.0};
Point(19) = {0.013065, 0.748365, 0, 1.0};
Point(20) = {0.003559, 0.749218, 0, 1.0};
Point(21) = {-0.005429, 0.749768, 0, 1.0};
Point(22) = {-0.013797, 0.750000, 0, 1.0};
Point(23) = {-0.021459, 0.749912, 0, 1.0};
Point(24) = {-0.028318, 0.749636, 0, 1.0};
Point(25) = {-0.034323, 0.749032, 0, 1.0};
Point(26) = {-0.039412, 0.748166, 0, 1.0};
Point(27) = {-0.043546, 0.747052, 0, 1.0};
Point(28) = {-0.046695, 0.745716, 0, 1.0};
Point(29) = {-0.048839, 0.744207, 0, 1.0};
Point(30) = {-0.050000, 0.742179, 0, 1.0};
Point(31) = {-0.049236, 0.740633, 0, 1.0};
Point(32) = {-0.047411, 0.739272, 0, 1.0};
Point(33) = {-0.044562, 0.737914, 0, 1.0};
Point(34) = {-0.040700, 0.736580, 0, 1.0};
Point(35) = {-0.035851, 0.735288, 0, 1.0};
Point(36) = {-0.030051, 0.734038, 0, 1.0};
Point(37) = {-0.023357, 0.732837, 0, 1.0};
Point(38) = {-0.015833, 0.731679, 0, 1.0};
Point(39) = {-0.007563, 0.730570, 0, 1.0};
Point(40) = {0.001368, 0.729505, 0, 1.0};
Point(41) = {0.010856, 0.728487, 0, 1.0};
Point(42) = {0.020792, 0.727520, 0, 1.0};
Point(43) = {0.031063, 0.726599, 0, 1.0};
Point(44) = {0.041545, 0.725728, 0, 1.0};
Point(45) = {0.052120, 0.724917, 0, 1.0};
Point(46) = {0.062657, 0.724165, 0, 1.0};
Point(47) = {0.073038, 0.723486, 0, 1.0};
Point(48) = {0.083138, 0.722888, 0, 1.0};
Point(49) = {0.092837, 0.722418, 0, 1.0};
Point(50) = {0.102091, 0.722106, 0, 1.0};
Point(51) = {0.110857, 0.721890, 0, 1.0};
Point(52) = {0.119012, 0.721678, 0, 1.0};
Point(53) = {0.126411, 0.721441, 0, 1.0};
Point(54) = {0.132925, 0.721176, 0, 1.0};
Point(55) = {0.138436, 0.720892, 0, 1.0};
Point(56) = {0.142851, 0.720620, 0, 1.0};
Point(57) = {0.146099, 0.720372, 0, 1.0};
Point(58) = {0.148099, 0.720172, 0, 1.0};
Point(59) = {-0.148776, -0.720087, 0, 1.0};
Point(60) = {-0.148109, -0.720259, 0, 1.0};
Point(61) = {-0.146150, -0.720825, 0, 1.0};
Point(62) = {-0.142979, -0.721775, 0, 1.0};
Point(63) = {-0.138671, -0.723007, 0, 1.0};
Point(64) = {-0.133290, -0.724454, 0, 1.0};
Point(65) = {-0.126931, -0.726123, 0, 1.0};
Point(66) = {-0.119711, -0.727970, 0, 1.0};
Point(67) = {-0.111754, -0.729959, 0, 1.0};
Point(68) = {-0.103195, -0.732035, 0, 1.0};
Point(69) = {-0.094141, -0.734152, 0, 1.0};
Point(70) = {-0.084626, -0.736282, 0, 1.0};
Point(71) = {-0.074696, -0.738400, 0, 1.0};
Point(72) = {-0.064468, -0.740454, 0, 1.0};
Point(73) = {-0.054064, -0.742407, 0, 1.0};
Point(74) = {-0.043600, -0.744218, 0, 1.0};
Point(75) = {-0.033201, -0.745835, 0, 1.0};
Point(76) = {-0.022983, -0.747230, 0, 1.0};
Point(77) = {-0.013065, -0.748365, 0, 1.0};
Point(78) = {-0.003559, -0.749218, 0, 1.0};
Point(79) = {0.005429, -0.749768, 0, 1.0};
Point(80) = {0.013797, -0.750000, 0, 1.0};
Point(81) = {0.021459, -0.749912, 0, 1.0};
Point(82) = {0.028318, -0.749636, 0, 1.0};
Point(83) = {0.034323, -0.749032, 0, 1.0};
Point(84) = {0.039412, -0.748166, 0, 1.0};
Point(85) = {0.043546, -0.747052, 0, 1.0};
Point(86) = {0.046695, -0.745716, 0, 1.0};
Point(87) = {0.048839, -0.744207, 0, 1.0};
Point(88) = {0.050000, -0.742179, 0, 1.0};
Point(89) = {0.049236, -0.740633, 0, 1.0};
Point(90) = {0.047411, -0.739272, 0, 1.0};
Point(91) = {0.044562, -0.737914, 0, 1.0};
Point(92) = {0.040700, -0.736580, 0, 1.0};
Point(93) = {0.035851, -0.735288, 0, 1.0};
Point(94) = {0.030051, -0.734038, 0, 1.0};
Point(95) = {0.023357, -0.732837, 0, 1.0};
Point(96) = {0.015833, -0.731679, 0, 1.0};
Point(97) = {0.007563, -0.730570, 0, 1.0};
Point(98) = {-0.001368, -0.729505, 0, 1.0};
Point(99) = {-0.010856, -0.728487, 0, 1.0};
Point(100) = {-0.020792, -0.727520, 0, 1.0};
Point(101) = {-0.031063, -0.726599, 0, 1.0};
Point(102) = {-0.041545, -0.725728, 0, 1.0};
Point(103) = {-0.052120, -0.724917, 0, 1.0};
Point(104) = {-0.062657, -0.724165, 0, 1.0};
Point(105) = {-0.073038, -0.723486, 0, 1.0};
Point(106) = {-0.083138, -0.722888, 0, 1.0};
Point(107) = {-0.092837, -0.722418, 0, 1.0};
Point(108) = {-0.102091, -0.722106, 0, 1.0};
Point(109) = {-0.110857, -0.721890, 0, 1.0};
Point(110) = {-0.119012, -0.721678, 0, 1.0};
Point(111) = {-0.126411, -0.721441, 0, 1.0};
Point(112) = {-0.132925, -0.721176, 0, 1.0};
Point(113) = {-0.138436, -0.720892, 0, 1.0};
Point(114) = {-0.142851, -0.720620, 0, 1.0};
Point(115) = {-0.146099, -0.720372, 0, 1.0};
Point(116) = {-0.148099, -0.720172, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:58};
Spline(4) = {58,1};

// Lines: second blade (splines 5-8)
Spline(5) = {59:78};
Spline(6) = {78:99};
Spline(7) = {99:116};
Spline(8) = {116,59};

// Outer domain (points 20001-4 and lines)
Point(117) = {-13.50000000, -15.00000000, 0, 1.0};
Point(118) = {-13.50000000, 15.00000000, 0, 1.0};
Point(119) = {13.50000000, 15.00000000, 0, 1.0};
Point(120) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {117, 118};
Line(12) = {118, 119};
Line(13) = {119, 120};
Line(14) = {117, 120};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html