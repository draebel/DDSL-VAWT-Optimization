SetFactory("OpenCASCADE");

Point(1) = {0.074388, 0.735043, 0, 1.0};
Point(2) = {0.074055, 0.735130, 0, 1.0};
Point(3) = {0.073075, 0.735413, 0, 1.0};
Point(4) = {0.071490, 0.735888, 0, 1.0};
Point(5) = {0.069335, 0.736503, 0, 1.0};
Point(6) = {0.066645, 0.737227, 0, 1.0};
Point(7) = {0.063466, 0.738061, 0, 1.0};
Point(8) = {0.059855, 0.738985, 0, 1.0};
Point(9) = {0.055877, 0.739979, 0, 1.0};
Point(10) = {0.051597, 0.741017, 0, 1.0};
Point(11) = {0.047071, 0.742076, 0, 1.0};
Point(12) = {0.042313, 0.743141, 0, 1.0};
Point(13) = {0.037348, 0.744200, 0, 1.0};
Point(14) = {0.032234, 0.745227, 0, 1.0};
Point(15) = {0.027032, 0.746204, 0, 1.0};
Point(16) = {0.021800, 0.747109, 0, 1.0};
Point(17) = {0.016600, 0.747918, 0, 1.0};
Point(18) = {0.011491, 0.748615, 0, 1.0};
Point(19) = {0.006533, 0.749182, 0, 1.0};
Point(20) = {0.001780, 0.749609, 0, 1.0};
Point(21) = {-0.002714, 0.749884, 0, 1.0};
Point(22) = {-0.006898, 0.750000, 0, 1.0};
Point(23) = {-0.010730, 0.749956, 0, 1.0};
Point(24) = {-0.014159, 0.749818, 0, 1.0};
Point(25) = {-0.017162, 0.749516, 0, 1.0};
Point(26) = {-0.019706, 0.749083, 0, 1.0};
Point(27) = {-0.021773, 0.748526, 0, 1.0};
Point(28) = {-0.023348, 0.747858, 0, 1.0};
Point(29) = {-0.024419, 0.747104, 0, 1.0};
Point(30) = {-0.025000, 0.746090, 0, 1.0};
Point(31) = {-0.024618, 0.745317, 0, 1.0};
Point(32) = {-0.023706, 0.744636, 0, 1.0};
Point(33) = {-0.022281, 0.743957, 0, 1.0};
Point(34) = {-0.020350, 0.743290, 0, 1.0};
Point(35) = {-0.017925, 0.742644, 0, 1.0};
Point(36) = {-0.015026, 0.742019, 0, 1.0};
Point(37) = {-0.011678, 0.741419, 0, 1.0};
Point(38) = {-0.007916, 0.740839, 0, 1.0};
Point(39) = {-0.003781, 0.740285, 0, 1.0};
Point(40) = {0.000684, 0.739753, 0, 1.0};
Point(41) = {0.005428, 0.739244, 0, 1.0};
Point(42) = {0.010396, 0.738760, 0, 1.0};
Point(43) = {0.015532, 0.738300, 0, 1.0};
Point(44) = {0.020773, 0.737864, 0, 1.0};
Point(45) = {0.026060, 0.737459, 0, 1.0};
Point(46) = {0.031329, 0.737082, 0, 1.0};
Point(47) = {0.036519, 0.736743, 0, 1.0};
Point(48) = {0.041569, 0.736444, 0, 1.0};
Point(49) = {0.046419, 0.736209, 0, 1.0};
Point(50) = {0.051046, 0.736053, 0, 1.0};
Point(51) = {0.055429, 0.735945, 0, 1.0};
Point(52) = {0.059506, 0.735839, 0, 1.0};
Point(53) = {0.063205, 0.735721, 0, 1.0};
Point(54) = {0.066463, 0.735588, 0, 1.0};
Point(55) = {0.069218, 0.735446, 0, 1.0};
Point(56) = {0.071425, 0.735310, 0, 1.0};
Point(57) = {0.073050, 0.735186, 0, 1.0};
Point(58) = {0.074050, 0.735086, 0, 1.0};
Point(59) = {-0.074388, -0.735043, 0, 1.0};
Point(60) = {-0.074055, -0.735130, 0, 1.0};
Point(61) = {-0.073075, -0.735413, 0, 1.0};
Point(62) = {-0.071490, -0.735888, 0, 1.0};
Point(63) = {-0.069335, -0.736503, 0, 1.0};
Point(64) = {-0.066645, -0.737227, 0, 1.0};
Point(65) = {-0.063466, -0.738061, 0, 1.0};
Point(66) = {-0.059855, -0.738985, 0, 1.0};
Point(67) = {-0.055877, -0.739979, 0, 1.0};
Point(68) = {-0.051597, -0.741017, 0, 1.0};
Point(69) = {-0.047071, -0.742076, 0, 1.0};
Point(70) = {-0.042313, -0.743141, 0, 1.0};
Point(71) = {-0.037348, -0.744200, 0, 1.0};
Point(72) = {-0.032234, -0.745227, 0, 1.0};
Point(73) = {-0.027032, -0.746204, 0, 1.0};
Point(74) = {-0.021800, -0.747109, 0, 1.0};
Point(75) = {-0.016600, -0.747918, 0, 1.0};
Point(76) = {-0.011491, -0.748615, 0, 1.0};
Point(77) = {-0.006533, -0.749182, 0, 1.0};
Point(78) = {-0.001780, -0.749609, 0, 1.0};
Point(79) = {0.002714, -0.749884, 0, 1.0};
Point(80) = {0.006898, -0.750000, 0, 1.0};
Point(81) = {0.010730, -0.749956, 0, 1.0};
Point(82) = {0.014159, -0.749818, 0, 1.0};
Point(83) = {0.017162, -0.749516, 0, 1.0};
Point(84) = {0.019706, -0.749083, 0, 1.0};
Point(85) = {0.021773, -0.748526, 0, 1.0};
Point(86) = {0.023348, -0.747858, 0, 1.0};
Point(87) = {0.024419, -0.747104, 0, 1.0};
Point(88) = {0.025000, -0.746090, 0, 1.0};
Point(89) = {0.024618, -0.745317, 0, 1.0};
Point(90) = {0.023706, -0.744636, 0, 1.0};
Point(91) = {0.022281, -0.743957, 0, 1.0};
Point(92) = {0.020350, -0.743290, 0, 1.0};
Point(93) = {0.017925, -0.742644, 0, 1.0};
Point(94) = {0.015026, -0.742019, 0, 1.0};
Point(95) = {0.011678, -0.741419, 0, 1.0};
Point(96) = {0.007916, -0.740839, 0, 1.0};
Point(97) = {0.003781, -0.740285, 0, 1.0};
Point(98) = {-0.000684, -0.739753, 0, 1.0};
Point(99) = {-0.005428, -0.739244, 0, 1.0};
Point(100) = {-0.010396, -0.738760, 0, 1.0};
Point(101) = {-0.015532, -0.738300, 0, 1.0};
Point(102) = {-0.020773, -0.737864, 0, 1.0};
Point(103) = {-0.026060, -0.737459, 0, 1.0};
Point(104) = {-0.031329, -0.737082, 0, 1.0};
Point(105) = {-0.036519, -0.736743, 0, 1.0};
Point(106) = {-0.041569, -0.736444, 0, 1.0};
Point(107) = {-0.046419, -0.736209, 0, 1.0};
Point(108) = {-0.051046, -0.736053, 0, 1.0};
Point(109) = {-0.055429, -0.735945, 0, 1.0};
Point(110) = {-0.059506, -0.735839, 0, 1.0};
Point(111) = {-0.063205, -0.735721, 0, 1.0};
Point(112) = {-0.066463, -0.735588, 0, 1.0};
Point(113) = {-0.069218, -0.735446, 0, 1.0};
Point(114) = {-0.071425, -0.735310, 0, 1.0};
Point(115) = {-0.073050, -0.735186, 0, 1.0};
Point(116) = {-0.074050, -0.735086, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:58};
Spline(4) = {58,1};

// Lines: second blade (splines 5-8)
Spline(5) = {59:78};
Spline(6) = {78:99};
Spline(7) = {99:116};
Spline(8) = {116,59};

// Outer domain (points 20001-4 and lines)
Point(117) = {-13.50000000, -15.00000000, 0, 1.0};
Point(118) = {-13.50000000, 15.00000000, 0, 1.0};
Point(119) = {13.50000000, 15.00000000, 0, 1.0};
Point(120) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {117, 118};
Line(12) = {118, 119};
Line(13) = {119, 120};
Line(14) = {117, 120};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html