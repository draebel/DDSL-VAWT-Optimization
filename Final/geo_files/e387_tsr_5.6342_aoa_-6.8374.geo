SetFactory("OpenCASCADE");

Point(1) = {0.111611, 0.747690, 0, 1.0};
Point(2) = {0.111122, 0.747697, 0, 1.0};
Point(3) = {0.109686, 0.747731, 0, 1.0};
Point(4) = {0.107364, 0.747820, 0, 1.0};
Point(5) = {0.104222, 0.747956, 0, 1.0};
Point(6) = {0.100315, 0.748124, 0, 1.0};
Point(7) = {0.095695, 0.748317, 0, 1.0};
Point(8) = {0.090421, 0.748535, 0, 1.0};
Point(9) = {0.084575, 0.748776, 0, 1.0};
Point(10) = {0.078238, 0.749034, 0, 1.0};
Point(11) = {0.071502, 0.749297, 0, 1.0};
Point(12) = {0.064457, 0.749549, 0, 1.0};
Point(13) = {0.057204, 0.749768, 0, 1.0};
Point(14) = {0.049839, 0.749933, 0, 1.0};
Point(15) = {0.042465, 0.750000, 0, 1.0};
Point(16) = {0.035158, 0.749918, 0, 1.0};
Point(17) = {0.027970, 0.749645, 0, 1.0};
Point(18) = {0.020946, 0.749161, 0, 1.0};
Point(19) = {0.014126, 0.748455, 0, 1.0};
Point(20) = {0.007552, 0.747529, 0, 1.0};
Point(21) = {0.001247, 0.746399, 0, 1.0};
Point(22) = {-0.004745, 0.745108, 0, 1.0};
Point(23) = {-0.010368, 0.743691, 0, 1.0};
Point(24) = {-0.015564, 0.742178, 0, 1.0};
Point(25) = {-0.020284, 0.740596, 0, 1.0};
Point(26) = {-0.024482, 0.738972, 0, 1.0};
Point(27) = {-0.028124, 0.737335, 0, 1.0};
Point(28) = {-0.031177, 0.735716, 0, 1.0};
Point(29) = {-0.033623, 0.734145, 0, 1.0};
Point(30) = {-0.035447, 0.732664, 0, 1.0};
Point(31) = {-0.036651, 0.731319, 0, 1.0};
Point(32) = {-0.037233, 0.730196, 0, 1.0};
Point(33) = {-0.037071, 0.729431, 0, 1.0};
Point(34) = {-0.036068, 0.728953, 0, 1.0};
Point(35) = {-0.034262, 0.728663, 0, 1.0};
Point(36) = {-0.031678, 0.728599, 0, 1.0};
Point(37) = {-0.028328, 0.728759, 0, 1.0};
Point(38) = {-0.024233, 0.729137, 0, 1.0};
Point(39) = {-0.019423, 0.729710, 0, 1.0};
Point(40) = {-0.013940, 0.730460, 0, 1.0};
Point(41) = {-0.007843, 0.731360, 0, 1.0};
Point(42) = {-0.001195, 0.732387, 0, 1.0};
Point(43) = {0.005932, 0.733512, 0, 1.0};
Point(44) = {0.013454, 0.734707, 0, 1.0};
Point(45) = {0.021284, 0.735946, 0, 1.0};
Point(46) = {0.029329, 0.737205, 0, 1.0};
Point(47) = {0.037488, 0.738458, 0, 1.0};
Point(48) = {0.045665, 0.739685, 0, 1.0};
Point(49) = {0.053758, 0.740865, 0, 1.0};
Point(50) = {0.061665, 0.741982, 0, 1.0};
Point(51) = {0.069287, 0.743020, 0, 1.0};
Point(52) = {0.076532, 0.743967, 0, 1.0};
Point(53) = {0.083305, 0.744813, 0, 1.0};
Point(54) = {0.089521, 0.745550, 0, 1.0};
Point(55) = {0.095097, 0.746174, 0, 1.0};
Point(56) = {0.099960, 0.746683, 0, 1.0};
Point(57) = {0.104046, 0.747079, 0, 1.0};
Point(58) = {0.107297, 0.747372, 0, 1.0};
Point(59) = {0.109670, 0.747565, 0, 1.0};
Point(60) = {0.111122, 0.747663, 0, 1.0};
Point(61) = {-0.111611, -0.747690, 0, 1.0};
Point(62) = {-0.111122, -0.747697, 0, 1.0};
Point(63) = {-0.109686, -0.747731, 0, 1.0};
Point(64) = {-0.107364, -0.747820, 0, 1.0};
Point(65) = {-0.104222, -0.747956, 0, 1.0};
Point(66) = {-0.100315, -0.748124, 0, 1.0};
Point(67) = {-0.095695, -0.748317, 0, 1.0};
Point(68) = {-0.090421, -0.748535, 0, 1.0};
Point(69) = {-0.084575, -0.748776, 0, 1.0};
Point(70) = {-0.078238, -0.749034, 0, 1.0};
Point(71) = {-0.071502, -0.749297, 0, 1.0};
Point(72) = {-0.064457, -0.749549, 0, 1.0};
Point(73) = {-0.057204, -0.749768, 0, 1.0};
Point(74) = {-0.049839, -0.749933, 0, 1.0};
Point(75) = {-0.042465, -0.750000, 0, 1.0};
Point(76) = {-0.035158, -0.749918, 0, 1.0};
Point(77) = {-0.027970, -0.749645, 0, 1.0};
Point(78) = {-0.020946, -0.749161, 0, 1.0};
Point(79) = {-0.014126, -0.748455, 0, 1.0};
Point(80) = {-0.007552, -0.747529, 0, 1.0};
Point(81) = {-0.001247, -0.746399, 0, 1.0};
Point(82) = {0.004745, -0.745108, 0, 1.0};
Point(83) = {0.010368, -0.743691, 0, 1.0};
Point(84) = {0.015564, -0.742178, 0, 1.0};
Point(85) = {0.020284, -0.740596, 0, 1.0};
Point(86) = {0.024482, -0.738972, 0, 1.0};
Point(87) = {0.028124, -0.737335, 0, 1.0};
Point(88) = {0.031177, -0.735716, 0, 1.0};
Point(89) = {0.033623, -0.734145, 0, 1.0};
Point(90) = {0.035447, -0.732664, 0, 1.0};
Point(91) = {0.036651, -0.731319, 0, 1.0};
Point(92) = {0.037233, -0.730196, 0, 1.0};
Point(93) = {0.037071, -0.729431, 0, 1.0};
Point(94) = {0.036068, -0.728953, 0, 1.0};
Point(95) = {0.034262, -0.728663, 0, 1.0};
Point(96) = {0.031678, -0.728599, 0, 1.0};
Point(97) = {0.028328, -0.728759, 0, 1.0};
Point(98) = {0.024233, -0.729137, 0, 1.0};
Point(99) = {0.019423, -0.729710, 0, 1.0};
Point(100) = {0.013940, -0.730460, 0, 1.0};
Point(101) = {0.007843, -0.731360, 0, 1.0};
Point(102) = {0.001195, -0.732387, 0, 1.0};
Point(103) = {-0.005932, -0.733512, 0, 1.0};
Point(104) = {-0.013454, -0.734707, 0, 1.0};
Point(105) = {-0.021284, -0.735946, 0, 1.0};
Point(106) = {-0.029329, -0.737205, 0, 1.0};
Point(107) = {-0.037488, -0.738458, 0, 1.0};
Point(108) = {-0.045665, -0.739685, 0, 1.0};
Point(109) = {-0.053758, -0.740865, 0, 1.0};
Point(110) = {-0.061665, -0.741982, 0, 1.0};
Point(111) = {-0.069287, -0.743020, 0, 1.0};
Point(112) = {-0.076532, -0.743967, 0, 1.0};
Point(113) = {-0.083305, -0.744813, 0, 1.0};
Point(114) = {-0.089521, -0.745550, 0, 1.0};
Point(115) = {-0.095097, -0.746174, 0, 1.0};
Point(116) = {-0.099960, -0.746683, 0, 1.0};
Point(117) = {-0.104046, -0.747079, 0, 1.0};
Point(118) = {-0.107297, -0.747372, 0, 1.0};
Point(119) = {-0.109670, -0.747565, 0, 1.0};
Point(120) = {-0.111122, -0.747663, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html