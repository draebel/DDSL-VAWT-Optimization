SetFactory("OpenCASCADE");

Point(1) = {0.074289, 0.748459, 0, 1.0};
Point(2) = {0.073963, 0.748464, 0, 1.0};
Point(3) = {0.073005, 0.748487, 0, 1.0};
Point(4) = {0.071456, 0.748546, 0, 1.0};
Point(5) = {0.069361, 0.748637, 0, 1.0};
Point(6) = {0.066755, 0.748749, 0, 1.0};
Point(7) = {0.063674, 0.748878, 0, 1.0};
Point(8) = {0.060156, 0.749023, 0, 1.0};
Point(9) = {0.056257, 0.749184, 0, 1.0};
Point(10) = {0.052031, 0.749356, 0, 1.0};
Point(11) = {0.047538, 0.749531, 0, 1.0};
Point(12) = {0.042840, 0.749699, 0, 1.0};
Point(13) = {0.038002, 0.749845, 0, 1.0};
Point(14) = {0.033090, 0.749955, 0, 1.0};
Point(15) = {0.028171, 0.750000, 0, 1.0};
Point(16) = {0.023298, 0.749945, 0, 1.0};
Point(17) = {0.018504, 0.749763, 0, 1.0};
Point(18) = {0.013819, 0.749440, 0, 1.0};
Point(19) = {0.009271, 0.748969, 0, 1.0};
Point(20) = {0.004886, 0.748352, 0, 1.0};
Point(21) = {0.000681, 0.747598, 0, 1.0};
Point(22) = {-0.003316, 0.746737, 0, 1.0};
Point(23) = {-0.007066, 0.745792, 0, 1.0};
Point(24) = {-0.010532, 0.744783, 0, 1.0};
Point(25) = {-0.013680, 0.743728, 0, 1.0};
Point(26) = {-0.016480, 0.742645, 0, 1.0};
Point(27) = {-0.018909, 0.741553, 0, 1.0};
Point(28) = {-0.020945, 0.740473, 0, 1.0};
Point(29) = {-0.022577, 0.739425, 0, 1.0};
Point(30) = {-0.023793, 0.738437, 0, 1.0};
Point(31) = {-0.024596, 0.737540, 0, 1.0};
Point(32) = {-0.024984, 0.736792, 0, 1.0};
Point(33) = {-0.024876, 0.736281, 0, 1.0};
Point(34) = {-0.024207, 0.735962, 0, 1.0};
Point(35) = {-0.023002, 0.735769, 0, 1.0};
Point(36) = {-0.021279, 0.735726, 0, 1.0};
Point(37) = {-0.019045, 0.735833, 0, 1.0};
Point(38) = {-0.016313, 0.736085, 0, 1.0};
Point(39) = {-0.013105, 0.736468, 0, 1.0};
Point(40) = {-0.009449, 0.736968, 0, 1.0};
Point(41) = {-0.005382, 0.737568, 0, 1.0};
Point(42) = {-0.000948, 0.738253, 0, 1.0};
Point(43) = {0.003805, 0.739003, 0, 1.0};
Point(44) = {0.008822, 0.739800, 0, 1.0};
Point(45) = {0.014045, 0.740627, 0, 1.0};
Point(46) = {0.019410, 0.741466, 0, 1.0};
Point(47) = {0.024852, 0.742302, 0, 1.0};
Point(48) = {0.030306, 0.743120, 0, 1.0};
Point(49) = {0.035703, 0.743907, 0, 1.0};
Point(50) = {0.040977, 0.744653, 0, 1.0};
Point(51) = {0.046061, 0.745345, 0, 1.0};
Point(52) = {0.050893, 0.745976, 0, 1.0};
Point(53) = {0.055410, 0.746540, 0, 1.0};
Point(54) = {0.059556, 0.747032, 0, 1.0};
Point(55) = {0.063275, 0.747448, 0, 1.0};
Point(56) = {0.066519, 0.747788, 0, 1.0};
Point(57) = {0.069243, 0.748052, 0, 1.0};
Point(58) = {0.071412, 0.748247, 0, 1.0};
Point(59) = {0.072995, 0.748376, 0, 1.0};
Point(60) = {0.073963, 0.748441, 0, 1.0};
Point(61) = {-0.074289, -0.748459, 0, 1.0};
Point(62) = {-0.073963, -0.748464, 0, 1.0};
Point(63) = {-0.073005, -0.748487, 0, 1.0};
Point(64) = {-0.071456, -0.748546, 0, 1.0};
Point(65) = {-0.069361, -0.748637, 0, 1.0};
Point(66) = {-0.066755, -0.748749, 0, 1.0};
Point(67) = {-0.063674, -0.748878, 0, 1.0};
Point(68) = {-0.060156, -0.749023, 0, 1.0};
Point(69) = {-0.056257, -0.749184, 0, 1.0};
Point(70) = {-0.052031, -0.749356, 0, 1.0};
Point(71) = {-0.047538, -0.749531, 0, 1.0};
Point(72) = {-0.042840, -0.749699, 0, 1.0};
Point(73) = {-0.038002, -0.749845, 0, 1.0};
Point(74) = {-0.033090, -0.749955, 0, 1.0};
Point(75) = {-0.028171, -0.750000, 0, 1.0};
Point(76) = {-0.023298, -0.749945, 0, 1.0};
Point(77) = {-0.018504, -0.749763, 0, 1.0};
Point(78) = {-0.013819, -0.749440, 0, 1.0};
Point(79) = {-0.009271, -0.748969, 0, 1.0};
Point(80) = {-0.004886, -0.748352, 0, 1.0};
Point(81) = {-0.000681, -0.747598, 0, 1.0};
Point(82) = {0.003316, -0.746737, 0, 1.0};
Point(83) = {0.007066, -0.745792, 0, 1.0};
Point(84) = {0.010532, -0.744783, 0, 1.0};
Point(85) = {0.013680, -0.743728, 0, 1.0};
Point(86) = {0.016480, -0.742645, 0, 1.0};
Point(87) = {0.018909, -0.741553, 0, 1.0};
Point(88) = {0.020945, -0.740473, 0, 1.0};
Point(89) = {0.022577, -0.739425, 0, 1.0};
Point(90) = {0.023793, -0.738437, 0, 1.0};
Point(91) = {0.024596, -0.737540, 0, 1.0};
Point(92) = {0.024984, -0.736792, 0, 1.0};
Point(93) = {0.024876, -0.736281, 0, 1.0};
Point(94) = {0.024207, -0.735962, 0, 1.0};
Point(95) = {0.023002, -0.735769, 0, 1.0};
Point(96) = {0.021279, -0.735726, 0, 1.0};
Point(97) = {0.019045, -0.735833, 0, 1.0};
Point(98) = {0.016313, -0.736085, 0, 1.0};
Point(99) = {0.013105, -0.736468, 0, 1.0};
Point(100) = {0.009449, -0.736968, 0, 1.0};
Point(101) = {0.005382, -0.737568, 0, 1.0};
Point(102) = {0.000948, -0.738253, 0, 1.0};
Point(103) = {-0.003805, -0.739003, 0, 1.0};
Point(104) = {-0.008822, -0.739800, 0, 1.0};
Point(105) = {-0.014045, -0.740627, 0, 1.0};
Point(106) = {-0.019410, -0.741466, 0, 1.0};
Point(107) = {-0.024852, -0.742302, 0, 1.0};
Point(108) = {-0.030306, -0.743120, 0, 1.0};
Point(109) = {-0.035703, -0.743907, 0, 1.0};
Point(110) = {-0.040977, -0.744653, 0, 1.0};
Point(111) = {-0.046061, -0.745345, 0, 1.0};
Point(112) = {-0.050893, -0.745976, 0, 1.0};
Point(113) = {-0.055410, -0.746540, 0, 1.0};
Point(114) = {-0.059556, -0.747032, 0, 1.0};
Point(115) = {-0.063275, -0.747448, 0, 1.0};
Point(116) = {-0.066519, -0.747788, 0, 1.0};
Point(117) = {-0.069243, -0.748052, 0, 1.0};
Point(118) = {-0.071412, -0.748247, 0, 1.0};
Point(119) = {-0.072995, -0.748376, 0, 1.0};
Point(120) = {-0.073963, -0.748441, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html