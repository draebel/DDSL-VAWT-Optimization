SetFactory("OpenCASCADE");

Point(1) = {0.148578, 0.746919, 0, 1.0};
Point(2) = {0.147926, 0.746927, 0, 1.0};
Point(3) = {0.146011, 0.746974, 0, 1.0};
Point(4) = {0.142913, 0.747092, 0, 1.0};
Point(5) = {0.138721, 0.747274, 0, 1.0};
Point(6) = {0.133510, 0.747497, 0, 1.0};
Point(7) = {0.127347, 0.747755, 0, 1.0};
Point(8) = {0.120312, 0.748046, 0, 1.0};
Point(9) = {0.112515, 0.748368, 0, 1.0};
Point(10) = {0.104062, 0.748712, 0, 1.0};
Point(11) = {0.095076, 0.749063, 0, 1.0};
Point(12) = {0.085679, 0.749398, 0, 1.0};
Point(13) = {0.076003, 0.749690, 0, 1.0};
Point(14) = {0.066179, 0.749910, 0, 1.0};
Point(15) = {0.056343, 0.750000, 0, 1.0};
Point(16) = {0.046596, 0.749891, 0, 1.0};
Point(17) = {0.037008, 0.749527, 0, 1.0};
Point(18) = {0.027638, 0.748881, 0, 1.0};
Point(19) = {0.018541, 0.747939, 0, 1.0};
Point(20) = {0.009772, 0.746704, 0, 1.0};
Point(21) = {0.001362, 0.745196, 0, 1.0};
Point(22) = {-0.006632, 0.743474, 0, 1.0};
Point(23) = {-0.014132, 0.741584, 0, 1.0};
Point(24) = {-0.021064, 0.739566, 0, 1.0};
Point(25) = {-0.027359, 0.737456, 0, 1.0};
Point(26) = {-0.032959, 0.735290, 0, 1.0};
Point(27) = {-0.037818, 0.733106, 0, 1.0};
Point(28) = {-0.041889, 0.730946, 0, 1.0};
Point(29) = {-0.045153, 0.728850, 0, 1.0};
Point(30) = {-0.047585, 0.726875, 0, 1.0};
Point(31) = {-0.049191, 0.725081, 0, 1.0};
Point(32) = {-0.049968, 0.723583, 0, 1.0};
Point(33) = {-0.049751, 0.722562, 0, 1.0};
Point(34) = {-0.048414, 0.721925, 0, 1.0};
Point(35) = {-0.046005, 0.721539, 0, 1.0};
Point(36) = {-0.042558, 0.721453, 0, 1.0};
Point(37) = {-0.038090, 0.721666, 0, 1.0};
Point(38) = {-0.032627, 0.722170, 0, 1.0};
Point(39) = {-0.026210, 0.722935, 0, 1.0};
Point(40) = {-0.018897, 0.723935, 0, 1.0};
Point(41) = {-0.010764, 0.725136, 0, 1.0};
Point(42) = {-0.001896, 0.726505, 0, 1.0};
Point(43) = {0.007611, 0.728006, 0, 1.0};
Point(44) = {0.017644, 0.729600, 0, 1.0};
Point(45) = {0.028090, 0.731253, 0, 1.0};
Point(46) = {0.038820, 0.732932, 0, 1.0};
Point(47) = {0.049704, 0.734604, 0, 1.0};
Point(48) = {0.060611, 0.736240, 0, 1.0};
Point(49) = {0.071407, 0.737815, 0, 1.0};
Point(50) = {0.081954, 0.739305, 0, 1.0};
Point(51) = {0.092122, 0.740689, 0, 1.0};
Point(52) = {0.101786, 0.741953, 0, 1.0};
Point(53) = {0.110820, 0.743080, 0, 1.0};
Point(54) = {0.119112, 0.744065, 0, 1.0};
Point(55) = {0.126550, 0.744896, 0, 1.0};
Point(56) = {0.133037, 0.745575, 0, 1.0};
Point(57) = {0.138487, 0.746104, 0, 1.0};
Point(58) = {0.142823, 0.746495, 0, 1.0};
Point(59) = {0.145989, 0.746752, 0, 1.0};
Point(60) = {0.147925, 0.746883, 0, 1.0};
Point(61) = {-0.148578, -0.746919, 0, 1.0};
Point(62) = {-0.147926, -0.746927, 0, 1.0};
Point(63) = {-0.146011, -0.746974, 0, 1.0};
Point(64) = {-0.142913, -0.747092, 0, 1.0};
Point(65) = {-0.138721, -0.747274, 0, 1.0};
Point(66) = {-0.133510, -0.747497, 0, 1.0};
Point(67) = {-0.127347, -0.747755, 0, 1.0};
Point(68) = {-0.120312, -0.748046, 0, 1.0};
Point(69) = {-0.112515, -0.748368, 0, 1.0};
Point(70) = {-0.104062, -0.748712, 0, 1.0};
Point(71) = {-0.095076, -0.749063, 0, 1.0};
Point(72) = {-0.085679, -0.749398, 0, 1.0};
Point(73) = {-0.076003, -0.749690, 0, 1.0};
Point(74) = {-0.066179, -0.749910, 0, 1.0};
Point(75) = {-0.056343, -0.750000, 0, 1.0};
Point(76) = {-0.046596, -0.749891, 0, 1.0};
Point(77) = {-0.037008, -0.749527, 0, 1.0};
Point(78) = {-0.027638, -0.748881, 0, 1.0};
Point(79) = {-0.018541, -0.747939, 0, 1.0};
Point(80) = {-0.009772, -0.746704, 0, 1.0};
Point(81) = {-0.001362, -0.745196, 0, 1.0};
Point(82) = {0.006632, -0.743474, 0, 1.0};
Point(83) = {0.014132, -0.741584, 0, 1.0};
Point(84) = {0.021064, -0.739566, 0, 1.0};
Point(85) = {0.027359, -0.737456, 0, 1.0};
Point(86) = {0.032959, -0.735290, 0, 1.0};
Point(87) = {0.037818, -0.733106, 0, 1.0};
Point(88) = {0.041889, -0.730946, 0, 1.0};
Point(89) = {0.045153, -0.728850, 0, 1.0};
Point(90) = {0.047585, -0.726875, 0, 1.0};
Point(91) = {0.049191, -0.725081, 0, 1.0};
Point(92) = {0.049968, -0.723583, 0, 1.0};
Point(93) = {0.049751, -0.722562, 0, 1.0};
Point(94) = {0.048414, -0.721925, 0, 1.0};
Point(95) = {0.046005, -0.721539, 0, 1.0};
Point(96) = {0.042558, -0.721453, 0, 1.0};
Point(97) = {0.038090, -0.721666, 0, 1.0};
Point(98) = {0.032627, -0.722170, 0, 1.0};
Point(99) = {0.026210, -0.722935, 0, 1.0};
Point(100) = {0.018897, -0.723935, 0, 1.0};
Point(101) = {0.010764, -0.725136, 0, 1.0};
Point(102) = {0.001896, -0.726505, 0, 1.0};
Point(103) = {-0.007611, -0.728006, 0, 1.0};
Point(104) = {-0.017644, -0.729600, 0, 1.0};
Point(105) = {-0.028090, -0.731253, 0, 1.0};
Point(106) = {-0.038820, -0.732932, 0, 1.0};
Point(107) = {-0.049704, -0.734604, 0, 1.0};
Point(108) = {-0.060611, -0.736240, 0, 1.0};
Point(109) = {-0.071407, -0.737815, 0, 1.0};
Point(110) = {-0.081954, -0.739305, 0, 1.0};
Point(111) = {-0.092122, -0.740689, 0, 1.0};
Point(112) = {-0.101786, -0.741953, 0, 1.0};
Point(113) = {-0.110820, -0.743080, 0, 1.0};
Point(114) = {-0.119112, -0.744065, 0, 1.0};
Point(115) = {-0.126550, -0.744896, 0, 1.0};
Point(116) = {-0.133037, -0.745575, 0, 1.0};
Point(117) = {-0.138487, -0.746104, 0, 1.0};
Point(118) = {-0.142823, -0.746495, 0, 1.0};
Point(119) = {-0.145989, -0.746752, 0, 1.0};
Point(120) = {-0.147925, -0.746883, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html