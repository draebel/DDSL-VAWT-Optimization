SetFactory("OpenCASCADE");

Point(1) = {0.111742, 0.747688, 0, 1.0};
Point(2) = {0.111253, 0.747695, 0, 1.0};
Point(3) = {0.109816, 0.747729, 0, 1.0};
Point(4) = {0.107491, 0.747818, 0, 1.0};
Point(5) = {0.104346, 0.747955, 0, 1.0};
Point(6) = {0.100436, 0.748122, 0, 1.0};
Point(7) = {0.095812, 0.748316, 0, 1.0};
Point(8) = {0.090533, 0.748534, 0, 1.0};
Point(9) = {0.084683, 0.748775, 0, 1.0};
Point(10) = {0.078340, 0.749033, 0, 1.0};
Point(11) = {0.071598, 0.749297, 0, 1.0};
Point(12) = {0.064547, 0.749549, 0, 1.0};
Point(13) = {0.057287, 0.749768, 0, 1.0};
Point(14) = {0.049916, 0.749933, 0, 1.0};
Point(15) = {0.042535, 0.750000, 0, 1.0};
Point(16) = {0.035222, 0.749918, 0, 1.0};
Point(17) = {0.028027, 0.749645, 0, 1.0};
Point(18) = {0.020997, 0.749160, 0, 1.0};
Point(19) = {0.014172, 0.748454, 0, 1.0};
Point(20) = {0.007592, 0.747527, 0, 1.0};
Point(21) = {0.001281, 0.746396, 0, 1.0};
Point(22) = {-0.004717, 0.745104, 0, 1.0};
Point(23) = {-0.010345, 0.743685, 0, 1.0};
Point(24) = {-0.015545, 0.742171, 0, 1.0};
Point(25) = {-0.020269, 0.740588, 0, 1.0};
Point(26) = {-0.024471, 0.738962, 0, 1.0};
Point(27) = {-0.028116, 0.737324, 0, 1.0};
Point(28) = {-0.031171, 0.735703, 0, 1.0};
Point(29) = {-0.033620, 0.734131, 0, 1.0};
Point(30) = {-0.035445, 0.732648, 0, 1.0};
Point(31) = {-0.036650, 0.731302, 0, 1.0};
Point(32) = {-0.037233, 0.730179, 0, 1.0};
Point(33) = {-0.037070, 0.729412, 0, 1.0};
Point(34) = {-0.036067, 0.728934, 0, 1.0};
Point(35) = {-0.034259, 0.728645, 0, 1.0};
Point(36) = {-0.031673, 0.728580, 0, 1.0};
Point(37) = {-0.028320, 0.728740, 0, 1.0};
Point(38) = {-0.024221, 0.729118, 0, 1.0};
Point(39) = {-0.019407, 0.729693, 0, 1.0};
Point(40) = {-0.013920, 0.730443, 0, 1.0};
Point(41) = {-0.007817, 0.731344, 0, 1.0};
Point(42) = {-0.001163, 0.732371, 0, 1.0};
Point(43) = {0.005970, 0.733497, 0, 1.0};
Point(44) = {0.013498, 0.734693, 0, 1.0};
Point(45) = {0.021336, 0.735934, 0, 1.0};
Point(46) = {0.029387, 0.737194, 0, 1.0};
Point(47) = {0.037554, 0.738448, 0, 1.0};
Point(48) = {0.045738, 0.739676, 0, 1.0};
Point(49) = {0.053838, 0.740857, 0, 1.0};
Point(50) = {0.061752, 0.741975, 0, 1.0};
Point(51) = {0.069381, 0.743014, 0, 1.0};
Point(52) = {0.076633, 0.743962, 0, 1.0};
Point(53) = {0.083411, 0.744808, 0, 1.0};
Point(54) = {0.089633, 0.745547, 0, 1.0};
Point(55) = {0.095214, 0.746170, 0, 1.0};
Point(56) = {0.100081, 0.746680, 0, 1.0};
Point(57) = {0.104170, 0.747077, 0, 1.0};
Point(58) = {0.107424, 0.747370, 0, 1.0};
Point(59) = {0.109799, 0.747563, 0, 1.0};
Point(60) = {0.111252, 0.747661, 0, 1.0};
Point(61) = {-0.111742, -0.747688, 0, 1.0};
Point(62) = {-0.111253, -0.747695, 0, 1.0};
Point(63) = {-0.109816, -0.747729, 0, 1.0};
Point(64) = {-0.107491, -0.747818, 0, 1.0};
Point(65) = {-0.104346, -0.747955, 0, 1.0};
Point(66) = {-0.100436, -0.748122, 0, 1.0};
Point(67) = {-0.095812, -0.748316, 0, 1.0};
Point(68) = {-0.090533, -0.748534, 0, 1.0};
Point(69) = {-0.084683, -0.748775, 0, 1.0};
Point(70) = {-0.078340, -0.749033, 0, 1.0};
Point(71) = {-0.071598, -0.749297, 0, 1.0};
Point(72) = {-0.064547, -0.749549, 0, 1.0};
Point(73) = {-0.057287, -0.749768, 0, 1.0};
Point(74) = {-0.049916, -0.749933, 0, 1.0};
Point(75) = {-0.042535, -0.750000, 0, 1.0};
Point(76) = {-0.035222, -0.749918, 0, 1.0};
Point(77) = {-0.028027, -0.749645, 0, 1.0};
Point(78) = {-0.020997, -0.749160, 0, 1.0};
Point(79) = {-0.014172, -0.748454, 0, 1.0};
Point(80) = {-0.007592, -0.747527, 0, 1.0};
Point(81) = {-0.001281, -0.746396, 0, 1.0};
Point(82) = {0.004717, -0.745104, 0, 1.0};
Point(83) = {0.010345, -0.743685, 0, 1.0};
Point(84) = {0.015545, -0.742171, 0, 1.0};
Point(85) = {0.020269, -0.740588, 0, 1.0};
Point(86) = {0.024471, -0.738962, 0, 1.0};
Point(87) = {0.028116, -0.737324, 0, 1.0};
Point(88) = {0.031171, -0.735703, 0, 1.0};
Point(89) = {0.033620, -0.734131, 0, 1.0};
Point(90) = {0.035445, -0.732648, 0, 1.0};
Point(91) = {0.036650, -0.731302, 0, 1.0};
Point(92) = {0.037233, -0.730179, 0, 1.0};
Point(93) = {0.037070, -0.729412, 0, 1.0};
Point(94) = {0.036067, -0.728934, 0, 1.0};
Point(95) = {0.034259, -0.728645, 0, 1.0};
Point(96) = {0.031673, -0.728580, 0, 1.0};
Point(97) = {0.028320, -0.728740, 0, 1.0};
Point(98) = {0.024221, -0.729118, 0, 1.0};
Point(99) = {0.019407, -0.729693, 0, 1.0};
Point(100) = {0.013920, -0.730443, 0, 1.0};
Point(101) = {0.007817, -0.731344, 0, 1.0};
Point(102) = {0.001163, -0.732371, 0, 1.0};
Point(103) = {-0.005970, -0.733497, 0, 1.0};
Point(104) = {-0.013498, -0.734693, 0, 1.0};
Point(105) = {-0.021336, -0.735934, 0, 1.0};
Point(106) = {-0.029387, -0.737194, 0, 1.0};
Point(107) = {-0.037554, -0.738448, 0, 1.0};
Point(108) = {-0.045738, -0.739676, 0, 1.0};
Point(109) = {-0.053838, -0.740857, 0, 1.0};
Point(110) = {-0.061752, -0.741975, 0, 1.0};
Point(111) = {-0.069381, -0.743014, 0, 1.0};
Point(112) = {-0.076633, -0.743962, 0, 1.0};
Point(113) = {-0.083411, -0.744808, 0, 1.0};
Point(114) = {-0.089633, -0.745547, 0, 1.0};
Point(115) = {-0.095214, -0.746170, 0, 1.0};
Point(116) = {-0.100081, -0.746680, 0, 1.0};
Point(117) = {-0.104170, -0.747077, 0, 1.0};
Point(118) = {-0.107424, -0.747370, 0, 1.0};
Point(119) = {-0.109799, -0.747563, 0, 1.0};
Point(120) = {-0.111252, -0.747661, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html