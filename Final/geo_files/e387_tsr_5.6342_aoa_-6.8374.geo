SetFactory("OpenCASCADE");

Point(1) = {0.111433, 0.747689, 0, 1.0};
Point(2) = {0.110944, 0.747696, 0, 1.0};
Point(3) = {0.109508, 0.747730, 0, 1.0};
Point(4) = {0.107185, 0.747819, 0, 1.0};
Point(5) = {0.104041, 0.747956, 0, 1.0};
Point(6) = {0.100132, 0.748123, 0, 1.0};
Point(7) = {0.095510, 0.748316, 0, 1.0};
Point(8) = {0.090234, 0.748534, 0, 1.0};
Point(9) = {0.084386, 0.748776, 0, 1.0};
Point(10) = {0.078046, 0.749034, 0, 1.0};
Point(11) = {0.071307, 0.749297, 0, 1.0};
Point(12) = {0.064259, 0.749549, 0, 1.0};
Point(13) = {0.057003, 0.749768, 0, 1.0};
Point(14) = {0.049635, 0.749933, 0, 1.0};
Point(15) = {0.042257, 0.750000, 0, 1.0};
Point(16) = {0.034947, 0.749918, 0, 1.0};
Point(17) = {0.027756, 0.749645, 0, 1.0};
Point(18) = {0.020728, 0.749160, 0, 1.0};
Point(19) = {0.013906, 0.748454, 0, 1.0};
Point(20) = {0.007329, 0.747528, 0, 1.0};
Point(21) = {0.001021, 0.746397, 0, 1.0};
Point(22) = {-0.004974, 0.745106, 0, 1.0};
Point(23) = {-0.010599, 0.743688, 0, 1.0};
Point(24) = {-0.015798, 0.742175, 0, 1.0};
Point(25) = {-0.020519, 0.740592, 0, 1.0};
Point(26) = {-0.024719, 0.738967, 0, 1.0};
Point(27) = {-0.028363, 0.737329, 0, 1.0};
Point(28) = {-0.031417, 0.735709, 0, 1.0};
Point(29) = {-0.033865, 0.734138, 0, 1.0};
Point(30) = {-0.035689, 0.732656, 0, 1.0};
Point(31) = {-0.036893, 0.731310, 0, 1.0};
Point(32) = {-0.037476, 0.730188, 0, 1.0};
Point(33) = {-0.037313, 0.729422, 0, 1.0};
Point(34) = {-0.036310, 0.728944, 0, 1.0};
Point(35) = {-0.034504, 0.728654, 0, 1.0};
Point(36) = {-0.031918, 0.728589, 0, 1.0};
Point(37) = {-0.028567, 0.728750, 0, 1.0};
Point(38) = {-0.024470, 0.729127, 0, 1.0};
Point(39) = {-0.019658, 0.729702, 0, 1.0};
Point(40) = {-0.014173, 0.730451, 0, 1.0};
Point(41) = {-0.008073, 0.731352, 0, 1.0};
Point(42) = {-0.001422, 0.732379, 0, 1.0};
Point(43) = {0.005708, 0.733504, 0, 1.0};
Point(44) = {0.013233, 0.734700, 0, 1.0};
Point(45) = {0.021067, 0.735940, 0, 1.0};
Point(46) = {0.029115, 0.737199, 0, 1.0};
Point(47) = {0.037278, 0.738453, 0, 1.0};
Point(48) = {0.045458, 0.739680, 0, 1.0};
Point(49) = {0.053555, 0.740861, 0, 1.0};
Point(50) = {0.061466, 0.741979, 0, 1.0};
Point(51) = {0.069091, 0.743017, 0, 1.0};
Point(52) = {0.076340, 0.743965, 0, 1.0};
Point(53) = {0.083115, 0.744810, 0, 1.0};
Point(54) = {0.089334, 0.745548, 0, 1.0};
Point(55) = {0.094912, 0.746172, 0, 1.0};
Point(56) = {0.099778, 0.746681, 0, 1.0};
Point(57) = {0.103865, 0.747078, 0, 1.0};
Point(58) = {0.107117, 0.747371, 0, 1.0};
Point(59) = {0.109492, 0.747564, 0, 1.0};
Point(60) = {0.110944, 0.747662, 0, 1.0};
Point(61) = {-0.111433, -0.747689, 0, 1.0};
Point(62) = {-0.110944, -0.747696, 0, 1.0};
Point(63) = {-0.109508, -0.747730, 0, 1.0};
Point(64) = {-0.107185, -0.747819, 0, 1.0};
Point(65) = {-0.104041, -0.747956, 0, 1.0};
Point(66) = {-0.100132, -0.748123, 0, 1.0};
Point(67) = {-0.095510, -0.748316, 0, 1.0};
Point(68) = {-0.090234, -0.748534, 0, 1.0};
Point(69) = {-0.084386, -0.748776, 0, 1.0};
Point(70) = {-0.078046, -0.749034, 0, 1.0};
Point(71) = {-0.071307, -0.749297, 0, 1.0};
Point(72) = {-0.064259, -0.749549, 0, 1.0};
Point(73) = {-0.057003, -0.749768, 0, 1.0};
Point(74) = {-0.049635, -0.749933, 0, 1.0};
Point(75) = {-0.042257, -0.750000, 0, 1.0};
Point(76) = {-0.034947, -0.749918, 0, 1.0};
Point(77) = {-0.027756, -0.749645, 0, 1.0};
Point(78) = {-0.020728, -0.749160, 0, 1.0};
Point(79) = {-0.013906, -0.748454, 0, 1.0};
Point(80) = {-0.007329, -0.747528, 0, 1.0};
Point(81) = {-0.001021, -0.746397, 0, 1.0};
Point(82) = {0.004974, -0.745106, 0, 1.0};
Point(83) = {0.010599, -0.743688, 0, 1.0};
Point(84) = {0.015798, -0.742175, 0, 1.0};
Point(85) = {0.020519, -0.740592, 0, 1.0};
Point(86) = {0.024719, -0.738967, 0, 1.0};
Point(87) = {0.028363, -0.737329, 0, 1.0};
Point(88) = {0.031417, -0.735709, 0, 1.0};
Point(89) = {0.033865, -0.734138, 0, 1.0};
Point(90) = {0.035689, -0.732656, 0, 1.0};
Point(91) = {0.036893, -0.731310, 0, 1.0};
Point(92) = {0.037476, -0.730188, 0, 1.0};
Point(93) = {0.037313, -0.729422, 0, 1.0};
Point(94) = {0.036310, -0.728944, 0, 1.0};
Point(95) = {0.034504, -0.728654, 0, 1.0};
Point(96) = {0.031918, -0.728589, 0, 1.0};
Point(97) = {0.028567, -0.728750, 0, 1.0};
Point(98) = {0.024470, -0.729127, 0, 1.0};
Point(99) = {0.019658, -0.729702, 0, 1.0};
Point(100) = {0.014173, -0.730451, 0, 1.0};
Point(101) = {0.008073, -0.731352, 0, 1.0};
Point(102) = {0.001422, -0.732379, 0, 1.0};
Point(103) = {-0.005708, -0.733504, 0, 1.0};
Point(104) = {-0.013233, -0.734700, 0, 1.0};
Point(105) = {-0.021067, -0.735940, 0, 1.0};
Point(106) = {-0.029115, -0.737199, 0, 1.0};
Point(107) = {-0.037278, -0.738453, 0, 1.0};
Point(108) = {-0.045458, -0.739680, 0, 1.0};
Point(109) = {-0.053555, -0.740861, 0, 1.0};
Point(110) = {-0.061466, -0.741979, 0, 1.0};
Point(111) = {-0.069091, -0.743017, 0, 1.0};
Point(112) = {-0.076340, -0.743965, 0, 1.0};
Point(113) = {-0.083115, -0.744810, 0, 1.0};
Point(114) = {-0.089334, -0.745548, 0, 1.0};
Point(115) = {-0.094912, -0.746172, 0, 1.0};
Point(116) = {-0.099778, -0.746681, 0, 1.0};
Point(117) = {-0.103865, -0.747078, 0, 1.0};
Point(118) = {-0.107117, -0.747371, 0, 1.0};
Point(119) = {-0.109492, -0.747564, 0, 1.0};
Point(120) = {-0.110944, -0.747662, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html