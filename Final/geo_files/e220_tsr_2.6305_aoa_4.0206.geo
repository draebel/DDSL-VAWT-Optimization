SetFactory("OpenCASCADE");

Point(1) = {0.112131, 0.730556, 0, 1.0};
Point(2) = {0.111592, 0.730606, 0, 1.0};
Point(3) = {0.110005, 0.730798, 0, 1.0};
Point(4) = {0.107447, 0.731195, 0, 1.0};
Point(5) = {0.104004, 0.731813, 0, 1.0};
Point(6) = {0.099753, 0.732642, 0, 1.0};
Point(7) = {0.094762, 0.733685, 0, 1.0};
Point(8) = {0.089123, 0.734946, 0, 1.0};
Point(9) = {0.082953, 0.736413, 0, 1.0};
Point(10) = {0.076366, 0.738048, 0, 1.0};
Point(11) = {0.069477, 0.739803, 0, 1.0};
Point(12) = {0.062396, 0.741617, 0, 1.0};
Point(13) = {0.055225, 0.743412, 0, 1.0};
Point(14) = {0.048053, 0.745097, 0, 1.0};
Point(15) = {0.040917, 0.746564, 0, 1.0};
Point(16) = {0.033814, 0.747765, 0, 1.0};
Point(17) = {0.026764, 0.748694, 0, 1.0};
Point(18) = {0.019793, 0.749358, 0, 1.0};
Point(19) = {0.012951, 0.749785, 0, 1.0};
Point(20) = {0.006314, 0.749998, 0, 1.0};
Point(21) = {-0.000053, 0.750000, 0, 1.0};
Point(22) = {-0.006083, 0.749804, 0, 1.0};
Point(23) = {-0.011716, 0.749417, 0, 1.0};
Point(24) = {-0.016898, 0.748852, 0, 1.0};
Point(25) = {-0.021583, 0.748122, 0, 1.0};
Point(26) = {-0.025723, 0.747250, 0, 1.0};
Point(27) = {-0.029286, 0.746255, 0, 1.0};
Point(28) = {-0.032240, 0.745166, 0, 1.0};
Point(29) = {-0.034559, 0.744017, 0, 1.0};
Point(30) = {-0.036231, 0.742850, 0, 1.0};
Point(31) = {-0.037231, 0.741734, 0, 1.0};
Point(32) = {-0.037481, 0.740813, 0, 1.0};
Point(33) = {-0.036836, 0.739989, 0, 1.0};
Point(34) = {-0.035305, 0.739102, 0, 1.0};
Point(35) = {-0.032988, 0.738216, 0, 1.0};
Point(36) = {-0.029910, 0.737362, 0, 1.0};
Point(37) = {-0.026096, 0.736551, 0, 1.0};
Point(38) = {-0.021580, 0.735790, 0, 1.0};
Point(39) = {-0.016400, 0.735085, 0, 1.0};
Point(40) = {-0.010609, 0.734430, 0, 1.0};
Point(41) = {-0.004266, 0.733826, 0, 1.0};
Point(42) = {0.002558, 0.733271, 0, 1.0};
Point(43) = {0.009790, 0.732760, 0, 1.0};
Point(44) = {0.017347, 0.732290, 0, 1.0};
Point(45) = {0.025142, 0.731860, 0, 1.0};
Point(46) = {0.033085, 0.731468, 0, 1.0};
Point(47) = {0.041083, 0.731115, 0, 1.0};
Point(48) = {0.049041, 0.730800, 0, 1.0};
Point(49) = {0.056868, 0.730525, 0, 1.0};
Point(50) = {0.064472, 0.730291, 0, 1.0};
Point(51) = {0.071763, 0.730099, 0, 1.0};
Point(52) = {0.078657, 0.729951, 0, 1.0};
Point(53) = {0.085070, 0.729852, 0, 1.0};
Point(54) = {0.090930, 0.729802, 0, 1.0};
Point(55) = {0.096163, 0.729808, 0, 1.0};
Point(56) = {0.100708, 0.729884, 0, 1.0};
Point(57) = {0.104542, 0.730050, 0, 1.0};
Point(58) = {0.107676, 0.730272, 0, 1.0};
Point(59) = {0.110068, 0.730457, 0, 1.0};
Point(60) = {0.111599, 0.730542, 0, 1.0};
Point(61) = {-0.112131, -0.730556, 0, 1.0};
Point(62) = {-0.111592, -0.730606, 0, 1.0};
Point(63) = {-0.110005, -0.730798, 0, 1.0};
Point(64) = {-0.107447, -0.731195, 0, 1.0};
Point(65) = {-0.104004, -0.731813, 0, 1.0};
Point(66) = {-0.099753, -0.732642, 0, 1.0};
Point(67) = {-0.094762, -0.733685, 0, 1.0};
Point(68) = {-0.089123, -0.734946, 0, 1.0};
Point(69) = {-0.082953, -0.736413, 0, 1.0};
Point(70) = {-0.076366, -0.738048, 0, 1.0};
Point(71) = {-0.069477, -0.739803, 0, 1.0};
Point(72) = {-0.062396, -0.741617, 0, 1.0};
Point(73) = {-0.055225, -0.743412, 0, 1.0};
Point(74) = {-0.048053, -0.745097, 0, 1.0};
Point(75) = {-0.040917, -0.746564, 0, 1.0};
Point(76) = {-0.033814, -0.747765, 0, 1.0};
Point(77) = {-0.026764, -0.748694, 0, 1.0};
Point(78) = {-0.019793, -0.749358, 0, 1.0};
Point(79) = {-0.012951, -0.749785, 0, 1.0};
Point(80) = {-0.006314, -0.749998, 0, 1.0};
Point(81) = {0.000053, -0.750000, 0, 1.0};
Point(82) = {0.006083, -0.749804, 0, 1.0};
Point(83) = {0.011716, -0.749417, 0, 1.0};
Point(84) = {0.016898, -0.748852, 0, 1.0};
Point(85) = {0.021583, -0.748122, 0, 1.0};
Point(86) = {0.025723, -0.747250, 0, 1.0};
Point(87) = {0.029286, -0.746255, 0, 1.0};
Point(88) = {0.032240, -0.745166, 0, 1.0};
Point(89) = {0.034559, -0.744017, 0, 1.0};
Point(90) = {0.036231, -0.742850, 0, 1.0};
Point(91) = {0.037231, -0.741734, 0, 1.0};
Point(92) = {0.037481, -0.740813, 0, 1.0};
Point(93) = {0.036836, -0.739989, 0, 1.0};
Point(94) = {0.035305, -0.739102, 0, 1.0};
Point(95) = {0.032988, -0.738216, 0, 1.0};
Point(96) = {0.029910, -0.737362, 0, 1.0};
Point(97) = {0.026096, -0.736551, 0, 1.0};
Point(98) = {0.021580, -0.735790, 0, 1.0};
Point(99) = {0.016400, -0.735085, 0, 1.0};
Point(100) = {0.010609, -0.734430, 0, 1.0};
Point(101) = {0.004266, -0.733826, 0, 1.0};
Point(102) = {-0.002558, -0.733271, 0, 1.0};
Point(103) = {-0.009790, -0.732760, 0, 1.0};
Point(104) = {-0.017347, -0.732290, 0, 1.0};
Point(105) = {-0.025142, -0.731860, 0, 1.0};
Point(106) = {-0.033085, -0.731468, 0, 1.0};
Point(107) = {-0.041083, -0.731115, 0, 1.0};
Point(108) = {-0.049041, -0.730800, 0, 1.0};
Point(109) = {-0.056868, -0.730525, 0, 1.0};
Point(110) = {-0.064472, -0.730291, 0, 1.0};
Point(111) = {-0.071763, -0.730099, 0, 1.0};
Point(112) = {-0.078657, -0.729951, 0, 1.0};
Point(113) = {-0.085070, -0.729852, 0, 1.0};
Point(114) = {-0.090930, -0.729802, 0, 1.0};
Point(115) = {-0.096163, -0.729808, 0, 1.0};
Point(116) = {-0.100708, -0.729884, 0, 1.0};
Point(117) = {-0.104542, -0.730050, 0, 1.0};
Point(118) = {-0.107676, -0.730272, 0, 1.0};
Point(119) = {-0.110068, -0.730457, 0, 1.0};
Point(120) = {-0.111599, -0.730542, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html