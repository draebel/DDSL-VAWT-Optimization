SetFactory("OpenCASCADE");

Point(1) = {0.112241, 0.730551, 0, 1.0};
Point(2) = {0.111702, 0.730601, 0, 1.0};
Point(3) = {0.110115, 0.730794, 0, 1.0};
Point(4) = {0.107556, 0.731190, 0, 1.0};
Point(5) = {0.104113, 0.731808, 0, 1.0};
Point(6) = {0.099860, 0.732638, 0, 1.0};
Point(7) = {0.094868, 0.733681, 0, 1.0};
Point(8) = {0.089228, 0.734942, 0, 1.0};
Point(9) = {0.083056, 0.736409, 0, 1.0};
Point(10) = {0.076467, 0.738045, 0, 1.0};
Point(11) = {0.069577, 0.739801, 0, 1.0};
Point(12) = {0.062494, 0.741615, 0, 1.0};
Point(13) = {0.055321, 0.743411, 0, 1.0};
Point(14) = {0.048148, 0.745096, 0, 1.0};
Point(15) = {0.041010, 0.746563, 0, 1.0};
Point(16) = {0.033905, 0.747765, 0, 1.0};
Point(17) = {0.026853, 0.748694, 0, 1.0};
Point(18) = {0.019880, 0.749358, 0, 1.0};
Point(19) = {0.013037, 0.749785, 0, 1.0};
Point(20) = {0.006398, 0.749998, 0, 1.0};
Point(21) = {0.000029, 0.750000, 0, 1.0};
Point(22) = {-0.006002, 0.749804, 0, 1.0};
Point(23) = {-0.011637, 0.749417, 0, 1.0};
Point(24) = {-0.016820, 0.748852, 0, 1.0};
Point(25) = {-0.021506, 0.748122, 0, 1.0};
Point(26) = {-0.025648, 0.747249, 0, 1.0};
Point(27) = {-0.029211, 0.746254, 0, 1.0};
Point(28) = {-0.032165, 0.745165, 0, 1.0};
Point(29) = {-0.034486, 0.744015, 0, 1.0};
Point(30) = {-0.036158, 0.742848, 0, 1.0};
Point(31) = {-0.037158, 0.741732, 0, 1.0};
Point(32) = {-0.037408, 0.740811, 0, 1.0};
Point(33) = {-0.036763, 0.739986, 0, 1.0};
Point(34) = {-0.035231, 0.739100, 0, 1.0};
Point(35) = {-0.032914, 0.738213, 0, 1.0};
Point(36) = {-0.029835, 0.737359, 0, 1.0};
Point(37) = {-0.026021, 0.736548, 0, 1.0};
Point(38) = {-0.021503, 0.735787, 0, 1.0};
Point(39) = {-0.016322, 0.735081, 0, 1.0};
Point(40) = {-0.010529, 0.734426, 0, 1.0};
Point(41) = {-0.004185, 0.733822, 0, 1.0};
Point(42) = {0.002641, 0.733267, 0, 1.0};
Point(43) = {0.009875, 0.732756, 0, 1.0};
Point(44) = {0.017433, 0.732286, 0, 1.0};
Point(45) = {0.025230, 0.731855, 0, 1.0};
Point(46) = {0.033176, 0.731464, 0, 1.0};
Point(47) = {0.041175, 0.731111, 0, 1.0};
Point(48) = {0.049135, 0.730795, 0, 1.0};
Point(49) = {0.056964, 0.730520, 0, 1.0};
Point(50) = {0.064570, 0.730286, 0, 1.0};
Point(51) = {0.071864, 0.730094, 0, 1.0};
Point(52) = {0.078759, 0.729946, 0, 1.0};
Point(53) = {0.085174, 0.729847, 0, 1.0};
Point(54) = {0.091035, 0.729797, 0, 1.0};
Point(55) = {0.096269, 0.729803, 0, 1.0};
Point(56) = {0.100816, 0.729879, 0, 1.0};
Point(57) = {0.104651, 0.730045, 0, 1.0};
Point(58) = {0.107786, 0.730267, 0, 1.0};
Point(59) = {0.110178, 0.730452, 0, 1.0};
Point(60) = {0.111709, 0.730537, 0, 1.0};
Point(61) = {-0.112241, -0.730551, 0, 1.0};
Point(62) = {-0.111702, -0.730601, 0, 1.0};
Point(63) = {-0.110115, -0.730794, 0, 1.0};
Point(64) = {-0.107556, -0.731190, 0, 1.0};
Point(65) = {-0.104113, -0.731808, 0, 1.0};
Point(66) = {-0.099860, -0.732638, 0, 1.0};
Point(67) = {-0.094868, -0.733681, 0, 1.0};
Point(68) = {-0.089228, -0.734942, 0, 1.0};
Point(69) = {-0.083056, -0.736409, 0, 1.0};
Point(70) = {-0.076467, -0.738045, 0, 1.0};
Point(71) = {-0.069577, -0.739801, 0, 1.0};
Point(72) = {-0.062494, -0.741615, 0, 1.0};
Point(73) = {-0.055321, -0.743411, 0, 1.0};
Point(74) = {-0.048148, -0.745096, 0, 1.0};
Point(75) = {-0.041010, -0.746563, 0, 1.0};
Point(76) = {-0.033905, -0.747765, 0, 1.0};
Point(77) = {-0.026853, -0.748694, 0, 1.0};
Point(78) = {-0.019880, -0.749358, 0, 1.0};
Point(79) = {-0.013037, -0.749785, 0, 1.0};
Point(80) = {-0.006398, -0.749998, 0, 1.0};
Point(81) = {-0.000029, -0.750000, 0, 1.0};
Point(82) = {0.006002, -0.749804, 0, 1.0};
Point(83) = {0.011637, -0.749417, 0, 1.0};
Point(84) = {0.016820, -0.748852, 0, 1.0};
Point(85) = {0.021506, -0.748122, 0, 1.0};
Point(86) = {0.025648, -0.747249, 0, 1.0};
Point(87) = {0.029211, -0.746254, 0, 1.0};
Point(88) = {0.032165, -0.745165, 0, 1.0};
Point(89) = {0.034486, -0.744015, 0, 1.0};
Point(90) = {0.036158, -0.742848, 0, 1.0};
Point(91) = {0.037158, -0.741732, 0, 1.0};
Point(92) = {0.037408, -0.740811, 0, 1.0};
Point(93) = {0.036763, -0.739986, 0, 1.0};
Point(94) = {0.035231, -0.739100, 0, 1.0};
Point(95) = {0.032914, -0.738213, 0, 1.0};
Point(96) = {0.029835, -0.737359, 0, 1.0};
Point(97) = {0.026021, -0.736548, 0, 1.0};
Point(98) = {0.021503, -0.735787, 0, 1.0};
Point(99) = {0.016322, -0.735081, 0, 1.0};
Point(100) = {0.010529, -0.734426, 0, 1.0};
Point(101) = {0.004185, -0.733822, 0, 1.0};
Point(102) = {-0.002641, -0.733267, 0, 1.0};
Point(103) = {-0.009875, -0.732756, 0, 1.0};
Point(104) = {-0.017433, -0.732286, 0, 1.0};
Point(105) = {-0.025230, -0.731855, 0, 1.0};
Point(106) = {-0.033176, -0.731464, 0, 1.0};
Point(107) = {-0.041175, -0.731111, 0, 1.0};
Point(108) = {-0.049135, -0.730795, 0, 1.0};
Point(109) = {-0.056964, -0.730520, 0, 1.0};
Point(110) = {-0.064570, -0.730286, 0, 1.0};
Point(111) = {-0.071864, -0.730094, 0, 1.0};
Point(112) = {-0.078759, -0.729946, 0, 1.0};
Point(113) = {-0.085174, -0.729847, 0, 1.0};
Point(114) = {-0.091035, -0.729797, 0, 1.0};
Point(115) = {-0.096269, -0.729803, 0, 1.0};
Point(116) = {-0.100816, -0.729879, 0, 1.0};
Point(117) = {-0.104651, -0.730045, 0, 1.0};
Point(118) = {-0.107786, -0.730267, 0, 1.0};
Point(119) = {-0.110178, -0.730452, 0, 1.0};
Point(120) = {-0.111709, -0.730537, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html