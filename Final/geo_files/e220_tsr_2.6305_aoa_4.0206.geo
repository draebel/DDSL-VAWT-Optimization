SetFactory("OpenCASCADE");

Point(1) = {0.074754, 0.737037, 0, 1.0};
Point(2) = {0.074394, 0.737070, 0, 1.0};
Point(3) = {0.073337, 0.737199, 0, 1.0};
Point(4) = {0.071631, 0.737463, 0, 1.0};
Point(5) = {0.069336, 0.737875, 0, 1.0};
Point(6) = {0.066502, 0.738428, 0, 1.0};
Point(7) = {0.063175, 0.739123, 0, 1.0};
Point(8) = {0.059415, 0.739964, 0, 1.0};
Point(9) = {0.055302, 0.740942, 0, 1.0};
Point(10) = {0.050910, 0.742032, 0, 1.0};
Point(11) = {0.046318, 0.743202, 0, 1.0};
Point(12) = {0.041597, 0.744411, 0, 1.0};
Point(13) = {0.036816, 0.745608, 0, 1.0};
Point(14) = {0.032035, 0.746731, 0, 1.0};
Point(15) = {0.027278, 0.747709, 0, 1.0};
Point(16) = {0.022543, 0.748510, 0, 1.0};
Point(17) = {0.017843, 0.749129, 0, 1.0};
Point(18) = {0.013195, 0.749572, 0, 1.0};
Point(19) = {0.008634, 0.749857, 0, 1.0};
Point(20) = {0.004209, 0.749998, 0, 1.0};
Point(21) = {-0.000035, 0.750000, 0, 1.0};
Point(22) = {-0.004055, 0.749870, 0, 1.0};
Point(23) = {-0.007811, 0.749611, 0, 1.0};
Point(24) = {-0.011266, 0.749235, 0, 1.0};
Point(25) = {-0.014388, 0.748748, 0, 1.0};
Point(26) = {-0.017149, 0.748166, 0, 1.0};
Point(27) = {-0.019524, 0.747503, 0, 1.0};
Point(28) = {-0.021493, 0.746778, 0, 1.0};
Point(29) = {-0.023040, 0.746011, 0, 1.0};
Point(30) = {-0.024154, 0.745233, 0, 1.0};
Point(31) = {-0.024821, 0.744489, 0, 1.0};
Point(32) = {-0.024987, 0.743875, 0, 1.0};
Point(33) = {-0.024558, 0.743326, 0, 1.0};
Point(34) = {-0.023537, 0.742735, 0, 1.0};
Point(35) = {-0.021992, 0.742144, 0, 1.0};
Point(36) = {-0.019940, 0.741575, 0, 1.0};
Point(37) = {-0.017398, 0.741034, 0, 1.0};
Point(38) = {-0.014387, 0.740527, 0, 1.0};
Point(39) = {-0.010933, 0.740057, 0, 1.0};
Point(40) = {-0.007072, 0.739620, 0, 1.0};
Point(41) = {-0.002844, 0.739217, 0, 1.0};
Point(42) = {0.001705, 0.738848, 0, 1.0};
Point(43) = {0.006527, 0.738507, 0, 1.0};
Point(44) = {0.011564, 0.738194, 0, 1.0};
Point(45) = {0.016761, 0.737907, 0, 1.0};
Point(46) = {0.022057, 0.737646, 0, 1.0};
Point(47) = {0.027388, 0.737410, 0, 1.0};
Point(48) = {0.032694, 0.737200, 0, 1.0};
Point(49) = {0.037912, 0.737016, 0, 1.0};
Point(50) = {0.042981, 0.736861, 0, 1.0};
Point(51) = {0.047842, 0.736732, 0, 1.0};
Point(52) = {0.052438, 0.736634, 0, 1.0};
Point(53) = {0.056714, 0.736568, 0, 1.0};
Point(54) = {0.060620, 0.736535, 0, 1.0};
Point(55) = {0.064109, 0.736538, 0, 1.0};
Point(56) = {0.067139, 0.736589, 0, 1.0};
Point(57) = {0.069695, 0.736700, 0, 1.0};
Point(58) = {0.071784, 0.736848, 0, 1.0};
Point(59) = {0.073379, 0.736971, 0, 1.0};
Point(60) = {0.074399, 0.737028, 0, 1.0};
Point(61) = {-0.074754, -0.737037, 0, 1.0};
Point(62) = {-0.074394, -0.737070, 0, 1.0};
Point(63) = {-0.073337, -0.737199, 0, 1.0};
Point(64) = {-0.071631, -0.737463, 0, 1.0};
Point(65) = {-0.069336, -0.737875, 0, 1.0};
Point(66) = {-0.066502, -0.738428, 0, 1.0};
Point(67) = {-0.063175, -0.739123, 0, 1.0};
Point(68) = {-0.059415, -0.739964, 0, 1.0};
Point(69) = {-0.055302, -0.740942, 0, 1.0};
Point(70) = {-0.050910, -0.742032, 0, 1.0};
Point(71) = {-0.046318, -0.743202, 0, 1.0};
Point(72) = {-0.041597, -0.744411, 0, 1.0};
Point(73) = {-0.036816, -0.745608, 0, 1.0};
Point(74) = {-0.032035, -0.746731, 0, 1.0};
Point(75) = {-0.027278, -0.747709, 0, 1.0};
Point(76) = {-0.022543, -0.748510, 0, 1.0};
Point(77) = {-0.017843, -0.749129, 0, 1.0};
Point(78) = {-0.013195, -0.749572, 0, 1.0};
Point(79) = {-0.008634, -0.749857, 0, 1.0};
Point(80) = {-0.004209, -0.749998, 0, 1.0};
Point(81) = {0.000035, -0.750000, 0, 1.0};
Point(82) = {0.004055, -0.749870, 0, 1.0};
Point(83) = {0.007811, -0.749611, 0, 1.0};
Point(84) = {0.011266, -0.749235, 0, 1.0};
Point(85) = {0.014388, -0.748748, 0, 1.0};
Point(86) = {0.017149, -0.748166, 0, 1.0};
Point(87) = {0.019524, -0.747503, 0, 1.0};
Point(88) = {0.021493, -0.746778, 0, 1.0};
Point(89) = {0.023040, -0.746011, 0, 1.0};
Point(90) = {0.024154, -0.745233, 0, 1.0};
Point(91) = {0.024821, -0.744489, 0, 1.0};
Point(92) = {0.024987, -0.743875, 0, 1.0};
Point(93) = {0.024558, -0.743326, 0, 1.0};
Point(94) = {0.023537, -0.742735, 0, 1.0};
Point(95) = {0.021992, -0.742144, 0, 1.0};
Point(96) = {0.019940, -0.741575, 0, 1.0};
Point(97) = {0.017398, -0.741034, 0, 1.0};
Point(98) = {0.014387, -0.740527, 0, 1.0};
Point(99) = {0.010933, -0.740057, 0, 1.0};
Point(100) = {0.007072, -0.739620, 0, 1.0};
Point(101) = {0.002844, -0.739217, 0, 1.0};
Point(102) = {-0.001705, -0.738848, 0, 1.0};
Point(103) = {-0.006527, -0.738507, 0, 1.0};
Point(104) = {-0.011564, -0.738194, 0, 1.0};
Point(105) = {-0.016761, -0.737907, 0, 1.0};
Point(106) = {-0.022057, -0.737646, 0, 1.0};
Point(107) = {-0.027388, -0.737410, 0, 1.0};
Point(108) = {-0.032694, -0.737200, 0, 1.0};
Point(109) = {-0.037912, -0.737016, 0, 1.0};
Point(110) = {-0.042981, -0.736861, 0, 1.0};
Point(111) = {-0.047842, -0.736732, 0, 1.0};
Point(112) = {-0.052438, -0.736634, 0, 1.0};
Point(113) = {-0.056714, -0.736568, 0, 1.0};
Point(114) = {-0.060620, -0.736535, 0, 1.0};
Point(115) = {-0.064109, -0.736538, 0, 1.0};
Point(116) = {-0.067139, -0.736589, 0, 1.0};
Point(117) = {-0.069695, -0.736700, 0, 1.0};
Point(118) = {-0.071784, -0.736848, 0, 1.0};
Point(119) = {-0.073379, -0.736971, 0, 1.0};
Point(120) = {-0.074399, -0.737028, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html