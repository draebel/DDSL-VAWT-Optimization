SetFactory("OpenCASCADE");

Point(1) = {0.073915, 0.746495, 0, 1.0};
Point(2) = {0.073551, 0.746563, 0, 1.0};
Point(3) = {0.069349, 0.747299, 0, 1.0};
Point(4) = {0.064484, 0.747939, 0, 1.0};
Point(5) = {0.058907, 0.748461, 0, 1.0};
Point(6) = {0.052676, 0.748913, 0, 1.0};
Point(7) = {0.045884, 0.749303, 0, 1.0};
Point(8) = {0.038631, 0.749623, 0, 1.0};
Point(9) = {0.031017, 0.749860, 0, 1.0};
Point(10) = {0.023145, 0.749993, 0, 1.0};
Point(11) = {0.015116, 0.750000, 0, 1.0};
Point(12) = {0.007028, 0.749857, 0, 1.0};
Point(13) = {-0.001027, 0.749540, 0, 1.0};
Point(14) = {-0.008961, 0.749026, 0, 1.0};
Point(15) = {-0.016695, 0.748295, 0, 1.0};
Point(16) = {-0.024154, 0.747330, 0, 1.0};
Point(17) = {-0.031271, 0.746117, 0, 1.0};
Point(18) = {-0.037993, 0.744631, 0, 1.0};
Point(19) = {-0.044327, 0.742889, 0, 1.0};
Point(20) = {-0.050221, 0.740959, 0, 1.0};
Point(21) = {-0.055607, 0.738883, 0, 1.0};
Point(22) = {-0.060425, 0.736698, 0, 1.0};
Point(23) = {-0.064616, 0.734439, 0, 1.0};
Point(24) = {-0.068135, 0.732137, 0, 1.0};
Point(25) = {-0.070922, 0.729827, 0, 1.0};
Point(26) = {-0.072958, 0.727540, 0, 1.0};
Point(27) = {-0.074005, 0.725767, 0, 1.0};
Point(28) = {-0.074163, 0.725362, 0, 1.0};
Point(29) = {-0.074205, 0.725239, 0, 1.0};
Point(30) = {-0.074333, 0.724726, 0, 1.0};
Point(31) = {-0.074373, 0.724202, 0, 1.0};
Point(32) = {-0.074348, 0.723651, 0, 1.0};
Point(33) = {-0.074293, 0.723215, 0, 1.0};
Point(34) = {-0.073560, 0.720787, 0, 1.0};
Point(35) = {-0.072167, 0.718204, 0, 1.0};
Point(36) = {-0.070213, 0.715546, 0, 1.0};
Point(37) = {-0.067790, 0.712944, 0, 1.0};
Point(38) = {-0.064935, 0.710488, 0, 1.0};
Point(39) = {-0.061711, 0.708286, 0, 1.0};
Point(40) = {-0.058161, 0.706442, 0, 1.0};
Point(41) = {-0.054311, 0.705121, 0, 1.0};
Point(42) = {-0.050070, 0.704370, 0, 1.0};
Point(43) = {-0.045495, 0.704279, 0, 1.0};
Point(44) = {-0.040429, 0.704897, 0, 1.0};
Point(45) = {-0.034864, 0.706139, 0, 1.0};
Point(46) = {-0.028815, 0.707968, 0, 1.0};
Point(47) = {-0.022292, 0.710340, 0, 1.0};
Point(48) = {-0.015310, 0.713196, 0, 1.0};
Point(49) = {-0.007887, 0.716454, 0, 1.0};
Point(50) = {-0.000057, 0.720011, 0, 1.0};
Point(51) = {0.008128, 0.723747, 0, 1.0};
Point(52) = {0.016590, 0.727524, 0, 1.0};
Point(53) = {0.025226, 0.731201, 0, 1.0};
Point(54) = {0.033898, 0.734636, 0, 1.0};
Point(55) = {0.042440, 0.737700, 0, 1.0};
Point(56) = {0.050658, 0.740290, 0, 1.0};
Point(57) = {0.058342, 0.742335, 0, 1.0};
Point(58) = {0.065274, 0.743810, 0, 1.0};
Point(59) = {0.071246, 0.744730, 0, 1.0};
Point(60) = {0.074117, 0.745030, 0, 1.0};
Point(61) = {-0.073915, -0.746495, 0, 1.0};
Point(62) = {-0.073551, -0.746563, 0, 1.0};
Point(63) = {-0.069349, -0.747299, 0, 1.0};
Point(64) = {-0.064484, -0.747939, 0, 1.0};
Point(65) = {-0.058907, -0.748461, 0, 1.0};
Point(66) = {-0.052676, -0.748913, 0, 1.0};
Point(67) = {-0.045884, -0.749303, 0, 1.0};
Point(68) = {-0.038631, -0.749623, 0, 1.0};
Point(69) = {-0.031017, -0.749860, 0, 1.0};
Point(70) = {-0.023145, -0.749993, 0, 1.0};
Point(71) = {-0.015116, -0.750000, 0, 1.0};
Point(72) = {-0.007028, -0.749857, 0, 1.0};
Point(73) = {0.001027, -0.749540, 0, 1.0};
Point(74) = {0.008961, -0.749026, 0, 1.0};
Point(75) = {0.016695, -0.748295, 0, 1.0};
Point(76) = {0.024154, -0.747330, 0, 1.0};
Point(77) = {0.031271, -0.746117, 0, 1.0};
Point(78) = {0.037993, -0.744631, 0, 1.0};
Point(79) = {0.044327, -0.742889, 0, 1.0};
Point(80) = {0.050221, -0.740959, 0, 1.0};
Point(81) = {0.055607, -0.738883, 0, 1.0};
Point(82) = {0.060425, -0.736698, 0, 1.0};
Point(83) = {0.064616, -0.734439, 0, 1.0};
Point(84) = {0.068135, -0.732137, 0, 1.0};
Point(85) = {0.070922, -0.729827, 0, 1.0};
Point(86) = {0.072958, -0.727540, 0, 1.0};
Point(87) = {0.074005, -0.725767, 0, 1.0};
Point(88) = {0.074163, -0.725362, 0, 1.0};
Point(89) = {0.074205, -0.725239, 0, 1.0};
Point(90) = {0.074333, -0.724726, 0, 1.0};
Point(91) = {0.074373, -0.724202, 0, 1.0};
Point(92) = {0.074348, -0.723651, 0, 1.0};
Point(93) = {0.074293, -0.723215, 0, 1.0};
Point(94) = {0.073560, -0.720787, 0, 1.0};
Point(95) = {0.072167, -0.718204, 0, 1.0};
Point(96) = {0.070213, -0.715546, 0, 1.0};
Point(97) = {0.067790, -0.712944, 0, 1.0};
Point(98) = {0.064935, -0.710488, 0, 1.0};
Point(99) = {0.061711, -0.708286, 0, 1.0};
Point(100) = {0.058161, -0.706442, 0, 1.0};
Point(101) = {0.054311, -0.705121, 0, 1.0};
Point(102) = {0.050070, -0.704370, 0, 1.0};
Point(103) = {0.045495, -0.704279, 0, 1.0};
Point(104) = {0.040429, -0.704897, 0, 1.0};
Point(105) = {0.034864, -0.706139, 0, 1.0};
Point(106) = {0.028815, -0.707968, 0, 1.0};
Point(107) = {0.022292, -0.710340, 0, 1.0};
Point(108) = {0.015310, -0.713196, 0, 1.0};
Point(109) = {0.007887, -0.716454, 0, 1.0};
Point(110) = {0.000057, -0.720011, 0, 1.0};
Point(111) = {-0.008128, -0.723747, 0, 1.0};
Point(112) = {-0.016590, -0.727524, 0, 1.0};
Point(113) = {-0.025226, -0.731201, 0, 1.0};
Point(114) = {-0.033898, -0.734636, 0, 1.0};
Point(115) = {-0.042440, -0.737700, 0, 1.0};
Point(116) = {-0.050658, -0.740290, 0, 1.0};
Point(117) = {-0.058342, -0.742335, 0, 1.0};
Point(118) = {-0.065274, -0.743810, 0, 1.0};
Point(119) = {-0.071246, -0.744730, 0, 1.0};
Point(120) = {-0.074117, -0.745030, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:45};
Spline(3) = {45:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:78};
Spline(6) = {78:105};
Spline(7) = {105:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {36.00000000, 15.00000000, 0, 1.0};
Point(124) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 35 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html