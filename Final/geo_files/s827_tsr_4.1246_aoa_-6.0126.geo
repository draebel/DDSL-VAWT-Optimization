SetFactory("OpenCASCADE");

Point(1) = {0.148900, 0.736172, 0, 1.0};
Point(2) = {0.148063, 0.736222, 0, 1.0};
Point(3) = {0.145643, 0.736525, 0, 1.0};
Point(4) = {0.141876, 0.737219, 0, 1.0};
Point(5) = {0.137028, 0.738292, 0, 1.0};
Point(6) = {0.131300, 0.739635, 0, 1.0};
Point(7) = {0.124804, 0.741115, 0, 1.0};
Point(8) = {0.117594, 0.742679, 0, 1.0};
Point(9) = {0.109809, 0.744307, 0, 1.0};
Point(10) = {0.101602, 0.745923, 0, 1.0};
Point(11) = {0.093107, 0.747430, 0, 1.0};
Point(12) = {0.084444, 0.748716, 0, 1.0};
Point(13) = {0.075720, 0.749651, 0, 1.0};
Point(14) = {0.066975, 0.750000, 0, 1.0};
Point(15) = {0.057969, 0.749748, 0, 1.0};
Point(16) = {0.048756, 0.749065, 0, 1.0};
Point(17) = {0.039438, 0.748014, 0, 1.0};
Point(18) = {0.030120, 0.746640, 0, 1.0};
Point(19) = {0.020899, 0.744981, 0, 1.0};
Point(20) = {0.011878, 0.743073, 0, 1.0};
Point(21) = {0.003153, 0.740954, 0, 1.0};
Point(22) = {-0.005178, 0.738663, 0, 1.0};
Point(23) = {-0.013027, 0.736235, 0, 1.0};
Point(24) = {-0.020303, 0.733711, 0, 1.0};
Point(25) = {-0.026930, 0.731129, 0, 1.0};
Point(26) = {-0.032832, 0.728531, 0, 1.0};
Point(27) = {-0.037945, 0.725958, 0, 1.0};
Point(28) = {-0.042214, 0.723457, 0, 1.0};
Point(29) = {-0.045586, 0.721071, 0, 1.0};
Point(30) = {-0.048035, 0.718854, 0, 1.0};
Point(31) = {-0.049517, 0.716887, 0, 1.0};
Point(32) = {-0.049970, 0.715704, 0, 1.0};
Point(33) = {-0.050006, 0.715350, 0, 1.0};
Point(34) = {-0.050005, 0.715293, 0, 1.0};
Point(35) = {-0.049996, 0.715190, 0, 1.0};
Point(36) = {-0.049962, 0.715046, 0, 1.0};
Point(37) = {-0.049894, 0.714913, 0, 1.0};
Point(38) = {-0.049797, 0.714778, 0, 1.0};
Point(39) = {-0.049529, 0.714504, 0, 1.0};
Point(40) = {-0.049106, 0.714180, 0, 1.0};
Point(41) = {-0.046872, 0.713087, 0, 1.0};
Point(42) = {-0.043499, 0.712078, 0, 1.0};
Point(43) = {-0.039014, 0.711167, 0, 1.0};
Point(44) = {-0.033489, 0.710333, 0, 1.0};
Point(45) = {-0.026999, 0.709561, 0, 1.0};
Point(46) = {-0.019640, 0.708804, 0, 1.0};
Point(47) = {-0.011568, 0.708049, 0, 1.0};
Point(48) = {-0.002912, 0.707260, 0, 1.0};
Point(49) = {0.006081, 0.706459, 0, 1.0};
Point(50) = {0.015237, 0.705640, 0, 1.0};
Point(51) = {0.024130, 0.705003, 0, 1.0};
Point(52) = {0.032724, 0.705012, 0, 1.0};
Point(53) = {0.041314, 0.705778, 0, 1.0};
Point(54) = {0.049869, 0.707318, 0, 1.0};
Point(55) = {0.058662, 0.709628, 0, 1.0};
Point(56) = {0.067708, 0.712442, 0, 1.0};
Point(57) = {0.076938, 0.715590, 0, 1.0};
Point(58) = {0.086263, 0.718914, 0, 1.0};
Point(59) = {0.095573, 0.722257, 0, 1.0};
Point(60) = {0.104729, 0.725466, 0, 1.0};
Point(61) = {0.113565, 0.728397, 0, 1.0};
Point(62) = {0.121889, 0.730927, 0, 1.0};
Point(63) = {0.129481, 0.732962, 0, 1.0};
Point(64) = {0.136107, 0.734458, 0, 1.0};
Point(65) = {0.141538, 0.735432, 0, 1.0};
Point(66) = {0.145574, 0.735955, 0, 1.0};
Point(67) = {0.148060, 0.736148, 0, 1.0};
Point(68) = {-0.148900, -0.736172, 0, 1.0};
Point(69) = {-0.148063, -0.736222, 0, 1.0};
Point(70) = {-0.145643, -0.736525, 0, 1.0};
Point(71) = {-0.141876, -0.737219, 0, 1.0};
Point(72) = {-0.137028, -0.738292, 0, 1.0};
Point(73) = {-0.131300, -0.739635, 0, 1.0};
Point(74) = {-0.124804, -0.741115, 0, 1.0};
Point(75) = {-0.117594, -0.742679, 0, 1.0};
Point(76) = {-0.109809, -0.744307, 0, 1.0};
Point(77) = {-0.101602, -0.745923, 0, 1.0};
Point(78) = {-0.093107, -0.747430, 0, 1.0};
Point(79) = {-0.084444, -0.748716, 0, 1.0};
Point(80) = {-0.075720, -0.749651, 0, 1.0};
Point(81) = {-0.066975, -0.750000, 0, 1.0};
Point(82) = {-0.057969, -0.749748, 0, 1.0};
Point(83) = {-0.048756, -0.749065, 0, 1.0};
Point(84) = {-0.039438, -0.748014, 0, 1.0};
Point(85) = {-0.030120, -0.746640, 0, 1.0};
Point(86) = {-0.020899, -0.744981, 0, 1.0};
Point(87) = {-0.011878, -0.743073, 0, 1.0};
Point(88) = {-0.003153, -0.740954, 0, 1.0};
Point(89) = {0.005178, -0.738663, 0, 1.0};
Point(90) = {0.013027, -0.736235, 0, 1.0};
Point(91) = {0.020303, -0.733711, 0, 1.0};
Point(92) = {0.026930, -0.731129, 0, 1.0};
Point(93) = {0.032832, -0.728531, 0, 1.0};
Point(94) = {0.037945, -0.725958, 0, 1.0};
Point(95) = {0.042214, -0.723457, 0, 1.0};
Point(96) = {0.045586, -0.721071, 0, 1.0};
Point(97) = {0.048035, -0.718854, 0, 1.0};
Point(98) = {0.049517, -0.716887, 0, 1.0};
Point(99) = {0.049970, -0.715704, 0, 1.0};
Point(100) = {0.050006, -0.715350, 0, 1.0};
Point(101) = {0.050005, -0.715293, 0, 1.0};
Point(102) = {0.049996, -0.715190, 0, 1.0};
Point(103) = {0.049962, -0.715046, 0, 1.0};
Point(104) = {0.049894, -0.714913, 0, 1.0};
Point(105) = {0.049797, -0.714778, 0, 1.0};
Point(106) = {0.049529, -0.714504, 0, 1.0};
Point(107) = {0.049106, -0.714180, 0, 1.0};
Point(108) = {0.046872, -0.713087, 0, 1.0};
Point(109) = {0.043499, -0.712078, 0, 1.0};
Point(110) = {0.039014, -0.711167, 0, 1.0};
Point(111) = {0.033489, -0.710333, 0, 1.0};
Point(112) = {0.026999, -0.709561, 0, 1.0};
Point(113) = {0.019640, -0.708804, 0, 1.0};
Point(114) = {0.011568, -0.708049, 0, 1.0};
Point(115) = {0.002912, -0.707260, 0, 1.0};
Point(116) = {-0.006081, -0.706459, 0, 1.0};
Point(117) = {-0.015237, -0.705640, 0, 1.0};
Point(118) = {-0.024130, -0.705003, 0, 1.0};
Point(119) = {-0.032724, -0.705012, 0, 1.0};
Point(120) = {-0.041314, -0.705778, 0, 1.0};
Point(121) = {-0.049869, -0.707318, 0, 1.0};
Point(122) = {-0.058662, -0.709628, 0, 1.0};
Point(123) = {-0.067708, -0.712442, 0, 1.0};
Point(124) = {-0.076938, -0.715590, 0, 1.0};
Point(125) = {-0.086263, -0.718914, 0, 1.0};
Point(126) = {-0.095573, -0.722257, 0, 1.0};
Point(127) = {-0.104729, -0.725466, 0, 1.0};
Point(128) = {-0.113565, -0.728397, 0, 1.0};
Point(129) = {-0.121889, -0.730927, 0, 1.0};
Point(130) = {-0.129481, -0.732962, 0, 1.0};
Point(131) = {-0.136107, -0.734458, 0, 1.0};
Point(132) = {-0.141538, -0.735432, 0, 1.0};
Point(133) = {-0.145574, -0.735955, 0, 1.0};
Point(134) = {-0.148060, -0.736148, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html