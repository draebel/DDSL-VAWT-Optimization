SetFactory("OpenCASCADE");

Point(1) = {0.111879, 0.739629, 0, 1.0};
Point(2) = {0.111251, 0.739667, 0, 1.0};
Point(3) = {0.109436, 0.739894, 0, 1.0};
Point(4) = {0.106611, 0.740414, 0, 1.0};
Point(5) = {0.102974, 0.741219, 0, 1.0};
Point(6) = {0.098679, 0.742227, 0, 1.0};
Point(7) = {0.093807, 0.743336, 0, 1.0};
Point(8) = {0.088399, 0.744509, 0, 1.0};
Point(9) = {0.082561, 0.745730, 0, 1.0};
Point(10) = {0.076405, 0.746942, 0, 1.0};
Point(11) = {0.070034, 0.748072, 0, 1.0};
Point(12) = {0.063536, 0.749037, 0, 1.0};
Point(13) = {0.056993, 0.749738, 0, 1.0};
Point(14) = {0.050435, 0.750000, 0, 1.0};
Point(15) = {0.043680, 0.749811, 0, 1.0};
Point(16) = {0.036770, 0.749299, 0, 1.0};
Point(17) = {0.029782, 0.748511, 0, 1.0};
Point(18) = {0.022793, 0.747480, 0, 1.0};
Point(19) = {0.015878, 0.746236, 0, 1.0};
Point(20) = {0.009112, 0.744805, 0, 1.0};
Point(21) = {0.002568, 0.743216, 0, 1.0};
Point(22) = {-0.003681, 0.741497, 0, 1.0};
Point(23) = {-0.009567, 0.739676, 0, 1.0};
Point(24) = {-0.015024, 0.737783, 0, 1.0};
Point(25) = {-0.019994, 0.735847, 0, 1.0};
Point(26) = {-0.024421, 0.733898, 0, 1.0};
Point(27) = {-0.028256, 0.731969, 0, 1.0};
Point(28) = {-0.031457, 0.730093, 0, 1.0};
Point(29) = {-0.033986, 0.728303, 0, 1.0};
Point(30) = {-0.035823, 0.726641, 0, 1.0};
Point(31) = {-0.036934, 0.725165, 0, 1.0};
Point(32) = {-0.037275, 0.724278, 0, 1.0};
Point(33) = {-0.037301, 0.724012, 0, 1.0};
Point(34) = {-0.037300, 0.723970, 0, 1.0};
Point(35) = {-0.037294, 0.723892, 0, 1.0};
Point(36) = {-0.037268, 0.723785, 0, 1.0};
Point(37) = {-0.037218, 0.723684, 0, 1.0};
Point(38) = {-0.037144, 0.723583, 0, 1.0};
Point(39) = {-0.036944, 0.723378, 0, 1.0};
Point(40) = {-0.036626, 0.723135, 0, 1.0};
Point(41) = {-0.034950, 0.722315, 0, 1.0};
Point(42) = {-0.032421, 0.721558, 0, 1.0};
Point(43) = {-0.029057, 0.720875, 0, 1.0};
Point(44) = {-0.024914, 0.720250, 0, 1.0};
Point(45) = {-0.020046, 0.719670, 0, 1.0};
Point(46) = {-0.014527, 0.719103, 0, 1.0};
Point(47) = {-0.008472, 0.718537, 0, 1.0};
Point(48) = {-0.001980, 0.717945, 0, 1.0};
Point(49) = {0.004764, 0.717344, 0, 1.0};
Point(50) = {0.011631, 0.716730, 0, 1.0};
Point(51) = {0.018301, 0.716252, 0, 1.0};
Point(52) = {0.024747, 0.716259, 0, 1.0};
Point(53) = {0.031189, 0.716834, 0, 1.0};
Point(54) = {0.037605, 0.717989, 0, 1.0};
Point(55) = {0.044200, 0.719721, 0, 1.0};
Point(56) = {0.050984, 0.721832, 0, 1.0};
Point(57) = {0.057907, 0.724193, 0, 1.0};
Point(58) = {0.064901, 0.726686, 0, 1.0};
Point(59) = {0.071883, 0.729193, 0, 1.0};
Point(60) = {0.078750, 0.731600, 0, 1.0};
Point(61) = {0.085378, 0.733798, 0, 1.0};
Point(62) = {0.091620, 0.735695, 0, 1.0};
Point(63) = {0.097315, 0.737221, 0, 1.0};
Point(64) = {0.102284, 0.738344, 0, 1.0};
Point(65) = {0.106357, 0.739074, 0, 1.0};
Point(66) = {0.109384, 0.739466, 0, 1.0};
Point(67) = {0.111249, 0.739611, 0, 1.0};
Point(68) = {-0.111879, -0.739629, 0, 1.0};
Point(69) = {-0.111251, -0.739667, 0, 1.0};
Point(70) = {-0.109436, -0.739894, 0, 1.0};
Point(71) = {-0.106611, -0.740414, 0, 1.0};
Point(72) = {-0.102974, -0.741219, 0, 1.0};
Point(73) = {-0.098679, -0.742227, 0, 1.0};
Point(74) = {-0.093807, -0.743336, 0, 1.0};
Point(75) = {-0.088399, -0.744509, 0, 1.0};
Point(76) = {-0.082561, -0.745730, 0, 1.0};
Point(77) = {-0.076405, -0.746942, 0, 1.0};
Point(78) = {-0.070034, -0.748072, 0, 1.0};
Point(79) = {-0.063536, -0.749037, 0, 1.0};
Point(80) = {-0.056993, -0.749738, 0, 1.0};
Point(81) = {-0.050435, -0.750000, 0, 1.0};
Point(82) = {-0.043680, -0.749811, 0, 1.0};
Point(83) = {-0.036770, -0.749299, 0, 1.0};
Point(84) = {-0.029782, -0.748511, 0, 1.0};
Point(85) = {-0.022793, -0.747480, 0, 1.0};
Point(86) = {-0.015878, -0.746236, 0, 1.0};
Point(87) = {-0.009112, -0.744805, 0, 1.0};
Point(88) = {-0.002568, -0.743216, 0, 1.0};
Point(89) = {0.003681, -0.741497, 0, 1.0};
Point(90) = {0.009567, -0.739676, 0, 1.0};
Point(91) = {0.015024, -0.737783, 0, 1.0};
Point(92) = {0.019994, -0.735847, 0, 1.0};
Point(93) = {0.024421, -0.733898, 0, 1.0};
Point(94) = {0.028256, -0.731969, 0, 1.0};
Point(95) = {0.031457, -0.730093, 0, 1.0};
Point(96) = {0.033986, -0.728303, 0, 1.0};
Point(97) = {0.035823, -0.726641, 0, 1.0};
Point(98) = {0.036934, -0.725165, 0, 1.0};
Point(99) = {0.037275, -0.724278, 0, 1.0};
Point(100) = {0.037301, -0.724012, 0, 1.0};
Point(101) = {0.037300, -0.723970, 0, 1.0};
Point(102) = {0.037294, -0.723892, 0, 1.0};
Point(103) = {0.037268, -0.723785, 0, 1.0};
Point(104) = {0.037218, -0.723684, 0, 1.0};
Point(105) = {0.037144, -0.723583, 0, 1.0};
Point(106) = {0.036944, -0.723378, 0, 1.0};
Point(107) = {0.036626, -0.723135, 0, 1.0};
Point(108) = {0.034950, -0.722315, 0, 1.0};
Point(109) = {0.032421, -0.721558, 0, 1.0};
Point(110) = {0.029057, -0.720875, 0, 1.0};
Point(111) = {0.024914, -0.720250, 0, 1.0};
Point(112) = {0.020046, -0.719670, 0, 1.0};
Point(113) = {0.014527, -0.719103, 0, 1.0};
Point(114) = {0.008472, -0.718537, 0, 1.0};
Point(115) = {0.001980, -0.717945, 0, 1.0};
Point(116) = {-0.004764, -0.717344, 0, 1.0};
Point(117) = {-0.011631, -0.716730, 0, 1.0};
Point(118) = {-0.018301, -0.716252, 0, 1.0};
Point(119) = {-0.024747, -0.716259, 0, 1.0};
Point(120) = {-0.031189, -0.716834, 0, 1.0};
Point(121) = {-0.037605, -0.717989, 0, 1.0};
Point(122) = {-0.044200, -0.719721, 0, 1.0};
Point(123) = {-0.050984, -0.721832, 0, 1.0};
Point(124) = {-0.057907, -0.724193, 0, 1.0};
Point(125) = {-0.064901, -0.726686, 0, 1.0};
Point(126) = {-0.071883, -0.729193, 0, 1.0};
Point(127) = {-0.078750, -0.731600, 0, 1.0};
Point(128) = {-0.085378, -0.733798, 0, 1.0};
Point(129) = {-0.091620, -0.735695, 0, 1.0};
Point(130) = {-0.097315, -0.737221, 0, 1.0};
Point(131) = {-0.102284, -0.738344, 0, 1.0};
Point(132) = {-0.106357, -0.739074, 0, 1.0};
Point(133) = {-0.109384, -0.739466, 0, 1.0};
Point(134) = {-0.111249, -0.739611, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html