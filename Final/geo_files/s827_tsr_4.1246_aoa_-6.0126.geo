SetFactory("OpenCASCADE");

Point(1) = {0.074450, 0.743086, 0, 1.0};
Point(2) = {0.074031, 0.743111, 0, 1.0};
Point(3) = {0.072822, 0.743263, 0, 1.0};
Point(4) = {0.070938, 0.743609, 0, 1.0};
Point(5) = {0.068514, 0.744146, 0, 1.0};
Point(6) = {0.065650, 0.744818, 0, 1.0};
Point(7) = {0.062402, 0.745557, 0, 1.0};
Point(8) = {0.058797, 0.746339, 0, 1.0};
Point(9) = {0.054905, 0.747153, 0, 1.0};
Point(10) = {0.050801, 0.747962, 0, 1.0};
Point(11) = {0.046554, 0.748715, 0, 1.0};
Point(12) = {0.042222, 0.749358, 0, 1.0};
Point(13) = {0.037860, 0.749825, 0, 1.0};
Point(14) = {0.033488, 0.750000, 0, 1.0};
Point(15) = {0.028984, 0.749874, 0, 1.0};
Point(16) = {0.024378, 0.749533, 0, 1.0};
Point(17) = {0.019719, 0.749007, 0, 1.0};
Point(18) = {0.015060, 0.748320, 0, 1.0};
Point(19) = {0.010449, 0.747490, 0, 1.0};
Point(20) = {0.005939, 0.746537, 0, 1.0};
Point(21) = {0.001576, 0.745477, 0, 1.0};
Point(22) = {-0.002589, 0.744331, 0, 1.0};
Point(23) = {-0.006513, 0.743117, 0, 1.0};
Point(24) = {-0.010152, 0.741855, 0, 1.0};
Point(25) = {-0.013465, 0.740564, 0, 1.0};
Point(26) = {-0.016416, 0.739266, 0, 1.0};
Point(27) = {-0.018973, 0.737979, 0, 1.0};
Point(28) = {-0.021107, 0.736728, 0, 1.0};
Point(29) = {-0.022793, 0.735535, 0, 1.0};
Point(30) = {-0.024017, 0.734427, 0, 1.0};
Point(31) = {-0.024758, 0.733444, 0, 1.0};
Point(32) = {-0.024985, 0.732852, 0, 1.0};
Point(33) = {-0.025003, 0.732675, 0, 1.0};
Point(34) = {-0.025002, 0.732646, 0, 1.0};
Point(35) = {-0.024998, 0.732595, 0, 1.0};
Point(36) = {-0.024981, 0.732523, 0, 1.0};
Point(37) = {-0.024947, 0.732456, 0, 1.0};
Point(38) = {-0.024898, 0.732389, 0, 1.0};
Point(39) = {-0.024765, 0.732252, 0, 1.0};
Point(40) = {-0.024553, 0.732090, 0, 1.0};
Point(41) = {-0.023436, 0.731543, 0, 1.0};
Point(42) = {-0.021749, 0.731039, 0, 1.0};
Point(43) = {-0.019507, 0.730584, 0, 1.0};
Point(44) = {-0.016745, 0.730167, 0, 1.0};
Point(45) = {-0.013500, 0.729780, 0, 1.0};
Point(46) = {-0.009820, 0.729402, 0, 1.0};
Point(47) = {-0.005784, 0.729025, 0, 1.0};
Point(48) = {-0.001456, 0.728630, 0, 1.0};
Point(49) = {0.003041, 0.728229, 0, 1.0};
Point(50) = {0.007618, 0.727820, 0, 1.0};
Point(51) = {0.012065, 0.727502, 0, 1.0};
Point(52) = {0.016362, 0.727506, 0, 1.0};
Point(53) = {0.020657, 0.727889, 0, 1.0};
Point(54) = {0.024934, 0.728659, 0, 1.0};
Point(55) = {0.029331, 0.729814, 0, 1.0};
Point(56) = {0.033854, 0.731221, 0, 1.0};
Point(57) = {0.038469, 0.732795, 0, 1.0};
Point(58) = {0.043132, 0.734457, 0, 1.0};
Point(59) = {0.047786, 0.736129, 0, 1.0};
Point(60) = {0.052364, 0.737733, 0, 1.0};
Point(61) = {0.056783, 0.739199, 0, 1.0};
Point(62) = {0.060944, 0.740463, 0, 1.0};
Point(63) = {0.064741, 0.741481, 0, 1.0};
Point(64) = {0.068054, 0.742229, 0, 1.0};
Point(65) = {0.070769, 0.742716, 0, 1.0};
Point(66) = {0.072787, 0.742977, 0, 1.0};
Point(67) = {0.074030, 0.743074, 0, 1.0};
Point(68) = {-0.074450, -0.743086, 0, 1.0};
Point(69) = {-0.074031, -0.743111, 0, 1.0};
Point(70) = {-0.072822, -0.743263, 0, 1.0};
Point(71) = {-0.070938, -0.743609, 0, 1.0};
Point(72) = {-0.068514, -0.744146, 0, 1.0};
Point(73) = {-0.065650, -0.744818, 0, 1.0};
Point(74) = {-0.062402, -0.745557, 0, 1.0};
Point(75) = {-0.058797, -0.746339, 0, 1.0};
Point(76) = {-0.054905, -0.747153, 0, 1.0};
Point(77) = {-0.050801, -0.747962, 0, 1.0};
Point(78) = {-0.046554, -0.748715, 0, 1.0};
Point(79) = {-0.042222, -0.749358, 0, 1.0};
Point(80) = {-0.037860, -0.749825, 0, 1.0};
Point(81) = {-0.033488, -0.750000, 0, 1.0};
Point(82) = {-0.028984, -0.749874, 0, 1.0};
Point(83) = {-0.024378, -0.749533, 0, 1.0};
Point(84) = {-0.019719, -0.749007, 0, 1.0};
Point(85) = {-0.015060, -0.748320, 0, 1.0};
Point(86) = {-0.010449, -0.747490, 0, 1.0};
Point(87) = {-0.005939, -0.746537, 0, 1.0};
Point(88) = {-0.001576, -0.745477, 0, 1.0};
Point(89) = {0.002589, -0.744331, 0, 1.0};
Point(90) = {0.006513, -0.743117, 0, 1.0};
Point(91) = {0.010152, -0.741855, 0, 1.0};
Point(92) = {0.013465, -0.740564, 0, 1.0};
Point(93) = {0.016416, -0.739266, 0, 1.0};
Point(94) = {0.018973, -0.737979, 0, 1.0};
Point(95) = {0.021107, -0.736728, 0, 1.0};
Point(96) = {0.022793, -0.735535, 0, 1.0};
Point(97) = {0.024017, -0.734427, 0, 1.0};
Point(98) = {0.024758, -0.733444, 0, 1.0};
Point(99) = {0.024985, -0.732852, 0, 1.0};
Point(100) = {0.025003, -0.732675, 0, 1.0};
Point(101) = {0.025002, -0.732646, 0, 1.0};
Point(102) = {0.024998, -0.732595, 0, 1.0};
Point(103) = {0.024981, -0.732523, 0, 1.0};
Point(104) = {0.024947, -0.732456, 0, 1.0};
Point(105) = {0.024898, -0.732389, 0, 1.0};
Point(106) = {0.024765, -0.732252, 0, 1.0};
Point(107) = {0.024553, -0.732090, 0, 1.0};
Point(108) = {0.023436, -0.731543, 0, 1.0};
Point(109) = {0.021749, -0.731039, 0, 1.0};
Point(110) = {0.019507, -0.730584, 0, 1.0};
Point(111) = {0.016745, -0.730167, 0, 1.0};
Point(112) = {0.013500, -0.729780, 0, 1.0};
Point(113) = {0.009820, -0.729402, 0, 1.0};
Point(114) = {0.005784, -0.729025, 0, 1.0};
Point(115) = {0.001456, -0.728630, 0, 1.0};
Point(116) = {-0.003041, -0.728229, 0, 1.0};
Point(117) = {-0.007618, -0.727820, 0, 1.0};
Point(118) = {-0.012065, -0.727502, 0, 1.0};
Point(119) = {-0.016362, -0.727506, 0, 1.0};
Point(120) = {-0.020657, -0.727889, 0, 1.0};
Point(121) = {-0.024934, -0.728659, 0, 1.0};
Point(122) = {-0.029331, -0.729814, 0, 1.0};
Point(123) = {-0.033854, -0.731221, 0, 1.0};
Point(124) = {-0.038469, -0.732795, 0, 1.0};
Point(125) = {-0.043132, -0.734457, 0, 1.0};
Point(126) = {-0.047786, -0.736129, 0, 1.0};
Point(127) = {-0.052364, -0.737733, 0, 1.0};
Point(128) = {-0.056783, -0.739199, 0, 1.0};
Point(129) = {-0.060944, -0.740463, 0, 1.0};
Point(130) = {-0.064741, -0.741481, 0, 1.0};
Point(131) = {-0.068054, -0.742229, 0, 1.0};
Point(132) = {-0.070769, -0.742716, 0, 1.0};
Point(133) = {-0.072787, -0.742977, 0, 1.0};
Point(134) = {-0.074030, -0.743074, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html