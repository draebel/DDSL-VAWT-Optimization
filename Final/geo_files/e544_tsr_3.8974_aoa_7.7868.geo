SetFactory("OpenCASCADE");

Point(1) = {0.074506, 0.721419, 0, 1.0};
Point(2) = {0.071730, 0.722450, 0, 1.0};
Point(3) = {0.067717, 0.723945, 0, 1.0};
Point(4) = {0.062982, 0.725709, 0, 1.0};
Point(5) = {0.057617, 0.727709, 0, 1.0};
Point(6) = {0.051722, 0.729904, 0, 1.0};
Point(7) = {0.045394, 0.732241, 0, 1.0};
Point(8) = {0.038723, 0.734656, 0, 1.0};
Point(9) = {0.031797, 0.737084, 0, 1.0};
Point(10) = {0.024693, 0.739458, 0, 1.0};
Point(11) = {0.017487, 0.741709, 0, 1.0};
Point(12) = {0.010243, 0.743776, 0, 1.0};
Point(13) = {0.003022, 0.745586, 0, 1.0};
Point(14) = {-0.004155, 0.747073, 0, 1.0};
Point(15) = {-0.011286, 0.748227, 0, 1.0};
Point(16) = {-0.018340, 0.749073, 0, 1.0};
Point(17) = {-0.025252, 0.749641, 0, 1.0};
Point(18) = {-0.031944, 0.749948, 0, 1.0};
Point(19) = {-0.038343, 0.750000, 0, 1.0};
Point(20) = {-0.044385, 0.749807, 0, 1.0};
Point(21) = {-0.050005, 0.749380, 0, 1.0};
Point(22) = {-0.055151, 0.748734, 0, 1.0};
Point(23) = {-0.059772, 0.747888, 0, 1.0};
Point(24) = {-0.063821, 0.746866, 0, 1.0};
Point(25) = {-0.067262, 0.745696, 0, 1.0};
Point(26) = {-0.070060, 0.744413, 0, 1.0};
Point(27) = {-0.072187, 0.743064, 0, 1.0};
Point(28) = {-0.073608, 0.741712, 0, 1.0};
Point(29) = {-0.073918, 0.741277, 0, 1.0};
Point(30) = {-0.074127, 0.740894, 0, 1.0};
Point(31) = {-0.074227, 0.740648, 0, 1.0};
Point(32) = {-0.074291, 0.740414, 0, 1.0};
Point(33) = {-0.074308, 0.740300, 0, 1.0};
Point(34) = {-0.074317, 0.740192, 0, 1.0};
Point(35) = {-0.074312, 0.740088, 0, 1.0};
Point(36) = {-0.074289, 0.739986, 0, 1.0};
Point(37) = {-0.074252, 0.739881, 0, 1.0};
Point(38) = {-0.074202, 0.739771, 0, 1.0};
Point(39) = {-0.074071, 0.739545, 0, 1.0};
Point(40) = {-0.073898, 0.739308, 0, 1.0};
Point(41) = {-0.073571, 0.738938, 0, 1.0};
Point(42) = {-0.072565, 0.738052, 0, 1.0};
Point(43) = {-0.070379, 0.736626, 0, 1.0};
Point(44) = {-0.067405, 0.735113, 0, 1.0};
Point(45) = {-0.063685, 0.733536, 0, 1.0};
Point(46) = {-0.059260, 0.731921, 0, 1.0};
Point(47) = {-0.054187, 0.730282, 0, 1.0};
Point(48) = {-0.048531, 0.728634, 0, 1.0};
Point(49) = {-0.042371, 0.727001, 0, 1.0};
Point(50) = {-0.035783, 0.725414, 0, 1.0};
Point(51) = {-0.028845, 0.723899, 0, 1.0};
Point(52) = {-0.021642, 0.722488, 0, 1.0};
Point(53) = {-0.014257, 0.721215, 0, 1.0};
Point(54) = {-0.006772, 0.720115, 0, 1.0};
Point(55) = {0.000721, 0.719230, 0, 1.0};
Point(56) = {0.008141, 0.718639, 0, 1.0};
Point(57) = {0.015502, 0.718443, 0, 1.0};
Point(58) = {0.022878, 0.718640, 0, 1.0};
Point(59) = {0.030333, 0.719122, 0, 1.0};
Point(60) = {0.037829, 0.719687, 0, 1.0};
Point(61) = {0.045196, 0.720183, 0, 1.0};
Point(62) = {0.052255, 0.720531, 0, 1.0};
Point(63) = {0.058823, 0.720688, 0, 1.0};
Point(64) = {0.064722, 0.720647, 0, 1.0};
Point(65) = {0.069786, 0.720436, 0, 1.0};
Point(66) = {0.073864, 0.720007, 0, 1.0};
Point(67) = {0.074308, 0.719972, 0, 1.0};
Point(68) = {-0.074506, -0.721419, 0, 1.0};
Point(69) = {-0.071730, -0.722450, 0, 1.0};
Point(70) = {-0.067717, -0.723945, 0, 1.0};
Point(71) = {-0.062982, -0.725709, 0, 1.0};
Point(72) = {-0.057617, -0.727709, 0, 1.0};
Point(73) = {-0.051722, -0.729904, 0, 1.0};
Point(74) = {-0.045394, -0.732241, 0, 1.0};
Point(75) = {-0.038723, -0.734656, 0, 1.0};
Point(76) = {-0.031797, -0.737084, 0, 1.0};
Point(77) = {-0.024693, -0.739458, 0, 1.0};
Point(78) = {-0.017487, -0.741709, 0, 1.0};
Point(79) = {-0.010243, -0.743776, 0, 1.0};
Point(80) = {-0.003022, -0.745586, 0, 1.0};
Point(81) = {0.004155, -0.747073, 0, 1.0};
Point(82) = {0.011286, -0.748227, 0, 1.0};
Point(83) = {0.018340, -0.749073, 0, 1.0};
Point(84) = {0.025252, -0.749641, 0, 1.0};
Point(85) = {0.031944, -0.749948, 0, 1.0};
Point(86) = {0.038343, -0.750000, 0, 1.0};
Point(87) = {0.044385, -0.749807, 0, 1.0};
Point(88) = {0.050005, -0.749380, 0, 1.0};
Point(89) = {0.055151, -0.748734, 0, 1.0};
Point(90) = {0.059772, -0.747888, 0, 1.0};
Point(91) = {0.063821, -0.746866, 0, 1.0};
Point(92) = {0.067262, -0.745696, 0, 1.0};
Point(93) = {0.070060, -0.744413, 0, 1.0};
Point(94) = {0.072187, -0.743064, 0, 1.0};
Point(95) = {0.073608, -0.741712, 0, 1.0};
Point(96) = {0.073918, -0.741277, 0, 1.0};
Point(97) = {0.074127, -0.740894, 0, 1.0};
Point(98) = {0.074227, -0.740648, 0, 1.0};
Point(99) = {0.074291, -0.740414, 0, 1.0};
Point(100) = {0.074308, -0.740300, 0, 1.0};
Point(101) = {0.074317, -0.740192, 0, 1.0};
Point(102) = {0.074312, -0.740088, 0, 1.0};
Point(103) = {0.074289, -0.739986, 0, 1.0};
Point(104) = {0.074252, -0.739881, 0, 1.0};
Point(105) = {0.074202, -0.739771, 0, 1.0};
Point(106) = {0.074071, -0.739545, 0, 1.0};
Point(107) = {0.073898, -0.739308, 0, 1.0};
Point(108) = {0.073571, -0.738938, 0, 1.0};
Point(109) = {0.072565, -0.738052, 0, 1.0};
Point(110) = {0.070379, -0.736626, 0, 1.0};
Point(111) = {0.067405, -0.735113, 0, 1.0};
Point(112) = {0.063685, -0.733536, 0, 1.0};
Point(113) = {0.059260, -0.731921, 0, 1.0};
Point(114) = {0.054187, -0.730282, 0, 1.0};
Point(115) = {0.048531, -0.728634, 0, 1.0};
Point(116) = {0.042371, -0.727001, 0, 1.0};
Point(117) = {0.035783, -0.725414, 0, 1.0};
Point(118) = {0.028845, -0.723899, 0, 1.0};
Point(119) = {0.021642, -0.722488, 0, 1.0};
Point(120) = {0.014257, -0.721215, 0, 1.0};
Point(121) = {0.006772, -0.720115, 0, 1.0};
Point(122) = {-0.000721, -0.719230, 0, 1.0};
Point(123) = {-0.008141, -0.718639, 0, 1.0};
Point(124) = {-0.015502, -0.718443, 0, 1.0};
Point(125) = {-0.022878, -0.718640, 0, 1.0};
Point(126) = {-0.030333, -0.719122, 0, 1.0};
Point(127) = {-0.037829, -0.719687, 0, 1.0};
Point(128) = {-0.045196, -0.720183, 0, 1.0};
Point(129) = {-0.052255, -0.720531, 0, 1.0};
Point(130) = {-0.058823, -0.720688, 0, 1.0};
Point(131) = {-0.064722, -0.720647, 0, 1.0};
Point(132) = {-0.069786, -0.720436, 0, 1.0};
Point(133) = {-0.073864, -0.720007, 0, 1.0};
Point(134) = {-0.074308, -0.719972, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:85};
Spline(6) = {85:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html