SetFactory("OpenCASCADE");

Point(1) = {0.074946, 0.738600, 0, 1.0};
Point(2) = {0.074603, 0.738713, 0, 1.0};
Point(3) = {0.073621, 0.739070, 0, 1.0};
Point(4) = {0.072094, 0.739668, 0, 1.0};
Point(5) = {0.070107, 0.740458, 0, 1.0};
Point(6) = {0.067702, 0.741378, 0, 1.0};
Point(7) = {0.064908, 0.742394, 0, 1.0};
Point(8) = {0.061785, 0.743473, 0, 1.0};
Point(9) = {0.058379, 0.744541, 0, 1.0};
Point(10) = {0.054690, 0.745543, 0, 1.0};
Point(11) = {0.050728, 0.746459, 0, 1.0};
Point(12) = {0.046515, 0.747275, 0, 1.0};
Point(13) = {0.042077, 0.747985, 0, 1.0};
Point(14) = {0.037450, 0.748587, 0, 1.0};
Point(15) = {0.032677, 0.749084, 0, 1.0};
Point(16) = {0.027811, 0.749476, 0, 1.0};
Point(17) = {0.022903, 0.749761, 0, 1.0};
Point(18) = {0.018007, 0.749936, 0, 1.0};
Point(19) = {0.013175, 0.750000, 0, 1.0};
Point(20) = {0.008460, 0.749950, 0, 1.0};
Point(21) = {0.003912, 0.749786, 0, 1.0};
Point(22) = {-0.000424, 0.749502, 0, 1.0};
Point(23) = {-0.004510, 0.749101, 0, 1.0};
Point(24) = {-0.008306, 0.748593, 0, 1.0};
Point(25) = {-0.011777, 0.747981, 0, 1.0};
Point(26) = {-0.014896, 0.747275, 0, 1.0};
Point(27) = {-0.017636, 0.746494, 0, 1.0};
Point(28) = {-0.019968, 0.745649, 0, 1.0};
Point(29) = {-0.021883, 0.744761, 0, 1.0};
Point(30) = {-0.023361, 0.743865, 0, 1.0};
Point(31) = {-0.024386, 0.742988, 0, 1.0};
Point(32) = {-0.024942, 0.742181, 0, 1.0};
Point(33) = {-0.024910, 0.741501, 0, 1.0};
Point(34) = {-0.024237, 0.740857, 0, 1.0};
Point(35) = {-0.023008, 0.740168, 0, 1.0};
Point(36) = {-0.021268, 0.739469, 0, 1.0};
Point(37) = {-0.019043, 0.738780, 0, 1.0};
Point(38) = {-0.016363, 0.738114, 0, 1.0};
Point(39) = {-0.013259, 0.737480, 0, 1.0};
Point(40) = {-0.009773, 0.736889, 0, 1.0};
Point(41) = {-0.005948, 0.736354, 0, 1.0};
Point(42) = {-0.001829, 0.735886, 0, 1.0};
Point(43) = {0.002533, 0.735502, 0, 1.0};
Point(44) = {0.007086, 0.735216, 0, 1.0};
Point(45) = {0.011777, 0.735052, 0, 1.0};
Point(46) = {0.016565, 0.735041, 0, 1.0};
Point(47) = {0.021421, 0.735209, 0, 1.0};
Point(48) = {0.026333, 0.735575, 0, 1.0};
Point(49) = {0.031305, 0.736136, 0, 1.0};
Point(50) = {0.036345, 0.736868, 0, 1.0};
Point(51) = {0.041470, 0.737692, 0, 1.0};
Point(52) = {0.046635, 0.738480, 0, 1.0};
Point(53) = {0.051722, 0.739135, 0, 1.0};
Point(54) = {0.056604, 0.739603, 0, 1.0};
Point(55) = {0.061152, 0.739854, 0, 1.0};
Point(56) = {0.065237, 0.739886, 0, 1.0};
Point(57) = {0.068740, 0.739710, 0, 1.0};
Point(58) = {0.071520, 0.739364, 0, 1.0};
Point(59) = {0.073467, 0.738977, 0, 1.0};
Point(60) = {0.074586, 0.738697, 0, 1.0};
Point(61) = {-0.074946, -0.738600, 0, 1.0};
Point(62) = {-0.074603, -0.738713, 0, 1.0};
Point(63) = {-0.073621, -0.739070, 0, 1.0};
Point(64) = {-0.072094, -0.739668, 0, 1.0};
Point(65) = {-0.070107, -0.740458, 0, 1.0};
Point(66) = {-0.067702, -0.741378, 0, 1.0};
Point(67) = {-0.064908, -0.742394, 0, 1.0};
Point(68) = {-0.061785, -0.743473, 0, 1.0};
Point(69) = {-0.058379, -0.744541, 0, 1.0};
Point(70) = {-0.054690, -0.745543, 0, 1.0};
Point(71) = {-0.050728, -0.746459, 0, 1.0};
Point(72) = {-0.046515, -0.747275, 0, 1.0};
Point(73) = {-0.042077, -0.747985, 0, 1.0};
Point(74) = {-0.037450, -0.748587, 0, 1.0};
Point(75) = {-0.032677, -0.749084, 0, 1.0};
Point(76) = {-0.027811, -0.749476, 0, 1.0};
Point(77) = {-0.022903, -0.749761, 0, 1.0};
Point(78) = {-0.018007, -0.749936, 0, 1.0};
Point(79) = {-0.013175, -0.750000, 0, 1.0};
Point(80) = {-0.008460, -0.749950, 0, 1.0};
Point(81) = {-0.003912, -0.749786, 0, 1.0};
Point(82) = {0.000424, -0.749502, 0, 1.0};
Point(83) = {0.004510, -0.749101, 0, 1.0};
Point(84) = {0.008306, -0.748593, 0, 1.0};
Point(85) = {0.011777, -0.747981, 0, 1.0};
Point(86) = {0.014896, -0.747275, 0, 1.0};
Point(87) = {0.017636, -0.746494, 0, 1.0};
Point(88) = {0.019968, -0.745649, 0, 1.0};
Point(89) = {0.021883, -0.744761, 0, 1.0};
Point(90) = {0.023361, -0.743865, 0, 1.0};
Point(91) = {0.024386, -0.742988, 0, 1.0};
Point(92) = {0.024942, -0.742181, 0, 1.0};
Point(93) = {0.024910, -0.741501, 0, 1.0};
Point(94) = {0.024237, -0.740857, 0, 1.0};
Point(95) = {0.023008, -0.740168, 0, 1.0};
Point(96) = {0.021268, -0.739469, 0, 1.0};
Point(97) = {0.019043, -0.738780, 0, 1.0};
Point(98) = {0.016363, -0.738114, 0, 1.0};
Point(99) = {0.013259, -0.737480, 0, 1.0};
Point(100) = {0.009773, -0.736889, 0, 1.0};
Point(101) = {0.005948, -0.736354, 0, 1.0};
Point(102) = {0.001829, -0.735886, 0, 1.0};
Point(103) = {-0.002533, -0.735502, 0, 1.0};
Point(104) = {-0.007086, -0.735216, 0, 1.0};
Point(105) = {-0.011777, -0.735052, 0, 1.0};
Point(106) = {-0.016565, -0.735041, 0, 1.0};
Point(107) = {-0.021421, -0.735209, 0, 1.0};
Point(108) = {-0.026333, -0.735575, 0, 1.0};
Point(109) = {-0.031305, -0.736136, 0, 1.0};
Point(110) = {-0.036345, -0.736868, 0, 1.0};
Point(111) = {-0.041470, -0.737692, 0, 1.0};
Point(112) = {-0.046635, -0.738480, 0, 1.0};
Point(113) = {-0.051722, -0.739135, 0, 1.0};
Point(114) = {-0.056604, -0.739603, 0, 1.0};
Point(115) = {-0.061152, -0.739854, 0, 1.0};
Point(116) = {-0.065237, -0.739886, 0, 1.0};
Point(117) = {-0.068740, -0.739710, 0, 1.0};
Point(118) = {-0.071520, -0.739364, 0, 1.0};
Point(119) = {-0.073467, -0.738977, 0, 1.0};
Point(120) = {-0.074586, -0.738697, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html