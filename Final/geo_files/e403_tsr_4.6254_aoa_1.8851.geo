SetFactory("OpenCASCADE");

Point(1) = {0.112419, 0.732900, 0, 1.0};
Point(2) = {0.111905, 0.733070, 0, 1.0};
Point(3) = {0.110431, 0.733605, 0, 1.0};
Point(4) = {0.108142, 0.734502, 0, 1.0};
Point(5) = {0.105161, 0.735687, 0, 1.0};
Point(6) = {0.101554, 0.737066, 0, 1.0};
Point(7) = {0.097362, 0.738591, 0, 1.0};
Point(8) = {0.092678, 0.740210, 0, 1.0};
Point(9) = {0.087569, 0.741812, 0, 1.0};
Point(10) = {0.082035, 0.743314, 0, 1.0};
Point(11) = {0.076092, 0.744688, 0, 1.0};
Point(12) = {0.069772, 0.745912, 0, 1.0};
Point(13) = {0.063115, 0.746978, 0, 1.0};
Point(14) = {0.056175, 0.747880, 0, 1.0};
Point(15) = {0.049015, 0.748626, 0, 1.0};
Point(16) = {0.041717, 0.749214, 0, 1.0};
Point(17) = {0.034354, 0.749641, 0, 1.0};
Point(18) = {0.027010, 0.749904, 0, 1.0};
Point(19) = {0.019763, 0.750000, 0, 1.0};
Point(20) = {0.012690, 0.749925, 0, 1.0};
Point(21) = {0.005869, 0.749678, 0, 1.0};
Point(22) = {-0.000636, 0.749253, 0, 1.0};
Point(23) = {-0.006765, 0.748652, 0, 1.0};
Point(24) = {-0.012460, 0.747889, 0, 1.0};
Point(25) = {-0.017666, 0.746971, 0, 1.0};
Point(26) = {-0.022345, 0.745912, 0, 1.0};
Point(27) = {-0.026453, 0.744740, 0, 1.0};
Point(28) = {-0.029951, 0.743473, 0, 1.0};
Point(29) = {-0.032824, 0.742142, 0, 1.0};
Point(30) = {-0.035042, 0.740797, 0, 1.0};
Point(31) = {-0.036578, 0.739482, 0, 1.0};
Point(32) = {-0.037414, 0.738271, 0, 1.0};
Point(33) = {-0.037365, 0.737252, 0, 1.0};
Point(34) = {-0.036355, 0.736285, 0, 1.0};
Point(35) = {-0.034511, 0.735252, 0, 1.0};
Point(36) = {-0.031901, 0.734204, 0, 1.0};
Point(37) = {-0.028565, 0.733170, 0, 1.0};
Point(38) = {-0.024544, 0.732171, 0, 1.0};
Point(39) = {-0.019888, 0.731220, 0, 1.0};
Point(40) = {-0.014660, 0.730333, 0, 1.0};
Point(41) = {-0.008922, 0.729531, 0, 1.0};
Point(42) = {-0.002743, 0.728829, 0, 1.0};
Point(43) = {0.003799, 0.728253, 0, 1.0};
Point(44) = {0.010629, 0.727824, 0, 1.0};
Point(45) = {0.017665, 0.727578, 0, 1.0};
Point(46) = {0.024848, 0.727562, 0, 1.0};
Point(47) = {0.032132, 0.727813, 0, 1.0};
Point(48) = {0.039500, 0.728363, 0, 1.0};
Point(49) = {0.046958, 0.729204, 0, 1.0};
Point(50) = {0.054518, 0.730302, 0, 1.0};
Point(51) = {0.062205, 0.731537, 0, 1.0};
Point(52) = {0.069952, 0.732720, 0, 1.0};
Point(53) = {0.077583, 0.733703, 0, 1.0};
Point(54) = {0.084906, 0.734404, 0, 1.0};
Point(55) = {0.091728, 0.734781, 0, 1.0};
Point(56) = {0.097855, 0.734829, 0, 1.0};
Point(57) = {0.103110, 0.734564, 0, 1.0};
Point(58) = {0.107280, 0.734046, 0, 1.0};
Point(59) = {0.110201, 0.733465, 0, 1.0};
Point(60) = {0.111879, 0.733045, 0, 1.0};
Point(61) = {-0.112419, -0.732900, 0, 1.0};
Point(62) = {-0.111905, -0.733070, 0, 1.0};
Point(63) = {-0.110431, -0.733605, 0, 1.0};
Point(64) = {-0.108142, -0.734502, 0, 1.0};
Point(65) = {-0.105161, -0.735687, 0, 1.0};
Point(66) = {-0.101554, -0.737066, 0, 1.0};
Point(67) = {-0.097362, -0.738591, 0, 1.0};
Point(68) = {-0.092678, -0.740210, 0, 1.0};
Point(69) = {-0.087569, -0.741812, 0, 1.0};
Point(70) = {-0.082035, -0.743314, 0, 1.0};
Point(71) = {-0.076092, -0.744688, 0, 1.0};
Point(72) = {-0.069772, -0.745912, 0, 1.0};
Point(73) = {-0.063115, -0.746978, 0, 1.0};
Point(74) = {-0.056175, -0.747880, 0, 1.0};
Point(75) = {-0.049015, -0.748626, 0, 1.0};
Point(76) = {-0.041717, -0.749214, 0, 1.0};
Point(77) = {-0.034354, -0.749641, 0, 1.0};
Point(78) = {-0.027010, -0.749904, 0, 1.0};
Point(79) = {-0.019763, -0.750000, 0, 1.0};
Point(80) = {-0.012690, -0.749925, 0, 1.0};
Point(81) = {-0.005869, -0.749678, 0, 1.0};
Point(82) = {0.000636, -0.749253, 0, 1.0};
Point(83) = {0.006765, -0.748652, 0, 1.0};
Point(84) = {0.012460, -0.747889, 0, 1.0};
Point(85) = {0.017666, -0.746971, 0, 1.0};
Point(86) = {0.022345, -0.745912, 0, 1.0};
Point(87) = {0.026453, -0.744740, 0, 1.0};
Point(88) = {0.029951, -0.743473, 0, 1.0};
Point(89) = {0.032824, -0.742142, 0, 1.0};
Point(90) = {0.035042, -0.740797, 0, 1.0};
Point(91) = {0.036578, -0.739482, 0, 1.0};
Point(92) = {0.037414, -0.738271, 0, 1.0};
Point(93) = {0.037365, -0.737252, 0, 1.0};
Point(94) = {0.036355, -0.736285, 0, 1.0};
Point(95) = {0.034511, -0.735252, 0, 1.0};
Point(96) = {0.031901, -0.734204, 0, 1.0};
Point(97) = {0.028565, -0.733170, 0, 1.0};
Point(98) = {0.024544, -0.732171, 0, 1.0};
Point(99) = {0.019888, -0.731220, 0, 1.0};
Point(100) = {0.014660, -0.730333, 0, 1.0};
Point(101) = {0.008922, -0.729531, 0, 1.0};
Point(102) = {0.002743, -0.728829, 0, 1.0};
Point(103) = {-0.003799, -0.728253, 0, 1.0};
Point(104) = {-0.010629, -0.727824, 0, 1.0};
Point(105) = {-0.017665, -0.727578, 0, 1.0};
Point(106) = {-0.024848, -0.727562, 0, 1.0};
Point(107) = {-0.032132, -0.727813, 0, 1.0};
Point(108) = {-0.039500, -0.728363, 0, 1.0};
Point(109) = {-0.046958, -0.729204, 0, 1.0};
Point(110) = {-0.054518, -0.730302, 0, 1.0};
Point(111) = {-0.062205, -0.731537, 0, 1.0};
Point(112) = {-0.069952, -0.732720, 0, 1.0};
Point(113) = {-0.077583, -0.733703, 0, 1.0};
Point(114) = {-0.084906, -0.734404, 0, 1.0};
Point(115) = {-0.091728, -0.734781, 0, 1.0};
Point(116) = {-0.097855, -0.734829, 0, 1.0};
Point(117) = {-0.103110, -0.734564, 0, 1.0};
Point(118) = {-0.107280, -0.734046, 0, 1.0};
Point(119) = {-0.110201, -0.733465, 0, 1.0};
Point(120) = {-0.111879, -0.733045, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html