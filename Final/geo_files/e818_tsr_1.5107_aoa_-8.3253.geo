SetFactory("OpenCASCADE");

Point(1) = {0.074209, 0.747811, 0, 1.0};
Point(2) = {0.073716, 0.747862, 0, 1.0};
Point(3) = {0.072304, 0.748037, 0, 1.0};
Point(4) = {0.070100, 0.748323, 0, 1.0};
Point(5) = {0.067178, 0.748637, 0, 1.0};
Point(6) = {0.063551, 0.748935, 0, 1.0};
Point(7) = {0.059253, 0.749225, 0, 1.0};
Point(8) = {0.054365, 0.749507, 0, 1.0};
Point(9) = {0.048971, 0.749755, 0, 1.0};
Point(10) = {0.043161, 0.749940, 0, 1.0};
Point(11) = {0.037024, 0.750000, 0, 1.0};
Point(12) = {0.030605, 0.749857, 0, 1.0};
Point(13) = {0.023895, 0.749476, 0, 1.0};
Point(14) = {0.016916, 0.748901, 0, 1.0};
Point(15) = {0.009746, 0.748153, 0, 1.0};
Point(16) = {0.002456, 0.747252, 0, 1.0};
Point(17) = {-0.004879, 0.746206, 0, 1.0};
Point(18) = {-0.012181, 0.745036, 0, 1.0};
Point(19) = {-0.019375, 0.743751, 0, 1.0};
Point(20) = {-0.026389, 0.742371, 0, 1.0};
Point(21) = {-0.033149, 0.740912, 0, 1.0};
Point(22) = {-0.039587, 0.739395, 0, 1.0};
Point(23) = {-0.045637, 0.737839, 0, 1.0};
Point(24) = {-0.051237, 0.736264, 0, 1.0};
Point(25) = {-0.056329, 0.734693, 0, 1.0};
Point(26) = {-0.060865, 0.733150, 0, 1.0};
Point(27) = {-0.064798, 0.731657, 0, 1.0};
Point(28) = {-0.068091, 0.730244, 0, 1.0};
Point(29) = {-0.070706, 0.728938, 0, 1.0};
Point(30) = {-0.072622, 0.727773, 0, 1.0};
Point(31) = {-0.073308, 0.727258, 0, 1.0};
Point(32) = {-0.073877, 0.726702, 0, 1.0};
Point(33) = {-0.074110, 0.726389, 0, 1.0};
Point(34) = {-0.074201, 0.726194, 0, 1.0};
Point(35) = {-0.074210, 0.726088, 0, 1.0};
Point(36) = {-0.074167, 0.725991, 0, 1.0};
Point(37) = {-0.074017, 0.725837, 0, 1.0};
Point(38) = {-0.073695, 0.725618, 0, 1.0};
Point(39) = {-0.072979, 0.725280, 0, 1.0};
Point(40) = {-0.072163, 0.725019, 0, 1.0};
Point(41) = {-0.069995, 0.724551, 0, 1.0};
Point(42) = {-0.067141, 0.724187, 0, 1.0};
Point(43) = {-0.063644, 0.723959, 0, 1.0};
Point(44) = {-0.059555, 0.723892, 0, 1.0};
Point(45) = {-0.054924, 0.724021, 0, 1.0};
Point(46) = {-0.049793, 0.724391, 0, 1.0};
Point(47) = {-0.044170, 0.725032, 0, 1.0};
Point(48) = {-0.038079, 0.725924, 0, 1.0};
Point(49) = {-0.031562, 0.727053, 0, 1.0};
Point(50) = {-0.024672, 0.728398, 0, 1.0};
Point(51) = {-0.017460, 0.729934, 0, 1.0};
Point(52) = {-0.009989, 0.731626, 0, 1.0};
Point(53) = {-0.002322, 0.733439, 0, 1.0};
Point(54) = {0.005469, 0.735324, 0, 1.0};
Point(55) = {0.013303, 0.737234, 0, 1.0};
Point(56) = {0.021094, 0.739114, 0, 1.0};
Point(57) = {0.028755, 0.740913, 0, 1.0};
Point(58) = {0.036179, 0.742578, 0, 1.0};
Point(59) = {0.043258, 0.744063, 0, 1.0};
Point(60) = {0.049881, 0.745328, 0, 1.0};
Point(61) = {0.055933, 0.746344, 0, 1.0};
Point(62) = {0.061301, 0.747094, 0, 1.0};
Point(63) = {0.065872, 0.747578, 0, 1.0};
Point(64) = {0.069524, 0.747805, 0, 1.0};
Point(65) = {0.072144, 0.747852, 0, 1.0};
Point(66) = {0.073697, 0.747828, 0, 1.0};
Point(67) = {-0.074209, -0.747811, 0, 1.0};
Point(68) = {-0.073716, -0.747862, 0, 1.0};
Point(69) = {-0.072304, -0.748037, 0, 1.0};
Point(70) = {-0.070100, -0.748323, 0, 1.0};
Point(71) = {-0.067178, -0.748637, 0, 1.0};
Point(72) = {-0.063551, -0.748935, 0, 1.0};
Point(73) = {-0.059253, -0.749225, 0, 1.0};
Point(74) = {-0.054365, -0.749507, 0, 1.0};
Point(75) = {-0.048971, -0.749755, 0, 1.0};
Point(76) = {-0.043161, -0.749940, 0, 1.0};
Point(77) = {-0.037024, -0.750000, 0, 1.0};
Point(78) = {-0.030605, -0.749857, 0, 1.0};
Point(79) = {-0.023895, -0.749476, 0, 1.0};
Point(80) = {-0.016916, -0.748901, 0, 1.0};
Point(81) = {-0.009746, -0.748153, 0, 1.0};
Point(82) = {-0.002456, -0.747252, 0, 1.0};
Point(83) = {0.004879, -0.746206, 0, 1.0};
Point(84) = {0.012181, -0.745036, 0, 1.0};
Point(85) = {0.019375, -0.743751, 0, 1.0};
Point(86) = {0.026389, -0.742371, 0, 1.0};
Point(87) = {0.033149, -0.740912, 0, 1.0};
Point(88) = {0.039587, -0.739395, 0, 1.0};
Point(89) = {0.045637, -0.737839, 0, 1.0};
Point(90) = {0.051237, -0.736264, 0, 1.0};
Point(91) = {0.056329, -0.734693, 0, 1.0};
Point(92) = {0.060865, -0.733150, 0, 1.0};
Point(93) = {0.064798, -0.731657, 0, 1.0};
Point(94) = {0.068091, -0.730244, 0, 1.0};
Point(95) = {0.070706, -0.728938, 0, 1.0};
Point(96) = {0.072622, -0.727773, 0, 1.0};
Point(97) = {0.073308, -0.727258, 0, 1.0};
Point(98) = {0.073877, -0.726702, 0, 1.0};
Point(99) = {0.074110, -0.726389, 0, 1.0};
Point(100) = {0.074201, -0.726194, 0, 1.0};
Point(101) = {0.074210, -0.726088, 0, 1.0};
Point(102) = {0.074167, -0.725991, 0, 1.0};
Point(103) = {0.074017, -0.725837, 0, 1.0};
Point(104) = {0.073695, -0.725618, 0, 1.0};
Point(105) = {0.072979, -0.725280, 0, 1.0};
Point(106) = {0.072163, -0.725019, 0, 1.0};
Point(107) = {0.069995, -0.724551, 0, 1.0};
Point(108) = {0.067141, -0.724187, 0, 1.0};
Point(109) = {0.063644, -0.723959, 0, 1.0};
Point(110) = {0.059555, -0.723892, 0, 1.0};
Point(111) = {0.054924, -0.724021, 0, 1.0};
Point(112) = {0.049793, -0.724391, 0, 1.0};
Point(113) = {0.044170, -0.725032, 0, 1.0};
Point(114) = {0.038079, -0.725924, 0, 1.0};
Point(115) = {0.031562, -0.727053, 0, 1.0};
Point(116) = {0.024672, -0.728398, 0, 1.0};
Point(117) = {0.017460, -0.729934, 0, 1.0};
Point(118) = {0.009989, -0.731626, 0, 1.0};
Point(119) = {0.002322, -0.733439, 0, 1.0};
Point(120) = {-0.005469, -0.735324, 0, 1.0};
Point(121) = {-0.013303, -0.737234, 0, 1.0};
Point(122) = {-0.021094, -0.739114, 0, 1.0};
Point(123) = {-0.028755, -0.740913, 0, 1.0};
Point(124) = {-0.036179, -0.742578, 0, 1.0};
Point(125) = {-0.043258, -0.744063, 0, 1.0};
Point(126) = {-0.049881, -0.745328, 0, 1.0};
Point(127) = {-0.055933, -0.746344, 0, 1.0};
Point(128) = {-0.061301, -0.747094, 0, 1.0};
Point(129) = {-0.065872, -0.747578, 0, 1.0};
Point(130) = {-0.069524, -0.747805, 0, 1.0};
Point(131) = {-0.072144, -0.747852, 0, 1.0};
Point(132) = {-0.073697, -0.747828, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:66};
Spline(4) = {66,1};

// Lines: second blade (splines 5-8)
Spline(5) = {67:87};
Spline(6) = {87:115};
Spline(7) = {115:132};
Spline(8) = {132,67};

// Outer domain (points 20001-4 and lines)
Point(133) = {-13.50000000, -15.00000000, 0, 1.0};
Point(134) = {-13.50000000, 15.00000000, 0, 1.0};
Point(135) = {13.50000000, 15.00000000, 0, 1.0};
Point(136) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {133, 134};
Line(12) = {134, 135};
Line(13) = {135, 136};
Line(14) = {133, 136};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html