SetFactory("OpenCASCADE");

Point(1) = {0.074998, 0.738241, 0, 1.0};
Point(2) = {0.074460, 0.738232, 0, 1.0};
Point(3) = {0.072850, 0.738248, 0, 1.0};
Point(4) = {0.070194, 0.738383, 0, 1.0};
Point(5) = {0.066578, 0.738725, 0, 1.0};
Point(6) = {0.062140, 0.739314, 0, 1.0};
Point(7) = {0.057012, 0.740130, 0, 1.0};
Point(8) = {0.051310, 0.741135, 0, 1.0};
Point(9) = {0.045137, 0.742280, 0, 1.0};
Point(10) = {0.038590, 0.743514, 0, 1.0};
Point(11) = {0.031758, 0.744781, 0, 1.0};
Point(12) = {0.024726, 0.746026, 0, 1.0};
Point(13) = {0.017573, 0.747197, 0, 1.0};
Point(14) = {0.010385, 0.748237, 0, 1.0};
Point(15) = {0.003220, 0.749056, 0, 1.0};
Point(16) = {-0.003931, 0.749603, 0, 1.0};
Point(17) = {-0.011061, 0.749905, 0, 1.0};
Point(18) = {-0.018104, 0.750000, 0, 1.0};
Point(19) = {-0.024979, 0.749900, 0, 1.0};
Point(20) = {-0.031615, 0.749608, 0, 1.0};
Point(21) = {-0.037945, 0.749124, 0, 1.0};
Point(22) = {-0.043915, 0.748454, 0, 1.0};
Point(23) = {-0.049476, 0.747608, 0, 1.0};
Point(24) = {-0.054585, 0.746604, 0, 1.0};
Point(25) = {-0.059200, 0.745466, 0, 1.0};
Point(26) = {-0.063282, 0.744224, 0, 1.0};
Point(27) = {-0.066797, 0.742907, 0, 1.0};
Point(28) = {-0.069720, 0.741550, 0, 1.0};
Point(29) = {-0.072026, 0.740198, 0, 1.0};
Point(30) = {-0.073694, 0.738907, 0, 1.0};
Point(31) = {-0.074695, 0.737746, 0, 1.0};
Point(32) = {-0.074864, 0.737430, 0, 1.0};
Point(33) = {-0.074968, 0.737147, 0, 1.0};
Point(34) = {-0.074997, 0.736976, 0, 1.0};
Point(35) = {-0.074986, 0.736827, 0, 1.0};
Point(36) = {-0.074924, 0.736689, 0, 1.0};
Point(37) = {-0.074813, 0.736546, 0, 1.0};
Point(38) = {-0.074576, 0.736325, 0, 1.0};
Point(39) = {-0.074263, 0.736099, 0, 1.0};
Point(40) = {-0.072718, 0.735366, 0, 1.0};
Point(41) = {-0.070401, 0.734699, 0, 1.0};
Point(42) = {-0.067330, 0.734140, 0, 1.0};
Point(43) = {-0.063519, 0.733698, 0, 1.0};
Point(44) = {-0.058995, 0.733373, 0, 1.0};
Point(45) = {-0.053795, 0.733160, 0, 1.0};
Point(46) = {-0.047964, 0.733047, 0, 1.0};
Point(47) = {-0.041564, 0.733017, 0, 1.0};
Point(48) = {-0.034667, 0.733053, 0, 1.0};
Point(49) = {-0.027358, 0.733143, 0, 1.0};
Point(50) = {-0.019727, 0.733277, 0, 1.0};
Point(51) = {-0.011867, 0.733453, 0, 1.0};
Point(52) = {-0.003867, 0.733665, 0, 1.0};
Point(53) = {0.004177, 0.733911, 0, 1.0};
Point(54) = {0.012175, 0.734184, 0, 1.0};
Point(55) = {0.020033, 0.734480, 0, 1.0};
Point(56) = {0.027661, 0.734795, 0, 1.0};
Point(57) = {0.034969, 0.735124, 0, 1.0};
Point(58) = {0.041873, 0.735462, 0, 1.0};
Point(59) = {0.048292, 0.735808, 0, 1.0};
Point(60) = {0.054151, 0.736156, 0, 1.0};
Point(61) = {0.059379, 0.736506, 0, 1.0};
Point(62) = {0.063915, 0.736855, 0, 1.0};
Point(63) = {0.067702, 0.737214, 0, 1.0};
Point(64) = {0.070728, 0.737598, 0, 1.0};
Point(65) = {0.073009, 0.737952, 0, 1.0};
Point(66) = {0.074481, 0.738175, 0, 1.0};
Point(67) = {-0.074998, -0.738241, 0, 1.0};
Point(68) = {-0.074460, -0.738232, 0, 1.0};
Point(69) = {-0.072850, -0.738248, 0, 1.0};
Point(70) = {-0.070194, -0.738383, 0, 1.0};
Point(71) = {-0.066578, -0.738725, 0, 1.0};
Point(72) = {-0.062140, -0.739314, 0, 1.0};
Point(73) = {-0.057012, -0.740130, 0, 1.0};
Point(74) = {-0.051310, -0.741135, 0, 1.0};
Point(75) = {-0.045137, -0.742280, 0, 1.0};
Point(76) = {-0.038590, -0.743514, 0, 1.0};
Point(77) = {-0.031758, -0.744781, 0, 1.0};
Point(78) = {-0.024726, -0.746026, 0, 1.0};
Point(79) = {-0.017573, -0.747197, 0, 1.0};
Point(80) = {-0.010385, -0.748237, 0, 1.0};
Point(81) = {-0.003220, -0.749056, 0, 1.0};
Point(82) = {0.003931, -0.749603, 0, 1.0};
Point(83) = {0.011061, -0.749905, 0, 1.0};
Point(84) = {0.018104, -0.750000, 0, 1.0};
Point(85) = {0.024979, -0.749900, 0, 1.0};
Point(86) = {0.031615, -0.749608, 0, 1.0};
Point(87) = {0.037945, -0.749124, 0, 1.0};
Point(88) = {0.043915, -0.748454, 0, 1.0};
Point(89) = {0.049476, -0.747608, 0, 1.0};
Point(90) = {0.054585, -0.746604, 0, 1.0};
Point(91) = {0.059200, -0.745466, 0, 1.0};
Point(92) = {0.063282, -0.744224, 0, 1.0};
Point(93) = {0.066797, -0.742907, 0, 1.0};
Point(94) = {0.069720, -0.741550, 0, 1.0};
Point(95) = {0.072026, -0.740198, 0, 1.0};
Point(96) = {0.073694, -0.738907, 0, 1.0};
Point(97) = {0.074695, -0.737746, 0, 1.0};
Point(98) = {0.074864, -0.737430, 0, 1.0};
Point(99) = {0.074968, -0.737147, 0, 1.0};
Point(100) = {0.074997, -0.736976, 0, 1.0};
Point(101) = {0.074986, -0.736827, 0, 1.0};
Point(102) = {0.074924, -0.736689, 0, 1.0};
Point(103) = {0.074813, -0.736546, 0, 1.0};
Point(104) = {0.074576, -0.736325, 0, 1.0};
Point(105) = {0.074263, -0.736099, 0, 1.0};
Point(106) = {0.072718, -0.735366, 0, 1.0};
Point(107) = {0.070401, -0.734699, 0, 1.0};
Point(108) = {0.067330, -0.734140, 0, 1.0};
Point(109) = {0.063519, -0.733698, 0, 1.0};
Point(110) = {0.058995, -0.733373, 0, 1.0};
Point(111) = {0.053795, -0.733160, 0, 1.0};
Point(112) = {0.047964, -0.733047, 0, 1.0};
Point(113) = {0.041564, -0.733017, 0, 1.0};
Point(114) = {0.034667, -0.733053, 0, 1.0};
Point(115) = {0.027358, -0.733143, 0, 1.0};
Point(116) = {0.019727, -0.733277, 0, 1.0};
Point(117) = {0.011867, -0.733453, 0, 1.0};
Point(118) = {0.003867, -0.733665, 0, 1.0};
Point(119) = {-0.004177, -0.733911, 0, 1.0};
Point(120) = {-0.012175, -0.734184, 0, 1.0};
Point(121) = {-0.020033, -0.734480, 0, 1.0};
Point(122) = {-0.027661, -0.734795, 0, 1.0};
Point(123) = {-0.034969, -0.735124, 0, 1.0};
Point(124) = {-0.041873, -0.735462, 0, 1.0};
Point(125) = {-0.048292, -0.735808, 0, 1.0};
Point(126) = {-0.054151, -0.736156, 0, 1.0};
Point(127) = {-0.059379, -0.736506, 0, 1.0};
Point(128) = {-0.063915, -0.736855, 0, 1.0};
Point(129) = {-0.067702, -0.737214, 0, 1.0};
Point(130) = {-0.070728, -0.737598, 0, 1.0};
Point(131) = {-0.073009, -0.737952, 0, 1.0};
Point(132) = {-0.074481, -0.738175, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:48};
Spline(3) = {48:66};
Spline(4) = {66,1};

// Lines: second blade (splines 5-8)
Spline(5) = {67:86};
Spline(6) = {86:114};
Spline(7) = {114:132};
Spline(8) = {132,67};

// Outer domain (points 20001-4 and lines)
Point(133) = {-13.50000000, -15.00000000, 0, 1.0};
Point(134) = {-13.50000000, 15.00000000, 0, 1.0};
Point(135) = {13.50000000, 15.00000000, 0, 1.0};
Point(136) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {133, 134};
Line(12) = {134, 135};
Line(13) = {135, 136};
Line(14) = {133, 136};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html