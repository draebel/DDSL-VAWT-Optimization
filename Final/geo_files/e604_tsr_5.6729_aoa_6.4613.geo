SetFactory("OpenCASCADE");

Point(1) = {0.111547, 0.719960, 0, 1.0};
Point(2) = {0.111005, 0.720187, 0, 1.0};
Point(3) = {0.109493, 0.720884, 0, 1.0};
Point(4) = {0.107189, 0.721996, 0, 1.0};
Point(5) = {0.104161, 0.723388, 0, 1.0};
Point(6) = {0.100396, 0.725012, 0, 1.0};
Point(7) = {0.095943, 0.726882, 0, 1.0};
Point(8) = {0.090902, 0.728979, 0, 1.0};
Point(9) = {0.085368, 0.731254, 0, 1.0};
Point(10) = {0.079435, 0.733650, 0, 1.0};
Point(11) = {0.073185, 0.736096, 0, 1.0};
Point(12) = {0.066700, 0.738524, 0, 1.0};
Point(13) = {0.060049, 0.740862, 0, 1.0};
Point(14) = {0.053300, 0.743039, 0, 1.0};
Point(15) = {0.046511, 0.744974, 0, 1.0};
Point(16) = {0.039689, 0.746593, 0, 1.0};
Point(17) = {0.032840, 0.747887, 0, 1.0};
Point(18) = {0.026006, 0.748866, 0, 1.0};
Point(19) = {0.019234, 0.749538, 0, 1.0};
Point(20) = {0.012585, 0.749912, 0, 1.0};
Point(21) = {0.006116, 0.750000, 0, 1.0};
Point(22) = {-0.000111, 0.749822, 0, 1.0};
Point(23) = {-0.006030, 0.749392, 0, 1.0};
Point(24) = {-0.011579, 0.748727, 0, 1.0};
Point(25) = {-0.016705, 0.747841, 0, 1.0};
Point(26) = {-0.021355, 0.746759, 0, 1.0};
Point(27) = {-0.025487, 0.745503, 0, 1.0};
Point(28) = {-0.029061, 0.744105, 0, 1.0};
Point(29) = {-0.032044, 0.742597, 0, 1.0};
Point(30) = {-0.034409, 0.741023, 0, 1.0};
Point(31) = {-0.036131, 0.739437, 0, 1.0};
Point(32) = {-0.037178, 0.737914, 0, 1.0};
Point(33) = {-0.037391, 0.737375, 0, 1.0};
Point(34) = {-0.037461, 0.737102, 0, 1.0};
Point(35) = {-0.037507, 0.736715, 0, 1.0};
Point(36) = {-0.037502, 0.736595, 0, 1.0};
Point(37) = {-0.037485, 0.736480, 0, 1.0};
Point(38) = {-0.037454, 0.736366, 0, 1.0};
Point(39) = {-0.037408, 0.736252, 0, 1.0};
Point(40) = {-0.037349, 0.736134, 0, 1.0};
Point(41) = {-0.037202, 0.735896, 0, 1.0};
Point(42) = {-0.037016, 0.735650, 0, 1.0};
Point(43) = {-0.036671, 0.735271, 0, 1.0};
Point(44) = {-0.035135, 0.734064, 0, 1.0};
Point(45) = {-0.032698, 0.732709, 0, 1.0};
Point(46) = {-0.029494, 0.731336, 0, 1.0};
Point(47) = {-0.025561, 0.729961, 0, 1.0};
Point(48) = {-0.020949, 0.728590, 0, 1.0};
Point(49) = {-0.015722, 0.727239, 0, 1.0};
Point(50) = {-0.009950, 0.725925, 0, 1.0};
Point(51) = {-0.003702, 0.724671, 0, 1.0};
Point(52) = {0.002946, 0.723496, 0, 1.0};
Point(53) = {0.009913, 0.722420, 0, 1.0};
Point(54) = {0.017112, 0.721467, 0, 1.0};
Point(55) = {0.024450, 0.720669, 0, 1.0};
Point(56) = {0.031837, 0.720089, 0, 1.0};
Point(57) = {0.039242, 0.719812, 0, 1.0};
Point(58) = {0.046696, 0.719859, 0, 1.0};
Point(59) = {0.054215, 0.720177, 0, 1.0};
Point(60) = {0.061776, 0.720683, 0, 1.0};
Point(61) = {0.069337, 0.721263, 0, 1.0};
Point(62) = {0.076791, 0.721776, 0, 1.0};
Point(63) = {0.083968, 0.722118, 0, 1.0};
Point(64) = {0.090682, 0.722232, 0, 1.0};
Point(65) = {0.096746, 0.722096, 0, 1.0};
Point(66) = {0.101975, 0.721723, 0, 1.0};
Point(67) = {0.106175, 0.721167, 0, 1.0};
Point(68) = {0.109186, 0.720573, 0, 1.0};
Point(69) = {0.110964, 0.720125, 0, 1.0};
Point(70) = {-0.111547, -0.719960, 0, 1.0};
Point(71) = {-0.111005, -0.720187, 0, 1.0};
Point(72) = {-0.109493, -0.720884, 0, 1.0};
Point(73) = {-0.107189, -0.721996, 0, 1.0};
Point(74) = {-0.104161, -0.723388, 0, 1.0};
Point(75) = {-0.100396, -0.725012, 0, 1.0};
Point(76) = {-0.095943, -0.726882, 0, 1.0};
Point(77) = {-0.090902, -0.728979, 0, 1.0};
Point(78) = {-0.085368, -0.731254, 0, 1.0};
Point(79) = {-0.079435, -0.733650, 0, 1.0};
Point(80) = {-0.073185, -0.736096, 0, 1.0};
Point(81) = {-0.066700, -0.738524, 0, 1.0};
Point(82) = {-0.060049, -0.740862, 0, 1.0};
Point(83) = {-0.053300, -0.743039, 0, 1.0};
Point(84) = {-0.046511, -0.744974, 0, 1.0};
Point(85) = {-0.039689, -0.746593, 0, 1.0};
Point(86) = {-0.032840, -0.747887, 0, 1.0};
Point(87) = {-0.026006, -0.748866, 0, 1.0};
Point(88) = {-0.019234, -0.749538, 0, 1.0};
Point(89) = {-0.012585, -0.749912, 0, 1.0};
Point(90) = {-0.006116, -0.750000, 0, 1.0};
Point(91) = {0.000111, -0.749822, 0, 1.0};
Point(92) = {0.006030, -0.749392, 0, 1.0};
Point(93) = {0.011579, -0.748727, 0, 1.0};
Point(94) = {0.016705, -0.747841, 0, 1.0};
Point(95) = {0.021355, -0.746759, 0, 1.0};
Point(96) = {0.025487, -0.745503, 0, 1.0};
Point(97) = {0.029061, -0.744105, 0, 1.0};
Point(98) = {0.032044, -0.742597, 0, 1.0};
Point(99) = {0.034409, -0.741023, 0, 1.0};
Point(100) = {0.036131, -0.739437, 0, 1.0};
Point(101) = {0.037178, -0.737914, 0, 1.0};
Point(102) = {0.037391, -0.737375, 0, 1.0};
Point(103) = {0.037461, -0.737102, 0, 1.0};
Point(104) = {0.037507, -0.736715, 0, 1.0};
Point(105) = {0.037502, -0.736595, 0, 1.0};
Point(106) = {0.037485, -0.736480, 0, 1.0};
Point(107) = {0.037454, -0.736366, 0, 1.0};
Point(108) = {0.037408, -0.736252, 0, 1.0};
Point(109) = {0.037349, -0.736134, 0, 1.0};
Point(110) = {0.037202, -0.735896, 0, 1.0};
Point(111) = {0.037016, -0.735650, 0, 1.0};
Point(112) = {0.036671, -0.735271, 0, 1.0};
Point(113) = {0.035135, -0.734064, 0, 1.0};
Point(114) = {0.032698, -0.732709, 0, 1.0};
Point(115) = {0.029494, -0.731336, 0, 1.0};
Point(116) = {0.025561, -0.729961, 0, 1.0};
Point(117) = {0.020949, -0.728590, 0, 1.0};
Point(118) = {0.015722, -0.727239, 0, 1.0};
Point(119) = {0.009950, -0.725925, 0, 1.0};
Point(120) = {0.003702, -0.724671, 0, 1.0};
Point(121) = {-0.002946, -0.723496, 0, 1.0};
Point(122) = {-0.009913, -0.722420, 0, 1.0};
Point(123) = {-0.017112, -0.721467, 0, 1.0};
Point(124) = {-0.024450, -0.720669, 0, 1.0};
Point(125) = {-0.031837, -0.720089, 0, 1.0};
Point(126) = {-0.039242, -0.719812, 0, 1.0};
Point(127) = {-0.046696, -0.719859, 0, 1.0};
Point(128) = {-0.054215, -0.720177, 0, 1.0};
Point(129) = {-0.061776, -0.720683, 0, 1.0};
Point(130) = {-0.069337, -0.721263, 0, 1.0};
Point(131) = {-0.076791, -0.721776, 0, 1.0};
Point(132) = {-0.083968, -0.722118, 0, 1.0};
Point(133) = {-0.090682, -0.722232, 0, 1.0};
Point(134) = {-0.096746, -0.722096, 0, 1.0};
Point(135) = {-0.101975, -0.721723, 0, 1.0};
Point(136) = {-0.106175, -0.721167, 0, 1.0};
Point(137) = {-0.109186, -0.720573, 0, 1.0};
Point(138) = {-0.110964, -0.720125, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:52};
Spline(3) = {52:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:90};
Spline(6) = {90:121};
Spline(7) = {121:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html