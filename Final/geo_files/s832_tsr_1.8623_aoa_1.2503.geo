SetFactory("OpenCASCADE");

Point(1) = {0.112471, 0.728890, 0, 1.0};
Point(2) = {0.111902, 0.729006, 0, 1.0};
Point(3) = {0.110254, 0.729438, 0, 1.0};
Point(4) = {0.107677, 0.730254, 0, 1.0};
Point(5) = {0.104333, 0.731432, 0, 1.0};
Point(6) = {0.100343, 0.732888, 0, 1.0};
Point(7) = {0.095772, 0.734531, 0, 1.0};
Point(8) = {0.090656, 0.736326, 0, 1.0};
Point(9) = {0.085090, 0.738248, 0, 1.0};
Point(10) = {0.079174, 0.740238, 0, 1.0};
Point(11) = {0.072997, 0.742223, 0, 1.0};
Point(12) = {0.066636, 0.744123, 0, 1.0};
Point(13) = {0.060152, 0.745852, 0, 1.0};
Point(14) = {0.053580, 0.747334, 0, 1.0};
Point(15) = {0.046944, 0.748518, 0, 1.0};
Point(16) = {0.040266, 0.749368, 0, 1.0};
Point(17) = {0.033569, 0.749863, 0, 1.0};
Point(18) = {0.026856, 0.750000, 0, 1.0};
Point(19) = {0.020149, 0.749831, 0, 1.0};
Point(20) = {0.013516, 0.749404, 0, 1.0};
Point(21) = {0.007033, 0.748748, 0, 1.0};
Point(22) = {0.000771, 0.747887, 0, 1.0};
Point(23) = {-0.005200, 0.746846, 0, 1.0};
Point(24) = {-0.010817, 0.745649, 0, 1.0};
Point(25) = {-0.016017, 0.744321, 0, 1.0};
Point(26) = {-0.020745, 0.742886, 0, 1.0};
Point(27) = {-0.024947, 0.741371, 0, 1.0};
Point(28) = {-0.028577, 0.739797, 0, 1.0};
Point(29) = {-0.031615, 0.738189, 0, 1.0};
Point(30) = {-0.034032, 0.736589, 0, 1.0};
Point(31) = {-0.035822, 0.735041, 0, 1.0};
Point(32) = {-0.036969, 0.733612, 0, 1.0};
Point(33) = {-0.037471, 0.732388, 0, 1.0};
Point(34) = {-0.037491, 0.732205, 0, 1.0};
Point(35) = {-0.037482, 0.731974, 0, 1.0};
Point(36) = {-0.037459, 0.731872, 0, 1.0};
Point(37) = {-0.037422, 0.731784, 0, 1.0};
Point(38) = {-0.037361, 0.731706, 0, 1.0};
Point(39) = {-0.037279, 0.731630, 0, 1.0};
Point(40) = {-0.037223, 0.731587, 0, 1.0};
Point(41) = {-0.037060, 0.731481, 0, 1.0};
Point(42) = {-0.035905, 0.731037, 0, 1.0};
Point(43) = {-0.033659, 0.730643, 0, 1.0};
Point(44) = {-0.030428, 0.730377, 0, 1.0};
Point(45) = {-0.026270, 0.730131, 0, 1.0};
Point(46) = {-0.021301, 0.729868, 0, 1.0};
Point(47) = {-0.015602, 0.729580, 0, 1.0};
Point(48) = {-0.009280, 0.729263, 0, 1.0};
Point(49) = {-0.002421, 0.728924, 0, 1.0};
Point(50) = {0.004870, 0.728569, 0, 1.0};
Point(51) = {0.012499, 0.728211, 0, 1.0};
Point(52) = {0.020360, 0.727863, 0, 1.0};
Point(53) = {0.028360, 0.727542, 0, 1.0};
Point(54) = {0.036393, 0.727267, 0, 1.0};
Point(55) = {0.044366, 0.727063, 0, 1.0};
Point(56) = {0.052179, 0.726968, 0, 1.0};
Point(57) = {0.059784, 0.727032, 0, 1.0};
Point(58) = {0.067157, 0.727262, 0, 1.0};
Point(59) = {0.074267, 0.727632, 0, 1.0};
Point(60) = {0.081081, 0.728089, 0, 1.0};
Point(61) = {0.087535, 0.728557, 0, 1.0};
Point(62) = {0.093536, 0.728952, 0, 1.0};
Point(63) = {0.098945, 0.729205, 0, 1.0};
Point(64) = {0.103611, 0.729299, 0, 1.0};
Point(65) = {0.107398, 0.729254, 0, 1.0};
Point(66) = {0.110189, 0.729118, 0, 1.0};
Point(67) = {0.111897, 0.728965, 0, 1.0};
Point(68) = {-0.112471, -0.728890, 0, 1.0};
Point(69) = {-0.111902, -0.729006, 0, 1.0};
Point(70) = {-0.110254, -0.729438, 0, 1.0};
Point(71) = {-0.107677, -0.730254, 0, 1.0};
Point(72) = {-0.104333, -0.731432, 0, 1.0};
Point(73) = {-0.100343, -0.732888, 0, 1.0};
Point(74) = {-0.095772, -0.734531, 0, 1.0};
Point(75) = {-0.090656, -0.736326, 0, 1.0};
Point(76) = {-0.085090, -0.738248, 0, 1.0};
Point(77) = {-0.079174, -0.740238, 0, 1.0};
Point(78) = {-0.072997, -0.742223, 0, 1.0};
Point(79) = {-0.066636, -0.744123, 0, 1.0};
Point(80) = {-0.060152, -0.745852, 0, 1.0};
Point(81) = {-0.053580, -0.747334, 0, 1.0};
Point(82) = {-0.046944, -0.748518, 0, 1.0};
Point(83) = {-0.040266, -0.749368, 0, 1.0};
Point(84) = {-0.033569, -0.749863, 0, 1.0};
Point(85) = {-0.026856, -0.750000, 0, 1.0};
Point(86) = {-0.020149, -0.749831, 0, 1.0};
Point(87) = {-0.013516, -0.749404, 0, 1.0};
Point(88) = {-0.007033, -0.748748, 0, 1.0};
Point(89) = {-0.000771, -0.747887, 0, 1.0};
Point(90) = {0.005200, -0.746846, 0, 1.0};
Point(91) = {0.010817, -0.745649, 0, 1.0};
Point(92) = {0.016017, -0.744321, 0, 1.0};
Point(93) = {0.020745, -0.742886, 0, 1.0};
Point(94) = {0.024947, -0.741371, 0, 1.0};
Point(95) = {0.028577, -0.739797, 0, 1.0};
Point(96) = {0.031615, -0.738189, 0, 1.0};
Point(97) = {0.034032, -0.736589, 0, 1.0};
Point(98) = {0.035822, -0.735041, 0, 1.0};
Point(99) = {0.036969, -0.733612, 0, 1.0};
Point(100) = {0.037471, -0.732388, 0, 1.0};
Point(101) = {0.037491, -0.732205, 0, 1.0};
Point(102) = {0.037482, -0.731974, 0, 1.0};
Point(103) = {0.037459, -0.731872, 0, 1.0};
Point(104) = {0.037422, -0.731784, 0, 1.0};
Point(105) = {0.037361, -0.731706, 0, 1.0};
Point(106) = {0.037279, -0.731630, 0, 1.0};
Point(107) = {0.037223, -0.731587, 0, 1.0};
Point(108) = {0.037060, -0.731481, 0, 1.0};
Point(109) = {0.035905, -0.731037, 0, 1.0};
Point(110) = {0.033659, -0.730643, 0, 1.0};
Point(111) = {0.030428, -0.730377, 0, 1.0};
Point(112) = {0.026270, -0.730131, 0, 1.0};
Point(113) = {0.021301, -0.729868, 0, 1.0};
Point(114) = {0.015602, -0.729580, 0, 1.0};
Point(115) = {0.009280, -0.729263, 0, 1.0};
Point(116) = {0.002421, -0.728924, 0, 1.0};
Point(117) = {-0.004870, -0.728569, 0, 1.0};
Point(118) = {-0.012499, -0.728211, 0, 1.0};
Point(119) = {-0.020360, -0.727863, 0, 1.0};
Point(120) = {-0.028360, -0.727542, 0, 1.0};
Point(121) = {-0.036393, -0.727267, 0, 1.0};
Point(122) = {-0.044366, -0.727063, 0, 1.0};
Point(123) = {-0.052179, -0.726968, 0, 1.0};
Point(124) = {-0.059784, -0.727032, 0, 1.0};
Point(125) = {-0.067157, -0.727262, 0, 1.0};
Point(126) = {-0.074267, -0.727632, 0, 1.0};
Point(127) = {-0.081081, -0.728089, 0, 1.0};
Point(128) = {-0.087535, -0.728557, 0, 1.0};
Point(129) = {-0.093536, -0.728952, 0, 1.0};
Point(130) = {-0.098945, -0.729205, 0, 1.0};
Point(131) = {-0.103611, -0.729299, 0, 1.0};
Point(132) = {-0.107398, -0.729254, 0, 1.0};
Point(133) = {-0.110189, -0.729118, 0, 1.0};
Point(134) = {-0.111897, -0.728965, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html