SetFactory("OpenCASCADE");

Point(1) = {0.149952, 0.721854, 0, 1.0};
Point(2) = {0.149193, 0.722008, 0, 1.0};
Point(3) = {0.146996, 0.722584, 0, 1.0};
Point(4) = {0.143560, 0.723673, 0, 1.0};
Point(5) = {0.139101, 0.725242, 0, 1.0};
Point(6) = {0.133782, 0.727184, 0, 1.0};
Point(7) = {0.127687, 0.729375, 0, 1.0};
Point(8) = {0.120866, 0.731767, 0, 1.0};
Point(9) = {0.113444, 0.734331, 0, 1.0};
Point(10) = {0.105556, 0.736984, 0, 1.0};
Point(11) = {0.097320, 0.739631, 0, 1.0};
Point(12) = {0.088839, 0.742164, 0, 1.0};
Point(13) = {0.080194, 0.744469, 0, 1.0};
Point(14) = {0.071430, 0.746446, 0, 1.0};
Point(15) = {0.062582, 0.748024, 0, 1.0};
Point(16) = {0.053678, 0.749158, 0, 1.0};
Point(17) = {0.044749, 0.749817, 0, 1.0};
Point(18) = {0.035798, 0.750000, 0, 1.0};
Point(19) = {0.026855, 0.749775, 0, 1.0};
Point(20) = {0.018011, 0.749205, 0, 1.0};
Point(21) = {0.009368, 0.748330, 0, 1.0};
Point(22) = {0.001019, 0.747183, 0, 1.0};
Point(23) = {-0.006943, 0.745795, 0, 1.0};
Point(24) = {-0.014433, 0.744198, 0, 1.0};
Point(25) = {-0.021366, 0.742427, 0, 1.0};
Point(26) = {-0.027670, 0.740514, 0, 1.0};
Point(27) = {-0.033272, 0.738495, 0, 1.0};
Point(28) = {-0.038112, 0.736396, 0, 1.0};
Point(29) = {-0.042163, 0.734252, 0, 1.0};
Point(30) = {-0.045386, 0.732119, 0, 1.0};
Point(31) = {-0.047773, 0.730054, 0, 1.0};
Point(32) = {-0.049301, 0.728149, 0, 1.0};
Point(33) = {-0.049971, 0.726518, 0, 1.0};
Point(34) = {-0.049998, 0.726273, 0, 1.0};
Point(35) = {-0.049986, 0.725965, 0, 1.0};
Point(36) = {-0.049956, 0.725830, 0, 1.0};
Point(37) = {-0.049906, 0.725711, 0, 1.0};
Point(38) = {-0.049825, 0.725608, 0, 1.0};
Point(39) = {-0.049715, 0.725506, 0, 1.0};
Point(40) = {-0.049640, 0.725449, 0, 1.0};
Point(41) = {-0.049423, 0.725308, 0, 1.0};
Point(42) = {-0.047883, 0.724716, 0, 1.0};
Point(43) = {-0.044888, 0.724190, 0, 1.0};
Point(44) = {-0.040581, 0.723836, 0, 1.0};
Point(45) = {-0.035036, 0.723508, 0, 1.0};
Point(46) = {-0.028411, 0.723157, 0, 1.0};
Point(47) = {-0.020813, 0.722773, 0, 1.0};
Point(48) = {-0.012383, 0.722351, 0, 1.0};
Point(49) = {-0.003238, 0.721899, 0, 1.0};
Point(50) = {0.006483, 0.721425, 0, 1.0};
Point(51) = {0.016655, 0.720948, 0, 1.0};
Point(52) = {0.027138, 0.720484, 0, 1.0};
Point(53) = {0.037804, 0.720056, 0, 1.0};
Point(54) = {0.048515, 0.719690, 0, 1.0};
Point(55) = {0.059145, 0.719418, 0, 1.0};
Point(56) = {0.069563, 0.719290, 0, 1.0};
Point(57) = {0.079703, 0.719376, 0, 1.0};
Point(58) = {0.089533, 0.719682, 0, 1.0};
Point(59) = {0.099014, 0.720176, 0, 1.0};
Point(60) = {0.108099, 0.720785, 0, 1.0};
Point(61) = {0.116704, 0.721409, 0, 1.0};
Point(62) = {0.124705, 0.721936, 0, 1.0};
Point(63) = {0.131917, 0.722273, 0, 1.0};
Point(64) = {0.138139, 0.722399, 0, 1.0};
Point(65) = {0.143188, 0.722339, 0, 1.0};
Point(66) = {0.146910, 0.722157, 0, 1.0};
Point(67) = {0.149187, 0.721953, 0, 1.0};
Point(68) = {-0.149952, -0.721854, 0, 1.0};
Point(69) = {-0.149193, -0.722008, 0, 1.0};
Point(70) = {-0.146996, -0.722584, 0, 1.0};
Point(71) = {-0.143560, -0.723673, 0, 1.0};
Point(72) = {-0.139101, -0.725242, 0, 1.0};
Point(73) = {-0.133782, -0.727184, 0, 1.0};
Point(74) = {-0.127687, -0.729375, 0, 1.0};
Point(75) = {-0.120866, -0.731767, 0, 1.0};
Point(76) = {-0.113444, -0.734331, 0, 1.0};
Point(77) = {-0.105556, -0.736984, 0, 1.0};
Point(78) = {-0.097320, -0.739631, 0, 1.0};
Point(79) = {-0.088839, -0.742164, 0, 1.0};
Point(80) = {-0.080194, -0.744469, 0, 1.0};
Point(81) = {-0.071430, -0.746446, 0, 1.0};
Point(82) = {-0.062582, -0.748024, 0, 1.0};
Point(83) = {-0.053678, -0.749158, 0, 1.0};
Point(84) = {-0.044749, -0.749817, 0, 1.0};
Point(85) = {-0.035798, -0.750000, 0, 1.0};
Point(86) = {-0.026855, -0.749775, 0, 1.0};
Point(87) = {-0.018011, -0.749205, 0, 1.0};
Point(88) = {-0.009368, -0.748330, 0, 1.0};
Point(89) = {-0.001019, -0.747183, 0, 1.0};
Point(90) = {0.006943, -0.745795, 0, 1.0};
Point(91) = {0.014433, -0.744198, 0, 1.0};
Point(92) = {0.021366, -0.742427, 0, 1.0};
Point(93) = {0.027670, -0.740514, 0, 1.0};
Point(94) = {0.033272, -0.738495, 0, 1.0};
Point(95) = {0.038112, -0.736396, 0, 1.0};
Point(96) = {0.042163, -0.734252, 0, 1.0};
Point(97) = {0.045386, -0.732119, 0, 1.0};
Point(98) = {0.047773, -0.730054, 0, 1.0};
Point(99) = {0.049301, -0.728149, 0, 1.0};
Point(100) = {0.049971, -0.726518, 0, 1.0};
Point(101) = {0.049998, -0.726273, 0, 1.0};
Point(102) = {0.049986, -0.725965, 0, 1.0};
Point(103) = {0.049956, -0.725830, 0, 1.0};
Point(104) = {0.049906, -0.725711, 0, 1.0};
Point(105) = {0.049825, -0.725608, 0, 1.0};
Point(106) = {0.049715, -0.725506, 0, 1.0};
Point(107) = {0.049640, -0.725449, 0, 1.0};
Point(108) = {0.049423, -0.725308, 0, 1.0};
Point(109) = {0.047883, -0.724716, 0, 1.0};
Point(110) = {0.044888, -0.724190, 0, 1.0};
Point(111) = {0.040581, -0.723836, 0, 1.0};
Point(112) = {0.035036, -0.723508, 0, 1.0};
Point(113) = {0.028411, -0.723157, 0, 1.0};
Point(114) = {0.020813, -0.722773, 0, 1.0};
Point(115) = {0.012383, -0.722351, 0, 1.0};
Point(116) = {0.003238, -0.721899, 0, 1.0};
Point(117) = {-0.006483, -0.721425, 0, 1.0};
Point(118) = {-0.016655, -0.720948, 0, 1.0};
Point(119) = {-0.027138, -0.720484, 0, 1.0};
Point(120) = {-0.037804, -0.720056, 0, 1.0};
Point(121) = {-0.048515, -0.719690, 0, 1.0};
Point(122) = {-0.059145, -0.719418, 0, 1.0};
Point(123) = {-0.069563, -0.719290, 0, 1.0};
Point(124) = {-0.079703, -0.719376, 0, 1.0};
Point(125) = {-0.089533, -0.719682, 0, 1.0};
Point(126) = {-0.099014, -0.720176, 0, 1.0};
Point(127) = {-0.108099, -0.720785, 0, 1.0};
Point(128) = {-0.116704, -0.721409, 0, 1.0};
Point(129) = {-0.124705, -0.721936, 0, 1.0};
Point(130) = {-0.131917, -0.722273, 0, 1.0};
Point(131) = {-0.138139, -0.722399, 0, 1.0};
Point(132) = {-0.143188, -0.722339, 0, 1.0};
Point(133) = {-0.146910, -0.722157, 0, 1.0};
Point(134) = {-0.149187, -0.721953, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html