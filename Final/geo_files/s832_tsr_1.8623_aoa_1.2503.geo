SetFactory("OpenCASCADE");

Point(1) = {0.074976, 0.735927, 0, 1.0};
Point(2) = {0.074597, 0.736004, 0, 1.0};
Point(3) = {0.073498, 0.736292, 0, 1.0};
Point(4) = {0.071780, 0.736836, 0, 1.0};
Point(5) = {0.069551, 0.737621, 0, 1.0};
Point(6) = {0.066891, 0.738592, 0, 1.0};
Point(7) = {0.063844, 0.739688, 0, 1.0};
Point(8) = {0.060433, 0.740884, 0, 1.0};
Point(9) = {0.056722, 0.742165, 0, 1.0};
Point(10) = {0.052778, 0.743492, 0, 1.0};
Point(11) = {0.048660, 0.744815, 0, 1.0};
Point(12) = {0.044419, 0.746082, 0, 1.0};
Point(13) = {0.040097, 0.747235, 0, 1.0};
Point(14) = {0.035715, 0.748223, 0, 1.0};
Point(15) = {0.031291, 0.749012, 0, 1.0};
Point(16) = {0.026839, 0.749579, 0, 1.0};
Point(17) = {0.022375, 0.749908, 0, 1.0};
Point(18) = {0.017899, 0.750000, 0, 1.0};
Point(19) = {0.013428, 0.749887, 0, 1.0};
Point(20) = {0.009006, 0.749602, 0, 1.0};
Point(21) = {0.004684, 0.749165, 0, 1.0};
Point(22) = {0.000509, 0.748591, 0, 1.0};
Point(23) = {-0.003471, 0.747898, 0, 1.0};
Point(24) = {-0.007216, 0.747099, 0, 1.0};
Point(25) = {-0.010683, 0.746214, 0, 1.0};
Point(26) = {-0.013835, 0.745257, 0, 1.0};
Point(27) = {-0.016636, 0.744247, 0, 1.0};
Point(28) = {-0.019056, 0.743198, 0, 1.0};
Point(29) = {-0.021081, 0.742126, 0, 1.0};
Point(30) = {-0.022693, 0.741060, 0, 1.0};
Point(31) = {-0.023887, 0.740027, 0, 1.0};
Point(32) = {-0.024651, 0.739075, 0, 1.0};
Point(33) = {-0.024985, 0.738259, 0, 1.0};
Point(34) = {-0.024999, 0.738137, 0, 1.0};
Point(35) = {-0.024993, 0.737983, 0, 1.0};
Point(36) = {-0.024978, 0.737915, 0, 1.0};
Point(37) = {-0.024953, 0.737856, 0, 1.0};
Point(38) = {-0.024913, 0.737804, 0, 1.0};
Point(39) = {-0.024857, 0.737753, 0, 1.0};
Point(40) = {-0.024820, 0.737724, 0, 1.0};
Point(41) = {-0.024712, 0.737654, 0, 1.0};
Point(42) = {-0.023942, 0.737358, 0, 1.0};
Point(43) = {-0.022444, 0.737095, 0, 1.0};
Point(44) = {-0.020290, 0.736918, 0, 1.0};
Point(45) = {-0.017518, 0.736754, 0, 1.0};
Point(46) = {-0.014205, 0.736578, 0, 1.0};
Point(47) = {-0.010406, 0.736386, 0, 1.0};
Point(48) = {-0.006191, 0.736176, 0, 1.0};
Point(49) = {-0.001619, 0.735949, 0, 1.0};
Point(50) = {0.003242, 0.735713, 0, 1.0};
Point(51) = {0.008328, 0.735474, 0, 1.0};
Point(52) = {0.013569, 0.735242, 0, 1.0};
Point(53) = {0.018902, 0.735028, 0, 1.0};
Point(54) = {0.024257, 0.734845, 0, 1.0};
Point(55) = {0.029572, 0.734709, 0, 1.0};
Point(56) = {0.034781, 0.734645, 0, 1.0};
Point(57) = {0.039852, 0.734688, 0, 1.0};
Point(58) = {0.044767, 0.734841, 0, 1.0};
Point(59) = {0.049507, 0.735088, 0, 1.0};
Point(60) = {0.054050, 0.735393, 0, 1.0};
Point(61) = {0.058352, 0.735705, 0, 1.0};
Point(62) = {0.062353, 0.735968, 0, 1.0};
Point(63) = {0.065959, 0.736137, 0, 1.0};
Point(64) = {0.069069, 0.736200, 0, 1.0};
Point(65) = {0.071594, 0.736169, 0, 1.0};
Point(66) = {0.073455, 0.736078, 0, 1.0};
Point(67) = {0.074594, 0.735977, 0, 1.0};
Point(68) = {-0.074976, -0.735927, 0, 1.0};
Point(69) = {-0.074597, -0.736004, 0, 1.0};
Point(70) = {-0.073498, -0.736292, 0, 1.0};
Point(71) = {-0.071780, -0.736836, 0, 1.0};
Point(72) = {-0.069551, -0.737621, 0, 1.0};
Point(73) = {-0.066891, -0.738592, 0, 1.0};
Point(74) = {-0.063844, -0.739688, 0, 1.0};
Point(75) = {-0.060433, -0.740884, 0, 1.0};
Point(76) = {-0.056722, -0.742165, 0, 1.0};
Point(77) = {-0.052778, -0.743492, 0, 1.0};
Point(78) = {-0.048660, -0.744815, 0, 1.0};
Point(79) = {-0.044419, -0.746082, 0, 1.0};
Point(80) = {-0.040097, -0.747235, 0, 1.0};
Point(81) = {-0.035715, -0.748223, 0, 1.0};
Point(82) = {-0.031291, -0.749012, 0, 1.0};
Point(83) = {-0.026839, -0.749579, 0, 1.0};
Point(84) = {-0.022375, -0.749908, 0, 1.0};
Point(85) = {-0.017899, -0.750000, 0, 1.0};
Point(86) = {-0.013428, -0.749887, 0, 1.0};
Point(87) = {-0.009006, -0.749602, 0, 1.0};
Point(88) = {-0.004684, -0.749165, 0, 1.0};
Point(89) = {-0.000509, -0.748591, 0, 1.0};
Point(90) = {0.003471, -0.747898, 0, 1.0};
Point(91) = {0.007216, -0.747099, 0, 1.0};
Point(92) = {0.010683, -0.746214, 0, 1.0};
Point(93) = {0.013835, -0.745257, 0, 1.0};
Point(94) = {0.016636, -0.744247, 0, 1.0};
Point(95) = {0.019056, -0.743198, 0, 1.0};
Point(96) = {0.021081, -0.742126, 0, 1.0};
Point(97) = {0.022693, -0.741060, 0, 1.0};
Point(98) = {0.023887, -0.740027, 0, 1.0};
Point(99) = {0.024651, -0.739075, 0, 1.0};
Point(100) = {0.024985, -0.738259, 0, 1.0};
Point(101) = {0.024999, -0.738137, 0, 1.0};
Point(102) = {0.024993, -0.737983, 0, 1.0};
Point(103) = {0.024978, -0.737915, 0, 1.0};
Point(104) = {0.024953, -0.737856, 0, 1.0};
Point(105) = {0.024913, -0.737804, 0, 1.0};
Point(106) = {0.024857, -0.737753, 0, 1.0};
Point(107) = {0.024820, -0.737724, 0, 1.0};
Point(108) = {0.024712, -0.737654, 0, 1.0};
Point(109) = {0.023942, -0.737358, 0, 1.0};
Point(110) = {0.022444, -0.737095, 0, 1.0};
Point(111) = {0.020290, -0.736918, 0, 1.0};
Point(112) = {0.017518, -0.736754, 0, 1.0};
Point(113) = {0.014205, -0.736578, 0, 1.0};
Point(114) = {0.010406, -0.736386, 0, 1.0};
Point(115) = {0.006191, -0.736176, 0, 1.0};
Point(116) = {0.001619, -0.735949, 0, 1.0};
Point(117) = {-0.003242, -0.735713, 0, 1.0};
Point(118) = {-0.008328, -0.735474, 0, 1.0};
Point(119) = {-0.013569, -0.735242, 0, 1.0};
Point(120) = {-0.018902, -0.735028, 0, 1.0};
Point(121) = {-0.024257, -0.734845, 0, 1.0};
Point(122) = {-0.029572, -0.734709, 0, 1.0};
Point(123) = {-0.034781, -0.734645, 0, 1.0};
Point(124) = {-0.039852, -0.734688, 0, 1.0};
Point(125) = {-0.044767, -0.734841, 0, 1.0};
Point(126) = {-0.049507, -0.735088, 0, 1.0};
Point(127) = {-0.054050, -0.735393, 0, 1.0};
Point(128) = {-0.058352, -0.735705, 0, 1.0};
Point(129) = {-0.062353, -0.735968, 0, 1.0};
Point(130) = {-0.065959, -0.736137, 0, 1.0};
Point(131) = {-0.069069, -0.736200, 0, 1.0};
Point(132) = {-0.071594, -0.736169, 0, 1.0};
Point(133) = {-0.073455, -0.736078, 0, 1.0};
Point(134) = {-0.074594, -0.735977, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html