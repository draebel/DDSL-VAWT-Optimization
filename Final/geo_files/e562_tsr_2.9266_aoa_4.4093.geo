SetFactory("OpenCASCADE");

Point(1) = {0.112125, 0.725934, 0, 1.0};
Point(2) = {0.111619, 0.726158, 0, 1.0};
Point(3) = {0.110231, 0.726831, 0, 1.0};
Point(4) = {0.108160, 0.727842, 0, 1.0};
Point(5) = {0.105438, 0.729004, 0, 1.0};
Point(6) = {0.101991, 0.730250, 0, 1.0};
Point(7) = {0.097818, 0.731613, 0, 1.0};
Point(8) = {0.092988, 0.733095, 0, 1.0};
Point(9) = {0.087569, 0.734676, 0, 1.0};
Point(10) = {0.081634, 0.736335, 0, 1.0};
Point(11) = {0.075263, 0.738042, 0, 1.0};
Point(12) = {0.068537, 0.739764, 0, 1.0};
Point(13) = {0.061538, 0.741465, 0, 1.0};
Point(14) = {0.054348, 0.743108, 0, 1.0};
Point(15) = {0.047049, 0.744656, 0, 1.0};
Point(16) = {0.039718, 0.746071, 0, 1.0};
Point(17) = {0.032429, 0.747318, 0, 1.0};
Point(18) = {0.025253, 0.748363, 0, 1.0};
Point(19) = {0.018256, 0.749176, 0, 1.0};
Point(20) = {0.011500, 0.749730, 0, 1.0};
Point(21) = {0.005034, 0.750000, 0, 1.0};
Point(22) = {-0.001105, 0.749975, 0, 1.0};
Point(23) = {-0.006883, 0.749657, 0, 1.0};
Point(24) = {-0.012267, 0.749063, 0, 1.0};
Point(25) = {-0.017222, 0.748213, 0, 1.0};
Point(26) = {-0.021718, 0.747141, 0, 1.0};
Point(27) = {-0.025716, 0.745888, 0, 1.0};
Point(28) = {-0.029179, 0.744492, 0, 1.0};
Point(29) = {-0.032076, 0.742995, 0, 1.0};
Point(30) = {-0.034377, 0.741439, 0, 1.0};
Point(31) = {-0.036058, 0.739884, 0, 1.0};
Point(32) = {-0.037088, 0.738399, 0, 1.0};
Point(33) = {-0.037389, 0.737116, 0, 1.0};
Point(34) = {-0.036775, 0.735925, 0, 1.0};
Point(35) = {-0.035275, 0.734662, 0, 1.0};
Point(36) = {-0.033050, 0.733380, 0, 1.0};
Point(37) = {-0.030138, 0.732137, 0, 1.0};
Point(38) = {-0.026571, 0.730972, 0, 1.0};
Point(39) = {-0.022390, 0.729938, 0, 1.0};
Point(40) = {-0.017624, 0.729035, 0, 1.0};
Point(41) = {-0.012300, 0.728331, 0, 1.0};
Point(42) = {-0.006441, 0.727840, 0, 1.0};
Point(43) = {-0.000073, 0.727567, 0, 1.0};
Point(44) = {0.006776, 0.727503, 0, 1.0};
Point(45) = {0.014069, 0.727628, 0, 1.0};
Point(46) = {0.021762, 0.727911, 0, 1.0};
Point(47) = {0.029810, 0.728294, 0, 1.0};
Point(48) = {0.038125, 0.728689, 0, 1.0};
Point(49) = {0.046577, 0.729035, 0, 1.0};
Point(50) = {0.055032, 0.729294, 0, 1.0};
Point(51) = {0.063355, 0.729440, 0, 1.0};
Point(52) = {0.071413, 0.729455, 0, 1.0};
Point(53) = {0.079072, 0.729333, 0, 1.0};
Point(54) = {0.086206, 0.729076, 0, 1.0};
Point(55) = {0.092689, 0.728693, 0, 1.0};
Point(56) = {0.098410, 0.728205, 0, 1.0};
Point(57) = {0.103257, 0.727641, 0, 1.0};
Point(58) = {0.107120, 0.727037, 0, 1.0};
Point(59) = {0.109905, 0.726481, 0, 1.0};
Point(60) = {0.111571, 0.726082, 0, 1.0};
Point(61) = {-0.112125, -0.725934, 0, 1.0};
Point(62) = {-0.111619, -0.726158, 0, 1.0};
Point(63) = {-0.110231, -0.726831, 0, 1.0};
Point(64) = {-0.108160, -0.727842, 0, 1.0};
Point(65) = {-0.105438, -0.729004, 0, 1.0};
Point(66) = {-0.101991, -0.730250, 0, 1.0};
Point(67) = {-0.097818, -0.731613, 0, 1.0};
Point(68) = {-0.092988, -0.733095, 0, 1.0};
Point(69) = {-0.087569, -0.734676, 0, 1.0};
Point(70) = {-0.081634, -0.736335, 0, 1.0};
Point(71) = {-0.075263, -0.738042, 0, 1.0};
Point(72) = {-0.068537, -0.739764, 0, 1.0};
Point(73) = {-0.061538, -0.741465, 0, 1.0};
Point(74) = {-0.054348, -0.743108, 0, 1.0};
Point(75) = {-0.047049, -0.744656, 0, 1.0};
Point(76) = {-0.039718, -0.746071, 0, 1.0};
Point(77) = {-0.032429, -0.747318, 0, 1.0};
Point(78) = {-0.025253, -0.748363, 0, 1.0};
Point(79) = {-0.018256, -0.749176, 0, 1.0};
Point(80) = {-0.011500, -0.749730, 0, 1.0};
Point(81) = {-0.005034, -0.750000, 0, 1.0};
Point(82) = {0.001105, -0.749975, 0, 1.0};
Point(83) = {0.006883, -0.749657, 0, 1.0};
Point(84) = {0.012267, -0.749063, 0, 1.0};
Point(85) = {0.017222, -0.748213, 0, 1.0};
Point(86) = {0.021718, -0.747141, 0, 1.0};
Point(87) = {0.025716, -0.745888, 0, 1.0};
Point(88) = {0.029179, -0.744492, 0, 1.0};
Point(89) = {0.032076, -0.742995, 0, 1.0};
Point(90) = {0.034377, -0.741439, 0, 1.0};
Point(91) = {0.036058, -0.739884, 0, 1.0};
Point(92) = {0.037088, -0.738399, 0, 1.0};
Point(93) = {0.037389, -0.737116, 0, 1.0};
Point(94) = {0.036775, -0.735925, 0, 1.0};
Point(95) = {0.035275, -0.734662, 0, 1.0};
Point(96) = {0.033050, -0.733380, 0, 1.0};
Point(97) = {0.030138, -0.732137, 0, 1.0};
Point(98) = {0.026571, -0.730972, 0, 1.0};
Point(99) = {0.022390, -0.729938, 0, 1.0};
Point(100) = {0.017624, -0.729035, 0, 1.0};
Point(101) = {0.012300, -0.728331, 0, 1.0};
Point(102) = {0.006441, -0.727840, 0, 1.0};
Point(103) = {0.000073, -0.727567, 0, 1.0};
Point(104) = {-0.006776, -0.727503, 0, 1.0};
Point(105) = {-0.014069, -0.727628, 0, 1.0};
Point(106) = {-0.021762, -0.727911, 0, 1.0};
Point(107) = {-0.029810, -0.728294, 0, 1.0};
Point(108) = {-0.038125, -0.728689, 0, 1.0};
Point(109) = {-0.046577, -0.729035, 0, 1.0};
Point(110) = {-0.055032, -0.729294, 0, 1.0};
Point(111) = {-0.063355, -0.729440, 0, 1.0};
Point(112) = {-0.071413, -0.729455, 0, 1.0};
Point(113) = {-0.079072, -0.729333, 0, 1.0};
Point(114) = {-0.086206, -0.729076, 0, 1.0};
Point(115) = {-0.092689, -0.728693, 0, 1.0};
Point(116) = {-0.098410, -0.728205, 0, 1.0};
Point(117) = {-0.103257, -0.727641, 0, 1.0};
Point(118) = {-0.107120, -0.727037, 0, 1.0};
Point(119) = {-0.109905, -0.726481, 0, 1.0};
Point(120) = {-0.111571, -0.726082, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html