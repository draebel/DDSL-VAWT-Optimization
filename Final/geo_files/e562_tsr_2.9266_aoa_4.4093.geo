SetFactory("OpenCASCADE");

Point(1) = {0.149408, 0.717905, 0, 1.0};
Point(2) = {0.148733, 0.718203, 0, 1.0};
Point(3) = {0.146883, 0.719100, 0, 1.0};
Point(4) = {0.144120, 0.720449, 0, 1.0};
Point(5) = {0.140490, 0.721998, 0, 1.0};
Point(6) = {0.135893, 0.723661, 0, 1.0};
Point(7) = {0.130328, 0.725478, 0, 1.0};
Point(8) = {0.123887, 0.727455, 0, 1.0};
Point(9) = {0.116659, 0.729563, 0, 1.0};
Point(10) = {0.108744, 0.731776, 0, 1.0};
Point(11) = {0.100248, 0.734052, 0, 1.0};
Point(12) = {0.091278, 0.736348, 0, 1.0};
Point(13) = {0.081943, 0.738617, 0, 1.0};
Point(14) = {0.072355, 0.740808, 0, 1.0};
Point(15) = {0.062621, 0.742873, 0, 1.0};
Point(16) = {0.052843, 0.744760, 0, 1.0};
Point(17) = {0.043122, 0.746423, 0, 1.0};
Point(18) = {0.033553, 0.747816, 0, 1.0};
Point(19) = {0.024221, 0.748901, 0, 1.0};
Point(20) = {0.015211, 0.749640, 0, 1.0};
Point(21) = {0.006587, 0.750000, 0, 1.0};
Point(22) = {-0.001600, 0.749967, 0, 1.0};
Point(23) = {-0.009305, 0.749542, 0, 1.0};
Point(24) = {-0.016486, 0.748750, 0, 1.0};
Point(25) = {-0.023094, 0.747617, 0, 1.0};
Point(26) = {-0.029090, 0.746188, 0, 1.0};
Point(27) = {-0.034422, 0.744517, 0, 1.0};
Point(28) = {-0.039041, 0.742654, 0, 1.0};
Point(29) = {-0.042904, 0.740657, 0, 1.0};
Point(30) = {-0.045972, 0.738583, 0, 1.0};
Point(31) = {-0.048215, 0.736509, 0, 1.0};
Point(32) = {-0.049589, 0.734529, 0, 1.0};
Point(33) = {-0.049990, 0.732817, 0, 1.0};
Point(34) = {-0.049171, 0.731229, 0, 1.0};
Point(35) = {-0.047171, 0.729544, 0, 1.0};
Point(36) = {-0.044204, 0.727835, 0, 1.0};
Point(37) = {-0.040319, 0.726178, 0, 1.0};
Point(38) = {-0.035563, 0.724623, 0, 1.0};
Point(39) = {-0.029986, 0.723245, 0, 1.0};
Point(40) = {-0.023630, 0.722040, 0, 1.0};
Point(41) = {-0.016529, 0.721102, 0, 1.0};
Point(42) = {-0.008717, 0.720447, 0, 1.0};
Point(43) = {-0.000223, 0.720083, 0, 1.0};
Point(44) = {0.008911, 0.719997, 0, 1.0};
Point(45) = {0.018637, 0.720163, 0, 1.0};
Point(46) = {0.028896, 0.720542, 0, 1.0};
Point(47) = {0.039629, 0.721052, 0, 1.0};
Point(48) = {0.050718, 0.721579, 0, 1.0};
Point(49) = {0.061991, 0.722040, 0, 1.0};
Point(50) = {0.073267, 0.722386, 0, 1.0};
Point(51) = {0.084367, 0.722581, 0, 1.0};
Point(52) = {0.095112, 0.722601, 0, 1.0};
Point(53) = {0.105328, 0.722437, 0, 1.0};
Point(54) = {0.114842, 0.722095, 0, 1.0};
Point(55) = {0.123488, 0.721584, 0, 1.0};
Point(56) = {0.131117, 0.720934, 0, 1.0};
Point(57) = {0.137582, 0.720181, 0, 1.0};
Point(58) = {0.142733, 0.719376, 0, 1.0};
Point(59) = {0.146447, 0.718634, 0, 1.0};
Point(60) = {0.148669, 0.718102, 0, 1.0};
Point(61) = {-0.149408, -0.717905, 0, 1.0};
Point(62) = {-0.148733, -0.718203, 0, 1.0};
Point(63) = {-0.146883, -0.719100, 0, 1.0};
Point(64) = {-0.144120, -0.720449, 0, 1.0};
Point(65) = {-0.140490, -0.721998, 0, 1.0};
Point(66) = {-0.135893, -0.723661, 0, 1.0};
Point(67) = {-0.130328, -0.725478, 0, 1.0};
Point(68) = {-0.123887, -0.727455, 0, 1.0};
Point(69) = {-0.116659, -0.729563, 0, 1.0};
Point(70) = {-0.108744, -0.731776, 0, 1.0};
Point(71) = {-0.100248, -0.734052, 0, 1.0};
Point(72) = {-0.091278, -0.736348, 0, 1.0};
Point(73) = {-0.081943, -0.738617, 0, 1.0};
Point(74) = {-0.072355, -0.740808, 0, 1.0};
Point(75) = {-0.062621, -0.742873, 0, 1.0};
Point(76) = {-0.052843, -0.744760, 0, 1.0};
Point(77) = {-0.043122, -0.746423, 0, 1.0};
Point(78) = {-0.033553, -0.747816, 0, 1.0};
Point(79) = {-0.024221, -0.748901, 0, 1.0};
Point(80) = {-0.015211, -0.749640, 0, 1.0};
Point(81) = {-0.006587, -0.750000, 0, 1.0};
Point(82) = {0.001600, -0.749967, 0, 1.0};
Point(83) = {0.009305, -0.749542, 0, 1.0};
Point(84) = {0.016486, -0.748750, 0, 1.0};
Point(85) = {0.023094, -0.747617, 0, 1.0};
Point(86) = {0.029090, -0.746188, 0, 1.0};
Point(87) = {0.034422, -0.744517, 0, 1.0};
Point(88) = {0.039041, -0.742654, 0, 1.0};
Point(89) = {0.042904, -0.740657, 0, 1.0};
Point(90) = {0.045972, -0.738583, 0, 1.0};
Point(91) = {0.048215, -0.736509, 0, 1.0};
Point(92) = {0.049589, -0.734529, 0, 1.0};
Point(93) = {0.049990, -0.732817, 0, 1.0};
Point(94) = {0.049171, -0.731229, 0, 1.0};
Point(95) = {0.047171, -0.729544, 0, 1.0};
Point(96) = {0.044204, -0.727835, 0, 1.0};
Point(97) = {0.040319, -0.726178, 0, 1.0};
Point(98) = {0.035563, -0.724623, 0, 1.0};
Point(99) = {0.029986, -0.723245, 0, 1.0};
Point(100) = {0.023630, -0.722040, 0, 1.0};
Point(101) = {0.016529, -0.721102, 0, 1.0};
Point(102) = {0.008717, -0.720447, 0, 1.0};
Point(103) = {0.000223, -0.720083, 0, 1.0};
Point(104) = {-0.008911, -0.719997, 0, 1.0};
Point(105) = {-0.018637, -0.720163, 0, 1.0};
Point(106) = {-0.028896, -0.720542, 0, 1.0};
Point(107) = {-0.039629, -0.721052, 0, 1.0};
Point(108) = {-0.050718, -0.721579, 0, 1.0};
Point(109) = {-0.061991, -0.722040, 0, 1.0};
Point(110) = {-0.073267, -0.722386, 0, 1.0};
Point(111) = {-0.084367, -0.722581, 0, 1.0};
Point(112) = {-0.095112, -0.722601, 0, 1.0};
Point(113) = {-0.105328, -0.722437, 0, 1.0};
Point(114) = {-0.114842, -0.722095, 0, 1.0};
Point(115) = {-0.123488, -0.721584, 0, 1.0};
Point(116) = {-0.131117, -0.720934, 0, 1.0};
Point(117) = {-0.137582, -0.720181, 0, 1.0};
Point(118) = {-0.142733, -0.719376, 0, 1.0};
Point(119) = {-0.146447, -0.718634, 0, 1.0};
Point(120) = {-0.148669, -0.718102, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html