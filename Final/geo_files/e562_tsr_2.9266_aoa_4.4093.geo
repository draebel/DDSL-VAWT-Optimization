SetFactory("OpenCASCADE");

Point(1) = {0.112056, 0.725929, 0, 1.0};
Point(2) = {0.111550, 0.726153, 0, 1.0};
Point(3) = {0.110162, 0.726825, 0, 1.0};
Point(4) = {0.108090, 0.727837, 0, 1.0};
Point(5) = {0.105368, 0.728999, 0, 1.0};
Point(6) = {0.101919, 0.730246, 0, 1.0};
Point(7) = {0.097746, 0.731609, 0, 1.0};
Point(8) = {0.092915, 0.733091, 0, 1.0};
Point(9) = {0.087495, 0.734672, 0, 1.0};
Point(10) = {0.081558, 0.736332, 0, 1.0};
Point(11) = {0.075186, 0.738039, 0, 1.0};
Point(12) = {0.068458, 0.739761, 0, 1.0};
Point(13) = {0.061457, 0.741463, 0, 1.0};
Point(14) = {0.054266, 0.743106, 0, 1.0};
Point(15) = {0.046966, 0.744655, 0, 1.0};
Point(16) = {0.039632, 0.746070, 0, 1.0};
Point(17) = {0.032341, 0.747317, 0, 1.0};
Point(18) = {0.025165, 0.748362, 0, 1.0};
Point(19) = {0.018165, 0.749176, 0, 1.0};
Point(20) = {0.011408, 0.749730, 0, 1.0};
Point(21) = {0.004940, 0.750000, 0, 1.0};
Point(22) = {-0.001200, 0.749975, 0, 1.0};
Point(23) = {-0.006979, 0.749657, 0, 1.0};
Point(24) = {-0.012364, 0.749063, 0, 1.0};
Point(25) = {-0.017321, 0.748213, 0, 1.0};
Point(26) = {-0.021817, 0.747141, 0, 1.0};
Point(27) = {-0.025817, 0.745887, 0, 1.0};
Point(28) = {-0.029281, 0.744491, 0, 1.0};
Point(29) = {-0.032178, 0.742993, 0, 1.0};
Point(30) = {-0.034479, 0.741437, 0, 1.0};
Point(31) = {-0.036161, 0.739882, 0, 1.0};
Point(32) = {-0.037192, 0.738397, 0, 1.0};
Point(33) = {-0.037492, 0.737113, 0, 1.0};
Point(34) = {-0.036878, 0.735922, 0, 1.0};
Point(35) = {-0.035378, 0.734658, 0, 1.0};
Point(36) = {-0.033153, 0.733376, 0, 1.0};
Point(37) = {-0.030240, 0.732133, 0, 1.0};
Point(38) = {-0.026672, 0.730968, 0, 1.0};
Point(39) = {-0.022490, 0.729933, 0, 1.0};
Point(40) = {-0.017723, 0.729030, 0, 1.0};
Point(41) = {-0.012397, 0.728326, 0, 1.0};
Point(42) = {-0.006537, 0.727835, 0, 1.0};
Point(43) = {-0.000168, 0.727562, 0, 1.0};
Point(44) = {0.006683, 0.727497, 0, 1.0};
Point(45) = {0.013977, 0.727622, 0, 1.0};
Point(46) = {0.021672, 0.727906, 0, 1.0};
Point(47) = {0.029722, 0.728289, 0, 1.0};
Point(48) = {0.038039, 0.728684, 0, 1.0};
Point(49) = {0.046493, 0.729030, 0, 1.0};
Point(50) = {0.054950, 0.729289, 0, 1.0};
Point(51) = {0.063275, 0.729436, 0, 1.0};
Point(52) = {0.071334, 0.729451, 0, 1.0};
Point(53) = {0.078996, 0.729328, 0, 1.0};
Point(54) = {0.086131, 0.729071, 0, 1.0};
Point(55) = {0.092616, 0.728688, 0, 1.0};
Point(56) = {0.098338, 0.728200, 0, 1.0};
Point(57) = {0.103187, 0.727635, 0, 1.0};
Point(58) = {0.107050, 0.727032, 0, 1.0};
Point(59) = {0.109836, 0.726476, 0, 1.0};
Point(60) = {0.111502, 0.726077, 0, 1.0};
Point(61) = {-0.112056, -0.725929, 0, 1.0};
Point(62) = {-0.111550, -0.726153, 0, 1.0};
Point(63) = {-0.110162, -0.726825, 0, 1.0};
Point(64) = {-0.108090, -0.727837, 0, 1.0};
Point(65) = {-0.105368, -0.728999, 0, 1.0};
Point(66) = {-0.101919, -0.730246, 0, 1.0};
Point(67) = {-0.097746, -0.731609, 0, 1.0};
Point(68) = {-0.092915, -0.733091, 0, 1.0};
Point(69) = {-0.087495, -0.734672, 0, 1.0};
Point(70) = {-0.081558, -0.736332, 0, 1.0};
Point(71) = {-0.075186, -0.738039, 0, 1.0};
Point(72) = {-0.068458, -0.739761, 0, 1.0};
Point(73) = {-0.061457, -0.741463, 0, 1.0};
Point(74) = {-0.054266, -0.743106, 0, 1.0};
Point(75) = {-0.046966, -0.744655, 0, 1.0};
Point(76) = {-0.039632, -0.746070, 0, 1.0};
Point(77) = {-0.032341, -0.747317, 0, 1.0};
Point(78) = {-0.025165, -0.748362, 0, 1.0};
Point(79) = {-0.018165, -0.749176, 0, 1.0};
Point(80) = {-0.011408, -0.749730, 0, 1.0};
Point(81) = {-0.004940, -0.750000, 0, 1.0};
Point(82) = {0.001200, -0.749975, 0, 1.0};
Point(83) = {0.006979, -0.749657, 0, 1.0};
Point(84) = {0.012364, -0.749063, 0, 1.0};
Point(85) = {0.017321, -0.748213, 0, 1.0};
Point(86) = {0.021817, -0.747141, 0, 1.0};
Point(87) = {0.025817, -0.745887, 0, 1.0};
Point(88) = {0.029281, -0.744491, 0, 1.0};
Point(89) = {0.032178, -0.742993, 0, 1.0};
Point(90) = {0.034479, -0.741437, 0, 1.0};
Point(91) = {0.036161, -0.739882, 0, 1.0};
Point(92) = {0.037192, -0.738397, 0, 1.0};
Point(93) = {0.037492, -0.737113, 0, 1.0};
Point(94) = {0.036878, -0.735922, 0, 1.0};
Point(95) = {0.035378, -0.734658, 0, 1.0};
Point(96) = {0.033153, -0.733376, 0, 1.0};
Point(97) = {0.030240, -0.732133, 0, 1.0};
Point(98) = {0.026672, -0.730968, 0, 1.0};
Point(99) = {0.022490, -0.729933, 0, 1.0};
Point(100) = {0.017723, -0.729030, 0, 1.0};
Point(101) = {0.012397, -0.728326, 0, 1.0};
Point(102) = {0.006537, -0.727835, 0, 1.0};
Point(103) = {0.000168, -0.727562, 0, 1.0};
Point(104) = {-0.006683, -0.727497, 0, 1.0};
Point(105) = {-0.013977, -0.727622, 0, 1.0};
Point(106) = {-0.021672, -0.727906, 0, 1.0};
Point(107) = {-0.029722, -0.728289, 0, 1.0};
Point(108) = {-0.038039, -0.728684, 0, 1.0};
Point(109) = {-0.046493, -0.729030, 0, 1.0};
Point(110) = {-0.054950, -0.729289, 0, 1.0};
Point(111) = {-0.063275, -0.729436, 0, 1.0};
Point(112) = {-0.071334, -0.729451, 0, 1.0};
Point(113) = {-0.078996, -0.729328, 0, 1.0};
Point(114) = {-0.086131, -0.729071, 0, 1.0};
Point(115) = {-0.092616, -0.728688, 0, 1.0};
Point(116) = {-0.098338, -0.728200, 0, 1.0};
Point(117) = {-0.103187, -0.727635, 0, 1.0};
Point(118) = {-0.107050, -0.727032, 0, 1.0};
Point(119) = {-0.109836, -0.726476, 0, 1.0};
Point(120) = {-0.111502, -0.726077, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html