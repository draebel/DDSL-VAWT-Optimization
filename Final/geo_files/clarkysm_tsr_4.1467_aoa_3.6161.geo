SetFactory("OpenCASCADE");

Point(1) = {0.112272, 0.729437, 0, 1.0};
Point(2) = {0.111642, 0.729650, 0, 1.0};
Point(3) = {0.109763, 0.730269, 0, 1.0};
Point(4) = {0.106666, 0.731253, 0, 1.0};
Point(5) = {0.102400, 0.732550, 0, 1.0};
Point(6) = {0.097039, 0.734120, 0, 1.0};
Point(7) = {0.090669, 0.735913, 0, 1.0};
Point(8) = {0.083403, 0.737866, 0, 1.0};
Point(9) = {0.075358, 0.739904, 0, 1.0};
Point(10) = {0.066671, 0.741946, 0, 1.0};
Point(11) = {0.057486, 0.743900, 0, 1.0};
Point(12) = {0.047957, 0.745684, 0, 1.0};
Point(13) = {0.038246, 0.747220, 0, 1.0};
Point(14) = {0.028515, 0.748450, 0, 1.0};
Point(15) = {0.018929, 0.749332, 0, 1.0};
Point(16) = {0.014242, 0.749637, 0, 1.0};
Point(17) = {0.009654, 0.749849, 0, 1.0};
Point(18) = {0.005182, 0.749969, 0, 1.0};
Point(19) = {0.000847, 0.750000, 0, 1.0};
Point(20) = {-0.003335, 0.749931, 0, 1.0};
Point(21) = {-0.007343, 0.749747, 0, 1.0};
Point(22) = {-0.011164, 0.749432, 0, 1.0};
Point(23) = {-0.014781, 0.748980, 0, 1.0};
Point(24) = {-0.018180, 0.748404, 0, 1.0};
Point(25) = {-0.021343, 0.747729, 0, 1.0};
Point(26) = {-0.024253, 0.746992, 0, 1.0};
Point(27) = {-0.026899, 0.746218, 0, 1.0};
Point(28) = {-0.029269, 0.745412, 0, 1.0};
Point(29) = {-0.031351, 0.744566, 0, 1.0};
Point(30) = {-0.033141, 0.743665, 0, 1.0};
Point(31) = {-0.034628, 0.742707, 0, 1.0};
Point(32) = {-0.035807, 0.741716, 0, 1.0};
Point(33) = {-0.036670, 0.740735, 0, 1.0};
Point(34) = {-0.037211, 0.739810, 0, 1.0};
Point(35) = {-0.037425, 0.738968, 0, 1.0};
Point(36) = {-0.037312, 0.738210, 0, 1.0};
Point(37) = {-0.036874, 0.737513, 0, 1.0};
Point(38) = {-0.036114, 0.736867, 0, 1.0};
Point(39) = {-0.035035, 0.736265, 0, 1.0};
Point(40) = {-0.033644, 0.735714, 0, 1.0};
Point(41) = {-0.031942, 0.735224, 0, 1.0};
Point(42) = {-0.029940, 0.734796, 0, 1.0};
Point(43) = {-0.027644, 0.734421, 0, 1.0};
Point(44) = {-0.025068, 0.734089, 0, 1.0};
Point(45) = {-0.022224, 0.733784, 0, 1.0};
Point(46) = {-0.019121, 0.733509, 0, 1.0};
Point(47) = {-0.015775, 0.733262, 0, 1.0};
Point(48) = {-0.012199, 0.733047, 0, 1.0};
Point(49) = {-0.008410, 0.732863, 0, 1.0};
Point(50) = {-0.004423, 0.732703, 0, 1.0};
Point(51) = {-0.000255, 0.732561, 0, 1.0};
Point(52) = {0.004074, 0.732429, 0, 1.0};
Point(53) = {0.008544, 0.732298, 0, 1.0};
Point(54) = {0.013138, 0.732169, 0, 1.0};
Point(55) = {0.017836, 0.732036, 0, 1.0};
Point(56) = {0.027460, 0.731764, 0, 1.0};
Point(57) = {0.037251, 0.731485, 0, 1.0};
Point(58) = {0.047042, 0.731206, 0, 1.0};
Point(59) = {0.056667, 0.730930, 0, 1.0};
Point(60) = {0.065958, 0.730664, 0, 1.0};
Point(61) = {0.074758, 0.730413, 0, 1.0};
Point(62) = {0.082917, 0.730179, 0, 1.0};
Point(63) = {0.090293, 0.729962, 0, 1.0};
Point(64) = {0.096764, 0.729773, 0, 1.0};
Point(65) = {0.102215, 0.729619, 0, 1.0};
Point(66) = {0.106556, 0.729513, 0, 1.0};
Point(67) = {0.109712, 0.729458, 0, 1.0};
Point(68) = {0.111628, 0.729440, 0, 1.0};
Point(69) = {-0.112272, -0.729437, 0, 1.0};
Point(70) = {-0.111642, -0.729650, 0, 1.0};
Point(71) = {-0.109763, -0.730269, 0, 1.0};
Point(72) = {-0.106666, -0.731253, 0, 1.0};
Point(73) = {-0.102400, -0.732550, 0, 1.0};
Point(74) = {-0.097039, -0.734120, 0, 1.0};
Point(75) = {-0.090669, -0.735913, 0, 1.0};
Point(76) = {-0.083403, -0.737866, 0, 1.0};
Point(77) = {-0.075358, -0.739904, 0, 1.0};
Point(78) = {-0.066671, -0.741946, 0, 1.0};
Point(79) = {-0.057486, -0.743900, 0, 1.0};
Point(80) = {-0.047957, -0.745684, 0, 1.0};
Point(81) = {-0.038246, -0.747220, 0, 1.0};
Point(82) = {-0.028515, -0.748450, 0, 1.0};
Point(83) = {-0.018929, -0.749332, 0, 1.0};
Point(84) = {-0.014242, -0.749637, 0, 1.0};
Point(85) = {-0.009654, -0.749849, 0, 1.0};
Point(86) = {-0.005182, -0.749969, 0, 1.0};
Point(87) = {-0.000847, -0.750000, 0, 1.0};
Point(88) = {0.003335, -0.749931, 0, 1.0};
Point(89) = {0.007343, -0.749747, 0, 1.0};
Point(90) = {0.011164, -0.749432, 0, 1.0};
Point(91) = {0.014781, -0.748980, 0, 1.0};
Point(92) = {0.018180, -0.748404, 0, 1.0};
Point(93) = {0.021343, -0.747729, 0, 1.0};
Point(94) = {0.024253, -0.746992, 0, 1.0};
Point(95) = {0.026899, -0.746218, 0, 1.0};
Point(96) = {0.029269, -0.745412, 0, 1.0};
Point(97) = {0.031351, -0.744566, 0, 1.0};
Point(98) = {0.033141, -0.743665, 0, 1.0};
Point(99) = {0.034628, -0.742707, 0, 1.0};
Point(100) = {0.035807, -0.741716, 0, 1.0};
Point(101) = {0.036670, -0.740735, 0, 1.0};
Point(102) = {0.037211, -0.739810, 0, 1.0};
Point(103) = {0.037425, -0.738968, 0, 1.0};
Point(104) = {0.037312, -0.738210, 0, 1.0};
Point(105) = {0.036874, -0.737513, 0, 1.0};
Point(106) = {0.036114, -0.736867, 0, 1.0};
Point(107) = {0.035035, -0.736265, 0, 1.0};
Point(108) = {0.033644, -0.735714, 0, 1.0};
Point(109) = {0.031942, -0.735224, 0, 1.0};
Point(110) = {0.029940, -0.734796, 0, 1.0};
Point(111) = {0.027644, -0.734421, 0, 1.0};
Point(112) = {0.025068, -0.734089, 0, 1.0};
Point(113) = {0.022224, -0.733784, 0, 1.0};
Point(114) = {0.019121, -0.733509, 0, 1.0};
Point(115) = {0.015775, -0.733262, 0, 1.0};
Point(116) = {0.012199, -0.733047, 0, 1.0};
Point(117) = {0.008410, -0.732863, 0, 1.0};
Point(118) = {0.004423, -0.732703, 0, 1.0};
Point(119) = {0.000255, -0.732561, 0, 1.0};
Point(120) = {-0.004074, -0.732429, 0, 1.0};
Point(121) = {-0.008544, -0.732298, 0, 1.0};
Point(122) = {-0.013138, -0.732169, 0, 1.0};
Point(123) = {-0.017836, -0.732036, 0, 1.0};
Point(124) = {-0.027460, -0.731764, 0, 1.0};
Point(125) = {-0.037251, -0.731485, 0, 1.0};
Point(126) = {-0.047042, -0.731206, 0, 1.0};
Point(127) = {-0.056667, -0.730930, 0, 1.0};
Point(128) = {-0.065958, -0.730664, 0, 1.0};
Point(129) = {-0.074758, -0.730413, 0, 1.0};
Point(130) = {-0.082917, -0.730179, 0, 1.0};
Point(131) = {-0.090293, -0.729962, 0, 1.0};
Point(132) = {-0.096764, -0.729773, 0, 1.0};
Point(133) = {-0.102215, -0.729619, 0, 1.0};
Point(134) = {-0.106556, -0.729513, 0, 1.0};
Point(135) = {-0.109712, -0.729458, 0, 1.0};
Point(136) = {-0.111628, -0.729440, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:51};
Spline(3) = {51:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:86};
Spline(6) = {86:119};
Spline(7) = {119:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html