SetFactory("OpenCASCADE");

Point(1) = {0.112112, 0.728459, 0, 1.0};
Point(2) = {0.111484, 0.728677, 0, 1.0};
Point(3) = {0.109611, 0.729313, 0, 1.0};
Point(4) = {0.106523, 0.730323, 0, 1.0};
Point(5) = {0.102268, 0.731659, 0, 1.0};
Point(6) = {0.096921, 0.733275, 0, 1.0};
Point(7) = {0.090568, 0.735124, 0, 1.0};
Point(8) = {0.083319, 0.737141, 0, 1.0};
Point(9) = {0.075293, 0.739250, 0, 1.0};
Point(10) = {0.066623, 0.741368, 0, 1.0};
Point(11) = {0.057456, 0.743403, 0, 1.0};
Point(12) = {0.047943, 0.745270, 0, 1.0};
Point(13) = {0.038246, 0.746892, 0, 1.0};
Point(14) = {0.028526, 0.748207, 0, 1.0};
Point(15) = {0.018948, 0.749173, 0, 1.0};
Point(16) = {0.014265, 0.749520, 0, 1.0};
Point(17) = {0.009678, 0.749772, 0, 1.0};
Point(18) = {0.005208, 0.749931, 0, 1.0};
Point(19) = {0.000872, 0.750000, 0, 1.0};
Point(20) = {-0.003309, 0.749967, 0, 1.0};
Point(21) = {-0.007319, 0.749818, 0, 1.0};
Point(22) = {-0.011142, 0.749537, 0, 1.0};
Point(23) = {-0.014764, 0.749117, 0, 1.0};
Point(24) = {-0.018167, 0.748571, 0, 1.0};
Point(25) = {-0.021336, 0.747924, 0, 1.0};
Point(26) = {-0.024252, 0.747212, 0, 1.0};
Point(27) = {-0.026905, 0.746462, 0, 1.0};
Point(28) = {-0.029282, 0.745677, 0, 1.0};
Point(29) = {-0.031372, 0.744850, 0, 1.0};
Point(30) = {-0.033170, 0.743964, 0, 1.0};
Point(31) = {-0.034665, 0.743019, 0, 1.0};
Point(32) = {-0.035853, 0.742038, 0, 1.0};
Point(33) = {-0.036725, 0.741065, 0, 1.0};
Point(34) = {-0.037274, 0.740145, 0, 1.0};
Point(35) = {-0.037495, 0.739305, 0, 1.0};
Point(36) = {-0.037389, 0.738546, 0, 1.0};
Point(37) = {-0.036956, 0.737845, 0, 1.0};
Point(38) = {-0.036202, 0.737192, 0, 1.0};
Point(39) = {-0.035129, 0.736581, 0, 1.0};
Point(40) = {-0.033742, 0.736018, 0, 1.0};
Point(41) = {-0.032044, 0.735512, 0, 1.0};
Point(42) = {-0.030046, 0.735068, 0, 1.0};
Point(43) = {-0.027754, 0.734672, 0, 1.0};
Point(44) = {-0.025181, 0.734317, 0, 1.0};
Point(45) = {-0.022340, 0.733988, 0, 1.0};
Point(46) = {-0.019240, 0.733685, 0, 1.0};
Point(47) = {-0.015895, 0.733409, 0, 1.0};
Point(48) = {-0.012322, 0.733162, 0, 1.0};
Point(49) = {-0.008534, 0.732945, 0, 1.0};
Point(50) = {-0.004549, 0.732750, 0, 1.0};
Point(51) = {-0.000383, 0.732572, 0, 1.0};
Point(52) = {0.003945, 0.732401, 0, 1.0};
Point(53) = {0.008415, 0.732231, 0, 1.0};
Point(54) = {0.013007, 0.732061, 0, 1.0};
Point(55) = {0.017703, 0.731887, 0, 1.0};
Point(56) = {0.027325, 0.731531, 0, 1.0};
Point(57) = {0.037113, 0.731166, 0, 1.0};
Point(58) = {0.046901, 0.730801, 0, 1.0};
Point(59) = {0.056523, 0.730440, 0, 1.0};
Point(60) = {0.065811, 0.730093, 0, 1.0};
Point(61) = {0.074609, 0.729765, 0, 1.0};
Point(62) = {0.082765, 0.729458, 0, 1.0};
Point(63) = {0.090140, 0.729177, 0, 1.0};
Point(64) = {0.096608, 0.728931, 0, 1.0};
Point(65) = {0.102057, 0.728729, 0, 1.0};
Point(66) = {0.106398, 0.728585, 0, 1.0};
Point(67) = {0.109553, 0.728502, 0, 1.0};
Point(68) = {0.111469, 0.728468, 0, 1.0};
Point(69) = {-0.112112, -0.728459, 0, 1.0};
Point(70) = {-0.111484, -0.728677, 0, 1.0};
Point(71) = {-0.109611, -0.729313, 0, 1.0};
Point(72) = {-0.106523, -0.730323, 0, 1.0};
Point(73) = {-0.102268, -0.731659, 0, 1.0};
Point(74) = {-0.096921, -0.733275, 0, 1.0};
Point(75) = {-0.090568, -0.735124, 0, 1.0};
Point(76) = {-0.083319, -0.737141, 0, 1.0};
Point(77) = {-0.075293, -0.739250, 0, 1.0};
Point(78) = {-0.066623, -0.741368, 0, 1.0};
Point(79) = {-0.057456, -0.743403, 0, 1.0};
Point(80) = {-0.047943, -0.745270, 0, 1.0};
Point(81) = {-0.038246, -0.746892, 0, 1.0};
Point(82) = {-0.028526, -0.748207, 0, 1.0};
Point(83) = {-0.018948, -0.749173, 0, 1.0};
Point(84) = {-0.014265, -0.749520, 0, 1.0};
Point(85) = {-0.009678, -0.749772, 0, 1.0};
Point(86) = {-0.005208, -0.749931, 0, 1.0};
Point(87) = {-0.000872, -0.750000, 0, 1.0};
Point(88) = {0.003309, -0.749967, 0, 1.0};
Point(89) = {0.007319, -0.749818, 0, 1.0};
Point(90) = {0.011142, -0.749537, 0, 1.0};
Point(91) = {0.014764, -0.749117, 0, 1.0};
Point(92) = {0.018167, -0.748571, 0, 1.0};
Point(93) = {0.021336, -0.747924, 0, 1.0};
Point(94) = {0.024252, -0.747212, 0, 1.0};
Point(95) = {0.026905, -0.746462, 0, 1.0};
Point(96) = {0.029282, -0.745677, 0, 1.0};
Point(97) = {0.031372, -0.744850, 0, 1.0};
Point(98) = {0.033170, -0.743964, 0, 1.0};
Point(99) = {0.034665, -0.743019, 0, 1.0};
Point(100) = {0.035853, -0.742038, 0, 1.0};
Point(101) = {0.036725, -0.741065, 0, 1.0};
Point(102) = {0.037274, -0.740145, 0, 1.0};
Point(103) = {0.037495, -0.739305, 0, 1.0};
Point(104) = {0.037389, -0.738546, 0, 1.0};
Point(105) = {0.036956, -0.737845, 0, 1.0};
Point(106) = {0.036202, -0.737192, 0, 1.0};
Point(107) = {0.035129, -0.736581, 0, 1.0};
Point(108) = {0.033742, -0.736018, 0, 1.0};
Point(109) = {0.032044, -0.735512, 0, 1.0};
Point(110) = {0.030046, -0.735068, 0, 1.0};
Point(111) = {0.027754, -0.734672, 0, 1.0};
Point(112) = {0.025181, -0.734317, 0, 1.0};
Point(113) = {0.022340, -0.733988, 0, 1.0};
Point(114) = {0.019240, -0.733685, 0, 1.0};
Point(115) = {0.015895, -0.733409, 0, 1.0};
Point(116) = {0.012322, -0.733162, 0, 1.0};
Point(117) = {0.008534, -0.732945, 0, 1.0};
Point(118) = {0.004549, -0.732750, 0, 1.0};
Point(119) = {0.000383, -0.732572, 0, 1.0};
Point(120) = {-0.003945, -0.732401, 0, 1.0};
Point(121) = {-0.008415, -0.732231, 0, 1.0};
Point(122) = {-0.013007, -0.732061, 0, 1.0};
Point(123) = {-0.017703, -0.731887, 0, 1.0};
Point(124) = {-0.027325, -0.731531, 0, 1.0};
Point(125) = {-0.037113, -0.731166, 0, 1.0};
Point(126) = {-0.046901, -0.730801, 0, 1.0};
Point(127) = {-0.056523, -0.730440, 0, 1.0};
Point(128) = {-0.065811, -0.730093, 0, 1.0};
Point(129) = {-0.074609, -0.729765, 0, 1.0};
Point(130) = {-0.082765, -0.729458, 0, 1.0};
Point(131) = {-0.090140, -0.729177, 0, 1.0};
Point(132) = {-0.096608, -0.728931, 0, 1.0};
Point(133) = {-0.102057, -0.728729, 0, 1.0};
Point(134) = {-0.106398, -0.728585, 0, 1.0};
Point(135) = {-0.109553, -0.728502, 0, 1.0};
Point(136) = {-0.111469, -0.728468, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:51};
Spline(3) = {51:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:86};
Spline(6) = {86:119};
Spline(7) = {119:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html