SetFactory("OpenCASCADE");

Point(1) = {0.074742, 0.735639, 0, 1.0};
Point(2) = {0.074323, 0.735785, 0, 1.0};
Point(3) = {0.073074, 0.736209, 0, 1.0};
Point(4) = {0.071015, 0.736882, 0, 1.0};
Point(5) = {0.068179, 0.737772, 0, 1.0};
Point(6) = {0.064614, 0.738850, 0, 1.0};
Point(7) = {0.060379, 0.740083, 0, 1.0};
Point(8) = {0.055546, 0.741427, 0, 1.0};
Point(9) = {0.050195, 0.742833, 0, 1.0};
Point(10) = {0.044416, 0.744245, 0, 1.0};
Point(11) = {0.038304, 0.745602, 0, 1.0};
Point(12) = {0.031962, 0.746847, 0, 1.0};
Point(13) = {0.025497, 0.747928, 0, 1.0};
Point(14) = {0.019017, 0.748805, 0, 1.0};
Point(15) = {0.012632, 0.749449, 0, 1.0};
Point(16) = {0.009510, 0.749680, 0, 1.0};
Point(17) = {0.006452, 0.749848, 0, 1.0};
Point(18) = {0.003472, 0.749954, 0, 1.0};
Point(19) = {0.000582, 0.750000, 0, 1.0};
Point(20) = {-0.002206, 0.749978, 0, 1.0};
Point(21) = {-0.004879, 0.749879, 0, 1.0};
Point(22) = {-0.007428, 0.749692, 0, 1.0};
Point(23) = {-0.009843, 0.749411, 0, 1.0};
Point(24) = {-0.012112, 0.749047, 0, 1.0};
Point(25) = {-0.014224, 0.748616, 0, 1.0};
Point(26) = {-0.016168, 0.748141, 0, 1.0};
Point(27) = {-0.017937, 0.747641, 0, 1.0};
Point(28) = {-0.019521, 0.747118, 0, 1.0};
Point(29) = {-0.020915, 0.746566, 0, 1.0};
Point(30) = {-0.022113, 0.745976, 0, 1.0};
Point(31) = {-0.023110, 0.745346, 0, 1.0};
Point(32) = {-0.023902, 0.744692, 0, 1.0};
Point(33) = {-0.024483, 0.744043, 0, 1.0};
Point(34) = {-0.024849, 0.743430, 0, 1.0};
Point(35) = {-0.024997, 0.742870, 0, 1.0};
Point(36) = {-0.024926, 0.742364, 0, 1.0};
Point(37) = {-0.024638, 0.741897, 0, 1.0};
Point(38) = {-0.024135, 0.741462, 0, 1.0};
Point(39) = {-0.023419, 0.741054, 0, 1.0};
Point(40) = {-0.022495, 0.740679, 0, 1.0};
Point(41) = {-0.021363, 0.740342, 0, 1.0};
Point(42) = {-0.020031, 0.740045, 0, 1.0};
Point(43) = {-0.018503, 0.739782, 0, 1.0};
Point(44) = {-0.016787, 0.739545, 0, 1.0};
Point(45) = {-0.014893, 0.739325, 0, 1.0};
Point(46) = {-0.012826, 0.739123, 0, 1.0};
Point(47) = {-0.010597, 0.738939, 0, 1.0};
Point(48) = {-0.008214, 0.738775, 0, 1.0};
Point(49) = {-0.005689, 0.738630, 0, 1.0};
Point(50) = {-0.003033, 0.738500, 0, 1.0};
Point(51) = {-0.000255, 0.738381, 0, 1.0};
Point(52) = {0.002630, 0.738268, 0, 1.0};
Point(53) = {0.005610, 0.738154, 0, 1.0};
Point(54) = {0.008671, 0.738041, 0, 1.0};
Point(55) = {0.011802, 0.737925, 0, 1.0};
Point(56) = {0.018217, 0.737687, 0, 1.0};
Point(57) = {0.024742, 0.737444, 0, 1.0};
Point(58) = {0.031267, 0.737201, 0, 1.0};
Point(59) = {0.037682, 0.736960, 0, 1.0};
Point(60) = {0.043874, 0.736729, 0, 1.0};
Point(61) = {0.049740, 0.736510, 0, 1.0};
Point(62) = {0.055177, 0.736306, 0, 1.0};
Point(63) = {0.060093, 0.736118, 0, 1.0};
Point(64) = {0.064406, 0.735954, 0, 1.0};
Point(65) = {0.068038, 0.735819, 0, 1.0};
Point(66) = {0.070932, 0.735723, 0, 1.0};
Point(67) = {0.073035, 0.735668, 0, 1.0};
Point(68) = {0.074313, 0.735645, 0, 1.0};
Point(69) = {-0.074742, -0.735639, 0, 1.0};
Point(70) = {-0.074323, -0.735785, 0, 1.0};
Point(71) = {-0.073074, -0.736209, 0, 1.0};
Point(72) = {-0.071015, -0.736882, 0, 1.0};
Point(73) = {-0.068179, -0.737772, 0, 1.0};
Point(74) = {-0.064614, -0.738850, 0, 1.0};
Point(75) = {-0.060379, -0.740083, 0, 1.0};
Point(76) = {-0.055546, -0.741427, 0, 1.0};
Point(77) = {-0.050195, -0.742833, 0, 1.0};
Point(78) = {-0.044416, -0.744245, 0, 1.0};
Point(79) = {-0.038304, -0.745602, 0, 1.0};
Point(80) = {-0.031962, -0.746847, 0, 1.0};
Point(81) = {-0.025497, -0.747928, 0, 1.0};
Point(82) = {-0.019017, -0.748805, 0, 1.0};
Point(83) = {-0.012632, -0.749449, 0, 1.0};
Point(84) = {-0.009510, -0.749680, 0, 1.0};
Point(85) = {-0.006452, -0.749848, 0, 1.0};
Point(86) = {-0.003472, -0.749954, 0, 1.0};
Point(87) = {-0.000582, -0.750000, 0, 1.0};
Point(88) = {0.002206, -0.749978, 0, 1.0};
Point(89) = {0.004879, -0.749879, 0, 1.0};
Point(90) = {0.007428, -0.749692, 0, 1.0};
Point(91) = {0.009843, -0.749411, 0, 1.0};
Point(92) = {0.012112, -0.749047, 0, 1.0};
Point(93) = {0.014224, -0.748616, 0, 1.0};
Point(94) = {0.016168, -0.748141, 0, 1.0};
Point(95) = {0.017937, -0.747641, 0, 1.0};
Point(96) = {0.019521, -0.747118, 0, 1.0};
Point(97) = {0.020915, -0.746566, 0, 1.0};
Point(98) = {0.022113, -0.745976, 0, 1.0};
Point(99) = {0.023110, -0.745346, 0, 1.0};
Point(100) = {0.023902, -0.744692, 0, 1.0};
Point(101) = {0.024483, -0.744043, 0, 1.0};
Point(102) = {0.024849, -0.743430, 0, 1.0};
Point(103) = {0.024997, -0.742870, 0, 1.0};
Point(104) = {0.024926, -0.742364, 0, 1.0};
Point(105) = {0.024638, -0.741897, 0, 1.0};
Point(106) = {0.024135, -0.741462, 0, 1.0};
Point(107) = {0.023419, -0.741054, 0, 1.0};
Point(108) = {0.022495, -0.740679, 0, 1.0};
Point(109) = {0.021363, -0.740342, 0, 1.0};
Point(110) = {0.020031, -0.740045, 0, 1.0};
Point(111) = {0.018503, -0.739782, 0, 1.0};
Point(112) = {0.016787, -0.739545, 0, 1.0};
Point(113) = {0.014893, -0.739325, 0, 1.0};
Point(114) = {0.012826, -0.739123, 0, 1.0};
Point(115) = {0.010597, -0.738939, 0, 1.0};
Point(116) = {0.008214, -0.738775, 0, 1.0};
Point(117) = {0.005689, -0.738630, 0, 1.0};
Point(118) = {0.003033, -0.738500, 0, 1.0};
Point(119) = {0.000255, -0.738381, 0, 1.0};
Point(120) = {-0.002630, -0.738268, 0, 1.0};
Point(121) = {-0.005610, -0.738154, 0, 1.0};
Point(122) = {-0.008671, -0.738041, 0, 1.0};
Point(123) = {-0.011802, -0.737925, 0, 1.0};
Point(124) = {-0.018217, -0.737687, 0, 1.0};
Point(125) = {-0.024742, -0.737444, 0, 1.0};
Point(126) = {-0.031267, -0.737201, 0, 1.0};
Point(127) = {-0.037682, -0.736960, 0, 1.0};
Point(128) = {-0.043874, -0.736729, 0, 1.0};
Point(129) = {-0.049740, -0.736510, 0, 1.0};
Point(130) = {-0.055177, -0.736306, 0, 1.0};
Point(131) = {-0.060093, -0.736118, 0, 1.0};
Point(132) = {-0.064406, -0.735954, 0, 1.0};
Point(133) = {-0.068038, -0.735819, 0, 1.0};
Point(134) = {-0.070932, -0.735723, 0, 1.0};
Point(135) = {-0.073035, -0.735668, 0, 1.0};
Point(136) = {-0.074313, -0.735645, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:51};
Spline(3) = {51:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:86};
Spline(6) = {86:119};
Spline(7) = {119:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html