SetFactory("OpenCASCADE");

Point(1) = {0.074404, 0.747996, 0, 1.0};
Point(2) = {0.074129, 0.748025, 0, 1.0};
Point(3) = {0.073303, 0.748111, 0, 1.0};
Point(4) = {0.071940, 0.748249, 0, 1.0};
Point(5) = {0.070051, 0.748430, 0, 1.0};
Point(6) = {0.067658, 0.748644, 0, 1.0};
Point(7) = {0.064785, 0.748879, 0, 1.0};
Point(8) = {0.061464, 0.749124, 0, 1.0};
Point(9) = {0.057733, 0.749361, 0, 1.0};
Point(10) = {0.053627, 0.749579, 0, 1.0};
Point(11) = {0.049199, 0.749764, 0, 1.0};
Point(12) = {0.044493, 0.749904, 0, 1.0};
Point(13) = {0.039562, 0.749986, 0, 1.0};
Point(14) = {0.034460, 0.750000, 0, 1.0};
Point(15) = {0.029245, 0.749936, 0, 1.0};
Point(16) = {0.023975, 0.749785, 0, 1.0};
Point(17) = {0.018711, 0.749539, 0, 1.0};
Point(18) = {0.013507, 0.749194, 0, 1.0};
Point(19) = {0.008387, 0.748715, 0, 1.0};
Point(20) = {0.003456, 0.748092, 0, 1.0};
Point(21) = {-0.001230, 0.747334, 0, 1.0};
Point(22) = {-0.005613, 0.746456, 0, 1.0};
Point(23) = {-0.009647, 0.745476, 0, 1.0};
Point(24) = {-0.013281, 0.744421, 0, 1.0};
Point(25) = {-0.016479, 0.743313, 0, 1.0};
Point(26) = {-0.019203, 0.742183, 0, 1.0};
Point(27) = {-0.021426, 0.741060, 0, 1.0};
Point(28) = {-0.023132, 0.739968, 0, 1.0};
Point(29) = {-0.024299, 0.738933, 0, 1.0};
Point(30) = {-0.024923, 0.737969, 0, 1.0};
Point(31) = {-0.025000, 0.737094, 0, 1.0};
Point(32) = {-0.024541, 0.736345, 0, 1.0};
Point(33) = {-0.023556, 0.735760, 0, 1.0};
Point(34) = {-0.022069, 0.735342, 0, 1.0};
Point(35) = {-0.020090, 0.735086, 0, 1.0};
Point(36) = {-0.017647, 0.734990, 0, 1.0};
Point(37) = {-0.014768, 0.735046, 0, 1.0};
Point(38) = {-0.011480, 0.735247, 0, 1.0};
Point(39) = {-0.007820, 0.735579, 0, 1.0};
Point(40) = {-0.003826, 0.736028, 0, 1.0};
Point(41) = {0.000463, 0.736576, 0, 1.0};
Point(42) = {0.005009, 0.737201, 0, 1.0};
Point(43) = {0.009763, 0.737883, 0, 1.0};
Point(44) = {0.014684, 0.738599, 0, 1.0};
Point(45) = {0.019761, 0.739350, 0, 1.0};
Point(46) = {0.024899, 0.740137, 0, 1.0};
Point(47) = {0.030040, 0.740943, 0, 1.0};
Point(48) = {0.035131, 0.741752, 0, 1.0};
Point(49) = {0.040113, 0.742548, 0, 1.0};
Point(50) = {0.044936, 0.743319, 0, 1.0};
Point(51) = {0.049547, 0.744054, 0, 1.0};
Point(52) = {0.053893, 0.744746, 0, 1.0};
Point(53) = {0.057927, 0.745386, 0, 1.0};
Point(54) = {0.061602, 0.745967, 0, 1.0};
Point(55) = {0.064880, 0.746485, 0, 1.0};
Point(56) = {0.067718, 0.746934, 0, 1.0};
Point(57) = {0.070086, 0.747310, 0, 1.0};
Point(58) = {0.071960, 0.747607, 0, 1.0};
Point(59) = {0.073311, 0.747822, 0, 1.0};
Point(60) = {0.074130, 0.747953, 0, 1.0};
Point(61) = {-0.074404, -0.747996, 0, 1.0};
Point(62) = {-0.074129, -0.748025, 0, 1.0};
Point(63) = {-0.073303, -0.748111, 0, 1.0};
Point(64) = {-0.071940, -0.748249, 0, 1.0};
Point(65) = {-0.070051, -0.748430, 0, 1.0};
Point(66) = {-0.067658, -0.748644, 0, 1.0};
Point(67) = {-0.064785, -0.748879, 0, 1.0};
Point(68) = {-0.061464, -0.749124, 0, 1.0};
Point(69) = {-0.057733, -0.749361, 0, 1.0};
Point(70) = {-0.053627, -0.749579, 0, 1.0};
Point(71) = {-0.049199, -0.749764, 0, 1.0};
Point(72) = {-0.044493, -0.749904, 0, 1.0};
Point(73) = {-0.039562, -0.749986, 0, 1.0};
Point(74) = {-0.034460, -0.750000, 0, 1.0};
Point(75) = {-0.029245, -0.749936, 0, 1.0};
Point(76) = {-0.023975, -0.749785, 0, 1.0};
Point(77) = {-0.018711, -0.749539, 0, 1.0};
Point(78) = {-0.013507, -0.749194, 0, 1.0};
Point(79) = {-0.008387, -0.748715, 0, 1.0};
Point(80) = {-0.003456, -0.748092, 0, 1.0};
Point(81) = {0.001230, -0.747334, 0, 1.0};
Point(82) = {0.005613, -0.746456, 0, 1.0};
Point(83) = {0.009647, -0.745476, 0, 1.0};
Point(84) = {0.013281, -0.744421, 0, 1.0};
Point(85) = {0.016479, -0.743313, 0, 1.0};
Point(86) = {0.019203, -0.742183, 0, 1.0};
Point(87) = {0.021426, -0.741060, 0, 1.0};
Point(88) = {0.023132, -0.739968, 0, 1.0};
Point(89) = {0.024299, -0.738933, 0, 1.0};
Point(90) = {0.024923, -0.737969, 0, 1.0};
Point(91) = {0.025000, -0.737094, 0, 1.0};
Point(92) = {0.024541, -0.736345, 0, 1.0};
Point(93) = {0.023556, -0.735760, 0, 1.0};
Point(94) = {0.022069, -0.735342, 0, 1.0};
Point(95) = {0.020090, -0.735086, 0, 1.0};
Point(96) = {0.017647, -0.734990, 0, 1.0};
Point(97) = {0.014768, -0.735046, 0, 1.0};
Point(98) = {0.011480, -0.735247, 0, 1.0};
Point(99) = {0.007820, -0.735579, 0, 1.0};
Point(100) = {0.003826, -0.736028, 0, 1.0};
Point(101) = {-0.000463, -0.736576, 0, 1.0};
Point(102) = {-0.005009, -0.737201, 0, 1.0};
Point(103) = {-0.009763, -0.737883, 0, 1.0};
Point(104) = {-0.014684, -0.738599, 0, 1.0};
Point(105) = {-0.019761, -0.739350, 0, 1.0};
Point(106) = {-0.024899, -0.740137, 0, 1.0};
Point(107) = {-0.030040, -0.740943, 0, 1.0};
Point(108) = {-0.035131, -0.741752, 0, 1.0};
Point(109) = {-0.040113, -0.742548, 0, 1.0};
Point(110) = {-0.044936, -0.743319, 0, 1.0};
Point(111) = {-0.049547, -0.744054, 0, 1.0};
Point(112) = {-0.053893, -0.744746, 0, 1.0};
Point(113) = {-0.057927, -0.745386, 0, 1.0};
Point(114) = {-0.061602, -0.745967, 0, 1.0};
Point(115) = {-0.064880, -0.746485, 0, 1.0};
Point(116) = {-0.067718, -0.746934, 0, 1.0};
Point(117) = {-0.070086, -0.747310, 0, 1.0};
Point(118) = {-0.071960, -0.747607, 0, 1.0};
Point(119) = {-0.073311, -0.747822, 0, 1.0};
Point(120) = {-0.074130, -0.747953, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:101};
Spline(7) = {101:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html