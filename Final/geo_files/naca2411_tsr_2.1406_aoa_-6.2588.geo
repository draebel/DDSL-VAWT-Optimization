SetFactory("OpenCASCADE");

Point(1) = {0.074553, 0.746994, 0, 1.0};
Point(2) = {0.074141, 0.747037, 0, 1.0};
Point(3) = {0.072901, 0.747167, 0, 1.0};
Point(4) = {0.070857, 0.747373, 0, 1.0};
Point(5) = {0.068023, 0.747645, 0, 1.0};
Point(6) = {0.064434, 0.747966, 0, 1.0};
Point(7) = {0.060125, 0.748319, 0, 1.0};
Point(8) = {0.055143, 0.748686, 0, 1.0};
Point(9) = {0.049546, 0.749042, 0, 1.0};
Point(10) = {0.043388, 0.749369, 0, 1.0};
Point(11) = {0.036745, 0.749647, 0, 1.0};
Point(12) = {0.029686, 0.749856, 0, 1.0};
Point(13) = {0.022290, 0.749979, 0, 1.0};
Point(14) = {0.014638, 0.750000, 0, 1.0};
Point(15) = {0.006815, 0.749904, 0, 1.0};
Point(16) = {-0.001090, 0.749677, 0, 1.0};
Point(17) = {-0.008987, 0.749309, 0, 1.0};
Point(18) = {-0.016792, 0.748791, 0, 1.0};
Point(19) = {-0.024472, 0.748072, 0, 1.0};
Point(20) = {-0.031870, 0.747139, 0, 1.0};
Point(21) = {-0.038898, 0.746001, 0, 1.0};
Point(22) = {-0.045473, 0.744684, 0, 1.0};
Point(23) = {-0.051524, 0.743215, 0, 1.0};
Point(24) = {-0.056974, 0.741631, 0, 1.0};
Point(25) = {-0.061772, 0.739969, 0, 1.0};
Point(26) = {-0.065858, 0.738275, 0, 1.0};
Point(27) = {-0.069192, 0.736590, 0, 1.0};
Point(28) = {-0.071751, 0.734953, 0, 1.0};
Point(29) = {-0.073502, 0.733400, 0, 1.0};
Point(30) = {-0.074437, 0.731954, 0, 1.0};
Point(31) = {-0.074553, 0.730641, 0, 1.0};
Point(32) = {-0.073864, 0.729518, 0, 1.0};
Point(33) = {-0.072387, 0.728640, 0, 1.0};
Point(34) = {-0.070156, 0.728013, 0, 1.0};
Point(35) = {-0.067188, 0.727629, 0, 1.0};
Point(36) = {-0.063523, 0.727485, 0, 1.0};
Point(37) = {-0.059205, 0.727569, 0, 1.0};
Point(38) = {-0.054273, 0.727870, 0, 1.0};
Point(39) = {-0.048784, 0.728368, 0, 1.0};
Point(40) = {-0.042791, 0.729042, 0, 1.0};
Point(41) = {-0.036358, 0.729863, 0, 1.0};
Point(42) = {-0.029539, 0.730801, 0, 1.0};
Point(43) = {-0.022408, 0.731825, 0, 1.0};
Point(44) = {-0.015026, 0.732899, 0, 1.0};
Point(45) = {-0.007412, 0.734025, 0, 1.0};
Point(46) = {0.000295, 0.735205, 0, 1.0};
Point(47) = {0.008008, 0.736415, 0, 1.0};
Point(48) = {0.015643, 0.737628, 0, 1.0};
Point(49) = {0.023117, 0.738822, 0, 1.0};
Point(50) = {0.030351, 0.739979, 0, 1.0};
Point(51) = {0.037268, 0.741082, 0, 1.0};
Point(52) = {0.043786, 0.742119, 0, 1.0};
Point(53) = {0.049838, 0.743079, 0, 1.0};
Point(54) = {0.055350, 0.743950, 0, 1.0};
Point(55) = {0.060267, 0.744728, 0, 1.0};
Point(56) = {0.064524, 0.745402, 0, 1.0};
Point(57) = {0.068076, 0.745965, 0, 1.0};
Point(58) = {0.070887, 0.746410, 0, 1.0};
Point(59) = {0.072914, 0.746732, 0, 1.0};
Point(60) = {0.074142, 0.746929, 0, 1.0};
Point(61) = {-0.074553, -0.746994, 0, 1.0};
Point(62) = {-0.074141, -0.747037, 0, 1.0};
Point(63) = {-0.072901, -0.747167, 0, 1.0};
Point(64) = {-0.070857, -0.747373, 0, 1.0};
Point(65) = {-0.068023, -0.747645, 0, 1.0};
Point(66) = {-0.064434, -0.747966, 0, 1.0};
Point(67) = {-0.060125, -0.748319, 0, 1.0};
Point(68) = {-0.055143, -0.748686, 0, 1.0};
Point(69) = {-0.049546, -0.749042, 0, 1.0};
Point(70) = {-0.043388, -0.749369, 0, 1.0};
Point(71) = {-0.036745, -0.749647, 0, 1.0};
Point(72) = {-0.029686, -0.749856, 0, 1.0};
Point(73) = {-0.022290, -0.749979, 0, 1.0};
Point(74) = {-0.014638, -0.750000, 0, 1.0};
Point(75) = {-0.006815, -0.749904, 0, 1.0};
Point(76) = {0.001090, -0.749677, 0, 1.0};
Point(77) = {0.008987, -0.749309, 0, 1.0};
Point(78) = {0.016792, -0.748791, 0, 1.0};
Point(79) = {0.024472, -0.748072, 0, 1.0};
Point(80) = {0.031870, -0.747139, 0, 1.0};
Point(81) = {0.038898, -0.746001, 0, 1.0};
Point(82) = {0.045473, -0.744684, 0, 1.0};
Point(83) = {0.051524, -0.743215, 0, 1.0};
Point(84) = {0.056974, -0.741631, 0, 1.0};
Point(85) = {0.061772, -0.739969, 0, 1.0};
Point(86) = {0.065858, -0.738275, 0, 1.0};
Point(87) = {0.069192, -0.736590, 0, 1.0};
Point(88) = {0.071751, -0.734953, 0, 1.0};
Point(89) = {0.073502, -0.733400, 0, 1.0};
Point(90) = {0.074437, -0.731954, 0, 1.0};
Point(91) = {0.074553, -0.730641, 0, 1.0};
Point(92) = {0.073864, -0.729518, 0, 1.0};
Point(93) = {0.072387, -0.728640, 0, 1.0};
Point(94) = {0.070156, -0.728013, 0, 1.0};
Point(95) = {0.067188, -0.727629, 0, 1.0};
Point(96) = {0.063523, -0.727485, 0, 1.0};
Point(97) = {0.059205, -0.727569, 0, 1.0};
Point(98) = {0.054273, -0.727870, 0, 1.0};
Point(99) = {0.048784, -0.728368, 0, 1.0};
Point(100) = {0.042791, -0.729042, 0, 1.0};
Point(101) = {0.036358, -0.729863, 0, 1.0};
Point(102) = {0.029539, -0.730801, 0, 1.0};
Point(103) = {0.022408, -0.731825, 0, 1.0};
Point(104) = {0.015026, -0.732899, 0, 1.0};
Point(105) = {0.007412, -0.734025, 0, 1.0};
Point(106) = {-0.000295, -0.735205, 0, 1.0};
Point(107) = {-0.008008, -0.736415, 0, 1.0};
Point(108) = {-0.015643, -0.737628, 0, 1.0};
Point(109) = {-0.023117, -0.738822, 0, 1.0};
Point(110) = {-0.030351, -0.739979, 0, 1.0};
Point(111) = {-0.037268, -0.741082, 0, 1.0};
Point(112) = {-0.043786, -0.742119, 0, 1.0};
Point(113) = {-0.049838, -0.743079, 0, 1.0};
Point(114) = {-0.055350, -0.743950, 0, 1.0};
Point(115) = {-0.060267, -0.744728, 0, 1.0};
Point(116) = {-0.064524, -0.745402, 0, 1.0};
Point(117) = {-0.068076, -0.745965, 0, 1.0};
Point(118) = {-0.070887, -0.746410, 0, 1.0};
Point(119) = {-0.072914, -0.746732, 0, 1.0};
Point(120) = {-0.074142, -0.746929, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:101};
Spline(7) = {101:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html