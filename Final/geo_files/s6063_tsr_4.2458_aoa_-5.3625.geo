SetFactory("OpenCASCADE");

Point(1) = {0.111981, 0.749805, 0, 1.0};
Point(2) = {0.111511, 0.749786, 0, 1.0};
Point(3) = {0.110114, 0.749747, 0, 1.0};
Point(4) = {0.107826, 0.749712, 0, 1.0};
Point(5) = {0.104695, 0.749698, 0, 1.0};
Point(6) = {0.100781, 0.749715, 0, 1.0};
Point(7) = {0.096157, 0.749760, 0, 1.0};
Point(8) = {0.090892, 0.749827, 0, 1.0};
Point(9) = {0.085065, 0.749900, 0, 1.0};
Point(10) = {0.078755, 0.749965, 0, 1.0};
Point(11) = {0.072034, 0.750000, 0, 1.0};
Point(12) = {0.064983, 0.749991, 0, 1.0};
Point(13) = {0.057677, 0.749919, 0, 1.0};
Point(14) = {0.050188, 0.749773, 0, 1.0};
Point(15) = {0.042592, 0.749550, 0, 1.0};
Point(16) = {0.034973, 0.749245, 0, 1.0};
Point(17) = {0.027408, 0.748850, 0, 1.0};
Point(18) = {0.019975, 0.748365, 0, 1.0};
Point(19) = {0.012749, 0.747783, 0, 1.0};
Point(20) = {0.005801, 0.747108, 0, 1.0};
Point(21) = {-0.000802, 0.746341, 0, 1.0};
Point(22) = {-0.007001, 0.745486, 0, 1.0};
Point(23) = {-0.012735, 0.744550, 0, 1.0};
Point(24) = {-0.017958, 0.743544, 0, 1.0};
Point(25) = {-0.022624, 0.742480, 0, 1.0};
Point(26) = {-0.026697, 0.741376, 0, 1.0};
Point(27) = {-0.030146, 0.740252, 0, 1.0};
Point(28) = {-0.032949, 0.739129, 0, 1.0};
Point(29) = {-0.035087, 0.738042, 0, 1.0};
Point(30) = {-0.036555, 0.737026, 0, 1.0};
Point(31) = {-0.037352, 0.736152, 0, 1.0};
Point(32) = {-0.037336, 0.735502, 0, 1.0};
Point(33) = {-0.036463, 0.734984, 0, 1.0};
Point(34) = {-0.034831, 0.734543, 0, 1.0};
Point(35) = {-0.032458, 0.734237, 0, 1.0};
Point(36) = {-0.029359, 0.734080, 0, 1.0};
Point(37) = {-0.025553, 0.734080, 0, 1.0};
Point(38) = {-0.021068, 0.734237, 0, 1.0};
Point(39) = {-0.015943, 0.734547, 0, 1.0};
Point(40) = {-0.010222, 0.734995, 0, 1.0};
Point(41) = {-0.003963, 0.735572, 0, 1.0};
Point(42) = {0.002770, 0.736261, 0, 1.0};
Point(43) = {0.009904, 0.737044, 0, 1.0};
Point(44) = {0.017359, 0.737906, 0, 1.0};
Point(45) = {0.025053, 0.738834, 0, 1.0};
Point(46) = {0.032901, 0.739810, 0, 1.0};
Point(47) = {0.040816, 0.740818, 0, 1.0};
Point(48) = {0.048709, 0.741842, 0, 1.0};
Point(49) = {0.056493, 0.742867, 0, 1.0};
Point(50) = {0.064079, 0.743873, 0, 1.0};
Point(51) = {0.071380, 0.744846, 0, 1.0};
Point(52) = {0.078314, 0.745769, 0, 1.0};
Point(53) = {0.084797, 0.746623, 0, 1.0};
Point(54) = {0.090753, 0.747393, 0, 1.0};
Point(55) = {0.096103, 0.748067, 0, 1.0};
Point(56) = {0.100778, 0.748631, 0, 1.0};
Point(57) = {0.104710, 0.749083, 0, 1.0};
Point(58) = {0.107843, 0.749419, 0, 1.0};
Point(59) = {0.110124, 0.749644, 0, 1.0};
Point(60) = {0.111514, 0.749767, 0, 1.0};
Point(61) = {-0.111981, -0.749805, 0, 1.0};
Point(62) = {-0.111511, -0.749786, 0, 1.0};
Point(63) = {-0.110114, -0.749747, 0, 1.0};
Point(64) = {-0.107826, -0.749712, 0, 1.0};
Point(65) = {-0.104695, -0.749698, 0, 1.0};
Point(66) = {-0.100781, -0.749715, 0, 1.0};
Point(67) = {-0.096157, -0.749760, 0, 1.0};
Point(68) = {-0.090892, -0.749827, 0, 1.0};
Point(69) = {-0.085065, -0.749900, 0, 1.0};
Point(70) = {-0.078755, -0.749965, 0, 1.0};
Point(71) = {-0.072034, -0.750000, 0, 1.0};
Point(72) = {-0.064983, -0.749991, 0, 1.0};
Point(73) = {-0.057677, -0.749919, 0, 1.0};
Point(74) = {-0.050188, -0.749773, 0, 1.0};
Point(75) = {-0.042592, -0.749550, 0, 1.0};
Point(76) = {-0.034973, -0.749245, 0, 1.0};
Point(77) = {-0.027408, -0.748850, 0, 1.0};
Point(78) = {-0.019975, -0.748365, 0, 1.0};
Point(79) = {-0.012749, -0.747783, 0, 1.0};
Point(80) = {-0.005801, -0.747108, 0, 1.0};
Point(81) = {0.000802, -0.746341, 0, 1.0};
Point(82) = {0.007001, -0.745486, 0, 1.0};
Point(83) = {0.012735, -0.744550, 0, 1.0};
Point(84) = {0.017958, -0.743544, 0, 1.0};
Point(85) = {0.022624, -0.742480, 0, 1.0};
Point(86) = {0.026697, -0.741376, 0, 1.0};
Point(87) = {0.030146, -0.740252, 0, 1.0};
Point(88) = {0.032949, -0.739129, 0, 1.0};
Point(89) = {0.035087, -0.738042, 0, 1.0};
Point(90) = {0.036555, -0.737026, 0, 1.0};
Point(91) = {0.037352, -0.736152, 0, 1.0};
Point(92) = {0.037336, -0.735502, 0, 1.0};
Point(93) = {0.036463, -0.734984, 0, 1.0};
Point(94) = {0.034831, -0.734543, 0, 1.0};
Point(95) = {0.032458, -0.734237, 0, 1.0};
Point(96) = {0.029359, -0.734080, 0, 1.0};
Point(97) = {0.025553, -0.734080, 0, 1.0};
Point(98) = {0.021068, -0.734237, 0, 1.0};
Point(99) = {0.015943, -0.734547, 0, 1.0};
Point(100) = {0.010222, -0.734995, 0, 1.0};
Point(101) = {0.003963, -0.735572, 0, 1.0};
Point(102) = {-0.002770, -0.736261, 0, 1.0};
Point(103) = {-0.009904, -0.737044, 0, 1.0};
Point(104) = {-0.017359, -0.737906, 0, 1.0};
Point(105) = {-0.025053, -0.738834, 0, 1.0};
Point(106) = {-0.032901, -0.739810, 0, 1.0};
Point(107) = {-0.040816, -0.740818, 0, 1.0};
Point(108) = {-0.048709, -0.741842, 0, 1.0};
Point(109) = {-0.056493, -0.742867, 0, 1.0};
Point(110) = {-0.064079, -0.743873, 0, 1.0};
Point(111) = {-0.071380, -0.744846, 0, 1.0};
Point(112) = {-0.078314, -0.745769, 0, 1.0};
Point(113) = {-0.084797, -0.746623, 0, 1.0};
Point(114) = {-0.090753, -0.747393, 0, 1.0};
Point(115) = {-0.096103, -0.748067, 0, 1.0};
Point(116) = {-0.100778, -0.748631, 0, 1.0};
Point(117) = {-0.104710, -0.749083, 0, 1.0};
Point(118) = {-0.107843, -0.749419, 0, 1.0};
Point(119) = {-0.110124, -0.749644, 0, 1.0};
Point(120) = {-0.111514, -0.749767, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html