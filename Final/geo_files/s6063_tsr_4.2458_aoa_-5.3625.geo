SetFactory("OpenCASCADE");

Point(1) = {0.111844, 0.749805, 0, 1.0};
Point(2) = {0.111374, 0.749786, 0, 1.0};
Point(3) = {0.109978, 0.749747, 0, 1.0};
Point(4) = {0.107691, 0.749712, 0, 1.0};
Point(5) = {0.104562, 0.749698, 0, 1.0};
Point(6) = {0.100650, 0.749715, 0, 1.0};
Point(7) = {0.096028, 0.749761, 0, 1.0};
Point(8) = {0.090767, 0.749827, 0, 1.0};
Point(9) = {0.084943, 0.749900, 0, 1.0};
Point(10) = {0.078637, 0.749965, 0, 1.0};
Point(11) = {0.071920, 0.750000, 0, 1.0};
Point(12) = {0.064873, 0.749991, 0, 1.0};
Point(13) = {0.057571, 0.749919, 0, 1.0};
Point(14) = {0.050087, 0.749774, 0, 1.0};
Point(15) = {0.042495, 0.749551, 0, 1.0};
Point(16) = {0.034880, 0.749246, 0, 1.0};
Point(17) = {0.027320, 0.748851, 0, 1.0};
Point(18) = {0.019891, 0.748366, 0, 1.0};
Point(19) = {0.012669, 0.747784, 0, 1.0};
Point(20) = {0.005725, 0.747110, 0, 1.0};
Point(21) = {-0.000874, 0.746343, 0, 1.0};
Point(22) = {-0.007069, 0.745489, 0, 1.0};
Point(23) = {-0.012800, 0.744553, 0, 1.0};
Point(24) = {-0.018021, 0.743548, 0, 1.0};
Point(25) = {-0.022683, 0.742485, 0, 1.0};
Point(26) = {-0.026754, 0.741381, 0, 1.0};
Point(27) = {-0.030201, 0.740257, 0, 1.0};
Point(28) = {-0.033002, 0.739136, 0, 1.0};
Point(29) = {-0.035139, 0.738049, 0, 1.0};
Point(30) = {-0.036606, 0.737033, 0, 1.0};
Point(31) = {-0.037403, 0.736160, 0, 1.0};
Point(32) = {-0.037387, 0.735511, 0, 1.0};
Point(33) = {-0.036514, 0.734993, 0, 1.0};
Point(34) = {-0.034883, 0.734552, 0, 1.0};
Point(35) = {-0.032512, 0.734246, 0, 1.0};
Point(36) = {-0.029415, 0.734089, 0, 1.0};
Point(37) = {-0.025610, 0.734089, 0, 1.0};
Point(38) = {-0.021128, 0.734247, 0, 1.0};
Point(39) = {-0.016006, 0.734556, 0, 1.0};
Point(40) = {-0.010288, 0.735003, 0, 1.0};
Point(41) = {-0.004033, 0.735580, 0, 1.0};
Point(42) = {0.002696, 0.736269, 0, 1.0};
Point(43) = {0.009825, 0.737051, 0, 1.0};
Point(44) = {0.017276, 0.737913, 0, 1.0};
Point(45) = {0.024966, 0.738840, 0, 1.0};
Point(46) = {0.032810, 0.739816, 0, 1.0};
Point(47) = {0.040720, 0.740823, 0, 1.0};
Point(48) = {0.048608, 0.741847, 0, 1.0};
Point(49) = {0.056387, 0.742871, 0, 1.0};
Point(50) = {0.063969, 0.743877, 0, 1.0};
Point(51) = {0.071266, 0.744849, 0, 1.0};
Point(52) = {0.078196, 0.745771, 0, 1.0};
Point(53) = {0.084675, 0.746625, 0, 1.0};
Point(54) = {0.090628, 0.747394, 0, 1.0};
Point(55) = {0.095975, 0.748068, 0, 1.0};
Point(56) = {0.100647, 0.748632, 0, 1.0};
Point(57) = {0.104577, 0.749084, 0, 1.0};
Point(58) = {0.107708, 0.749420, 0, 1.0};
Point(59) = {0.109987, 0.749644, 0, 1.0};
Point(60) = {0.111377, 0.749767, 0, 1.0};
Point(61) = {-0.111844, -0.749805, 0, 1.0};
Point(62) = {-0.111374, -0.749786, 0, 1.0};
Point(63) = {-0.109978, -0.749747, 0, 1.0};
Point(64) = {-0.107691, -0.749712, 0, 1.0};
Point(65) = {-0.104562, -0.749698, 0, 1.0};
Point(66) = {-0.100650, -0.749715, 0, 1.0};
Point(67) = {-0.096028, -0.749761, 0, 1.0};
Point(68) = {-0.090767, -0.749827, 0, 1.0};
Point(69) = {-0.084943, -0.749900, 0, 1.0};
Point(70) = {-0.078637, -0.749965, 0, 1.0};
Point(71) = {-0.071920, -0.750000, 0, 1.0};
Point(72) = {-0.064873, -0.749991, 0, 1.0};
Point(73) = {-0.057571, -0.749919, 0, 1.0};
Point(74) = {-0.050087, -0.749774, 0, 1.0};
Point(75) = {-0.042495, -0.749551, 0, 1.0};
Point(76) = {-0.034880, -0.749246, 0, 1.0};
Point(77) = {-0.027320, -0.748851, 0, 1.0};
Point(78) = {-0.019891, -0.748366, 0, 1.0};
Point(79) = {-0.012669, -0.747784, 0, 1.0};
Point(80) = {-0.005725, -0.747110, 0, 1.0};
Point(81) = {0.000874, -0.746343, 0, 1.0};
Point(82) = {0.007069, -0.745489, 0, 1.0};
Point(83) = {0.012800, -0.744553, 0, 1.0};
Point(84) = {0.018021, -0.743548, 0, 1.0};
Point(85) = {0.022683, -0.742485, 0, 1.0};
Point(86) = {0.026754, -0.741381, 0, 1.0};
Point(87) = {0.030201, -0.740257, 0, 1.0};
Point(88) = {0.033002, -0.739136, 0, 1.0};
Point(89) = {0.035139, -0.738049, 0, 1.0};
Point(90) = {0.036606, -0.737033, 0, 1.0};
Point(91) = {0.037403, -0.736160, 0, 1.0};
Point(92) = {0.037387, -0.735511, 0, 1.0};
Point(93) = {0.036514, -0.734993, 0, 1.0};
Point(94) = {0.034883, -0.734552, 0, 1.0};
Point(95) = {0.032512, -0.734246, 0, 1.0};
Point(96) = {0.029415, -0.734089, 0, 1.0};
Point(97) = {0.025610, -0.734089, 0, 1.0};
Point(98) = {0.021128, -0.734247, 0, 1.0};
Point(99) = {0.016006, -0.734556, 0, 1.0};
Point(100) = {0.010288, -0.735003, 0, 1.0};
Point(101) = {0.004033, -0.735580, 0, 1.0};
Point(102) = {-0.002696, -0.736269, 0, 1.0};
Point(103) = {-0.009825, -0.737051, 0, 1.0};
Point(104) = {-0.017276, -0.737913, 0, 1.0};
Point(105) = {-0.024966, -0.738840, 0, 1.0};
Point(106) = {-0.032810, -0.739816, 0, 1.0};
Point(107) = {-0.040720, -0.740823, 0, 1.0};
Point(108) = {-0.048608, -0.741847, 0, 1.0};
Point(109) = {-0.056387, -0.742871, 0, 1.0};
Point(110) = {-0.063969, -0.743877, 0, 1.0};
Point(111) = {-0.071266, -0.744849, 0, 1.0};
Point(112) = {-0.078196, -0.745771, 0, 1.0};
Point(113) = {-0.084675, -0.746625, 0, 1.0};
Point(114) = {-0.090628, -0.747394, 0, 1.0};
Point(115) = {-0.095975, -0.748068, 0, 1.0};
Point(116) = {-0.100647, -0.748632, 0, 1.0};
Point(117) = {-0.104577, -0.749084, 0, 1.0};
Point(118) = {-0.107708, -0.749420, 0, 1.0};
Point(119) = {-0.109987, -0.749644, 0, 1.0};
Point(120) = {-0.111377, -0.749767, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html