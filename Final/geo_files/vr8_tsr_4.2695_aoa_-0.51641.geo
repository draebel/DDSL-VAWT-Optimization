SetFactory("OpenCASCADE");

Point(1) = {0.112495, 0.742854, 0, 1.0};
Point(2) = {0.109493, 0.743112, 0, 1.0};
Point(3) = {0.107241, 0.743306, 0, 1.0};
Point(4) = {0.104239, 0.743566, 0, 1.0};
Point(5) = {0.100486, 0.743887, 0, 1.0};
Point(6) = {0.095982, 0.744277, 0, 1.0};
Point(7) = {0.089977, 0.744793, 0, 1.0};
Point(8) = {0.082471, 0.745434, 0, 1.0};
Point(9) = {0.074965, 0.746071, 0, 1.0};
Point(10) = {0.067459, 0.746723, 0, 1.0};
Point(11) = {0.059953, 0.747376, 0, 1.0};
Point(12) = {0.052446, 0.748013, 0, 1.0};
Point(13) = {0.044941, 0.748635, 0, 1.0};
Point(14) = {0.037435, 0.749183, 0, 1.0};
Point(15) = {0.029931, 0.749640, 0, 1.0};
Point(16) = {0.022428, 0.749918, 0, 1.0};
Point(17) = {0.014927, 0.750000, 0, 1.0};
Point(18) = {0.007428, 0.749857, 0, 1.0};
Point(19) = {-0.000069, 0.749490, 0, 1.0};
Point(20) = {-0.007565, 0.748972, 0, 1.0};
Point(21) = {-0.013559, 0.748378, 0, 1.0};
Point(22) = {-0.018804, 0.747701, 0, 1.0};
Point(23) = {-0.023297, 0.746985, 0, 1.0};
Point(24) = {-0.027041, 0.746232, 0, 1.0};
Point(25) = {-0.030034, 0.745485, 0, 1.0};
Point(26) = {-0.032278, 0.744804, 0, 1.0};
Point(27) = {-0.033773, 0.744281, 0, 1.0};
Point(28) = {-0.034518, 0.743667, 0, 1.0};
Point(29) = {-0.036014, 0.743278, 0, 1.0};
Point(30) = {-0.036760, 0.742784, 0, 1.0};
Point(31) = {-0.037498, 0.741502, 0, 1.0};
Point(32) = {-0.036741, 0.740706, 0, 1.0};
Point(33) = {-0.035989, 0.740410, 0, 1.0};
Point(34) = {-0.034487, 0.740209, 0, 1.0};
Point(35) = {-0.033734, 0.739901, 0, 1.0};
Point(36) = {-0.032232, 0.739667, 0, 1.0};
Point(37) = {-0.029979, 0.739372, 0, 1.0};
Point(38) = {-0.026976, 0.739069, 0, 1.0};
Point(39) = {-0.023223, 0.738781, 0, 1.0};
Point(40) = {-0.018721, 0.738491, 0, 1.0};
Point(41) = {-0.013468, 0.738239, 0, 1.0};
Point(42) = {-0.007466, 0.738023, 0, 1.0};
Point(43) = {0.000036, 0.737850, 0, 1.0};
Point(44) = {0.007537, 0.737753, 0, 1.0};
Point(45) = {0.015037, 0.737775, 0, 1.0};
Point(46) = {0.022536, 0.737903, 0, 1.0};
Point(47) = {0.030035, 0.738136, 0, 1.0};
Point(48) = {0.037532, 0.738473, 0, 1.0};
Point(49) = {0.045029, 0.738871, 0, 1.0};
Point(50) = {0.052525, 0.739313, 0, 1.0};
Point(51) = {0.060021, 0.739756, 0, 1.0};
Point(52) = {0.067518, 0.740199, 0, 1.0};
Point(53) = {0.075014, 0.740641, 0, 1.0};
Point(54) = {0.082510, 0.741084, 0, 1.0};
Point(55) = {0.090006, 0.741526, 0, 1.0};
Point(56) = {0.096004, 0.741880, 0, 1.0};
Point(57) = {0.100501, 0.742146, 0, 1.0};
Point(58) = {0.104249, 0.742367, 0, 1.0};
Point(59) = {0.106498, 0.742538, 0, 1.0};
Point(60) = {0.107247, 0.742657, 0, 1.0};
Point(61) = {-0.112495, -0.742854, 0, 1.0};
Point(62) = {-0.109493, -0.743112, 0, 1.0};
Point(63) = {-0.107241, -0.743306, 0, 1.0};
Point(64) = {-0.104239, -0.743566, 0, 1.0};
Point(65) = {-0.100486, -0.743887, 0, 1.0};
Point(66) = {-0.095982, -0.744277, 0, 1.0};
Point(67) = {-0.089977, -0.744793, 0, 1.0};
Point(68) = {-0.082471, -0.745434, 0, 1.0};
Point(69) = {-0.074965, -0.746071, 0, 1.0};
Point(70) = {-0.067459, -0.746723, 0, 1.0};
Point(71) = {-0.059953, -0.747376, 0, 1.0};
Point(72) = {-0.052446, -0.748013, 0, 1.0};
Point(73) = {-0.044941, -0.748635, 0, 1.0};
Point(74) = {-0.037435, -0.749183, 0, 1.0};
Point(75) = {-0.029931, -0.749640, 0, 1.0};
Point(76) = {-0.022428, -0.749918, 0, 1.0};
Point(77) = {-0.014927, -0.750000, 0, 1.0};
Point(78) = {-0.007428, -0.749857, 0, 1.0};
Point(79) = {0.000069, -0.749490, 0, 1.0};
Point(80) = {0.007565, -0.748972, 0, 1.0};
Point(81) = {0.013559, -0.748378, 0, 1.0};
Point(82) = {0.018804, -0.747701, 0, 1.0};
Point(83) = {0.023297, -0.746985, 0, 1.0};
Point(84) = {0.027041, -0.746232, 0, 1.0};
Point(85) = {0.030034, -0.745485, 0, 1.0};
Point(86) = {0.032278, -0.744804, 0, 1.0};
Point(87) = {0.033773, -0.744281, 0, 1.0};
Point(88) = {0.034518, -0.743667, 0, 1.0};
Point(89) = {0.036014, -0.743278, 0, 1.0};
Point(90) = {0.036760, -0.742784, 0, 1.0};
Point(91) = {0.037498, -0.741502, 0, 1.0};
Point(92) = {0.036741, -0.740706, 0, 1.0};
Point(93) = {0.035989, -0.740410, 0, 1.0};
Point(94) = {0.034487, -0.740209, 0, 1.0};
Point(95) = {0.033734, -0.739901, 0, 1.0};
Point(96) = {0.032232, -0.739667, 0, 1.0};
Point(97) = {0.029979, -0.739372, 0, 1.0};
Point(98) = {0.026976, -0.739069, 0, 1.0};
Point(99) = {0.023223, -0.738781, 0, 1.0};
Point(100) = {0.018721, -0.738491, 0, 1.0};
Point(101) = {0.013468, -0.738239, 0, 1.0};
Point(102) = {0.007466, -0.738023, 0, 1.0};
Point(103) = {-0.000036, -0.737850, 0, 1.0};
Point(104) = {-0.007537, -0.737753, 0, 1.0};
Point(105) = {-0.015037, -0.737775, 0, 1.0};
Point(106) = {-0.022536, -0.737903, 0, 1.0};
Point(107) = {-0.030035, -0.738136, 0, 1.0};
Point(108) = {-0.037532, -0.738473, 0, 1.0};
Point(109) = {-0.045029, -0.738871, 0, 1.0};
Point(110) = {-0.052525, -0.739313, 0, 1.0};
Point(111) = {-0.060021, -0.739756, 0, 1.0};
Point(112) = {-0.067518, -0.740199, 0, 1.0};
Point(113) = {-0.075014, -0.740641, 0, 1.0};
Point(114) = {-0.082510, -0.741084, 0, 1.0};
Point(115) = {-0.090006, -0.741526, 0, 1.0};
Point(116) = {-0.096004, -0.741880, 0, 1.0};
Point(117) = {-0.100501, -0.742146, 0, 1.0};
Point(118) = {-0.104249, -0.742367, 0, 1.0};
Point(119) = {-0.106498, -0.742538, 0, 1.0};
Point(120) = {-0.107247, -0.742657, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:78};
Spline(6) = {78:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html