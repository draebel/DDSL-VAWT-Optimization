SetFactory("OpenCASCADE");

Point(1) = {0.149992, 0.740472, 0, 1.0};
Point(2) = {0.145989, 0.740816, 0, 1.0};
Point(3) = {0.142986, 0.741075, 0, 1.0};
Point(4) = {0.138983, 0.741421, 0, 1.0};
Point(5) = {0.133979, 0.741850, 0, 1.0};
Point(6) = {0.127974, 0.742370, 0, 1.0};
Point(7) = {0.119967, 0.743058, 0, 1.0};
Point(8) = {0.109959, 0.743911, 0, 1.0};
Point(9) = {0.099951, 0.744761, 0, 1.0};
Point(10) = {0.089943, 0.745631, 0, 1.0};
Point(11) = {0.079935, 0.746501, 0, 1.0};
Point(12) = {0.069927, 0.747351, 0, 1.0};
Point(13) = {0.059919, 0.748181, 0, 1.0};
Point(14) = {0.049912, 0.748910, 0, 1.0};
Point(15) = {0.039906, 0.749520, 0, 1.0};
Point(16) = {0.029902, 0.749890, 0, 1.0};
Point(17) = {0.019901, 0.750000, 0, 1.0};
Point(18) = {0.009902, 0.749810, 0, 1.0};
Point(19) = {-0.000094, 0.749320, 0, 1.0};
Point(20) = {-0.010088, 0.748630, 0, 1.0};
Point(21) = {-0.018081, 0.747838, 0, 1.0};
Point(22) = {-0.025073, 0.746935, 0, 1.0};
Point(23) = {-0.031065, 0.745980, 0, 1.0};
Point(24) = {-0.036056, 0.744975, 0, 1.0};
Point(25) = {-0.040047, 0.743979, 0, 1.0};
Point(26) = {-0.043039, 0.743072, 0, 1.0};
Point(27) = {-0.045033, 0.742374, 0, 1.0};
Point(28) = {-0.046026, 0.741555, 0, 1.0};
Point(29) = {-0.048021, 0.741037, 0, 1.0};
Point(30) = {-0.049015, 0.740378, 0, 1.0};
Point(31) = {-0.050000, 0.738670, 0, 1.0};
Point(32) = {-0.048990, 0.737609, 0, 1.0};
Point(33) = {-0.047987, 0.737214, 0, 1.0};
Point(34) = {-0.045984, 0.736946, 0, 1.0};
Point(35) = {-0.044981, 0.736535, 0, 1.0};
Point(36) = {-0.042978, 0.736223, 0, 1.0};
Point(37) = {-0.039974, 0.735830, 0, 1.0};
Point(38) = {-0.035970, 0.735426, 0, 1.0};
Point(39) = {-0.030967, 0.735041, 0, 1.0};
Point(40) = {-0.024963, 0.734655, 0, 1.0};
Point(41) = {-0.017959, 0.734318, 0, 1.0};
Point(42) = {-0.009957, 0.734030, 0, 1.0};
Point(43) = {0.000046, 0.733800, 0, 1.0};
Point(44) = {0.010047, 0.733671, 0, 1.0};
Point(45) = {0.020048, 0.733701, 0, 1.0};
Point(46) = {0.030047, 0.733871, 0, 1.0};
Point(47) = {0.040044, 0.734181, 0, 1.0};
Point(48) = {0.050040, 0.734631, 0, 1.0};
Point(49) = {0.060036, 0.735161, 0, 1.0};
Point(50) = {0.070031, 0.735751, 0, 1.0};
Point(51) = {0.080026, 0.736341, 0, 1.0};
Point(52) = {0.090021, 0.736931, 0, 1.0};
Point(53) = {0.100016, 0.737522, 0, 1.0};
Point(54) = {0.110012, 0.738112, 0, 1.0};
Point(55) = {0.120007, 0.738702, 0, 1.0};
Point(56) = {0.128003, 0.739174, 0, 1.0};
Point(57) = {0.134000, 0.739528, 0, 1.0};
Point(58) = {0.138997, 0.739823, 0, 1.0};
Point(59) = {0.141995, 0.740050, 0, 1.0};
Point(60) = {0.142994, 0.740209, 0, 1.0};
Point(61) = {-0.149992, -0.740472, 0, 1.0};
Point(62) = {-0.145989, -0.740816, 0, 1.0};
Point(63) = {-0.142986, -0.741075, 0, 1.0};
Point(64) = {-0.138983, -0.741421, 0, 1.0};
Point(65) = {-0.133979, -0.741850, 0, 1.0};
Point(66) = {-0.127974, -0.742370, 0, 1.0};
Point(67) = {-0.119967, -0.743058, 0, 1.0};
Point(68) = {-0.109959, -0.743911, 0, 1.0};
Point(69) = {-0.099951, -0.744761, 0, 1.0};
Point(70) = {-0.089943, -0.745631, 0, 1.0};
Point(71) = {-0.079935, -0.746501, 0, 1.0};
Point(72) = {-0.069927, -0.747351, 0, 1.0};
Point(73) = {-0.059919, -0.748181, 0, 1.0};
Point(74) = {-0.049912, -0.748910, 0, 1.0};
Point(75) = {-0.039906, -0.749520, 0, 1.0};
Point(76) = {-0.029902, -0.749890, 0, 1.0};
Point(77) = {-0.019901, -0.750000, 0, 1.0};
Point(78) = {-0.009902, -0.749810, 0, 1.0};
Point(79) = {0.000094, -0.749320, 0, 1.0};
Point(80) = {0.010088, -0.748630, 0, 1.0};
Point(81) = {0.018081, -0.747838, 0, 1.0};
Point(82) = {0.025073, -0.746935, 0, 1.0};
Point(83) = {0.031065, -0.745980, 0, 1.0};
Point(84) = {0.036056, -0.744975, 0, 1.0};
Point(85) = {0.040047, -0.743979, 0, 1.0};
Point(86) = {0.043039, -0.743072, 0, 1.0};
Point(87) = {0.045033, -0.742374, 0, 1.0};
Point(88) = {0.046026, -0.741555, 0, 1.0};
Point(89) = {0.048021, -0.741037, 0, 1.0};
Point(90) = {0.049015, -0.740378, 0, 1.0};
Point(91) = {0.050000, -0.738670, 0, 1.0};
Point(92) = {0.048990, -0.737609, 0, 1.0};
Point(93) = {0.047987, -0.737214, 0, 1.0};
Point(94) = {0.045984, -0.736946, 0, 1.0};
Point(95) = {0.044981, -0.736535, 0, 1.0};
Point(96) = {0.042978, -0.736223, 0, 1.0};
Point(97) = {0.039974, -0.735830, 0, 1.0};
Point(98) = {0.035970, -0.735426, 0, 1.0};
Point(99) = {0.030967, -0.735041, 0, 1.0};
Point(100) = {0.024963, -0.734655, 0, 1.0};
Point(101) = {0.017959, -0.734318, 0, 1.0};
Point(102) = {0.009957, -0.734030, 0, 1.0};
Point(103) = {-0.000046, -0.733800, 0, 1.0};
Point(104) = {-0.010047, -0.733671, 0, 1.0};
Point(105) = {-0.020048, -0.733701, 0, 1.0};
Point(106) = {-0.030047, -0.733871, 0, 1.0};
Point(107) = {-0.040044, -0.734181, 0, 1.0};
Point(108) = {-0.050040, -0.734631, 0, 1.0};
Point(109) = {-0.060036, -0.735161, 0, 1.0};
Point(110) = {-0.070031, -0.735751, 0, 1.0};
Point(111) = {-0.080026, -0.736341, 0, 1.0};
Point(112) = {-0.090021, -0.736931, 0, 1.0};
Point(113) = {-0.100016, -0.737522, 0, 1.0};
Point(114) = {-0.110012, -0.738112, 0, 1.0};
Point(115) = {-0.120007, -0.738702, 0, 1.0};
Point(116) = {-0.128003, -0.739174, 0, 1.0};
Point(117) = {-0.134000, -0.739528, 0, 1.0};
Point(118) = {-0.138997, -0.739823, 0, 1.0};
Point(119) = {-0.141995, -0.740050, 0, 1.0};
Point(120) = {-0.142994, -0.740209, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:78};
Spline(6) = {78:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html