SetFactory("OpenCASCADE");

Point(1) = {0.074971, 0.735894, 0, 1.0};
Point(2) = {0.069453, 0.737214, 0, 1.0};
Point(3) = {0.060996, 0.739032, 0, 1.0};
Point(4) = {0.052539, 0.740871, 0, 1.0};
Point(5) = {0.044081, 0.742666, 0, 1.0};
Point(6) = {0.035618, 0.744272, 0, 1.0};
Point(7) = {0.027151, 0.745686, 0, 1.0};
Point(8) = {0.018680, 0.746924, 0, 1.0};
Point(9) = {0.010205, 0.747976, 0, 1.0};
Point(10) = {0.001725, 0.748822, 0, 1.0};
Point(11) = {-0.006760, 0.749442, 0, 1.0};
Point(12) = {-0.015251, 0.749824, 0, 1.0};
Point(13) = {-0.023746, 0.750000, 0, 1.0};
Point(14) = {-0.032246, 0.749975, 0, 1.0};
Point(15) = {-0.040752, 0.749695, 0, 1.0};
Point(16) = {-0.049267, 0.749042, 0, 1.0};
Point(17) = {-0.053528, 0.748528, 0, 1.0};
Point(18) = {-0.057794, 0.747851, 0, 1.0};
Point(19) = {-0.061210, 0.747150, 0, 1.0};
Point(20) = {-0.063774, 0.746502, 0, 1.0};
Point(21) = {-0.066342, 0.745716, 0, 1.0};
Point(22) = {-0.068915, 0.744737, 0, 1.0};
Point(23) = {-0.070633, 0.743930, 0, 1.0};
Point(24) = {-0.071494, 0.743450, 0, 1.0};
Point(25) = {-0.072184, 0.743021, 0, 1.0};
Point(26) = {-0.072789, 0.742596, 0, 1.0};
Point(27) = {-0.073222, 0.742254, 0, 1.0};
Point(28) = {-0.073569, 0.741951, 0, 1.0};
Point(29) = {-0.073830, 0.741701, 0, 1.0};
Point(30) = {-0.074091, 0.741423, 0, 1.0};
Point(31) = {-0.074353, 0.741106, 0, 1.0};
Point(32) = {-0.074617, 0.740729, 0, 1.0};
Point(33) = {-0.074794, 0.740412, 0, 1.0};
Point(34) = {-0.074884, 0.740207, 0, 1.0};
Point(35) = {-0.074980, 0.739728, 0, 1.0};
Point(36) = {-0.074906, 0.739244, 0, 1.0};
Point(37) = {-0.074825, 0.739065, 0, 1.0};
Point(38) = {-0.074661, 0.738816, 0, 1.0};
Point(39) = {-0.074412, 0.738554, 0, 1.0};
Point(40) = {-0.074162, 0.738349, 0, 1.0};
Point(41) = {-0.073911, 0.738182, 0, 1.0};
Point(42) = {-0.073659, 0.738035, 0, 1.0};
Point(43) = {-0.073323, 0.737868, 0, 1.0};
Point(44) = {-0.072902, 0.737688, 0, 1.0};
Point(45) = {-0.072312, 0.737474, 0, 1.0};
Point(46) = {-0.071637, 0.737264, 0, 1.0};
Point(47) = {-0.070792, 0.737041, 0, 1.0};
Point(48) = {-0.069101, 0.736679, 0, 1.0};
Point(49) = {-0.066561, 0.736231, 0, 1.0};
Point(50) = {-0.064020, 0.735860, 0, 1.0};
Point(51) = {-0.061477, 0.735548, 0, 1.0};
Point(52) = {-0.058085, 0.735204, 0, 1.0};
Point(53) = {-0.053844, 0.734863, 0, 1.0};
Point(54) = {-0.049600, 0.734595, 0, 1.0};
Point(55) = {-0.041110, 0.734199, 0, 1.0};
Point(56) = {-0.032617, 0.733918, 0, 1.0};
Point(57) = {-0.024121, 0.733737, 0, 1.0};
Point(58) = {-0.015623, 0.733675, 0, 1.0};
Point(59) = {-0.007122, 0.733743, 0, 1.0};
Point(60) = {0.001381, 0.733926, 0, 1.0};
Point(61) = {0.009887, 0.734194, 0, 1.0};
Point(62) = {0.018394, 0.734519, 0, 1.0};
Point(63) = {0.026901, 0.734858, 0, 1.0};
Point(64) = {0.035408, 0.735182, 0, 1.0};
Point(65) = {0.043912, 0.735367, 0, 1.0};
Point(66) = {0.052411, 0.735342, 0, 1.0};
Point(67) = {0.060905, 0.735082, 0, 1.0};
Point(68) = {0.069396, 0.734725, 0, 1.0};
Point(69) = {0.074937, 0.734411, 0, 1.0};
Point(70) = {-0.074971, -0.735894, 0, 1.0};
Point(71) = {-0.069453, -0.737214, 0, 1.0};
Point(72) = {-0.060996, -0.739032, 0, 1.0};
Point(73) = {-0.052539, -0.740871, 0, 1.0};
Point(74) = {-0.044081, -0.742666, 0, 1.0};
Point(75) = {-0.035618, -0.744272, 0, 1.0};
Point(76) = {-0.027151, -0.745686, 0, 1.0};
Point(77) = {-0.018680, -0.746924, 0, 1.0};
Point(78) = {-0.010205, -0.747976, 0, 1.0};
Point(79) = {-0.001725, -0.748822, 0, 1.0};
Point(80) = {0.006760, -0.749442, 0, 1.0};
Point(81) = {0.015251, -0.749824, 0, 1.0};
Point(82) = {0.023746, -0.750000, 0, 1.0};
Point(83) = {0.032246, -0.749975, 0, 1.0};
Point(84) = {0.040752, -0.749695, 0, 1.0};
Point(85) = {0.049267, -0.749042, 0, 1.0};
Point(86) = {0.053528, -0.748528, 0, 1.0};
Point(87) = {0.057794, -0.747851, 0, 1.0};
Point(88) = {0.061210, -0.747150, 0, 1.0};
Point(89) = {0.063774, -0.746502, 0, 1.0};
Point(90) = {0.066342, -0.745716, 0, 1.0};
Point(91) = {0.068915, -0.744737, 0, 1.0};
Point(92) = {0.070633, -0.743930, 0, 1.0};
Point(93) = {0.071494, -0.743450, 0, 1.0};
Point(94) = {0.072184, -0.743021, 0, 1.0};
Point(95) = {0.072789, -0.742596, 0, 1.0};
Point(96) = {0.073222, -0.742254, 0, 1.0};
Point(97) = {0.073569, -0.741951, 0, 1.0};
Point(98) = {0.073830, -0.741701, 0, 1.0};
Point(99) = {0.074091, -0.741423, 0, 1.0};
Point(100) = {0.074353, -0.741106, 0, 1.0};
Point(101) = {0.074617, -0.740729, 0, 1.0};
Point(102) = {0.074794, -0.740412, 0, 1.0};
Point(103) = {0.074884, -0.740207, 0, 1.0};
Point(104) = {0.074980, -0.739728, 0, 1.0};
Point(105) = {0.074906, -0.739244, 0, 1.0};
Point(106) = {0.074825, -0.739065, 0, 1.0};
Point(107) = {0.074661, -0.738816, 0, 1.0};
Point(108) = {0.074412, -0.738554, 0, 1.0};
Point(109) = {0.074162, -0.738349, 0, 1.0};
Point(110) = {0.073911, -0.738182, 0, 1.0};
Point(111) = {0.073659, -0.738035, 0, 1.0};
Point(112) = {0.073323, -0.737868, 0, 1.0};
Point(113) = {0.072902, -0.737688, 0, 1.0};
Point(114) = {0.072312, -0.737474, 0, 1.0};
Point(115) = {0.071637, -0.737264, 0, 1.0};
Point(116) = {0.070792, -0.737041, 0, 1.0};
Point(117) = {0.069101, -0.736679, 0, 1.0};
Point(118) = {0.066561, -0.736231, 0, 1.0};
Point(119) = {0.064020, -0.735860, 0, 1.0};
Point(120) = {0.061477, -0.735548, 0, 1.0};
Point(121) = {0.058085, -0.735204, 0, 1.0};
Point(122) = {0.053844, -0.734863, 0, 1.0};
Point(123) = {0.049600, -0.734595, 0, 1.0};
Point(124) = {0.041110, -0.734199, 0, 1.0};
Point(125) = {0.032617, -0.733918, 0, 1.0};
Point(126) = {0.024121, -0.733737, 0, 1.0};
Point(127) = {0.015623, -0.733675, 0, 1.0};
Point(128) = {0.007122, -0.733743, 0, 1.0};
Point(129) = {-0.001381, -0.733926, 0, 1.0};
Point(130) = {-0.009887, -0.734194, 0, 1.0};
Point(131) = {-0.018394, -0.734519, 0, 1.0};
Point(132) = {-0.026901, -0.734858, 0, 1.0};
Point(133) = {-0.035408, -0.735182, 0, 1.0};
Point(134) = {-0.043912, -0.735367, 0, 1.0};
Point(135) = {-0.052411, -0.735342, 0, 1.0};
Point(136) = {-0.060905, -0.735082, 0, 1.0};
Point(137) = {-0.069396, -0.734725, 0, 1.0};
Point(138) = {-0.074937, -0.734411, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:14};
Spline(2) = {14:56};
Spline(3) = {56:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:83};
Spline(6) = {83:125};
Spline(7) = {125:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {36.00000000, 15.00000000, 0, 1.0};
Point(142) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html