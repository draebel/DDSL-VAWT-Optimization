SetFactory("OpenCASCADE");

Point(1) = {0.112393, 0.741480, 0, 1.0};
Point(2) = {0.112110, 0.741505, 0, 1.0};
Point(3) = {0.111273, 0.741599, 0, 1.0};
Point(4) = {0.109910, 0.741777, 0, 1.0};
Point(5) = {0.108056, 0.742049, 0, 1.0};
Point(6) = {0.105743, 0.742412, 0, 1.0};
Point(7) = {0.103008, 0.742863, 0, 1.0};
Point(8) = {0.099881, 0.743395, 0, 1.0};
Point(9) = {0.096403, 0.744000, 0, 1.0};
Point(10) = {0.092621, 0.744655, 0, 1.0};
Point(11) = {0.088557, 0.745329, 0, 1.0};
Point(12) = {0.084230, 0.746008, 0, 1.0};
Point(13) = {0.079680, 0.746679, 0, 1.0};
Point(14) = {0.074929, 0.747313, 0, 1.0};
Point(15) = {0.069988, 0.747900, 0, 1.0};
Point(16) = {0.064896, 0.748437, 0, 1.0};
Point(17) = {0.059676, 0.748903, 0, 1.0};
Point(18) = {0.054349, 0.749290, 0, 1.0};
Point(19) = {0.048943, 0.749604, 0, 1.0};
Point(20) = {0.043491, 0.749827, 0, 1.0};
Point(21) = {0.038016, 0.749956, 0, 1.0};
Point(22) = {0.032543, 0.750000, 0, 1.0};
Point(23) = {0.027108, 0.749951, 0, 1.0};
Point(24) = {0.021736, 0.749807, 0, 1.0};
Point(25) = {0.016460, 0.749574, 0, 1.0};
Point(26) = {0.011308, 0.749247, 0, 1.0};
Point(27) = {0.006307, 0.748825, 0, 1.0};
Point(28) = {0.001476, 0.748317, 0, 1.0};
Point(29) = {-0.003148, 0.747722, 0, 1.0};
Point(30) = {-0.007549, 0.747041, 0, 1.0};
Point(31) = {-0.011711, 0.746283, 0, 1.0};
Point(32) = {-0.015605, 0.745456, 0, 1.0};
Point(33) = {-0.019218, 0.744559, 0, 1.0};
Point(34) = {-0.022539, 0.743605, 0, 1.0};
Point(35) = {-0.025550, 0.742611, 0, 1.0};
Point(36) = {-0.028236, 0.741581, 0, 1.0};
Point(37) = {-0.030595, 0.740528, 0, 1.0};
Point(38) = {-0.032618, 0.739476, 0, 1.0};
Point(39) = {-0.034292, 0.738439, 0, 1.0};
Point(40) = {-0.035613, 0.737435, 0, 1.0};
Point(41) = {-0.036583, 0.736488, 0, 1.0};
Point(42) = {-0.037198, 0.735629, 0, 1.0};
Point(43) = {-0.037464, 0.734948, 0, 1.0};
Point(44) = {-0.037251, 0.734420, 0, 1.0};
Point(45) = {-0.036487, 0.734055, 0, 1.0};
Point(46) = {-0.035246, 0.733729, 0, 1.0};
Point(47) = {-0.033563, 0.733478, 0, 1.0};
Point(48) = {-0.031440, 0.733317, 0, 1.0};
Point(49) = {-0.028875, 0.733241, 0, 1.0};
Point(50) = {-0.025888, 0.733245, 0, 1.0};
Point(51) = {-0.022489, 0.733332, 0, 1.0};
Point(52) = {-0.018699, 0.733494, 0, 1.0};
Point(53) = {-0.014537, 0.733725, 0, 1.0};
Point(54) = {-0.010026, 0.734019, 0, 1.0};
Point(55) = {-0.005192, 0.734370, 0, 1.0};
Point(56) = {-0.000064, 0.734769, 0, 1.0};
Point(57) = {0.005327, 0.735209, 0, 1.0};
Point(58) = {0.010948, 0.735683, 0, 1.0};
Point(59) = {0.016766, 0.736178, 0, 1.0};
Point(60) = {0.022740, 0.736688, 0, 1.0};
Point(61) = {0.028833, 0.737201, 0, 1.0};
Point(62) = {0.035003, 0.737710, 0, 1.0};
Point(63) = {0.041209, 0.738207, 0, 1.0};
Point(64) = {0.047406, 0.738683, 0, 1.0};
Point(65) = {0.053550, 0.739131, 0, 1.0};
Point(66) = {0.059596, 0.739545, 0, 1.0};
Point(67) = {0.065500, 0.739922, 0, 1.0};
Point(68) = {0.071219, 0.740258, 0, 1.0};
Point(69) = {0.076710, 0.740552, 0, 1.0};
Point(70) = {0.081935, 0.740804, 0, 1.0};
Point(71) = {0.086852, 0.741010, 0, 1.0};
Point(72) = {0.091424, 0.741177, 0, 1.0};
Point(73) = {0.095620, 0.741302, 0, 1.0};
Point(74) = {0.099404, 0.741391, 0, 1.0};
Point(75) = {0.102748, 0.741448, 0, 1.0};
Point(76) = {0.105626, 0.741479, 0, 1.0};
Point(77) = {0.108016, 0.741490, 0, 1.0};
Point(78) = {0.109896, 0.741492, 0, 1.0};
Point(79) = {0.111264, 0.741495, 0, 1.0};
Point(80) = {0.112106, 0.741488, 0, 1.0};
Point(81) = {-0.112393, -0.741480, 0, 1.0};
Point(82) = {-0.112110, -0.741505, 0, 1.0};
Point(83) = {-0.111273, -0.741599, 0, 1.0};
Point(84) = {-0.109910, -0.741777, 0, 1.0};
Point(85) = {-0.108056, -0.742049, 0, 1.0};
Point(86) = {-0.105743, -0.742412, 0, 1.0};
Point(87) = {-0.103008, -0.742863, 0, 1.0};
Point(88) = {-0.099881, -0.743395, 0, 1.0};
Point(89) = {-0.096403, -0.744000, 0, 1.0};
Point(90) = {-0.092621, -0.744655, 0, 1.0};
Point(91) = {-0.088557, -0.745329, 0, 1.0};
Point(92) = {-0.084230, -0.746008, 0, 1.0};
Point(93) = {-0.079680, -0.746679, 0, 1.0};
Point(94) = {-0.074929, -0.747313, 0, 1.0};
Point(95) = {-0.069988, -0.747900, 0, 1.0};
Point(96) = {-0.064896, -0.748437, 0, 1.0};
Point(97) = {-0.059676, -0.748903, 0, 1.0};
Point(98) = {-0.054349, -0.749290, 0, 1.0};
Point(99) = {-0.048943, -0.749604, 0, 1.0};
Point(100) = {-0.043491, -0.749827, 0, 1.0};
Point(101) = {-0.038016, -0.749956, 0, 1.0};
Point(102) = {-0.032543, -0.750000, 0, 1.0};
Point(103) = {-0.027108, -0.749951, 0, 1.0};
Point(104) = {-0.021736, -0.749807, 0, 1.0};
Point(105) = {-0.016460, -0.749574, 0, 1.0};
Point(106) = {-0.011308, -0.749247, 0, 1.0};
Point(107) = {-0.006307, -0.748825, 0, 1.0};
Point(108) = {-0.001476, -0.748317, 0, 1.0};
Point(109) = {0.003148, -0.747722, 0, 1.0};
Point(110) = {0.007549, -0.747041, 0, 1.0};
Point(111) = {0.011711, -0.746283, 0, 1.0};
Point(112) = {0.015605, -0.745456, 0, 1.0};
Point(113) = {0.019218, -0.744559, 0, 1.0};
Point(114) = {0.022539, -0.743605, 0, 1.0};
Point(115) = {0.025550, -0.742611, 0, 1.0};
Point(116) = {0.028236, -0.741581, 0, 1.0};
Point(117) = {0.030595, -0.740528, 0, 1.0};
Point(118) = {0.032618, -0.739476, 0, 1.0};
Point(119) = {0.034292, -0.738439, 0, 1.0};
Point(120) = {0.035613, -0.737435, 0, 1.0};
Point(121) = {0.036583, -0.736488, 0, 1.0};
Point(122) = {0.037198, -0.735629, 0, 1.0};
Point(123) = {0.037464, -0.734948, 0, 1.0};
Point(124) = {0.037251, -0.734420, 0, 1.0};
Point(125) = {0.036487, -0.734055, 0, 1.0};
Point(126) = {0.035246, -0.733729, 0, 1.0};
Point(127) = {0.033563, -0.733478, 0, 1.0};
Point(128) = {0.031440, -0.733317, 0, 1.0};
Point(129) = {0.028875, -0.733241, 0, 1.0};
Point(130) = {0.025888, -0.733245, 0, 1.0};
Point(131) = {0.022489, -0.733332, 0, 1.0};
Point(132) = {0.018699, -0.733494, 0, 1.0};
Point(133) = {0.014537, -0.733725, 0, 1.0};
Point(134) = {0.010026, -0.734019, 0, 1.0};
Point(135) = {0.005192, -0.734370, 0, 1.0};
Point(136) = {0.000064, -0.734769, 0, 1.0};
Point(137) = {-0.005327, -0.735209, 0, 1.0};
Point(138) = {-0.010948, -0.735683, 0, 1.0};
Point(139) = {-0.016766, -0.736178, 0, 1.0};
Point(140) = {-0.022740, -0.736688, 0, 1.0};
Point(141) = {-0.028833, -0.737201, 0, 1.0};
Point(142) = {-0.035003, -0.737710, 0, 1.0};
Point(143) = {-0.041209, -0.738207, 0, 1.0};
Point(144) = {-0.047406, -0.738683, 0, 1.0};
Point(145) = {-0.053550, -0.739131, 0, 1.0};
Point(146) = {-0.059596, -0.739545, 0, 1.0};
Point(147) = {-0.065500, -0.739922, 0, 1.0};
Point(148) = {-0.071219, -0.740258, 0, 1.0};
Point(149) = {-0.076710, -0.740552, 0, 1.0};
Point(150) = {-0.081935, -0.740804, 0, 1.0};
Point(151) = {-0.086852, -0.741010, 0, 1.0};
Point(152) = {-0.091424, -0.741177, 0, 1.0};
Point(153) = {-0.095620, -0.741302, 0, 1.0};
Point(154) = {-0.099404, -0.741391, 0, 1.0};
Point(155) = {-0.102748, -0.741448, 0, 1.0};
Point(156) = {-0.105626, -0.741479, 0, 1.0};
Point(157) = {-0.108016, -0.741490, 0, 1.0};
Point(158) = {-0.109896, -0.741492, 0, 1.0};
Point(159) = {-0.111264, -0.741495, 0, 1.0};
Point(160) = {-0.112106, -0.741488, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html