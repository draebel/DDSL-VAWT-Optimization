SetFactory("OpenCASCADE");

Point(1) = {0.074929, 0.741480, 0, 1.0};
Point(2) = {0.074645, 0.741505, 0, 1.0};
Point(3) = {0.073808, 0.741599, 0, 1.0};
Point(4) = {0.072446, 0.741777, 0, 1.0};
Point(5) = {0.070592, 0.742049, 0, 1.0};
Point(6) = {0.068279, 0.742412, 0, 1.0};
Point(7) = {0.065543, 0.742863, 0, 1.0};
Point(8) = {0.062417, 0.743395, 0, 1.0};
Point(9) = {0.058938, 0.744000, 0, 1.0};
Point(10) = {0.055156, 0.744655, 0, 1.0};
Point(11) = {0.051093, 0.745329, 0, 1.0};
Point(12) = {0.046766, 0.746008, 0, 1.0};
Point(13) = {0.042216, 0.746679, 0, 1.0};
Point(14) = {0.037465, 0.747313, 0, 1.0};
Point(15) = {0.032524, 0.747900, 0, 1.0};
Point(16) = {0.027431, 0.748437, 0, 1.0};
Point(17) = {0.022212, 0.748903, 0, 1.0};
Point(18) = {0.016884, 0.749290, 0, 1.0};
Point(19) = {0.011479, 0.749604, 0, 1.0};
Point(20) = {0.006027, 0.749827, 0, 1.0};
Point(21) = {0.000551, 0.749956, 0, 1.0};
Point(22) = {-0.004922, 0.750000, 0, 1.0};
Point(23) = {-0.010356, 0.749951, 0, 1.0};
Point(24) = {-0.015728, 0.749807, 0, 1.0};
Point(25) = {-0.021005, 0.749574, 0, 1.0};
Point(26) = {-0.026157, 0.749247, 0, 1.0};
Point(27) = {-0.031158, 0.748825, 0, 1.0};
Point(28) = {-0.035988, 0.748317, 0, 1.0};
Point(29) = {-0.040612, 0.747722, 0, 1.0};
Point(30) = {-0.045013, 0.747041, 0, 1.0};
Point(31) = {-0.049175, 0.746283, 0, 1.0};
Point(32) = {-0.053070, 0.745456, 0, 1.0};
Point(33) = {-0.056682, 0.744559, 0, 1.0};
Point(34) = {-0.060004, 0.743605, 0, 1.0};
Point(35) = {-0.063014, 0.742611, 0, 1.0};
Point(36) = {-0.065700, 0.741581, 0, 1.0};
Point(37) = {-0.068060, 0.740528, 0, 1.0};
Point(38) = {-0.070083, 0.739476, 0, 1.0};
Point(39) = {-0.071757, 0.738439, 0, 1.0};
Point(40) = {-0.073078, 0.737435, 0, 1.0};
Point(41) = {-0.074047, 0.736488, 0, 1.0};
Point(42) = {-0.074663, 0.735629, 0, 1.0};
Point(43) = {-0.074929, 0.734948, 0, 1.0};
Point(44) = {-0.074715, 0.734420, 0, 1.0};
Point(45) = {-0.073952, 0.734055, 0, 1.0};
Point(46) = {-0.072711, 0.733729, 0, 1.0};
Point(47) = {-0.071027, 0.733478, 0, 1.0};
Point(48) = {-0.068905, 0.733317, 0, 1.0};
Point(49) = {-0.066340, 0.733241, 0, 1.0};
Point(50) = {-0.063352, 0.733245, 0, 1.0};
Point(51) = {-0.059954, 0.733332, 0, 1.0};
Point(52) = {-0.056164, 0.733494, 0, 1.0};
Point(53) = {-0.052001, 0.733725, 0, 1.0};
Point(54) = {-0.047490, 0.734019, 0, 1.0};
Point(55) = {-0.042656, 0.734370, 0, 1.0};
Point(56) = {-0.037528, 0.734769, 0, 1.0};
Point(57) = {-0.032138, 0.735209, 0, 1.0};
Point(58) = {-0.026516, 0.735683, 0, 1.0};
Point(59) = {-0.020698, 0.736178, 0, 1.0};
Point(60) = {-0.014724, 0.736688, 0, 1.0};
Point(61) = {-0.008631, 0.737201, 0, 1.0};
Point(62) = {-0.002461, 0.737710, 0, 1.0};
Point(63) = {0.003745, 0.738207, 0, 1.0};
Point(64) = {0.009941, 0.738683, 0, 1.0};
Point(65) = {0.016085, 0.739131, 0, 1.0};
Point(66) = {0.022132, 0.739545, 0, 1.0};
Point(67) = {0.028035, 0.739922, 0, 1.0};
Point(68) = {0.033754, 0.740258, 0, 1.0};
Point(69) = {0.039246, 0.740552, 0, 1.0};
Point(70) = {0.044470, 0.740804, 0, 1.0};
Point(71) = {0.049388, 0.741010, 0, 1.0};
Point(72) = {0.053960, 0.741177, 0, 1.0};
Point(73) = {0.058155, 0.741302, 0, 1.0};
Point(74) = {0.061939, 0.741391, 0, 1.0};
Point(75) = {0.065284, 0.741448, 0, 1.0};
Point(76) = {0.068162, 0.741479, 0, 1.0};
Point(77) = {0.070552, 0.741490, 0, 1.0};
Point(78) = {0.072431, 0.741492, 0, 1.0};
Point(79) = {0.073799, 0.741495, 0, 1.0};
Point(80) = {0.074642, 0.741488, 0, 1.0};
Point(81) = {-0.074929, -0.741480, 0, 1.0};
Point(82) = {-0.074645, -0.741505, 0, 1.0};
Point(83) = {-0.073808, -0.741599, 0, 1.0};
Point(84) = {-0.072446, -0.741777, 0, 1.0};
Point(85) = {-0.070592, -0.742049, 0, 1.0};
Point(86) = {-0.068279, -0.742412, 0, 1.0};
Point(87) = {-0.065543, -0.742863, 0, 1.0};
Point(88) = {-0.062417, -0.743395, 0, 1.0};
Point(89) = {-0.058938, -0.744000, 0, 1.0};
Point(90) = {-0.055156, -0.744655, 0, 1.0};
Point(91) = {-0.051093, -0.745329, 0, 1.0};
Point(92) = {-0.046766, -0.746008, 0, 1.0};
Point(93) = {-0.042216, -0.746679, 0, 1.0};
Point(94) = {-0.037465, -0.747313, 0, 1.0};
Point(95) = {-0.032524, -0.747900, 0, 1.0};
Point(96) = {-0.027431, -0.748437, 0, 1.0};
Point(97) = {-0.022212, -0.748903, 0, 1.0};
Point(98) = {-0.016884, -0.749290, 0, 1.0};
Point(99) = {-0.011479, -0.749604, 0, 1.0};
Point(100) = {-0.006027, -0.749827, 0, 1.0};
Point(101) = {-0.000551, -0.749956, 0, 1.0};
Point(102) = {0.004922, -0.750000, 0, 1.0};
Point(103) = {0.010356, -0.749951, 0, 1.0};
Point(104) = {0.015728, -0.749807, 0, 1.0};
Point(105) = {0.021005, -0.749574, 0, 1.0};
Point(106) = {0.026157, -0.749247, 0, 1.0};
Point(107) = {0.031158, -0.748825, 0, 1.0};
Point(108) = {0.035988, -0.748317, 0, 1.0};
Point(109) = {0.040612, -0.747722, 0, 1.0};
Point(110) = {0.045013, -0.747041, 0, 1.0};
Point(111) = {0.049175, -0.746283, 0, 1.0};
Point(112) = {0.053070, -0.745456, 0, 1.0};
Point(113) = {0.056682, -0.744559, 0, 1.0};
Point(114) = {0.060004, -0.743605, 0, 1.0};
Point(115) = {0.063014, -0.742611, 0, 1.0};
Point(116) = {0.065700, -0.741581, 0, 1.0};
Point(117) = {0.068060, -0.740528, 0, 1.0};
Point(118) = {0.070083, -0.739476, 0, 1.0};
Point(119) = {0.071757, -0.738439, 0, 1.0};
Point(120) = {0.073078, -0.737435, 0, 1.0};
Point(121) = {0.074047, -0.736488, 0, 1.0};
Point(122) = {0.074663, -0.735629, 0, 1.0};
Point(123) = {0.074929, -0.734948, 0, 1.0};
Point(124) = {0.074715, -0.734420, 0, 1.0};
Point(125) = {0.073952, -0.734055, 0, 1.0};
Point(126) = {0.072711, -0.733729, 0, 1.0};
Point(127) = {0.071027, -0.733478, 0, 1.0};
Point(128) = {0.068905, -0.733317, 0, 1.0};
Point(129) = {0.066340, -0.733241, 0, 1.0};
Point(130) = {0.063352, -0.733245, 0, 1.0};
Point(131) = {0.059954, -0.733332, 0, 1.0};
Point(132) = {0.056164, -0.733494, 0, 1.0};
Point(133) = {0.052001, -0.733725, 0, 1.0};
Point(134) = {0.047490, -0.734019, 0, 1.0};
Point(135) = {0.042656, -0.734370, 0, 1.0};
Point(136) = {0.037528, -0.734769, 0, 1.0};
Point(137) = {0.032138, -0.735209, 0, 1.0};
Point(138) = {0.026516, -0.735683, 0, 1.0};
Point(139) = {0.020698, -0.736178, 0, 1.0};
Point(140) = {0.014724, -0.736688, 0, 1.0};
Point(141) = {0.008631, -0.737201, 0, 1.0};
Point(142) = {0.002461, -0.737710, 0, 1.0};
Point(143) = {-0.003745, -0.738207, 0, 1.0};
Point(144) = {-0.009941, -0.738683, 0, 1.0};
Point(145) = {-0.016085, -0.739131, 0, 1.0};
Point(146) = {-0.022132, -0.739545, 0, 1.0};
Point(147) = {-0.028035, -0.739922, 0, 1.0};
Point(148) = {-0.033754, -0.740258, 0, 1.0};
Point(149) = {-0.039246, -0.740552, 0, 1.0};
Point(150) = {-0.044470, -0.740804, 0, 1.0};
Point(151) = {-0.049388, -0.741010, 0, 1.0};
Point(152) = {-0.053960, -0.741177, 0, 1.0};
Point(153) = {-0.058155, -0.741302, 0, 1.0};
Point(154) = {-0.061939, -0.741391, 0, 1.0};
Point(155) = {-0.065284, -0.741448, 0, 1.0};
Point(156) = {-0.068162, -0.741479, 0, 1.0};
Point(157) = {-0.070552, -0.741490, 0, 1.0};
Point(158) = {-0.072431, -0.741492, 0, 1.0};
Point(159) = {-0.073799, -0.741495, 0, 1.0};
Point(160) = {-0.074642, -0.741488, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html