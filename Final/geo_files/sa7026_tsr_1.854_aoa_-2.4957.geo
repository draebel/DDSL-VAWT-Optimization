SetFactory("OpenCASCADE");

Point(1) = {0.074905, 0.744320, 0, 1.0};
Point(2) = {0.074716, 0.744336, 0, 1.0};
Point(3) = {0.074158, 0.744399, 0, 1.0};
Point(4) = {0.073250, 0.744518, 0, 1.0};
Point(5) = {0.072014, 0.744699, 0, 1.0};
Point(6) = {0.070472, 0.744941, 0, 1.0};
Point(7) = {0.068648, 0.745242, 0, 1.0};
Point(8) = {0.066564, 0.745597, 0, 1.0};
Point(9) = {0.064245, 0.746000, 0, 1.0};
Point(10) = {0.061723, 0.746437, 0, 1.0};
Point(11) = {0.059014, 0.746886, 0, 1.0};
Point(12) = {0.056130, 0.747339, 0, 1.0};
Point(13) = {0.053097, 0.747786, 0, 1.0};
Point(14) = {0.049929, 0.748209, 0, 1.0};
Point(15) = {0.046635, 0.748600, 0, 1.0};
Point(16) = {0.043240, 0.748958, 0, 1.0};
Point(17) = {0.039760, 0.749269, 0, 1.0};
Point(18) = {0.036209, 0.749527, 0, 1.0};
Point(19) = {0.032605, 0.749736, 0, 1.0};
Point(20) = {0.028970, 0.749885, 0, 1.0};
Point(21) = {0.025320, 0.749971, 0, 1.0};
Point(22) = {0.021671, 0.750000, 0, 1.0};
Point(23) = {0.018048, 0.749967, 0, 1.0};
Point(24) = {0.014467, 0.749871, 0, 1.0};
Point(25) = {0.010950, 0.749716, 0, 1.0};
Point(26) = {0.007515, 0.749498, 0, 1.0};
Point(27) = {0.004181, 0.749217, 0, 1.0};
Point(28) = {0.000961, 0.748878, 0, 1.0};
Point(29) = {-0.002122, 0.748481, 0, 1.0};
Point(30) = {-0.005056, 0.748027, 0, 1.0};
Point(31) = {-0.007831, 0.747522, 0, 1.0};
Point(32) = {-0.010427, 0.746970, 0, 1.0};
Point(33) = {-0.012835, 0.746373, 0, 1.0};
Point(34) = {-0.015050, 0.745737, 0, 1.0};
Point(35) = {-0.017057, 0.745074, 0, 1.0};
Point(36) = {-0.018848, 0.744387, 0, 1.0};
Point(37) = {-0.020421, 0.743685, 0, 1.0};
Point(38) = {-0.021769, 0.742984, 0, 1.0};
Point(39) = {-0.022885, 0.742292, 0, 1.0};
Point(40) = {-0.023766, 0.741623, 0, 1.0};
Point(41) = {-0.024412, 0.740992, 0, 1.0};
Point(42) = {-0.024823, 0.740419, 0, 1.0};
Point(43) = {-0.025000, 0.739965, 0, 1.0};
Point(44) = {-0.024858, 0.739613, 0, 1.0};
Point(45) = {-0.024348, 0.739370, 0, 1.0};
Point(46) = {-0.023521, 0.739153, 0, 1.0};
Point(47) = {-0.022399, 0.738986, 0, 1.0};
Point(48) = {-0.020984, 0.738878, 0, 1.0};
Point(49) = {-0.019274, 0.738827, 0, 1.0};
Point(50) = {-0.017282, 0.738830, 0, 1.0};
Point(51) = {-0.015017, 0.738888, 0, 1.0};
Point(52) = {-0.012490, 0.738996, 0, 1.0};
Point(53) = {-0.009715, 0.739150, 0, 1.0};
Point(54) = {-0.006708, 0.739346, 0, 1.0};
Point(55) = {-0.003485, 0.739580, 0, 1.0};
Point(56) = {-0.000066, 0.739846, 0, 1.0};
Point(57) = {0.003527, 0.740140, 0, 1.0};
Point(58) = {0.007275, 0.740455, 0, 1.0};
Point(59) = {0.011154, 0.740785, 0, 1.0};
Point(60) = {0.015137, 0.741125, 0, 1.0};
Point(61) = {0.019199, 0.741467, 0, 1.0};
Point(62) = {0.023312, 0.741807, 0, 1.0};
Point(63) = {0.027449, 0.742138, 0, 1.0};
Point(64) = {0.031580, 0.742455, 0, 1.0};
Point(65) = {0.035676, 0.742754, 0, 1.0};
Point(66) = {0.039707, 0.743030, 0, 1.0};
Point(67) = {0.043643, 0.743281, 0, 1.0};
Point(68) = {0.047456, 0.743506, 0, 1.0};
Point(69) = {0.051117, 0.743701, 0, 1.0};
Point(70) = {0.054600, 0.743869, 0, 1.0};
Point(71) = {0.057878, 0.744007, 0, 1.0};
Point(72) = {0.060926, 0.744118, 0, 1.0};
Point(73) = {0.063723, 0.744202, 0, 1.0};
Point(74) = {0.066246, 0.744261, 0, 1.0};
Point(75) = {0.068475, 0.744299, 0, 1.0};
Point(76) = {0.070394, 0.744319, 0, 1.0};
Point(77) = {0.071987, 0.744327, 0, 1.0};
Point(78) = {0.073240, 0.744328, 0, 1.0};
Point(79) = {0.074152, 0.744330, 0, 1.0};
Point(80) = {0.074714, 0.744325, 0, 1.0};
Point(81) = {-0.074905, -0.744320, 0, 1.0};
Point(82) = {-0.074716, -0.744336, 0, 1.0};
Point(83) = {-0.074158, -0.744399, 0, 1.0};
Point(84) = {-0.073250, -0.744518, 0, 1.0};
Point(85) = {-0.072014, -0.744699, 0, 1.0};
Point(86) = {-0.070472, -0.744941, 0, 1.0};
Point(87) = {-0.068648, -0.745242, 0, 1.0};
Point(88) = {-0.066564, -0.745597, 0, 1.0};
Point(89) = {-0.064245, -0.746000, 0, 1.0};
Point(90) = {-0.061723, -0.746437, 0, 1.0};
Point(91) = {-0.059014, -0.746886, 0, 1.0};
Point(92) = {-0.056130, -0.747339, 0, 1.0};
Point(93) = {-0.053097, -0.747786, 0, 1.0};
Point(94) = {-0.049929, -0.748209, 0, 1.0};
Point(95) = {-0.046635, -0.748600, 0, 1.0};
Point(96) = {-0.043240, -0.748958, 0, 1.0};
Point(97) = {-0.039760, -0.749269, 0, 1.0};
Point(98) = {-0.036209, -0.749527, 0, 1.0};
Point(99) = {-0.032605, -0.749736, 0, 1.0};
Point(100) = {-0.028970, -0.749885, 0, 1.0};
Point(101) = {-0.025320, -0.749971, 0, 1.0};
Point(102) = {-0.021671, -0.750000, 0, 1.0};
Point(103) = {-0.018048, -0.749967, 0, 1.0};
Point(104) = {-0.014467, -0.749871, 0, 1.0};
Point(105) = {-0.010950, -0.749716, 0, 1.0};
Point(106) = {-0.007515, -0.749498, 0, 1.0};
Point(107) = {-0.004181, -0.749217, 0, 1.0};
Point(108) = {-0.000961, -0.748878, 0, 1.0};
Point(109) = {0.002122, -0.748481, 0, 1.0};
Point(110) = {0.005056, -0.748027, 0, 1.0};
Point(111) = {0.007831, -0.747522, 0, 1.0};
Point(112) = {0.010427, -0.746970, 0, 1.0};
Point(113) = {0.012835, -0.746373, 0, 1.0};
Point(114) = {0.015050, -0.745737, 0, 1.0};
Point(115) = {0.017057, -0.745074, 0, 1.0};
Point(116) = {0.018848, -0.744387, 0, 1.0};
Point(117) = {0.020421, -0.743685, 0, 1.0};
Point(118) = {0.021769, -0.742984, 0, 1.0};
Point(119) = {0.022885, -0.742292, 0, 1.0};
Point(120) = {0.023766, -0.741623, 0, 1.0};
Point(121) = {0.024412, -0.740992, 0, 1.0};
Point(122) = {0.024823, -0.740419, 0, 1.0};
Point(123) = {0.025000, -0.739965, 0, 1.0};
Point(124) = {0.024858, -0.739613, 0, 1.0};
Point(125) = {0.024348, -0.739370, 0, 1.0};
Point(126) = {0.023521, -0.739153, 0, 1.0};
Point(127) = {0.022399, -0.738986, 0, 1.0};
Point(128) = {0.020984, -0.738878, 0, 1.0};
Point(129) = {0.019274, -0.738827, 0, 1.0};
Point(130) = {0.017282, -0.738830, 0, 1.0};
Point(131) = {0.015017, -0.738888, 0, 1.0};
Point(132) = {0.012490, -0.738996, 0, 1.0};
Point(133) = {0.009715, -0.739150, 0, 1.0};
Point(134) = {0.006708, -0.739346, 0, 1.0};
Point(135) = {0.003485, -0.739580, 0, 1.0};
Point(136) = {0.000066, -0.739846, 0, 1.0};
Point(137) = {-0.003527, -0.740140, 0, 1.0};
Point(138) = {-0.007275, -0.740455, 0, 1.0};
Point(139) = {-0.011154, -0.740785, 0, 1.0};
Point(140) = {-0.015137, -0.741125, 0, 1.0};
Point(141) = {-0.019199, -0.741467, 0, 1.0};
Point(142) = {-0.023312, -0.741807, 0, 1.0};
Point(143) = {-0.027449, -0.742138, 0, 1.0};
Point(144) = {-0.031580, -0.742455, 0, 1.0};
Point(145) = {-0.035676, -0.742754, 0, 1.0};
Point(146) = {-0.039707, -0.743030, 0, 1.0};
Point(147) = {-0.043643, -0.743281, 0, 1.0};
Point(148) = {-0.047456, -0.743506, 0, 1.0};
Point(149) = {-0.051117, -0.743701, 0, 1.0};
Point(150) = {-0.054600, -0.743869, 0, 1.0};
Point(151) = {-0.057878, -0.744007, 0, 1.0};
Point(152) = {-0.060926, -0.744118, 0, 1.0};
Point(153) = {-0.063723, -0.744202, 0, 1.0};
Point(154) = {-0.066246, -0.744261, 0, 1.0};
Point(155) = {-0.068475, -0.744299, 0, 1.0};
Point(156) = {-0.070394, -0.744319, 0, 1.0};
Point(157) = {-0.071987, -0.744327, 0, 1.0};
Point(158) = {-0.073240, -0.744328, 0, 1.0};
Point(159) = {-0.074152, -0.744330, 0, 1.0};
Point(160) = {-0.074714, -0.744325, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html