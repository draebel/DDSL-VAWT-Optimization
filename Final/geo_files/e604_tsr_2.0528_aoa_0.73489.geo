SetFactory("OpenCASCADE");

Point(1) = {0.112488, 0.729773, 0, 1.0};
Point(2) = {0.111926, 0.729945, 0, 1.0};
Point(3) = {0.110352, 0.730488, 0, 1.0};
Point(4) = {0.107948, 0.731365, 0, 1.0};
Point(5) = {0.104796, 0.732448, 0, 1.0};
Point(6) = {0.100888, 0.733687, 0, 1.0};
Point(7) = {0.096271, 0.735104, 0, 1.0};
Point(8) = {0.091045, 0.736688, 0, 1.0};
Point(9) = {0.085313, 0.738399, 0, 1.0};
Point(10) = {0.079170, 0.740191, 0, 1.0};
Point(11) = {0.072707, 0.742001, 0, 1.0};
Point(12) = {0.066012, 0.743770, 0, 1.0};
Point(13) = {0.059161, 0.745433, 0, 1.0};
Point(14) = {0.052229, 0.746926, 0, 1.0};
Point(15) = {0.045280, 0.748173, 0, 1.0};
Point(16) = {0.038331, 0.749104, 0, 1.0};
Point(17) = {0.031387, 0.749707, 0, 1.0};
Point(18) = {0.024489, 0.750000, 0, 1.0};
Point(19) = {0.017684, 0.749993, 0, 1.0};
Point(20) = {0.011030, 0.749702, 0, 1.0};
Point(21) = {0.004585, 0.749144, 0, 1.0};
Point(22) = {-0.001593, 0.748345, 0, 1.0};
Point(23) = {-0.007440, 0.747327, 0, 1.0};
Point(24) = {-0.012895, 0.746111, 0, 1.0};
Point(25) = {-0.017906, 0.744719, 0, 1.0};
Point(26) = {-0.022425, 0.743178, 0, 1.0};
Point(27) = {-0.026411, 0.741516, 0, 1.0};
Point(28) = {-0.029828, 0.739768, 0, 1.0};
Point(29) = {-0.032646, 0.737970, 0, 1.0};
Point(30) = {-0.034841, 0.736168, 0, 1.0};
Point(31) = {-0.036397, 0.734418, 0, 1.0};
Point(32) = {-0.037286, 0.732798, 0, 1.0};
Point(33) = {-0.037445, 0.732241, 0, 1.0};
Point(34) = {-0.037488, 0.731962, 0, 1.0};
Point(35) = {-0.037494, 0.731572, 0, 1.0};
Point(36) = {-0.037478, 0.731454, 0, 1.0};
Point(37) = {-0.037449, 0.731341, 0, 1.0};
Point(38) = {-0.037407, 0.731231, 0, 1.0};
Point(39) = {-0.037350, 0.731122, 0, 1.0};
Point(40) = {-0.037279, 0.731010, 0, 1.0};
Point(41) = {-0.037110, 0.730787, 0, 1.0};
Point(42) = {-0.036900, 0.730561, 0, 1.0};
Point(43) = {-0.036518, 0.730219, 0, 1.0};
Point(44) = {-0.034870, 0.729172, 0, 1.0};
Point(45) = {-0.032310, 0.728066, 0, 1.0};
Point(46) = {-0.028985, 0.727020, 0, 1.0};
Point(47) = {-0.024934, 0.726044, 0, 1.0};
Point(48) = {-0.020208, 0.725140, 0, 1.0};
Point(49) = {-0.014872, 0.724317, 0, 1.0};
Point(50) = {-0.008998, 0.723586, 0, 1.0};
Point(51) = {-0.002656, 0.722962, 0, 1.0};
Point(52) = {0.004076, 0.722456, 0, 1.0};
Point(53) = {0.011116, 0.722080, 0, 1.0};
Point(54) = {0.018373, 0.721851, 0, 1.0};
Point(55) = {0.025755, 0.721789, 0, 1.0};
Point(56) = {0.033163, 0.721949, 0, 1.0};
Point(57) = {0.040558, 0.722412, 0, 1.0};
Point(58) = {0.047970, 0.723202, 0, 1.0};
Point(59) = {0.055420, 0.724269, 0, 1.0};
Point(60) = {0.062893, 0.725526, 0, 1.0};
Point(61) = {0.070358, 0.726859, 0, 1.0};
Point(62) = {0.077724, 0.728113, 0, 1.0};
Point(63) = {0.084831, 0.729169, 0, 1.0};
Point(64) = {0.091500, 0.729952, 0, 1.0};
Point(65) = {0.097547, 0.730422, 0, 1.0};
Point(66) = {0.102788, 0.730573, 0, 1.0};
Point(67) = {0.107022, 0.730439, 0, 1.0};
Point(68) = {0.110077, 0.730148, 0, 1.0};
Point(69) = {0.111890, 0.729880, 0, 1.0};
Point(70) = {-0.112488, -0.729773, 0, 1.0};
Point(71) = {-0.111926, -0.729945, 0, 1.0};
Point(72) = {-0.110352, -0.730488, 0, 1.0};
Point(73) = {-0.107948, -0.731365, 0, 1.0};
Point(74) = {-0.104796, -0.732448, 0, 1.0};
Point(75) = {-0.100888, -0.733687, 0, 1.0};
Point(76) = {-0.096271, -0.735104, 0, 1.0};
Point(77) = {-0.091045, -0.736688, 0, 1.0};
Point(78) = {-0.085313, -0.738399, 0, 1.0};
Point(79) = {-0.079170, -0.740191, 0, 1.0};
Point(80) = {-0.072707, -0.742001, 0, 1.0};
Point(81) = {-0.066012, -0.743770, 0, 1.0};
Point(82) = {-0.059161, -0.745433, 0, 1.0};
Point(83) = {-0.052229, -0.746926, 0, 1.0};
Point(84) = {-0.045280, -0.748173, 0, 1.0};
Point(85) = {-0.038331, -0.749104, 0, 1.0};
Point(86) = {-0.031387, -0.749707, 0, 1.0};
Point(87) = {-0.024489, -0.750000, 0, 1.0};
Point(88) = {-0.017684, -0.749993, 0, 1.0};
Point(89) = {-0.011030, -0.749702, 0, 1.0};
Point(90) = {-0.004585, -0.749144, 0, 1.0};
Point(91) = {0.001593, -0.748345, 0, 1.0};
Point(92) = {0.007440, -0.747327, 0, 1.0};
Point(93) = {0.012895, -0.746111, 0, 1.0};
Point(94) = {0.017906, -0.744719, 0, 1.0};
Point(95) = {0.022425, -0.743178, 0, 1.0};
Point(96) = {0.026411, -0.741516, 0, 1.0};
Point(97) = {0.029828, -0.739768, 0, 1.0};
Point(98) = {0.032646, -0.737970, 0, 1.0};
Point(99) = {0.034841, -0.736168, 0, 1.0};
Point(100) = {0.036397, -0.734418, 0, 1.0};
Point(101) = {0.037286, -0.732798, 0, 1.0};
Point(102) = {0.037445, -0.732241, 0, 1.0};
Point(103) = {0.037488, -0.731962, 0, 1.0};
Point(104) = {0.037494, -0.731572, 0, 1.0};
Point(105) = {0.037478, -0.731454, 0, 1.0};
Point(106) = {0.037449, -0.731341, 0, 1.0};
Point(107) = {0.037407, -0.731231, 0, 1.0};
Point(108) = {0.037350, -0.731122, 0, 1.0};
Point(109) = {0.037279, -0.731010, 0, 1.0};
Point(110) = {0.037110, -0.730787, 0, 1.0};
Point(111) = {0.036900, -0.730561, 0, 1.0};
Point(112) = {0.036518, -0.730219, 0, 1.0};
Point(113) = {0.034870, -0.729172, 0, 1.0};
Point(114) = {0.032310, -0.728066, 0, 1.0};
Point(115) = {0.028985, -0.727020, 0, 1.0};
Point(116) = {0.024934, -0.726044, 0, 1.0};
Point(117) = {0.020208, -0.725140, 0, 1.0};
Point(118) = {0.014872, -0.724317, 0, 1.0};
Point(119) = {0.008998, -0.723586, 0, 1.0};
Point(120) = {0.002656, -0.722962, 0, 1.0};
Point(121) = {-0.004076, -0.722456, 0, 1.0};
Point(122) = {-0.011116, -0.722080, 0, 1.0};
Point(123) = {-0.018373, -0.721851, 0, 1.0};
Point(124) = {-0.025755, -0.721789, 0, 1.0};
Point(125) = {-0.033163, -0.721949, 0, 1.0};
Point(126) = {-0.040558, -0.722412, 0, 1.0};
Point(127) = {-0.047970, -0.723202, 0, 1.0};
Point(128) = {-0.055420, -0.724269, 0, 1.0};
Point(129) = {-0.062893, -0.725526, 0, 1.0};
Point(130) = {-0.070358, -0.726859, 0, 1.0};
Point(131) = {-0.077724, -0.728113, 0, 1.0};
Point(132) = {-0.084831, -0.729169, 0, 1.0};
Point(133) = {-0.091500, -0.729952, 0, 1.0};
Point(134) = {-0.097547, -0.730422, 0, 1.0};
Point(135) = {-0.102788, -0.730573, 0, 1.0};
Point(136) = {-0.107022, -0.730439, 0, 1.0};
Point(137) = {-0.110077, -0.730148, 0, 1.0};
Point(138) = {-0.111890, -0.729880, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:52};
Spline(3) = {52:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:90};
Spline(6) = {90:121};
Spline(7) = {121:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html