SetFactory("OpenCASCADE");

Point(1) = {0.074995, 0.729772, 0, 1.0};
Point(2) = {0.074434, 0.729944, 0, 1.0};
Point(3) = {0.072859, 0.730487, 0, 1.0};
Point(4) = {0.070455, 0.731364, 0, 1.0};
Point(5) = {0.067304, 0.732447, 0, 1.0};
Point(6) = {0.063395, 0.733686, 0, 1.0};
Point(7) = {0.058778, 0.735103, 0, 1.0};
Point(8) = {0.053552, 0.736687, 0, 1.0};
Point(9) = {0.047819, 0.738399, 0, 1.0};
Point(10) = {0.041676, 0.740191, 0, 1.0};
Point(11) = {0.035212, 0.742001, 0, 1.0};
Point(12) = {0.028517, 0.743770, 0, 1.0};
Point(13) = {0.021666, 0.745433, 0, 1.0};
Point(14) = {0.014733, 0.746926, 0, 1.0};
Point(15) = {0.007784, 0.748173, 0, 1.0};
Point(16) = {0.000835, 0.749104, 0, 1.0};
Point(17) = {-0.006109, 0.749707, 0, 1.0};
Point(18) = {-0.013008, 0.750000, 0, 1.0};
Point(19) = {-0.019813, 0.749993, 0, 1.0};
Point(20) = {-0.026467, 0.749702, 0, 1.0};
Point(21) = {-0.032913, 0.749144, 0, 1.0};
Point(22) = {-0.039090, 0.748345, 0, 1.0};
Point(23) = {-0.044938, 0.747327, 0, 1.0};
Point(24) = {-0.050393, 0.746111, 0, 1.0};
Point(25) = {-0.055405, 0.744719, 0, 1.0};
Point(26) = {-0.059924, 0.743177, 0, 1.0};
Point(27) = {-0.063910, 0.741515, 0, 1.0};
Point(28) = {-0.067328, 0.739768, 0, 1.0};
Point(29) = {-0.070146, 0.737969, 0, 1.0};
Point(30) = {-0.072341, 0.736167, 0, 1.0};
Point(31) = {-0.073897, 0.734417, 0, 1.0};
Point(32) = {-0.074786, 0.732798, 0, 1.0};
Point(33) = {-0.074945, 0.732240, 0, 1.0};
Point(34) = {-0.074987, 0.731962, 0, 1.0};
Point(35) = {-0.074994, 0.731572, 0, 1.0};
Point(36) = {-0.074977, 0.731453, 0, 1.0};
Point(37) = {-0.074949, 0.731340, 0, 1.0};
Point(38) = {-0.074907, 0.731230, 0, 1.0};
Point(39) = {-0.074850, 0.731121, 0, 1.0};
Point(40) = {-0.074779, 0.731009, 0, 1.0};
Point(41) = {-0.074609, 0.730787, 0, 1.0};
Point(42) = {-0.074399, 0.730560, 0, 1.0};
Point(43) = {-0.074018, 0.730218, 0, 1.0};
Point(44) = {-0.072369, 0.729171, 0, 1.0};
Point(45) = {-0.069809, 0.728065, 0, 1.0};
Point(46) = {-0.066485, 0.727019, 0, 1.0};
Point(47) = {-0.062433, 0.726043, 0, 1.0};
Point(48) = {-0.057707, 0.725139, 0, 1.0};
Point(49) = {-0.052371, 0.724316, 0, 1.0};
Point(50) = {-0.046496, 0.723585, 0, 1.0};
Point(51) = {-0.040154, 0.722961, 0, 1.0};
Point(52) = {-0.033422, 0.722454, 0, 1.0};
Point(53) = {-0.026382, 0.722079, 0, 1.0};
Point(54) = {-0.019124, 0.721849, 0, 1.0};
Point(55) = {-0.011742, 0.721788, 0, 1.0};
Point(56) = {-0.004333, 0.721948, 0, 1.0};
Point(57) = {0.003063, 0.722411, 0, 1.0};
Point(58) = {0.010475, 0.723201, 0, 1.0};
Point(59) = {0.017925, 0.724268, 0, 1.0};
Point(60) = {0.025398, 0.725525, 0, 1.0};
Point(61) = {0.032864, 0.726858, 0, 1.0};
Point(62) = {0.040230, 0.728112, 0, 1.0};
Point(63) = {0.047338, 0.729168, 0, 1.0};
Point(64) = {0.054007, 0.729951, 0, 1.0};
Point(65) = {0.060054, 0.730421, 0, 1.0};
Point(66) = {0.065295, 0.730572, 0, 1.0};
Point(67) = {0.069530, 0.730438, 0, 1.0};
Point(68) = {0.072585, 0.730147, 0, 1.0};
Point(69) = {0.074398, 0.729879, 0, 1.0};
Point(70) = {-0.074995, -0.729772, 0, 1.0};
Point(71) = {-0.074434, -0.729944, 0, 1.0};
Point(72) = {-0.072859, -0.730487, 0, 1.0};
Point(73) = {-0.070455, -0.731364, 0, 1.0};
Point(74) = {-0.067304, -0.732447, 0, 1.0};
Point(75) = {-0.063395, -0.733686, 0, 1.0};
Point(76) = {-0.058778, -0.735103, 0, 1.0};
Point(77) = {-0.053552, -0.736687, 0, 1.0};
Point(78) = {-0.047819, -0.738399, 0, 1.0};
Point(79) = {-0.041676, -0.740191, 0, 1.0};
Point(80) = {-0.035212, -0.742001, 0, 1.0};
Point(81) = {-0.028517, -0.743770, 0, 1.0};
Point(82) = {-0.021666, -0.745433, 0, 1.0};
Point(83) = {-0.014733, -0.746926, 0, 1.0};
Point(84) = {-0.007784, -0.748173, 0, 1.0};
Point(85) = {-0.000835, -0.749104, 0, 1.0};
Point(86) = {0.006109, -0.749707, 0, 1.0};
Point(87) = {0.013008, -0.750000, 0, 1.0};
Point(88) = {0.019813, -0.749993, 0, 1.0};
Point(89) = {0.026467, -0.749702, 0, 1.0};
Point(90) = {0.032913, -0.749144, 0, 1.0};
Point(91) = {0.039090, -0.748345, 0, 1.0};
Point(92) = {0.044938, -0.747327, 0, 1.0};
Point(93) = {0.050393, -0.746111, 0, 1.0};
Point(94) = {0.055405, -0.744719, 0, 1.0};
Point(95) = {0.059924, -0.743177, 0, 1.0};
Point(96) = {0.063910, -0.741515, 0, 1.0};
Point(97) = {0.067328, -0.739768, 0, 1.0};
Point(98) = {0.070146, -0.737969, 0, 1.0};
Point(99) = {0.072341, -0.736167, 0, 1.0};
Point(100) = {0.073897, -0.734417, 0, 1.0};
Point(101) = {0.074786, -0.732798, 0, 1.0};
Point(102) = {0.074945, -0.732240, 0, 1.0};
Point(103) = {0.074987, -0.731962, 0, 1.0};
Point(104) = {0.074994, -0.731572, 0, 1.0};
Point(105) = {0.074977, -0.731453, 0, 1.0};
Point(106) = {0.074949, -0.731340, 0, 1.0};
Point(107) = {0.074907, -0.731230, 0, 1.0};
Point(108) = {0.074850, -0.731121, 0, 1.0};
Point(109) = {0.074779, -0.731009, 0, 1.0};
Point(110) = {0.074609, -0.730787, 0, 1.0};
Point(111) = {0.074399, -0.730560, 0, 1.0};
Point(112) = {0.074018, -0.730218, 0, 1.0};
Point(113) = {0.072369, -0.729171, 0, 1.0};
Point(114) = {0.069809, -0.728065, 0, 1.0};
Point(115) = {0.066485, -0.727019, 0, 1.0};
Point(116) = {0.062433, -0.726043, 0, 1.0};
Point(117) = {0.057707, -0.725139, 0, 1.0};
Point(118) = {0.052371, -0.724316, 0, 1.0};
Point(119) = {0.046496, -0.723585, 0, 1.0};
Point(120) = {0.040154, -0.722961, 0, 1.0};
Point(121) = {0.033422, -0.722454, 0, 1.0};
Point(122) = {0.026382, -0.722079, 0, 1.0};
Point(123) = {0.019124, -0.721849, 0, 1.0};
Point(124) = {0.011742, -0.721788, 0, 1.0};
Point(125) = {0.004333, -0.721948, 0, 1.0};
Point(126) = {-0.003063, -0.722411, 0, 1.0};
Point(127) = {-0.010475, -0.723201, 0, 1.0};
Point(128) = {-0.017925, -0.724268, 0, 1.0};
Point(129) = {-0.025398, -0.725525, 0, 1.0};
Point(130) = {-0.032864, -0.726858, 0, 1.0};
Point(131) = {-0.040230, -0.728112, 0, 1.0};
Point(132) = {-0.047338, -0.729168, 0, 1.0};
Point(133) = {-0.054007, -0.729951, 0, 1.0};
Point(134) = {-0.060054, -0.730421, 0, 1.0};
Point(135) = {-0.065295, -0.730572, 0, 1.0};
Point(136) = {-0.069530, -0.730438, 0, 1.0};
Point(137) = {-0.072585, -0.730147, 0, 1.0};
Point(138) = {-0.074398, -0.729879, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:52};
Spline(3) = {52:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:90};
Spline(6) = {90:121};
Spline(7) = {121:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html