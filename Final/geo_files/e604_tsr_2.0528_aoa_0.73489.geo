SetFactory("OpenCASCADE");

Point(1) = {0.074992, 0.736515, 0, 1.0};
Point(2) = {0.074617, 0.736630, 0, 1.0};
Point(3) = {0.073568, 0.736992, 0, 1.0};
Point(4) = {0.071965, 0.737576, 0, 1.0};
Point(5) = {0.069864, 0.738298, 0, 1.0};
Point(6) = {0.067259, 0.739125, 0, 1.0};
Point(7) = {0.064180, 0.740069, 0, 1.0};
Point(8) = {0.060697, 0.741125, 0, 1.0};
Point(9) = {0.056875, 0.742266, 0, 1.0};
Point(10) = {0.052780, 0.743461, 0, 1.0};
Point(11) = {0.048471, 0.744667, 0, 1.0};
Point(12) = {0.044008, 0.745847, 0, 1.0};
Point(13) = {0.039441, 0.746955, 0, 1.0};
Point(14) = {0.034819, 0.747951, 0, 1.0};
Point(15) = {0.030186, 0.748782, 0, 1.0};
Point(16) = {0.025554, 0.749403, 0, 1.0};
Point(17) = {0.020925, 0.749805, 0, 1.0};
Point(18) = {0.016326, 0.750000, 0, 1.0};
Point(19) = {0.011789, 0.749995, 0, 1.0};
Point(20) = {0.007354, 0.749801, 0, 1.0};
Point(21) = {0.003056, 0.749429, 0, 1.0};
Point(22) = {-0.001062, 0.748897, 0, 1.0};
Point(23) = {-0.004960, 0.748218, 0, 1.0};
Point(24) = {-0.008596, 0.747407, 0, 1.0};
Point(25) = {-0.011938, 0.746479, 0, 1.0};
Point(26) = {-0.014950, 0.745452, 0, 1.0};
Point(27) = {-0.017607, 0.744344, 0, 1.0};
Point(28) = {-0.019886, 0.743179, 0, 1.0};
Point(29) = {-0.021764, 0.741980, 0, 1.0};
Point(30) = {-0.023228, 0.740779, 0, 1.0};
Point(31) = {-0.024265, 0.739612, 0, 1.0};
Point(32) = {-0.024858, 0.738532, 0, 1.0};
Point(33) = {-0.024963, 0.738161, 0, 1.0};
Point(34) = {-0.024992, 0.737975, 0, 1.0};
Point(35) = {-0.024996, 0.737715, 0, 1.0};
Point(36) = {-0.024985, 0.737636, 0, 1.0};
Point(37) = {-0.024966, 0.737561, 0, 1.0};
Point(38) = {-0.024938, 0.737487, 0, 1.0};
Point(39) = {-0.024900, 0.737415, 0, 1.0};
Point(40) = {-0.024853, 0.737340, 0, 1.0};
Point(41) = {-0.024740, 0.737192, 0, 1.0};
Point(42) = {-0.024600, 0.737041, 0, 1.0};
Point(43) = {-0.024346, 0.736813, 0, 1.0};
Point(44) = {-0.023246, 0.736114, 0, 1.0};
Point(45) = {-0.021540, 0.735377, 0, 1.0};
Point(46) = {-0.019324, 0.734680, 0, 1.0};
Point(47) = {-0.016623, 0.734029, 0, 1.0};
Point(48) = {-0.013472, 0.733427, 0, 1.0};
Point(49) = {-0.009915, 0.732878, 0, 1.0};
Point(50) = {-0.005999, 0.732391, 0, 1.0};
Point(51) = {-0.001771, 0.731975, 0, 1.0};
Point(52) = {0.002717, 0.731637, 0, 1.0};
Point(53) = {0.007410, 0.731387, 0, 1.0};
Point(54) = {0.012249, 0.731234, 0, 1.0};
Point(55) = {0.017170, 0.731193, 0, 1.0};
Point(56) = {0.022109, 0.731299, 0, 1.0};
Point(57) = {0.027039, 0.731608, 0, 1.0};
Point(58) = {0.031980, 0.732135, 0, 1.0};
Point(59) = {0.036947, 0.732846, 0, 1.0};
Point(60) = {0.041929, 0.733684, 0, 1.0};
Point(61) = {0.046906, 0.734573, 0, 1.0};
Point(62) = {0.051816, 0.735409, 0, 1.0};
Point(63) = {0.056554, 0.736113, 0, 1.0};
Point(64) = {0.061000, 0.736635, 0, 1.0};
Point(65) = {0.065032, 0.736948, 0, 1.0};
Point(66) = {0.068525, 0.737048, 0, 1.0};
Point(67) = {0.071348, 0.736959, 0, 1.0};
Point(68) = {0.073385, 0.736765, 0, 1.0};
Point(69) = {0.074594, 0.736587, 0, 1.0};
Point(70) = {-0.074992, -0.736515, 0, 1.0};
Point(71) = {-0.074617, -0.736630, 0, 1.0};
Point(72) = {-0.073568, -0.736992, 0, 1.0};
Point(73) = {-0.071965, -0.737576, 0, 1.0};
Point(74) = {-0.069864, -0.738298, 0, 1.0};
Point(75) = {-0.067259, -0.739125, 0, 1.0};
Point(76) = {-0.064180, -0.740069, 0, 1.0};
Point(77) = {-0.060697, -0.741125, 0, 1.0};
Point(78) = {-0.056875, -0.742266, 0, 1.0};
Point(79) = {-0.052780, -0.743461, 0, 1.0};
Point(80) = {-0.048471, -0.744667, 0, 1.0};
Point(81) = {-0.044008, -0.745847, 0, 1.0};
Point(82) = {-0.039441, -0.746955, 0, 1.0};
Point(83) = {-0.034819, -0.747951, 0, 1.0};
Point(84) = {-0.030186, -0.748782, 0, 1.0};
Point(85) = {-0.025554, -0.749403, 0, 1.0};
Point(86) = {-0.020925, -0.749805, 0, 1.0};
Point(87) = {-0.016326, -0.750000, 0, 1.0};
Point(88) = {-0.011789, -0.749995, 0, 1.0};
Point(89) = {-0.007354, -0.749801, 0, 1.0};
Point(90) = {-0.003056, -0.749429, 0, 1.0};
Point(91) = {0.001062, -0.748897, 0, 1.0};
Point(92) = {0.004960, -0.748218, 0, 1.0};
Point(93) = {0.008596, -0.747407, 0, 1.0};
Point(94) = {0.011938, -0.746479, 0, 1.0};
Point(95) = {0.014950, -0.745452, 0, 1.0};
Point(96) = {0.017607, -0.744344, 0, 1.0};
Point(97) = {0.019886, -0.743179, 0, 1.0};
Point(98) = {0.021764, -0.741980, 0, 1.0};
Point(99) = {0.023228, -0.740779, 0, 1.0};
Point(100) = {0.024265, -0.739612, 0, 1.0};
Point(101) = {0.024858, -0.738532, 0, 1.0};
Point(102) = {0.024963, -0.738161, 0, 1.0};
Point(103) = {0.024992, -0.737975, 0, 1.0};
Point(104) = {0.024996, -0.737715, 0, 1.0};
Point(105) = {0.024985, -0.737636, 0, 1.0};
Point(106) = {0.024966, -0.737561, 0, 1.0};
Point(107) = {0.024938, -0.737487, 0, 1.0};
Point(108) = {0.024900, -0.737415, 0, 1.0};
Point(109) = {0.024853, -0.737340, 0, 1.0};
Point(110) = {0.024740, -0.737192, 0, 1.0};
Point(111) = {0.024600, -0.737041, 0, 1.0};
Point(112) = {0.024346, -0.736813, 0, 1.0};
Point(113) = {0.023246, -0.736114, 0, 1.0};
Point(114) = {0.021540, -0.735377, 0, 1.0};
Point(115) = {0.019324, -0.734680, 0, 1.0};
Point(116) = {0.016623, -0.734029, 0, 1.0};
Point(117) = {0.013472, -0.733427, 0, 1.0};
Point(118) = {0.009915, -0.732878, 0, 1.0};
Point(119) = {0.005999, -0.732391, 0, 1.0};
Point(120) = {0.001771, -0.731975, 0, 1.0};
Point(121) = {-0.002717, -0.731637, 0, 1.0};
Point(122) = {-0.007410, -0.731387, 0, 1.0};
Point(123) = {-0.012249, -0.731234, 0, 1.0};
Point(124) = {-0.017170, -0.731193, 0, 1.0};
Point(125) = {-0.022109, -0.731299, 0, 1.0};
Point(126) = {-0.027039, -0.731608, 0, 1.0};
Point(127) = {-0.031980, -0.732135, 0, 1.0};
Point(128) = {-0.036947, -0.732846, 0, 1.0};
Point(129) = {-0.041929, -0.733684, 0, 1.0};
Point(130) = {-0.046906, -0.734573, 0, 1.0};
Point(131) = {-0.051816, -0.735409, 0, 1.0};
Point(132) = {-0.056554, -0.736113, 0, 1.0};
Point(133) = {-0.061000, -0.736635, 0, 1.0};
Point(134) = {-0.065032, -0.736948, 0, 1.0};
Point(135) = {-0.068525, -0.737048, 0, 1.0};
Point(136) = {-0.071348, -0.736959, 0, 1.0};
Point(137) = {-0.073385, -0.736765, 0, 1.0};
Point(138) = {-0.074594, -0.736587, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:52};
Spline(3) = {52:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:90};
Spline(6) = {90:121};
Spline(7) = {121:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html