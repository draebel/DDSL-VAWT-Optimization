SetFactory("OpenCASCADE");

Point(1) = {0.112477, 0.729774, 0, 1.0};
Point(2) = {0.111916, 0.729946, 0, 1.0};
Point(3) = {0.110341, 0.730489, 0, 1.0};
Point(4) = {0.107938, 0.731365, 0, 1.0};
Point(5) = {0.104786, 0.732448, 0, 1.0};
Point(6) = {0.100878, 0.733688, 0, 1.0};
Point(7) = {0.096261, 0.735105, 0, 1.0};
Point(8) = {0.091036, 0.736688, 0, 1.0};
Point(9) = {0.085304, 0.738400, 0, 1.0};
Point(10) = {0.079161, 0.740192, 0, 1.0};
Point(11) = {0.072698, 0.742001, 0, 1.0};
Point(12) = {0.066004, 0.743770, 0, 1.0};
Point(13) = {0.059153, 0.745433, 0, 1.0};
Point(14) = {0.052221, 0.746926, 0, 1.0};
Point(15) = {0.045273, 0.748173, 0, 1.0};
Point(16) = {0.038324, 0.749104, 0, 1.0};
Point(17) = {0.031381, 0.749708, 0, 1.0};
Point(18) = {0.024483, 0.750000, 0, 1.0};
Point(19) = {0.017679, 0.749993, 0, 1.0};
Point(20) = {0.011025, 0.749702, 0, 1.0};
Point(21) = {0.004580, 0.749144, 0, 1.0};
Point(22) = {-0.001597, 0.748345, 0, 1.0};
Point(23) = {-0.007444, 0.747327, 0, 1.0};
Point(24) = {-0.012899, 0.746111, 0, 1.0};
Point(25) = {-0.017910, 0.744719, 0, 1.0};
Point(26) = {-0.022429, 0.743178, 0, 1.0};
Point(27) = {-0.026415, 0.741516, 0, 1.0};
Point(28) = {-0.029832, 0.739769, 0, 1.0};
Point(29) = {-0.032649, 0.737970, 0, 1.0};
Point(30) = {-0.034844, 0.736169, 0, 1.0};
Point(31) = {-0.036400, 0.734418, 0, 1.0};
Point(32) = {-0.037289, 0.732799, 0, 1.0};
Point(33) = {-0.037448, 0.732242, 0, 1.0};
Point(34) = {-0.037490, 0.731963, 0, 1.0};
Point(35) = {-0.037497, 0.731573, 0, 1.0};
Point(36) = {-0.037480, 0.731455, 0, 1.0};
Point(37) = {-0.037452, 0.731342, 0, 1.0};
Point(38) = {-0.037410, 0.731232, 0, 1.0};
Point(39) = {-0.037353, 0.731123, 0, 1.0};
Point(40) = {-0.037282, 0.731011, 0, 1.0};
Point(41) = {-0.037112, 0.730788, 0, 1.0};
Point(42) = {-0.036902, 0.730562, 0, 1.0};
Point(43) = {-0.036521, 0.730220, 0, 1.0};
Point(44) = {-0.034873, 0.729173, 0, 1.0};
Point(45) = {-0.032313, 0.728067, 0, 1.0};
Point(46) = {-0.028989, 0.727021, 0, 1.0};
Point(47) = {-0.024937, 0.726045, 0, 1.0};
Point(48) = {-0.020212, 0.725141, 0, 1.0};
Point(49) = {-0.014876, 0.724319, 0, 1.0};
Point(50) = {-0.009002, 0.723588, 0, 1.0};
Point(51) = {-0.002661, 0.722963, 0, 1.0};
Point(52) = {0.004071, 0.722457, 0, 1.0};
Point(53) = {0.011110, 0.722082, 0, 1.0};
Point(54) = {0.018368, 0.721852, 0, 1.0};
Point(55) = {0.025749, 0.721790, 0, 1.0};
Point(56) = {0.033156, 0.721950, 0, 1.0};
Point(57) = {0.040552, 0.722414, 0, 1.0};
Point(58) = {0.047963, 0.723203, 0, 1.0};
Point(59) = {0.055412, 0.724270, 0, 1.0};
Point(60) = {0.062885, 0.725528, 0, 1.0};
Point(61) = {0.070350, 0.726860, 0, 1.0};
Point(62) = {0.077715, 0.728114, 0, 1.0};
Point(63) = {0.084822, 0.729170, 0, 1.0};
Point(64) = {0.091491, 0.729953, 0, 1.0};
Point(65) = {0.097538, 0.730423, 0, 1.0};
Point(66) = {0.102778, 0.730574, 0, 1.0};
Point(67) = {0.107012, 0.730440, 0, 1.0};
Point(68) = {0.110067, 0.730149, 0, 1.0};
Point(69) = {0.111880, 0.729881, 0, 1.0};
Point(70) = {-0.112477, -0.729774, 0, 1.0};
Point(71) = {-0.111916, -0.729946, 0, 1.0};
Point(72) = {-0.110341, -0.730489, 0, 1.0};
Point(73) = {-0.107938, -0.731365, 0, 1.0};
Point(74) = {-0.104786, -0.732448, 0, 1.0};
Point(75) = {-0.100878, -0.733688, 0, 1.0};
Point(76) = {-0.096261, -0.735105, 0, 1.0};
Point(77) = {-0.091036, -0.736688, 0, 1.0};
Point(78) = {-0.085304, -0.738400, 0, 1.0};
Point(79) = {-0.079161, -0.740192, 0, 1.0};
Point(80) = {-0.072698, -0.742001, 0, 1.0};
Point(81) = {-0.066004, -0.743770, 0, 1.0};
Point(82) = {-0.059153, -0.745433, 0, 1.0};
Point(83) = {-0.052221, -0.746926, 0, 1.0};
Point(84) = {-0.045273, -0.748173, 0, 1.0};
Point(85) = {-0.038324, -0.749104, 0, 1.0};
Point(86) = {-0.031381, -0.749708, 0, 1.0};
Point(87) = {-0.024483, -0.750000, 0, 1.0};
Point(88) = {-0.017679, -0.749993, 0, 1.0};
Point(89) = {-0.011025, -0.749702, 0, 1.0};
Point(90) = {-0.004580, -0.749144, 0, 1.0};
Point(91) = {0.001597, -0.748345, 0, 1.0};
Point(92) = {0.007444, -0.747327, 0, 1.0};
Point(93) = {0.012899, -0.746111, 0, 1.0};
Point(94) = {0.017910, -0.744719, 0, 1.0};
Point(95) = {0.022429, -0.743178, 0, 1.0};
Point(96) = {0.026415, -0.741516, 0, 1.0};
Point(97) = {0.029832, -0.739769, 0, 1.0};
Point(98) = {0.032649, -0.737970, 0, 1.0};
Point(99) = {0.034844, -0.736169, 0, 1.0};
Point(100) = {0.036400, -0.734418, 0, 1.0};
Point(101) = {0.037289, -0.732799, 0, 1.0};
Point(102) = {0.037448, -0.732242, 0, 1.0};
Point(103) = {0.037490, -0.731963, 0, 1.0};
Point(104) = {0.037497, -0.731573, 0, 1.0};
Point(105) = {0.037480, -0.731455, 0, 1.0};
Point(106) = {0.037452, -0.731342, 0, 1.0};
Point(107) = {0.037410, -0.731232, 0, 1.0};
Point(108) = {0.037353, -0.731123, 0, 1.0};
Point(109) = {0.037282, -0.731011, 0, 1.0};
Point(110) = {0.037112, -0.730788, 0, 1.0};
Point(111) = {0.036902, -0.730562, 0, 1.0};
Point(112) = {0.036521, -0.730220, 0, 1.0};
Point(113) = {0.034873, -0.729173, 0, 1.0};
Point(114) = {0.032313, -0.728067, 0, 1.0};
Point(115) = {0.028989, -0.727021, 0, 1.0};
Point(116) = {0.024937, -0.726045, 0, 1.0};
Point(117) = {0.020212, -0.725141, 0, 1.0};
Point(118) = {0.014876, -0.724319, 0, 1.0};
Point(119) = {0.009002, -0.723588, 0, 1.0};
Point(120) = {0.002661, -0.722963, 0, 1.0};
Point(121) = {-0.004071, -0.722457, 0, 1.0};
Point(122) = {-0.011110, -0.722082, 0, 1.0};
Point(123) = {-0.018368, -0.721852, 0, 1.0};
Point(124) = {-0.025749, -0.721790, 0, 1.0};
Point(125) = {-0.033156, -0.721950, 0, 1.0};
Point(126) = {-0.040552, -0.722414, 0, 1.0};
Point(127) = {-0.047963, -0.723203, 0, 1.0};
Point(128) = {-0.055412, -0.724270, 0, 1.0};
Point(129) = {-0.062885, -0.725528, 0, 1.0};
Point(130) = {-0.070350, -0.726860, 0, 1.0};
Point(131) = {-0.077715, -0.728114, 0, 1.0};
Point(132) = {-0.084822, -0.729170, 0, 1.0};
Point(133) = {-0.091491, -0.729953, 0, 1.0};
Point(134) = {-0.097538, -0.730423, 0, 1.0};
Point(135) = {-0.102778, -0.730574, 0, 1.0};
Point(136) = {-0.107012, -0.730440, 0, 1.0};
Point(137) = {-0.110067, -0.730149, 0, 1.0};
Point(138) = {-0.111880, -0.729881, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:52};
Spline(3) = {52:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:90};
Spline(6) = {90:121};
Spline(7) = {121:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html