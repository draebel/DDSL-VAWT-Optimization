SetFactory("OpenCASCADE");

Point(1) = {0.074466, 0.726548, 0, 1.0};
Point(2) = {0.074285, 0.726571, 0, 1.0};
Point(3) = {0.073743, 0.726644, 0, 1.0};
Point(4) = {0.072843, 0.726774, 0, 1.0};
Point(5) = {0.071590, 0.726966, 0, 1.0};
Point(6) = {0.069992, 0.727226, 0, 1.0};
Point(7) = {0.068057, 0.727558, 0, 1.0};
Point(8) = {0.065794, 0.727965, 0, 1.0};
Point(9) = {0.063216, 0.728450, 0, 1.0};
Point(10) = {0.060336, 0.729013, 0, 1.0};
Point(11) = {0.057166, 0.729655, 0, 1.0};
Point(12) = {0.053725, 0.730373, 0, 1.0};
Point(13) = {0.050027, 0.731166, 0, 1.0};
Point(14) = {0.046092, 0.732029, 0, 1.0};
Point(15) = {0.041937, 0.732957, 0, 1.0};
Point(16) = {0.037584, 0.733943, 0, 1.0};
Point(17) = {0.033053, 0.734979, 0, 1.0};
Point(18) = {0.028366, 0.736056, 0, 1.0};
Point(19) = {0.023544, 0.737165, 0, 1.0};
Point(20) = {0.018612, 0.738294, 0, 1.0};
Point(21) = {0.013591, 0.739433, 0, 1.0};
Point(22) = {0.008506, 0.740570, 0, 1.0};
Point(23) = {0.003381, 0.741692, 0, 1.0};
Point(24) = {-0.001760, 0.742787, 0, 1.0};
Point(25) = {-0.006893, 0.743843, 0, 1.0};
Point(26) = {-0.011993, 0.744849, 0, 1.0};
Point(27) = {-0.017037, 0.745791, 0, 1.0};
Point(28) = {-0.022001, 0.746661, 0, 1.0};
Point(29) = {-0.026862, 0.747446, 0, 1.0};
Point(30) = {-0.031595, 0.748140, 0, 1.0};
Point(31) = {-0.036179, 0.748732, 0, 1.0};
Point(32) = {-0.040592, 0.749218, 0, 1.0};
Point(33) = {-0.044813, 0.749590, 0, 1.0};
Point(34) = {-0.048821, 0.749846, 0, 1.0};
Point(35) = {-0.052598, 0.749983, 0, 1.0};
Point(36) = {-0.056123, 0.750000, 0, 1.0};
Point(37) = {-0.059382, 0.749898, 0, 1.0};
Point(38) = {-0.062356, 0.749678, 0, 1.0};
Point(39) = {-0.065033, 0.749345, 0, 1.0};
Point(40) = {-0.067397, 0.748903, 0, 1.0};
Point(41) = {-0.069437, 0.748360, 0, 1.0};
Point(42) = {-0.071143, 0.747722, 0, 1.0};
Point(43) = {-0.072505, 0.746998, 0, 1.0};
Point(44) = {-0.073517, 0.746198, 0, 1.0};
Point(45) = {-0.074172, 0.745332, 0, 1.0};
Point(46) = {-0.074466, 0.744411, 0, 1.0};
Point(47) = {-0.074398, 0.743447, 0, 1.0};
Point(48) = {-0.073966, 0.742450, 0, 1.0};
Point(49) = {-0.073173, 0.741434, 0, 1.0};
Point(50) = {-0.072020, 0.740408, 0, 1.0};
Point(51) = {-0.070514, 0.739385, 0, 1.0};
Point(52) = {-0.068660, 0.738374, 0, 1.0};
Point(53) = {-0.066467, 0.737386, 0, 1.0};
Point(54) = {-0.063946, 0.736429, 0, 1.0};
Point(55) = {-0.061107, 0.735513, 0, 1.0};
Point(56) = {-0.057965, 0.734643, 0, 1.0};
Point(57) = {-0.054536, 0.733825, 0, 1.0};
Point(58) = {-0.050834, 0.733065, 0, 1.0};
Point(59) = {-0.046879, 0.732366, 0, 1.0};
Point(60) = {-0.042690, 0.731730, 0, 1.0};
Point(61) = {-0.038287, 0.731158, 0, 1.0};
Point(62) = {-0.033693, 0.730650, 0, 1.0};
Point(63) = {-0.028930, 0.730204, 0, 1.0};
Point(64) = {-0.024021, 0.729818, 0, 1.0};
Point(65) = {-0.018993, 0.729489, 0, 1.0};
Point(66) = {-0.013869, 0.729212, 0, 1.0};
Point(67) = {-0.008675, 0.728983, 0, 1.0};
Point(68) = {-0.003438, 0.728795, 0, 1.0};
Point(69) = {0.001816, 0.728644, 0, 1.0};
Point(70) = {0.007061, 0.728522, 0, 1.0};
Point(71) = {0.012271, 0.728424, 0, 1.0};
Point(72) = {0.017418, 0.728343, 0, 1.0};
Point(73) = {0.022478, 0.728274, 0, 1.0};
Point(74) = {0.027425, 0.728211, 0, 1.0};
Point(75) = {0.032234, 0.728150, 0, 1.0};
Point(76) = {0.036882, 0.728085, 0, 1.0};
Point(77) = {0.041344, 0.728013, 0, 1.0};
Point(78) = {0.045600, 0.727932, 0, 1.0};
Point(79) = {0.049628, 0.727840, 0, 1.0};
Point(80) = {0.053408, 0.727736, 0, 1.0};
Point(81) = {0.056922, 0.727620, 0, 1.0};
Point(82) = {0.060153, 0.727494, 0, 1.0};
Point(83) = {0.063086, 0.727360, 0, 1.0};
Point(84) = {0.065705, 0.727222, 0, 1.0};
Point(85) = {0.068000, 0.727082, 0, 1.0};
Point(86) = {0.069959, 0.726947, 0, 1.0};
Point(87) = {0.071573, 0.726822, 0, 1.0};
Point(88) = {0.072835, 0.726712, 0, 1.0};
Point(89) = {0.073740, 0.726626, 0, 1.0};
Point(90) = {0.074285, 0.726569, 0, 1.0};
Point(91) = {-0.074466, -0.726548, 0, 1.0};
Point(92) = {-0.074285, -0.726571, 0, 1.0};
Point(93) = {-0.073743, -0.726644, 0, 1.0};
Point(94) = {-0.072843, -0.726774, 0, 1.0};
Point(95) = {-0.071590, -0.726966, 0, 1.0};
Point(96) = {-0.069992, -0.727226, 0, 1.0};
Point(97) = {-0.068057, -0.727558, 0, 1.0};
Point(98) = {-0.065794, -0.727965, 0, 1.0};
Point(99) = {-0.063216, -0.728450, 0, 1.0};
Point(100) = {-0.060336, -0.729013, 0, 1.0};
Point(101) = {-0.057166, -0.729655, 0, 1.0};
Point(102) = {-0.053725, -0.730373, 0, 1.0};
Point(103) = {-0.050027, -0.731166, 0, 1.0};
Point(104) = {-0.046092, -0.732029, 0, 1.0};
Point(105) = {-0.041937, -0.732957, 0, 1.0};
Point(106) = {-0.037584, -0.733943, 0, 1.0};
Point(107) = {-0.033053, -0.734979, 0, 1.0};
Point(108) = {-0.028366, -0.736056, 0, 1.0};
Point(109) = {-0.023544, -0.737165, 0, 1.0};
Point(110) = {-0.018612, -0.738294, 0, 1.0};
Point(111) = {-0.013591, -0.739433, 0, 1.0};
Point(112) = {-0.008506, -0.740570, 0, 1.0};
Point(113) = {-0.003381, -0.741692, 0, 1.0};
Point(114) = {0.001760, -0.742787, 0, 1.0};
Point(115) = {0.006893, -0.743843, 0, 1.0};
Point(116) = {0.011993, -0.744849, 0, 1.0};
Point(117) = {0.017037, -0.745791, 0, 1.0};
Point(118) = {0.022001, -0.746661, 0, 1.0};
Point(119) = {0.026862, -0.747446, 0, 1.0};
Point(120) = {0.031595, -0.748140, 0, 1.0};
Point(121) = {0.036179, -0.748732, 0, 1.0};
Point(122) = {0.040592, -0.749218, 0, 1.0};
Point(123) = {0.044813, -0.749590, 0, 1.0};
Point(124) = {0.048821, -0.749846, 0, 1.0};
Point(125) = {0.052598, -0.749983, 0, 1.0};
Point(126) = {0.056123, -0.750000, 0, 1.0};
Point(127) = {0.059382, -0.749898, 0, 1.0};
Point(128) = {0.062356, -0.749678, 0, 1.0};
Point(129) = {0.065033, -0.749345, 0, 1.0};
Point(130) = {0.067397, -0.748903, 0, 1.0};
Point(131) = {0.069437, -0.748360, 0, 1.0};
Point(132) = {0.071143, -0.747722, 0, 1.0};
Point(133) = {0.072505, -0.746998, 0, 1.0};
Point(134) = {0.073517, -0.746198, 0, 1.0};
Point(135) = {0.074172, -0.745332, 0, 1.0};
Point(136) = {0.074466, -0.744411, 0, 1.0};
Point(137) = {0.074398, -0.743447, 0, 1.0};
Point(138) = {0.073966, -0.742450, 0, 1.0};
Point(139) = {0.073173, -0.741434, 0, 1.0};
Point(140) = {0.072020, -0.740408, 0, 1.0};
Point(141) = {0.070514, -0.739385, 0, 1.0};
Point(142) = {0.068660, -0.738374, 0, 1.0};
Point(143) = {0.066467, -0.737386, 0, 1.0};
Point(144) = {0.063946, -0.736429, 0, 1.0};
Point(145) = {0.061107, -0.735513, 0, 1.0};
Point(146) = {0.057965, -0.734643, 0, 1.0};
Point(147) = {0.054536, -0.733825, 0, 1.0};
Point(148) = {0.050834, -0.733065, 0, 1.0};
Point(149) = {0.046879, -0.732366, 0, 1.0};
Point(150) = {0.042690, -0.731730, 0, 1.0};
Point(151) = {0.038287, -0.731158, 0, 1.0};
Point(152) = {0.033693, -0.730650, 0, 1.0};
Point(153) = {0.028930, -0.730204, 0, 1.0};
Point(154) = {0.024021, -0.729818, 0, 1.0};
Point(155) = {0.018993, -0.729489, 0, 1.0};
Point(156) = {0.013869, -0.729212, 0, 1.0};
Point(157) = {0.008675, -0.728983, 0, 1.0};
Point(158) = {0.003438, -0.728795, 0, 1.0};
Point(159) = {-0.001816, -0.728644, 0, 1.0};
Point(160) = {-0.007061, -0.728522, 0, 1.0};
Point(161) = {-0.012271, -0.728424, 0, 1.0};
Point(162) = {-0.017418, -0.728343, 0, 1.0};
Point(163) = {-0.022478, -0.728274, 0, 1.0};
Point(164) = {-0.027425, -0.728211, 0, 1.0};
Point(165) = {-0.032234, -0.728150, 0, 1.0};
Point(166) = {-0.036882, -0.728085, 0, 1.0};
Point(167) = {-0.041344, -0.728013, 0, 1.0};
Point(168) = {-0.045600, -0.727932, 0, 1.0};
Point(169) = {-0.049628, -0.727840, 0, 1.0};
Point(170) = {-0.053408, -0.727736, 0, 1.0};
Point(171) = {-0.056922, -0.727620, 0, 1.0};
Point(172) = {-0.060153, -0.727494, 0, 1.0};
Point(173) = {-0.063086, -0.727360, 0, 1.0};
Point(174) = {-0.065705, -0.727222, 0, 1.0};
Point(175) = {-0.068000, -0.727082, 0, 1.0};
Point(176) = {-0.069959, -0.726947, 0, 1.0};
Point(177) = {-0.071573, -0.726822, 0, 1.0};
Point(178) = {-0.072835, -0.726712, 0, 1.0};
Point(179) = {-0.073740, -0.726626, 0, 1.0};
Point(180) = {-0.074285, -0.726569, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:30};
Spline(2) = {30:61};
Spline(3) = {61:90};
Spline(4) = {90,1};

// Lines: second blade (splines 5-8)
Spline(5) = {91:120};
Spline(6) = {120:151};
Spline(7) = {151:180};
Spline(8) = {180,91};

// Outer domain (points 20001-4 and lines)
Point(181) = {-13.50000000, -15.00000000, 0, 1.0};
Point(182) = {-13.50000000, 15.00000000, 0, 1.0};
Point(183) = {13.50000000, 15.00000000, 0, 1.0};
Point(184) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {181, 182};
Line(12) = {182, 183};
Line(13) = {183, 184};
Line(14) = {181, 184};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html