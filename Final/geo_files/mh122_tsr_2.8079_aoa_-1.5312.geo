SetFactory("OpenCASCADE");

Point(1) = {0.149929, 0.737414, 0, 1.0};
Point(2) = {0.149266, 0.737584, 0, 1.0};
Point(3) = {0.147403, 0.738120, 0, 1.0};
Point(4) = {0.144552, 0.738961, 0, 1.0};
Point(5) = {0.140793, 0.739937, 0, 1.0};
Point(6) = {0.136092, 0.740974, 0, 1.0};
Point(7) = {0.130477, 0.742098, 0, 1.0};
Point(8) = {0.124050, 0.743311, 0, 1.0};
Point(9) = {0.116922, 0.744583, 0, 1.0};
Point(10) = {0.109209, 0.745869, 0, 1.0};
Point(11) = {0.101033, 0.747095, 0, 1.0};
Point(12) = {0.092474, 0.748163, 0, 1.0};
Point(13) = {0.083572, 0.749004, 0, 1.0};
Point(14) = {0.074367, 0.749586, 0, 1.0};
Point(15) = {0.064899, 0.749909, 0, 1.0};
Point(16) = {0.055238, 0.750000, 0, 1.0};
Point(17) = {0.045486, 0.749882, 0, 1.0};
Point(18) = {0.035744, 0.749563, 0, 1.0};
Point(19) = {0.026113, 0.749055, 0, 1.0};
Point(20) = {0.016693, 0.748368, 0, 1.0};
Point(21) = {0.007581, 0.747515, 0, 1.0};
Point(22) = {-0.001129, 0.746512, 0, 1.0};
Point(23) = {-0.009349, 0.745374, 0, 1.0};
Point(24) = {-0.016993, 0.744121, 0, 1.0};
Point(25) = {-0.023983, 0.742774, 0, 1.0};
Point(26) = {-0.030248, 0.741354, 0, 1.0};
Point(27) = {-0.035722, 0.739888, 0, 1.0};
Point(28) = {-0.040344, 0.738395, 0, 1.0};
Point(29) = {-0.044075, 0.736888, 0, 1.0};
Point(30) = {-0.046897, 0.735397, 0, 1.0};
Point(31) = {-0.048810, 0.733965, 0, 1.0};
Point(32) = {-0.049650, 0.732987, 0, 1.0};
Point(33) = {-0.049850, 0.732627, 0, 1.0};
Point(34) = {-0.049969, 0.732301, 0, 1.0};
Point(35) = {-0.050000, 0.732108, 0, 1.0};
Point(36) = {-0.049981, 0.731944, 0, 1.0};
Point(37) = {-0.049897, 0.731798, 0, 1.0};
Point(38) = {-0.049750, 0.731650, 0, 1.0};
Point(39) = {-0.049439, 0.731430, 0, 1.0};
Point(40) = {-0.049030, 0.731210, 0, 1.0};
Point(41) = {-0.048597, 0.731017, 0, 1.0};
Point(42) = {-0.046238, 0.730328, 0, 1.0};
Point(43) = {-0.042826, 0.729763, 0, 1.0};
Point(44) = {-0.038382, 0.729318, 0, 1.0};
Point(45) = {-0.032965, 0.728981, 0, 1.0};
Point(46) = {-0.026648, 0.728752, 0, 1.0};
Point(47) = {-0.019513, 0.728637, 0, 1.0};
Point(48) = {-0.011648, 0.728643, 0, 1.0};
Point(49) = {-0.003150, 0.728784, 0, 1.0};
Point(50) = {0.005877, 0.729089, 0, 1.0};
Point(51) = {0.015360, 0.729607, 0, 1.0};
Point(52) = {0.025262, 0.730342, 0, 1.0};
Point(53) = {0.035528, 0.731268, 0, 1.0};
Point(54) = {0.046093, 0.732334, 0, 1.0};
Point(55) = {0.056867, 0.733457, 0, 1.0};
Point(56) = {0.067713, 0.734561, 0, 1.0};
Point(57) = {0.078486, 0.735592, 0, 1.0};
Point(58) = {0.089032, 0.736502, 0, 1.0};
Point(59) = {0.099194, 0.737254, 0, 1.0};
Point(60) = {0.108816, 0.737824, 0, 1.0};
Point(61) = {0.117742, 0.738201, 0, 1.0};
Point(62) = {0.125825, 0.738387, 0, 1.0};
Point(63) = {0.132924, 0.738397, 0, 1.0};
Point(64) = {0.138915, 0.738260, 0, 1.0};
Point(65) = {0.143686, 0.738019, 0, 1.0};
Point(66) = {0.147143, 0.737740, 0, 1.0};
Point(67) = {0.149231, 0.737507, 0, 1.0};
Point(68) = {-0.149929, -0.737414, 0, 1.0};
Point(69) = {-0.149266, -0.737584, 0, 1.0};
Point(70) = {-0.147403, -0.738120, 0, 1.0};
Point(71) = {-0.144552, -0.738961, 0, 1.0};
Point(72) = {-0.140793, -0.739937, 0, 1.0};
Point(73) = {-0.136092, -0.740974, 0, 1.0};
Point(74) = {-0.130477, -0.742098, 0, 1.0};
Point(75) = {-0.124050, -0.743311, 0, 1.0};
Point(76) = {-0.116922, -0.744583, 0, 1.0};
Point(77) = {-0.109209, -0.745869, 0, 1.0};
Point(78) = {-0.101033, -0.747095, 0, 1.0};
Point(79) = {-0.092474, -0.748163, 0, 1.0};
Point(80) = {-0.083572, -0.749004, 0, 1.0};
Point(81) = {-0.074367, -0.749586, 0, 1.0};
Point(82) = {-0.064899, -0.749909, 0, 1.0};
Point(83) = {-0.055238, -0.750000, 0, 1.0};
Point(84) = {-0.045486, -0.749882, 0, 1.0};
Point(85) = {-0.035744, -0.749563, 0, 1.0};
Point(86) = {-0.026113, -0.749055, 0, 1.0};
Point(87) = {-0.016693, -0.748368, 0, 1.0};
Point(88) = {-0.007581, -0.747515, 0, 1.0};
Point(89) = {0.001129, -0.746512, 0, 1.0};
Point(90) = {0.009349, -0.745374, 0, 1.0};
Point(91) = {0.016993, -0.744121, 0, 1.0};
Point(92) = {0.023983, -0.742774, 0, 1.0};
Point(93) = {0.030248, -0.741354, 0, 1.0};
Point(94) = {0.035722, -0.739888, 0, 1.0};
Point(95) = {0.040344, -0.738395, 0, 1.0};
Point(96) = {0.044075, -0.736888, 0, 1.0};
Point(97) = {0.046897, -0.735397, 0, 1.0};
Point(98) = {0.048810, -0.733965, 0, 1.0};
Point(99) = {0.049650, -0.732987, 0, 1.0};
Point(100) = {0.049850, -0.732627, 0, 1.0};
Point(101) = {0.049969, -0.732301, 0, 1.0};
Point(102) = {0.050000, -0.732108, 0, 1.0};
Point(103) = {0.049981, -0.731944, 0, 1.0};
Point(104) = {0.049897, -0.731798, 0, 1.0};
Point(105) = {0.049750, -0.731650, 0, 1.0};
Point(106) = {0.049439, -0.731430, 0, 1.0};
Point(107) = {0.049030, -0.731210, 0, 1.0};
Point(108) = {0.048597, -0.731017, 0, 1.0};
Point(109) = {0.046238, -0.730328, 0, 1.0};
Point(110) = {0.042826, -0.729763, 0, 1.0};
Point(111) = {0.038382, -0.729318, 0, 1.0};
Point(112) = {0.032965, -0.728981, 0, 1.0};
Point(113) = {0.026648, -0.728752, 0, 1.0};
Point(114) = {0.019513, -0.728637, 0, 1.0};
Point(115) = {0.011648, -0.728643, 0, 1.0};
Point(116) = {0.003150, -0.728784, 0, 1.0};
Point(117) = {-0.005877, -0.729089, 0, 1.0};
Point(118) = {-0.015360, -0.729607, 0, 1.0};
Point(119) = {-0.025262, -0.730342, 0, 1.0};
Point(120) = {-0.035528, -0.731268, 0, 1.0};
Point(121) = {-0.046093, -0.732334, 0, 1.0};
Point(122) = {-0.056867, -0.733457, 0, 1.0};
Point(123) = {-0.067713, -0.734561, 0, 1.0};
Point(124) = {-0.078486, -0.735592, 0, 1.0};
Point(125) = {-0.089032, -0.736502, 0, 1.0};
Point(126) = {-0.099194, -0.737254, 0, 1.0};
Point(127) = {-0.108816, -0.737824, 0, 1.0};
Point(128) = {-0.117742, -0.738201, 0, 1.0};
Point(129) = {-0.125825, -0.738387, 0, 1.0};
Point(130) = {-0.132924, -0.738397, 0, 1.0};
Point(131) = {-0.138915, -0.738260, 0, 1.0};
Point(132) = {-0.143686, -0.738019, 0, 1.0};
Point(133) = {-0.147143, -0.737740, 0, 1.0};
Point(134) = {-0.149231, -0.737507, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html