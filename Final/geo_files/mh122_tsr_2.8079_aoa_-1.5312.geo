SetFactory("OpenCASCADE");

Point(1) = {0.112461, 0.740560, 0, 1.0};
Point(2) = {0.111964, 0.740688, 0, 1.0};
Point(3) = {0.110566, 0.741090, 0, 1.0};
Point(4) = {0.108428, 0.741721, 0, 1.0};
Point(5) = {0.105609, 0.742453, 0, 1.0};
Point(6) = {0.102083, 0.743230, 0, 1.0};
Point(7) = {0.097872, 0.744074, 0, 1.0};
Point(8) = {0.093052, 0.744984, 0, 1.0};
Point(9) = {0.087706, 0.745937, 0, 1.0};
Point(10) = {0.081921, 0.746901, 0, 1.0};
Point(11) = {0.075789, 0.747821, 0, 1.0};
Point(12) = {0.069370, 0.748622, 0, 1.0};
Point(13) = {0.062693, 0.749253, 0, 1.0};
Point(14) = {0.055789, 0.749690, 0, 1.0};
Point(15) = {0.048688, 0.749932, 0, 1.0};
Point(16) = {0.041442, 0.750000, 0, 1.0};
Point(17) = {0.034128, 0.749911, 0, 1.0};
Point(18) = {0.026821, 0.749672, 0, 1.0};
Point(19) = {0.019598, 0.749291, 0, 1.0};
Point(20) = {0.012533, 0.748776, 0, 1.0};
Point(21) = {0.005699, 0.748136, 0, 1.0};
Point(22) = {-0.000834, 0.747384, 0, 1.0};
Point(23) = {-0.006998, 0.746531, 0, 1.0};
Point(24) = {-0.012731, 0.745591, 0, 1.0};
Point(25) = {-0.017974, 0.744580, 0, 1.0};
Point(26) = {-0.022672, 0.743516, 0, 1.0};
Point(27) = {-0.026778, 0.742416, 0, 1.0};
Point(28) = {-0.030245, 0.741296, 0, 1.0};
Point(29) = {-0.033043, 0.740166, 0, 1.0};
Point(30) = {-0.035160, 0.739048, 0, 1.0};
Point(31) = {-0.036595, 0.737973, 0, 1.0};
Point(32) = {-0.037224, 0.737240, 0, 1.0};
Point(33) = {-0.037374, 0.736970, 0, 1.0};
Point(34) = {-0.037463, 0.736726, 0, 1.0};
Point(35) = {-0.037487, 0.736581, 0, 1.0};
Point(36) = {-0.037473, 0.736458, 0, 1.0};
Point(37) = {-0.037410, 0.736348, 0, 1.0};
Point(38) = {-0.037299, 0.736238, 0, 1.0};
Point(39) = {-0.037066, 0.736072, 0, 1.0};
Point(40) = {-0.036759, 0.735907, 0, 1.0};
Point(41) = {-0.036435, 0.735763, 0, 1.0};
Point(42) = {-0.034665, 0.735246, 0, 1.0};
Point(43) = {-0.032106, 0.734822, 0, 1.0};
Point(44) = {-0.028773, 0.734489, 0, 1.0};
Point(45) = {-0.024710, 0.734236, 0, 1.0};
Point(46) = {-0.019973, 0.734064, 0, 1.0};
Point(47) = {-0.014621, 0.733977, 0, 1.0};
Point(48) = {-0.008722, 0.733982, 0, 1.0};
Point(49) = {-0.002349, 0.734088, 0, 1.0};
Point(50) = {0.004421, 0.734317, 0, 1.0};
Point(51) = {0.011534, 0.734705, 0, 1.0};
Point(52) = {0.018960, 0.735257, 0, 1.0};
Point(53) = {0.026659, 0.735951, 0, 1.0};
Point(54) = {0.034584, 0.736751, 0, 1.0};
Point(55) = {0.042664, 0.737593, 0, 1.0};
Point(56) = {0.050799, 0.738421, 0, 1.0};
Point(57) = {0.058878, 0.739194, 0, 1.0};
Point(58) = {0.066788, 0.739876, 0, 1.0};
Point(59) = {0.074410, 0.740440, 0, 1.0};
Point(60) = {0.081626, 0.740868, 0, 1.0};
Point(61) = {0.088321, 0.741151, 0, 1.0};
Point(62) = {0.094382, 0.741290, 0, 1.0};
Point(63) = {0.099707, 0.741298, 0, 1.0};
Point(64) = {0.104200, 0.741195, 0, 1.0};
Point(65) = {0.107778, 0.741014, 0, 1.0};
Point(66) = {0.110372, 0.740805, 0, 1.0};
Point(67) = {0.111938, 0.740630, 0, 1.0};
Point(68) = {-0.112461, -0.740560, 0, 1.0};
Point(69) = {-0.111964, -0.740688, 0, 1.0};
Point(70) = {-0.110566, -0.741090, 0, 1.0};
Point(71) = {-0.108428, -0.741721, 0, 1.0};
Point(72) = {-0.105609, -0.742453, 0, 1.0};
Point(73) = {-0.102083, -0.743230, 0, 1.0};
Point(74) = {-0.097872, -0.744074, 0, 1.0};
Point(75) = {-0.093052, -0.744984, 0, 1.0};
Point(76) = {-0.087706, -0.745937, 0, 1.0};
Point(77) = {-0.081921, -0.746901, 0, 1.0};
Point(78) = {-0.075789, -0.747821, 0, 1.0};
Point(79) = {-0.069370, -0.748622, 0, 1.0};
Point(80) = {-0.062693, -0.749253, 0, 1.0};
Point(81) = {-0.055789, -0.749690, 0, 1.0};
Point(82) = {-0.048688, -0.749932, 0, 1.0};
Point(83) = {-0.041442, -0.750000, 0, 1.0};
Point(84) = {-0.034128, -0.749911, 0, 1.0};
Point(85) = {-0.026821, -0.749672, 0, 1.0};
Point(86) = {-0.019598, -0.749291, 0, 1.0};
Point(87) = {-0.012533, -0.748776, 0, 1.0};
Point(88) = {-0.005699, -0.748136, 0, 1.0};
Point(89) = {0.000834, -0.747384, 0, 1.0};
Point(90) = {0.006998, -0.746531, 0, 1.0};
Point(91) = {0.012731, -0.745591, 0, 1.0};
Point(92) = {0.017974, -0.744580, 0, 1.0};
Point(93) = {0.022672, -0.743516, 0, 1.0};
Point(94) = {0.026778, -0.742416, 0, 1.0};
Point(95) = {0.030245, -0.741296, 0, 1.0};
Point(96) = {0.033043, -0.740166, 0, 1.0};
Point(97) = {0.035160, -0.739048, 0, 1.0};
Point(98) = {0.036595, -0.737973, 0, 1.0};
Point(99) = {0.037224, -0.737240, 0, 1.0};
Point(100) = {0.037374, -0.736970, 0, 1.0};
Point(101) = {0.037463, -0.736726, 0, 1.0};
Point(102) = {0.037487, -0.736581, 0, 1.0};
Point(103) = {0.037473, -0.736458, 0, 1.0};
Point(104) = {0.037410, -0.736348, 0, 1.0};
Point(105) = {0.037299, -0.736238, 0, 1.0};
Point(106) = {0.037066, -0.736072, 0, 1.0};
Point(107) = {0.036759, -0.735907, 0, 1.0};
Point(108) = {0.036435, -0.735763, 0, 1.0};
Point(109) = {0.034665, -0.735246, 0, 1.0};
Point(110) = {0.032106, -0.734822, 0, 1.0};
Point(111) = {0.028773, -0.734489, 0, 1.0};
Point(112) = {0.024710, -0.734236, 0, 1.0};
Point(113) = {0.019973, -0.734064, 0, 1.0};
Point(114) = {0.014621, -0.733977, 0, 1.0};
Point(115) = {0.008722, -0.733982, 0, 1.0};
Point(116) = {0.002349, -0.734088, 0, 1.0};
Point(117) = {-0.004421, -0.734317, 0, 1.0};
Point(118) = {-0.011534, -0.734705, 0, 1.0};
Point(119) = {-0.018960, -0.735257, 0, 1.0};
Point(120) = {-0.026659, -0.735951, 0, 1.0};
Point(121) = {-0.034584, -0.736751, 0, 1.0};
Point(122) = {-0.042664, -0.737593, 0, 1.0};
Point(123) = {-0.050799, -0.738421, 0, 1.0};
Point(124) = {-0.058878, -0.739194, 0, 1.0};
Point(125) = {-0.066788, -0.739876, 0, 1.0};
Point(126) = {-0.074410, -0.740440, 0, 1.0};
Point(127) = {-0.081626, -0.740868, 0, 1.0};
Point(128) = {-0.088321, -0.741151, 0, 1.0};
Point(129) = {-0.094382, -0.741290, 0, 1.0};
Point(130) = {-0.099707, -0.741298, 0, 1.0};
Point(131) = {-0.104200, -0.741195, 0, 1.0};
Point(132) = {-0.107778, -0.741014, 0, 1.0};
Point(133) = {-0.110372, -0.740805, 0, 1.0};
Point(134) = {-0.111938, -0.740630, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html