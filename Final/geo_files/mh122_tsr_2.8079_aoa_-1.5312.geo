SetFactory("OpenCASCADE");

Point(1) = {0.074964, 0.743707, 0, 1.0};
Point(2) = {0.074633, 0.743792, 0, 1.0};
Point(3) = {0.073701, 0.744060, 0, 1.0};
Point(4) = {0.072276, 0.744480, 0, 1.0};
Point(5) = {0.070396, 0.744968, 0, 1.0};
Point(6) = {0.068046, 0.745487, 0, 1.0};
Point(7) = {0.065238, 0.746049, 0, 1.0};
Point(8) = {0.062025, 0.746656, 0, 1.0};
Point(9) = {0.058461, 0.747291, 0, 1.0};
Point(10) = {0.054605, 0.747934, 0, 1.0};
Point(11) = {0.050517, 0.748548, 0, 1.0};
Point(12) = {0.046237, 0.749081, 0, 1.0};
Point(13) = {0.041786, 0.749502, 0, 1.0};
Point(14) = {0.037183, 0.749793, 0, 1.0};
Point(15) = {0.032449, 0.749954, 0, 1.0};
Point(16) = {0.027619, 0.750000, 0, 1.0};
Point(17) = {0.022743, 0.749941, 0, 1.0};
Point(18) = {0.017872, 0.749781, 0, 1.0};
Point(19) = {0.013056, 0.749527, 0, 1.0};
Point(20) = {0.008347, 0.749184, 0, 1.0};
Point(21) = {0.003791, 0.748758, 0, 1.0};
Point(22) = {-0.000565, 0.748256, 0, 1.0};
Point(23) = {-0.004674, 0.747687, 0, 1.0};
Point(24) = {-0.008496, 0.747060, 0, 1.0};
Point(25) = {-0.011992, 0.746387, 0, 1.0};
Point(26) = {-0.015124, 0.745677, 0, 1.0};
Point(27) = {-0.017861, 0.744944, 0, 1.0};
Point(28) = {-0.020172, 0.744197, 0, 1.0};
Point(29) = {-0.022037, 0.743444, 0, 1.0};
Point(30) = {-0.023449, 0.742698, 0, 1.0};
Point(31) = {-0.024405, 0.741982, 0, 1.0};
Point(32) = {-0.024825, 0.741494, 0, 1.0};
Point(33) = {-0.024925, 0.741313, 0, 1.0};
Point(34) = {-0.024984, 0.741150, 0, 1.0};
Point(35) = {-0.025000, 0.741054, 0, 1.0};
Point(36) = {-0.024991, 0.740972, 0, 1.0};
Point(37) = {-0.024949, 0.740899, 0, 1.0};
Point(38) = {-0.024875, 0.740825, 0, 1.0};
Point(39) = {-0.024719, 0.740715, 0, 1.0};
Point(40) = {-0.024515, 0.740605, 0, 1.0};
Point(41) = {-0.024299, 0.740509, 0, 1.0};
Point(42) = {-0.023119, 0.740164, 0, 1.0};
Point(43) = {-0.021413, 0.739881, 0, 1.0};
Point(44) = {-0.019191, 0.739659, 0, 1.0};
Point(45) = {-0.016482, 0.739491, 0, 1.0};
Point(46) = {-0.013324, 0.739376, 0, 1.0};
Point(47) = {-0.009756, 0.739318, 0, 1.0};
Point(48) = {-0.005824, 0.739322, 0, 1.0};
Point(49) = {-0.001575, 0.739392, 0, 1.0};
Point(50) = {0.002938, 0.739545, 0, 1.0};
Point(51) = {0.007680, 0.739803, 0, 1.0};
Point(52) = {0.012631, 0.740171, 0, 1.0};
Point(53) = {0.017764, 0.740634, 0, 1.0};
Point(54) = {0.023047, 0.741167, 0, 1.0};
Point(55) = {0.028434, 0.741729, 0, 1.0};
Point(56) = {0.033857, 0.742281, 0, 1.0};
Point(57) = {0.039243, 0.742796, 0, 1.0};
Point(58) = {0.044516, 0.743251, 0, 1.0};
Point(59) = {0.049597, 0.743627, 0, 1.0};
Point(60) = {0.054408, 0.743912, 0, 1.0};
Point(61) = {0.058871, 0.744101, 0, 1.0};
Point(62) = {0.062912, 0.744193, 0, 1.0};
Point(63) = {0.066462, 0.744199, 0, 1.0};
Point(64) = {0.069458, 0.744130, 0, 1.0};
Point(65) = {0.071843, 0.744010, 0, 1.0};
Point(66) = {0.073572, 0.743870, 0, 1.0};
Point(67) = {0.074616, 0.743754, 0, 1.0};
Point(68) = {-0.074964, -0.743707, 0, 1.0};
Point(69) = {-0.074633, -0.743792, 0, 1.0};
Point(70) = {-0.073701, -0.744060, 0, 1.0};
Point(71) = {-0.072276, -0.744480, 0, 1.0};
Point(72) = {-0.070396, -0.744968, 0, 1.0};
Point(73) = {-0.068046, -0.745487, 0, 1.0};
Point(74) = {-0.065238, -0.746049, 0, 1.0};
Point(75) = {-0.062025, -0.746656, 0, 1.0};
Point(76) = {-0.058461, -0.747291, 0, 1.0};
Point(77) = {-0.054605, -0.747934, 0, 1.0};
Point(78) = {-0.050517, -0.748548, 0, 1.0};
Point(79) = {-0.046237, -0.749081, 0, 1.0};
Point(80) = {-0.041786, -0.749502, 0, 1.0};
Point(81) = {-0.037183, -0.749793, 0, 1.0};
Point(82) = {-0.032449, -0.749954, 0, 1.0};
Point(83) = {-0.027619, -0.750000, 0, 1.0};
Point(84) = {-0.022743, -0.749941, 0, 1.0};
Point(85) = {-0.017872, -0.749781, 0, 1.0};
Point(86) = {-0.013056, -0.749527, 0, 1.0};
Point(87) = {-0.008347, -0.749184, 0, 1.0};
Point(88) = {-0.003791, -0.748758, 0, 1.0};
Point(89) = {0.000565, -0.748256, 0, 1.0};
Point(90) = {0.004674, -0.747687, 0, 1.0};
Point(91) = {0.008496, -0.747060, 0, 1.0};
Point(92) = {0.011992, -0.746387, 0, 1.0};
Point(93) = {0.015124, -0.745677, 0, 1.0};
Point(94) = {0.017861, -0.744944, 0, 1.0};
Point(95) = {0.020172, -0.744197, 0, 1.0};
Point(96) = {0.022037, -0.743444, 0, 1.0};
Point(97) = {0.023449, -0.742698, 0, 1.0};
Point(98) = {0.024405, -0.741982, 0, 1.0};
Point(99) = {0.024825, -0.741494, 0, 1.0};
Point(100) = {0.024925, -0.741313, 0, 1.0};
Point(101) = {0.024984, -0.741150, 0, 1.0};
Point(102) = {0.025000, -0.741054, 0, 1.0};
Point(103) = {0.024991, -0.740972, 0, 1.0};
Point(104) = {0.024949, -0.740899, 0, 1.0};
Point(105) = {0.024875, -0.740825, 0, 1.0};
Point(106) = {0.024719, -0.740715, 0, 1.0};
Point(107) = {0.024515, -0.740605, 0, 1.0};
Point(108) = {0.024299, -0.740509, 0, 1.0};
Point(109) = {0.023119, -0.740164, 0, 1.0};
Point(110) = {0.021413, -0.739881, 0, 1.0};
Point(111) = {0.019191, -0.739659, 0, 1.0};
Point(112) = {0.016482, -0.739491, 0, 1.0};
Point(113) = {0.013324, -0.739376, 0, 1.0};
Point(114) = {0.009756, -0.739318, 0, 1.0};
Point(115) = {0.005824, -0.739322, 0, 1.0};
Point(116) = {0.001575, -0.739392, 0, 1.0};
Point(117) = {-0.002938, -0.739545, 0, 1.0};
Point(118) = {-0.007680, -0.739803, 0, 1.0};
Point(119) = {-0.012631, -0.740171, 0, 1.0};
Point(120) = {-0.017764, -0.740634, 0, 1.0};
Point(121) = {-0.023047, -0.741167, 0, 1.0};
Point(122) = {-0.028434, -0.741729, 0, 1.0};
Point(123) = {-0.033857, -0.742281, 0, 1.0};
Point(124) = {-0.039243, -0.742796, 0, 1.0};
Point(125) = {-0.044516, -0.743251, 0, 1.0};
Point(126) = {-0.049597, -0.743627, 0, 1.0};
Point(127) = {-0.054408, -0.743912, 0, 1.0};
Point(128) = {-0.058871, -0.744101, 0, 1.0};
Point(129) = {-0.062912, -0.744193, 0, 1.0};
Point(130) = {-0.066462, -0.744199, 0, 1.0};
Point(131) = {-0.069458, -0.744130, 0, 1.0};
Point(132) = {-0.071843, -0.744010, 0, 1.0};
Point(133) = {-0.073572, -0.743870, 0, 1.0};
Point(134) = {-0.074616, -0.743754, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html