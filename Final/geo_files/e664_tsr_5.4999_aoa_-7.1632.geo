SetFactory("OpenCASCADE");

Point(1) = {0.148439, 0.740382, 0, 1.0};
Point(2) = {0.147668, 0.740471, 0, 1.0};
Point(3) = {0.145478, 0.740798, 0, 1.0};
Point(4) = {0.142113, 0.741363, 0, 1.0};
Point(5) = {0.137697, 0.742038, 0, 1.0};
Point(6) = {0.132235, 0.742766, 0, 1.0};
Point(7) = {0.125790, 0.743593, 0, 1.0};
Point(8) = {0.118501, 0.744536, 0, 1.0};
Point(9) = {0.110519, 0.745578, 0, 1.0};
Point(10) = {0.101997, 0.746680, 0, 1.0};
Point(11) = {0.093100, 0.747783, 0, 1.0};
Point(12) = {0.083984, 0.748805, 0, 1.0};
Point(13) = {0.074800, 0.749606, 0, 1.0};
Point(14) = {0.065587, 0.750000, 0, 1.0};
Point(15) = {0.056267, 0.749927, 0, 1.0};
Point(16) = {0.046848, 0.749465, 0, 1.0};
Point(17) = {0.037811, 0.748710, 0, 1.0};
Point(18) = {0.028060, 0.747547, 0, 1.0};
Point(19) = {0.018883, 0.746148, 0, 1.0};
Point(20) = {0.009974, 0.744488, 0, 1.0};
Point(21) = {0.001426, 0.742592, 0, 1.0};
Point(22) = {-0.006682, 0.740480, 0, 1.0};
Point(23) = {-0.014267, 0.738186, 0, 1.0};
Point(24) = {-0.021264, 0.735739, 0, 1.0};
Point(25) = {-0.027604, 0.733176, 0, 1.0};
Point(26) = {-0.033235, 0.730533, 0, 1.0};
Point(27) = {-0.038107, 0.727855, 0, 1.0};
Point(28) = {-0.042180, 0.725190, 0, 1.0};
Point(29) = {-0.045428, 0.722591, 0, 1.0};
Point(30) = {-0.047824, 0.720117, 0, 1.0};
Point(31) = {-0.049359, 0.717852, 0, 1.0};
Point(32) = {-0.050011, 0.715903, 0, 1.0};
Point(33) = {-0.049580, 0.714446, 0, 1.0};
Point(34) = {-0.047916, 0.713341, 0, 1.0};
Point(35) = {-0.045114, 0.712395, 0, 1.0};
Point(36) = {-0.041266, 0.711657, 0, 1.0};
Point(37) = {-0.036416, 0.711145, 0, 1.0};
Point(38) = {-0.030609, 0.710861, 0, 1.0};
Point(39) = {-0.023914, 0.710788, 0, 1.0};
Point(40) = {-0.016413, 0.710914, 0, 1.0};
Point(41) = {-0.008201, 0.711236, 0, 1.0};
Point(42) = {0.000620, 0.711746, 0, 1.0};
Point(43) = {0.009947, 0.712437, 0, 1.0};
Point(44) = {0.019669, 0.713302, 0, 1.0};
Point(45) = {0.029665, 0.714324, 0, 1.0};
Point(46) = {0.039806, 0.715498, 0, 1.0};
Point(47) = {0.049964, 0.716827, 0, 1.0};
Point(48) = {0.060008, 0.718317, 0, 1.0};
Point(49) = {0.069807, 0.719980, 0, 1.0};
Point(50) = {0.079231, 0.721874, 0, 1.0};
Point(51) = {0.088233, 0.724104, 0, 1.0};
Point(52) = {0.096863, 0.726710, 0, 1.0};
Point(53) = {0.105256, 0.729668, 0, 1.0};
Point(54) = {0.113563, 0.732699, 0, 1.0};
Point(55) = {0.121651, 0.735387, 0, 1.0};
Point(56) = {0.129167, 0.737509, 0, 1.0};
Point(57) = {0.135795, 0.738999, 0, 1.0};
Point(58) = {0.141216, 0.739874, 0, 1.0};
Point(59) = {0.145229, 0.740265, 0, 1.0};
Point(60) = {0.147638, 0.740372, 0, 1.0};
Point(61) = {-0.148439, -0.740382, 0, 1.0};
Point(62) = {-0.147668, -0.740471, 0, 1.0};
Point(63) = {-0.145478, -0.740798, 0, 1.0};
Point(64) = {-0.142113, -0.741363, 0, 1.0};
Point(65) = {-0.137697, -0.742038, 0, 1.0};
Point(66) = {-0.132235, -0.742766, 0, 1.0};
Point(67) = {-0.125790, -0.743593, 0, 1.0};
Point(68) = {-0.118501, -0.744536, 0, 1.0};
Point(69) = {-0.110519, -0.745578, 0, 1.0};
Point(70) = {-0.101997, -0.746680, 0, 1.0};
Point(71) = {-0.093100, -0.747783, 0, 1.0};
Point(72) = {-0.083984, -0.748805, 0, 1.0};
Point(73) = {-0.074800, -0.749606, 0, 1.0};
Point(74) = {-0.065587, -0.750000, 0, 1.0};
Point(75) = {-0.056267, -0.749927, 0, 1.0};
Point(76) = {-0.046848, -0.749465, 0, 1.0};
Point(77) = {-0.037811, -0.748710, 0, 1.0};
Point(78) = {-0.028060, -0.747547, 0, 1.0};
Point(79) = {-0.018883, -0.746148, 0, 1.0};
Point(80) = {-0.009974, -0.744488, 0, 1.0};
Point(81) = {-0.001426, -0.742592, 0, 1.0};
Point(82) = {0.006682, -0.740480, 0, 1.0};
Point(83) = {0.014267, -0.738186, 0, 1.0};
Point(84) = {0.021264, -0.735739, 0, 1.0};
Point(85) = {0.027604, -0.733176, 0, 1.0};
Point(86) = {0.033235, -0.730533, 0, 1.0};
Point(87) = {0.038107, -0.727855, 0, 1.0};
Point(88) = {0.042180, -0.725190, 0, 1.0};
Point(89) = {0.045428, -0.722591, 0, 1.0};
Point(90) = {0.047824, -0.720117, 0, 1.0};
Point(91) = {0.049359, -0.717852, 0, 1.0};
Point(92) = {0.050011, -0.715903, 0, 1.0};
Point(93) = {0.049580, -0.714446, 0, 1.0};
Point(94) = {0.047916, -0.713341, 0, 1.0};
Point(95) = {0.045114, -0.712395, 0, 1.0};
Point(96) = {0.041266, -0.711657, 0, 1.0};
Point(97) = {0.036416, -0.711145, 0, 1.0};
Point(98) = {0.030609, -0.710861, 0, 1.0};
Point(99) = {0.023914, -0.710788, 0, 1.0};
Point(100) = {0.016413, -0.710914, 0, 1.0};
Point(101) = {0.008201, -0.711236, 0, 1.0};
Point(102) = {-0.000620, -0.711746, 0, 1.0};
Point(103) = {-0.009947, -0.712437, 0, 1.0};
Point(104) = {-0.019669, -0.713302, 0, 1.0};
Point(105) = {-0.029665, -0.714324, 0, 1.0};
Point(106) = {-0.039806, -0.715498, 0, 1.0};
Point(107) = {-0.049964, -0.716827, 0, 1.0};
Point(108) = {-0.060008, -0.718317, 0, 1.0};
Point(109) = {-0.069807, -0.719980, 0, 1.0};
Point(110) = {-0.079231, -0.721874, 0, 1.0};
Point(111) = {-0.088233, -0.724104, 0, 1.0};
Point(112) = {-0.096863, -0.726710, 0, 1.0};
Point(113) = {-0.105256, -0.729668, 0, 1.0};
Point(114) = {-0.113563, -0.732699, 0, 1.0};
Point(115) = {-0.121651, -0.735387, 0, 1.0};
Point(116) = {-0.129167, -0.737509, 0, 1.0};
Point(117) = {-0.135795, -0.738999, 0, 1.0};
Point(118) = {-0.141216, -0.739874, 0, 1.0};
Point(119) = {-0.145229, -0.740265, 0, 1.0};
Point(120) = {-0.147638, -0.740372, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html