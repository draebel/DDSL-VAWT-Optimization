SetFactory("OpenCASCADE");

Point(1) = {0.074457, 0.742785, 0, 1.0};
Point(2) = {0.073879, 0.742851, 0, 1.0};
Point(3) = {0.072236, 0.743097, 0, 1.0};
Point(4) = {0.069712, 0.743521, 0, 1.0};
Point(5) = {0.066399, 0.744027, 0, 1.0};
Point(6) = {0.062302, 0.744573, 0, 1.0};
Point(7) = {0.057467, 0.745194, 0, 1.0};
Point(8) = {0.051999, 0.745901, 0, 1.0};
Point(9) = {0.046011, 0.746683, 0, 1.0};
Point(10) = {0.039618, 0.747510, 0, 1.0};
Point(11) = {0.032944, 0.748337, 0, 1.0};
Point(12) = {0.026105, 0.749103, 0, 1.0};
Point(13) = {0.019216, 0.749704, 0, 1.0};
Point(14) = {0.012304, 0.750000, 0, 1.0};
Point(15) = {0.005313, 0.749945, 0, 1.0};
Point(16) = {-0.001754, 0.749599, 0, 1.0};
Point(17) = {-0.008533, 0.749033, 0, 1.0};
Point(18) = {-0.015848, 0.748160, 0, 1.0};
Point(19) = {-0.022732, 0.747110, 0, 1.0};
Point(20) = {-0.029415, 0.745865, 0, 1.0};
Point(21) = {-0.035828, 0.744442, 0, 1.0};
Point(22) = {-0.041910, 0.742858, 0, 1.0};
Point(23) = {-0.047600, 0.741138, 0, 1.0};
Point(24) = {-0.052849, 0.739302, 0, 1.0};
Point(25) = {-0.057605, 0.737379, 0, 1.0};
Point(26) = {-0.061829, 0.735397, 0, 1.0};
Point(27) = {-0.065484, 0.733387, 0, 1.0};
Point(28) = {-0.068540, 0.731388, 0, 1.0};
Point(29) = {-0.070976, 0.729439, 0, 1.0};
Point(30) = {-0.072774, 0.727583, 0, 1.0};
Point(31) = {-0.073925, 0.725883, 0, 1.0};
Point(32) = {-0.074415, 0.724422, 0, 1.0};
Point(33) = {-0.074091, 0.723328, 0, 1.0};
Point(34) = {-0.072842, 0.722499, 0, 1.0};
Point(35) = {-0.070740, 0.721789, 0, 1.0};
Point(36) = {-0.067854, 0.721236, 0, 1.0};
Point(37) = {-0.064216, 0.720852, 0, 1.0};
Point(38) = {-0.059860, 0.720639, 0, 1.0};
Point(39) = {-0.054837, 0.720584, 0, 1.0};
Point(40) = {-0.049210, 0.720679, 0, 1.0};
Point(41) = {-0.043050, 0.720921, 0, 1.0};
Point(42) = {-0.036432, 0.721303, 0, 1.0};
Point(43) = {-0.029436, 0.721821, 0, 1.0};
Point(44) = {-0.022142, 0.722470, 0, 1.0};
Point(45) = {-0.014643, 0.723237, 0, 1.0};
Point(46) = {-0.007036, 0.724118, 0, 1.0};
Point(47) = {0.000584, 0.725114, 0, 1.0};
Point(48) = {0.008119, 0.726232, 0, 1.0};
Point(49) = {0.015470, 0.727480, 0, 1.0};
Point(50) = {0.022539, 0.728900, 0, 1.0};
Point(51) = {0.029293, 0.730573, 0, 1.0};
Point(52) = {0.035767, 0.732529, 0, 1.0};
Point(53) = {0.042063, 0.734747, 0, 1.0};
Point(54) = {0.048294, 0.737022, 0, 1.0};
Point(55) = {0.054362, 0.739038, 0, 1.0};
Point(56) = {0.060000, 0.740629, 0, 1.0};
Point(57) = {0.064972, 0.741747, 0, 1.0};
Point(58) = {0.069039, 0.742403, 0, 1.0};
Point(59) = {0.072049, 0.742697, 0, 1.0};
Point(60) = {0.073857, 0.742778, 0, 1.0};
Point(61) = {-0.074457, -0.742785, 0, 1.0};
Point(62) = {-0.073879, -0.742851, 0, 1.0};
Point(63) = {-0.072236, -0.743097, 0, 1.0};
Point(64) = {-0.069712, -0.743521, 0, 1.0};
Point(65) = {-0.066399, -0.744027, 0, 1.0};
Point(66) = {-0.062302, -0.744573, 0, 1.0};
Point(67) = {-0.057467, -0.745194, 0, 1.0};
Point(68) = {-0.051999, -0.745901, 0, 1.0};
Point(69) = {-0.046011, -0.746683, 0, 1.0};
Point(70) = {-0.039618, -0.747510, 0, 1.0};
Point(71) = {-0.032944, -0.748337, 0, 1.0};
Point(72) = {-0.026105, -0.749103, 0, 1.0};
Point(73) = {-0.019216, -0.749704, 0, 1.0};
Point(74) = {-0.012304, -0.750000, 0, 1.0};
Point(75) = {-0.005313, -0.749945, 0, 1.0};
Point(76) = {0.001754, -0.749599, 0, 1.0};
Point(77) = {0.008533, -0.749033, 0, 1.0};
Point(78) = {0.015848, -0.748160, 0, 1.0};
Point(79) = {0.022732, -0.747110, 0, 1.0};
Point(80) = {0.029415, -0.745865, 0, 1.0};
Point(81) = {0.035828, -0.744442, 0, 1.0};
Point(82) = {0.041910, -0.742858, 0, 1.0};
Point(83) = {0.047600, -0.741138, 0, 1.0};
Point(84) = {0.052849, -0.739302, 0, 1.0};
Point(85) = {0.057605, -0.737379, 0, 1.0};
Point(86) = {0.061829, -0.735397, 0, 1.0};
Point(87) = {0.065484, -0.733387, 0, 1.0};
Point(88) = {0.068540, -0.731388, 0, 1.0};
Point(89) = {0.070976, -0.729439, 0, 1.0};
Point(90) = {0.072774, -0.727583, 0, 1.0};
Point(91) = {0.073925, -0.725883, 0, 1.0};
Point(92) = {0.074415, -0.724422, 0, 1.0};
Point(93) = {0.074091, -0.723328, 0, 1.0};
Point(94) = {0.072842, -0.722499, 0, 1.0};
Point(95) = {0.070740, -0.721789, 0, 1.0};
Point(96) = {0.067854, -0.721236, 0, 1.0};
Point(97) = {0.064216, -0.720852, 0, 1.0};
Point(98) = {0.059860, -0.720639, 0, 1.0};
Point(99) = {0.054837, -0.720584, 0, 1.0};
Point(100) = {0.049210, -0.720679, 0, 1.0};
Point(101) = {0.043050, -0.720921, 0, 1.0};
Point(102) = {0.036432, -0.721303, 0, 1.0};
Point(103) = {0.029436, -0.721821, 0, 1.0};
Point(104) = {0.022142, -0.722470, 0, 1.0};
Point(105) = {0.014643, -0.723237, 0, 1.0};
Point(106) = {0.007036, -0.724118, 0, 1.0};
Point(107) = {-0.000584, -0.725114, 0, 1.0};
Point(108) = {-0.008119, -0.726232, 0, 1.0};
Point(109) = {-0.015470, -0.727480, 0, 1.0};
Point(110) = {-0.022539, -0.728900, 0, 1.0};
Point(111) = {-0.029293, -0.730573, 0, 1.0};
Point(112) = {-0.035767, -0.732529, 0, 1.0};
Point(113) = {-0.042063, -0.734747, 0, 1.0};
Point(114) = {-0.048294, -0.737022, 0, 1.0};
Point(115) = {-0.054362, -0.739038, 0, 1.0};
Point(116) = {-0.060000, -0.740629, 0, 1.0};
Point(117) = {-0.064972, -0.741747, 0, 1.0};
Point(118) = {-0.069039, -0.742403, 0, 1.0};
Point(119) = {-0.072049, -0.742697, 0, 1.0};
Point(120) = {-0.073857, -0.742778, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html