SetFactory("OpenCASCADE");

Point(1) = {0.111525, 0.745600, 0, 1.0};
Point(2) = {0.111261, 0.745692, 0, 1.0};
Point(3) = {0.110533, 0.745982, 0, 1.0};
Point(4) = {0.109446, 0.746406, 0, 1.0};
Point(5) = {0.108029, 0.746857, 0, 1.0};
Point(6) = {0.106219, 0.747264, 0, 1.0};
Point(7) = {0.103983, 0.747651, 0, 1.0};
Point(8) = {0.103207, 0.747767, 0, 1.0};
Point(9) = {0.092025, 0.749113, 0, 1.0};
Point(10) = {0.086413, 0.749619, 0, 1.0};
Point(11) = {0.084149, 0.749783, 0, 1.0};
Point(12) = {0.081884, 0.749907, 0, 1.0};
Point(13) = {0.079617, 0.749981, 0, 1.0};
Point(14) = {0.077348, 0.750000, 0, 1.0};
Point(15) = {0.069419, 0.749931, 0, 1.0};
Point(16) = {0.058162, 0.749827, 0, 1.0};
Point(17) = {0.056810, 0.749819, 0, 1.0};
Point(18) = {0.051175, 0.749762, 0, 1.0};
Point(19) = {0.045462, 0.749668, 0, 1.0};
Point(20) = {0.039705, 0.749537, 0, 1.0};
Point(21) = {0.033949, 0.749373, 0, 1.0};
Point(22) = {0.028238, 0.749179, 0, 1.0};
Point(23) = {0.022622, 0.748952, 0, 1.0};
Point(24) = {0.017152, 0.748676, 0, 1.0};
Point(25) = {0.011869, 0.748336, 0, 1.0};
Point(26) = {0.006806, 0.747909, 0, 1.0};
Point(27) = {0.001985, 0.747378, 0, 1.0};
Point(28) = {-0.002567, 0.746738, 0, 1.0};
Point(29) = {-0.006823, 0.745945, 0, 1.0};
Point(30) = {-0.010801, 0.744980, 0, 1.0};
Point(31) = {-0.014525, 0.743863, 0, 1.0};
Point(32) = {-0.017998, 0.742607, 0, 1.0};
Point(33) = {-0.021222, 0.741244, 0, 1.0};
Point(34) = {-0.024181, 0.739804, 0, 1.0};
Point(35) = {-0.026862, 0.738313, 0, 1.0};
Point(36) = {-0.029255, 0.736782, 0, 1.0};
Point(37) = {-0.031348, 0.735236, 0, 1.0};
Point(38) = {-0.033138, 0.733698, 0, 1.0};
Point(39) = {-0.034615, 0.732191, 0, 1.0};
Point(40) = {-0.035770, 0.730742, 0, 1.0};
Point(41) = {-0.036583, 0.729363, 0, 1.0};
Point(42) = {-0.037070, 0.728060, 0, 1.0};
Point(43) = {-0.037263, 0.726871, 0, 1.0};
Point(44) = {-0.037172, 0.725866, 0, 1.0};
Point(45) = {-0.036727, 0.725188, 0, 1.0};
Point(46) = {-0.035783, 0.724794, 0, 1.0};
Point(47) = {-0.034309, 0.724528, 0, 1.0};
Point(48) = {-0.032382, 0.724384, 0, 1.0};
Point(49) = {-0.030030, 0.724361, 0, 1.0};
Point(50) = {-0.027281, 0.724457, 0, 1.0};
Point(51) = {-0.024158, 0.724678, 0, 1.0};
Point(52) = {-0.020693, 0.725028, 0, 1.0};
Point(53) = {-0.016912, 0.725510, 0, 1.0};
Point(54) = {-0.012849, 0.726136, 0, 1.0};
Point(55) = {-0.008547, 0.726932, 0, 1.0};
Point(56) = {-0.003992, 0.727975, 0, 1.0};
Point(57) = {0.000884, 0.729261, 0, 1.0};
Point(58) = {0.006097, 0.730712, 0, 1.0};
Point(59) = {0.011624, 0.732278, 0, 1.0};
Point(60) = {0.017430, 0.733920, 0, 1.0};
Point(61) = {0.023480, 0.735595, 0, 1.0};
Point(62) = {0.029730, 0.737275, 0, 1.0};
Point(63) = {0.036134, 0.738916, 0, 1.0};
Point(64) = {0.042639, 0.740489, 0, 1.0};
Point(65) = {0.049189, 0.741961, 0, 1.0};
Point(66) = {0.055729, 0.743311, 0, 1.0};
Point(67) = {0.059025, 0.743940, 0, 1.0};
Point(68) = {0.070124, 0.745941, 0, 1.0};
Point(69) = {0.076798, 0.747012, 0, 1.0};
Point(70) = {0.079033, 0.747313, 0, 1.0};
Point(71) = {0.081275, 0.747551, 0, 1.0};
Point(72) = {0.083525, 0.747725, 0, 1.0};
Point(73) = {0.085778, 0.747831, 0, 1.0};
Point(74) = {0.092464, 0.747905, 0, 1.0};
Point(75) = {0.103747, 0.747248, 0, 1.0};
Point(76) = {0.106613, 0.746844, 0, 1.0};
Point(77) = {0.108874, 0.746360, 0, 1.0};
Point(78) = {0.110395, 0.745940, 0, 1.0};
Point(79) = {0.111250, 0.745683, 0, 1.0};
Point(80) = {0.111522, 0.745600, 0, 1.0};
Point(81) = {-0.111525, -0.745600, 0, 1.0};
Point(82) = {-0.111261, -0.745692, 0, 1.0};
Point(83) = {-0.110533, -0.745982, 0, 1.0};
Point(84) = {-0.109446, -0.746406, 0, 1.0};
Point(85) = {-0.108029, -0.746857, 0, 1.0};
Point(86) = {-0.106219, -0.747264, 0, 1.0};
Point(87) = {-0.103983, -0.747651, 0, 1.0};
Point(88) = {-0.103207, -0.747767, 0, 1.0};
Point(89) = {-0.092025, -0.749113, 0, 1.0};
Point(90) = {-0.086413, -0.749619, 0, 1.0};
Point(91) = {-0.084149, -0.749783, 0, 1.0};
Point(92) = {-0.081884, -0.749907, 0, 1.0};
Point(93) = {-0.079617, -0.749981, 0, 1.0};
Point(94) = {-0.077348, -0.750000, 0, 1.0};
Point(95) = {-0.069419, -0.749931, 0, 1.0};
Point(96) = {-0.058162, -0.749827, 0, 1.0};
Point(97) = {-0.056810, -0.749819, 0, 1.0};
Point(98) = {-0.051175, -0.749762, 0, 1.0};
Point(99) = {-0.045462, -0.749668, 0, 1.0};
Point(100) = {-0.039705, -0.749537, 0, 1.0};
Point(101) = {-0.033949, -0.749373, 0, 1.0};
Point(102) = {-0.028238, -0.749179, 0, 1.0};
Point(103) = {-0.022622, -0.748952, 0, 1.0};
Point(104) = {-0.017152, -0.748676, 0, 1.0};
Point(105) = {-0.011869, -0.748336, 0, 1.0};
Point(106) = {-0.006806, -0.747909, 0, 1.0};
Point(107) = {-0.001985, -0.747378, 0, 1.0};
Point(108) = {0.002567, -0.746738, 0, 1.0};
Point(109) = {0.006823, -0.745945, 0, 1.0};
Point(110) = {0.010801, -0.744980, 0, 1.0};
Point(111) = {0.014525, -0.743863, 0, 1.0};
Point(112) = {0.017998, -0.742607, 0, 1.0};
Point(113) = {0.021222, -0.741244, 0, 1.0};
Point(114) = {0.024181, -0.739804, 0, 1.0};
Point(115) = {0.026862, -0.738313, 0, 1.0};
Point(116) = {0.029255, -0.736782, 0, 1.0};
Point(117) = {0.031348, -0.735236, 0, 1.0};
Point(118) = {0.033138, -0.733698, 0, 1.0};
Point(119) = {0.034615, -0.732191, 0, 1.0};
Point(120) = {0.035770, -0.730742, 0, 1.0};
Point(121) = {0.036583, -0.729363, 0, 1.0};
Point(122) = {0.037070, -0.728060, 0, 1.0};
Point(123) = {0.037263, -0.726871, 0, 1.0};
Point(124) = {0.037172, -0.725866, 0, 1.0};
Point(125) = {0.036727, -0.725188, 0, 1.0};
Point(126) = {0.035783, -0.724794, 0, 1.0};
Point(127) = {0.034309, -0.724528, 0, 1.0};
Point(128) = {0.032382, -0.724384, 0, 1.0};
Point(129) = {0.030030, -0.724361, 0, 1.0};
Point(130) = {0.027281, -0.724457, 0, 1.0};
Point(131) = {0.024158, -0.724678, 0, 1.0};
Point(132) = {0.020693, -0.725028, 0, 1.0};
Point(133) = {0.016912, -0.725510, 0, 1.0};
Point(134) = {0.012849, -0.726136, 0, 1.0};
Point(135) = {0.008547, -0.726932, 0, 1.0};
Point(136) = {0.003992, -0.727975, 0, 1.0};
Point(137) = {-0.000884, -0.729261, 0, 1.0};
Point(138) = {-0.006097, -0.730712, 0, 1.0};
Point(139) = {-0.011624, -0.732278, 0, 1.0};
Point(140) = {-0.017430, -0.733920, 0, 1.0};
Point(141) = {-0.023480, -0.735595, 0, 1.0};
Point(142) = {-0.029730, -0.737275, 0, 1.0};
Point(143) = {-0.036134, -0.738916, 0, 1.0};
Point(144) = {-0.042639, -0.740489, 0, 1.0};
Point(145) = {-0.049189, -0.741961, 0, 1.0};
Point(146) = {-0.055729, -0.743311, 0, 1.0};
Point(147) = {-0.059025, -0.743940, 0, 1.0};
Point(148) = {-0.070124, -0.745941, 0, 1.0};
Point(149) = {-0.076798, -0.747012, 0, 1.0};
Point(150) = {-0.079033, -0.747313, 0, 1.0};
Point(151) = {-0.081275, -0.747551, 0, 1.0};
Point(152) = {-0.083525, -0.747725, 0, 1.0};
Point(153) = {-0.085778, -0.747831, 0, 1.0};
Point(154) = {-0.092464, -0.747905, 0, 1.0};
Point(155) = {-0.103747, -0.747248, 0, 1.0};
Point(156) = {-0.106613, -0.746844, 0, 1.0};
Point(157) = {-0.108874, -0.746360, 0, 1.0};
Point(158) = {-0.110395, -0.745940, 0, 1.0};
Point(159) = {-0.111250, -0.745683, 0, 1.0};
Point(160) = {-0.111522, -0.745600, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html