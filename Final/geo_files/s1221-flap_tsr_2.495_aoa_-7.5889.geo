SetFactory("OpenCASCADE");

Point(1) = {0.074096, 0.747070, 0, 1.0};
Point(2) = {0.073921, 0.747131, 0, 1.0};
Point(3) = {0.073436, 0.747324, 0, 1.0};
Point(4) = {0.072712, 0.747607, 0, 1.0};
Point(5) = {0.071768, 0.747907, 0, 1.0};
Point(6) = {0.070563, 0.748178, 0, 1.0};
Point(7) = {0.069074, 0.748436, 0, 1.0};
Point(8) = {0.068557, 0.748513, 0, 1.0};
Point(9) = {0.061111, 0.749410, 0, 1.0};
Point(10) = {0.057374, 0.749746, 0, 1.0};
Point(11) = {0.055866, 0.749856, 0, 1.0};
Point(12) = {0.054358, 0.749938, 0, 1.0};
Point(13) = {0.052848, 0.749987, 0, 1.0};
Point(14) = {0.051337, 0.750000, 0, 1.0};
Point(15) = {0.046057, 0.749954, 0, 1.0};
Point(16) = {0.038560, 0.749885, 0, 1.0};
Point(17) = {0.037660, 0.749880, 0, 1.0};
Point(18) = {0.033907, 0.749842, 0, 1.0};
Point(19) = {0.030103, 0.749779, 0, 1.0};
Point(20) = {0.026269, 0.749692, 0, 1.0};
Point(21) = {0.022436, 0.749583, 0, 1.0};
Point(22) = {0.018633, 0.749453, 0, 1.0};
Point(23) = {0.014893, 0.749302, 0, 1.0};
Point(24) = {0.011250, 0.749118, 0, 1.0};
Point(25) = {0.007733, 0.748892, 0, 1.0};
Point(26) = {0.004360, 0.748608, 0, 1.0};
Point(27) = {0.001150, 0.748254, 0, 1.0};
Point(28) = {-0.001881, 0.747828, 0, 1.0};
Point(29) = {-0.004715, 0.747300, 0, 1.0};
Point(30) = {-0.007365, 0.746657, 0, 1.0};
Point(31) = {-0.009844, 0.745913, 0, 1.0};
Point(32) = {-0.012157, 0.745077, 0, 1.0};
Point(33) = {-0.014304, 0.744169, 0, 1.0};
Point(34) = {-0.016274, 0.743210, 0, 1.0};
Point(35) = {-0.018060, 0.742217, 0, 1.0};
Point(36) = {-0.019653, 0.741198, 0, 1.0};
Point(37) = {-0.021048, 0.740168, 0, 1.0};
Point(38) = {-0.022240, 0.739144, 0, 1.0};
Point(39) = {-0.023223, 0.738140, 0, 1.0};
Point(40) = {-0.023992, 0.737175, 0, 1.0};
Point(41) = {-0.024533, 0.736257, 0, 1.0};
Point(42) = {-0.024858, 0.735389, 0, 1.0};
Point(43) = {-0.024986, 0.734597, 0, 1.0};
Point(44) = {-0.024925, 0.733929, 0, 1.0};
Point(45) = {-0.024629, 0.733477, 0, 1.0};
Point(46) = {-0.024001, 0.733214, 0, 1.0};
Point(47) = {-0.023019, 0.733038, 0, 1.0};
Point(48) = {-0.021736, 0.732941, 0, 1.0};
Point(49) = {-0.020169, 0.732926, 0, 1.0};
Point(50) = {-0.018339, 0.732990, 0, 1.0};
Point(51) = {-0.016259, 0.733137, 0, 1.0};
Point(52) = {-0.013952, 0.733370, 0, 1.0};
Point(53) = {-0.011434, 0.733691, 0, 1.0};
Point(54) = {-0.008728, 0.734108, 0, 1.0};
Point(55) = {-0.005863, 0.734638, 0, 1.0};
Point(56) = {-0.002830, 0.735333, 0, 1.0};
Point(57) = {0.000417, 0.736189, 0, 1.0};
Point(58) = {0.003889, 0.737155, 0, 1.0};
Point(59) = {0.007569, 0.738198, 0, 1.0};
Point(60) = {0.011436, 0.739292, 0, 1.0};
Point(61) = {0.015465, 0.740408, 0, 1.0};
Point(62) = {0.019626, 0.741526, 0, 1.0};
Point(63) = {0.023892, 0.742619, 0, 1.0};
Point(64) = {0.028223, 0.743666, 0, 1.0};
Point(65) = {0.032585, 0.744647, 0, 1.0};
Point(66) = {0.036940, 0.745546, 0, 1.0};
Point(67) = {0.039135, 0.745964, 0, 1.0};
Point(68) = {0.046526, 0.747297, 0, 1.0};
Point(69) = {0.050971, 0.748010, 0, 1.0};
Point(70) = {0.052459, 0.748211, 0, 1.0};
Point(71) = {0.053952, 0.748369, 0, 1.0};
Point(72) = {0.055450, 0.748485, 0, 1.0};
Point(73) = {0.056951, 0.748556, 0, 1.0};
Point(74) = {0.061403, 0.748605, 0, 1.0};
Point(75) = {0.068917, 0.748168, 0, 1.0};
Point(76) = {0.070825, 0.747898, 0, 1.0};
Point(77) = {0.072331, 0.747576, 0, 1.0};
Point(78) = {0.073344, 0.747297, 0, 1.0};
Point(79) = {0.073913, 0.747125, 0, 1.0};
Point(80) = {0.074094, 0.747070, 0, 1.0};
Point(81) = {-0.074096, -0.747070, 0, 1.0};
Point(82) = {-0.073921, -0.747131, 0, 1.0};
Point(83) = {-0.073436, -0.747324, 0, 1.0};
Point(84) = {-0.072712, -0.747607, 0, 1.0};
Point(85) = {-0.071768, -0.747907, 0, 1.0};
Point(86) = {-0.070563, -0.748178, 0, 1.0};
Point(87) = {-0.069074, -0.748436, 0, 1.0};
Point(88) = {-0.068557, -0.748513, 0, 1.0};
Point(89) = {-0.061111, -0.749410, 0, 1.0};
Point(90) = {-0.057374, -0.749746, 0, 1.0};
Point(91) = {-0.055866, -0.749856, 0, 1.0};
Point(92) = {-0.054358, -0.749938, 0, 1.0};
Point(93) = {-0.052848, -0.749987, 0, 1.0};
Point(94) = {-0.051337, -0.750000, 0, 1.0};
Point(95) = {-0.046057, -0.749954, 0, 1.0};
Point(96) = {-0.038560, -0.749885, 0, 1.0};
Point(97) = {-0.037660, -0.749880, 0, 1.0};
Point(98) = {-0.033907, -0.749842, 0, 1.0};
Point(99) = {-0.030103, -0.749779, 0, 1.0};
Point(100) = {-0.026269, -0.749692, 0, 1.0};
Point(101) = {-0.022436, -0.749583, 0, 1.0};
Point(102) = {-0.018633, -0.749453, 0, 1.0};
Point(103) = {-0.014893, -0.749302, 0, 1.0};
Point(104) = {-0.011250, -0.749118, 0, 1.0};
Point(105) = {-0.007733, -0.748892, 0, 1.0};
Point(106) = {-0.004360, -0.748608, 0, 1.0};
Point(107) = {-0.001150, -0.748254, 0, 1.0};
Point(108) = {0.001881, -0.747828, 0, 1.0};
Point(109) = {0.004715, -0.747300, 0, 1.0};
Point(110) = {0.007365, -0.746657, 0, 1.0};
Point(111) = {0.009844, -0.745913, 0, 1.0};
Point(112) = {0.012157, -0.745077, 0, 1.0};
Point(113) = {0.014304, -0.744169, 0, 1.0};
Point(114) = {0.016274, -0.743210, 0, 1.0};
Point(115) = {0.018060, -0.742217, 0, 1.0};
Point(116) = {0.019653, -0.741198, 0, 1.0};
Point(117) = {0.021048, -0.740168, 0, 1.0};
Point(118) = {0.022240, -0.739144, 0, 1.0};
Point(119) = {0.023223, -0.738140, 0, 1.0};
Point(120) = {0.023992, -0.737175, 0, 1.0};
Point(121) = {0.024533, -0.736257, 0, 1.0};
Point(122) = {0.024858, -0.735389, 0, 1.0};
Point(123) = {0.024986, -0.734597, 0, 1.0};
Point(124) = {0.024925, -0.733929, 0, 1.0};
Point(125) = {0.024629, -0.733477, 0, 1.0};
Point(126) = {0.024001, -0.733214, 0, 1.0};
Point(127) = {0.023019, -0.733038, 0, 1.0};
Point(128) = {0.021736, -0.732941, 0, 1.0};
Point(129) = {0.020169, -0.732926, 0, 1.0};
Point(130) = {0.018339, -0.732990, 0, 1.0};
Point(131) = {0.016259, -0.733137, 0, 1.0};
Point(132) = {0.013952, -0.733370, 0, 1.0};
Point(133) = {0.011434, -0.733691, 0, 1.0};
Point(134) = {0.008728, -0.734108, 0, 1.0};
Point(135) = {0.005863, -0.734638, 0, 1.0};
Point(136) = {0.002830, -0.735333, 0, 1.0};
Point(137) = {-0.000417, -0.736189, 0, 1.0};
Point(138) = {-0.003889, -0.737155, 0, 1.0};
Point(139) = {-0.007569, -0.738198, 0, 1.0};
Point(140) = {-0.011436, -0.739292, 0, 1.0};
Point(141) = {-0.015465, -0.740408, 0, 1.0};
Point(142) = {-0.019626, -0.741526, 0, 1.0};
Point(143) = {-0.023892, -0.742619, 0, 1.0};
Point(144) = {-0.028223, -0.743666, 0, 1.0};
Point(145) = {-0.032585, -0.744647, 0, 1.0};
Point(146) = {-0.036940, -0.745546, 0, 1.0};
Point(147) = {-0.039135, -0.745964, 0, 1.0};
Point(148) = {-0.046526, -0.747297, 0, 1.0};
Point(149) = {-0.050971, -0.748010, 0, 1.0};
Point(150) = {-0.052459, -0.748211, 0, 1.0};
Point(151) = {-0.053952, -0.748369, 0, 1.0};
Point(152) = {-0.055450, -0.748485, 0, 1.0};
Point(153) = {-0.056951, -0.748556, 0, 1.0};
Point(154) = {-0.061403, -0.748605, 0, 1.0};
Point(155) = {-0.068917, -0.748168, 0, 1.0};
Point(156) = {-0.070825, -0.747898, 0, 1.0};
Point(157) = {-0.072331, -0.747576, 0, 1.0};
Point(158) = {-0.073344, -0.747297, 0, 1.0};
Point(159) = {-0.073913, -0.747125, 0, 1.0};
Point(160) = {-0.074094, -0.747070, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html