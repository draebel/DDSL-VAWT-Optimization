SetFactory("OpenCASCADE");

Point(1) = {0.111145, 0.745605, 0, 1.0};
Point(2) = {0.110881, 0.745697, 0, 1.0};
Point(3) = {0.110154, 0.745986, 0, 1.0};
Point(4) = {0.109069, 0.746410, 0, 1.0};
Point(5) = {0.107653, 0.746860, 0, 1.0};
Point(6) = {0.105845, 0.747267, 0, 1.0};
Point(7) = {0.103611, 0.747654, 0, 1.0};
Point(8) = {0.102836, 0.747770, 0, 1.0};
Point(9) = {0.091666, 0.749114, 0, 1.0};
Point(10) = {0.086060, 0.749619, 0, 1.0};
Point(11) = {0.083799, 0.749784, 0, 1.0};
Point(12) = {0.081537, 0.749908, 0, 1.0};
Point(13) = {0.079272, 0.749981, 0, 1.0};
Point(14) = {0.077006, 0.750000, 0, 1.0};
Point(15) = {0.069085, 0.749931, 0, 1.0};
Point(16) = {0.057841, 0.749827, 0, 1.0};
Point(17) = {0.056490, 0.749820, 0, 1.0};
Point(18) = {0.050861, 0.749763, 0, 1.0};
Point(19) = {0.045155, 0.749668, 0, 1.0};
Point(20) = {0.039404, 0.749538, 0, 1.0};
Point(21) = {0.033654, 0.749374, 0, 1.0};
Point(22) = {0.027949, 0.749180, 0, 1.0};
Point(23) = {0.022340, 0.748953, 0, 1.0};
Point(24) = {0.016876, 0.748677, 0, 1.0};
Point(25) = {0.011599, 0.748338, 0, 1.0};
Point(26) = {0.006541, 0.747912, 0, 1.0};
Point(27) = {0.001725, 0.747381, 0, 1.0};
Point(28) = {-0.002822, 0.746742, 0, 1.0};
Point(29) = {-0.007073, 0.745950, 0, 1.0};
Point(30) = {-0.011047, 0.744986, 0, 1.0};
Point(31) = {-0.014766, 0.743870, 0, 1.0};
Point(32) = {-0.018235, 0.742615, 0, 1.0};
Point(33) = {-0.021456, 0.741254, 0, 1.0};
Point(34) = {-0.024412, 0.739816, 0, 1.0};
Point(35) = {-0.027090, 0.738325, 0, 1.0};
Point(36) = {-0.029480, 0.736796, 0, 1.0};
Point(37) = {-0.031571, 0.735253, 0, 1.0};
Point(38) = {-0.033359, 0.733716, 0, 1.0};
Point(39) = {-0.034834, 0.732211, 0, 1.0};
Point(40) = {-0.035988, 0.730763, 0, 1.0};
Point(41) = {-0.036800, 0.729385, 0, 1.0};
Point(42) = {-0.037287, 0.728084, 0, 1.0};
Point(43) = {-0.037479, 0.726896, 0, 1.0};
Point(44) = {-0.037388, 0.725893, 0, 1.0};
Point(45) = {-0.036944, 0.725215, 0, 1.0};
Point(46) = {-0.036002, 0.724822, 0, 1.0};
Point(47) = {-0.034529, 0.724556, 0, 1.0};
Point(48) = {-0.032604, 0.724412, 0, 1.0};
Point(49) = {-0.030254, 0.724389, 0, 1.0};
Point(50) = {-0.027508, 0.724485, 0, 1.0};
Point(51) = {-0.024388, 0.724706, 0, 1.0};
Point(52) = {-0.020927, 0.725055, 0, 1.0};
Point(53) = {-0.017151, 0.725537, 0, 1.0};
Point(54) = {-0.013092, 0.726162, 0, 1.0};
Point(55) = {-0.008795, 0.726957, 0, 1.0};
Point(56) = {-0.004246, 0.727999, 0, 1.0};
Point(57) = {0.000625, 0.729284, 0, 1.0};
Point(58) = {0.005833, 0.730733, 0, 1.0};
Point(59) = {0.011354, 0.732298, 0, 1.0};
Point(60) = {0.017154, 0.733937, 0, 1.0};
Point(61) = {0.023197, 0.735611, 0, 1.0};
Point(62) = {0.029440, 0.737289, 0, 1.0};
Point(63) = {0.035837, 0.738928, 0, 1.0};
Point(64) = {0.042335, 0.740499, 0, 1.0};
Point(65) = {0.048877, 0.741970, 0, 1.0};
Point(66) = {0.055410, 0.743319, 0, 1.0};
Point(67) = {0.058703, 0.743946, 0, 1.0};
Point(68) = {0.069789, 0.745945, 0, 1.0};
Point(69) = {0.076456, 0.747015, 0, 1.0};
Point(70) = {0.078689, 0.747316, 0, 1.0};
Point(71) = {0.080929, 0.747554, 0, 1.0};
Point(72) = {0.083175, 0.747727, 0, 1.0};
Point(73) = {0.085427, 0.747834, 0, 1.0};
Point(74) = {0.092105, 0.747908, 0, 1.0};
Point(75) = {0.103376, 0.747251, 0, 1.0};
Point(76) = {0.106238, 0.746847, 0, 1.0};
Point(77) = {0.108497, 0.746364, 0, 1.0};
Point(78) = {0.110016, 0.745945, 0, 1.0};
Point(79) = {0.110870, 0.745688, 0, 1.0};
Point(80) = {0.111142, 0.745605, 0, 1.0};
Point(81) = {-0.111145, -0.745605, 0, 1.0};
Point(82) = {-0.110881, -0.745697, 0, 1.0};
Point(83) = {-0.110154, -0.745986, 0, 1.0};
Point(84) = {-0.109069, -0.746410, 0, 1.0};
Point(85) = {-0.107653, -0.746860, 0, 1.0};
Point(86) = {-0.105845, -0.747267, 0, 1.0};
Point(87) = {-0.103611, -0.747654, 0, 1.0};
Point(88) = {-0.102836, -0.747770, 0, 1.0};
Point(89) = {-0.091666, -0.749114, 0, 1.0};
Point(90) = {-0.086060, -0.749619, 0, 1.0};
Point(91) = {-0.083799, -0.749784, 0, 1.0};
Point(92) = {-0.081537, -0.749908, 0, 1.0};
Point(93) = {-0.079272, -0.749981, 0, 1.0};
Point(94) = {-0.077006, -0.750000, 0, 1.0};
Point(95) = {-0.069085, -0.749931, 0, 1.0};
Point(96) = {-0.057841, -0.749827, 0, 1.0};
Point(97) = {-0.056490, -0.749820, 0, 1.0};
Point(98) = {-0.050861, -0.749763, 0, 1.0};
Point(99) = {-0.045155, -0.749668, 0, 1.0};
Point(100) = {-0.039404, -0.749538, 0, 1.0};
Point(101) = {-0.033654, -0.749374, 0, 1.0};
Point(102) = {-0.027949, -0.749180, 0, 1.0};
Point(103) = {-0.022340, -0.748953, 0, 1.0};
Point(104) = {-0.016876, -0.748677, 0, 1.0};
Point(105) = {-0.011599, -0.748338, 0, 1.0};
Point(106) = {-0.006541, -0.747912, 0, 1.0};
Point(107) = {-0.001725, -0.747381, 0, 1.0};
Point(108) = {0.002822, -0.746742, 0, 1.0};
Point(109) = {0.007073, -0.745950, 0, 1.0};
Point(110) = {0.011047, -0.744986, 0, 1.0};
Point(111) = {0.014766, -0.743870, 0, 1.0};
Point(112) = {0.018235, -0.742615, 0, 1.0};
Point(113) = {0.021456, -0.741254, 0, 1.0};
Point(114) = {0.024412, -0.739816, 0, 1.0};
Point(115) = {0.027090, -0.738325, 0, 1.0};
Point(116) = {0.029480, -0.736796, 0, 1.0};
Point(117) = {0.031571, -0.735253, 0, 1.0};
Point(118) = {0.033359, -0.733716, 0, 1.0};
Point(119) = {0.034834, -0.732211, 0, 1.0};
Point(120) = {0.035988, -0.730763, 0, 1.0};
Point(121) = {0.036800, -0.729385, 0, 1.0};
Point(122) = {0.037287, -0.728084, 0, 1.0};
Point(123) = {0.037479, -0.726896, 0, 1.0};
Point(124) = {0.037388, -0.725893, 0, 1.0};
Point(125) = {0.036944, -0.725215, 0, 1.0};
Point(126) = {0.036002, -0.724822, 0, 1.0};
Point(127) = {0.034529, -0.724556, 0, 1.0};
Point(128) = {0.032604, -0.724412, 0, 1.0};
Point(129) = {0.030254, -0.724389, 0, 1.0};
Point(130) = {0.027508, -0.724485, 0, 1.0};
Point(131) = {0.024388, -0.724706, 0, 1.0};
Point(132) = {0.020927, -0.725055, 0, 1.0};
Point(133) = {0.017151, -0.725537, 0, 1.0};
Point(134) = {0.013092, -0.726162, 0, 1.0};
Point(135) = {0.008795, -0.726957, 0, 1.0};
Point(136) = {0.004246, -0.727999, 0, 1.0};
Point(137) = {-0.000625, -0.729284, 0, 1.0};
Point(138) = {-0.005833, -0.730733, 0, 1.0};
Point(139) = {-0.011354, -0.732298, 0, 1.0};
Point(140) = {-0.017154, -0.733937, 0, 1.0};
Point(141) = {-0.023197, -0.735611, 0, 1.0};
Point(142) = {-0.029440, -0.737289, 0, 1.0};
Point(143) = {-0.035837, -0.738928, 0, 1.0};
Point(144) = {-0.042335, -0.740499, 0, 1.0};
Point(145) = {-0.048877, -0.741970, 0, 1.0};
Point(146) = {-0.055410, -0.743319, 0, 1.0};
Point(147) = {-0.058703, -0.743946, 0, 1.0};
Point(148) = {-0.069789, -0.745945, 0, 1.0};
Point(149) = {-0.076456, -0.747015, 0, 1.0};
Point(150) = {-0.078689, -0.747316, 0, 1.0};
Point(151) = {-0.080929, -0.747554, 0, 1.0};
Point(152) = {-0.083175, -0.747727, 0, 1.0};
Point(153) = {-0.085427, -0.747834, 0, 1.0};
Point(154) = {-0.092105, -0.747908, 0, 1.0};
Point(155) = {-0.103376, -0.747251, 0, 1.0};
Point(156) = {-0.106238, -0.746847, 0, 1.0};
Point(157) = {-0.108497, -0.746364, 0, 1.0};
Point(158) = {-0.110016, -0.745945, 0, 1.0};
Point(159) = {-0.110870, -0.745688, 0, 1.0};
Point(160) = {-0.111142, -0.745605, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html