SetFactory("OpenCASCADE");

Point(1) = {0.111198, 0.745610, 0, 1.0};
Point(2) = {0.110935, 0.745702, 0, 1.0};
Point(3) = {0.110208, 0.745990, 0, 1.0};
Point(4) = {0.109124, 0.746414, 0, 1.0};
Point(5) = {0.107710, 0.746864, 0, 1.0};
Point(6) = {0.105904, 0.747270, 0, 1.0};
Point(7) = {0.103673, 0.747656, 0, 1.0};
Point(8) = {0.102898, 0.747772, 0, 1.0};
Point(9) = {0.091741, 0.749115, 0, 1.0};
Point(10) = {0.086141, 0.749619, 0, 1.0};
Point(11) = {0.083882, 0.749784, 0, 1.0};
Point(12) = {0.081622, 0.749908, 0, 1.0};
Point(13) = {0.079360, 0.749981, 0, 1.0};
Point(14) = {0.077096, 0.750000, 0, 1.0};
Point(15) = {0.069185, 0.749931, 0, 1.0};
Point(16) = {0.057952, 0.749827, 0, 1.0};
Point(17) = {0.056604, 0.749820, 0, 1.0};
Point(18) = {0.050981, 0.749763, 0, 1.0};
Point(19) = {0.045281, 0.749669, 0, 1.0};
Point(20) = {0.039536, 0.749538, 0, 1.0};
Point(21) = {0.033793, 0.749375, 0, 1.0};
Point(22) = {0.028094, 0.749181, 0, 1.0};
Point(23) = {0.022491, 0.748954, 0, 1.0};
Point(24) = {0.017033, 0.748679, 0, 1.0};
Point(25) = {0.011762, 0.748339, 0, 1.0};
Point(26) = {0.006709, 0.747914, 0, 1.0};
Point(27) = {0.001899, 0.747384, 0, 1.0};
Point(28) = {-0.002643, 0.746745, 0, 1.0};
Point(29) = {-0.006890, 0.745954, 0, 1.0};
Point(30) = {-0.010859, 0.744991, 0, 1.0};
Point(31) = {-0.014574, 0.743877, 0, 1.0};
Point(32) = {-0.018040, 0.742623, 0, 1.0};
Point(33) = {-0.021257, 0.741263, 0, 1.0};
Point(34) = {-0.024209, 0.739827, 0, 1.0};
Point(35) = {-0.026885, 0.738338, 0, 1.0};
Point(36) = {-0.029272, 0.736811, 0, 1.0};
Point(37) = {-0.031361, 0.735269, 0, 1.0};
Point(38) = {-0.033147, 0.733734, 0, 1.0};
Point(39) = {-0.034620, 0.732230, 0, 1.0};
Point(40) = {-0.035773, 0.730784, 0, 1.0};
Point(41) = {-0.036584, 0.729408, 0, 1.0};
Point(42) = {-0.037070, 0.728108, 0, 1.0};
Point(43) = {-0.037263, 0.726922, 0, 1.0};
Point(44) = {-0.037172, 0.725920, 0, 1.0};
Point(45) = {-0.036728, 0.725243, 0, 1.0};
Point(46) = {-0.035786, 0.724849, 0, 1.0};
Point(47) = {-0.034315, 0.724584, 0, 1.0};
Point(48) = {-0.032393, 0.724440, 0, 1.0};
Point(49) = {-0.030045, 0.724417, 0, 1.0};
Point(50) = {-0.027302, 0.724514, 0, 1.0};
Point(51) = {-0.024186, 0.724734, 0, 1.0};
Point(52) = {-0.020729, 0.725082, 0, 1.0};
Point(53) = {-0.016957, 0.725564, 0, 1.0};
Point(54) = {-0.012903, 0.726189, 0, 1.0};
Point(55) = {-0.008610, 0.726983, 0, 1.0};
Point(56) = {-0.004065, 0.728024, 0, 1.0};
Point(57) = {0.000800, 0.729307, 0, 1.0};
Point(58) = {0.006002, 0.730754, 0, 1.0};
Point(59) = {0.011517, 0.732317, 0, 1.0};
Point(60) = {0.017310, 0.733955, 0, 1.0};
Point(61) = {0.023347, 0.735627, 0, 1.0};
Point(62) = {0.029583, 0.737303, 0, 1.0};
Point(63) = {0.035973, 0.738940, 0, 1.0};
Point(64) = {0.042464, 0.740509, 0, 1.0};
Point(65) = {0.048999, 0.741979, 0, 1.0};
Point(66) = {0.055525, 0.743326, 0, 1.0};
Point(67) = {0.058814, 0.743953, 0, 1.0};
Point(68) = {0.069888, 0.745950, 0, 1.0};
Point(69) = {0.076547, 0.747019, 0, 1.0};
Point(70) = {0.078778, 0.747319, 0, 1.0};
Point(71) = {0.081015, 0.747556, 0, 1.0};
Point(72) = {0.083259, 0.747730, 0, 1.0};
Point(73) = {0.085508, 0.747836, 0, 1.0};
Point(74) = {0.092179, 0.747910, 0, 1.0};
Point(75) = {0.103437, 0.747254, 0, 1.0};
Point(76) = {0.106297, 0.746851, 0, 1.0};
Point(77) = {0.108553, 0.746368, 0, 1.0};
Point(78) = {0.110070, 0.745949, 0, 1.0};
Point(79) = {0.110924, 0.745693, 0, 1.0};
Point(80) = {0.111195, 0.745609, 0, 1.0};
Point(81) = {-0.111198, -0.745610, 0, 1.0};
Point(82) = {-0.110935, -0.745702, 0, 1.0};
Point(83) = {-0.110208, -0.745990, 0, 1.0};
Point(84) = {-0.109124, -0.746414, 0, 1.0};
Point(85) = {-0.107710, -0.746864, 0, 1.0};
Point(86) = {-0.105904, -0.747270, 0, 1.0};
Point(87) = {-0.103673, -0.747656, 0, 1.0};
Point(88) = {-0.102898, -0.747772, 0, 1.0};
Point(89) = {-0.091741, -0.749115, 0, 1.0};
Point(90) = {-0.086141, -0.749619, 0, 1.0};
Point(91) = {-0.083882, -0.749784, 0, 1.0};
Point(92) = {-0.081622, -0.749908, 0, 1.0};
Point(93) = {-0.079360, -0.749981, 0, 1.0};
Point(94) = {-0.077096, -0.750000, 0, 1.0};
Point(95) = {-0.069185, -0.749931, 0, 1.0};
Point(96) = {-0.057952, -0.749827, 0, 1.0};
Point(97) = {-0.056604, -0.749820, 0, 1.0};
Point(98) = {-0.050981, -0.749763, 0, 1.0};
Point(99) = {-0.045281, -0.749669, 0, 1.0};
Point(100) = {-0.039536, -0.749538, 0, 1.0};
Point(101) = {-0.033793, -0.749375, 0, 1.0};
Point(102) = {-0.028094, -0.749181, 0, 1.0};
Point(103) = {-0.022491, -0.748954, 0, 1.0};
Point(104) = {-0.017033, -0.748679, 0, 1.0};
Point(105) = {-0.011762, -0.748339, 0, 1.0};
Point(106) = {-0.006709, -0.747914, 0, 1.0};
Point(107) = {-0.001899, -0.747384, 0, 1.0};
Point(108) = {0.002643, -0.746745, 0, 1.0};
Point(109) = {0.006890, -0.745954, 0, 1.0};
Point(110) = {0.010859, -0.744991, 0, 1.0};
Point(111) = {0.014574, -0.743877, 0, 1.0};
Point(112) = {0.018040, -0.742623, 0, 1.0};
Point(113) = {0.021257, -0.741263, 0, 1.0};
Point(114) = {0.024209, -0.739827, 0, 1.0};
Point(115) = {0.026885, -0.738338, 0, 1.0};
Point(116) = {0.029272, -0.736811, 0, 1.0};
Point(117) = {0.031361, -0.735269, 0, 1.0};
Point(118) = {0.033147, -0.733734, 0, 1.0};
Point(119) = {0.034620, -0.732230, 0, 1.0};
Point(120) = {0.035773, -0.730784, 0, 1.0};
Point(121) = {0.036584, -0.729408, 0, 1.0};
Point(122) = {0.037070, -0.728108, 0, 1.0};
Point(123) = {0.037263, -0.726922, 0, 1.0};
Point(124) = {0.037172, -0.725920, 0, 1.0};
Point(125) = {0.036728, -0.725243, 0, 1.0};
Point(126) = {0.035786, -0.724849, 0, 1.0};
Point(127) = {0.034315, -0.724584, 0, 1.0};
Point(128) = {0.032393, -0.724440, 0, 1.0};
Point(129) = {0.030045, -0.724417, 0, 1.0};
Point(130) = {0.027302, -0.724514, 0, 1.0};
Point(131) = {0.024186, -0.724734, 0, 1.0};
Point(132) = {0.020729, -0.725082, 0, 1.0};
Point(133) = {0.016957, -0.725564, 0, 1.0};
Point(134) = {0.012903, -0.726189, 0, 1.0};
Point(135) = {0.008610, -0.726983, 0, 1.0};
Point(136) = {0.004065, -0.728024, 0, 1.0};
Point(137) = {-0.000800, -0.729307, 0, 1.0};
Point(138) = {-0.006002, -0.730754, 0, 1.0};
Point(139) = {-0.011517, -0.732317, 0, 1.0};
Point(140) = {-0.017310, -0.733955, 0, 1.0};
Point(141) = {-0.023347, -0.735627, 0, 1.0};
Point(142) = {-0.029583, -0.737303, 0, 1.0};
Point(143) = {-0.035973, -0.738940, 0, 1.0};
Point(144) = {-0.042464, -0.740509, 0, 1.0};
Point(145) = {-0.048999, -0.741979, 0, 1.0};
Point(146) = {-0.055525, -0.743326, 0, 1.0};
Point(147) = {-0.058814, -0.743953, 0, 1.0};
Point(148) = {-0.069888, -0.745950, 0, 1.0};
Point(149) = {-0.076547, -0.747019, 0, 1.0};
Point(150) = {-0.078778, -0.747319, 0, 1.0};
Point(151) = {-0.081015, -0.747556, 0, 1.0};
Point(152) = {-0.083259, -0.747730, 0, 1.0};
Point(153) = {-0.085508, -0.747836, 0, 1.0};
Point(154) = {-0.092179, -0.747910, 0, 1.0};
Point(155) = {-0.103437, -0.747254, 0, 1.0};
Point(156) = {-0.106297, -0.746851, 0, 1.0};
Point(157) = {-0.108553, -0.746368, 0, 1.0};
Point(158) = {-0.110070, -0.745949, 0, 1.0};
Point(159) = {-0.110924, -0.745693, 0, 1.0};
Point(160) = {-0.111195, -0.745609, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html