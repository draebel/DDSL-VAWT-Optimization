SetFactory("OpenCASCADE");

Point(1) = {0.074863, 0.739611, 0, 1.0};
Point(2) = {0.074589, 0.739746, 0, 1.0};
Point(3) = {0.073827, 0.740138, 0, 1.0};
Point(4) = {0.072669, 0.740713, 0, 1.0};
Point(5) = {0.071122, 0.741362, 0, 1.0};
Point(6) = {0.069146, 0.742039, 0, 1.0};
Point(7) = {0.066733, 0.742750, 0, 1.0};
Point(8) = {0.063912, 0.743490, 0, 1.0};
Point(9) = {0.060710, 0.744243, 0, 1.0};
Point(10) = {0.057160, 0.744996, 0, 1.0};
Point(11) = {0.053295, 0.745733, 0, 1.0};
Point(12) = {0.049153, 0.746446, 0, 1.0};
Point(13) = {0.044777, 0.747117, 0, 1.0};
Point(14) = {0.040208, 0.747740, 0, 1.0};
Point(15) = {0.035493, 0.748301, 0, 1.0};
Point(16) = {0.030677, 0.748794, 0, 1.0};
Point(17) = {0.025807, 0.749208, 0, 1.0};
Point(18) = {0.020933, 0.749542, 0, 1.0};
Point(19) = {0.016101, 0.749785, 0, 1.0};
Point(20) = {0.011360, 0.749940, 0, 1.0};
Point(21) = {0.006754, 0.750000, 0, 1.0};
Point(22) = {0.002332, 0.749968, 0, 1.0};
Point(23) = {-0.001867, 0.749840, 0, 1.0};
Point(24) = {-0.005804, 0.749623, 0, 1.0};
Point(25) = {-0.009441, 0.749318, 0, 1.0};
Point(26) = {-0.012746, 0.748934, 0, 1.0};
Point(27) = {-0.015694, 0.748475, 0, 1.0};
Point(28) = {-0.018260, 0.747955, 0, 1.0};
Point(29) = {-0.020426, 0.747386, 0, 1.0};
Point(30) = {-0.022181, 0.746785, 0, 1.0};
Point(31) = {-0.023512, 0.746175, 0, 1.0};
Point(32) = {-0.024425, 0.745584, 0, 1.0};
Point(33) = {-0.024913, 0.745060, 0, 1.0};
Point(34) = {-0.024952, 0.744703, 0, 1.0};
Point(35) = {-0.024460, 0.744512, 0, 1.0};
Point(36) = {-0.023369, 0.744431, 0, 1.0};
Point(37) = {-0.021700, 0.744446, 0, 1.0};
Point(38) = {-0.019458, 0.744552, 0, 1.0};
Point(39) = {-0.016653, 0.744724, 0, 1.0};
Point(40) = {-0.013308, 0.744943, 0, 1.0};
Point(41) = {-0.009457, 0.745184, 0, 1.0};
Point(42) = {-0.005142, 0.745428, 0, 1.0};
Point(43) = {-0.000415, 0.745653, 0, 1.0};
Point(44) = {0.004667, 0.745841, 0, 1.0};
Point(45) = {0.010038, 0.745976, 0, 1.0};
Point(46) = {0.015631, 0.746040, 0, 1.0};
Point(47) = {0.021372, 0.746025, 0, 1.0};
Point(48) = {0.027184, 0.745919, 0, 1.0};
Point(49) = {0.032984, 0.745719, 0, 1.0};
Point(50) = {0.038693, 0.745419, 0, 1.0};
Point(51) = {0.044229, 0.745028, 0, 1.0};
Point(52) = {0.049517, 0.744548, 0, 1.0};
Point(53) = {0.054478, 0.743994, 0, 1.0};
Point(54) = {0.059042, 0.743374, 0, 1.0};
Point(55) = {0.063141, 0.742711, 0, 1.0};
Point(56) = {0.066713, 0.742020, 0, 1.0};
Point(57) = {0.069701, 0.741322, 0, 1.0};
Point(58) = {0.072028, 0.740647, 0, 1.0};
Point(59) = {0.073640, 0.740085, 0, 1.0};
Point(60) = {0.074564, 0.739728, 0, 1.0};
Point(61) = {-0.074863, -0.739611, 0, 1.0};
Point(62) = {-0.074589, -0.739746, 0, 1.0};
Point(63) = {-0.073827, -0.740138, 0, 1.0};
Point(64) = {-0.072669, -0.740713, 0, 1.0};
Point(65) = {-0.071122, -0.741362, 0, 1.0};
Point(66) = {-0.069146, -0.742039, 0, 1.0};
Point(67) = {-0.066733, -0.742750, 0, 1.0};
Point(68) = {-0.063912, -0.743490, 0, 1.0};
Point(69) = {-0.060710, -0.744243, 0, 1.0};
Point(70) = {-0.057160, -0.744996, 0, 1.0};
Point(71) = {-0.053295, -0.745733, 0, 1.0};
Point(72) = {-0.049153, -0.746446, 0, 1.0};
Point(73) = {-0.044777, -0.747117, 0, 1.0};
Point(74) = {-0.040208, -0.747740, 0, 1.0};
Point(75) = {-0.035493, -0.748301, 0, 1.0};
Point(76) = {-0.030677, -0.748794, 0, 1.0};
Point(77) = {-0.025807, -0.749208, 0, 1.0};
Point(78) = {-0.020933, -0.749542, 0, 1.0};
Point(79) = {-0.016101, -0.749785, 0, 1.0};
Point(80) = {-0.011360, -0.749940, 0, 1.0};
Point(81) = {-0.006754, -0.750000, 0, 1.0};
Point(82) = {-0.002332, -0.749968, 0, 1.0};
Point(83) = {0.001867, -0.749840, 0, 1.0};
Point(84) = {0.005804, -0.749623, 0, 1.0};
Point(85) = {0.009441, -0.749318, 0, 1.0};
Point(86) = {0.012746, -0.748934, 0, 1.0};
Point(87) = {0.015694, -0.748475, 0, 1.0};
Point(88) = {0.018260, -0.747955, 0, 1.0};
Point(89) = {0.020426, -0.747386, 0, 1.0};
Point(90) = {0.022181, -0.746785, 0, 1.0};
Point(91) = {0.023512, -0.746175, 0, 1.0};
Point(92) = {0.024425, -0.745584, 0, 1.0};
Point(93) = {0.024913, -0.745060, 0, 1.0};
Point(94) = {0.024952, -0.744703, 0, 1.0};
Point(95) = {0.024460, -0.744512, 0, 1.0};
Point(96) = {0.023369, -0.744431, 0, 1.0};
Point(97) = {0.021700, -0.744446, 0, 1.0};
Point(98) = {0.019458, -0.744552, 0, 1.0};
Point(99) = {0.016653, -0.744724, 0, 1.0};
Point(100) = {0.013308, -0.744943, 0, 1.0};
Point(101) = {0.009457, -0.745184, 0, 1.0};
Point(102) = {0.005142, -0.745428, 0, 1.0};
Point(103) = {0.000415, -0.745653, 0, 1.0};
Point(104) = {-0.004667, -0.745841, 0, 1.0};
Point(105) = {-0.010038, -0.745976, 0, 1.0};
Point(106) = {-0.015631, -0.746040, 0, 1.0};
Point(107) = {-0.021372, -0.746025, 0, 1.0};
Point(108) = {-0.027184, -0.745919, 0, 1.0};
Point(109) = {-0.032984, -0.745719, 0, 1.0};
Point(110) = {-0.038693, -0.745419, 0, 1.0};
Point(111) = {-0.044229, -0.745028, 0, 1.0};
Point(112) = {-0.049517, -0.744548, 0, 1.0};
Point(113) = {-0.054478, -0.743994, 0, 1.0};
Point(114) = {-0.059042, -0.743374, 0, 1.0};
Point(115) = {-0.063141, -0.742711, 0, 1.0};
Point(116) = {-0.066713, -0.742020, 0, 1.0};
Point(117) = {-0.069701, -0.741322, 0, 1.0};
Point(118) = {-0.072028, -0.740647, 0, 1.0};
Point(119) = {-0.073640, -0.740085, 0, 1.0};
Point(120) = {-0.074564, -0.739728, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html