SetFactory("OpenCASCADE");

Point(1) = {0.074908, 0.734407, 0, 1.0};
Point(2) = {0.074497, 0.734611, 0, 1.0};
Point(3) = {0.073354, 0.735200, 0, 1.0};
Point(4) = {0.071615, 0.736062, 0, 1.0};
Point(5) = {0.069294, 0.737036, 0, 1.0};
Point(6) = {0.066328, 0.738052, 0, 1.0};
Point(7) = {0.062707, 0.739118, 0, 1.0};
Point(8) = {0.058473, 0.740230, 0, 1.0};
Point(9) = {0.053667, 0.741360, 0, 1.0};
Point(10) = {0.048339, 0.742490, 0, 1.0};
Point(11) = {0.042538, 0.743596, 0, 1.0};
Point(12) = {0.036323, 0.744666, 0, 1.0};
Point(13) = {0.029754, 0.745673, 0, 1.0};
Point(14) = {0.022897, 0.746608, 0, 1.0};
Point(15) = {0.015821, 0.747450, 0, 1.0};
Point(16) = {0.008593, 0.748190, 0, 1.0};
Point(17) = {0.001284, 0.748812, 0, 1.0};
Point(18) = {-0.006031, 0.749313, 0, 1.0};
Point(19) = {-0.013283, 0.749678, 0, 1.0};
Point(20) = {-0.020399, 0.749910, 0, 1.0};
Point(21) = {-0.027311, 0.750000, 0, 1.0};
Point(22) = {-0.033948, 0.749951, 0, 1.0};
Point(23) = {-0.040250, 0.749760, 0, 1.0};
Point(24) = {-0.046158, 0.749434, 0, 1.0};
Point(25) = {-0.051616, 0.748977, 0, 1.0};
Point(26) = {-0.056578, 0.748400, 0, 1.0};
Point(27) = {-0.061002, 0.747712, 0, 1.0};
Point(28) = {-0.064853, 0.746931, 0, 1.0};
Point(29) = {-0.068103, 0.746076, 0, 1.0};
Point(30) = {-0.070737, 0.745174, 0, 1.0};
Point(31) = {-0.072736, 0.744259, 0, 1.0};
Point(32) = {-0.074105, 0.743372, 0, 1.0};
Point(33) = {-0.074837, 0.742586, 0, 1.0};
Point(34) = {-0.074897, 0.742050, 0, 1.0};
Point(35) = {-0.074158, 0.741763, 0, 1.0};
Point(36) = {-0.072520, 0.741641, 0, 1.0};
Point(37) = {-0.070016, 0.741665, 0, 1.0};
Point(38) = {-0.066651, 0.741824, 0, 1.0};
Point(39) = {-0.062441, 0.742082, 0, 1.0};
Point(40) = {-0.057421, 0.742410, 0, 1.0};
Point(41) = {-0.051641, 0.742772, 0, 1.0};
Point(42) = {-0.045166, 0.743138, 0, 1.0};
Point(43) = {-0.038071, 0.743477, 0, 1.0};
Point(44) = {-0.030444, 0.743757, 0, 1.0};
Point(45) = {-0.022382, 0.743960, 0, 1.0};
Point(46) = {-0.013988, 0.744056, 0, 1.0};
Point(47) = {-0.005372, 0.744034, 0, 1.0};
Point(48) = {0.003350, 0.743875, 0, 1.0};
Point(49) = {0.012056, 0.743575, 0, 1.0};
Point(50) = {0.020624, 0.743125, 0, 1.0};
Point(51) = {0.028933, 0.742538, 0, 1.0};
Point(52) = {0.036868, 0.741818, 0, 1.0};
Point(53) = {0.044315, 0.740986, 0, 1.0};
Point(54) = {0.051164, 0.740056, 0, 1.0};
Point(55) = {0.057316, 0.739060, 0, 1.0};
Point(56) = {0.062676, 0.738023, 0, 1.0};
Point(57) = {0.067162, 0.736976, 0, 1.0};
Point(58) = {0.070654, 0.735963, 0, 1.0};
Point(59) = {0.073073, 0.735120, 0, 1.0};
Point(60) = {0.074459, 0.734584, 0, 1.0};
Point(61) = {-0.074908, -0.734407, 0, 1.0};
Point(62) = {-0.074497, -0.734611, 0, 1.0};
Point(63) = {-0.073354, -0.735200, 0, 1.0};
Point(64) = {-0.071615, -0.736062, 0, 1.0};
Point(65) = {-0.069294, -0.737036, 0, 1.0};
Point(66) = {-0.066328, -0.738052, 0, 1.0};
Point(67) = {-0.062707, -0.739118, 0, 1.0};
Point(68) = {-0.058473, -0.740230, 0, 1.0};
Point(69) = {-0.053667, -0.741360, 0, 1.0};
Point(70) = {-0.048339, -0.742490, 0, 1.0};
Point(71) = {-0.042538, -0.743596, 0, 1.0};
Point(72) = {-0.036323, -0.744666, 0, 1.0};
Point(73) = {-0.029754, -0.745673, 0, 1.0};
Point(74) = {-0.022897, -0.746608, 0, 1.0};
Point(75) = {-0.015821, -0.747450, 0, 1.0};
Point(76) = {-0.008593, -0.748190, 0, 1.0};
Point(77) = {-0.001284, -0.748812, 0, 1.0};
Point(78) = {0.006031, -0.749313, 0, 1.0};
Point(79) = {0.013283, -0.749678, 0, 1.0};
Point(80) = {0.020399, -0.749910, 0, 1.0};
Point(81) = {0.027311, -0.750000, 0, 1.0};
Point(82) = {0.033948, -0.749951, 0, 1.0};
Point(83) = {0.040250, -0.749760, 0, 1.0};
Point(84) = {0.046158, -0.749434, 0, 1.0};
Point(85) = {0.051616, -0.748977, 0, 1.0};
Point(86) = {0.056578, -0.748400, 0, 1.0};
Point(87) = {0.061002, -0.747712, 0, 1.0};
Point(88) = {0.064853, -0.746931, 0, 1.0};
Point(89) = {0.068103, -0.746076, 0, 1.0};
Point(90) = {0.070737, -0.745174, 0, 1.0};
Point(91) = {0.072736, -0.744259, 0, 1.0};
Point(92) = {0.074105, -0.743372, 0, 1.0};
Point(93) = {0.074837, -0.742586, 0, 1.0};
Point(94) = {0.074897, -0.742050, 0, 1.0};
Point(95) = {0.074158, -0.741763, 0, 1.0};
Point(96) = {0.072520, -0.741641, 0, 1.0};
Point(97) = {0.070016, -0.741665, 0, 1.0};
Point(98) = {0.066651, -0.741824, 0, 1.0};
Point(99) = {0.062441, -0.742082, 0, 1.0};
Point(100) = {0.057421, -0.742410, 0, 1.0};
Point(101) = {0.051641, -0.742772, 0, 1.0};
Point(102) = {0.045166, -0.743138, 0, 1.0};
Point(103) = {0.038071, -0.743477, 0, 1.0};
Point(104) = {0.030444, -0.743757, 0, 1.0};
Point(105) = {0.022382, -0.743960, 0, 1.0};
Point(106) = {0.013988, -0.744056, 0, 1.0};
Point(107) = {0.005372, -0.744034, 0, 1.0};
Point(108) = {-0.003350, -0.743875, 0, 1.0};
Point(109) = {-0.012056, -0.743575, 0, 1.0};
Point(110) = {-0.020624, -0.743125, 0, 1.0};
Point(111) = {-0.028933, -0.742538, 0, 1.0};
Point(112) = {-0.036868, -0.741818, 0, 1.0};
Point(113) = {-0.044315, -0.740986, 0, 1.0};
Point(114) = {-0.051164, -0.740056, 0, 1.0};
Point(115) = {-0.057316, -0.739060, 0, 1.0};
Point(116) = {-0.062676, -0.738023, 0, 1.0};
Point(117) = {-0.067162, -0.736976, 0, 1.0};
Point(118) = {-0.070654, -0.735963, 0, 1.0};
Point(119) = {-0.073073, -0.735120, 0, 1.0};
Point(120) = {-0.074459, -0.734584, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html