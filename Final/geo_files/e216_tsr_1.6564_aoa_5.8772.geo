SetFactory("OpenCASCADE");

Point(1) = {0.074474, 0.733352, 0, 1.0};
Point(2) = {0.074182, 0.733524, 0, 1.0};
Point(3) = {0.073379, 0.734020, 0, 1.0};
Point(4) = {0.072170, 0.734753, 0, 1.0};
Point(5) = {0.070561, 0.735605, 0, 1.0};
Point(6) = {0.068512, 0.736532, 0, 1.0};
Point(7) = {0.066021, 0.737540, 0, 1.0};
Point(8) = {0.063124, 0.738621, 0, 1.0};
Point(9) = {0.059858, 0.739751, 0, 1.0};
Point(10) = {0.056256, 0.740908, 0, 1.0};
Point(11) = {0.052358, 0.742070, 0, 1.0};
Point(12) = {0.048201, 0.743214, 0, 1.0};
Point(13) = {0.043826, 0.744321, 0, 1.0};
Point(14) = {0.039277, 0.745372, 0, 1.0};
Point(15) = {0.034600, 0.746351, 0, 1.0};
Point(16) = {0.029839, 0.747239, 0, 1.0};
Point(17) = {0.025040, 0.748023, 0, 1.0};
Point(18) = {0.020250, 0.748689, 0, 1.0};
Point(19) = {0.015512, 0.749227, 0, 1.0};
Point(20) = {0.010871, 0.749629, 0, 1.0};
Point(21) = {0.006370, 0.749888, 0, 1.0};
Point(22) = {0.002047, 0.750000, 0, 1.0};
Point(23) = {-0.002058, 0.749966, 0, 1.0};
Point(24) = {-0.005911, 0.749789, 0, 1.0};
Point(25) = {-0.009480, 0.749473, 0, 1.0};
Point(26) = {-0.012735, 0.749030, 0, 1.0};
Point(27) = {-0.015648, 0.748469, 0, 1.0};
Point(28) = {-0.018199, 0.747809, 0, 1.0};
Point(29) = {-0.020366, 0.747066, 0, 1.0};
Point(30) = {-0.022135, 0.746264, 0, 1.0};
Point(31) = {-0.023493, 0.745428, 0, 1.0};
Point(32) = {-0.024433, 0.744597, 0, 1.0};
Point(33) = {-0.024945, 0.743825, 0, 1.0};
Point(34) = {-0.024932, 0.743198, 0, 1.0};
Point(35) = {-0.024324, 0.742652, 0, 1.0};
Point(36) = {-0.023164, 0.742105, 0, 1.0};
Point(37) = {-0.021483, 0.741591, 0, 1.0};
Point(38) = {-0.019299, 0.741126, 0, 1.0};
Point(39) = {-0.016622, 0.740720, 0, 1.0};
Point(40) = {-0.013474, 0.740375, 0, 1.0};
Point(41) = {-0.009878, 0.740093, 0, 1.0};
Point(42) = {-0.005860, 0.739870, 0, 1.0};
Point(43) = {-0.001458, 0.739701, 0, 1.0};
Point(44) = {0.003291, 0.739576, 0, 1.0};
Point(45) = {0.008342, 0.739481, 0, 1.0};
Point(46) = {0.013642, 0.739403, 0, 1.0};
Point(47) = {0.019136, 0.739326, 0, 1.0};
Point(48) = {0.024760, 0.739231, 0, 1.0};
Point(49) = {0.030446, 0.739102, 0, 1.0};
Point(50) = {0.036122, 0.738920, 0, 1.0};
Point(51) = {0.041709, 0.738672, 0, 1.0};
Point(52) = {0.047129, 0.738346, 0, 1.0};
Point(53) = {0.052298, 0.737931, 0, 1.0};
Point(54) = {0.057131, 0.737427, 0, 1.0};
Point(55) = {0.061545, 0.736832, 0, 1.0};
Point(56) = {0.065451, 0.736154, 0, 1.0};
Point(57) = {0.068759, 0.735404, 0, 1.0};
Point(58) = {0.071351, 0.734624, 0, 1.0};
Point(59) = {0.073136, 0.733941, 0, 1.0};
Point(60) = {0.074149, 0.733499, 0, 1.0};
Point(61) = {-0.074474, -0.733352, 0, 1.0};
Point(62) = {-0.074182, -0.733524, 0, 1.0};
Point(63) = {-0.073379, -0.734020, 0, 1.0};
Point(64) = {-0.072170, -0.734753, 0, 1.0};
Point(65) = {-0.070561, -0.735605, 0, 1.0};
Point(66) = {-0.068512, -0.736532, 0, 1.0};
Point(67) = {-0.066021, -0.737540, 0, 1.0};
Point(68) = {-0.063124, -0.738621, 0, 1.0};
Point(69) = {-0.059858, -0.739751, 0, 1.0};
Point(70) = {-0.056256, -0.740908, 0, 1.0};
Point(71) = {-0.052358, -0.742070, 0, 1.0};
Point(72) = {-0.048201, -0.743214, 0, 1.0};
Point(73) = {-0.043826, -0.744321, 0, 1.0};
Point(74) = {-0.039277, -0.745372, 0, 1.0};
Point(75) = {-0.034600, -0.746351, 0, 1.0};
Point(76) = {-0.029839, -0.747239, 0, 1.0};
Point(77) = {-0.025040, -0.748023, 0, 1.0};
Point(78) = {-0.020250, -0.748689, 0, 1.0};
Point(79) = {-0.015512, -0.749227, 0, 1.0};
Point(80) = {-0.010871, -0.749629, 0, 1.0};
Point(81) = {-0.006370, -0.749888, 0, 1.0};
Point(82) = {-0.002047, -0.750000, 0, 1.0};
Point(83) = {0.002058, -0.749966, 0, 1.0};
Point(84) = {0.005911, -0.749789, 0, 1.0};
Point(85) = {0.009480, -0.749473, 0, 1.0};
Point(86) = {0.012735, -0.749030, 0, 1.0};
Point(87) = {0.015648, -0.748469, 0, 1.0};
Point(88) = {0.018199, -0.747809, 0, 1.0};
Point(89) = {0.020366, -0.747066, 0, 1.0};
Point(90) = {0.022135, -0.746264, 0, 1.0};
Point(91) = {0.023493, -0.745428, 0, 1.0};
Point(92) = {0.024433, -0.744597, 0, 1.0};
Point(93) = {0.024945, -0.743825, 0, 1.0};
Point(94) = {0.024932, -0.743198, 0, 1.0};
Point(95) = {0.024324, -0.742652, 0, 1.0};
Point(96) = {0.023164, -0.742105, 0, 1.0};
Point(97) = {0.021483, -0.741591, 0, 1.0};
Point(98) = {0.019299, -0.741126, 0, 1.0};
Point(99) = {0.016622, -0.740720, 0, 1.0};
Point(100) = {0.013474, -0.740375, 0, 1.0};
Point(101) = {0.009878, -0.740093, 0, 1.0};
Point(102) = {0.005860, -0.739870, 0, 1.0};
Point(103) = {0.001458, -0.739701, 0, 1.0};
Point(104) = {-0.003291, -0.739576, 0, 1.0};
Point(105) = {-0.008342, -0.739481, 0, 1.0};
Point(106) = {-0.013642, -0.739403, 0, 1.0};
Point(107) = {-0.019136, -0.739326, 0, 1.0};
Point(108) = {-0.024760, -0.739231, 0, 1.0};
Point(109) = {-0.030446, -0.739102, 0, 1.0};
Point(110) = {-0.036122, -0.738920, 0, 1.0};
Point(111) = {-0.041709, -0.738672, 0, 1.0};
Point(112) = {-0.047129, -0.738346, 0, 1.0};
Point(113) = {-0.052298, -0.737931, 0, 1.0};
Point(114) = {-0.057131, -0.737427, 0, 1.0};
Point(115) = {-0.061545, -0.736832, 0, 1.0};
Point(116) = {-0.065451, -0.736154, 0, 1.0};
Point(117) = {-0.068759, -0.735404, 0, 1.0};
Point(118) = {-0.071351, -0.734624, 0, 1.0};
Point(119) = {-0.073136, -0.733941, 0, 1.0};
Point(120) = {-0.074149, -0.733499, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html