SetFactory("OpenCASCADE");

Point(1) = {0.148008, 0.716095, 0, 1.0};
Point(2) = {0.147375, 0.716213, 0, 1.0};
Point(3) = {0.145500, 0.716583, 0, 1.0};
Point(4) = {0.142437, 0.717233, 0, 1.0};
Point(5) = {0.138250, 0.718173, 0, 1.0};
Point(6) = {0.133017, 0.719406, 0, 1.0};
Point(7) = {0.126825, 0.720923, 0, 1.0};
Point(8) = {0.119770, 0.722714, 0, 1.0};
Point(9) = {0.111970, 0.724761, 0, 1.0};
Point(10) = {0.103558, 0.727025, 0, 1.0};
Point(11) = {0.094659, 0.729440, 0, 1.0};
Point(12) = {0.085385, 0.731942, 0, 1.0};
Point(13) = {0.075843, 0.734461, 0, 1.0};
Point(14) = {0.066135, 0.736932, 0, 1.0};
Point(15) = {0.056350, 0.739288, 0, 1.0};
Point(16) = {0.046568, 0.741476, 0, 1.0};
Point(17) = {0.036868, 0.743453, 0, 1.0};
Point(18) = {0.027324, 0.745192, 0, 1.0};
Point(19) = {0.018013, 0.746669, 0, 1.0};
Point(20) = {0.009009, 0.747877, 0, 1.0};
Point(21) = {0.000393, 0.748815, 0, 1.0};
Point(22) = {-0.007751, 0.749483, 0, 1.0};
Point(23) = {-0.015345, 0.749876, 0, 1.0};
Point(24) = {-0.022324, 0.750000, 0, 1.0};
Point(25) = {-0.028624, 0.749864, 0, 1.0};
Point(26) = {-0.034190, 0.749485, 0, 1.0};
Point(27) = {-0.038973, 0.748880, 0, 1.0};
Point(28) = {-0.042935, 0.748077, 0, 1.0};
Point(29) = {-0.046047, 0.747111, 0, 1.0};
Point(30) = {-0.048291, 0.746039, 0, 1.0};
Point(31) = {-0.049456, 0.745144, 0, 1.0};
Point(32) = {-0.049728, 0.744822, 0, 1.0};
Point(33) = {-0.049914, 0.744515, 0, 1.0};
Point(34) = {-0.049986, 0.744324, 0, 1.0};
Point(35) = {-0.050005, 0.744150, 0, 1.0};
Point(36) = {-0.049958, 0.743977, 0, 1.0};
Point(37) = {-0.049851, 0.743789, 0, 1.0};
Point(38) = {-0.049603, 0.743485, 0, 1.0};
Point(39) = {-0.049262, 0.743159, 0, 1.0};
Point(40) = {-0.049011, 0.742949, 0, 1.0};
Point(41) = {-0.047033, 0.741752, 0, 1.0};
Point(42) = {-0.044056, 0.740474, 0, 1.0};
Point(43) = {-0.040114, 0.739159, 0, 1.0};
Point(44) = {-0.035234, 0.737845, 0, 1.0};
Point(45) = {-0.029441, 0.736562, 0, 1.0};
Point(46) = {-0.022757, 0.735314, 0, 1.0};
Point(47) = {-0.015239, 0.734084, 0, 1.0};
Point(48) = {-0.006971, 0.732864, 0, 1.0};
Point(49) = {0.001956, 0.731650, 0, 1.0};
Point(50) = {0.011438, 0.730447, 0, 1.0};
Point(51) = {0.021369, 0.729258, 0, 1.0};
Point(52) = {0.031637, 0.728089, 0, 1.0};
Point(53) = {0.042129, 0.726942, 0, 1.0};
Point(54) = {0.052722, 0.725824, 0, 1.0};
Point(55) = {0.063296, 0.724735, 0, 1.0};
Point(56) = {0.073728, 0.723687, 0, 1.0};
Point(57) = {0.083898, 0.722684, 0, 1.0};
Point(58) = {0.093694, 0.721731, 0, 1.0};
Point(59) = {0.103000, 0.720825, 0, 1.0};
Point(60) = {0.111698, 0.719969, 0, 1.0};
Point(61) = {0.119679, 0.719168, 0, 1.0};
Point(62) = {0.126837, 0.718432, 0, 1.0};
Point(63) = {0.133078, 0.717769, 0, 1.0};
Point(64) = {0.138317, 0.717196, 0, 1.0};
Point(65) = {0.142481, 0.716727, 0, 1.0};
Point(66) = {0.145513, 0.716383, 0, 1.0};
Point(67) = {0.147374, 0.716169, 0, 1.0};
Point(68) = {-0.148008, -0.716095, 0, 1.0};
Point(69) = {-0.147375, -0.716213, 0, 1.0};
Point(70) = {-0.145500, -0.716583, 0, 1.0};
Point(71) = {-0.142437, -0.717233, 0, 1.0};
Point(72) = {-0.138250, -0.718173, 0, 1.0};
Point(73) = {-0.133017, -0.719406, 0, 1.0};
Point(74) = {-0.126825, -0.720923, 0, 1.0};
Point(75) = {-0.119770, -0.722714, 0, 1.0};
Point(76) = {-0.111970, -0.724761, 0, 1.0};
Point(77) = {-0.103558, -0.727025, 0, 1.0};
Point(78) = {-0.094659, -0.729440, 0, 1.0};
Point(79) = {-0.085385, -0.731942, 0, 1.0};
Point(80) = {-0.075843, -0.734461, 0, 1.0};
Point(81) = {-0.066135, -0.736932, 0, 1.0};
Point(82) = {-0.056350, -0.739288, 0, 1.0};
Point(83) = {-0.046568, -0.741476, 0, 1.0};
Point(84) = {-0.036868, -0.743453, 0, 1.0};
Point(85) = {-0.027324, -0.745192, 0, 1.0};
Point(86) = {-0.018013, -0.746669, 0, 1.0};
Point(87) = {-0.009009, -0.747877, 0, 1.0};
Point(88) = {-0.000393, -0.748815, 0, 1.0};
Point(89) = {0.007751, -0.749483, 0, 1.0};
Point(90) = {0.015345, -0.749876, 0, 1.0};
Point(91) = {0.022324, -0.750000, 0, 1.0};
Point(92) = {0.028624, -0.749864, 0, 1.0};
Point(93) = {0.034190, -0.749485, 0, 1.0};
Point(94) = {0.038973, -0.748880, 0, 1.0};
Point(95) = {0.042935, -0.748077, 0, 1.0};
Point(96) = {0.046047, -0.747111, 0, 1.0};
Point(97) = {0.048291, -0.746039, 0, 1.0};
Point(98) = {0.049456, -0.745144, 0, 1.0};
Point(99) = {0.049728, -0.744822, 0, 1.0};
Point(100) = {0.049914, -0.744515, 0, 1.0};
Point(101) = {0.049986, -0.744324, 0, 1.0};
Point(102) = {0.050005, -0.744150, 0, 1.0};
Point(103) = {0.049958, -0.743977, 0, 1.0};
Point(104) = {0.049851, -0.743789, 0, 1.0};
Point(105) = {0.049603, -0.743485, 0, 1.0};
Point(106) = {0.049262, -0.743159, 0, 1.0};
Point(107) = {0.049011, -0.742949, 0, 1.0};
Point(108) = {0.047033, -0.741752, 0, 1.0};
Point(109) = {0.044056, -0.740474, 0, 1.0};
Point(110) = {0.040114, -0.739159, 0, 1.0};
Point(111) = {0.035234, -0.737845, 0, 1.0};
Point(112) = {0.029441, -0.736562, 0, 1.0};
Point(113) = {0.022757, -0.735314, 0, 1.0};
Point(114) = {0.015239, -0.734084, 0, 1.0};
Point(115) = {0.006971, -0.732864, 0, 1.0};
Point(116) = {-0.001956, -0.731650, 0, 1.0};
Point(117) = {-0.011438, -0.730447, 0, 1.0};
Point(118) = {-0.021369, -0.729258, 0, 1.0};
Point(119) = {-0.031637, -0.728089, 0, 1.0};
Point(120) = {-0.042129, -0.726942, 0, 1.0};
Point(121) = {-0.052722, -0.725824, 0, 1.0};
Point(122) = {-0.063296, -0.724735, 0, 1.0};
Point(123) = {-0.073728, -0.723687, 0, 1.0};
Point(124) = {-0.083898, -0.722684, 0, 1.0};
Point(125) = {-0.093694, -0.721731, 0, 1.0};
Point(126) = {-0.103000, -0.720825, 0, 1.0};
Point(127) = {-0.111698, -0.719969, 0, 1.0};
Point(128) = {-0.119679, -0.719168, 0, 1.0};
Point(129) = {-0.126837, -0.718432, 0, 1.0};
Point(130) = {-0.133078, -0.717769, 0, 1.0};
Point(131) = {-0.138317, -0.717196, 0, 1.0};
Point(132) = {-0.142481, -0.716727, 0, 1.0};
Point(133) = {-0.145513, -0.716383, 0, 1.0};
Point(134) = {-0.147374, -0.716169, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html