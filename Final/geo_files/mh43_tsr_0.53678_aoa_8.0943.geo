SetFactory("OpenCASCADE");

Point(1) = {0.111006, 0.724571, 0, 1.0};
Point(2) = {0.110531, 0.724660, 0, 1.0};
Point(3) = {0.109125, 0.724937, 0, 1.0};
Point(4) = {0.106828, 0.725425, 0, 1.0};
Point(5) = {0.103688, 0.726130, 0, 1.0};
Point(6) = {0.099763, 0.727054, 0, 1.0};
Point(7) = {0.095119, 0.728192, 0, 1.0};
Point(8) = {0.089827, 0.729535, 0, 1.0};
Point(9) = {0.083977, 0.731071, 0, 1.0};
Point(10) = {0.077668, 0.732768, 0, 1.0};
Point(11) = {0.070994, 0.734580, 0, 1.0};
Point(12) = {0.064039, 0.736456, 0, 1.0};
Point(13) = {0.056882, 0.738346, 0, 1.0};
Point(14) = {0.049601, 0.740199, 0, 1.0};
Point(15) = {0.042263, 0.741966, 0, 1.0};
Point(16) = {0.034926, 0.743607, 0, 1.0};
Point(17) = {0.027651, 0.745090, 0, 1.0};
Point(18) = {0.020493, 0.746394, 0, 1.0};
Point(19) = {0.013510, 0.747502, 0, 1.0};
Point(20) = {0.006757, 0.748408, 0, 1.0};
Point(21) = {0.000295, 0.749111, 0, 1.0};
Point(22) = {-0.005813, 0.749612, 0, 1.0};
Point(23) = {-0.011509, 0.749907, 0, 1.0};
Point(24) = {-0.016743, 0.750000, 0, 1.0};
Point(25) = {-0.021468, 0.749898, 0, 1.0};
Point(26) = {-0.025643, 0.749614, 0, 1.0};
Point(27) = {-0.029229, 0.749160, 0, 1.0};
Point(28) = {-0.032201, 0.748558, 0, 1.0};
Point(29) = {-0.034535, 0.747834, 0, 1.0};
Point(30) = {-0.036218, 0.747029, 0, 1.0};
Point(31) = {-0.037092, 0.746358, 0, 1.0};
Point(32) = {-0.037296, 0.746116, 0, 1.0};
Point(33) = {-0.037435, 0.745886, 0, 1.0};
Point(34) = {-0.037490, 0.745743, 0, 1.0};
Point(35) = {-0.037504, 0.745613, 0, 1.0};
Point(36) = {-0.037468, 0.745483, 0, 1.0};
Point(37) = {-0.037388, 0.745342, 0, 1.0};
Point(38) = {-0.037202, 0.745114, 0, 1.0};
Point(39) = {-0.036947, 0.744869, 0, 1.0};
Point(40) = {-0.036758, 0.744712, 0, 1.0};
Point(41) = {-0.035274, 0.743814, 0, 1.0};
Point(42) = {-0.033042, 0.742855, 0, 1.0};
Point(43) = {-0.030086, 0.741869, 0, 1.0};
Point(44) = {-0.026425, 0.740884, 0, 1.0};
Point(45) = {-0.022080, 0.739921, 0, 1.0};
Point(46) = {-0.017067, 0.738985, 0, 1.0};
Point(47) = {-0.011430, 0.738063, 0, 1.0};
Point(48) = {-0.005228, 0.737148, 0, 1.0};
Point(49) = {0.001467, 0.736238, 0, 1.0};
Point(50) = {0.008579, 0.735335, 0, 1.0};
Point(51) = {0.016026, 0.734443, 0, 1.0};
Point(52) = {0.023728, 0.733567, 0, 1.0};
Point(53) = {0.031596, 0.732707, 0, 1.0};
Point(54) = {0.039542, 0.731868, 0, 1.0};
Point(55) = {0.047472, 0.731052, 0, 1.0};
Point(56) = {0.055296, 0.730265, 0, 1.0};
Point(57) = {0.062924, 0.729513, 0, 1.0};
Point(58) = {0.070271, 0.728798, 0, 1.0};
Point(59) = {0.077250, 0.728118, 0, 1.0};
Point(60) = {0.083773, 0.727477, 0, 1.0};
Point(61) = {0.089759, 0.726876, 0, 1.0};
Point(62) = {0.095128, 0.726324, 0, 1.0};
Point(63) = {0.099809, 0.725827, 0, 1.0};
Point(64) = {0.103738, 0.725397, 0, 1.0};
Point(65) = {0.106861, 0.725045, 0, 1.0};
Point(66) = {0.109135, 0.724787, 0, 1.0};
Point(67) = {0.110531, 0.724627, 0, 1.0};
Point(68) = {-0.111006, -0.724571, 0, 1.0};
Point(69) = {-0.110531, -0.724660, 0, 1.0};
Point(70) = {-0.109125, -0.724937, 0, 1.0};
Point(71) = {-0.106828, -0.725425, 0, 1.0};
Point(72) = {-0.103688, -0.726130, 0, 1.0};
Point(73) = {-0.099763, -0.727054, 0, 1.0};
Point(74) = {-0.095119, -0.728192, 0, 1.0};
Point(75) = {-0.089827, -0.729535, 0, 1.0};
Point(76) = {-0.083977, -0.731071, 0, 1.0};
Point(77) = {-0.077668, -0.732768, 0, 1.0};
Point(78) = {-0.070994, -0.734580, 0, 1.0};
Point(79) = {-0.064039, -0.736456, 0, 1.0};
Point(80) = {-0.056882, -0.738346, 0, 1.0};
Point(81) = {-0.049601, -0.740199, 0, 1.0};
Point(82) = {-0.042263, -0.741966, 0, 1.0};
Point(83) = {-0.034926, -0.743607, 0, 1.0};
Point(84) = {-0.027651, -0.745090, 0, 1.0};
Point(85) = {-0.020493, -0.746394, 0, 1.0};
Point(86) = {-0.013510, -0.747502, 0, 1.0};
Point(87) = {-0.006757, -0.748408, 0, 1.0};
Point(88) = {-0.000295, -0.749111, 0, 1.0};
Point(89) = {0.005813, -0.749612, 0, 1.0};
Point(90) = {0.011509, -0.749907, 0, 1.0};
Point(91) = {0.016743, -0.750000, 0, 1.0};
Point(92) = {0.021468, -0.749898, 0, 1.0};
Point(93) = {0.025643, -0.749614, 0, 1.0};
Point(94) = {0.029229, -0.749160, 0, 1.0};
Point(95) = {0.032201, -0.748558, 0, 1.0};
Point(96) = {0.034535, -0.747834, 0, 1.0};
Point(97) = {0.036218, -0.747029, 0, 1.0};
Point(98) = {0.037092, -0.746358, 0, 1.0};
Point(99) = {0.037296, -0.746116, 0, 1.0};
Point(100) = {0.037435, -0.745886, 0, 1.0};
Point(101) = {0.037490, -0.745743, 0, 1.0};
Point(102) = {0.037504, -0.745613, 0, 1.0};
Point(103) = {0.037468, -0.745483, 0, 1.0};
Point(104) = {0.037388, -0.745342, 0, 1.0};
Point(105) = {0.037202, -0.745114, 0, 1.0};
Point(106) = {0.036947, -0.744869, 0, 1.0};
Point(107) = {0.036758, -0.744712, 0, 1.0};
Point(108) = {0.035274, -0.743814, 0, 1.0};
Point(109) = {0.033042, -0.742855, 0, 1.0};
Point(110) = {0.030086, -0.741869, 0, 1.0};
Point(111) = {0.026425, -0.740884, 0, 1.0};
Point(112) = {0.022080, -0.739921, 0, 1.0};
Point(113) = {0.017067, -0.738985, 0, 1.0};
Point(114) = {0.011430, -0.738063, 0, 1.0};
Point(115) = {0.005228, -0.737148, 0, 1.0};
Point(116) = {-0.001467, -0.736238, 0, 1.0};
Point(117) = {-0.008579, -0.735335, 0, 1.0};
Point(118) = {-0.016026, -0.734443, 0, 1.0};
Point(119) = {-0.023728, -0.733567, 0, 1.0};
Point(120) = {-0.031596, -0.732707, 0, 1.0};
Point(121) = {-0.039542, -0.731868, 0, 1.0};
Point(122) = {-0.047472, -0.731052, 0, 1.0};
Point(123) = {-0.055296, -0.730265, 0, 1.0};
Point(124) = {-0.062924, -0.729513, 0, 1.0};
Point(125) = {-0.070271, -0.728798, 0, 1.0};
Point(126) = {-0.077250, -0.728118, 0, 1.0};
Point(127) = {-0.083773, -0.727477, 0, 1.0};
Point(128) = {-0.089759, -0.726876, 0, 1.0};
Point(129) = {-0.095128, -0.726324, 0, 1.0};
Point(130) = {-0.099809, -0.725827, 0, 1.0};
Point(131) = {-0.103738, -0.725397, 0, 1.0};
Point(132) = {-0.106861, -0.725045, 0, 1.0};
Point(133) = {-0.109135, -0.724787, 0, 1.0};
Point(134) = {-0.110531, -0.724627, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html