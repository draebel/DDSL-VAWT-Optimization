SetFactory("OpenCASCADE");

Point(1) = {0.074004, 0.733047, 0, 1.0};
Point(2) = {0.073687, 0.733106, 0, 1.0};
Point(3) = {0.072750, 0.733292, 0, 1.0};
Point(4) = {0.071218, 0.733616, 0, 1.0};
Point(5) = {0.069125, 0.734087, 0, 1.0};
Point(6) = {0.066509, 0.734703, 0, 1.0};
Point(7) = {0.063412, 0.735461, 0, 1.0};
Point(8) = {0.059885, 0.736357, 0, 1.0};
Point(9) = {0.055985, 0.737380, 0, 1.0};
Point(10) = {0.051779, 0.738512, 0, 1.0};
Point(11) = {0.047329, 0.739720, 0, 1.0};
Point(12) = {0.042692, 0.740971, 0, 1.0};
Point(13) = {0.037922, 0.742231, 0, 1.0};
Point(14) = {0.033068, 0.743466, 0, 1.0};
Point(15) = {0.028175, 0.744644, 0, 1.0};
Point(16) = {0.023284, 0.745738, 0, 1.0};
Point(17) = {0.018434, 0.746727, 0, 1.0};
Point(18) = {0.013662, 0.747596, 0, 1.0};
Point(19) = {0.009006, 0.748334, 0, 1.0};
Point(20) = {0.004504, 0.748938, 0, 1.0};
Point(21) = {0.000196, 0.749407, 0, 1.0};
Point(22) = {-0.003875, 0.749741, 0, 1.0};
Point(23) = {-0.007673, 0.749938, 0, 1.0};
Point(24) = {-0.011162, 0.750000, 0, 1.0};
Point(25) = {-0.014312, 0.749932, 0, 1.0};
Point(26) = {-0.017095, 0.749742, 0, 1.0};
Point(27) = {-0.019486, 0.749440, 0, 1.0};
Point(28) = {-0.021467, 0.749038, 0, 1.0};
Point(29) = {-0.023023, 0.748556, 0, 1.0};
Point(30) = {-0.024145, 0.748019, 0, 1.0};
Point(31) = {-0.024728, 0.747572, 0, 1.0};
Point(32) = {-0.024864, 0.747411, 0, 1.0};
Point(33) = {-0.024957, 0.747258, 0, 1.0};
Point(34) = {-0.024993, 0.747162, 0, 1.0};
Point(35) = {-0.025003, 0.747075, 0, 1.0};
Point(36) = {-0.024979, 0.746989, 0, 1.0};
Point(37) = {-0.024925, 0.746894, 0, 1.0};
Point(38) = {-0.024802, 0.746743, 0, 1.0};
Point(39) = {-0.024631, 0.746579, 0, 1.0};
Point(40) = {-0.024505, 0.746475, 0, 1.0};
Point(41) = {-0.023516, 0.745876, 0, 1.0};
Point(42) = {-0.022028, 0.745237, 0, 1.0};
Point(43) = {-0.020057, 0.744580, 0, 1.0};
Point(44) = {-0.017617, 0.743922, 0, 1.0};
Point(45) = {-0.014720, 0.743281, 0, 1.0};
Point(46) = {-0.011378, 0.742657, 0, 1.0};
Point(47) = {-0.007620, 0.742042, 0, 1.0};
Point(48) = {-0.003485, 0.741432, 0, 1.0};
Point(49) = {0.000978, 0.740825, 0, 1.0};
Point(50) = {0.005719, 0.740223, 0, 1.0};
Point(51) = {0.010684, 0.739629, 0, 1.0};
Point(52) = {0.015819, 0.739045, 0, 1.0};
Point(53) = {0.021064, 0.738471, 0, 1.0};
Point(54) = {0.026361, 0.737912, 0, 1.0};
Point(55) = {0.031648, 0.737368, 0, 1.0};
Point(56) = {0.036864, 0.736843, 0, 1.0};
Point(57) = {0.041949, 0.736342, 0, 1.0};
Point(58) = {0.046847, 0.735865, 0, 1.0};
Point(59) = {0.051500, 0.735412, 0, 1.0};
Point(60) = {0.055849, 0.734985, 0, 1.0};
Point(61) = {0.059839, 0.734584, 0, 1.0};
Point(62) = {0.063418, 0.734216, 0, 1.0};
Point(63) = {0.066539, 0.733885, 0, 1.0};
Point(64) = {0.069159, 0.733598, 0, 1.0};
Point(65) = {0.071240, 0.733364, 0, 1.0};
Point(66) = {0.072757, 0.733191, 0, 1.0};
Point(67) = {0.073687, 0.733085, 0, 1.0};
Point(68) = {-0.074004, -0.733047, 0, 1.0};
Point(69) = {-0.073687, -0.733106, 0, 1.0};
Point(70) = {-0.072750, -0.733292, 0, 1.0};
Point(71) = {-0.071218, -0.733616, 0, 1.0};
Point(72) = {-0.069125, -0.734087, 0, 1.0};
Point(73) = {-0.066509, -0.734703, 0, 1.0};
Point(74) = {-0.063412, -0.735461, 0, 1.0};
Point(75) = {-0.059885, -0.736357, 0, 1.0};
Point(76) = {-0.055985, -0.737380, 0, 1.0};
Point(77) = {-0.051779, -0.738512, 0, 1.0};
Point(78) = {-0.047329, -0.739720, 0, 1.0};
Point(79) = {-0.042692, -0.740971, 0, 1.0};
Point(80) = {-0.037922, -0.742231, 0, 1.0};
Point(81) = {-0.033068, -0.743466, 0, 1.0};
Point(82) = {-0.028175, -0.744644, 0, 1.0};
Point(83) = {-0.023284, -0.745738, 0, 1.0};
Point(84) = {-0.018434, -0.746727, 0, 1.0};
Point(85) = {-0.013662, -0.747596, 0, 1.0};
Point(86) = {-0.009006, -0.748334, 0, 1.0};
Point(87) = {-0.004504, -0.748938, 0, 1.0};
Point(88) = {-0.000196, -0.749407, 0, 1.0};
Point(89) = {0.003875, -0.749741, 0, 1.0};
Point(90) = {0.007673, -0.749938, 0, 1.0};
Point(91) = {0.011162, -0.750000, 0, 1.0};
Point(92) = {0.014312, -0.749932, 0, 1.0};
Point(93) = {0.017095, -0.749742, 0, 1.0};
Point(94) = {0.019486, -0.749440, 0, 1.0};
Point(95) = {0.021467, -0.749038, 0, 1.0};
Point(96) = {0.023023, -0.748556, 0, 1.0};
Point(97) = {0.024145, -0.748019, 0, 1.0};
Point(98) = {0.024728, -0.747572, 0, 1.0};
Point(99) = {0.024864, -0.747411, 0, 1.0};
Point(100) = {0.024957, -0.747258, 0, 1.0};
Point(101) = {0.024993, -0.747162, 0, 1.0};
Point(102) = {0.025003, -0.747075, 0, 1.0};
Point(103) = {0.024979, -0.746989, 0, 1.0};
Point(104) = {0.024925, -0.746894, 0, 1.0};
Point(105) = {0.024802, -0.746743, 0, 1.0};
Point(106) = {0.024631, -0.746579, 0, 1.0};
Point(107) = {0.024505, -0.746475, 0, 1.0};
Point(108) = {0.023516, -0.745876, 0, 1.0};
Point(109) = {0.022028, -0.745237, 0, 1.0};
Point(110) = {0.020057, -0.744580, 0, 1.0};
Point(111) = {0.017617, -0.743922, 0, 1.0};
Point(112) = {0.014720, -0.743281, 0, 1.0};
Point(113) = {0.011378, -0.742657, 0, 1.0};
Point(114) = {0.007620, -0.742042, 0, 1.0};
Point(115) = {0.003485, -0.741432, 0, 1.0};
Point(116) = {-0.000978, -0.740825, 0, 1.0};
Point(117) = {-0.005719, -0.740223, 0, 1.0};
Point(118) = {-0.010684, -0.739629, 0, 1.0};
Point(119) = {-0.015819, -0.739045, 0, 1.0};
Point(120) = {-0.021064, -0.738471, 0, 1.0};
Point(121) = {-0.026361, -0.737912, 0, 1.0};
Point(122) = {-0.031648, -0.737368, 0, 1.0};
Point(123) = {-0.036864, -0.736843, 0, 1.0};
Point(124) = {-0.041949, -0.736342, 0, 1.0};
Point(125) = {-0.046847, -0.735865, 0, 1.0};
Point(126) = {-0.051500, -0.735412, 0, 1.0};
Point(127) = {-0.055849, -0.734985, 0, 1.0};
Point(128) = {-0.059839, -0.734584, 0, 1.0};
Point(129) = {-0.063418, -0.734216, 0, 1.0};
Point(130) = {-0.066539, -0.733885, 0, 1.0};
Point(131) = {-0.069159, -0.733598, 0, 1.0};
Point(132) = {-0.071240, -0.733364, 0, 1.0};
Point(133) = {-0.072757, -0.733191, 0, 1.0};
Point(134) = {-0.073687, -0.733085, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html