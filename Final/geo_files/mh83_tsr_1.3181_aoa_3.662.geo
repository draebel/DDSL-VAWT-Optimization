SetFactory("OpenCASCADE");

Point(1) = {0.149592, 0.716940, 0, 1.0};
Point(2) = {0.148942, 0.717028, 0, 1.0};
Point(3) = {0.146995, 0.717318, 0, 1.0};
Point(4) = {0.143774, 0.717854, 0, 1.0};
Point(5) = {0.139338, 0.718677, 0, 1.0};
Point(6) = {0.133779, 0.719816, 0, 1.0};
Point(7) = {0.127208, 0.721281, 0, 1.0};
Point(8) = {0.119752, 0.723062, 0, 1.0};
Point(9) = {0.111548, 0.725130, 0, 1.0};
Point(10) = {0.102734, 0.727442, 0, 1.0};
Point(11) = {0.093448, 0.729937, 0, 1.0};
Point(12) = {0.083820, 0.732551, 0, 1.0};
Point(13) = {0.073977, 0.735208, 0, 1.0};
Point(14) = {0.064036, 0.737837, 0, 1.0};
Point(15) = {0.054108, 0.740362, 0, 1.0};
Point(16) = {0.044293, 0.742716, 0, 1.0};
Point(17) = {0.034686, 0.744831, 0, 1.0};
Point(18) = {0.025371, 0.746649, 0, 1.0};
Point(19) = {0.016429, 0.748119, 0, 1.0};
Point(20) = {0.007928, 0.749194, 0, 1.0};
Point(21) = {-0.000065, 0.749836, 0, 1.0};
Point(22) = {-0.007494, 0.750000, 0, 1.0};
Point(23) = {-0.014350, 0.749634, 0, 1.0};
Point(24) = {-0.020664, 0.748754, 0, 1.0};
Point(25) = {-0.026431, 0.747421, 0, 1.0};
Point(26) = {-0.031638, 0.745699, 0, 1.0};
Point(27) = {-0.036259, 0.743667, 0, 1.0};
Point(28) = {-0.040259, 0.741404, 0, 1.0};
Point(29) = {-0.043603, 0.738982, 0, 1.0};
Point(30) = {-0.046273, 0.736482, 0, 1.0};
Point(31) = {-0.048246, 0.733999, 0, 1.0};
Point(32) = {-0.049503, 0.731648, 0, 1.0};
Point(33) = {-0.050007, 0.729571, 0, 1.0};
Point(34) = {-0.049602, 0.728044, 0, 1.0};
Point(35) = {-0.047977, 0.726955, 0, 1.0};
Point(36) = {-0.045076, 0.725988, 0, 1.0};
Point(37) = {-0.041082, 0.725158, 0, 1.0};
Point(38) = {-0.036042, 0.724517, 0, 1.0};
Point(39) = {-0.029959, 0.724055, 0, 1.0};
Point(40) = {-0.022888, 0.723725, 0, 1.0};
Point(41) = {-0.014929, 0.723515, 0, 1.0};
Point(42) = {-0.006136, 0.723432, 0, 1.0};
Point(43) = {0.003427, 0.723416, 0, 1.0};
Point(44) = {0.013631, 0.723412, 0, 1.0};
Point(45) = {0.024341, 0.723393, 0, 1.0};
Point(46) = {0.035416, 0.723335, 0, 1.0};
Point(47) = {0.046713, 0.723222, 0, 1.0};
Point(48) = {0.058082, 0.723038, 0, 1.0};
Point(49) = {0.069376, 0.722777, 0, 1.0};
Point(50) = {0.080447, 0.722430, 0, 1.0};
Point(51) = {0.091149, 0.721993, 0, 1.0};
Point(52) = {0.101332, 0.721457, 0, 1.0};
Point(53) = {0.110837, 0.720833, 0, 1.0};
Point(54) = {0.119520, 0.720148, 0, 1.0};
Point(55) = {0.127255, 0.719443, 0, 1.0};
Point(56) = {0.133942, 0.718763, 0, 1.0};
Point(57) = {0.139504, 0.718150, 0, 1.0};
Point(58) = {0.143883, 0.717639, 0, 1.0};
Point(59) = {0.147042, 0.717257, 0, 1.0};
Point(60) = {0.148952, 0.717020, 0, 1.0};
Point(61) = {-0.149592, -0.716940, 0, 1.0};
Point(62) = {-0.148942, -0.717028, 0, 1.0};
Point(63) = {-0.146995, -0.717318, 0, 1.0};
Point(64) = {-0.143774, -0.717854, 0, 1.0};
Point(65) = {-0.139338, -0.718677, 0, 1.0};
Point(66) = {-0.133779, -0.719816, 0, 1.0};
Point(67) = {-0.127208, -0.721281, 0, 1.0};
Point(68) = {-0.119752, -0.723062, 0, 1.0};
Point(69) = {-0.111548, -0.725130, 0, 1.0};
Point(70) = {-0.102734, -0.727442, 0, 1.0};
Point(71) = {-0.093448, -0.729937, 0, 1.0};
Point(72) = {-0.083820, -0.732551, 0, 1.0};
Point(73) = {-0.073977, -0.735208, 0, 1.0};
Point(74) = {-0.064036, -0.737837, 0, 1.0};
Point(75) = {-0.054108, -0.740362, 0, 1.0};
Point(76) = {-0.044293, -0.742716, 0, 1.0};
Point(77) = {-0.034686, -0.744831, 0, 1.0};
Point(78) = {-0.025371, -0.746649, 0, 1.0};
Point(79) = {-0.016429, -0.748119, 0, 1.0};
Point(80) = {-0.007928, -0.749194, 0, 1.0};
Point(81) = {0.000065, -0.749836, 0, 1.0};
Point(82) = {0.007494, -0.750000, 0, 1.0};
Point(83) = {0.014350, -0.749634, 0, 1.0};
Point(84) = {0.020664, -0.748754, 0, 1.0};
Point(85) = {0.026431, -0.747421, 0, 1.0};
Point(86) = {0.031638, -0.745699, 0, 1.0};
Point(87) = {0.036259, -0.743667, 0, 1.0};
Point(88) = {0.040259, -0.741404, 0, 1.0};
Point(89) = {0.043603, -0.738982, 0, 1.0};
Point(90) = {0.046273, -0.736482, 0, 1.0};
Point(91) = {0.048246, -0.733999, 0, 1.0};
Point(92) = {0.049503, -0.731648, 0, 1.0};
Point(93) = {0.050007, -0.729571, 0, 1.0};
Point(94) = {0.049602, -0.728044, 0, 1.0};
Point(95) = {0.047977, -0.726955, 0, 1.0};
Point(96) = {0.045076, -0.725988, 0, 1.0};
Point(97) = {0.041082, -0.725158, 0, 1.0};
Point(98) = {0.036042, -0.724517, 0, 1.0};
Point(99) = {0.029959, -0.724055, 0, 1.0};
Point(100) = {0.022888, -0.723725, 0, 1.0};
Point(101) = {0.014929, -0.723515, 0, 1.0};
Point(102) = {0.006136, -0.723432, 0, 1.0};
Point(103) = {-0.003427, -0.723416, 0, 1.0};
Point(104) = {-0.013631, -0.723412, 0, 1.0};
Point(105) = {-0.024341, -0.723393, 0, 1.0};
Point(106) = {-0.035416, -0.723335, 0, 1.0};
Point(107) = {-0.046713, -0.723222, 0, 1.0};
Point(108) = {-0.058082, -0.723038, 0, 1.0};
Point(109) = {-0.069376, -0.722777, 0, 1.0};
Point(110) = {-0.080447, -0.722430, 0, 1.0};
Point(111) = {-0.091149, -0.721993, 0, 1.0};
Point(112) = {-0.101332, -0.721457, 0, 1.0};
Point(113) = {-0.110837, -0.720833, 0, 1.0};
Point(114) = {-0.119520, -0.720148, 0, 1.0};
Point(115) = {-0.127255, -0.719443, 0, 1.0};
Point(116) = {-0.133942, -0.718763, 0, 1.0};
Point(117) = {-0.139504, -0.718150, 0, 1.0};
Point(118) = {-0.143883, -0.717639, 0, 1.0};
Point(119) = {-0.147042, -0.717257, 0, 1.0};
Point(120) = {-0.148952, -0.717020, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html