SetFactory("OpenCASCADE");

Point(1) = {0.074796, 0.733470, 0, 1.0};
Point(2) = {0.074471, 0.733514, 0, 1.0};
Point(3) = {0.073497, 0.733659, 0, 1.0};
Point(4) = {0.071887, 0.733927, 0, 1.0};
Point(5) = {0.069669, 0.734338, 0, 1.0};
Point(6) = {0.066890, 0.734908, 0, 1.0};
Point(7) = {0.063604, 0.735640, 0, 1.0};
Point(8) = {0.059876, 0.736531, 0, 1.0};
Point(9) = {0.055774, 0.737565, 0, 1.0};
Point(10) = {0.051367, 0.738721, 0, 1.0};
Point(11) = {0.046724, 0.739969, 0, 1.0};
Point(12) = {0.041910, 0.741275, 0, 1.0};
Point(13) = {0.036989, 0.742604, 0, 1.0};
Point(14) = {0.032018, 0.743918, 0, 1.0};
Point(15) = {0.027054, 0.745181, 0, 1.0};
Point(16) = {0.022147, 0.746358, 0, 1.0};
Point(17) = {0.017343, 0.747415, 0, 1.0};
Point(18) = {0.012686, 0.748325, 0, 1.0};
Point(19) = {0.008214, 0.749059, 0, 1.0};
Point(20) = {0.003964, 0.749597, 0, 1.0};
Point(21) = {-0.000033, 0.749918, 0, 1.0};
Point(22) = {-0.003747, 0.750000, 0, 1.0};
Point(23) = {-0.007175, 0.749817, 0, 1.0};
Point(24) = {-0.010332, 0.749377, 0, 1.0};
Point(25) = {-0.013216, 0.748711, 0, 1.0};
Point(26) = {-0.015819, 0.747849, 0, 1.0};
Point(27) = {-0.018130, 0.746833, 0, 1.0};
Point(28) = {-0.020130, 0.745702, 0, 1.0};
Point(29) = {-0.021802, 0.744491, 0, 1.0};
Point(30) = {-0.023136, 0.743241, 0, 1.0};
Point(31) = {-0.024123, 0.742000, 0, 1.0};
Point(32) = {-0.024752, 0.740824, 0, 1.0};
Point(33) = {-0.025003, 0.739785, 0, 1.0};
Point(34) = {-0.024801, 0.739022, 0, 1.0};
Point(35) = {-0.023989, 0.738477, 0, 1.0};
Point(36) = {-0.022538, 0.737994, 0, 1.0};
Point(37) = {-0.020541, 0.737579, 0, 1.0};
Point(38) = {-0.018021, 0.737258, 0, 1.0};
Point(39) = {-0.014979, 0.737028, 0, 1.0};
Point(40) = {-0.011444, 0.736862, 0, 1.0};
Point(41) = {-0.007465, 0.736758, 0, 1.0};
Point(42) = {-0.003068, 0.736716, 0, 1.0};
Point(43) = {0.001713, 0.736708, 0, 1.0};
Point(44) = {0.006815, 0.736706, 0, 1.0};
Point(45) = {0.012170, 0.736697, 0, 1.0};
Point(46) = {0.017708, 0.736668, 0, 1.0};
Point(47) = {0.023356, 0.736611, 0, 1.0};
Point(48) = {0.029041, 0.736519, 0, 1.0};
Point(49) = {0.034688, 0.736388, 0, 1.0};
Point(50) = {0.040224, 0.736215, 0, 1.0};
Point(51) = {0.045575, 0.735996, 0, 1.0};
Point(52) = {0.050666, 0.735729, 0, 1.0};
Point(53) = {0.055419, 0.735416, 0, 1.0};
Point(54) = {0.059760, 0.735074, 0, 1.0};
Point(55) = {0.063627, 0.734722, 0, 1.0};
Point(56) = {0.066971, 0.734381, 0, 1.0};
Point(57) = {0.069752, 0.734075, 0, 1.0};
Point(58) = {0.071942, 0.733819, 0, 1.0};
Point(59) = {0.073521, 0.733628, 0, 1.0};
Point(60) = {0.074476, 0.733510, 0, 1.0};
Point(61) = {-0.074796, -0.733470, 0, 1.0};
Point(62) = {-0.074471, -0.733514, 0, 1.0};
Point(63) = {-0.073497, -0.733659, 0, 1.0};
Point(64) = {-0.071887, -0.733927, 0, 1.0};
Point(65) = {-0.069669, -0.734338, 0, 1.0};
Point(66) = {-0.066890, -0.734908, 0, 1.0};
Point(67) = {-0.063604, -0.735640, 0, 1.0};
Point(68) = {-0.059876, -0.736531, 0, 1.0};
Point(69) = {-0.055774, -0.737565, 0, 1.0};
Point(70) = {-0.051367, -0.738721, 0, 1.0};
Point(71) = {-0.046724, -0.739969, 0, 1.0};
Point(72) = {-0.041910, -0.741275, 0, 1.0};
Point(73) = {-0.036989, -0.742604, 0, 1.0};
Point(74) = {-0.032018, -0.743918, 0, 1.0};
Point(75) = {-0.027054, -0.745181, 0, 1.0};
Point(76) = {-0.022147, -0.746358, 0, 1.0};
Point(77) = {-0.017343, -0.747415, 0, 1.0};
Point(78) = {-0.012686, -0.748325, 0, 1.0};
Point(79) = {-0.008214, -0.749059, 0, 1.0};
Point(80) = {-0.003964, -0.749597, 0, 1.0};
Point(81) = {0.000033, -0.749918, 0, 1.0};
Point(82) = {0.003747, -0.750000, 0, 1.0};
Point(83) = {0.007175, -0.749817, 0, 1.0};
Point(84) = {0.010332, -0.749377, 0, 1.0};
Point(85) = {0.013216, -0.748711, 0, 1.0};
Point(86) = {0.015819, -0.747849, 0, 1.0};
Point(87) = {0.018130, -0.746833, 0, 1.0};
Point(88) = {0.020130, -0.745702, 0, 1.0};
Point(89) = {0.021802, -0.744491, 0, 1.0};
Point(90) = {0.023136, -0.743241, 0, 1.0};
Point(91) = {0.024123, -0.742000, 0, 1.0};
Point(92) = {0.024752, -0.740824, 0, 1.0};
Point(93) = {0.025003, -0.739785, 0, 1.0};
Point(94) = {0.024801, -0.739022, 0, 1.0};
Point(95) = {0.023989, -0.738477, 0, 1.0};
Point(96) = {0.022538, -0.737994, 0, 1.0};
Point(97) = {0.020541, -0.737579, 0, 1.0};
Point(98) = {0.018021, -0.737258, 0, 1.0};
Point(99) = {0.014979, -0.737028, 0, 1.0};
Point(100) = {0.011444, -0.736862, 0, 1.0};
Point(101) = {0.007465, -0.736758, 0, 1.0};
Point(102) = {0.003068, -0.736716, 0, 1.0};
Point(103) = {-0.001713, -0.736708, 0, 1.0};
Point(104) = {-0.006815, -0.736706, 0, 1.0};
Point(105) = {-0.012170, -0.736697, 0, 1.0};
Point(106) = {-0.017708, -0.736668, 0, 1.0};
Point(107) = {-0.023356, -0.736611, 0, 1.0};
Point(108) = {-0.029041, -0.736519, 0, 1.0};
Point(109) = {-0.034688, -0.736388, 0, 1.0};
Point(110) = {-0.040224, -0.736215, 0, 1.0};
Point(111) = {-0.045575, -0.735996, 0, 1.0};
Point(112) = {-0.050666, -0.735729, 0, 1.0};
Point(113) = {-0.055419, -0.735416, 0, 1.0};
Point(114) = {-0.059760, -0.735074, 0, 1.0};
Point(115) = {-0.063627, -0.734722, 0, 1.0};
Point(116) = {-0.066971, -0.734381, 0, 1.0};
Point(117) = {-0.069752, -0.734075, 0, 1.0};
Point(118) = {-0.071942, -0.733819, 0, 1.0};
Point(119) = {-0.073521, -0.733628, 0, 1.0};
Point(120) = {-0.074476, -0.733510, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html