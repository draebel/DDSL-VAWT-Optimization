SetFactory("OpenCASCADE");

Point(1) = {0.112194, 0.725205, 0, 1.0};
Point(2) = {0.111706, 0.725271, 0, 1.0};
Point(3) = {0.110246, 0.725489, 0, 1.0};
Point(4) = {0.107830, 0.725890, 0, 1.0};
Point(5) = {0.104504, 0.726508, 0, 1.0};
Point(6) = {0.100334, 0.727362, 0, 1.0};
Point(7) = {0.095406, 0.728460, 0, 1.0};
Point(8) = {0.089814, 0.729796, 0, 1.0};
Point(9) = {0.083661, 0.731348, 0, 1.0};
Point(10) = {0.077051, 0.733081, 0, 1.0};
Point(11) = {0.070086, 0.734953, 0, 1.0};
Point(12) = {0.062865, 0.736913, 0, 1.0};
Point(13) = {0.055483, 0.738906, 0, 1.0};
Point(14) = {0.048027, 0.740878, 0, 1.0};
Point(15) = {0.040581, 0.742772, 0, 1.0};
Point(16) = {0.033220, 0.744537, 0, 1.0};
Point(17) = {0.026014, 0.746123, 0, 1.0};
Point(18) = {0.019029, 0.747487, 0, 1.0};
Point(19) = {0.012322, 0.748589, 0, 1.0};
Point(20) = {0.005946, 0.749395, 0, 1.0};
Point(21) = {-0.000049, 0.749877, 0, 1.0};
Point(22) = {-0.005620, 0.750000, 0, 1.0};
Point(23) = {-0.010762, 0.749725, 0, 1.0};
Point(24) = {-0.015498, 0.749066, 0, 1.0};
Point(25) = {-0.019823, 0.748066, 0, 1.0};
Point(26) = {-0.023728, 0.746774, 0, 1.0};
Point(27) = {-0.027195, 0.745250, 0, 1.0};
Point(28) = {-0.030194, 0.743553, 0, 1.0};
Point(29) = {-0.032703, 0.741737, 0, 1.0};
Point(30) = {-0.034704, 0.739861, 0, 1.0};
Point(31) = {-0.036185, 0.738000, 0, 1.0};
Point(32) = {-0.037127, 0.736236, 0, 1.0};
Point(33) = {-0.037505, 0.734678, 0, 1.0};
Point(34) = {-0.037202, 0.733533, 0, 1.0};
Point(35) = {-0.035983, 0.732716, 0, 1.0};
Point(36) = {-0.033807, 0.731991, 0, 1.0};
Point(37) = {-0.030812, 0.731369, 0, 1.0};
Point(38) = {-0.027031, 0.730887, 0, 1.0};
Point(39) = {-0.022469, 0.730542, 0, 1.0};
Point(40) = {-0.017166, 0.730293, 0, 1.0};
Point(41) = {-0.011197, 0.730136, 0, 1.0};
Point(42) = {-0.004602, 0.730074, 0, 1.0};
Point(43) = {0.002570, 0.730062, 0, 1.0};
Point(44) = {0.010223, 0.730059, 0, 1.0};
Point(45) = {0.018256, 0.730045, 0, 1.0};
Point(46) = {0.026562, 0.730001, 0, 1.0};
Point(47) = {0.035034, 0.729916, 0, 1.0};
Point(48) = {0.043561, 0.729779, 0, 1.0};
Point(49) = {0.052032, 0.729583, 0, 1.0};
Point(50) = {0.060335, 0.729323, 0, 1.0};
Point(51) = {0.068362, 0.728994, 0, 1.0};
Point(52) = {0.075999, 0.728593, 0, 1.0};
Point(53) = {0.083128, 0.728125, 0, 1.0};
Point(54) = {0.089640, 0.727611, 0, 1.0};
Point(55) = {0.095441, 0.727082, 0, 1.0};
Point(56) = {0.100456, 0.726572, 0, 1.0};
Point(57) = {0.104628, 0.726112, 0, 1.0};
Point(58) = {0.107912, 0.725729, 0, 1.0};
Point(59) = {0.110281, 0.725443, 0, 1.0};
Point(60) = {0.111714, 0.725265, 0, 1.0};
Point(61) = {-0.112194, -0.725205, 0, 1.0};
Point(62) = {-0.111706, -0.725271, 0, 1.0};
Point(63) = {-0.110246, -0.725489, 0, 1.0};
Point(64) = {-0.107830, -0.725890, 0, 1.0};
Point(65) = {-0.104504, -0.726508, 0, 1.0};
Point(66) = {-0.100334, -0.727362, 0, 1.0};
Point(67) = {-0.095406, -0.728460, 0, 1.0};
Point(68) = {-0.089814, -0.729796, 0, 1.0};
Point(69) = {-0.083661, -0.731348, 0, 1.0};
Point(70) = {-0.077051, -0.733081, 0, 1.0};
Point(71) = {-0.070086, -0.734953, 0, 1.0};
Point(72) = {-0.062865, -0.736913, 0, 1.0};
Point(73) = {-0.055483, -0.738906, 0, 1.0};
Point(74) = {-0.048027, -0.740878, 0, 1.0};
Point(75) = {-0.040581, -0.742772, 0, 1.0};
Point(76) = {-0.033220, -0.744537, 0, 1.0};
Point(77) = {-0.026014, -0.746123, 0, 1.0};
Point(78) = {-0.019029, -0.747487, 0, 1.0};
Point(79) = {-0.012322, -0.748589, 0, 1.0};
Point(80) = {-0.005946, -0.749395, 0, 1.0};
Point(81) = {0.000049, -0.749877, 0, 1.0};
Point(82) = {0.005620, -0.750000, 0, 1.0};
Point(83) = {0.010762, -0.749725, 0, 1.0};
Point(84) = {0.015498, -0.749066, 0, 1.0};
Point(85) = {0.019823, -0.748066, 0, 1.0};
Point(86) = {0.023728, -0.746774, 0, 1.0};
Point(87) = {0.027195, -0.745250, 0, 1.0};
Point(88) = {0.030194, -0.743553, 0, 1.0};
Point(89) = {0.032703, -0.741737, 0, 1.0};
Point(90) = {0.034704, -0.739861, 0, 1.0};
Point(91) = {0.036185, -0.738000, 0, 1.0};
Point(92) = {0.037127, -0.736236, 0, 1.0};
Point(93) = {0.037505, -0.734678, 0, 1.0};
Point(94) = {0.037202, -0.733533, 0, 1.0};
Point(95) = {0.035983, -0.732716, 0, 1.0};
Point(96) = {0.033807, -0.731991, 0, 1.0};
Point(97) = {0.030812, -0.731369, 0, 1.0};
Point(98) = {0.027031, -0.730887, 0, 1.0};
Point(99) = {0.022469, -0.730542, 0, 1.0};
Point(100) = {0.017166, -0.730293, 0, 1.0};
Point(101) = {0.011197, -0.730136, 0, 1.0};
Point(102) = {0.004602, -0.730074, 0, 1.0};
Point(103) = {-0.002570, -0.730062, 0, 1.0};
Point(104) = {-0.010223, -0.730059, 0, 1.0};
Point(105) = {-0.018256, -0.730045, 0, 1.0};
Point(106) = {-0.026562, -0.730001, 0, 1.0};
Point(107) = {-0.035034, -0.729916, 0, 1.0};
Point(108) = {-0.043561, -0.729779, 0, 1.0};
Point(109) = {-0.052032, -0.729583, 0, 1.0};
Point(110) = {-0.060335, -0.729323, 0, 1.0};
Point(111) = {-0.068362, -0.728994, 0, 1.0};
Point(112) = {-0.075999, -0.728593, 0, 1.0};
Point(113) = {-0.083128, -0.728125, 0, 1.0};
Point(114) = {-0.089640, -0.727611, 0, 1.0};
Point(115) = {-0.095441, -0.727082, 0, 1.0};
Point(116) = {-0.100456, -0.726572, 0, 1.0};
Point(117) = {-0.104628, -0.726112, 0, 1.0};
Point(118) = {-0.107912, -0.725729, 0, 1.0};
Point(119) = {-0.110281, -0.725443, 0, 1.0};
Point(120) = {-0.111714, -0.725265, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html