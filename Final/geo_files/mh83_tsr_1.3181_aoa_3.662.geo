SetFactory("OpenCASCADE");

Point(1) = {0.112277, 0.725204, 0, 1.0};
Point(2) = {0.111790, 0.725271, 0, 1.0};
Point(3) = {0.110329, 0.725488, 0, 1.0};
Point(4) = {0.107914, 0.725890, 0, 1.0};
Point(5) = {0.104587, 0.726507, 0, 1.0};
Point(6) = {0.100418, 0.727361, 0, 1.0};
Point(7) = {0.095489, 0.728460, 0, 1.0};
Point(8) = {0.089897, 0.729796, 0, 1.0};
Point(9) = {0.083744, 0.731348, 0, 1.0};
Point(10) = {0.077134, 0.733081, 0, 1.0};
Point(11) = {0.070169, 0.734953, 0, 1.0};
Point(12) = {0.062948, 0.736913, 0, 1.0};
Point(13) = {0.055566, 0.738906, 0, 1.0};
Point(14) = {0.048110, 0.740877, 0, 1.0};
Point(15) = {0.040663, 0.742772, 0, 1.0};
Point(16) = {0.033302, 0.744537, 0, 1.0};
Point(17) = {0.026097, 0.746123, 0, 1.0};
Point(18) = {0.019111, 0.747487, 0, 1.0};
Point(19) = {0.012404, 0.748589, 0, 1.0};
Point(20) = {0.006028, 0.749395, 0, 1.0};
Point(21) = {0.000033, 0.749877, 0, 1.0};
Point(22) = {-0.005538, 0.750000, 0, 1.0};
Point(23) = {-0.010680, 0.749725, 0, 1.0};
Point(24) = {-0.015416, 0.749066, 0, 1.0};
Point(25) = {-0.019741, 0.748066, 0, 1.0};
Point(26) = {-0.023647, 0.746774, 0, 1.0};
Point(27) = {-0.027113, 0.745250, 0, 1.0};
Point(28) = {-0.030113, 0.743553, 0, 1.0};
Point(29) = {-0.032621, 0.741737, 0, 1.0};
Point(30) = {-0.034623, 0.739861, 0, 1.0};
Point(31) = {-0.036103, 0.737999, 0, 1.0};
Point(32) = {-0.037046, 0.736236, 0, 1.0};
Point(33) = {-0.037423, 0.734678, 0, 1.0};
Point(34) = {-0.037120, 0.733533, 0, 1.0};
Point(35) = {-0.035901, 0.732716, 0, 1.0};
Point(36) = {-0.033725, 0.731990, 0, 1.0};
Point(37) = {-0.030730, 0.731369, 0, 1.0};
Point(38) = {-0.026950, 0.730887, 0, 1.0};
Point(39) = {-0.022387, 0.730541, 0, 1.0};
Point(40) = {-0.017084, 0.730293, 0, 1.0};
Point(41) = {-0.011115, 0.730136, 0, 1.0};
Point(42) = {-0.004520, 0.730074, 0, 1.0};
Point(43) = {0.002652, 0.730062, 0, 1.0};
Point(44) = {0.010305, 0.730059, 0, 1.0};
Point(45) = {0.018338, 0.730045, 0, 1.0};
Point(46) = {0.026645, 0.730001, 0, 1.0};
Point(47) = {0.035117, 0.729916, 0, 1.0};
Point(48) = {0.043644, 0.729778, 0, 1.0};
Point(49) = {0.052115, 0.729582, 0, 1.0};
Point(50) = {0.060418, 0.729322, 0, 1.0};
Point(51) = {0.068445, 0.728994, 0, 1.0};
Point(52) = {0.076082, 0.728593, 0, 1.0};
Point(53) = {0.083211, 0.728124, 0, 1.0};
Point(54) = {0.089723, 0.727610, 0, 1.0};
Point(55) = {0.095524, 0.727082, 0, 1.0};
Point(56) = {0.100540, 0.726572, 0, 1.0};
Point(57) = {0.104711, 0.726112, 0, 1.0};
Point(58) = {0.107996, 0.725729, 0, 1.0};
Point(59) = {0.110365, 0.725442, 0, 1.0};
Point(60) = {0.111797, 0.725265, 0, 1.0};
Point(61) = {-0.112277, -0.725204, 0, 1.0};
Point(62) = {-0.111790, -0.725271, 0, 1.0};
Point(63) = {-0.110329, -0.725488, 0, 1.0};
Point(64) = {-0.107914, -0.725890, 0, 1.0};
Point(65) = {-0.104587, -0.726507, 0, 1.0};
Point(66) = {-0.100418, -0.727361, 0, 1.0};
Point(67) = {-0.095489, -0.728460, 0, 1.0};
Point(68) = {-0.089897, -0.729796, 0, 1.0};
Point(69) = {-0.083744, -0.731348, 0, 1.0};
Point(70) = {-0.077134, -0.733081, 0, 1.0};
Point(71) = {-0.070169, -0.734953, 0, 1.0};
Point(72) = {-0.062948, -0.736913, 0, 1.0};
Point(73) = {-0.055566, -0.738906, 0, 1.0};
Point(74) = {-0.048110, -0.740877, 0, 1.0};
Point(75) = {-0.040663, -0.742772, 0, 1.0};
Point(76) = {-0.033302, -0.744537, 0, 1.0};
Point(77) = {-0.026097, -0.746123, 0, 1.0};
Point(78) = {-0.019111, -0.747487, 0, 1.0};
Point(79) = {-0.012404, -0.748589, 0, 1.0};
Point(80) = {-0.006028, -0.749395, 0, 1.0};
Point(81) = {-0.000033, -0.749877, 0, 1.0};
Point(82) = {0.005538, -0.750000, 0, 1.0};
Point(83) = {0.010680, -0.749725, 0, 1.0};
Point(84) = {0.015416, -0.749066, 0, 1.0};
Point(85) = {0.019741, -0.748066, 0, 1.0};
Point(86) = {0.023647, -0.746774, 0, 1.0};
Point(87) = {0.027113, -0.745250, 0, 1.0};
Point(88) = {0.030113, -0.743553, 0, 1.0};
Point(89) = {0.032621, -0.741737, 0, 1.0};
Point(90) = {0.034623, -0.739861, 0, 1.0};
Point(91) = {0.036103, -0.737999, 0, 1.0};
Point(92) = {0.037046, -0.736236, 0, 1.0};
Point(93) = {0.037423, -0.734678, 0, 1.0};
Point(94) = {0.037120, -0.733533, 0, 1.0};
Point(95) = {0.035901, -0.732716, 0, 1.0};
Point(96) = {0.033725, -0.731990, 0, 1.0};
Point(97) = {0.030730, -0.731369, 0, 1.0};
Point(98) = {0.026950, -0.730887, 0, 1.0};
Point(99) = {0.022387, -0.730541, 0, 1.0};
Point(100) = {0.017084, -0.730293, 0, 1.0};
Point(101) = {0.011115, -0.730136, 0, 1.0};
Point(102) = {0.004520, -0.730074, 0, 1.0};
Point(103) = {-0.002652, -0.730062, 0, 1.0};
Point(104) = {-0.010305, -0.730059, 0, 1.0};
Point(105) = {-0.018338, -0.730045, 0, 1.0};
Point(106) = {-0.026645, -0.730001, 0, 1.0};
Point(107) = {-0.035117, -0.729916, 0, 1.0};
Point(108) = {-0.043644, -0.729778, 0, 1.0};
Point(109) = {-0.052115, -0.729582, 0, 1.0};
Point(110) = {-0.060418, -0.729322, 0, 1.0};
Point(111) = {-0.068445, -0.728994, 0, 1.0};
Point(112) = {-0.076082, -0.728593, 0, 1.0};
Point(113) = {-0.083211, -0.728124, 0, 1.0};
Point(114) = {-0.089723, -0.727610, 0, 1.0};
Point(115) = {-0.095524, -0.727082, 0, 1.0};
Point(116) = {-0.100540, -0.726572, 0, 1.0};
Point(117) = {-0.104711, -0.726112, 0, 1.0};
Point(118) = {-0.107996, -0.725729, 0, 1.0};
Point(119) = {-0.110365, -0.725442, 0, 1.0};
Point(120) = {-0.111797, -0.725265, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html