SetFactory("OpenCASCADE");

Point(1) = {0.074958, 0.738377, 0, 1.0};
Point(2) = {0.074445, 0.738400, 0, 1.0};
Point(3) = {0.072930, 0.738492, 0, 1.0};
Point(4) = {0.070463, 0.738700, 0, 1.0};
Point(5) = {0.067111, 0.739049, 0, 1.0};
Point(6) = {0.062956, 0.739550, 0, 1.0};
Point(7) = {0.058081, 0.740190, 0, 1.0};
Point(8) = {0.052568, 0.740951, 0, 1.0};
Point(9) = {0.046499, 0.741806, 0, 1.0};
Point(10) = {0.039956, 0.742732, 0, 1.0};
Point(11) = {0.033021, 0.743699, 0, 1.0};
Point(12) = {0.025777, 0.744677, 0, 1.0};
Point(13) = {0.018308, 0.745639, 0, 1.0};
Point(14) = {0.010692, 0.746557, 0, 1.0};
Point(15) = {0.003009, 0.747407, 0, 1.0};
Point(16) = {-0.004659, 0.748167, 0, 1.0};
Point(17) = {-0.012238, 0.748816, 0, 1.0};
Point(18) = {-0.019651, 0.749336, 0, 1.0};
Point(19) = {-0.026829, 0.749713, 0, 1.0};
Point(20) = {-0.033703, 0.749938, 0, 1.0};
Point(21) = {-0.040212, 0.750000, 0, 1.0};
Point(22) = {-0.046295, 0.749898, 0, 1.0};
Point(23) = {-0.051900, 0.749634, 0, 1.0};
Point(24) = {-0.056981, 0.749210, 0, 1.0};
Point(25) = {-0.061495, 0.748639, 0, 1.0};
Point(26) = {-0.065402, 0.747937, 0, 1.0};
Point(27) = {-0.068672, 0.747120, 0, 1.0};
Point(28) = {-0.071286, 0.746207, 0, 1.0};
Point(29) = {-0.073221, 0.745238, 0, 1.0};
Point(30) = {-0.074461, 0.744254, 0, 1.0};
Point(31) = {-0.074959, 0.743372, 0, 1.0};
Point(32) = {-0.074581, 0.742498, 0, 1.0};
Point(33) = {-0.073373, 0.741505, 0, 1.0};
Point(34) = {-0.071447, 0.740479, 0, 1.0};
Point(35) = {-0.068830, 0.739466, 0, 1.0};
Point(36) = {-0.065539, 0.738508, 0, 1.0};
Point(37) = {-0.061595, 0.737625, 0, 1.0};
Point(38) = {-0.057026, 0.736841, 0, 1.0};
Point(39) = {-0.051864, 0.736163, 0, 1.0};
Point(40) = {-0.046156, 0.735597, 0, 1.0};
Point(41) = {-0.039950, 0.735150, 0, 1.0};
Point(42) = {-0.033302, 0.734822, 0, 1.0};
Point(43) = {-0.026271, 0.734605, 0, 1.0};
Point(44) = {-0.018933, 0.734496, 0, 1.0};
Point(45) = {-0.011359, 0.734484, 0, 1.0};
Point(46) = {-0.003630, 0.734558, 0, 1.0};
Point(47) = {0.004172, 0.734711, 0, 1.0};
Point(48) = {0.011958, 0.734929, 0, 1.0};
Point(49) = {0.019646, 0.735200, 0, 1.0};
Point(50) = {0.027149, 0.735511, 0, 1.0};
Point(51) = {0.034379, 0.735851, 0, 1.0};
Point(52) = {0.041253, 0.736204, 0, 1.0};
Point(53) = {0.047688, 0.736560, 0, 1.0};
Point(54) = {0.053603, 0.736905, 0, 1.0};
Point(55) = {0.058926, 0.737230, 0, 1.0};
Point(56) = {0.063579, 0.737521, 0, 1.0};
Point(57) = {0.067494, 0.737788, 0, 1.0};
Point(58) = {0.070633, 0.738037, 0, 1.0};
Point(59) = {0.072974, 0.738238, 0, 1.0};
Point(60) = {0.074450, 0.738349, 0, 1.0};
Point(61) = {-0.074958, -0.738377, 0, 1.0};
Point(62) = {-0.074445, -0.738400, 0, 1.0};
Point(63) = {-0.072930, -0.738492, 0, 1.0};
Point(64) = {-0.070463, -0.738700, 0, 1.0};
Point(65) = {-0.067111, -0.739049, 0, 1.0};
Point(66) = {-0.062956, -0.739550, 0, 1.0};
Point(67) = {-0.058081, -0.740190, 0, 1.0};
Point(68) = {-0.052568, -0.740951, 0, 1.0};
Point(69) = {-0.046499, -0.741806, 0, 1.0};
Point(70) = {-0.039956, -0.742732, 0, 1.0};
Point(71) = {-0.033021, -0.743699, 0, 1.0};
Point(72) = {-0.025777, -0.744677, 0, 1.0};
Point(73) = {-0.018308, -0.745639, 0, 1.0};
Point(74) = {-0.010692, -0.746557, 0, 1.0};
Point(75) = {-0.003009, -0.747407, 0, 1.0};
Point(76) = {0.004659, -0.748167, 0, 1.0};
Point(77) = {0.012238, -0.748816, 0, 1.0};
Point(78) = {0.019651, -0.749336, 0, 1.0};
Point(79) = {0.026829, -0.749713, 0, 1.0};
Point(80) = {0.033703, -0.749938, 0, 1.0};
Point(81) = {0.040212, -0.750000, 0, 1.0};
Point(82) = {0.046295, -0.749898, 0, 1.0};
Point(83) = {0.051900, -0.749634, 0, 1.0};
Point(84) = {0.056981, -0.749210, 0, 1.0};
Point(85) = {0.061495, -0.748639, 0, 1.0};
Point(86) = {0.065402, -0.747937, 0, 1.0};
Point(87) = {0.068672, -0.747120, 0, 1.0};
Point(88) = {0.071286, -0.746207, 0, 1.0};
Point(89) = {0.073221, -0.745238, 0, 1.0};
Point(90) = {0.074461, -0.744254, 0, 1.0};
Point(91) = {0.074959, -0.743372, 0, 1.0};
Point(92) = {0.074581, -0.742498, 0, 1.0};
Point(93) = {0.073373, -0.741505, 0, 1.0};
Point(94) = {0.071447, -0.740479, 0, 1.0};
Point(95) = {0.068830, -0.739466, 0, 1.0};
Point(96) = {0.065539, -0.738508, 0, 1.0};
Point(97) = {0.061595, -0.737625, 0, 1.0};
Point(98) = {0.057026, -0.736841, 0, 1.0};
Point(99) = {0.051864, -0.736163, 0, 1.0};
Point(100) = {0.046156, -0.735597, 0, 1.0};
Point(101) = {0.039950, -0.735150, 0, 1.0};
Point(102) = {0.033302, -0.734822, 0, 1.0};
Point(103) = {0.026271, -0.734605, 0, 1.0};
Point(104) = {0.018933, -0.734496, 0, 1.0};
Point(105) = {0.011359, -0.734484, 0, 1.0};
Point(106) = {0.003630, -0.734558, 0, 1.0};
Point(107) = {-0.004172, -0.734711, 0, 1.0};
Point(108) = {-0.011958, -0.734929, 0, 1.0};
Point(109) = {-0.019646, -0.735200, 0, 1.0};
Point(110) = {-0.027149, -0.735511, 0, 1.0};
Point(111) = {-0.034379, -0.735851, 0, 1.0};
Point(112) = {-0.041253, -0.736204, 0, 1.0};
Point(113) = {-0.047688, -0.736560, 0, 1.0};
Point(114) = {-0.053603, -0.736905, 0, 1.0};
Point(115) = {-0.058926, -0.737230, 0, 1.0};
Point(116) = {-0.063579, -0.737521, 0, 1.0};
Point(117) = {-0.067494, -0.737788, 0, 1.0};
Point(118) = {-0.070633, -0.738037, 0, 1.0};
Point(119) = {-0.072974, -0.738238, 0, 1.0};
Point(120) = {-0.074450, -0.738349, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html