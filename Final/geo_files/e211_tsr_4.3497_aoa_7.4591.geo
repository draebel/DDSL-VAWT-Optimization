SetFactory("OpenCASCADE");

Point(1) = {0.111464, 0.724207, 0, 1.0};
Point(2) = {0.110976, 0.724396, 0, 1.0};
Point(3) = {0.109595, 0.724980, 0, 1.0};
Point(4) = {0.107476, 0.725924, 0, 1.0};
Point(5) = {0.104715, 0.727113, 0, 1.0};
Point(6) = {0.101316, 0.728428, 0, 1.0};
Point(7) = {0.097249, 0.729831, 0, 1.0};
Point(8) = {0.092533, 0.731338, 0, 1.0};
Point(9) = {0.087236, 0.732939, 0, 1.0};
Point(10) = {0.081418, 0.734614, 0, 1.0};
Point(11) = {0.075155, 0.736337, 0, 1.0};
Point(12) = {0.068520, 0.738083, 0, 1.0};
Point(13) = {0.061589, 0.739824, 0, 1.0};
Point(14) = {0.054447, 0.741531, 0, 1.0};
Point(15) = {0.047174, 0.743168, 0, 1.0};
Point(16) = {0.039856, 0.744699, 0, 1.0};
Point(17) = {0.032563, 0.746082, 0, 1.0};
Point(18) = {0.025356, 0.747280, 0, 1.0};
Point(19) = {0.018292, 0.748274, 0, 1.0};
Point(20) = {0.011428, 0.749045, 0, 1.0};
Point(21) = {0.004813, 0.749585, 0, 1.0};
Point(22) = {-0.001504, 0.749898, 0, 1.0};
Point(23) = {-0.007469, 0.750000, 0, 1.0};
Point(24) = {-0.013020, 0.749904, 0, 1.0};
Point(25) = {-0.018100, 0.749618, 0, 1.0};
Point(26) = {-0.022661, 0.749156, 0, 1.0};
Point(27) = {-0.026658, 0.748533, 0, 1.0};
Point(28) = {-0.030056, 0.747765, 0, 1.0};
Point(29) = {-0.032828, 0.746875, 0, 1.0};
Point(30) = {-0.034953, 0.745900, 0, 1.0};
Point(31) = {-0.036411, 0.744883, 0, 1.0};
Point(32) = {-0.037183, 0.743909, 0, 1.0};
Point(33) = {-0.037089, 0.743008, 0, 1.0};
Point(34) = {-0.036096, 0.742064, 0, 1.0};
Point(35) = {-0.034335, 0.741054, 0, 1.0};
Point(36) = {-0.031816, 0.740029, 0, 1.0};
Point(37) = {-0.028556, 0.739004, 0, 1.0};
Point(38) = {-0.024581, 0.737992, 0, 1.0};
Point(39) = {-0.019928, 0.736999, 0, 1.0};
Point(40) = {-0.014643, 0.736030, 0, 1.0};
Point(41) = {-0.008782, 0.735091, 0, 1.0};
Point(42) = {-0.002411, 0.734185, 0, 1.0};
Point(43) = {0.004400, 0.733321, 0, 1.0};
Point(44) = {0.011571, 0.732507, 0, 1.0};
Point(45) = {0.019017, 0.731759, 0, 1.0};
Point(46) = {0.026650, 0.731108, 0, 1.0};
Point(47) = {0.034428, 0.730601, 0, 1.0};
Point(48) = {0.042346, 0.730222, 0, 1.0};
Point(49) = {0.050343, 0.729895, 0, 1.0};
Point(50) = {0.058306, 0.729568, 0, 1.0};
Point(51) = {0.066121, 0.729209, 0, 1.0};
Point(52) = {0.073669, 0.728795, 0, 1.0};
Point(53) = {0.080828, 0.728315, 0, 1.0};
Point(54) = {0.087478, 0.727768, 0, 1.0};
Point(55) = {0.093508, 0.727160, 0, 1.0};
Point(56) = {0.098806, 0.726513, 0, 1.0};
Point(57) = {0.103274, 0.725856, 0, 1.0};
Point(58) = {0.106824, 0.725233, 0, 1.0};
Point(59) = {0.109395, 0.724708, 0, 1.0};
Point(60) = {0.110946, 0.724341, 0, 1.0};
Point(61) = {-0.111464, -0.724207, 0, 1.0};
Point(62) = {-0.110976, -0.724396, 0, 1.0};
Point(63) = {-0.109595, -0.724980, 0, 1.0};
Point(64) = {-0.107476, -0.725924, 0, 1.0};
Point(65) = {-0.104715, -0.727113, 0, 1.0};
Point(66) = {-0.101316, -0.728428, 0, 1.0};
Point(67) = {-0.097249, -0.729831, 0, 1.0};
Point(68) = {-0.092533, -0.731338, 0, 1.0};
Point(69) = {-0.087236, -0.732939, 0, 1.0};
Point(70) = {-0.081418, -0.734614, 0, 1.0};
Point(71) = {-0.075155, -0.736337, 0, 1.0};
Point(72) = {-0.068520, -0.738083, 0, 1.0};
Point(73) = {-0.061589, -0.739824, 0, 1.0};
Point(74) = {-0.054447, -0.741531, 0, 1.0};
Point(75) = {-0.047174, -0.743168, 0, 1.0};
Point(76) = {-0.039856, -0.744699, 0, 1.0};
Point(77) = {-0.032563, -0.746082, 0, 1.0};
Point(78) = {-0.025356, -0.747280, 0, 1.0};
Point(79) = {-0.018292, -0.748274, 0, 1.0};
Point(80) = {-0.011428, -0.749045, 0, 1.0};
Point(81) = {-0.004813, -0.749585, 0, 1.0};
Point(82) = {0.001504, -0.749898, 0, 1.0};
Point(83) = {0.007469, -0.750000, 0, 1.0};
Point(84) = {0.013020, -0.749904, 0, 1.0};
Point(85) = {0.018100, -0.749618, 0, 1.0};
Point(86) = {0.022661, -0.749156, 0, 1.0};
Point(87) = {0.026658, -0.748533, 0, 1.0};
Point(88) = {0.030056, -0.747765, 0, 1.0};
Point(89) = {0.032828, -0.746875, 0, 1.0};
Point(90) = {0.034953, -0.745900, 0, 1.0};
Point(91) = {0.036411, -0.744883, 0, 1.0};
Point(92) = {0.037183, -0.743909, 0, 1.0};
Point(93) = {0.037089, -0.743008, 0, 1.0};
Point(94) = {0.036096, -0.742064, 0, 1.0};
Point(95) = {0.034335, -0.741054, 0, 1.0};
Point(96) = {0.031816, -0.740029, 0, 1.0};
Point(97) = {0.028556, -0.739004, 0, 1.0};
Point(98) = {0.024581, -0.737992, 0, 1.0};
Point(99) = {0.019928, -0.736999, 0, 1.0};
Point(100) = {0.014643, -0.736030, 0, 1.0};
Point(101) = {0.008782, -0.735091, 0, 1.0};
Point(102) = {0.002411, -0.734185, 0, 1.0};
Point(103) = {-0.004400, -0.733321, 0, 1.0};
Point(104) = {-0.011571, -0.732507, 0, 1.0};
Point(105) = {-0.019017, -0.731759, 0, 1.0};
Point(106) = {-0.026650, -0.731108, 0, 1.0};
Point(107) = {-0.034428, -0.730601, 0, 1.0};
Point(108) = {-0.042346, -0.730222, 0, 1.0};
Point(109) = {-0.050343, -0.729895, 0, 1.0};
Point(110) = {-0.058306, -0.729568, 0, 1.0};
Point(111) = {-0.066121, -0.729209, 0, 1.0};
Point(112) = {-0.073669, -0.728795, 0, 1.0};
Point(113) = {-0.080828, -0.728315, 0, 1.0};
Point(114) = {-0.087478, -0.727768, 0, 1.0};
Point(115) = {-0.093508, -0.727160, 0, 1.0};
Point(116) = {-0.098806, -0.726513, 0, 1.0};
Point(117) = {-0.103274, -0.725856, 0, 1.0};
Point(118) = {-0.106824, -0.725233, 0, 1.0};
Point(119) = {-0.109395, -0.724708, 0, 1.0};
Point(120) = {-0.110946, -0.724341, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html