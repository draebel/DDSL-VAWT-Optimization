SetFactory("OpenCASCADE");

Point(1) = {0.148998, 0.742997, 0, 1.0};
Point(2) = {0.148238, 0.742995, 0, 1.0};
Point(3) = {0.146041, 0.743055, 0, 1.0};
Point(4) = {0.142583, 0.743225, 0, 1.0};
Point(5) = {0.137971, 0.743431, 0, 1.0};
Point(6) = {0.132217, 0.743642, 0, 1.0};
Point(7) = {0.125370, 0.743911, 0, 1.0};
Point(8) = {0.117550, 0.744282, 0, 1.0};
Point(9) = {0.108895, 0.744764, 0, 1.0};
Point(10) = {0.099553, 0.745360, 0, 1.0};
Point(11) = {0.089673, 0.746053, 0, 1.0};
Point(12) = {0.079416, 0.746808, 0, 1.0};
Point(13) = {0.068932, 0.747590, 0, 1.0};
Point(14) = {0.058366, 0.748344, 0, 1.0};
Point(15) = {0.047854, 0.749018, 0, 1.0};
Point(16) = {0.037521, 0.749555, 0, 1.0};
Point(17) = {0.027477, 0.749898, 0, 1.0};
Point(18) = {0.017816, 0.750000, 0, 1.0};
Point(19) = {0.008625, 0.749815, 0, 1.0};
Point(20) = {-0.000026, 0.749313, 0, 1.0};
Point(21) = {-0.008079, 0.748470, 0, 1.0};
Point(22) = {-0.015478, 0.747273, 0, 1.0};
Point(23) = {-0.022193, 0.745720, 0, 1.0};
Point(24) = {-0.028187, 0.743829, 0, 1.0};
Point(25) = {-0.033428, 0.741592, 0, 1.0};
Point(26) = {-0.037963, 0.739031, 0, 1.0};
Point(27) = {-0.041820, 0.736249, 0, 1.0};
Point(28) = {-0.044963, 0.733355, 0, 1.0};
Point(29) = {-0.047370, 0.730435, 0, 1.0};
Point(30) = {-0.049017, 0.727572, 0, 1.0};
Point(31) = {-0.050000, 0.722999, 0, 1.0};
Point(32) = {-0.048881, 0.720456, 0, 1.0};
Point(33) = {-0.046713, 0.718575, 0, 1.0};
Point(34) = {-0.043639, 0.716802, 0, 1.0};
Point(35) = {-0.039759, 0.715235, 0, 1.0};
Point(36) = {-0.035125, 0.713958, 0, 1.0};
Point(37) = {-0.029778, 0.713053, 0, 1.0};
Point(38) = {-0.023738, 0.712590, 0, 1.0};
Point(39) = {-0.017016, 0.712626, 0, 1.0};
Point(40) = {-0.009588, 0.713207, 0, 1.0};
Point(41) = {-0.001394, 0.714297, 0, 1.0};
Point(42) = {0.007549, 0.715758, 0, 1.0};
Point(43) = {0.017123, 0.717481, 0, 1.0};
Point(44) = {0.027202, 0.719402, 0, 1.0};
Point(45) = {0.037660, 0.721459, 0, 1.0};
Point(46) = {0.048356, 0.723599, 0, 1.0};
Point(47) = {0.059153, 0.725772, 0, 1.0};
Point(48) = {0.069911, 0.727935, 0, 1.0};
Point(49) = {0.080488, 0.730049, 0, 1.0};
Point(50) = {0.090741, 0.732075, 0, 1.0};
Point(51) = {0.100538, 0.733983, 0, 1.0};
Point(52) = {0.109740, 0.735745, 0, 1.0};
Point(53) = {0.118224, 0.737340, 0, 1.0};
Point(54) = {0.125869, 0.738751, 0, 1.0};
Point(55) = {0.132561, 0.739970, 0, 1.0};
Point(56) = {0.138201, 0.740997, 0, 1.0};
Point(57) = {0.142724, 0.741856, 0, 1.0};
Point(58) = {0.146108, 0.742511, 0, 1.0};
Point(59) = {0.148253, 0.742886, 0, 1.0};
Point(60) = {-0.148998, -0.742997, 0, 1.0};
Point(61) = {-0.148238, -0.742995, 0, 1.0};
Point(62) = {-0.146041, -0.743055, 0, 1.0};
Point(63) = {-0.142583, -0.743225, 0, 1.0};
Point(64) = {-0.137971, -0.743431, 0, 1.0};
Point(65) = {-0.132217, -0.743642, 0, 1.0};
Point(66) = {-0.125370, -0.743911, 0, 1.0};
Point(67) = {-0.117550, -0.744282, 0, 1.0};
Point(68) = {-0.108895, -0.744764, 0, 1.0};
Point(69) = {-0.099553, -0.745360, 0, 1.0};
Point(70) = {-0.089673, -0.746053, 0, 1.0};
Point(71) = {-0.079416, -0.746808, 0, 1.0};
Point(72) = {-0.068932, -0.747590, 0, 1.0};
Point(73) = {-0.058366, -0.748344, 0, 1.0};
Point(74) = {-0.047854, -0.749018, 0, 1.0};
Point(75) = {-0.037521, -0.749555, 0, 1.0};
Point(76) = {-0.027477, -0.749898, 0, 1.0};
Point(77) = {-0.017816, -0.750000, 0, 1.0};
Point(78) = {-0.008625, -0.749815, 0, 1.0};
Point(79) = {0.000026, -0.749313, 0, 1.0};
Point(80) = {0.008079, -0.748470, 0, 1.0};
Point(81) = {0.015478, -0.747273, 0, 1.0};
Point(82) = {0.022193, -0.745720, 0, 1.0};
Point(83) = {0.028187, -0.743829, 0, 1.0};
Point(84) = {0.033428, -0.741592, 0, 1.0};
Point(85) = {0.037963, -0.739031, 0, 1.0};
Point(86) = {0.041820, -0.736249, 0, 1.0};
Point(87) = {0.044963, -0.733355, 0, 1.0};
Point(88) = {0.047370, -0.730435, 0, 1.0};
Point(89) = {0.049017, -0.727572, 0, 1.0};
Point(90) = {0.050000, -0.722999, 0, 1.0};
Point(91) = {0.048881, -0.720456, 0, 1.0};
Point(92) = {0.046713, -0.718575, 0, 1.0};
Point(93) = {0.043639, -0.716802, 0, 1.0};
Point(94) = {0.039759, -0.715235, 0, 1.0};
Point(95) = {0.035125, -0.713958, 0, 1.0};
Point(96) = {0.029778, -0.713053, 0, 1.0};
Point(97) = {0.023738, -0.712590, 0, 1.0};
Point(98) = {0.017016, -0.712626, 0, 1.0};
Point(99) = {0.009588, -0.713207, 0, 1.0};
Point(100) = {0.001394, -0.714297, 0, 1.0};
Point(101) = {-0.007549, -0.715758, 0, 1.0};
Point(102) = {-0.017123, -0.717481, 0, 1.0};
Point(103) = {-0.027202, -0.719402, 0, 1.0};
Point(104) = {-0.037660, -0.721459, 0, 1.0};
Point(105) = {-0.048356, -0.723599, 0, 1.0};
Point(106) = {-0.059153, -0.725772, 0, 1.0};
Point(107) = {-0.069911, -0.727935, 0, 1.0};
Point(108) = {-0.080488, -0.730049, 0, 1.0};
Point(109) = {-0.090741, -0.732075, 0, 1.0};
Point(110) = {-0.100538, -0.733983, 0, 1.0};
Point(111) = {-0.109740, -0.735745, 0, 1.0};
Point(112) = {-0.118224, -0.737340, 0, 1.0};
Point(113) = {-0.125869, -0.738751, 0, 1.0};
Point(114) = {-0.132561, -0.739970, 0, 1.0};
Point(115) = {-0.138201, -0.740997, 0, 1.0};
Point(116) = {-0.142724, -0.741856, 0, 1.0};
Point(117) = {-0.146108, -0.742511, 0, 1.0};
Point(118) = {-0.148253, -0.742886, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:79};
Spline(6) = {79:101};
Spline(7) = {101:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 46 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html