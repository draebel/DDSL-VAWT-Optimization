SetFactory("OpenCASCADE");

Point(1) = {0.074499, 0.746499, 0, 1.0};
Point(2) = {0.074119, 0.746498, 0, 1.0};
Point(3) = {0.073021, 0.746527, 0, 1.0};
Point(4) = {0.071291, 0.746613, 0, 1.0};
Point(5) = {0.068986, 0.746715, 0, 1.0};
Point(6) = {0.066109, 0.746821, 0, 1.0};
Point(7) = {0.062685, 0.746956, 0, 1.0};
Point(8) = {0.058775, 0.747141, 0, 1.0};
Point(9) = {0.054448, 0.747382, 0, 1.0};
Point(10) = {0.049777, 0.747680, 0, 1.0};
Point(11) = {0.044836, 0.748026, 0, 1.0};
Point(12) = {0.039708, 0.748404, 0, 1.0};
Point(13) = {0.034466, 0.748795, 0, 1.0};
Point(14) = {0.029183, 0.749172, 0, 1.0};
Point(15) = {0.023927, 0.749509, 0, 1.0};
Point(16) = {0.018760, 0.749778, 0, 1.0};
Point(17) = {0.013738, 0.749949, 0, 1.0};
Point(18) = {0.008908, 0.750000, 0, 1.0};
Point(19) = {0.004312, 0.749908, 0, 1.0};
Point(20) = {-0.000013, 0.749656, 0, 1.0};
Point(21) = {-0.004039, 0.749235, 0, 1.0};
Point(22) = {-0.007739, 0.748636, 0, 1.0};
Point(23) = {-0.011097, 0.747860, 0, 1.0};
Point(24) = {-0.014093, 0.746915, 0, 1.0};
Point(25) = {-0.016714, 0.745796, 0, 1.0};
Point(26) = {-0.018982, 0.744515, 0, 1.0};
Point(27) = {-0.020910, 0.743124, 0, 1.0};
Point(28) = {-0.022481, 0.741677, 0, 1.0};
Point(29) = {-0.023685, 0.740217, 0, 1.0};
Point(30) = {-0.024508, 0.738786, 0, 1.0};
Point(31) = {-0.025000, 0.736499, 0, 1.0};
Point(32) = {-0.024440, 0.735228, 0, 1.0};
Point(33) = {-0.023356, 0.734287, 0, 1.0};
Point(34) = {-0.021819, 0.733401, 0, 1.0};
Point(35) = {-0.019880, 0.732618, 0, 1.0};
Point(36) = {-0.017562, 0.731979, 0, 1.0};
Point(37) = {-0.014889, 0.731526, 0, 1.0};
Point(38) = {-0.011869, 0.731295, 0, 1.0};
Point(39) = {-0.008508, 0.731313, 0, 1.0};
Point(40) = {-0.004794, 0.731604, 0, 1.0};
Point(41) = {-0.000697, 0.732149, 0, 1.0};
Point(42) = {0.003775, 0.732879, 0, 1.0};
Point(43) = {0.008562, 0.733740, 0, 1.0};
Point(44) = {0.013601, 0.734701, 0, 1.0};
Point(45) = {0.018830, 0.735729, 0, 1.0};
Point(46) = {0.024178, 0.736800, 0, 1.0};
Point(47) = {0.029577, 0.737886, 0, 1.0};
Point(48) = {0.034956, 0.738967, 0, 1.0};
Point(49) = {0.040244, 0.740025, 0, 1.0};
Point(50) = {0.045370, 0.741038, 0, 1.0};
Point(51) = {0.050269, 0.741992, 0, 1.0};
Point(52) = {0.054870, 0.742872, 0, 1.0};
Point(53) = {0.059112, 0.743670, 0, 1.0};
Point(54) = {0.062935, 0.744376, 0, 1.0};
Point(55) = {0.066281, 0.744985, 0, 1.0};
Point(56) = {0.069100, 0.745499, 0, 1.0};
Point(57) = {0.071362, 0.745928, 0, 1.0};
Point(58) = {0.073054, 0.746255, 0, 1.0};
Point(59) = {0.074126, 0.746443, 0, 1.0};
Point(60) = {-0.074499, -0.746499, 0, 1.0};
Point(61) = {-0.074119, -0.746498, 0, 1.0};
Point(62) = {-0.073021, -0.746527, 0, 1.0};
Point(63) = {-0.071291, -0.746613, 0, 1.0};
Point(64) = {-0.068986, -0.746715, 0, 1.0};
Point(65) = {-0.066109, -0.746821, 0, 1.0};
Point(66) = {-0.062685, -0.746956, 0, 1.0};
Point(67) = {-0.058775, -0.747141, 0, 1.0};
Point(68) = {-0.054448, -0.747382, 0, 1.0};
Point(69) = {-0.049777, -0.747680, 0, 1.0};
Point(70) = {-0.044836, -0.748026, 0, 1.0};
Point(71) = {-0.039708, -0.748404, 0, 1.0};
Point(72) = {-0.034466, -0.748795, 0, 1.0};
Point(73) = {-0.029183, -0.749172, 0, 1.0};
Point(74) = {-0.023927, -0.749509, 0, 1.0};
Point(75) = {-0.018760, -0.749778, 0, 1.0};
Point(76) = {-0.013738, -0.749949, 0, 1.0};
Point(77) = {-0.008908, -0.750000, 0, 1.0};
Point(78) = {-0.004312, -0.749908, 0, 1.0};
Point(79) = {0.000013, -0.749656, 0, 1.0};
Point(80) = {0.004039, -0.749235, 0, 1.0};
Point(81) = {0.007739, -0.748636, 0, 1.0};
Point(82) = {0.011097, -0.747860, 0, 1.0};
Point(83) = {0.014093, -0.746915, 0, 1.0};
Point(84) = {0.016714, -0.745796, 0, 1.0};
Point(85) = {0.018982, -0.744515, 0, 1.0};
Point(86) = {0.020910, -0.743124, 0, 1.0};
Point(87) = {0.022481, -0.741677, 0, 1.0};
Point(88) = {0.023685, -0.740217, 0, 1.0};
Point(89) = {0.024508, -0.738786, 0, 1.0};
Point(90) = {0.025000, -0.736499, 0, 1.0};
Point(91) = {0.024440, -0.735228, 0, 1.0};
Point(92) = {0.023356, -0.734287, 0, 1.0};
Point(93) = {0.021819, -0.733401, 0, 1.0};
Point(94) = {0.019880, -0.732618, 0, 1.0};
Point(95) = {0.017562, -0.731979, 0, 1.0};
Point(96) = {0.014889, -0.731526, 0, 1.0};
Point(97) = {0.011869, -0.731295, 0, 1.0};
Point(98) = {0.008508, -0.731313, 0, 1.0};
Point(99) = {0.004794, -0.731604, 0, 1.0};
Point(100) = {0.000697, -0.732149, 0, 1.0};
Point(101) = {-0.003775, -0.732879, 0, 1.0};
Point(102) = {-0.008562, -0.733740, 0, 1.0};
Point(103) = {-0.013601, -0.734701, 0, 1.0};
Point(104) = {-0.018830, -0.735729, 0, 1.0};
Point(105) = {-0.024178, -0.736800, 0, 1.0};
Point(106) = {-0.029577, -0.737886, 0, 1.0};
Point(107) = {-0.034956, -0.738967, 0, 1.0};
Point(108) = {-0.040244, -0.740025, 0, 1.0};
Point(109) = {-0.045370, -0.741038, 0, 1.0};
Point(110) = {-0.050269, -0.741992, 0, 1.0};
Point(111) = {-0.054870, -0.742872, 0, 1.0};
Point(112) = {-0.059112, -0.743670, 0, 1.0};
Point(113) = {-0.062935, -0.744376, 0, 1.0};
Point(114) = {-0.066281, -0.744985, 0, 1.0};
Point(115) = {-0.069100, -0.745499, 0, 1.0};
Point(116) = {-0.071362, -0.745928, 0, 1.0};
Point(117) = {-0.073054, -0.746255, 0, 1.0};
Point(118) = {-0.074126, -0.746443, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:79};
Spline(6) = {79:101};
Spline(7) = {101:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 23 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html