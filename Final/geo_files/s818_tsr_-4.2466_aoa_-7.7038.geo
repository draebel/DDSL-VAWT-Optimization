SetFactory("OpenCASCADE");

Point(1) = {0.073918, 0.745000, 0, 1.0};
Point(2) = {0.073309, 0.745154, 0, 1.0};
Point(3) = {0.069324, 0.746061, 0, 1.0};
Point(4) = {0.064704, 0.746853, 0, 1.0};
Point(5) = {0.059378, 0.747511, 0, 1.0};
Point(6) = {0.053390, 0.748091, 0, 1.0};
Point(7) = {0.046826, 0.748605, 0, 1.0};
Point(8) = {0.039777, 0.749053, 0, 1.0};
Point(9) = {0.032341, 0.749430, 0, 1.0};
Point(10) = {0.024620, 0.749724, 0, 1.0};
Point(11) = {0.016718, 0.749920, 0, 1.0};
Point(12) = {0.008740, 0.750000, 0, 1.0};
Point(13) = {0.000790, 0.749942, 0, 1.0};
Point(14) = {-0.007030, 0.749721, 0, 1.0};
Point(15) = {-0.014621, 0.749308, 0, 1.0};
Point(16) = {-0.021893, 0.748670, 0, 1.0};
Point(17) = {-0.028753, 0.747758, 0, 1.0};
Point(18) = {-0.035138, 0.746453, 0, 1.0};
Point(19) = {-0.041197, 0.744729, 0, 1.0};
Point(20) = {-0.046920, 0.742726, 0, 1.0};
Point(21) = {-0.052246, 0.740519, 0, 1.0};
Point(22) = {-0.057121, 0.738167, 0, 1.0};
Point(23) = {-0.061487, 0.735726, 0, 1.0};
Point(24) = {-0.065297, 0.733249, 0, 1.0};
Point(25) = {-0.068497, 0.730791, 0, 1.0};
Point(26) = {-0.071039, 0.728394, 0, 1.0};
Point(27) = {-0.072894, 0.726107, 0, 1.0};
Point(28) = {-0.074014, 0.724000, 0, 1.0};
Point(29) = {-0.074334, 0.722740, 0, 1.0};
Point(30) = {-0.074360, 0.722304, 0, 1.0};
Point(31) = {-0.074355, 0.722154, 0, 1.0};
Point(32) = {-0.074323, 0.721901, 0, 1.0};
Point(33) = {-0.074195, 0.721514, 0, 1.0};
Point(34) = {-0.073994, 0.721117, 0, 1.0};
Point(35) = {-0.073624, 0.720567, 0, 1.0};
Point(36) = {-0.071960, 0.718928, 0, 1.0};
Point(37) = {-0.069514, 0.717297, 0, 1.0};
Point(38) = {-0.066356, 0.715726, 0, 1.0};
Point(39) = {-0.062529, 0.714230, 0, 1.0};
Point(40) = {-0.058123, 0.712787, 0, 1.0};
Point(41) = {-0.053296, 0.711459, 0, 1.0};
Point(42) = {-0.048117, 0.710316, 0, 1.0};
Point(43) = {-0.042700, 0.709423, 0, 1.0};
Point(44) = {-0.037157, 0.708817, 0, 1.0};
Point(45) = {-0.031733, 0.708810, 0, 1.0};
Point(46) = {-0.026118, 0.709657, 0, 1.0};
Point(47) = {-0.020162, 0.711301, 0, 1.0};
Point(48) = {-0.013726, 0.713652, 0, 1.0};
Point(49) = {-0.006790, 0.716529, 0, 1.0};
Point(50) = {0.000615, 0.719790, 0, 1.0};
Point(51) = {0.008438, 0.723288, 0, 1.0};
Point(52) = {0.016600, 0.726870, 0, 1.0};
Point(53) = {0.024991, 0.730382, 0, 1.0};
Point(54) = {0.033472, 0.733675, 0, 1.0};
Point(55) = {0.041873, 0.736617, 0, 1.0};
Point(56) = {0.049999, 0.739099, 0, 1.0};
Point(57) = {0.057638, 0.741048, 0, 1.0};
Point(58) = {0.064570, 0.742429, 0, 1.0};
Point(59) = {0.070578, 0.743253, 0, 1.0};
Point(60) = {0.074117, 0.743533, 0, 1.0};
Point(61) = {-0.073918, -0.745000, 0, 1.0};
Point(62) = {-0.073309, -0.745154, 0, 1.0};
Point(63) = {-0.069324, -0.746061, 0, 1.0};
Point(64) = {-0.064704, -0.746853, 0, 1.0};
Point(65) = {-0.059378, -0.747511, 0, 1.0};
Point(66) = {-0.053390, -0.748091, 0, 1.0};
Point(67) = {-0.046826, -0.748605, 0, 1.0};
Point(68) = {-0.039777, -0.749053, 0, 1.0};
Point(69) = {-0.032341, -0.749430, 0, 1.0};
Point(70) = {-0.024620, -0.749724, 0, 1.0};
Point(71) = {-0.016718, -0.749920, 0, 1.0};
Point(72) = {-0.008740, -0.750000, 0, 1.0};
Point(73) = {-0.000790, -0.749942, 0, 1.0};
Point(74) = {0.007030, -0.749721, 0, 1.0};
Point(75) = {0.014621, -0.749308, 0, 1.0};
Point(76) = {0.021893, -0.748670, 0, 1.0};
Point(77) = {0.028753, -0.747758, 0, 1.0};
Point(78) = {0.035138, -0.746453, 0, 1.0};
Point(79) = {0.041197, -0.744729, 0, 1.0};
Point(80) = {0.046920, -0.742726, 0, 1.0};
Point(81) = {0.052246, -0.740519, 0, 1.0};
Point(82) = {0.057121, -0.738167, 0, 1.0};
Point(83) = {0.061487, -0.735726, 0, 1.0};
Point(84) = {0.065297, -0.733249, 0, 1.0};
Point(85) = {0.068497, -0.730791, 0, 1.0};
Point(86) = {0.071039, -0.728394, 0, 1.0};
Point(87) = {0.072894, -0.726107, 0, 1.0};
Point(88) = {0.074014, -0.724000, 0, 1.0};
Point(89) = {0.074334, -0.722740, 0, 1.0};
Point(90) = {0.074360, -0.722304, 0, 1.0};
Point(91) = {0.074355, -0.722154, 0, 1.0};
Point(92) = {0.074323, -0.721901, 0, 1.0};
Point(93) = {0.074195, -0.721514, 0, 1.0};
Point(94) = {0.073994, -0.721117, 0, 1.0};
Point(95) = {0.073624, -0.720567, 0, 1.0};
Point(96) = {0.071960, -0.718928, 0, 1.0};
Point(97) = {0.069514, -0.717297, 0, 1.0};
Point(98) = {0.066356, -0.715726, 0, 1.0};
Point(99) = {0.062529, -0.714230, 0, 1.0};
Point(100) = {0.058123, -0.712787, 0, 1.0};
Point(101) = {0.053296, -0.711459, 0, 1.0};
Point(102) = {0.048117, -0.710316, 0, 1.0};
Point(103) = {0.042700, -0.709423, 0, 1.0};
Point(104) = {0.037157, -0.708817, 0, 1.0};
Point(105) = {0.031733, -0.708810, 0, 1.0};
Point(106) = {0.026118, -0.709657, 0, 1.0};
Point(107) = {0.020162, -0.711301, 0, 1.0};
Point(108) = {0.013726, -0.713652, 0, 1.0};
Point(109) = {0.006790, -0.716529, 0, 1.0};
Point(110) = {-0.000615, -0.719790, 0, 1.0};
Point(111) = {-0.008438, -0.723288, 0, 1.0};
Point(112) = {-0.016600, -0.726870, 0, 1.0};
Point(113) = {-0.024991, -0.730382, 0, 1.0};
Point(114) = {-0.033472, -0.733675, 0, 1.0};
Point(115) = {-0.041873, -0.736617, 0, 1.0};
Point(116) = {-0.049999, -0.739099, 0, 1.0};
Point(117) = {-0.057638, -0.741048, 0, 1.0};
Point(118) = {-0.064570, -0.742429, 0, 1.0};
Point(119) = {-0.070578, -0.743253, 0, 1.0};
Point(120) = {-0.074117, -0.743533, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:19};
Spline(2) = {19:45};
Spline(3) = {45:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:79};
Spline(6) = {79:105};
Spline(7) = {105:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {36.00000000, 15.00000000, 0, 1.0};
Point(124) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 35 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html