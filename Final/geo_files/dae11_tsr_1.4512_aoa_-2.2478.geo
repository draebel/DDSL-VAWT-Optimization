SetFactory("OpenCASCADE");

Point(1) = {0.112385, 0.734190, 0, 1.0};
Point(2) = {0.110344, 0.734491, 0, 1.0};
Point(3) = {0.107856, 0.734855, 0, 1.0};
Point(4) = {0.104513, 0.735389, 0, 1.0};
Point(5) = {0.100089, 0.736166, 0, 1.0};
Point(6) = {0.095454, 0.737063, 0, 1.0};
Point(7) = {0.090911, 0.738020, 0, 1.0};
Point(8) = {0.086367, 0.739046, 0, 1.0};
Point(9) = {0.081795, 0.740135, 0, 1.0};
Point(10) = {0.077182, 0.741277, 0, 1.0};
Point(11) = {0.072520, 0.742458, 0, 1.0};
Point(12) = {0.067827, 0.743660, 0, 1.0};
Point(13) = {0.063213, 0.744827, 0, 1.0};
Point(14) = {0.058699, 0.745924, 0, 1.0};
Point(15) = {0.054281, 0.746919, 0, 1.0};
Point(16) = {0.049940, 0.747787, 0, 1.0};
Point(17) = {0.045643, 0.748509, 0, 1.0};
Point(18) = {0.041348, 0.749081, 0, 1.0};
Point(19) = {0.037033, 0.749513, 0, 1.0};
Point(20) = {0.032694, 0.749810, 0, 1.0};
Point(21) = {0.028342, 0.749972, 0, 1.0};
Point(22) = {0.023985, 0.750000, 0, 1.0};
Point(23) = {0.019625, 0.749891, 0, 1.0};
Point(24) = {0.015267, 0.749650, 0, 1.0};
Point(25) = {0.010923, 0.749279, 0, 1.0};
Point(26) = {0.006604, 0.748773, 0, 1.0};
Point(27) = {0.002317, 0.748132, 0, 1.0};
Point(28) = {-0.001929, 0.747354, 0, 1.0};
Point(29) = {-0.006118, 0.746435, 0, 1.0};
Point(30) = {-0.010231, 0.745372, 0, 1.0};
Point(31) = {-0.014240, 0.744162, 0, 1.0};
Point(32) = {-0.018114, 0.742807, 0, 1.0};
Point(33) = {-0.021811, 0.741310, 0, 1.0};
Point(34) = {-0.025275, 0.739680, 0, 1.0};
Point(35) = {-0.028439, 0.737940, 0, 1.0};
Point(36) = {-0.031208, 0.736141, 0, 1.0};
Point(37) = {-0.033480, 0.734364, 0, 1.0};
Point(38) = {-0.035197, 0.732710, 0, 1.0};
Point(39) = {-0.036371, 0.731254, 0, 1.0};
Point(40) = {-0.037074, 0.730045, 0, 1.0};
Point(41) = {-0.037417, 0.729082, 0, 1.0};
Point(42) = {-0.037500, 0.728307, 0, 1.0};
Point(43) = {-0.037406, 0.727787, 0, 1.0};
Point(44) = {-0.037161, 0.727355, 0, 1.0};
Point(45) = {-0.036787, 0.727015, 0, 1.0};
Point(46) = {-0.036225, 0.726751, 0, 1.0};
Point(47) = {-0.035312, 0.726535, 0, 1.0};
Point(48) = {-0.033735, 0.726371, 0, 1.0};
Point(49) = {-0.031200, 0.726319, 0, 1.0};
Point(50) = {-0.027685, 0.726430, 0, 1.0};
Point(51) = {-0.023534, 0.726684, 0, 1.0};
Point(52) = {-0.019048, 0.727035, 0, 1.0};
Point(53) = {-0.014397, 0.727450, 0, 1.0};
Point(54) = {-0.009655, 0.727903, 0, 1.0};
Point(55) = {-0.004860, 0.728379, 0, 1.0};
Point(56) = {-0.000032, 0.728866, 0, 1.0};
Point(57) = {0.004817, 0.729358, 0, 1.0};
Point(58) = {0.009668, 0.729848, 0, 1.0};
Point(59) = {0.014505, 0.730330, 0, 1.0};
Point(60) = {0.019332, 0.730800, 0, 1.0};
Point(61) = {0.024147, 0.731257, 0, 1.0};
Point(62) = {0.028951, 0.731696, 0, 1.0};
Point(63) = {0.033746, 0.732114, 0, 1.0};
Point(64) = {0.038530, 0.732509, 0, 1.0};
Point(65) = {0.043303, 0.732875, 0, 1.0};
Point(66) = {0.048070, 0.733209, 0, 1.0};
Point(67) = {0.052832, 0.733510, 0, 1.0};
Point(68) = {0.057591, 0.733776, 0, 1.0};
Point(69) = {0.062349, 0.734007, 0, 1.0};
Point(70) = {0.067106, 0.734204, 0, 1.0};
Point(71) = {0.071862, 0.734367, 0, 1.0};
Point(72) = {0.076613, 0.734496, 0, 1.0};
Point(73) = {0.081358, 0.734589, 0, 1.0};
Point(74) = {0.086096, 0.734644, 0, 1.0};
Point(75) = {0.090834, 0.734659, 0, 1.0};
Point(76) = {0.095604, 0.734632, 0, 1.0};
Point(77) = {0.100363, 0.734561, 0, 1.0};
Point(78) = {0.104567, 0.734464, 0, 1.0};
Point(79) = {0.107822, 0.734364, 0, 1.0};
Point(80) = {0.110322, 0.734271, 0, 1.0};
Point(81) = {-0.112385, -0.734190, 0, 1.0};
Point(82) = {-0.110344, -0.734491, 0, 1.0};
Point(83) = {-0.107856, -0.734855, 0, 1.0};
Point(84) = {-0.104513, -0.735389, 0, 1.0};
Point(85) = {-0.100089, -0.736166, 0, 1.0};
Point(86) = {-0.095454, -0.737063, 0, 1.0};
Point(87) = {-0.090911, -0.738020, 0, 1.0};
Point(88) = {-0.086367, -0.739046, 0, 1.0};
Point(89) = {-0.081795, -0.740135, 0, 1.0};
Point(90) = {-0.077182, -0.741277, 0, 1.0};
Point(91) = {-0.072520, -0.742458, 0, 1.0};
Point(92) = {-0.067827, -0.743660, 0, 1.0};
Point(93) = {-0.063213, -0.744827, 0, 1.0};
Point(94) = {-0.058699, -0.745924, 0, 1.0};
Point(95) = {-0.054281, -0.746919, 0, 1.0};
Point(96) = {-0.049940, -0.747787, 0, 1.0};
Point(97) = {-0.045643, -0.748509, 0, 1.0};
Point(98) = {-0.041348, -0.749081, 0, 1.0};
Point(99) = {-0.037033, -0.749513, 0, 1.0};
Point(100) = {-0.032694, -0.749810, 0, 1.0};
Point(101) = {-0.028342, -0.749972, 0, 1.0};
Point(102) = {-0.023985, -0.750000, 0, 1.0};
Point(103) = {-0.019625, -0.749891, 0, 1.0};
Point(104) = {-0.015267, -0.749650, 0, 1.0};
Point(105) = {-0.010923, -0.749279, 0, 1.0};
Point(106) = {-0.006604, -0.748773, 0, 1.0};
Point(107) = {-0.002317, -0.748132, 0, 1.0};
Point(108) = {0.001929, -0.747354, 0, 1.0};
Point(109) = {0.006118, -0.746435, 0, 1.0};
Point(110) = {0.010231, -0.745372, 0, 1.0};
Point(111) = {0.014240, -0.744162, 0, 1.0};
Point(112) = {0.018114, -0.742807, 0, 1.0};
Point(113) = {0.021811, -0.741310, 0, 1.0};
Point(114) = {0.025275, -0.739680, 0, 1.0};
Point(115) = {0.028439, -0.737940, 0, 1.0};
Point(116) = {0.031208, -0.736141, 0, 1.0};
Point(117) = {0.033480, -0.734364, 0, 1.0};
Point(118) = {0.035197, -0.732710, 0, 1.0};
Point(119) = {0.036371, -0.731254, 0, 1.0};
Point(120) = {0.037074, -0.730045, 0, 1.0};
Point(121) = {0.037417, -0.729082, 0, 1.0};
Point(122) = {0.037500, -0.728307, 0, 1.0};
Point(123) = {0.037406, -0.727787, 0, 1.0};
Point(124) = {0.037161, -0.727355, 0, 1.0};
Point(125) = {0.036787, -0.727015, 0, 1.0};
Point(126) = {0.036225, -0.726751, 0, 1.0};
Point(127) = {0.035312, -0.726535, 0, 1.0};
Point(128) = {0.033735, -0.726371, 0, 1.0};
Point(129) = {0.031200, -0.726319, 0, 1.0};
Point(130) = {0.027685, -0.726430, 0, 1.0};
Point(131) = {0.023534, -0.726684, 0, 1.0};
Point(132) = {0.019048, -0.727035, 0, 1.0};
Point(133) = {0.014397, -0.727450, 0, 1.0};
Point(134) = {0.009655, -0.727903, 0, 1.0};
Point(135) = {0.004860, -0.728379, 0, 1.0};
Point(136) = {0.000032, -0.728866, 0, 1.0};
Point(137) = {-0.004817, -0.729358, 0, 1.0};
Point(138) = {-0.009668, -0.729848, 0, 1.0};
Point(139) = {-0.014505, -0.730330, 0, 1.0};
Point(140) = {-0.019332, -0.730800, 0, 1.0};
Point(141) = {-0.024147, -0.731257, 0, 1.0};
Point(142) = {-0.028951, -0.731696, 0, 1.0};
Point(143) = {-0.033746, -0.732114, 0, 1.0};
Point(144) = {-0.038530, -0.732509, 0, 1.0};
Point(145) = {-0.043303, -0.732875, 0, 1.0};
Point(146) = {-0.048070, -0.733209, 0, 1.0};
Point(147) = {-0.052832, -0.733510, 0, 1.0};
Point(148) = {-0.057591, -0.733776, 0, 1.0};
Point(149) = {-0.062349, -0.734007, 0, 1.0};
Point(150) = {-0.067106, -0.734204, 0, 1.0};
Point(151) = {-0.071862, -0.734367, 0, 1.0};
Point(152) = {-0.076613, -0.734496, 0, 1.0};
Point(153) = {-0.081358, -0.734589, 0, 1.0};
Point(154) = {-0.086096, -0.734644, 0, 1.0};
Point(155) = {-0.090834, -0.734659, 0, 1.0};
Point(156) = {-0.095604, -0.734632, 0, 1.0};
Point(157) = {-0.100363, -0.734561, 0, 1.0};
Point(158) = {-0.104567, -0.734464, 0, 1.0};
Point(159) = {-0.107822, -0.734364, 0, 1.0};
Point(160) = {-0.110322, -0.734271, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html