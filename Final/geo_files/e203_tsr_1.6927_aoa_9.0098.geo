SetFactory("OpenCASCADE");

Point(1) = {0.147532, 0.709226, 0, 1.0};
Point(2) = {0.146852, 0.709467, 0, 1.0};
Point(3) = {0.144905, 0.710214, 0, 1.0};
Point(4) = {0.141872, 0.711460, 0, 1.0};
Point(5) = {0.137884, 0.713101, 0, 1.0};
Point(6) = {0.132982, 0.715022, 0, 1.0};
Point(7) = {0.127176, 0.717178, 0, 1.0};
Point(8) = {0.120527, 0.719573, 0, 1.0};
Point(9) = {0.113137, 0.722182, 0, 1.0};
Point(10) = {0.105111, 0.724963, 0, 1.0};
Point(11) = {0.096561, 0.727872, 0, 1.0};
Point(12) = {0.087604, 0.730854, 0, 1.0};
Point(13) = {0.078354, 0.733845, 0, 1.0};
Point(14) = {0.068933, 0.736779, 0, 1.0};
Point(15) = {0.059457, 0.739567, 0, 1.0};
Point(16) = {0.050007, 0.742112, 0, 1.0};
Point(17) = {0.040633, 0.744346, 0, 1.0};
Point(18) = {0.031389, 0.746221, 0, 1.0};
Point(19) = {0.022323, 0.747715, 0, 1.0};
Point(20) = {0.013486, 0.748816, 0, 1.0};
Point(21) = {0.004924, 0.749540, 0, 1.0};
Point(22) = {-0.003291, 0.749925, 0, 1.0};
Point(23) = {-0.011067, 0.750000, 0, 1.0};
Point(24) = {-0.018324, 0.749778, 0, 1.0};
Point(25) = {-0.024982, 0.749278, 0, 1.0};
Point(26) = {-0.030972, 0.748525, 0, 1.0};
Point(27) = {-0.036235, 0.747541, 0, 1.0};
Point(28) = {-0.040719, 0.746359, 0, 1.0};
Point(29) = {-0.044377, 0.745017, 0, 1.0};
Point(30) = {-0.047171, 0.743561, 0, 1.0};
Point(31) = {-0.049063, 0.742064, 0, 1.0};
Point(32) = {-0.049980, 0.740646, 0, 1.0};
Point(33) = {-0.049686, 0.739231, 0, 1.0};
Point(34) = {-0.048203, 0.737637, 0, 1.0};
Point(35) = {-0.045731, 0.735915, 0, 1.0};
Point(36) = {-0.042287, 0.734131, 0, 1.0};
Point(37) = {-0.037906, 0.732325, 0, 1.0};
Point(38) = {-0.032623, 0.730525, 0, 1.0};
Point(39) = {-0.026488, 0.728761, 0, 1.0};
Point(40) = {-0.019556, 0.727050, 0, 1.0};
Point(41) = {-0.011901, 0.725415, 0, 1.0};
Point(42) = {-0.003599, 0.723880, 0, 1.0};
Point(43) = {0.005254, 0.722466, 0, 1.0};
Point(44) = {0.014568, 0.721231, 0, 1.0};
Point(45) = {0.024309, 0.720239, 0, 1.0};
Point(46) = {0.034498, 0.719456, 0, 1.0};
Point(47) = {0.045048, 0.718765, 0, 1.0};
Point(48) = {0.055804, 0.718098, 0, 1.0};
Point(49) = {0.066607, 0.717422, 0, 1.0};
Point(50) = {0.077299, 0.716719, 0, 1.0};
Point(51) = {0.087725, 0.715975, 0, 1.0};
Point(52) = {0.097732, 0.715190, 0, 1.0};
Point(53) = {0.107170, 0.714370, 0, 1.0};
Point(54) = {0.115902, 0.713526, 0, 1.0};
Point(55) = {0.123789, 0.712675, 0, 1.0};
Point(56) = {0.130713, 0.711844, 0, 1.0};
Point(57) = {0.136567, 0.711068, 0, 1.0};
Point(58) = {0.141261, 0.710374, 0, 1.0};
Point(59) = {0.144709, 0.709795, 0, 1.0};
Point(60) = {0.146820, 0.709381, 0, 1.0};
Point(61) = {-0.147532, -0.709226, 0, 1.0};
Point(62) = {-0.146852, -0.709467, 0, 1.0};
Point(63) = {-0.144905, -0.710214, 0, 1.0};
Point(64) = {-0.141872, -0.711460, 0, 1.0};
Point(65) = {-0.137884, -0.713101, 0, 1.0};
Point(66) = {-0.132982, -0.715022, 0, 1.0};
Point(67) = {-0.127176, -0.717178, 0, 1.0};
Point(68) = {-0.120527, -0.719573, 0, 1.0};
Point(69) = {-0.113137, -0.722182, 0, 1.0};
Point(70) = {-0.105111, -0.724963, 0, 1.0};
Point(71) = {-0.096561, -0.727872, 0, 1.0};
Point(72) = {-0.087604, -0.730854, 0, 1.0};
Point(73) = {-0.078354, -0.733845, 0, 1.0};
Point(74) = {-0.068933, -0.736779, 0, 1.0};
Point(75) = {-0.059457, -0.739567, 0, 1.0};
Point(76) = {-0.050007, -0.742112, 0, 1.0};
Point(77) = {-0.040633, -0.744346, 0, 1.0};
Point(78) = {-0.031389, -0.746221, 0, 1.0};
Point(79) = {-0.022323, -0.747715, 0, 1.0};
Point(80) = {-0.013486, -0.748816, 0, 1.0};
Point(81) = {-0.004924, -0.749540, 0, 1.0};
Point(82) = {0.003291, -0.749925, 0, 1.0};
Point(83) = {0.011067, -0.750000, 0, 1.0};
Point(84) = {0.018324, -0.749778, 0, 1.0};
Point(85) = {0.024982, -0.749278, 0, 1.0};
Point(86) = {0.030972, -0.748525, 0, 1.0};
Point(87) = {0.036235, -0.747541, 0, 1.0};
Point(88) = {0.040719, -0.746359, 0, 1.0};
Point(89) = {0.044377, -0.745017, 0, 1.0};
Point(90) = {0.047171, -0.743561, 0, 1.0};
Point(91) = {0.049063, -0.742064, 0, 1.0};
Point(92) = {0.049980, -0.740646, 0, 1.0};
Point(93) = {0.049686, -0.739231, 0, 1.0};
Point(94) = {0.048203, -0.737637, 0, 1.0};
Point(95) = {0.045731, -0.735915, 0, 1.0};
Point(96) = {0.042287, -0.734131, 0, 1.0};
Point(97) = {0.037906, -0.732325, 0, 1.0};
Point(98) = {0.032623, -0.730525, 0, 1.0};
Point(99) = {0.026488, -0.728761, 0, 1.0};
Point(100) = {0.019556, -0.727050, 0, 1.0};
Point(101) = {0.011901, -0.725415, 0, 1.0};
Point(102) = {0.003599, -0.723880, 0, 1.0};
Point(103) = {-0.005254, -0.722466, 0, 1.0};
Point(104) = {-0.014568, -0.721231, 0, 1.0};
Point(105) = {-0.024309, -0.720239, 0, 1.0};
Point(106) = {-0.034498, -0.719456, 0, 1.0};
Point(107) = {-0.045048, -0.718765, 0, 1.0};
Point(108) = {-0.055804, -0.718098, 0, 1.0};
Point(109) = {-0.066607, -0.717422, 0, 1.0};
Point(110) = {-0.077299, -0.716719, 0, 1.0};
Point(111) = {-0.087725, -0.715975, 0, 1.0};
Point(112) = {-0.097732, -0.715190, 0, 1.0};
Point(113) = {-0.107170, -0.714370, 0, 1.0};
Point(114) = {-0.115902, -0.713526, 0, 1.0};
Point(115) = {-0.123789, -0.712675, 0, 1.0};
Point(116) = {-0.130713, -0.711844, 0, 1.0};
Point(117) = {-0.136567, -0.711068, 0, 1.0};
Point(118) = {-0.141261, -0.710374, 0, 1.0};
Point(119) = {-0.144709, -0.709795, 0, 1.0};
Point(120) = {-0.146820, -0.709381, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html