SetFactory("OpenCASCADE");

Point(1) = {0.111100, 0.719419, 0, 1.0};
Point(2) = {0.110590, 0.719600, 0, 1.0};
Point(3) = {0.109129, 0.720160, 0, 1.0};
Point(4) = {0.106855, 0.721094, 0, 1.0};
Point(5) = {0.103864, 0.722325, 0, 1.0};
Point(6) = {0.100187, 0.723766, 0, 1.0};
Point(7) = {0.095833, 0.725383, 0, 1.0};
Point(8) = {0.090846, 0.727179, 0, 1.0};
Point(9) = {0.085303, 0.729136, 0, 1.0};
Point(10) = {0.079284, 0.731222, 0, 1.0};
Point(11) = {0.072871, 0.733404, 0, 1.0};
Point(12) = {0.066153, 0.735640, 0, 1.0};
Point(13) = {0.059215, 0.737884, 0, 1.0};
Point(14) = {0.052150, 0.740084, 0, 1.0};
Point(15) = {0.045042, 0.742175, 0, 1.0};
Point(16) = {0.037955, 0.744084, 0, 1.0};
Point(17) = {0.030924, 0.745759, 0, 1.0};
Point(18) = {0.023991, 0.747165, 0, 1.0};
Point(19) = {0.017191, 0.748286, 0, 1.0};
Point(20) = {0.010563, 0.749112, 0, 1.0};
Point(21) = {0.004142, 0.749655, 0, 1.0};
Point(22) = {-0.002020, 0.749944, 0, 1.0};
Point(23) = {-0.007852, 0.750000, 0, 1.0};
Point(24) = {-0.013294, 0.749833, 0, 1.0};
Point(25) = {-0.018288, 0.749459, 0, 1.0};
Point(26) = {-0.022781, 0.748894, 0, 1.0};
Point(27) = {-0.026728, 0.748156, 0, 1.0};
Point(28) = {-0.030092, 0.747269, 0, 1.0};
Point(29) = {-0.032835, 0.746263, 0, 1.0};
Point(30) = {-0.034931, 0.745170, 0, 1.0};
Point(31) = {-0.036349, 0.744048, 0, 1.0};
Point(32) = {-0.037037, 0.742985, 0, 1.0};
Point(33) = {-0.036817, 0.741923, 0, 1.0};
Point(34) = {-0.035705, 0.740728, 0, 1.0};
Point(35) = {-0.033850, 0.739436, 0, 1.0};
Point(36) = {-0.031268, 0.738098, 0, 1.0};
Point(37) = {-0.027982, 0.736743, 0, 1.0};
Point(38) = {-0.024019, 0.735394, 0, 1.0};
Point(39) = {-0.019418, 0.734070, 0, 1.0};
Point(40) = {-0.014219, 0.732787, 0, 1.0};
Point(41) = {-0.008478, 0.731561, 0, 1.0};
Point(42) = {-0.002251, 0.730410, 0, 1.0};
Point(43) = {0.004389, 0.729349, 0, 1.0};
Point(44) = {0.011375, 0.728422, 0, 1.0};
Point(45) = {0.018680, 0.727679, 0, 1.0};
Point(46) = {0.026322, 0.727091, 0, 1.0};
Point(47) = {0.034235, 0.726573, 0, 1.0};
Point(48) = {0.042302, 0.726073, 0, 1.0};
Point(49) = {0.050405, 0.725566, 0, 1.0};
Point(50) = {0.058424, 0.725039, 0, 1.0};
Point(51) = {0.066244, 0.724481, 0, 1.0};
Point(52) = {0.073749, 0.723892, 0, 1.0};
Point(53) = {0.080828, 0.723277, 0, 1.0};
Point(54) = {0.087376, 0.722644, 0, 1.0};
Point(55) = {0.093292, 0.722005, 0, 1.0};
Point(56) = {0.098485, 0.721383, 0, 1.0};
Point(57) = {0.102876, 0.720800, 0, 1.0};
Point(58) = {0.106396, 0.720280, 0, 1.0};
Point(59) = {0.108982, 0.719846, 0, 1.0};
Point(60) = {0.110566, 0.719535, 0, 1.0};
Point(61) = {-0.111100, -0.719419, 0, 1.0};
Point(62) = {-0.110590, -0.719600, 0, 1.0};
Point(63) = {-0.109129, -0.720160, 0, 1.0};
Point(64) = {-0.106855, -0.721094, 0, 1.0};
Point(65) = {-0.103864, -0.722325, 0, 1.0};
Point(66) = {-0.100187, -0.723766, 0, 1.0};
Point(67) = {-0.095833, -0.725383, 0, 1.0};
Point(68) = {-0.090846, -0.727179, 0, 1.0};
Point(69) = {-0.085303, -0.729136, 0, 1.0};
Point(70) = {-0.079284, -0.731222, 0, 1.0};
Point(71) = {-0.072871, -0.733404, 0, 1.0};
Point(72) = {-0.066153, -0.735640, 0, 1.0};
Point(73) = {-0.059215, -0.737884, 0, 1.0};
Point(74) = {-0.052150, -0.740084, 0, 1.0};
Point(75) = {-0.045042, -0.742175, 0, 1.0};
Point(76) = {-0.037955, -0.744084, 0, 1.0};
Point(77) = {-0.030924, -0.745759, 0, 1.0};
Point(78) = {-0.023991, -0.747165, 0, 1.0};
Point(79) = {-0.017191, -0.748286, 0, 1.0};
Point(80) = {-0.010563, -0.749112, 0, 1.0};
Point(81) = {-0.004142, -0.749655, 0, 1.0};
Point(82) = {0.002020, -0.749944, 0, 1.0};
Point(83) = {0.007852, -0.750000, 0, 1.0};
Point(84) = {0.013294, -0.749833, 0, 1.0};
Point(85) = {0.018288, -0.749459, 0, 1.0};
Point(86) = {0.022781, -0.748894, 0, 1.0};
Point(87) = {0.026728, -0.748156, 0, 1.0};
Point(88) = {0.030092, -0.747269, 0, 1.0};
Point(89) = {0.032835, -0.746263, 0, 1.0};
Point(90) = {0.034931, -0.745170, 0, 1.0};
Point(91) = {0.036349, -0.744048, 0, 1.0};
Point(92) = {0.037037, -0.742985, 0, 1.0};
Point(93) = {0.036817, -0.741923, 0, 1.0};
Point(94) = {0.035705, -0.740728, 0, 1.0};
Point(95) = {0.033850, -0.739436, 0, 1.0};
Point(96) = {0.031268, -0.738098, 0, 1.0};
Point(97) = {0.027982, -0.736743, 0, 1.0};
Point(98) = {0.024019, -0.735394, 0, 1.0};
Point(99) = {0.019418, -0.734070, 0, 1.0};
Point(100) = {0.014219, -0.732787, 0, 1.0};
Point(101) = {0.008478, -0.731561, 0, 1.0};
Point(102) = {0.002251, -0.730410, 0, 1.0};
Point(103) = {-0.004389, -0.729349, 0, 1.0};
Point(104) = {-0.011375, -0.728422, 0, 1.0};
Point(105) = {-0.018680, -0.727679, 0, 1.0};
Point(106) = {-0.026322, -0.727091, 0, 1.0};
Point(107) = {-0.034235, -0.726573, 0, 1.0};
Point(108) = {-0.042302, -0.726073, 0, 1.0};
Point(109) = {-0.050405, -0.725566, 0, 1.0};
Point(110) = {-0.058424, -0.725039, 0, 1.0};
Point(111) = {-0.066244, -0.724481, 0, 1.0};
Point(112) = {-0.073749, -0.723892, 0, 1.0};
Point(113) = {-0.080828, -0.723277, 0, 1.0};
Point(114) = {-0.087376, -0.722644, 0, 1.0};
Point(115) = {-0.093292, -0.722005, 0, 1.0};
Point(116) = {-0.098485, -0.721383, 0, 1.0};
Point(117) = {-0.102876, -0.720800, 0, 1.0};
Point(118) = {-0.106396, -0.720280, 0, 1.0};
Point(119) = {-0.108982, -0.719846, 0, 1.0};
Point(120) = {-0.110566, -0.719535, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html