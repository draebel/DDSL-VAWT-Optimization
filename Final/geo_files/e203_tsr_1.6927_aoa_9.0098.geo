SetFactory("OpenCASCADE");

Point(1) = {0.110649, 0.719419, 0, 1.0};
Point(2) = {0.110139, 0.719601, 0, 1.0};
Point(3) = {0.108678, 0.720160, 0, 1.0};
Point(4) = {0.106404, 0.721095, 0, 1.0};
Point(5) = {0.103413, 0.722325, 0, 1.0};
Point(6) = {0.099737, 0.723766, 0, 1.0};
Point(7) = {0.095382, 0.725383, 0, 1.0};
Point(8) = {0.090396, 0.727179, 0, 1.0};
Point(9) = {0.084853, 0.729137, 0, 1.0};
Point(10) = {0.078834, 0.731222, 0, 1.0};
Point(11) = {0.072421, 0.733404, 0, 1.0};
Point(12) = {0.065703, 0.735640, 0, 1.0};
Point(13) = {0.058766, 0.737884, 0, 1.0};
Point(14) = {0.051700, 0.740084, 0, 1.0};
Point(15) = {0.044593, 0.742175, 0, 1.0};
Point(16) = {0.037505, 0.744084, 0, 1.0};
Point(17) = {0.030475, 0.745759, 0, 1.0};
Point(18) = {0.023542, 0.747165, 0, 1.0};
Point(19) = {0.016742, 0.748286, 0, 1.0};
Point(20) = {0.010115, 0.749112, 0, 1.0};
Point(21) = {0.003693, 0.749655, 0, 1.0};
Point(22) = {-0.002468, 0.749944, 0, 1.0};
Point(23) = {-0.008300, 0.750000, 0, 1.0};
Point(24) = {-0.013743, 0.749833, 0, 1.0};
Point(25) = {-0.018736, 0.749459, 0, 1.0};
Point(26) = {-0.023229, 0.748894, 0, 1.0};
Point(27) = {-0.027176, 0.748156, 0, 1.0};
Point(28) = {-0.030539, 0.747269, 0, 1.0};
Point(29) = {-0.033282, 0.746263, 0, 1.0};
Point(30) = {-0.035378, 0.745170, 0, 1.0};
Point(31) = {-0.036797, 0.744048, 0, 1.0};
Point(32) = {-0.037485, 0.742985, 0, 1.0};
Point(33) = {-0.037265, 0.741923, 0, 1.0};
Point(34) = {-0.036153, 0.740728, 0, 1.0};
Point(35) = {-0.034298, 0.739436, 0, 1.0};
Point(36) = {-0.031716, 0.738099, 0, 1.0};
Point(37) = {-0.028430, 0.736744, 0, 1.0};
Point(38) = {-0.024467, 0.735394, 0, 1.0};
Point(39) = {-0.019866, 0.734071, 0, 1.0};
Point(40) = {-0.014667, 0.732788, 0, 1.0};
Point(41) = {-0.008926, 0.731561, 0, 1.0};
Point(42) = {-0.002700, 0.730410, 0, 1.0};
Point(43) = {0.003941, 0.729350, 0, 1.0};
Point(44) = {0.010926, 0.728423, 0, 1.0};
Point(45) = {0.018231, 0.727679, 0, 1.0};
Point(46) = {0.025873, 0.727092, 0, 1.0};
Point(47) = {0.033786, 0.726574, 0, 1.0};
Point(48) = {0.041853, 0.726074, 0, 1.0};
Point(49) = {0.049956, 0.725567, 0, 1.0};
Point(50) = {0.057974, 0.725039, 0, 1.0};
Point(51) = {0.065794, 0.724481, 0, 1.0};
Point(52) = {0.073299, 0.723893, 0, 1.0};
Point(53) = {0.080377, 0.723278, 0, 1.0};
Point(54) = {0.086926, 0.722645, 0, 1.0};
Point(55) = {0.092842, 0.722006, 0, 1.0};
Point(56) = {0.098035, 0.721383, 0, 1.0};
Point(57) = {0.102426, 0.720801, 0, 1.0};
Point(58) = {0.105946, 0.720281, 0, 1.0};
Point(59) = {0.108531, 0.719846, 0, 1.0};
Point(60) = {0.110115, 0.719536, 0, 1.0};
Point(61) = {-0.110649, -0.719419, 0, 1.0};
Point(62) = {-0.110139, -0.719601, 0, 1.0};
Point(63) = {-0.108678, -0.720160, 0, 1.0};
Point(64) = {-0.106404, -0.721095, 0, 1.0};
Point(65) = {-0.103413, -0.722325, 0, 1.0};
Point(66) = {-0.099737, -0.723766, 0, 1.0};
Point(67) = {-0.095382, -0.725383, 0, 1.0};
Point(68) = {-0.090396, -0.727179, 0, 1.0};
Point(69) = {-0.084853, -0.729137, 0, 1.0};
Point(70) = {-0.078834, -0.731222, 0, 1.0};
Point(71) = {-0.072421, -0.733404, 0, 1.0};
Point(72) = {-0.065703, -0.735640, 0, 1.0};
Point(73) = {-0.058766, -0.737884, 0, 1.0};
Point(74) = {-0.051700, -0.740084, 0, 1.0};
Point(75) = {-0.044593, -0.742175, 0, 1.0};
Point(76) = {-0.037505, -0.744084, 0, 1.0};
Point(77) = {-0.030475, -0.745759, 0, 1.0};
Point(78) = {-0.023542, -0.747165, 0, 1.0};
Point(79) = {-0.016742, -0.748286, 0, 1.0};
Point(80) = {-0.010115, -0.749112, 0, 1.0};
Point(81) = {-0.003693, -0.749655, 0, 1.0};
Point(82) = {0.002468, -0.749944, 0, 1.0};
Point(83) = {0.008300, -0.750000, 0, 1.0};
Point(84) = {0.013743, -0.749833, 0, 1.0};
Point(85) = {0.018736, -0.749459, 0, 1.0};
Point(86) = {0.023229, -0.748894, 0, 1.0};
Point(87) = {0.027176, -0.748156, 0, 1.0};
Point(88) = {0.030539, -0.747269, 0, 1.0};
Point(89) = {0.033282, -0.746263, 0, 1.0};
Point(90) = {0.035378, -0.745170, 0, 1.0};
Point(91) = {0.036797, -0.744048, 0, 1.0};
Point(92) = {0.037485, -0.742985, 0, 1.0};
Point(93) = {0.037265, -0.741923, 0, 1.0};
Point(94) = {0.036153, -0.740728, 0, 1.0};
Point(95) = {0.034298, -0.739436, 0, 1.0};
Point(96) = {0.031716, -0.738099, 0, 1.0};
Point(97) = {0.028430, -0.736744, 0, 1.0};
Point(98) = {0.024467, -0.735394, 0, 1.0};
Point(99) = {0.019866, -0.734071, 0, 1.0};
Point(100) = {0.014667, -0.732788, 0, 1.0};
Point(101) = {0.008926, -0.731561, 0, 1.0};
Point(102) = {0.002700, -0.730410, 0, 1.0};
Point(103) = {-0.003941, -0.729350, 0, 1.0};
Point(104) = {-0.010926, -0.728423, 0, 1.0};
Point(105) = {-0.018231, -0.727679, 0, 1.0};
Point(106) = {-0.025873, -0.727092, 0, 1.0};
Point(107) = {-0.033786, -0.726574, 0, 1.0};
Point(108) = {-0.041853, -0.726074, 0, 1.0};
Point(109) = {-0.049956, -0.725567, 0, 1.0};
Point(110) = {-0.057974, -0.725039, 0, 1.0};
Point(111) = {-0.065794, -0.724481, 0, 1.0};
Point(112) = {-0.073299, -0.723893, 0, 1.0};
Point(113) = {-0.080377, -0.723278, 0, 1.0};
Point(114) = {-0.086926, -0.722645, 0, 1.0};
Point(115) = {-0.092842, -0.722006, 0, 1.0};
Point(116) = {-0.098035, -0.721383, 0, 1.0};
Point(117) = {-0.102426, -0.720801, 0, 1.0};
Point(118) = {-0.105946, -0.720281, 0, 1.0};
Point(119) = {-0.108531, -0.719846, 0, 1.0};
Point(120) = {-0.110115, -0.719536, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html