SetFactory("OpenCASCADE");

Point(1) = {0.074226, 0.730363, 0, 1.0};
Point(2) = {0.071640, 0.731081, 0, 1.0};
Point(3) = {0.069090, 0.731803, 0, 1.0};
Point(4) = {0.066578, 0.732527, 0, 1.0};
Point(5) = {0.064103, 0.733253, 0, 1.0};
Point(6) = {0.061665, 0.733978, 0, 1.0};
Point(7) = {0.059264, 0.734702, 0, 1.0};
Point(8) = {0.056901, 0.735423, 0, 1.0};
Point(9) = {0.054574, 0.736141, 0, 1.0};
Point(10) = {0.052284, 0.736853, 0, 1.0};
Point(11) = {0.050031, 0.737558, 0, 1.0};
Point(12) = {0.047814, 0.738256, 0, 1.0};
Point(13) = {0.045634, 0.738945, 0, 1.0};
Point(14) = {0.043488, 0.739623, 0, 1.0};
Point(15) = {0.041379, 0.740290, 0, 1.0};
Point(16) = {0.039304, 0.740944, 0, 1.0};
Point(17) = {0.037264, 0.741584, 0, 1.0};
Point(18) = {0.035257, 0.742208, 0, 1.0};
Point(19) = {0.033284, 0.742817, 0, 1.0};
Point(20) = {0.031344, 0.743407, 0, 1.0};
Point(21) = {0.029436, 0.743980, 0, 1.0};
Point(22) = {0.027559, 0.744532, 0, 1.0};
Point(23) = {0.025713, 0.745063, 0, 1.0};
Point(24) = {0.023897, 0.745573, 0, 1.0};
Point(25) = {0.022111, 0.746060, 0, 1.0};
Point(26) = {0.020353, 0.746522, 0, 1.0};
Point(27) = {0.018622, 0.746960, 0, 1.0};
Point(28) = {0.016918, 0.747372, 0, 1.0};
Point(29) = {0.015240, 0.747757, 0, 1.0};
Point(30) = {0.013587, 0.748114, 0, 1.0};
Point(31) = {0.011958, 0.748443, 0, 1.0};
Point(32) = {0.010351, 0.748742, 0, 1.0};
Point(33) = {0.008766, 0.749012, 0, 1.0};
Point(34) = {0.007202, 0.749250, 0, 1.0};
Point(35) = {0.005658, 0.749457, 0, 1.0};
Point(36) = {0.004132, 0.749631, 0, 1.0};
Point(37) = {0.002623, 0.749773, 0, 1.0};
Point(38) = {0.001131, 0.749881, 0, 1.0};
Point(39) = {-0.000346, 0.749956, 0, 1.0};
Point(40) = {-0.001810, 0.749995, 0, 1.0};
Point(41) = {-0.003261, 0.750000, 0, 1.0};
Point(42) = {-0.004700, 0.749969, 0, 1.0};
Point(43) = {-0.006129, 0.749903, 0, 1.0};
Point(44) = {-0.007550, 0.749800, 0, 1.0};
Point(45) = {-0.008962, 0.749661, 0, 1.0};
Point(46) = {-0.010369, 0.749486, 0, 1.0};
Point(47) = {-0.011768, 0.749274, 0, 1.0};
Point(48) = {-0.013151, 0.749026, 0, 1.0};
Point(49) = {-0.014508, 0.748745, 0, 1.0};
Point(50) = {-0.015828, 0.748432, 0, 1.0};
Point(51) = {-0.017100, 0.748088, 0, 1.0};
Point(52) = {-0.018314, 0.747715, 0, 1.0};
Point(53) = {-0.019460, 0.747315, 0, 1.0};
Point(54) = {-0.020526, 0.746889, 0, 1.0};
Point(55) = {-0.021503, 0.746439, 0, 1.0};
Point(56) = {-0.022380, 0.745968, 0, 1.0};
Point(57) = {-0.023147, 0.745477, 0, 1.0};
Point(58) = {-0.023796, 0.744967, 0, 1.0};
Point(59) = {-0.024315, 0.744441, 0, 1.0};
Point(60) = {-0.024694, 0.743900, 0, 1.0};
Point(61) = {-0.024926, 0.743346, 0, 1.0};
Point(62) = {-0.025000, 0.742782, 0, 1.0};
Point(63) = {-0.024907, 0.742209, 0, 1.0};
Point(64) = {-0.024639, 0.741630, 0, 1.0};
Point(65) = {-0.024186, 0.741045, 0, 1.0};
Point(66) = {-0.023541, 0.740457, 0, 1.0};
Point(67) = {-0.022695, 0.739869, 0, 1.0};
Point(68) = {-0.021640, 0.739281, 0, 1.0};
Point(69) = {-0.020368, 0.738696, 0, 1.0};
Point(70) = {-0.018873, 0.738116, 0, 1.0};
Point(71) = {-0.017146, 0.737543, 0, 1.0};
Point(72) = {-0.015181, 0.736979, 0, 1.0};
Point(73) = {-0.012972, 0.736425, 0, 1.0};
Point(74) = {-0.010512, 0.735884, 0, 1.0};
Point(75) = {-0.007794, 0.735358, 0, 1.0};
Point(76) = {-0.004815, 0.734848, 0, 1.0};
Point(77) = {-0.001567, 0.734356, 0, 1.0};
Point(78) = {0.001954, 0.733884, 0, 1.0};
Point(79) = {0.005752, 0.733434, 0, 1.0};
Point(80) = {0.009833, 0.733008, 0, 1.0};
Point(81) = {0.014199, 0.732607, 0, 1.0};
Point(82) = {0.018855, 0.732234, 0, 1.0};
Point(83) = {0.023804, 0.731889, 0, 1.0};
Point(84) = {0.029050, 0.731575, 0, 1.0};
Point(85) = {0.034593, 0.731293, 0, 1.0};
Point(86) = {0.040438, 0.731045, 0, 1.0};
Point(87) = {0.046585, 0.730832, 0, 1.0};
Point(88) = {0.053037, 0.730656, 0, 1.0};
Point(89) = {0.059794, 0.730518, 0, 1.0};
Point(90) = {0.066857, 0.730420, 0, 1.0};
Point(91) = {-0.074226, -0.730363, 0, 1.0};
Point(92) = {-0.071640, -0.731081, 0, 1.0};
Point(93) = {-0.069090, -0.731803, 0, 1.0};
Point(94) = {-0.066578, -0.732527, 0, 1.0};
Point(95) = {-0.064103, -0.733253, 0, 1.0};
Point(96) = {-0.061665, -0.733978, 0, 1.0};
Point(97) = {-0.059264, -0.734702, 0, 1.0};
Point(98) = {-0.056901, -0.735423, 0, 1.0};
Point(99) = {-0.054574, -0.736141, 0, 1.0};
Point(100) = {-0.052284, -0.736853, 0, 1.0};
Point(101) = {-0.050031, -0.737558, 0, 1.0};
Point(102) = {-0.047814, -0.738256, 0, 1.0};
Point(103) = {-0.045634, -0.738945, 0, 1.0};
Point(104) = {-0.043488, -0.739623, 0, 1.0};
Point(105) = {-0.041379, -0.740290, 0, 1.0};
Point(106) = {-0.039304, -0.740944, 0, 1.0};
Point(107) = {-0.037264, -0.741584, 0, 1.0};
Point(108) = {-0.035257, -0.742208, 0, 1.0};
Point(109) = {-0.033284, -0.742817, 0, 1.0};
Point(110) = {-0.031344, -0.743407, 0, 1.0};
Point(111) = {-0.029436, -0.743980, 0, 1.0};
Point(112) = {-0.027559, -0.744532, 0, 1.0};
Point(113) = {-0.025713, -0.745063, 0, 1.0};
Point(114) = {-0.023897, -0.745573, 0, 1.0};
Point(115) = {-0.022111, -0.746060, 0, 1.0};
Point(116) = {-0.020353, -0.746522, 0, 1.0};
Point(117) = {-0.018622, -0.746960, 0, 1.0};
Point(118) = {-0.016918, -0.747372, 0, 1.0};
Point(119) = {-0.015240, -0.747757, 0, 1.0};
Point(120) = {-0.013587, -0.748114, 0, 1.0};
Point(121) = {-0.011958, -0.748443, 0, 1.0};
Point(122) = {-0.010351, -0.748742, 0, 1.0};
Point(123) = {-0.008766, -0.749012, 0, 1.0};
Point(124) = {-0.007202, -0.749250, 0, 1.0};
Point(125) = {-0.005658, -0.749457, 0, 1.0};
Point(126) = {-0.004132, -0.749631, 0, 1.0};
Point(127) = {-0.002623, -0.749773, 0, 1.0};
Point(128) = {-0.001131, -0.749881, 0, 1.0};
Point(129) = {0.000346, -0.749956, 0, 1.0};
Point(130) = {0.001810, -0.749995, 0, 1.0};
Point(131) = {0.003261, -0.750000, 0, 1.0};
Point(132) = {0.004700, -0.749969, 0, 1.0};
Point(133) = {0.006129, -0.749903, 0, 1.0};
Point(134) = {0.007550, -0.749800, 0, 1.0};
Point(135) = {0.008962, -0.749661, 0, 1.0};
Point(136) = {0.010369, -0.749486, 0, 1.0};
Point(137) = {0.011768, -0.749274, 0, 1.0};
Point(138) = {0.013151, -0.749026, 0, 1.0};
Point(139) = {0.014508, -0.748745, 0, 1.0};
Point(140) = {0.015828, -0.748432, 0, 1.0};
Point(141) = {0.017100, -0.748088, 0, 1.0};
Point(142) = {0.018314, -0.747715, 0, 1.0};
Point(143) = {0.019460, -0.747315, 0, 1.0};
Point(144) = {0.020526, -0.746889, 0, 1.0};
Point(145) = {0.021503, -0.746439, 0, 1.0};
Point(146) = {0.022380, -0.745968, 0, 1.0};
Point(147) = {0.023147, -0.745477, 0, 1.0};
Point(148) = {0.023796, -0.744967, 0, 1.0};
Point(149) = {0.024315, -0.744441, 0, 1.0};
Point(150) = {0.024694, -0.743900, 0, 1.0};
Point(151) = {0.024926, -0.743346, 0, 1.0};
Point(152) = {0.025000, -0.742782, 0, 1.0};
Point(153) = {0.024907, -0.742209, 0, 1.0};
Point(154) = {0.024639, -0.741630, 0, 1.0};
Point(155) = {0.024186, -0.741045, 0, 1.0};
Point(156) = {0.023541, -0.740457, 0, 1.0};
Point(157) = {0.022695, -0.739869, 0, 1.0};
Point(158) = {0.021640, -0.739281, 0, 1.0};
Point(159) = {0.020368, -0.738696, 0, 1.0};
Point(160) = {0.018873, -0.738116, 0, 1.0};
Point(161) = {0.017146, -0.737543, 0, 1.0};
Point(162) = {0.015181, -0.736979, 0, 1.0};
Point(163) = {0.012972, -0.736425, 0, 1.0};
Point(164) = {0.010512, -0.735884, 0, 1.0};
Point(165) = {0.007794, -0.735358, 0, 1.0};
Point(166) = {0.004815, -0.734848, 0, 1.0};
Point(167) = {0.001567, -0.734356, 0, 1.0};
Point(168) = {-0.001954, -0.733884, 0, 1.0};
Point(169) = {-0.005752, -0.733434, 0, 1.0};
Point(170) = {-0.009833, -0.733008, 0, 1.0};
Point(171) = {-0.014199, -0.732607, 0, 1.0};
Point(172) = {-0.018855, -0.732234, 0, 1.0};
Point(173) = {-0.023804, -0.731889, 0, 1.0};
Point(174) = {-0.029050, -0.731575, 0, 1.0};
Point(175) = {-0.034593, -0.731293, 0, 1.0};
Point(176) = {-0.040438, -0.731045, 0, 1.0};
Point(177) = {-0.046585, -0.730832, 0, 1.0};
Point(178) = {-0.053037, -0.730656, 0, 1.0};
Point(179) = {-0.059794, -0.730518, 0, 1.0};
Point(180) = {-0.066857, -0.730420, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:35};
Spline(2) = {35:76};
Spline(3) = {76:90};
Spline(4) = {90,1};

// Lines: second blade (splines 5-8)
Spline(5) = {91:125};
Spline(6) = {125:166};
Spline(7) = {166:180};
Spline(8) = {180,91};

// Outer domain (points 20001-4 and lines)
Point(181) = {-13.50000000, -15.00000000, 0, 1.0};
Point(182) = {-13.50000000, 15.00000000, 0, 1.0};
Point(183) = {13.50000000, 15.00000000, 0, 1.0};
Point(184) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {181, 182};
Line(12) = {182, 183};
Line(13) = {183, 184};
Line(14) = {181, 184};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html