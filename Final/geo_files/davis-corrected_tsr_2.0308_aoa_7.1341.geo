SetFactory("OpenCASCADE");

Point(1) = {0.111339, 0.720545, 0, 1.0};
Point(2) = {0.107459, 0.721622, 0, 1.0};
Point(3) = {0.103635, 0.722704, 0, 1.0};
Point(4) = {0.099867, 0.723791, 0, 1.0};
Point(5) = {0.096154, 0.724879, 0, 1.0};
Point(6) = {0.092498, 0.725967, 0, 1.0};
Point(7) = {0.088897, 0.727053, 0, 1.0};
Point(8) = {0.085351, 0.728135, 0, 1.0};
Point(9) = {0.081861, 0.729211, 0, 1.0};
Point(10) = {0.078427, 0.730279, 0, 1.0};
Point(11) = {0.075047, 0.731337, 0, 1.0};
Point(12) = {0.071722, 0.732384, 0, 1.0};
Point(13) = {0.068450, 0.733417, 0, 1.0};
Point(14) = {0.065233, 0.734434, 0, 1.0};
Point(15) = {0.062068, 0.735434, 0, 1.0};
Point(16) = {0.058956, 0.736415, 0, 1.0};
Point(17) = {0.055895, 0.737375, 0, 1.0};
Point(18) = {0.052886, 0.738312, 0, 1.0};
Point(19) = {0.049926, 0.739225, 0, 1.0};
Point(20) = {0.047016, 0.740111, 0, 1.0};
Point(21) = {0.044154, 0.740969, 0, 1.0};
Point(22) = {0.041339, 0.741798, 0, 1.0};
Point(23) = {0.038570, 0.742595, 0, 1.0};
Point(24) = {0.035846, 0.743360, 0, 1.0};
Point(25) = {0.033166, 0.744089, 0, 1.0};
Point(26) = {0.030529, 0.744783, 0, 1.0};
Point(27) = {0.027933, 0.745440, 0, 1.0};
Point(28) = {0.025378, 0.746058, 0, 1.0};
Point(29) = {0.022860, 0.746635, 0, 1.0};
Point(30) = {0.020381, 0.747171, 0, 1.0};
Point(31) = {0.017936, 0.747664, 0, 1.0};
Point(32) = {0.015527, 0.748113, 0, 1.0};
Point(33) = {0.013149, 0.748517, 0, 1.0};
Point(34) = {0.010803, 0.748875, 0, 1.0};
Point(35) = {0.008486, 0.749185, 0, 1.0};
Point(36) = {0.006198, 0.749447, 0, 1.0};
Point(37) = {0.003935, 0.749660, 0, 1.0};
Point(38) = {0.001696, 0.749822, 0, 1.0};
Point(39) = {-0.000520, 0.749933, 0, 1.0};
Point(40) = {-0.002715, 0.749993, 0, 1.0};
Point(41) = {-0.004891, 0.750000, 0, 1.0};
Point(42) = {-0.007050, 0.749954, 0, 1.0};
Point(43) = {-0.009194, 0.749854, 0, 1.0};
Point(44) = {-0.011324, 0.749701, 0, 1.0};
Point(45) = {-0.013443, 0.749492, 0, 1.0};
Point(46) = {-0.015553, 0.749229, 0, 1.0};
Point(47) = {-0.017652, 0.748911, 0, 1.0};
Point(48) = {-0.019727, 0.748540, 0, 1.0};
Point(49) = {-0.021762, 0.748118, 0, 1.0};
Point(50) = {-0.023742, 0.747648, 0, 1.0};
Point(51) = {-0.025650, 0.747131, 0, 1.0};
Point(52) = {-0.027471, 0.746572, 0, 1.0};
Point(53) = {-0.029189, 0.745972, 0, 1.0};
Point(54) = {-0.030788, 0.745333, 0, 1.0};
Point(55) = {-0.032254, 0.744659, 0, 1.0};
Point(56) = {-0.033570, 0.743952, 0, 1.0};
Point(57) = {-0.034721, 0.743215, 0, 1.0};
Point(58) = {-0.035694, 0.742450, 0, 1.0};
Point(59) = {-0.036472, 0.741661, 0, 1.0};
Point(60) = {-0.037042, 0.740850, 0, 1.0};
Point(61) = {-0.037389, 0.740020, 0, 1.0};
Point(62) = {-0.037500, 0.739174, 0, 1.0};
Point(63) = {-0.037361, 0.738314, 0, 1.0};
Point(64) = {-0.036958, 0.737445, 0, 1.0};
Point(65) = {-0.036279, 0.736567, 0, 1.0};
Point(66) = {-0.035311, 0.735686, 0, 1.0};
Point(67) = {-0.034042, 0.734803, 0, 1.0};
Point(68) = {-0.032460, 0.733921, 0, 1.0};
Point(69) = {-0.030552, 0.733044, 0, 1.0};
Point(70) = {-0.028309, 0.732174, 0, 1.0};
Point(71) = {-0.025719, 0.731315, 0, 1.0};
Point(72) = {-0.022772, 0.730468, 0, 1.0};
Point(73) = {-0.019458, 0.729638, 0, 1.0};
Point(74) = {-0.015767, 0.728826, 0, 1.0};
Point(75) = {-0.011692, 0.728037, 0, 1.0};
Point(76) = {-0.007222, 0.727271, 0, 1.0};
Point(77) = {-0.002350, 0.726534, 0, 1.0};
Point(78) = {0.002931, 0.725826, 0, 1.0};
Point(79) = {0.008628, 0.725151, 0, 1.0};
Point(80) = {0.014749, 0.724512, 0, 1.0};
Point(81) = {0.021299, 0.723911, 0, 1.0};
Point(82) = {0.028283, 0.723351, 0, 1.0};
Point(83) = {0.035707, 0.722834, 0, 1.0};
Point(84) = {0.043574, 0.722362, 0, 1.0};
Point(85) = {0.051890, 0.721940, 0, 1.0};
Point(86) = {0.060657, 0.721567, 0, 1.0};
Point(87) = {0.069878, 0.721248, 0, 1.0};
Point(88) = {0.079555, 0.720984, 0, 1.0};
Point(89) = {0.089690, 0.720777, 0, 1.0};
Point(90) = {0.100285, 0.720630, 0, 1.0};
Point(91) = {-0.111339, -0.720545, 0, 1.0};
Point(92) = {-0.107459, -0.721622, 0, 1.0};
Point(93) = {-0.103635, -0.722704, 0, 1.0};
Point(94) = {-0.099867, -0.723791, 0, 1.0};
Point(95) = {-0.096154, -0.724879, 0, 1.0};
Point(96) = {-0.092498, -0.725967, 0, 1.0};
Point(97) = {-0.088897, -0.727053, 0, 1.0};
Point(98) = {-0.085351, -0.728135, 0, 1.0};
Point(99) = {-0.081861, -0.729211, 0, 1.0};
Point(100) = {-0.078427, -0.730279, 0, 1.0};
Point(101) = {-0.075047, -0.731337, 0, 1.0};
Point(102) = {-0.071722, -0.732384, 0, 1.0};
Point(103) = {-0.068450, -0.733417, 0, 1.0};
Point(104) = {-0.065233, -0.734434, 0, 1.0};
Point(105) = {-0.062068, -0.735434, 0, 1.0};
Point(106) = {-0.058956, -0.736415, 0, 1.0};
Point(107) = {-0.055895, -0.737375, 0, 1.0};
Point(108) = {-0.052886, -0.738312, 0, 1.0};
Point(109) = {-0.049926, -0.739225, 0, 1.0};
Point(110) = {-0.047016, -0.740111, 0, 1.0};
Point(111) = {-0.044154, -0.740969, 0, 1.0};
Point(112) = {-0.041339, -0.741798, 0, 1.0};
Point(113) = {-0.038570, -0.742595, 0, 1.0};
Point(114) = {-0.035846, -0.743360, 0, 1.0};
Point(115) = {-0.033166, -0.744089, 0, 1.0};
Point(116) = {-0.030529, -0.744783, 0, 1.0};
Point(117) = {-0.027933, -0.745440, 0, 1.0};
Point(118) = {-0.025378, -0.746058, 0, 1.0};
Point(119) = {-0.022860, -0.746635, 0, 1.0};
Point(120) = {-0.020381, -0.747171, 0, 1.0};
Point(121) = {-0.017936, -0.747664, 0, 1.0};
Point(122) = {-0.015527, -0.748113, 0, 1.0};
Point(123) = {-0.013149, -0.748517, 0, 1.0};
Point(124) = {-0.010803, -0.748875, 0, 1.0};
Point(125) = {-0.008486, -0.749185, 0, 1.0};
Point(126) = {-0.006198, -0.749447, 0, 1.0};
Point(127) = {-0.003935, -0.749660, 0, 1.0};
Point(128) = {-0.001696, -0.749822, 0, 1.0};
Point(129) = {0.000520, -0.749933, 0, 1.0};
Point(130) = {0.002715, -0.749993, 0, 1.0};
Point(131) = {0.004891, -0.750000, 0, 1.0};
Point(132) = {0.007050, -0.749954, 0, 1.0};
Point(133) = {0.009194, -0.749854, 0, 1.0};
Point(134) = {0.011324, -0.749701, 0, 1.0};
Point(135) = {0.013443, -0.749492, 0, 1.0};
Point(136) = {0.015553, -0.749229, 0, 1.0};
Point(137) = {0.017652, -0.748911, 0, 1.0};
Point(138) = {0.019727, -0.748540, 0, 1.0};
Point(139) = {0.021762, -0.748118, 0, 1.0};
Point(140) = {0.023742, -0.747648, 0, 1.0};
Point(141) = {0.025650, -0.747131, 0, 1.0};
Point(142) = {0.027471, -0.746572, 0, 1.0};
Point(143) = {0.029189, -0.745972, 0, 1.0};
Point(144) = {0.030788, -0.745333, 0, 1.0};
Point(145) = {0.032254, -0.744659, 0, 1.0};
Point(146) = {0.033570, -0.743952, 0, 1.0};
Point(147) = {0.034721, -0.743215, 0, 1.0};
Point(148) = {0.035694, -0.742450, 0, 1.0};
Point(149) = {0.036472, -0.741661, 0, 1.0};
Point(150) = {0.037042, -0.740850, 0, 1.0};
Point(151) = {0.037389, -0.740020, 0, 1.0};
Point(152) = {0.037500, -0.739174, 0, 1.0};
Point(153) = {0.037361, -0.738314, 0, 1.0};
Point(154) = {0.036958, -0.737445, 0, 1.0};
Point(155) = {0.036279, -0.736567, 0, 1.0};
Point(156) = {0.035311, -0.735686, 0, 1.0};
Point(157) = {0.034042, -0.734803, 0, 1.0};
Point(158) = {0.032460, -0.733921, 0, 1.0};
Point(159) = {0.030552, -0.733044, 0, 1.0};
Point(160) = {0.028309, -0.732174, 0, 1.0};
Point(161) = {0.025719, -0.731315, 0, 1.0};
Point(162) = {0.022772, -0.730468, 0, 1.0};
Point(163) = {0.019458, -0.729638, 0, 1.0};
Point(164) = {0.015767, -0.728826, 0, 1.0};
Point(165) = {0.011692, -0.728037, 0, 1.0};
Point(166) = {0.007222, -0.727271, 0, 1.0};
Point(167) = {0.002350, -0.726534, 0, 1.0};
Point(168) = {-0.002931, -0.725826, 0, 1.0};
Point(169) = {-0.008628, -0.725151, 0, 1.0};
Point(170) = {-0.014749, -0.724512, 0, 1.0};
Point(171) = {-0.021299, -0.723911, 0, 1.0};
Point(172) = {-0.028283, -0.723351, 0, 1.0};
Point(173) = {-0.035707, -0.722834, 0, 1.0};
Point(174) = {-0.043574, -0.722362, 0, 1.0};
Point(175) = {-0.051890, -0.721940, 0, 1.0};
Point(176) = {-0.060657, -0.721567, 0, 1.0};
Point(177) = {-0.069878, -0.721248, 0, 1.0};
Point(178) = {-0.079555, -0.720984, 0, 1.0};
Point(179) = {-0.089690, -0.720777, 0, 1.0};
Point(180) = {-0.100285, -0.720630, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:35};
Spline(2) = {35:76};
Spline(3) = {76:90};
Spline(4) = {90,1};

// Lines: second blade (splines 5-8)
Spline(5) = {91:125};
Spline(6) = {125:166};
Spline(7) = {166:180};
Spline(8) = {180,91};

// Outer domain (points 20001-4 and lines)
Point(181) = {-13.50000000, -15.00000000, 0, 1.0};
Point(182) = {-13.50000000, 15.00000000, 0, 1.0};
Point(183) = {13.50000000, 15.00000000, 0, 1.0};
Point(184) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {181, 182};
Line(12) = {182, 183};
Line(13) = {183, 184};
Line(14) = {181, 184};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html