SetFactory("OpenCASCADE");

Point(1) = {0.148452, 0.710726, 0, 1.0};
Point(2) = {0.143279, 0.712162, 0, 1.0};
Point(3) = {0.138181, 0.713606, 0, 1.0};
Point(4) = {0.133156, 0.715054, 0, 1.0};
Point(5) = {0.128206, 0.716505, 0, 1.0};
Point(6) = {0.123330, 0.717956, 0, 1.0};
Point(7) = {0.118529, 0.719404, 0, 1.0};
Point(8) = {0.113802, 0.720846, 0, 1.0};
Point(9) = {0.109148, 0.722281, 0, 1.0};
Point(10) = {0.104569, 0.723705, 0, 1.0};
Point(11) = {0.100062, 0.725116, 0, 1.0};
Point(12) = {0.095629, 0.726512, 0, 1.0};
Point(13) = {0.091267, 0.727889, 0, 1.0};
Point(14) = {0.086977, 0.729246, 0, 1.0};
Point(15) = {0.082757, 0.730579, 0, 1.0};
Point(16) = {0.078608, 0.731887, 0, 1.0};
Point(17) = {0.074527, 0.733167, 0, 1.0};
Point(18) = {0.070514, 0.734417, 0, 1.0};
Point(19) = {0.066568, 0.735633, 0, 1.0};
Point(20) = {0.062688, 0.736815, 0, 1.0};
Point(21) = {0.058871, 0.737959, 0, 1.0};
Point(22) = {0.055118, 0.739064, 0, 1.0};
Point(23) = {0.051427, 0.740127, 0, 1.0};
Point(24) = {0.047795, 0.741146, 0, 1.0};
Point(25) = {0.044222, 0.742119, 0, 1.0};
Point(26) = {0.040706, 0.743045, 0, 1.0};
Point(27) = {0.037244, 0.743920, 0, 1.0};
Point(28) = {0.033837, 0.744744, 0, 1.0};
Point(29) = {0.030481, 0.745514, 0, 1.0};
Point(30) = {0.027174, 0.746228, 0, 1.0};
Point(31) = {0.023915, 0.746886, 0, 1.0};
Point(32) = {0.020702, 0.747485, 0, 1.0};
Point(33) = {0.017532, 0.748023, 0, 1.0};
Point(34) = {0.014404, 0.748500, 0, 1.0};
Point(35) = {0.011315, 0.748914, 0, 1.0};
Point(36) = {0.008263, 0.749263, 0, 1.0};
Point(37) = {0.005246, 0.749546, 0, 1.0};
Point(38) = {0.002262, 0.749763, 0, 1.0};
Point(39) = {-0.000693, 0.749911, 0, 1.0};
Point(40) = {-0.003620, 0.749990, 0, 1.0};
Point(41) = {-0.006521, 0.750000, 0, 1.0};
Point(42) = {-0.009400, 0.749939, 0, 1.0};
Point(43) = {-0.012259, 0.749806, 0, 1.0};
Point(44) = {-0.015099, 0.749601, 0, 1.0};
Point(45) = {-0.017925, 0.749323, 0, 1.0};
Point(46) = {-0.020737, 0.748972, 0, 1.0};
Point(47) = {-0.023536, 0.748548, 0, 1.0};
Point(48) = {-0.026302, 0.748053, 0, 1.0};
Point(49) = {-0.029016, 0.747490, 0, 1.0};
Point(50) = {-0.031656, 0.746863, 0, 1.0};
Point(51) = {-0.034201, 0.746175, 0, 1.0};
Point(52) = {-0.036629, 0.745429, 0, 1.0};
Point(53) = {-0.038919, 0.744629, 0, 1.0};
Point(54) = {-0.041051, 0.743778, 0, 1.0};
Point(55) = {-0.043005, 0.742879, 0, 1.0};
Point(56) = {-0.044760, 0.741936, 0, 1.0};
Point(57) = {-0.046295, 0.740953, 0, 1.0};
Point(58) = {-0.047591, 0.739934, 0, 1.0};
Point(59) = {-0.048629, 0.738881, 0, 1.0};
Point(60) = {-0.049389, 0.737800, 0, 1.0};
Point(61) = {-0.049852, 0.736693, 0, 1.0};
Point(62) = {-0.050000, 0.735565, 0, 1.0};
Point(63) = {-0.049814, 0.734419, 0, 1.0};
Point(64) = {-0.049278, 0.733259, 0, 1.0};
Point(65) = {-0.048373, 0.732090, 0, 1.0};
Point(66) = {-0.047082, 0.730915, 0, 1.0};
Point(67) = {-0.045390, 0.729737, 0, 1.0};
Point(68) = {-0.043279, 0.728562, 0, 1.0};
Point(69) = {-0.040736, 0.727392, 0, 1.0};
Point(70) = {-0.037745, 0.726233, 0, 1.0};
Point(71) = {-0.034292, 0.725086, 0, 1.0};
Point(72) = {-0.030362, 0.723958, 0, 1.0};
Point(73) = {-0.025944, 0.722851, 0, 1.0};
Point(74) = {-0.021023, 0.721768, 0, 1.0};
Point(75) = {-0.015589, 0.720715, 0, 1.0};
Point(76) = {-0.009629, 0.719695, 0, 1.0};
Point(77) = {-0.003134, 0.718711, 0, 1.0};
Point(78) = {0.003908, 0.717768, 0, 1.0};
Point(79) = {0.011504, 0.716868, 0, 1.0};
Point(80) = {0.019665, 0.716016, 0, 1.0};
Point(81) = {0.028398, 0.715214, 0, 1.0};
Point(82) = {0.037711, 0.714467, 0, 1.0};
Point(83) = {0.047609, 0.713778, 0, 1.0};
Point(84) = {0.058099, 0.713150, 0, 1.0};
Point(85) = {0.069187, 0.712586, 0, 1.0};
Point(86) = {0.080876, 0.712090, 0, 1.0};
Point(87) = {0.093171, 0.711664, 0, 1.0};
Point(88) = {0.106074, 0.711312, 0, 1.0};
Point(89) = {0.119587, 0.711037, 0, 1.0};
Point(90) = {0.133713, 0.710840, 0, 1.0};
Point(91) = {-0.148452, -0.710726, 0, 1.0};
Point(92) = {-0.143279, -0.712162, 0, 1.0};
Point(93) = {-0.138181, -0.713606, 0, 1.0};
Point(94) = {-0.133156, -0.715054, 0, 1.0};
Point(95) = {-0.128206, -0.716505, 0, 1.0};
Point(96) = {-0.123330, -0.717956, 0, 1.0};
Point(97) = {-0.118529, -0.719404, 0, 1.0};
Point(98) = {-0.113802, -0.720846, 0, 1.0};
Point(99) = {-0.109148, -0.722281, 0, 1.0};
Point(100) = {-0.104569, -0.723705, 0, 1.0};
Point(101) = {-0.100062, -0.725116, 0, 1.0};
Point(102) = {-0.095629, -0.726512, 0, 1.0};
Point(103) = {-0.091267, -0.727889, 0, 1.0};
Point(104) = {-0.086977, -0.729246, 0, 1.0};
Point(105) = {-0.082757, -0.730579, 0, 1.0};
Point(106) = {-0.078608, -0.731887, 0, 1.0};
Point(107) = {-0.074527, -0.733167, 0, 1.0};
Point(108) = {-0.070514, -0.734417, 0, 1.0};
Point(109) = {-0.066568, -0.735633, 0, 1.0};
Point(110) = {-0.062688, -0.736815, 0, 1.0};
Point(111) = {-0.058871, -0.737959, 0, 1.0};
Point(112) = {-0.055118, -0.739064, 0, 1.0};
Point(113) = {-0.051427, -0.740127, 0, 1.0};
Point(114) = {-0.047795, -0.741146, 0, 1.0};
Point(115) = {-0.044222, -0.742119, 0, 1.0};
Point(116) = {-0.040706, -0.743045, 0, 1.0};
Point(117) = {-0.037244, -0.743920, 0, 1.0};
Point(118) = {-0.033837, -0.744744, 0, 1.0};
Point(119) = {-0.030481, -0.745514, 0, 1.0};
Point(120) = {-0.027174, -0.746228, 0, 1.0};
Point(121) = {-0.023915, -0.746886, 0, 1.0};
Point(122) = {-0.020702, -0.747485, 0, 1.0};
Point(123) = {-0.017532, -0.748023, 0, 1.0};
Point(124) = {-0.014404, -0.748500, 0, 1.0};
Point(125) = {-0.011315, -0.748914, 0, 1.0};
Point(126) = {-0.008263, -0.749263, 0, 1.0};
Point(127) = {-0.005246, -0.749546, 0, 1.0};
Point(128) = {-0.002262, -0.749763, 0, 1.0};
Point(129) = {0.000693, -0.749911, 0, 1.0};
Point(130) = {0.003620, -0.749990, 0, 1.0};
Point(131) = {0.006521, -0.750000, 0, 1.0};
Point(132) = {0.009400, -0.749939, 0, 1.0};
Point(133) = {0.012259, -0.749806, 0, 1.0};
Point(134) = {0.015099, -0.749601, 0, 1.0};
Point(135) = {0.017925, -0.749323, 0, 1.0};
Point(136) = {0.020737, -0.748972, 0, 1.0};
Point(137) = {0.023536, -0.748548, 0, 1.0};
Point(138) = {0.026302, -0.748053, 0, 1.0};
Point(139) = {0.029016, -0.747490, 0, 1.0};
Point(140) = {0.031656, -0.746863, 0, 1.0};
Point(141) = {0.034201, -0.746175, 0, 1.0};
Point(142) = {0.036629, -0.745429, 0, 1.0};
Point(143) = {0.038919, -0.744629, 0, 1.0};
Point(144) = {0.041051, -0.743778, 0, 1.0};
Point(145) = {0.043005, -0.742879, 0, 1.0};
Point(146) = {0.044760, -0.741936, 0, 1.0};
Point(147) = {0.046295, -0.740953, 0, 1.0};
Point(148) = {0.047591, -0.739934, 0, 1.0};
Point(149) = {0.048629, -0.738881, 0, 1.0};
Point(150) = {0.049389, -0.737800, 0, 1.0};
Point(151) = {0.049852, -0.736693, 0, 1.0};
Point(152) = {0.050000, -0.735565, 0, 1.0};
Point(153) = {0.049814, -0.734419, 0, 1.0};
Point(154) = {0.049278, -0.733259, 0, 1.0};
Point(155) = {0.048373, -0.732090, 0, 1.0};
Point(156) = {0.047082, -0.730915, 0, 1.0};
Point(157) = {0.045390, -0.729737, 0, 1.0};
Point(158) = {0.043279, -0.728562, 0, 1.0};
Point(159) = {0.040736, -0.727392, 0, 1.0};
Point(160) = {0.037745, -0.726233, 0, 1.0};
Point(161) = {0.034292, -0.725086, 0, 1.0};
Point(162) = {0.030362, -0.723958, 0, 1.0};
Point(163) = {0.025944, -0.722851, 0, 1.0};
Point(164) = {0.021023, -0.721768, 0, 1.0};
Point(165) = {0.015589, -0.720715, 0, 1.0};
Point(166) = {0.009629, -0.719695, 0, 1.0};
Point(167) = {0.003134, -0.718711, 0, 1.0};
Point(168) = {-0.003908, -0.717768, 0, 1.0};
Point(169) = {-0.011504, -0.716868, 0, 1.0};
Point(170) = {-0.019665, -0.716016, 0, 1.0};
Point(171) = {-0.028398, -0.715214, 0, 1.0};
Point(172) = {-0.037711, -0.714467, 0, 1.0};
Point(173) = {-0.047609, -0.713778, 0, 1.0};
Point(174) = {-0.058099, -0.713150, 0, 1.0};
Point(175) = {-0.069187, -0.712586, 0, 1.0};
Point(176) = {-0.080876, -0.712090, 0, 1.0};
Point(177) = {-0.093171, -0.711664, 0, 1.0};
Point(178) = {-0.106074, -0.711312, 0, 1.0};
Point(179) = {-0.119587, -0.711037, 0, 1.0};
Point(180) = {-0.133713, -0.710840, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:35};
Spline(2) = {35:76};
Spline(3) = {76:90};
Spline(4) = {90,1};

// Lines: second blade (splines 5-8)
Spline(5) = {91:125};
Spline(6) = {125:166};
Spline(7) = {166:180};
Spline(8) = {180,91};

// Outer domain (points 20001-4 and lines)
Point(181) = {-13.50000000, -15.00000000, 0, 1.0};
Point(182) = {-13.50000000, 15.00000000, 0, 1.0};
Point(183) = {13.50000000, 15.00000000, 0, 1.0};
Point(184) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {181, 182};
Line(12) = {182, 183};
Line(13) = {183, 184};
Line(14) = {181, 184};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html