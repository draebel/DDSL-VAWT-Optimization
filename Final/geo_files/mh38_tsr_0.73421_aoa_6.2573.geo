SetFactory("OpenCASCADE");

Point(1) = {0.111606, 0.725813, 0, 1.0};
Point(2) = {0.111140, 0.725944, 0, 1.0};
Point(3) = {0.109767, 0.726326, 0, 1.0};
Point(4) = {0.107536, 0.726956, 0, 1.0};
Point(5) = {0.104495, 0.727831, 0, 1.0};
Point(6) = {0.100706, 0.728942, 0, 1.0};
Point(7) = {0.096237, 0.730272, 0, 1.0};
Point(8) = {0.091161, 0.731796, 0, 1.0};
Point(9) = {0.085560, 0.733485, 0, 1.0};
Point(10) = {0.079515, 0.735301, 0, 1.0};
Point(11) = {0.073114, 0.737203, 0, 1.0};
Point(12) = {0.066444, 0.739136, 0, 1.0};
Point(13) = {0.059584, 0.741044, 0, 1.0};
Point(14) = {0.052606, 0.742863, 0, 1.0};
Point(15) = {0.045566, 0.744533, 0, 1.0};
Point(16) = {0.038508, 0.746009, 0, 1.0};
Point(17) = {0.031472, 0.747261, 0, 1.0};
Point(18) = {0.024497, 0.748276, 0, 1.0};
Point(19) = {0.017634, 0.749054, 0, 1.0};
Point(20) = {0.010943, 0.749599, 0, 1.0};
Point(21) = {0.004480, 0.749912, 0, 1.0};
Point(22) = {-0.001698, 0.750000, 0, 1.0};
Point(23) = {-0.007536, 0.749874, 0, 1.0};
Point(24) = {-0.012977, 0.749547, 0, 1.0};
Point(25) = {-0.017974, 0.749031, 0, 1.0};
Point(26) = {-0.022485, 0.748346, 0, 1.0};
Point(27) = {-0.026471, 0.747519, 0, 1.0};
Point(28) = {-0.029897, 0.746579, 0, 1.0};
Point(29) = {-0.032728, 0.745564, 0, 1.0};
Point(30) = {-0.034935, 0.744516, 0, 1.0};
Point(31) = {-0.036487, 0.743482, 0, 1.0};
Point(32) = {-0.037061, 0.742931, 0, 1.0};
Point(33) = {-0.037278, 0.742655, 0, 1.0};
Point(34) = {-0.037427, 0.742396, 0, 1.0};
Point(35) = {-0.037486, 0.742236, 0, 1.0};
Point(36) = {-0.037502, 0.742091, 0, 1.0};
Point(37) = {-0.037468, 0.741949, 0, 1.0};
Point(38) = {-0.037391, 0.741797, 0, 1.0};
Point(39) = {-0.037211, 0.741559, 0, 1.0};
Point(40) = {-0.036961, 0.741314, 0, 1.0};
Point(41) = {-0.036472, 0.740942, 0, 1.0};
Point(42) = {-0.034814, 0.740088, 0, 1.0};
Point(43) = {-0.032413, 0.739279, 0, 1.0};
Point(44) = {-0.029261, 0.738547, 0, 1.0};
Point(45) = {-0.025360, 0.737902, 0, 1.0};
Point(46) = {-0.020718, 0.737335, 0, 1.0};
Point(47) = {-0.015369, 0.736823, 0, 1.0};
Point(48) = {-0.009367, 0.736348, 0, 1.0};
Point(49) = {-0.002779, 0.735895, 0, 1.0};
Point(50) = {0.004321, 0.735449, 0, 1.0};
Point(51) = {0.011851, 0.735000, 0, 1.0};
Point(52) = {0.019722, 0.734536, 0, 1.0};
Point(53) = {0.027838, 0.734049, 0, 1.0};
Point(54) = {0.036100, 0.733530, 0, 1.0};
Point(55) = {0.044404, 0.732973, 0, 1.0};
Point(56) = {0.052642, 0.732374, 0, 1.0};
Point(57) = {0.060706, 0.731736, 0, 1.0};
Point(58) = {0.068488, 0.731063, 0, 1.0};
Point(59) = {0.075886, 0.730367, 0, 1.0};
Point(60) = {0.082800, 0.729660, 0, 1.0};
Point(61) = {0.089140, 0.728959, 0, 1.0};
Point(62) = {0.094825, 0.728280, 0, 1.0};
Point(63) = {0.099778, 0.727644, 0, 1.0};
Point(64) = {0.103937, 0.727069, 0, 1.0};
Point(65) = {0.107245, 0.726573, 0, 1.0};
Point(66) = {0.109652, 0.726177, 0, 1.0};
Point(67) = {0.111115, 0.725909, 0, 1.0};
Point(68) = {-0.111606, -0.725813, 0, 1.0};
Point(69) = {-0.111140, -0.725944, 0, 1.0};
Point(70) = {-0.109767, -0.726326, 0, 1.0};
Point(71) = {-0.107536, -0.726956, 0, 1.0};
Point(72) = {-0.104495, -0.727831, 0, 1.0};
Point(73) = {-0.100706, -0.728942, 0, 1.0};
Point(74) = {-0.096237, -0.730272, 0, 1.0};
Point(75) = {-0.091161, -0.731796, 0, 1.0};
Point(76) = {-0.085560, -0.733485, 0, 1.0};
Point(77) = {-0.079515, -0.735301, 0, 1.0};
Point(78) = {-0.073114, -0.737203, 0, 1.0};
Point(79) = {-0.066444, -0.739136, 0, 1.0};
Point(80) = {-0.059584, -0.741044, 0, 1.0};
Point(81) = {-0.052606, -0.742863, 0, 1.0};
Point(82) = {-0.045566, -0.744533, 0, 1.0};
Point(83) = {-0.038508, -0.746009, 0, 1.0};
Point(84) = {-0.031472, -0.747261, 0, 1.0};
Point(85) = {-0.024497, -0.748276, 0, 1.0};
Point(86) = {-0.017634, -0.749054, 0, 1.0};
Point(87) = {-0.010943, -0.749599, 0, 1.0};
Point(88) = {-0.004480, -0.749912, 0, 1.0};
Point(89) = {0.001698, -0.750000, 0, 1.0};
Point(90) = {0.007536, -0.749874, 0, 1.0};
Point(91) = {0.012977, -0.749547, 0, 1.0};
Point(92) = {0.017974, -0.749031, 0, 1.0};
Point(93) = {0.022485, -0.748346, 0, 1.0};
Point(94) = {0.026471, -0.747519, 0, 1.0};
Point(95) = {0.029897, -0.746579, 0, 1.0};
Point(96) = {0.032728, -0.745564, 0, 1.0};
Point(97) = {0.034935, -0.744516, 0, 1.0};
Point(98) = {0.036487, -0.743482, 0, 1.0};
Point(99) = {0.037061, -0.742931, 0, 1.0};
Point(100) = {0.037278, -0.742655, 0, 1.0};
Point(101) = {0.037427, -0.742396, 0, 1.0};
Point(102) = {0.037486, -0.742236, 0, 1.0};
Point(103) = {0.037502, -0.742091, 0, 1.0};
Point(104) = {0.037468, -0.741949, 0, 1.0};
Point(105) = {0.037391, -0.741797, 0, 1.0};
Point(106) = {0.037211, -0.741559, 0, 1.0};
Point(107) = {0.036961, -0.741314, 0, 1.0};
Point(108) = {0.036472, -0.740942, 0, 1.0};
Point(109) = {0.034814, -0.740088, 0, 1.0};
Point(110) = {0.032413, -0.739279, 0, 1.0};
Point(111) = {0.029261, -0.738547, 0, 1.0};
Point(112) = {0.025360, -0.737902, 0, 1.0};
Point(113) = {0.020718, -0.737335, 0, 1.0};
Point(114) = {0.015369, -0.736823, 0, 1.0};
Point(115) = {0.009367, -0.736348, 0, 1.0};
Point(116) = {0.002779, -0.735895, 0, 1.0};
Point(117) = {-0.004321, -0.735449, 0, 1.0};
Point(118) = {-0.011851, -0.735000, 0, 1.0};
Point(119) = {-0.019722, -0.734536, 0, 1.0};
Point(120) = {-0.027838, -0.734049, 0, 1.0};
Point(121) = {-0.036100, -0.733530, 0, 1.0};
Point(122) = {-0.044404, -0.732973, 0, 1.0};
Point(123) = {-0.052642, -0.732374, 0, 1.0};
Point(124) = {-0.060706, -0.731736, 0, 1.0};
Point(125) = {-0.068488, -0.731063, 0, 1.0};
Point(126) = {-0.075886, -0.730367, 0, 1.0};
Point(127) = {-0.082800, -0.729660, 0, 1.0};
Point(128) = {-0.089140, -0.728959, 0, 1.0};
Point(129) = {-0.094825, -0.728280, 0, 1.0};
Point(130) = {-0.099778, -0.727644, 0, 1.0};
Point(131) = {-0.103937, -0.727069, 0, 1.0};
Point(132) = {-0.107245, -0.726573, 0, 1.0};
Point(133) = {-0.109652, -0.726177, 0, 1.0};
Point(134) = {-0.111115, -0.725909, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html