SetFactory("OpenCASCADE");

Point(1) = {0.111838, 0.725812, 0, 1.0};
Point(2) = {0.111371, 0.725943, 0, 1.0};
Point(3) = {0.109999, 0.726325, 0, 1.0};
Point(4) = {0.107767, 0.726955, 0, 1.0};
Point(5) = {0.104726, 0.727830, 0, 1.0};
Point(6) = {0.100937, 0.728941, 0, 1.0};
Point(7) = {0.096467, 0.730271, 0, 1.0};
Point(8) = {0.091392, 0.731795, 0, 1.0};
Point(9) = {0.085790, 0.733484, 0, 1.0};
Point(10) = {0.079745, 0.735301, 0, 1.0};
Point(11) = {0.073343, 0.737202, 0, 1.0};
Point(12) = {0.066673, 0.739136, 0, 1.0};
Point(13) = {0.059813, 0.741043, 0, 1.0};
Point(14) = {0.052835, 0.742863, 0, 1.0};
Point(15) = {0.045795, 0.744533, 0, 1.0};
Point(16) = {0.038736, 0.746009, 0, 1.0};
Point(17) = {0.031700, 0.747261, 0, 1.0};
Point(18) = {0.024725, 0.748276, 0, 1.0};
Point(19) = {0.017862, 0.749054, 0, 1.0};
Point(20) = {0.011170, 0.749599, 0, 1.0};
Point(21) = {0.004706, 0.749912, 0, 1.0};
Point(22) = {-0.001472, 0.750000, 0, 1.0};
Point(23) = {-0.007309, 0.749874, 0, 1.0};
Point(24) = {-0.012751, 0.749547, 0, 1.0};
Point(25) = {-0.017748, 0.749031, 0, 1.0};
Point(26) = {-0.022260, 0.748346, 0, 1.0};
Point(27) = {-0.026246, 0.747519, 0, 1.0};
Point(28) = {-0.029671, 0.746579, 0, 1.0};
Point(29) = {-0.032503, 0.745564, 0, 1.0};
Point(30) = {-0.034710, 0.744515, 0, 1.0};
Point(31) = {-0.036262, 0.743482, 0, 1.0};
Point(32) = {-0.036836, 0.742931, 0, 1.0};
Point(33) = {-0.037053, 0.742654, 0, 1.0};
Point(34) = {-0.037202, 0.742395, 0, 1.0};
Point(35) = {-0.037260, 0.742235, 0, 1.0};
Point(36) = {-0.037277, 0.742090, 0, 1.0};
Point(37) = {-0.037243, 0.741948, 0, 1.0};
Point(38) = {-0.037166, 0.741797, 0, 1.0};
Point(39) = {-0.036986, 0.741559, 0, 1.0};
Point(40) = {-0.036736, 0.741313, 0, 1.0};
Point(41) = {-0.036247, 0.740941, 0, 1.0};
Point(42) = {-0.034589, 0.740087, 0, 1.0};
Point(43) = {-0.032187, 0.739279, 0, 1.0};
Point(44) = {-0.029036, 0.738547, 0, 1.0};
Point(45) = {-0.025134, 0.737902, 0, 1.0};
Point(46) = {-0.020492, 0.737334, 0, 1.0};
Point(47) = {-0.015143, 0.736823, 0, 1.0};
Point(48) = {-0.009141, 0.736348, 0, 1.0};
Point(49) = {-0.002553, 0.735894, 0, 1.0};
Point(50) = {0.004548, 0.735449, 0, 1.0};
Point(51) = {0.012078, 0.734999, 0, 1.0};
Point(52) = {0.019949, 0.734536, 0, 1.0};
Point(53) = {0.028066, 0.734048, 0, 1.0};
Point(54) = {0.036328, 0.733529, 0, 1.0};
Point(55) = {0.044632, 0.732972, 0, 1.0};
Point(56) = {0.052871, 0.732373, 0, 1.0};
Point(57) = {0.060935, 0.731735, 0, 1.0};
Point(58) = {0.068718, 0.731062, 0, 1.0};
Point(59) = {0.076115, 0.730366, 0, 1.0};
Point(60) = {0.083030, 0.729659, 0, 1.0};
Point(61) = {0.089371, 0.728958, 0, 1.0};
Point(62) = {0.095055, 0.728279, 0, 1.0};
Point(63) = {0.100009, 0.727643, 0, 1.0};
Point(64) = {0.104168, 0.727068, 0, 1.0};
Point(65) = {0.107476, 0.726572, 0, 1.0};
Point(66) = {0.109883, 0.726176, 0, 1.0};
Point(67) = {0.111346, 0.725908, 0, 1.0};
Point(68) = {-0.111838, -0.725812, 0, 1.0};
Point(69) = {-0.111371, -0.725943, 0, 1.0};
Point(70) = {-0.109999, -0.726325, 0, 1.0};
Point(71) = {-0.107767, -0.726955, 0, 1.0};
Point(72) = {-0.104726, -0.727830, 0, 1.0};
Point(73) = {-0.100937, -0.728941, 0, 1.0};
Point(74) = {-0.096467, -0.730271, 0, 1.0};
Point(75) = {-0.091392, -0.731795, 0, 1.0};
Point(76) = {-0.085790, -0.733484, 0, 1.0};
Point(77) = {-0.079745, -0.735301, 0, 1.0};
Point(78) = {-0.073343, -0.737202, 0, 1.0};
Point(79) = {-0.066673, -0.739136, 0, 1.0};
Point(80) = {-0.059813, -0.741043, 0, 1.0};
Point(81) = {-0.052835, -0.742863, 0, 1.0};
Point(82) = {-0.045795, -0.744533, 0, 1.0};
Point(83) = {-0.038736, -0.746009, 0, 1.0};
Point(84) = {-0.031700, -0.747261, 0, 1.0};
Point(85) = {-0.024725, -0.748276, 0, 1.0};
Point(86) = {-0.017862, -0.749054, 0, 1.0};
Point(87) = {-0.011170, -0.749599, 0, 1.0};
Point(88) = {-0.004706, -0.749912, 0, 1.0};
Point(89) = {0.001472, -0.750000, 0, 1.0};
Point(90) = {0.007309, -0.749874, 0, 1.0};
Point(91) = {0.012751, -0.749547, 0, 1.0};
Point(92) = {0.017748, -0.749031, 0, 1.0};
Point(93) = {0.022260, -0.748346, 0, 1.0};
Point(94) = {0.026246, -0.747519, 0, 1.0};
Point(95) = {0.029671, -0.746579, 0, 1.0};
Point(96) = {0.032503, -0.745564, 0, 1.0};
Point(97) = {0.034710, -0.744515, 0, 1.0};
Point(98) = {0.036262, -0.743482, 0, 1.0};
Point(99) = {0.036836, -0.742931, 0, 1.0};
Point(100) = {0.037053, -0.742654, 0, 1.0};
Point(101) = {0.037202, -0.742395, 0, 1.0};
Point(102) = {0.037260, -0.742235, 0, 1.0};
Point(103) = {0.037277, -0.742090, 0, 1.0};
Point(104) = {0.037243, -0.741948, 0, 1.0};
Point(105) = {0.037166, -0.741797, 0, 1.0};
Point(106) = {0.036986, -0.741559, 0, 1.0};
Point(107) = {0.036736, -0.741313, 0, 1.0};
Point(108) = {0.036247, -0.740941, 0, 1.0};
Point(109) = {0.034589, -0.740087, 0, 1.0};
Point(110) = {0.032187, -0.739279, 0, 1.0};
Point(111) = {0.029036, -0.738547, 0, 1.0};
Point(112) = {0.025134, -0.737902, 0, 1.0};
Point(113) = {0.020492, -0.737334, 0, 1.0};
Point(114) = {0.015143, -0.736823, 0, 1.0};
Point(115) = {0.009141, -0.736348, 0, 1.0};
Point(116) = {0.002553, -0.735894, 0, 1.0};
Point(117) = {-0.004548, -0.735449, 0, 1.0};
Point(118) = {-0.012078, -0.734999, 0, 1.0};
Point(119) = {-0.019949, -0.734536, 0, 1.0};
Point(120) = {-0.028066, -0.734048, 0, 1.0};
Point(121) = {-0.036328, -0.733529, 0, 1.0};
Point(122) = {-0.044632, -0.732972, 0, 1.0};
Point(123) = {-0.052871, -0.732373, 0, 1.0};
Point(124) = {-0.060935, -0.731735, 0, 1.0};
Point(125) = {-0.068718, -0.731062, 0, 1.0};
Point(126) = {-0.076115, -0.730366, 0, 1.0};
Point(127) = {-0.083030, -0.729659, 0, 1.0};
Point(128) = {-0.089371, -0.728958, 0, 1.0};
Point(129) = {-0.095055, -0.728279, 0, 1.0};
Point(130) = {-0.100009, -0.727643, 0, 1.0};
Point(131) = {-0.104168, -0.727068, 0, 1.0};
Point(132) = {-0.107476, -0.726572, 0, 1.0};
Point(133) = {-0.109883, -0.726176, 0, 1.0};
Point(134) = {-0.111346, -0.725908, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html