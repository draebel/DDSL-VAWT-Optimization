SetFactory("OpenCASCADE");

Point(1) = {0.074561, 0.725812, 0, 1.0};
Point(2) = {0.074095, 0.725943, 0, 1.0};
Point(3) = {0.072722, 0.726325, 0, 1.0};
Point(4) = {0.070491, 0.726955, 0, 1.0};
Point(5) = {0.067449, 0.727830, 0, 1.0};
Point(6) = {0.063660, 0.728941, 0, 1.0};
Point(7) = {0.059190, 0.730271, 0, 1.0};
Point(8) = {0.054115, 0.731795, 0, 1.0};
Point(9) = {0.048513, 0.733484, 0, 1.0};
Point(10) = {0.042468, 0.735301, 0, 1.0};
Point(11) = {0.036067, 0.737202, 0, 1.0};
Point(12) = {0.029396, 0.739136, 0, 1.0};
Point(13) = {0.022536, 0.741043, 0, 1.0};
Point(14) = {0.015558, 0.742863, 0, 1.0};
Point(15) = {0.008518, 0.744533, 0, 1.0};
Point(16) = {0.001459, 0.746009, 0, 1.0};
Point(17) = {-0.005577, 0.747261, 0, 1.0};
Point(18) = {-0.012552, 0.748276, 0, 1.0};
Point(19) = {-0.019415, 0.749054, 0, 1.0};
Point(20) = {-0.026107, 0.749599, 0, 1.0};
Point(21) = {-0.032570, 0.749912, 0, 1.0};
Point(22) = {-0.038748, 0.750000, 0, 1.0};
Point(23) = {-0.044586, 0.749874, 0, 1.0};
Point(24) = {-0.050028, 0.749547, 0, 1.0};
Point(25) = {-0.055025, 0.749031, 0, 1.0};
Point(26) = {-0.059536, 0.748346, 0, 1.0};
Point(27) = {-0.063522, 0.747519, 0, 1.0};
Point(28) = {-0.066948, 0.746579, 0, 1.0};
Point(29) = {-0.069779, 0.745564, 0, 1.0};
Point(30) = {-0.071986, 0.744515, 0, 1.0};
Point(31) = {-0.073538, 0.743482, 0, 1.0};
Point(32) = {-0.074112, 0.742931, 0, 1.0};
Point(33) = {-0.074329, 0.742654, 0, 1.0};
Point(34) = {-0.074478, 0.742395, 0, 1.0};
Point(35) = {-0.074537, 0.742235, 0, 1.0};
Point(36) = {-0.074553, 0.742090, 0, 1.0};
Point(37) = {-0.074520, 0.741948, 0, 1.0};
Point(38) = {-0.074442, 0.741797, 0, 1.0};
Point(39) = {-0.074262, 0.741559, 0, 1.0};
Point(40) = {-0.074012, 0.741313, 0, 1.0};
Point(41) = {-0.073523, 0.740941, 0, 1.0};
Point(42) = {-0.071865, 0.740087, 0, 1.0};
Point(43) = {-0.069464, 0.739279, 0, 1.0};
Point(44) = {-0.066313, 0.738547, 0, 1.0};
Point(45) = {-0.062411, 0.737902, 0, 1.0};
Point(46) = {-0.057769, 0.737334, 0, 1.0};
Point(47) = {-0.052419, 0.736823, 0, 1.0};
Point(48) = {-0.046418, 0.736348, 0, 1.0};
Point(49) = {-0.039829, 0.735894, 0, 1.0};
Point(50) = {-0.032728, 0.735449, 0, 1.0};
Point(51) = {-0.025198, 0.734999, 0, 1.0};
Point(52) = {-0.017327, 0.734536, 0, 1.0};
Point(53) = {-0.009211, 0.734048, 0, 1.0};
Point(54) = {-0.000949, 0.733529, 0, 1.0};
Point(55) = {0.007356, 0.732972, 0, 1.0};
Point(56) = {0.015594, 0.732373, 0, 1.0};
Point(57) = {0.023659, 0.731735, 0, 1.0};
Point(58) = {0.031441, 0.731062, 0, 1.0};
Point(59) = {0.038839, 0.730366, 0, 1.0};
Point(60) = {0.045753, 0.729659, 0, 1.0};
Point(61) = {0.052094, 0.728958, 0, 1.0};
Point(62) = {0.057779, 0.728279, 0, 1.0};
Point(63) = {0.062732, 0.727643, 0, 1.0};
Point(64) = {0.066891, 0.727068, 0, 1.0};
Point(65) = {0.070199, 0.726572, 0, 1.0};
Point(66) = {0.072606, 0.726176, 0, 1.0};
Point(67) = {0.074069, 0.725908, 0, 1.0};
Point(68) = {-0.074561, -0.725812, 0, 1.0};
Point(69) = {-0.074095, -0.725943, 0, 1.0};
Point(70) = {-0.072722, -0.726325, 0, 1.0};
Point(71) = {-0.070491, -0.726955, 0, 1.0};
Point(72) = {-0.067449, -0.727830, 0, 1.0};
Point(73) = {-0.063660, -0.728941, 0, 1.0};
Point(74) = {-0.059190, -0.730271, 0, 1.0};
Point(75) = {-0.054115, -0.731795, 0, 1.0};
Point(76) = {-0.048513, -0.733484, 0, 1.0};
Point(77) = {-0.042468, -0.735301, 0, 1.0};
Point(78) = {-0.036067, -0.737202, 0, 1.0};
Point(79) = {-0.029396, -0.739136, 0, 1.0};
Point(80) = {-0.022536, -0.741043, 0, 1.0};
Point(81) = {-0.015558, -0.742863, 0, 1.0};
Point(82) = {-0.008518, -0.744533, 0, 1.0};
Point(83) = {-0.001459, -0.746009, 0, 1.0};
Point(84) = {0.005577, -0.747261, 0, 1.0};
Point(85) = {0.012552, -0.748276, 0, 1.0};
Point(86) = {0.019415, -0.749054, 0, 1.0};
Point(87) = {0.026107, -0.749599, 0, 1.0};
Point(88) = {0.032570, -0.749912, 0, 1.0};
Point(89) = {0.038748, -0.750000, 0, 1.0};
Point(90) = {0.044586, -0.749874, 0, 1.0};
Point(91) = {0.050028, -0.749547, 0, 1.0};
Point(92) = {0.055025, -0.749031, 0, 1.0};
Point(93) = {0.059536, -0.748346, 0, 1.0};
Point(94) = {0.063522, -0.747519, 0, 1.0};
Point(95) = {0.066948, -0.746579, 0, 1.0};
Point(96) = {0.069779, -0.745564, 0, 1.0};
Point(97) = {0.071986, -0.744515, 0, 1.0};
Point(98) = {0.073538, -0.743482, 0, 1.0};
Point(99) = {0.074112, -0.742931, 0, 1.0};
Point(100) = {0.074329, -0.742654, 0, 1.0};
Point(101) = {0.074478, -0.742395, 0, 1.0};
Point(102) = {0.074537, -0.742235, 0, 1.0};
Point(103) = {0.074553, -0.742090, 0, 1.0};
Point(104) = {0.074520, -0.741948, 0, 1.0};
Point(105) = {0.074442, -0.741797, 0, 1.0};
Point(106) = {0.074262, -0.741559, 0, 1.0};
Point(107) = {0.074012, -0.741313, 0, 1.0};
Point(108) = {0.073523, -0.740941, 0, 1.0};
Point(109) = {0.071865, -0.740087, 0, 1.0};
Point(110) = {0.069464, -0.739279, 0, 1.0};
Point(111) = {0.066313, -0.738547, 0, 1.0};
Point(112) = {0.062411, -0.737902, 0, 1.0};
Point(113) = {0.057769, -0.737334, 0, 1.0};
Point(114) = {0.052419, -0.736823, 0, 1.0};
Point(115) = {0.046418, -0.736348, 0, 1.0};
Point(116) = {0.039829, -0.735894, 0, 1.0};
Point(117) = {0.032728, -0.735449, 0, 1.0};
Point(118) = {0.025198, -0.734999, 0, 1.0};
Point(119) = {0.017327, -0.734536, 0, 1.0};
Point(120) = {0.009211, -0.734048, 0, 1.0};
Point(121) = {0.000949, -0.733529, 0, 1.0};
Point(122) = {-0.007356, -0.732972, 0, 1.0};
Point(123) = {-0.015594, -0.732373, 0, 1.0};
Point(124) = {-0.023659, -0.731735, 0, 1.0};
Point(125) = {-0.031441, -0.731062, 0, 1.0};
Point(126) = {-0.038839, -0.730366, 0, 1.0};
Point(127) = {-0.045753, -0.729659, 0, 1.0};
Point(128) = {-0.052094, -0.728958, 0, 1.0};
Point(129) = {-0.057779, -0.728279, 0, 1.0};
Point(130) = {-0.062732, -0.727643, 0, 1.0};
Point(131) = {-0.066891, -0.727068, 0, 1.0};
Point(132) = {-0.070199, -0.726572, 0, 1.0};
Point(133) = {-0.072606, -0.726176, 0, 1.0};
Point(134) = {-0.074069, -0.725908, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html