SetFactory("OpenCASCADE");

Point(1) = {0.074404, 0.733875, 0, 1.0};
Point(2) = {0.074093, 0.733962, 0, 1.0};
Point(3) = {0.073178, 0.734217, 0, 1.0};
Point(4) = {0.071691, 0.734637, 0, 1.0};
Point(5) = {0.069663, 0.735221, 0, 1.0};
Point(6) = {0.067137, 0.735961, 0, 1.0};
Point(7) = {0.064158, 0.736848, 0, 1.0};
Point(8) = {0.060774, 0.737864, 0, 1.0};
Point(9) = {0.057040, 0.738990, 0, 1.0};
Point(10) = {0.053010, 0.740201, 0, 1.0};
Point(11) = {0.048743, 0.741468, 0, 1.0};
Point(12) = {0.044296, 0.742758, 0, 1.0};
Point(13) = {0.039723, 0.744029, 0, 1.0};
Point(14) = {0.035071, 0.745242, 0, 1.0};
Point(15) = {0.030378, 0.746355, 0, 1.0};
Point(16) = {0.025672, 0.747339, 0, 1.0};
Point(17) = {0.020981, 0.748174, 0, 1.0};
Point(18) = {0.016331, 0.748850, 0, 1.0};
Point(19) = {0.011756, 0.749370, 0, 1.0};
Point(20) = {0.007295, 0.749733, 0, 1.0};
Point(21) = {0.002986, 0.749941, 0, 1.0};
Point(22) = {-0.001132, 0.750000, 0, 1.0};
Point(23) = {-0.005024, 0.749916, 0, 1.0};
Point(24) = {-0.008651, 0.749698, 0, 1.0};
Point(25) = {-0.011983, 0.749354, 0, 1.0};
Point(26) = {-0.014990, 0.748898, 0, 1.0};
Point(27) = {-0.017647, 0.748346, 0, 1.0};
Point(28) = {-0.019931, 0.747720, 0, 1.0};
Point(29) = {-0.021819, 0.747043, 0, 1.0};
Point(30) = {-0.023290, 0.746344, 0, 1.0};
Point(31) = {-0.024325, 0.745655, 0, 1.0};
Point(32) = {-0.024707, 0.745288, 0, 1.0};
Point(33) = {-0.024852, 0.745103, 0, 1.0};
Point(34) = {-0.024951, 0.744931, 0, 1.0};
Point(35) = {-0.024990, 0.744824, 0, 1.0};
Point(36) = {-0.025001, 0.744727, 0, 1.0};
Point(37) = {-0.024979, 0.744633, 0, 1.0};
Point(38) = {-0.024927, 0.744531, 0, 1.0};
Point(39) = {-0.024807, 0.744373, 0, 1.0};
Point(40) = {-0.024641, 0.744209, 0, 1.0};
Point(41) = {-0.024315, 0.743961, 0, 1.0};
Point(42) = {-0.023209, 0.743392, 0, 1.0};
Point(43) = {-0.021608, 0.742853, 0, 1.0};
Point(44) = {-0.019508, 0.742365, 0, 1.0};
Point(45) = {-0.016906, 0.741935, 0, 1.0};
Point(46) = {-0.013812, 0.741557, 0, 1.0};
Point(47) = {-0.010246, 0.741216, 0, 1.0};
Point(48) = {-0.006245, 0.740899, 0, 1.0};
Point(49) = {-0.001853, 0.740597, 0, 1.0};
Point(50) = {0.002881, 0.740300, 0, 1.0};
Point(51) = {0.007901, 0.740000, 0, 1.0};
Point(52) = {0.013148, 0.739691, 0, 1.0};
Point(53) = {0.018559, 0.739366, 0, 1.0};
Point(54) = {0.024067, 0.739020, 0, 1.0};
Point(55) = {0.029603, 0.738648, 0, 1.0};
Point(56) = {0.035095, 0.738249, 0, 1.0};
Point(57) = {0.040471, 0.737824, 0, 1.0};
Point(58) = {0.045659, 0.737375, 0, 1.0};
Point(59) = {0.050590, 0.736911, 0, 1.0};
Point(60) = {0.055200, 0.736440, 0, 1.0};
Point(61) = {0.059427, 0.735972, 0, 1.0};
Point(62) = {0.063216, 0.735520, 0, 1.0};
Point(63) = {0.066519, 0.735096, 0, 1.0};
Point(64) = {0.069291, 0.734712, 0, 1.0};
Point(65) = {0.071497, 0.734382, 0, 1.0};
Point(66) = {0.073101, 0.734118, 0, 1.0};
Point(67) = {0.074077, 0.733939, 0, 1.0};
Point(68) = {-0.074404, -0.733875, 0, 1.0};
Point(69) = {-0.074093, -0.733962, 0, 1.0};
Point(70) = {-0.073178, -0.734217, 0, 1.0};
Point(71) = {-0.071691, -0.734637, 0, 1.0};
Point(72) = {-0.069663, -0.735221, 0, 1.0};
Point(73) = {-0.067137, -0.735961, 0, 1.0};
Point(74) = {-0.064158, -0.736848, 0, 1.0};
Point(75) = {-0.060774, -0.737864, 0, 1.0};
Point(76) = {-0.057040, -0.738990, 0, 1.0};
Point(77) = {-0.053010, -0.740201, 0, 1.0};
Point(78) = {-0.048743, -0.741468, 0, 1.0};
Point(79) = {-0.044296, -0.742758, 0, 1.0};
Point(80) = {-0.039723, -0.744029, 0, 1.0};
Point(81) = {-0.035071, -0.745242, 0, 1.0};
Point(82) = {-0.030378, -0.746355, 0, 1.0};
Point(83) = {-0.025672, -0.747339, 0, 1.0};
Point(84) = {-0.020981, -0.748174, 0, 1.0};
Point(85) = {-0.016331, -0.748850, 0, 1.0};
Point(86) = {-0.011756, -0.749370, 0, 1.0};
Point(87) = {-0.007295, -0.749733, 0, 1.0};
Point(88) = {-0.002986, -0.749941, 0, 1.0};
Point(89) = {0.001132, -0.750000, 0, 1.0};
Point(90) = {0.005024, -0.749916, 0, 1.0};
Point(91) = {0.008651, -0.749698, 0, 1.0};
Point(92) = {0.011983, -0.749354, 0, 1.0};
Point(93) = {0.014990, -0.748898, 0, 1.0};
Point(94) = {0.017647, -0.748346, 0, 1.0};
Point(95) = {0.019931, -0.747720, 0, 1.0};
Point(96) = {0.021819, -0.747043, 0, 1.0};
Point(97) = {0.023290, -0.746344, 0, 1.0};
Point(98) = {0.024325, -0.745655, 0, 1.0};
Point(99) = {0.024707, -0.745288, 0, 1.0};
Point(100) = {0.024852, -0.745103, 0, 1.0};
Point(101) = {0.024951, -0.744931, 0, 1.0};
Point(102) = {0.024990, -0.744824, 0, 1.0};
Point(103) = {0.025001, -0.744727, 0, 1.0};
Point(104) = {0.024979, -0.744633, 0, 1.0};
Point(105) = {0.024927, -0.744531, 0, 1.0};
Point(106) = {0.024807, -0.744373, 0, 1.0};
Point(107) = {0.024641, -0.744209, 0, 1.0};
Point(108) = {0.024315, -0.743961, 0, 1.0};
Point(109) = {0.023209, -0.743392, 0, 1.0};
Point(110) = {0.021608, -0.742853, 0, 1.0};
Point(111) = {0.019508, -0.742365, 0, 1.0};
Point(112) = {0.016906, -0.741935, 0, 1.0};
Point(113) = {0.013812, -0.741557, 0, 1.0};
Point(114) = {0.010246, -0.741216, 0, 1.0};
Point(115) = {0.006245, -0.740899, 0, 1.0};
Point(116) = {0.001853, -0.740597, 0, 1.0};
Point(117) = {-0.002881, -0.740300, 0, 1.0};
Point(118) = {-0.007901, -0.740000, 0, 1.0};
Point(119) = {-0.013148, -0.739691, 0, 1.0};
Point(120) = {-0.018559, -0.739366, 0, 1.0};
Point(121) = {-0.024067, -0.739020, 0, 1.0};
Point(122) = {-0.029603, -0.738648, 0, 1.0};
Point(123) = {-0.035095, -0.738249, 0, 1.0};
Point(124) = {-0.040471, -0.737824, 0, 1.0};
Point(125) = {-0.045659, -0.737375, 0, 1.0};
Point(126) = {-0.050590, -0.736911, 0, 1.0};
Point(127) = {-0.055200, -0.736440, 0, 1.0};
Point(128) = {-0.059427, -0.735972, 0, 1.0};
Point(129) = {-0.063216, -0.735520, 0, 1.0};
Point(130) = {-0.066519, -0.735096, 0, 1.0};
Point(131) = {-0.069291, -0.734712, 0, 1.0};
Point(132) = {-0.071497, -0.734382, 0, 1.0};
Point(133) = {-0.073101, -0.734118, 0, 1.0};
Point(134) = {-0.074077, -0.733939, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html