SetFactory("OpenCASCADE");

Point(1) = {0.148809, 0.717750, 0, 1.0};
Point(2) = {0.148187, 0.717925, 0, 1.0};
Point(3) = {0.146357, 0.718435, 0, 1.0};
Point(4) = {0.143382, 0.719275, 0, 1.0};
Point(5) = {0.139327, 0.720441, 0, 1.0};
Point(6) = {0.134275, 0.721923, 0, 1.0};
Point(7) = {0.128315, 0.723696, 0, 1.0};
Point(8) = {0.121548, 0.725728, 0, 1.0};
Point(9) = {0.114080, 0.727980, 0, 1.0};
Point(10) = {0.106020, 0.730402, 0, 1.0};
Point(11) = {0.097485, 0.732937, 0, 1.0};
Point(12) = {0.088591, 0.735515, 0, 1.0};
Point(13) = {0.079445, 0.738058, 0, 1.0};
Point(14) = {0.070141, 0.740484, 0, 1.0};
Point(15) = {0.060755, 0.742711, 0, 1.0};
Point(16) = {0.051344, 0.744679, 0, 1.0};
Point(17) = {0.041962, 0.746349, 0, 1.0};
Point(18) = {0.032663, 0.747701, 0, 1.0};
Point(19) = {0.023512, 0.748739, 0, 1.0};
Point(20) = {0.014590, 0.749466, 0, 1.0};
Point(21) = {0.005973, 0.749883, 0, 1.0};
Point(22) = {-0.002265, 0.750000, 0, 1.0};
Point(23) = {-0.010048, 0.749832, 0, 1.0};
Point(24) = {-0.017303, 0.749396, 0, 1.0};
Point(25) = {-0.023966, 0.748708, 0, 1.0};
Point(26) = {-0.029980, 0.747795, 0, 1.0};
Point(27) = {-0.035295, 0.746692, 0, 1.0};
Point(28) = {-0.039862, 0.745439, 0, 1.0};
Point(29) = {-0.043637, 0.744086, 0, 1.0};
Point(30) = {-0.046580, 0.742688, 0, 1.0};
Point(31) = {-0.048649, 0.741309, 0, 1.0};
Point(32) = {-0.049414, 0.740575, 0, 1.0};
Point(33) = {-0.049704, 0.740206, 0, 1.0};
Point(34) = {-0.049903, 0.739861, 0, 1.0};
Point(35) = {-0.049981, 0.739648, 0, 1.0};
Point(36) = {-0.050002, 0.739454, 0, 1.0};
Point(37) = {-0.049957, 0.739265, 0, 1.0};
Point(38) = {-0.049854, 0.739063, 0, 1.0};
Point(39) = {-0.049614, 0.738746, 0, 1.0};
Point(40) = {-0.049281, 0.738418, 0, 1.0};
Point(41) = {-0.048629, 0.737922, 0, 1.0};
Point(42) = {-0.046419, 0.736784, 0, 1.0};
Point(43) = {-0.043217, 0.735706, 0, 1.0};
Point(44) = {-0.039015, 0.734730, 0, 1.0};
Point(45) = {-0.033813, 0.733869, 0, 1.0};
Point(46) = {-0.027624, 0.733113, 0, 1.0};
Point(47) = {-0.020492, 0.732431, 0, 1.0};
Point(48) = {-0.012490, 0.731798, 0, 1.0};
Point(49) = {-0.003705, 0.731193, 0, 1.0};
Point(50) = {0.005762, 0.730599, 0, 1.0};
Point(51) = {0.015802, 0.730000, 0, 1.0};
Point(52) = {0.026296, 0.729382, 0, 1.0};
Point(53) = {0.037117, 0.728732, 0, 1.0};
Point(54) = {0.048133, 0.728040, 0, 1.0};
Point(55) = {0.059205, 0.727297, 0, 1.0};
Point(56) = {0.070190, 0.726499, 0, 1.0};
Point(57) = {0.080942, 0.725648, 0, 1.0};
Point(58) = {0.091318, 0.724751, 0, 1.0};
Point(59) = {0.101181, 0.723822, 0, 1.0};
Point(60) = {0.110400, 0.722880, 0, 1.0};
Point(61) = {0.118854, 0.721945, 0, 1.0};
Point(62) = {0.126433, 0.721040, 0, 1.0};
Point(63) = {0.133038, 0.720191, 0, 1.0};
Point(64) = {0.138582, 0.719425, 0, 1.0};
Point(65) = {0.142993, 0.718764, 0, 1.0};
Point(66) = {0.146202, 0.718236, 0, 1.0};
Point(67) = {0.148153, 0.717878, 0, 1.0};
Point(68) = {-0.148809, -0.717750, 0, 1.0};
Point(69) = {-0.148187, -0.717925, 0, 1.0};
Point(70) = {-0.146357, -0.718435, 0, 1.0};
Point(71) = {-0.143382, -0.719275, 0, 1.0};
Point(72) = {-0.139327, -0.720441, 0, 1.0};
Point(73) = {-0.134275, -0.721923, 0, 1.0};
Point(74) = {-0.128315, -0.723696, 0, 1.0};
Point(75) = {-0.121548, -0.725728, 0, 1.0};
Point(76) = {-0.114080, -0.727980, 0, 1.0};
Point(77) = {-0.106020, -0.730402, 0, 1.0};
Point(78) = {-0.097485, -0.732937, 0, 1.0};
Point(79) = {-0.088591, -0.735515, 0, 1.0};
Point(80) = {-0.079445, -0.738058, 0, 1.0};
Point(81) = {-0.070141, -0.740484, 0, 1.0};
Point(82) = {-0.060755, -0.742711, 0, 1.0};
Point(83) = {-0.051344, -0.744679, 0, 1.0};
Point(84) = {-0.041962, -0.746349, 0, 1.0};
Point(85) = {-0.032663, -0.747701, 0, 1.0};
Point(86) = {-0.023512, -0.748739, 0, 1.0};
Point(87) = {-0.014590, -0.749466, 0, 1.0};
Point(88) = {-0.005973, -0.749883, 0, 1.0};
Point(89) = {0.002265, -0.750000, 0, 1.0};
Point(90) = {0.010048, -0.749832, 0, 1.0};
Point(91) = {0.017303, -0.749396, 0, 1.0};
Point(92) = {0.023966, -0.748708, 0, 1.0};
Point(93) = {0.029980, -0.747795, 0, 1.0};
Point(94) = {0.035295, -0.746692, 0, 1.0};
Point(95) = {0.039862, -0.745439, 0, 1.0};
Point(96) = {0.043637, -0.744086, 0, 1.0};
Point(97) = {0.046580, -0.742688, 0, 1.0};
Point(98) = {0.048649, -0.741309, 0, 1.0};
Point(99) = {0.049414, -0.740575, 0, 1.0};
Point(100) = {0.049704, -0.740206, 0, 1.0};
Point(101) = {0.049903, -0.739861, 0, 1.0};
Point(102) = {0.049981, -0.739648, 0, 1.0};
Point(103) = {0.050002, -0.739454, 0, 1.0};
Point(104) = {0.049957, -0.739265, 0, 1.0};
Point(105) = {0.049854, -0.739063, 0, 1.0};
Point(106) = {0.049614, -0.738746, 0, 1.0};
Point(107) = {0.049281, -0.738418, 0, 1.0};
Point(108) = {0.048629, -0.737922, 0, 1.0};
Point(109) = {0.046419, -0.736784, 0, 1.0};
Point(110) = {0.043217, -0.735706, 0, 1.0};
Point(111) = {0.039015, -0.734730, 0, 1.0};
Point(112) = {0.033813, -0.733869, 0, 1.0};
Point(113) = {0.027624, -0.733113, 0, 1.0};
Point(114) = {0.020492, -0.732431, 0, 1.0};
Point(115) = {0.012490, -0.731798, 0, 1.0};
Point(116) = {0.003705, -0.731193, 0, 1.0};
Point(117) = {-0.005762, -0.730599, 0, 1.0};
Point(118) = {-0.015802, -0.730000, 0, 1.0};
Point(119) = {-0.026296, -0.729382, 0, 1.0};
Point(120) = {-0.037117, -0.728732, 0, 1.0};
Point(121) = {-0.048133, -0.728040, 0, 1.0};
Point(122) = {-0.059205, -0.727297, 0, 1.0};
Point(123) = {-0.070190, -0.726499, 0, 1.0};
Point(124) = {-0.080942, -0.725648, 0, 1.0};
Point(125) = {-0.091318, -0.724751, 0, 1.0};
Point(126) = {-0.101181, -0.723822, 0, 1.0};
Point(127) = {-0.110400, -0.722880, 0, 1.0};
Point(128) = {-0.118854, -0.721945, 0, 1.0};
Point(129) = {-0.126433, -0.721040, 0, 1.0};
Point(130) = {-0.133038, -0.720191, 0, 1.0};
Point(131) = {-0.138582, -0.719425, 0, 1.0};
Point(132) = {-0.142993, -0.718764, 0, 1.0};
Point(133) = {-0.146202, -0.718236, 0, 1.0};
Point(134) = {-0.148153, -0.717878, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html