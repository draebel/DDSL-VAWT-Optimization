SetFactory("OpenCASCADE");

Point(1) = {0.074258, 0.749743, 0, 1.0};
Point(2) = {0.070951, 0.749765, 0, 1.0};
Point(3) = {0.066785, 0.749807, 0, 1.0};
Point(4) = {0.062296, 0.749866, 0, 1.0};
Point(5) = {0.057966, 0.749927, 0, 1.0};
Point(6) = {0.053640, 0.749976, 0, 1.0};
Point(7) = {0.049315, 0.750000, 0, 1.0};
Point(8) = {0.044995, 0.750000, 0, 1.0};
Point(9) = {0.040677, 0.749978, 0, 1.0};
Point(10) = {0.036361, 0.749935, 0, 1.0};
Point(11) = {0.032112, 0.749882, 0, 1.0};
Point(12) = {0.027831, 0.749811, 0, 1.0};
Point(13) = {0.023483, 0.749726, 0, 1.0};
Point(14) = {0.019138, 0.749622, 0, 1.0};
Point(15) = {0.015068, 0.749503, 0, 1.0};
Point(16) = {0.011001, 0.749359, 0, 1.0};
Point(17) = {0.006532, 0.749160, 0, 1.0};
Point(18) = {0.002071, 0.748911, 0, 1.0};
Point(19) = {-0.001844, 0.748643, 0, 1.0};
Point(20) = {-0.006022, 0.748298, 0, 1.0};
Point(21) = {-0.010592, 0.747846, 0, 1.0};
Point(22) = {-0.015154, 0.747310, 0, 1.0};
Point(23) = {-0.019166, 0.746758, 0, 1.0};
Point(24) = {-0.023170, 0.746132, 0, 1.0};
Point(25) = {-0.027842, 0.745310, 0, 1.0};
Point(26) = {-0.032058, 0.744492, 0, 1.0};
Point(27) = {-0.036264, 0.743615, 0, 1.0};
Point(28) = {-0.040459, 0.742679, 0, 1.0};
Point(29) = {-0.044648, 0.741677, 0, 1.0};
Point(30) = {-0.048007, 0.740814, 0, 1.0};
Point(31) = {-0.050571, 0.740106, 0, 1.0};
Point(32) = {-0.053062, 0.739373, 0, 1.0};
Point(33) = {-0.055067, 0.738747, 0, 1.0};
Point(34) = {-0.057136, 0.738069, 0, 1.0};
Point(35) = {-0.059204, 0.737366, 0, 1.0};
Point(36) = {-0.061270, 0.736641, 0, 1.0};
Point(37) = {-0.063331, 0.735890, 0, 1.0};
Point(38) = {-0.065387, 0.735102, 0, 1.0};
Point(39) = {-0.067438, 0.734248, 0, 1.0};
Point(40) = {-0.069470, 0.733291, 0, 1.0};
Point(41) = {-0.070478, 0.732753, 0, 1.0};
Point(42) = {-0.071481, 0.732163, 0, 1.0};
Point(43) = {-0.072477, 0.731514, 0, 1.0};
Point(44) = {-0.073458, 0.730770, 0, 1.0};
Point(45) = {-0.073934, 0.730319, 0, 1.0};
Point(46) = {-0.074358, 0.729397, 0, 1.0};
Point(47) = {-0.073711, 0.728626, 0, 1.0};
Point(48) = {-0.073136, 0.728326, 0, 1.0};
Point(49) = {-0.072001, 0.727905, 0, 1.0};
Point(50) = {-0.070879, 0.727592, 0, 1.0};
Point(51) = {-0.069766, 0.727347, 0, 1.0};
Point(52) = {-0.068662, 0.727154, 0, 1.0};
Point(53) = {-0.066465, 0.726866, 0, 1.0};
Point(54) = {-0.064189, 0.726650, 0, 1.0};
Point(55) = {-0.061989, 0.726490, 0, 1.0};
Point(56) = {-0.059795, 0.726369, 0, 1.0};
Point(57) = {-0.057740, 0.726290, 0, 1.0};
Point(58) = {-0.055555, 0.726240, 0, 1.0};
Point(59) = {-0.053101, 0.726221, 0, 1.0};
Point(60) = {-0.050922, 0.726229, 0, 1.0};
Point(61) = {-0.048610, 0.726254, 0, 1.0};
Point(62) = {-0.046231, 0.726293, 0, 1.0};
Point(63) = {-0.042633, 0.726373, 0, 1.0};
Point(64) = {-0.038330, 0.726517, 0, 1.0};
Point(65) = {-0.034039, 0.726721, 0, 1.0};
Point(66) = {-0.029370, 0.727024, 0, 1.0};
Point(67) = {-0.025476, 0.727341, 0, 1.0};
Point(68) = {-0.021210, 0.727754, 0, 1.0};
Point(69) = {-0.016952, 0.728232, 0, 1.0};
Point(70) = {-0.012703, 0.728772, 0, 1.0};
Point(71) = {-0.008462, 0.729372, 0, 1.0};
Point(72) = {-0.004226, 0.730026, 0, 1.0};
Point(73) = {0.000003, 0.730729, 0, 1.0};
Point(74) = {0.004224, 0.731478, 0, 1.0};
Point(75) = {0.008349, 0.732257, 0, 1.0};
Point(76) = {0.012648, 0.733131, 0, 1.0};
Point(77) = {0.016851, 0.734040, 0, 1.0};
Point(78) = {0.021045, 0.734982, 0, 1.0};
Point(79) = {0.025231, 0.735933, 0, 1.0};
Point(80) = {0.029464, 0.736891, 0, 1.0};
Point(81) = {0.033634, 0.737837, 0, 1.0};
Point(82) = {0.037854, 0.738812, 0, 1.0};
Point(83) = {0.042016, 0.739810, 0, 1.0};
Point(84) = {0.046200, 0.740854, 0, 1.0};
Point(85) = {0.050653, 0.741998, 0, 1.0};
Point(86) = {0.054557, 0.743014, 0, 1.0};
Point(87) = {0.058734, 0.744098, 0, 1.0};
Point(88) = {0.062769, 0.745143, 0, 1.0};
Point(89) = {0.067092, 0.746264, 0, 1.0};
Point(90) = {0.071267, 0.747360, 0, 1.0};
Point(91) = {0.074459, 0.748218, 0, 1.0};
Point(92) = {-0.074258, -0.749743, 0, 1.0};
Point(93) = {-0.070951, -0.749765, 0, 1.0};
Point(94) = {-0.066785, -0.749807, 0, 1.0};
Point(95) = {-0.062296, -0.749866, 0, 1.0};
Point(96) = {-0.057966, -0.749927, 0, 1.0};
Point(97) = {-0.053640, -0.749976, 0, 1.0};
Point(98) = {-0.049315, -0.750000, 0, 1.0};
Point(99) = {-0.044995, -0.750000, 0, 1.0};
Point(100) = {-0.040677, -0.749978, 0, 1.0};
Point(101) = {-0.036361, -0.749935, 0, 1.0};
Point(102) = {-0.032112, -0.749882, 0, 1.0};
Point(103) = {-0.027831, -0.749811, 0, 1.0};
Point(104) = {-0.023483, -0.749726, 0, 1.0};
Point(105) = {-0.019138, -0.749622, 0, 1.0};
Point(106) = {-0.015068, -0.749503, 0, 1.0};
Point(107) = {-0.011001, -0.749359, 0, 1.0};
Point(108) = {-0.006532, -0.749160, 0, 1.0};
Point(109) = {-0.002071, -0.748911, 0, 1.0};
Point(110) = {0.001844, -0.748643, 0, 1.0};
Point(111) = {0.006022, -0.748298, 0, 1.0};
Point(112) = {0.010592, -0.747846, 0, 1.0};
Point(113) = {0.015154, -0.747310, 0, 1.0};
Point(114) = {0.019166, -0.746758, 0, 1.0};
Point(115) = {0.023170, -0.746132, 0, 1.0};
Point(116) = {0.027842, -0.745310, 0, 1.0};
Point(117) = {0.032058, -0.744492, 0, 1.0};
Point(118) = {0.036264, -0.743615, 0, 1.0};
Point(119) = {0.040459, -0.742679, 0, 1.0};
Point(120) = {0.044648, -0.741677, 0, 1.0};
Point(121) = {0.048007, -0.740814, 0, 1.0};
Point(122) = {0.050571, -0.740106, 0, 1.0};
Point(123) = {0.053062, -0.739373, 0, 1.0};
Point(124) = {0.055067, -0.738747, 0, 1.0};
Point(125) = {0.057136, -0.738069, 0, 1.0};
Point(126) = {0.059204, -0.737366, 0, 1.0};
Point(127) = {0.061270, -0.736641, 0, 1.0};
Point(128) = {0.063331, -0.735890, 0, 1.0};
Point(129) = {0.065387, -0.735102, 0, 1.0};
Point(130) = {0.067438, -0.734248, 0, 1.0};
Point(131) = {0.069470, -0.733291, 0, 1.0};
Point(132) = {0.070478, -0.732753, 0, 1.0};
Point(133) = {0.071481, -0.732163, 0, 1.0};
Point(134) = {0.072477, -0.731514, 0, 1.0};
Point(135) = {0.073458, -0.730770, 0, 1.0};
Point(136) = {0.073934, -0.730319, 0, 1.0};
Point(137) = {0.074358, -0.729397, 0, 1.0};
Point(138) = {0.073711, -0.728626, 0, 1.0};
Point(139) = {0.073136, -0.728326, 0, 1.0};
Point(140) = {0.072001, -0.727905, 0, 1.0};
Point(141) = {0.070879, -0.727592, 0, 1.0};
Point(142) = {0.069766, -0.727347, 0, 1.0};
Point(143) = {0.068662, -0.727154, 0, 1.0};
Point(144) = {0.066465, -0.726866, 0, 1.0};
Point(145) = {0.064189, -0.726650, 0, 1.0};
Point(146) = {0.061989, -0.726490, 0, 1.0};
Point(147) = {0.059795, -0.726369, 0, 1.0};
Point(148) = {0.057740, -0.726290, 0, 1.0};
Point(149) = {0.055555, -0.726240, 0, 1.0};
Point(150) = {0.053101, -0.726221, 0, 1.0};
Point(151) = {0.050922, -0.726229, 0, 1.0};
Point(152) = {0.048610, -0.726254, 0, 1.0};
Point(153) = {0.046231, -0.726293, 0, 1.0};
Point(154) = {0.042633, -0.726373, 0, 1.0};
Point(155) = {0.038330, -0.726517, 0, 1.0};
Point(156) = {0.034039, -0.726721, 0, 1.0};
Point(157) = {0.029370, -0.727024, 0, 1.0};
Point(158) = {0.025476, -0.727341, 0, 1.0};
Point(159) = {0.021210, -0.727754, 0, 1.0};
Point(160) = {0.016952, -0.728232, 0, 1.0};
Point(161) = {0.012703, -0.728772, 0, 1.0};
Point(162) = {0.008462, -0.729372, 0, 1.0};
Point(163) = {0.004226, -0.730026, 0, 1.0};
Point(164) = {-0.000003, -0.730729, 0, 1.0};
Point(165) = {-0.004224, -0.731478, 0, 1.0};
Point(166) = {-0.008349, -0.732257, 0, 1.0};
Point(167) = {-0.012648, -0.733131, 0, 1.0};
Point(168) = {-0.016851, -0.734040, 0, 1.0};
Point(169) = {-0.021045, -0.734982, 0, 1.0};
Point(170) = {-0.025231, -0.735933, 0, 1.0};
Point(171) = {-0.029464, -0.736891, 0, 1.0};
Point(172) = {-0.033634, -0.737837, 0, 1.0};
Point(173) = {-0.037854, -0.738812, 0, 1.0};
Point(174) = {-0.042016, -0.739810, 0, 1.0};
Point(175) = {-0.046200, -0.740854, 0, 1.0};
Point(176) = {-0.050653, -0.741998, 0, 1.0};
Point(177) = {-0.054557, -0.743014, 0, 1.0};
Point(178) = {-0.058734, -0.744098, 0, 1.0};
Point(179) = {-0.062769, -0.745143, 0, 1.0};
Point(180) = {-0.067092, -0.746264, 0, 1.0};
Point(181) = {-0.071267, -0.747360, 0, 1.0};
Point(182) = {-0.074459, -0.748218, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:66};
Spline(3) = {66:91};
Spline(4) = {91,1};

// Lines: second blade (splines 5-8)
Spline(5) = {92:118};
Spline(6) = {118:157};
Spline(7) = {157:182};
Spline(8) = {182,92};

// Outer domain (points 20001-4 and lines)
Point(183) = {-13.50000000, -15.00000000, 0, 1.0};
Point(184) = {-13.50000000, 15.00000000, 0, 1.0};
Point(185) = {13.50000000, 15.00000000, 0, 1.0};
Point(186) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {183, 184};
Line(12) = {184, 185};
Line(13) = {185, 186};
Line(14) = {183, 186};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html