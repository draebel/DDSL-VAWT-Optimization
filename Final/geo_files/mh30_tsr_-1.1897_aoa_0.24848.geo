SetFactory("OpenCASCADE");

Point(1) = {0.075005, 0.741905, 0, 1.0};
Point(2) = {0.073847, 0.742065, 0, 1.0};
Point(3) = {0.068926, 0.742756, 0, 1.0};
Point(4) = {0.063351, 0.743536, 0, 1.0};
Point(5) = {0.057202, 0.744375, 0, 1.0};
Point(6) = {0.050558, 0.745236, 0, 1.0};
Point(7) = {0.043490, 0.746077, 0, 1.0};
Point(8) = {0.036060, 0.746868, 0, 1.0};
Point(9) = {0.028335, 0.747591, 0, 1.0};
Point(10) = {0.020386, 0.748236, 0, 1.0};
Point(11) = {0.012297, 0.748801, 0, 1.0};
Point(12) = {0.004162, 0.749276, 0, 1.0};
Point(13) = {-0.003931, 0.749640, 0, 1.0};
Point(14) = {-0.011907, 0.749883, 0, 1.0};
Point(15) = {-0.019681, 0.750000, 0, 1.0};
Point(16) = {-0.027174, 0.749981, 0, 1.0};
Point(17) = {-0.034319, 0.749820, 0, 1.0};
Point(18) = {-0.041044, 0.749524, 0, 1.0};
Point(19) = {-0.047281, 0.749088, 0, 1.0};
Point(20) = {-0.052976, 0.748512, 0, 1.0};
Point(21) = {-0.058083, 0.747805, 0, 1.0};
Point(22) = {-0.062563, 0.746977, 0, 1.0};
Point(23) = {-0.066382, 0.746044, 0, 1.0};
Point(24) = {-0.069522, 0.745031, 0, 1.0};
Point(25) = {-0.071964, 0.743971, 0, 1.0};
Point(26) = {-0.073703, 0.742911, 0, 1.0};
Point(27) = {-0.074672, 0.741989, 0, 1.0};
Point(28) = {-0.074849, 0.741713, 0, 1.0};
Point(29) = {-0.074963, 0.741459, 0, 1.0};
Point(30) = {-0.074999, 0.741305, 0, 1.0};
Point(31) = {-0.074995, 0.741172, 0, 1.0};
Point(32) = {-0.074939, 0.741047, 0, 1.0};
Point(33) = {-0.074834, 0.740916, 0, 1.0};
Point(34) = {-0.074604, 0.740713, 0, 1.0};
Point(35) = {-0.074298, 0.740504, 0, 1.0};
Point(36) = {-0.072591, 0.739770, 0, 1.0};
Point(37) = {-0.070156, 0.739130, 0, 1.0};
Point(38) = {-0.066931, 0.738566, 0, 1.0};
Point(39) = {-0.062940, 0.738098, 0, 1.0};
Point(40) = {-0.058212, 0.737736, 0, 1.0};
Point(41) = {-0.052780, 0.737483, 0, 1.0};
Point(42) = {-0.046693, 0.737330, 0, 1.0};
Point(43) = {-0.040008, 0.737270, 0, 1.0};
Point(44) = {-0.032795, 0.737291, 0, 1.0};
Point(45) = {-0.025131, 0.737384, 0, 1.0};
Point(46) = {-0.017099, 0.737538, 0, 1.0};
Point(47) = {-0.008788, 0.737743, 0, 1.0};
Point(48) = {-0.000291, 0.737989, 0, 1.0};
Point(49) = {0.008297, 0.738265, 0, 1.0};
Point(50) = {0.016880, 0.738560, 0, 1.0};
Point(51) = {0.025358, 0.738863, 0, 1.0};
Point(52) = {0.033634, 0.739162, 0, 1.0};
Point(53) = {0.041609, 0.739448, 0, 1.0};
Point(54) = {0.049188, 0.739711, 0, 1.0};
Point(55) = {0.056277, 0.739944, 0, 1.0};
Point(56) = {0.062788, 0.740136, 0, 1.0};
Point(57) = {0.068633, 0.740288, 0, 1.0};
Point(58) = {0.073735, 0.740397, 0, 1.0};
Point(59) = {0.074998, 0.740419, 0, 1.0};
Point(60) = {-0.075005, -0.741905, 0, 1.0};
Point(61) = {-0.073847, -0.742065, 0, 1.0};
Point(62) = {-0.068926, -0.742756, 0, 1.0};
Point(63) = {-0.063351, -0.743536, 0, 1.0};
Point(64) = {-0.057202, -0.744375, 0, 1.0};
Point(65) = {-0.050558, -0.745236, 0, 1.0};
Point(66) = {-0.043490, -0.746077, 0, 1.0};
Point(67) = {-0.036060, -0.746868, 0, 1.0};
Point(68) = {-0.028335, -0.747591, 0, 1.0};
Point(69) = {-0.020386, -0.748236, 0, 1.0};
Point(70) = {-0.012297, -0.748801, 0, 1.0};
Point(71) = {-0.004162, -0.749276, 0, 1.0};
Point(72) = {0.003931, -0.749640, 0, 1.0};
Point(73) = {0.011907, -0.749883, 0, 1.0};
Point(74) = {0.019681, -0.750000, 0, 1.0};
Point(75) = {0.027174, -0.749981, 0, 1.0};
Point(76) = {0.034319, -0.749820, 0, 1.0};
Point(77) = {0.041044, -0.749524, 0, 1.0};
Point(78) = {0.047281, -0.749088, 0, 1.0};
Point(79) = {0.052976, -0.748512, 0, 1.0};
Point(80) = {0.058083, -0.747805, 0, 1.0};
Point(81) = {0.062563, -0.746977, 0, 1.0};
Point(82) = {0.066382, -0.746044, 0, 1.0};
Point(83) = {0.069522, -0.745031, 0, 1.0};
Point(84) = {0.071964, -0.743971, 0, 1.0};
Point(85) = {0.073703, -0.742911, 0, 1.0};
Point(86) = {0.074672, -0.741989, 0, 1.0};
Point(87) = {0.074849, -0.741713, 0, 1.0};
Point(88) = {0.074963, -0.741459, 0, 1.0};
Point(89) = {0.074999, -0.741305, 0, 1.0};
Point(90) = {0.074995, -0.741172, 0, 1.0};
Point(91) = {0.074939, -0.741047, 0, 1.0};
Point(92) = {0.074834, -0.740916, 0, 1.0};
Point(93) = {0.074604, -0.740713, 0, 1.0};
Point(94) = {0.074298, -0.740504, 0, 1.0};
Point(95) = {0.072591, -0.739770, 0, 1.0};
Point(96) = {0.070156, -0.739130, 0, 1.0};
Point(97) = {0.066931, -0.738566, 0, 1.0};
Point(98) = {0.062940, -0.738098, 0, 1.0};
Point(99) = {0.058212, -0.737736, 0, 1.0};
Point(100) = {0.052780, -0.737483, 0, 1.0};
Point(101) = {0.046693, -0.737330, 0, 1.0};
Point(102) = {0.040008, -0.737270, 0, 1.0};
Point(103) = {0.032795, -0.737291, 0, 1.0};
Point(104) = {0.025131, -0.737384, 0, 1.0};
Point(105) = {0.017099, -0.737538, 0, 1.0};
Point(106) = {0.008788, -0.737743, 0, 1.0};
Point(107) = {0.000291, -0.737989, 0, 1.0};
Point(108) = {-0.008297, -0.738265, 0, 1.0};
Point(109) = {-0.016880, -0.738560, 0, 1.0};
Point(110) = {-0.025358, -0.738863, 0, 1.0};
Point(111) = {-0.033634, -0.739162, 0, 1.0};
Point(112) = {-0.041609, -0.739448, 0, 1.0};
Point(113) = {-0.049188, -0.739711, 0, 1.0};
Point(114) = {-0.056277, -0.739944, 0, 1.0};
Point(115) = {-0.062788, -0.740136, 0, 1.0};
Point(116) = {-0.068633, -0.740288, 0, 1.0};
Point(117) = {-0.073735, -0.740397, 0, 1.0};
Point(118) = {-0.074998, -0.740419, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:17};
Spline(2) = {17:44};
Spline(3) = {44:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:76};
Spline(6) = {76:103};
Spline(7) = {103:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {36.00000000, 15.00000000, 0, 1.0};
Point(122) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html