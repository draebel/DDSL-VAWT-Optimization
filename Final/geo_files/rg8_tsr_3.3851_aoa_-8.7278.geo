SetFactory("OpenCASCADE");

Point(1) = {0.073842, 0.749207, 0, 1.0};
Point(2) = {0.073497, 0.749237, 0, 1.0};
Point(3) = {0.072520, 0.749346, 0, 1.0};
Point(4) = {0.071015, 0.749522, 0, 1.0};
Point(5) = {0.069033, 0.749694, 0, 1.0};
Point(6) = {0.066572, 0.749823, 0, 1.0};
Point(7) = {0.063644, 0.749918, 0, 1.0};
Point(8) = {0.060290, 0.749979, 0, 1.0};
Point(9) = {0.056555, 0.750000, 0, 1.0};
Point(10) = {0.052485, 0.749976, 0, 1.0};
Point(11) = {0.048128, 0.749899, 0, 1.0};
Point(12) = {0.043538, 0.749762, 0, 1.0};
Point(13) = {0.038763, 0.749560, 0, 1.0};
Point(14) = {0.033859, 0.749288, 0, 1.0};
Point(15) = {0.028878, 0.748939, 0, 1.0};
Point(16) = {0.023873, 0.748512, 0, 1.0};
Point(17) = {0.018897, 0.748002, 0, 1.0};
Point(18) = {0.013999, 0.747409, 0, 1.0};
Point(19) = {0.009229, 0.746733, 0, 1.0};
Point(20) = {0.004634, 0.745977, 0, 1.0};
Point(21) = {0.000256, 0.745143, 0, 1.0};
Point(22) = {-0.003864, 0.744236, 0, 1.0};
Point(23) = {-0.007688, 0.743265, 0, 1.0};
Point(24) = {-0.011187, 0.742237, 0, 1.0};
Point(25) = {-0.014332, 0.741165, 0, 1.0};
Point(26) = {-0.017100, 0.740065, 0, 1.0};
Point(27) = {-0.019471, 0.738952, 0, 1.0};
Point(28) = {-0.021433, 0.737848, 0, 1.0};
Point(29) = {-0.022972, 0.736778, 0, 1.0};
Point(30) = {-0.024084, 0.735769, 0, 1.0};
Point(31) = {-0.024762, 0.734858, 0, 1.0};
Point(32) = {-0.025000, 0.734033, 0, 1.0};
Point(33) = {-0.024704, 0.733551, 0, 1.0};
Point(34) = {-0.023821, 0.733104, 0, 1.0};
Point(35) = {-0.022449, 0.732760, 0, 1.0};
Point(36) = {-0.020599, 0.732547, 0, 1.0};
Point(37) = {-0.018288, 0.732474, 0, 1.0};
Point(38) = {-0.015529, 0.732550, 0, 1.0};
Point(39) = {-0.012344, 0.732769, 0, 1.0};
Point(40) = {-0.008760, 0.733124, 0, 1.0};
Point(41) = {-0.004818, 0.733607, 0, 1.0};
Point(42) = {-0.000558, 0.734206, 0, 1.0};
Point(43) = {0.003971, 0.734914, 0, 1.0};
Point(44) = {0.008714, 0.735722, 0, 1.0};
Point(45) = {0.013616, 0.736624, 0, 1.0};
Point(46) = {0.018615, 0.737624, 0, 1.0};
Point(47) = {0.023674, 0.738745, 0, 1.0};
Point(48) = {0.028792, 0.739977, 0, 1.0};
Point(49) = {0.033947, 0.741259, 0, 1.0};
Point(50) = {0.039077, 0.742538, 0, 1.0};
Point(51) = {0.044115, 0.743771, 0, 1.0};
Point(52) = {0.048988, 0.744923, 0, 1.0};
Point(53) = {0.053624, 0.745964, 0, 1.0};
Point(54) = {0.057947, 0.746870, 0, 1.0};
Point(55) = {0.061883, 0.747626, 0, 1.0};
Point(56) = {0.065362, 0.748224, 0, 1.0};
Point(57) = {0.068316, 0.748664, 0, 1.0};
Point(58) = {0.070688, 0.748959, 0, 1.0};
Point(59) = {0.072424, 0.749124, 0, 1.0};
Point(60) = {0.073485, 0.749193, 0, 1.0};
Point(61) = {-0.073842, -0.749207, 0, 1.0};
Point(62) = {-0.073497, -0.749237, 0, 1.0};
Point(63) = {-0.072520, -0.749346, 0, 1.0};
Point(64) = {-0.071015, -0.749522, 0, 1.0};
Point(65) = {-0.069033, -0.749694, 0, 1.0};
Point(66) = {-0.066572, -0.749823, 0, 1.0};
Point(67) = {-0.063644, -0.749918, 0, 1.0};
Point(68) = {-0.060290, -0.749979, 0, 1.0};
Point(69) = {-0.056555, -0.750000, 0, 1.0};
Point(70) = {-0.052485, -0.749976, 0, 1.0};
Point(71) = {-0.048128, -0.749899, 0, 1.0};
Point(72) = {-0.043538, -0.749762, 0, 1.0};
Point(73) = {-0.038763, -0.749560, 0, 1.0};
Point(74) = {-0.033859, -0.749288, 0, 1.0};
Point(75) = {-0.028878, -0.748939, 0, 1.0};
Point(76) = {-0.023873, -0.748512, 0, 1.0};
Point(77) = {-0.018897, -0.748002, 0, 1.0};
Point(78) = {-0.013999, -0.747409, 0, 1.0};
Point(79) = {-0.009229, -0.746733, 0, 1.0};
Point(80) = {-0.004634, -0.745977, 0, 1.0};
Point(81) = {-0.000256, -0.745143, 0, 1.0};
Point(82) = {0.003864, -0.744236, 0, 1.0};
Point(83) = {0.007688, -0.743265, 0, 1.0};
Point(84) = {0.011187, -0.742237, 0, 1.0};
Point(85) = {0.014332, -0.741165, 0, 1.0};
Point(86) = {0.017100, -0.740065, 0, 1.0};
Point(87) = {0.019471, -0.738952, 0, 1.0};
Point(88) = {0.021433, -0.737848, 0, 1.0};
Point(89) = {0.022972, -0.736778, 0, 1.0};
Point(90) = {0.024084, -0.735769, 0, 1.0};
Point(91) = {0.024762, -0.734858, 0, 1.0};
Point(92) = {0.025000, -0.734033, 0, 1.0};
Point(93) = {0.024704, -0.733551, 0, 1.0};
Point(94) = {0.023821, -0.733104, 0, 1.0};
Point(95) = {0.022449, -0.732760, 0, 1.0};
Point(96) = {0.020599, -0.732547, 0, 1.0};
Point(97) = {0.018288, -0.732474, 0, 1.0};
Point(98) = {0.015529, -0.732550, 0, 1.0};
Point(99) = {0.012344, -0.732769, 0, 1.0};
Point(100) = {0.008760, -0.733124, 0, 1.0};
Point(101) = {0.004818, -0.733607, 0, 1.0};
Point(102) = {0.000558, -0.734206, 0, 1.0};
Point(103) = {-0.003971, -0.734914, 0, 1.0};
Point(104) = {-0.008714, -0.735722, 0, 1.0};
Point(105) = {-0.013616, -0.736624, 0, 1.0};
Point(106) = {-0.018615, -0.737624, 0, 1.0};
Point(107) = {-0.023674, -0.738745, 0, 1.0};
Point(108) = {-0.028792, -0.739977, 0, 1.0};
Point(109) = {-0.033947, -0.741259, 0, 1.0};
Point(110) = {-0.039077, -0.742538, 0, 1.0};
Point(111) = {-0.044115, -0.743771, 0, 1.0};
Point(112) = {-0.048988, -0.744923, 0, 1.0};
Point(113) = {-0.053624, -0.745964, 0, 1.0};
Point(114) = {-0.057947, -0.746870, 0, 1.0};
Point(115) = {-0.061883, -0.747626, 0, 1.0};
Point(116) = {-0.065362, -0.748224, 0, 1.0};
Point(117) = {-0.068316, -0.748664, 0, 1.0};
Point(118) = {-0.070688, -0.748959, 0, 1.0};
Point(119) = {-0.072424, -0.749124, 0, 1.0};
Point(120) = {-0.073485, -0.749193, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html