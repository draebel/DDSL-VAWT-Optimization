SetFactory("OpenCASCADE");

Point(1) = {0.112465, 0.732010, 0, 1.0};
Point(2) = {0.111903, 0.732110, 0, 1.0};
Point(3) = {0.110286, 0.732459, 0, 1.0};
Point(4) = {0.107761, 0.733088, 0, 1.0};
Point(5) = {0.104450, 0.733938, 0, 1.0};
Point(6) = {0.100401, 0.734926, 0, 1.0};
Point(7) = {0.095616, 0.736036, 0, 1.0};
Point(8) = {0.090157, 0.737302, 0, 1.0};
Point(9) = {0.084132, 0.738730, 0, 1.0};
Point(10) = {0.077661, 0.740302, 0, 1.0};
Point(11) = {0.070864, 0.741984, 0, 1.0};
Point(12) = {0.063874, 0.743718, 0, 1.0};
Point(13) = {0.056818, 0.745431, 0, 1.0};
Point(14) = {0.049815, 0.746991, 0, 1.0};
Point(15) = {0.042878, 0.748229, 0, 1.0};
Point(16) = {0.035919, 0.749097, 0, 1.0};
Point(17) = {0.028937, 0.749662, 0, 1.0};
Point(18) = {0.022003, 0.749961, 0, 1.0};
Point(19) = {0.015187, 0.750000, 0, 1.0};
Point(20) = {0.008550, 0.749794, 0, 1.0};
Point(21) = {0.002155, 0.749358, 0, 1.0};
Point(22) = {-0.003934, 0.748708, 0, 1.0};
Point(23) = {-0.009655, 0.747859, 0, 1.0};
Point(24) = {-0.014954, 0.746831, 0, 1.0};
Point(25) = {-0.019781, 0.745643, 0, 1.0};
Point(26) = {-0.024090, 0.744316, 0, 1.0};
Point(27) = {-0.027844, 0.742874, 0, 1.0};
Point(28) = {-0.031020, 0.741350, 0, 1.0};
Point(29) = {-0.033597, 0.739791, 0, 1.0};
Point(30) = {-0.035546, 0.738250, 0, 1.0};
Point(31) = {-0.036846, 0.736781, 0, 1.0};
Point(32) = {-0.037477, 0.735474, 0, 1.0};
Point(33) = {-0.037253, 0.734445, 0, 1.0};
Point(34) = {-0.036066, 0.733570, 0, 1.0};
Point(35) = {-0.034005, 0.732705, 0, 1.0};
Point(36) = {-0.031133, 0.731888, 0, 1.0};
Point(37) = {-0.027486, 0.731134, 0, 1.0};
Point(38) = {-0.023097, 0.730445, 0, 1.0};
Point(39) = {-0.018017, 0.729813, 0, 1.0};
Point(40) = {-0.012313, 0.729236, 0, 1.0};
Point(41) = {-0.006054, 0.728720, 0, 1.0};
Point(42) = {0.000684, 0.728265, 0, 1.0};
Point(43) = {0.007820, 0.727875, 0, 1.0};
Point(44) = {0.015273, 0.727556, 0, 1.0};
Point(45) = {0.022954, 0.727307, 0, 1.0};
Point(46) = {0.030773, 0.727137, 0, 1.0};
Point(47) = {0.038638, 0.727044, 0, 1.0};
Point(48) = {0.046459, 0.727037, 0, 1.0};
Point(49) = {0.054138, 0.727116, 0, 1.0};
Point(50) = {0.061579, 0.727294, 0, 1.0};
Point(51) = {0.068687, 0.727591, 0, 1.0};
Point(52) = {0.075368, 0.728080, 0, 1.0};
Point(53) = {0.081673, 0.728866, 0, 1.0};
Point(54) = {0.087755, 0.729847, 0, 1.0};
Point(55) = {0.093569, 0.730756, 0, 1.0};
Point(56) = {0.098905, 0.731451, 0, 1.0};
Point(57) = {0.103565, 0.731892, 0, 1.0};
Point(58) = {0.107371, 0.732090, 0, 1.0};
Point(59) = {0.110179, 0.732110, 0, 1.0};
Point(60) = {0.111891, 0.732047, 0, 1.0};
Point(61) = {-0.112465, -0.732010, 0, 1.0};
Point(62) = {-0.111903, -0.732110, 0, 1.0};
Point(63) = {-0.110286, -0.732459, 0, 1.0};
Point(64) = {-0.107761, -0.733088, 0, 1.0};
Point(65) = {-0.104450, -0.733938, 0, 1.0};
Point(66) = {-0.100401, -0.734926, 0, 1.0};
Point(67) = {-0.095616, -0.736036, 0, 1.0};
Point(68) = {-0.090157, -0.737302, 0, 1.0};
Point(69) = {-0.084132, -0.738730, 0, 1.0};
Point(70) = {-0.077661, -0.740302, 0, 1.0};
Point(71) = {-0.070864, -0.741984, 0, 1.0};
Point(72) = {-0.063874, -0.743718, 0, 1.0};
Point(73) = {-0.056818, -0.745431, 0, 1.0};
Point(74) = {-0.049815, -0.746991, 0, 1.0};
Point(75) = {-0.042878, -0.748229, 0, 1.0};
Point(76) = {-0.035919, -0.749097, 0, 1.0};
Point(77) = {-0.028937, -0.749662, 0, 1.0};
Point(78) = {-0.022003, -0.749961, 0, 1.0};
Point(79) = {-0.015187, -0.750000, 0, 1.0};
Point(80) = {-0.008550, -0.749794, 0, 1.0};
Point(81) = {-0.002155, -0.749358, 0, 1.0};
Point(82) = {0.003934, -0.748708, 0, 1.0};
Point(83) = {0.009655, -0.747859, 0, 1.0};
Point(84) = {0.014954, -0.746831, 0, 1.0};
Point(85) = {0.019781, -0.745643, 0, 1.0};
Point(86) = {0.024090, -0.744316, 0, 1.0};
Point(87) = {0.027844, -0.742874, 0, 1.0};
Point(88) = {0.031020, -0.741350, 0, 1.0};
Point(89) = {0.033597, -0.739791, 0, 1.0};
Point(90) = {0.035546, -0.738250, 0, 1.0};
Point(91) = {0.036846, -0.736781, 0, 1.0};
Point(92) = {0.037477, -0.735474, 0, 1.0};
Point(93) = {0.037253, -0.734445, 0, 1.0};
Point(94) = {0.036066, -0.733570, 0, 1.0};
Point(95) = {0.034005, -0.732705, 0, 1.0};
Point(96) = {0.031133, -0.731888, 0, 1.0};
Point(97) = {0.027486, -0.731134, 0, 1.0};
Point(98) = {0.023097, -0.730445, 0, 1.0};
Point(99) = {0.018017, -0.729813, 0, 1.0};
Point(100) = {0.012313, -0.729236, 0, 1.0};
Point(101) = {0.006054, -0.728720, 0, 1.0};
Point(102) = {-0.000684, -0.728265, 0, 1.0};
Point(103) = {-0.007820, -0.727875, 0, 1.0};
Point(104) = {-0.015273, -0.727556, 0, 1.0};
Point(105) = {-0.022954, -0.727307, 0, 1.0};
Point(106) = {-0.030773, -0.727137, 0, 1.0};
Point(107) = {-0.038638, -0.727044, 0, 1.0};
Point(108) = {-0.046459, -0.727037, 0, 1.0};
Point(109) = {-0.054138, -0.727116, 0, 1.0};
Point(110) = {-0.061579, -0.727294, 0, 1.0};
Point(111) = {-0.068687, -0.727591, 0, 1.0};
Point(112) = {-0.075368, -0.728080, 0, 1.0};
Point(113) = {-0.081673, -0.728866, 0, 1.0};
Point(114) = {-0.087755, -0.729847, 0, 1.0};
Point(115) = {-0.093569, -0.730756, 0, 1.0};
Point(116) = {-0.098905, -0.731451, 0, 1.0};
Point(117) = {-0.103565, -0.731892, 0, 1.0};
Point(118) = {-0.107371, -0.732090, 0, 1.0};
Point(119) = {-0.110179, -0.732110, 0, 1.0};
Point(120) = {-0.111891, -0.732047, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html