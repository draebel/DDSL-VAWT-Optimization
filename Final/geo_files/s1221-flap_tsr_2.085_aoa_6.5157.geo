SetFactory("OpenCASCADE");

Point(1) = {0.075333, 0.726163, 0, 1.0};
Point(2) = {0.070450, 0.727857, 0, 1.0};
Point(3) = {0.067963, 0.728678, 0, 1.0};
Point(4) = {0.065464, 0.729454, 0, 1.0};
Point(5) = {0.062948, 0.730173, 0, 1.0};
Point(6) = {0.060414, 0.730832, 0, 1.0};
Point(7) = {0.051522, 0.732985, 0, 1.0};
Point(8) = {0.038897, 0.736033, 0, 1.0};
Point(9) = {0.037382, 0.736405, 0, 1.0};
Point(10) = {0.031060, 0.737925, 0, 1.0};
Point(11) = {0.024642, 0.739426, 0, 1.0};
Point(12) = {0.018162, 0.740898, 0, 1.0};
Point(13) = {0.011675, 0.742333, 0, 1.0};
Point(14) = {0.005230, 0.743721, 0, 1.0};
Point(15) = {-0.001118, 0.745046, 0, 1.0};
Point(16) = {-0.007316, 0.746276, 0, 1.0};
Point(17) = {-0.013323, 0.747380, 0, 1.0};
Point(18) = {-0.019109, 0.748327, 0, 1.0};
Point(19) = {-0.024652, 0.749088, 0, 1.0};
Point(20) = {-0.029926, 0.749652, 0, 1.0};
Point(21) = {-0.034911, 0.749961, 0, 1.0};
Point(22) = {-0.039634, 0.750000, 0, 1.0};
Point(23) = {-0.044114, 0.749797, 0, 1.0};
Point(24) = {-0.048354, 0.749367, 0, 1.0};
Point(25) = {-0.052344, 0.748749, 0, 1.0};
Point(26) = {-0.056060, 0.747970, 0, 1.0};
Point(27) = {-0.059480, 0.747054, 0, 1.0};
Point(28) = {-0.062588, 0.746014, 0, 1.0};
Point(29) = {-0.065365, 0.744874, 0, 1.0};
Point(30) = {-0.067801, 0.743656, 0, 1.0};
Point(31) = {-0.069876, 0.742384, 0, 1.0};
Point(32) = {-0.071576, 0.741088, 0, 1.0};
Point(33) = {-0.072874, 0.739773, 0, 1.0};
Point(34) = {-0.073785, 0.738452, 0, 1.0};
Point(35) = {-0.074335, 0.737176, 0, 1.0};
Point(36) = {-0.074516, 0.736026, 0, 1.0};
Point(37) = {-0.074209, 0.735142, 0, 1.0};
Point(38) = {-0.073264, 0.734436, 0, 1.0};
Point(39) = {-0.071688, 0.733724, 0, 1.0};
Point(40) = {-0.069573, 0.733021, 0, 1.0};
Point(41) = {-0.066947, 0.732333, 0, 1.0};
Point(42) = {-0.063844, 0.731669, 0, 1.0};
Point(43) = {-0.060287, 0.731037, 0, 1.0};
Point(44) = {-0.056312, 0.730454, 0, 1.0};
Point(45) = {-0.051946, 0.729931, 0, 1.0};
Point(46) = {-0.047224, 0.729490, 0, 1.0};
Point(47) = {-0.042186, 0.729171, 0, 1.0};
Point(48) = {-0.036796, 0.729057, 0, 1.0};
Point(49) = {-0.030978, 0.729125, 0, 1.0};
Point(50) = {-0.024737, 0.729282, 0, 1.0};
Point(51) = {-0.018112, 0.729481, 0, 1.0};
Point(52) = {-0.011153, 0.729686, 0, 1.0};
Point(53) = {-0.003912, 0.729860, 0, 1.0};
Point(54) = {0.003553, 0.729982, 0, 1.0};
Point(55) = {0.011181, 0.730017, 0, 1.0};
Point(56) = {0.018901, 0.729948, 0, 1.0};
Point(57) = {0.026644, 0.729754, 0, 1.0};
Point(58) = {0.034342, 0.729426, 0, 1.0};
Point(59) = {0.038207, 0.729203, 0, 1.0};
Point(60) = {0.051189, 0.728322, 0, 1.0};
Point(61) = {0.058958, 0.727644, 0, 1.0};
Point(62) = {0.061544, 0.727352, 0, 1.0};
Point(63) = {0.064120, 0.726988, 0, 1.0};
Point(64) = {0.066686, 0.726550, 0, 1.0};
Point(65) = {0.069237, 0.726035, 0, 1.0};
Point(66) = {0.075161, 0.724657, 0, 1.0};
Point(67) = {-0.075333, -0.726163, 0, 1.0};
Point(68) = {-0.070450, -0.727857, 0, 1.0};
Point(69) = {-0.067963, -0.728678, 0, 1.0};
Point(70) = {-0.065464, -0.729454, 0, 1.0};
Point(71) = {-0.062948, -0.730173, 0, 1.0};
Point(72) = {-0.060414, -0.730832, 0, 1.0};
Point(73) = {-0.051522, -0.732985, 0, 1.0};
Point(74) = {-0.038897, -0.736033, 0, 1.0};
Point(75) = {-0.037382, -0.736405, 0, 1.0};
Point(76) = {-0.031060, -0.737925, 0, 1.0};
Point(77) = {-0.024642, -0.739426, 0, 1.0};
Point(78) = {-0.018162, -0.740898, 0, 1.0};
Point(79) = {-0.011675, -0.742333, 0, 1.0};
Point(80) = {-0.005230, -0.743721, 0, 1.0};
Point(81) = {0.001118, -0.745046, 0, 1.0};
Point(82) = {0.007316, -0.746276, 0, 1.0};
Point(83) = {0.013323, -0.747380, 0, 1.0};
Point(84) = {0.019109, -0.748327, 0, 1.0};
Point(85) = {0.024652, -0.749088, 0, 1.0};
Point(86) = {0.029926, -0.749652, 0, 1.0};
Point(87) = {0.034911, -0.749961, 0, 1.0};
Point(88) = {0.039634, -0.750000, 0, 1.0};
Point(89) = {0.044114, -0.749797, 0, 1.0};
Point(90) = {0.048354, -0.749367, 0, 1.0};
Point(91) = {0.052344, -0.748749, 0, 1.0};
Point(92) = {0.056060, -0.747970, 0, 1.0};
Point(93) = {0.059480, -0.747054, 0, 1.0};
Point(94) = {0.062588, -0.746014, 0, 1.0};
Point(95) = {0.065365, -0.744874, 0, 1.0};
Point(96) = {0.067801, -0.743656, 0, 1.0};
Point(97) = {0.069876, -0.742384, 0, 1.0};
Point(98) = {0.071576, -0.741088, 0, 1.0};
Point(99) = {0.072874, -0.739773, 0, 1.0};
Point(100) = {0.073785, -0.738452, 0, 1.0};
Point(101) = {0.074335, -0.737176, 0, 1.0};
Point(102) = {0.074516, -0.736026, 0, 1.0};
Point(103) = {0.074209, -0.735142, 0, 1.0};
Point(104) = {0.073264, -0.734436, 0, 1.0};
Point(105) = {0.071688, -0.733724, 0, 1.0};
Point(106) = {0.069573, -0.733021, 0, 1.0};
Point(107) = {0.066947, -0.732333, 0, 1.0};
Point(108) = {0.063844, -0.731669, 0, 1.0};
Point(109) = {0.060287, -0.731037, 0, 1.0};
Point(110) = {0.056312, -0.730454, 0, 1.0};
Point(111) = {0.051946, -0.729931, 0, 1.0};
Point(112) = {0.047224, -0.729490, 0, 1.0};
Point(113) = {0.042186, -0.729171, 0, 1.0};
Point(114) = {0.036796, -0.729057, 0, 1.0};
Point(115) = {0.030978, -0.729125, 0, 1.0};
Point(116) = {0.024737, -0.729282, 0, 1.0};
Point(117) = {0.018112, -0.729481, 0, 1.0};
Point(118) = {0.011153, -0.729686, 0, 1.0};
Point(119) = {0.003912, -0.729860, 0, 1.0};
Point(120) = {-0.003553, -0.729982, 0, 1.0};
Point(121) = {-0.011181, -0.730017, 0, 1.0};
Point(122) = {-0.018901, -0.729948, 0, 1.0};
Point(123) = {-0.026644, -0.729754, 0, 1.0};
Point(124) = {-0.034342, -0.729426, 0, 1.0};
Point(125) = {-0.038207, -0.729203, 0, 1.0};
Point(126) = {-0.051189, -0.728322, 0, 1.0};
Point(127) = {-0.058958, -0.727644, 0, 1.0};
Point(128) = {-0.061544, -0.727352, 0, 1.0};
Point(129) = {-0.064120, -0.726988, 0, 1.0};
Point(130) = {-0.066686, -0.726550, 0, 1.0};
Point(131) = {-0.069237, -0.726035, 0, 1.0};
Point(132) = {-0.075161, -0.724657, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:66};
Spline(4) = {66,1};

// Lines: second blade (splines 5-8)
Spline(5) = {67:87};
Spline(6) = {87:115};
Spline(7) = {115:132};
Spline(8) = {132,67};

// Outer domain (points 20001-4 and lines)
Point(133) = {-13.50000000, -15.00000000, 0, 1.0};
Point(134) = {-13.50000000, 15.00000000, 0, 1.0};
Point(135) = {36.00000000, 15.00000000, 0, 1.0};
Point(136) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {133, 134};
Line(12) = {134, 135};
Line(13) = {135, 136};
Line(14) = {133, 136};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html