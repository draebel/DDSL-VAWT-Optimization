SetFactory("OpenCASCADE");

Point(1) = {0.074168, 0.725730, 0, 1.0};
Point(2) = {0.073709, 0.725979, 0, 1.0};
Point(3) = {0.072478, 0.726782, 0, 1.0};
Point(4) = {0.070757, 0.728138, 0, 1.0};
Point(5) = {0.068750, 0.729881, 0, 1.0};
Point(6) = {0.066525, 0.731806, 0, 1.0};
Point(7) = {0.064048, 0.733751, 0, 1.0};
Point(8) = {0.061236, 0.735639, 0, 1.0};
Point(9) = {0.058042, 0.737494, 0, 1.0};
Point(10) = {0.054512, 0.739351, 0, 1.0};
Point(11) = {0.050724, 0.741189, 0, 1.0};
Point(12) = {0.046745, 0.742963, 0, 1.0};
Point(13) = {0.042624, 0.744607, 0, 1.0};
Point(14) = {0.038378, 0.746064, 0, 1.0};
Point(15) = {0.034019, 0.747308, 0, 1.0};
Point(16) = {0.029572, 0.748320, 0, 1.0};
Point(17) = {0.025056, 0.749082, 0, 1.0};
Point(18) = {0.020484, 0.749602, 0, 1.0};
Point(19) = {0.015892, 0.749903, 0, 1.0};
Point(20) = {0.011332, 0.750000, 0, 1.0};
Point(21) = {0.006857, 0.749902, 0, 1.0};
Point(22) = {0.002512, 0.749618, 0, 1.0};
Point(23) = {-0.001654, 0.749158, 0, 1.0};
Point(24) = {-0.005597, 0.748536, 0, 1.0};
Point(25) = {-0.009275, 0.747765, 0, 1.0};
Point(26) = {-0.012645, 0.746863, 0, 1.0};
Point(27) = {-0.015672, 0.745847, 0, 1.0};
Point(28) = {-0.018317, 0.744738, 0, 1.0};
Point(29) = {-0.020545, 0.743555, 0, 1.0};
Point(30) = {-0.022328, 0.742302, 0, 1.0};
Point(31) = {-0.023672, 0.741000, 0, 1.0};
Point(32) = {-0.024578, 0.739713, 0, 1.0};
Point(33) = {-0.025009, 0.738525, 0, 1.0};
Point(34) = {-0.024786, 0.737486, 0, 1.0};
Point(35) = {-0.023842, 0.736463, 0, 1.0};
Point(36) = {-0.022293, 0.735347, 0, 1.0};
Point(37) = {-0.020204, 0.734171, 0, 1.0};
Point(38) = {-0.017621, 0.732957, 0, 1.0};
Point(39) = {-0.014583, 0.731730, 0, 1.0};
Point(40) = {-0.011135, 0.730508, 0, 1.0};
Point(41) = {-0.007318, 0.729310, 0, 1.0};
Point(42) = {-0.003181, 0.728156, 0, 1.0};
Point(43) = {0.001224, 0.727064, 0, 1.0};
Point(44) = {0.005845, 0.726053, 0, 1.0};
Point(45) = {0.010628, 0.725144, 0, 1.0};
Point(46) = {0.015515, 0.724356, 0, 1.0};
Point(47) = {0.020449, 0.723720, 0, 1.0};
Point(48) = {0.025388, 0.723273, 0, 1.0};
Point(49) = {0.030315, 0.723040, 0, 1.0};
Point(50) = {0.035219, 0.723015, 0, 1.0};
Point(51) = {0.040076, 0.723171, 0, 1.0};
Point(52) = {0.044841, 0.723472, 0, 1.0};
Point(53) = {0.049450, 0.723901, 0, 1.0};
Point(54) = {0.053870, 0.724470, 0, 1.0};
Point(55) = {0.058130, 0.725144, 0, 1.0};
Point(56) = {0.062227, 0.725800, 0, 1.0};
Point(57) = {0.066087, 0.726272, 0, 1.0};
Point(58) = {0.069487, 0.726390, 0, 1.0};
Point(59) = {0.072082, 0.726173, 0, 1.0};
Point(60) = {0.073651, 0.725868, 0, 1.0};
Point(61) = {-0.074168, -0.725730, 0, 1.0};
Point(62) = {-0.073709, -0.725979, 0, 1.0};
Point(63) = {-0.072478, -0.726782, 0, 1.0};
Point(64) = {-0.070757, -0.728138, 0, 1.0};
Point(65) = {-0.068750, -0.729881, 0, 1.0};
Point(66) = {-0.066525, -0.731806, 0, 1.0};
Point(67) = {-0.064048, -0.733751, 0, 1.0};
Point(68) = {-0.061236, -0.735639, 0, 1.0};
Point(69) = {-0.058042, -0.737494, 0, 1.0};
Point(70) = {-0.054512, -0.739351, 0, 1.0};
Point(71) = {-0.050724, -0.741189, 0, 1.0};
Point(72) = {-0.046745, -0.742963, 0, 1.0};
Point(73) = {-0.042624, -0.744607, 0, 1.0};
Point(74) = {-0.038378, -0.746064, 0, 1.0};
Point(75) = {-0.034019, -0.747308, 0, 1.0};
Point(76) = {-0.029572, -0.748320, 0, 1.0};
Point(77) = {-0.025056, -0.749082, 0, 1.0};
Point(78) = {-0.020484, -0.749602, 0, 1.0};
Point(79) = {-0.015892, -0.749903, 0, 1.0};
Point(80) = {-0.011332, -0.750000, 0, 1.0};
Point(81) = {-0.006857, -0.749902, 0, 1.0};
Point(82) = {-0.002512, -0.749618, 0, 1.0};
Point(83) = {0.001654, -0.749158, 0, 1.0};
Point(84) = {0.005597, -0.748536, 0, 1.0};
Point(85) = {0.009275, -0.747765, 0, 1.0};
Point(86) = {0.012645, -0.746863, 0, 1.0};
Point(87) = {0.015672, -0.745847, 0, 1.0};
Point(88) = {0.018317, -0.744738, 0, 1.0};
Point(89) = {0.020545, -0.743555, 0, 1.0};
Point(90) = {0.022328, -0.742302, 0, 1.0};
Point(91) = {0.023672, -0.741000, 0, 1.0};
Point(92) = {0.024578, -0.739713, 0, 1.0};
Point(93) = {0.025009, -0.738525, 0, 1.0};
Point(94) = {0.024786, -0.737486, 0, 1.0};
Point(95) = {0.023842, -0.736463, 0, 1.0};
Point(96) = {0.022293, -0.735347, 0, 1.0};
Point(97) = {0.020204, -0.734171, 0, 1.0};
Point(98) = {0.017621, -0.732957, 0, 1.0};
Point(99) = {0.014583, -0.731730, 0, 1.0};
Point(100) = {0.011135, -0.730508, 0, 1.0};
Point(101) = {0.007318, -0.729310, 0, 1.0};
Point(102) = {0.003181, -0.728156, 0, 1.0};
Point(103) = {-0.001224, -0.727064, 0, 1.0};
Point(104) = {-0.005845, -0.726053, 0, 1.0};
Point(105) = {-0.010628, -0.725144, 0, 1.0};
Point(106) = {-0.015515, -0.724356, 0, 1.0};
Point(107) = {-0.020449, -0.723720, 0, 1.0};
Point(108) = {-0.025388, -0.723273, 0, 1.0};
Point(109) = {-0.030315, -0.723040, 0, 1.0};
Point(110) = {-0.035219, -0.723015, 0, 1.0};
Point(111) = {-0.040076, -0.723171, 0, 1.0};
Point(112) = {-0.044841, -0.723472, 0, 1.0};
Point(113) = {-0.049450, -0.723901, 0, 1.0};
Point(114) = {-0.053870, -0.724470, 0, 1.0};
Point(115) = {-0.058130, -0.725144, 0, 1.0};
Point(116) = {-0.062227, -0.725800, 0, 1.0};
Point(117) = {-0.066087, -0.726272, 0, 1.0};
Point(118) = {-0.069487, -0.726390, 0, 1.0};
Point(119) = {-0.072082, -0.726173, 0, 1.0};
Point(120) = {-0.073651, -0.725868, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 23 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html