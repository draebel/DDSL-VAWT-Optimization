SetFactory("OpenCASCADE");

Point(1) = {0.148337, 0.701459, 0, 1.0};
Point(2) = {0.147417, 0.701958, 0, 1.0};
Point(3) = {0.144956, 0.703564, 0, 1.0};
Point(4) = {0.141514, 0.706276, 0, 1.0};
Point(5) = {0.137499, 0.709761, 0, 1.0};
Point(6) = {0.133050, 0.713612, 0, 1.0};
Point(7) = {0.128095, 0.717502, 0, 1.0};
Point(8) = {0.122472, 0.721279, 0, 1.0};
Point(9) = {0.116085, 0.724988, 0, 1.0};
Point(10) = {0.109024, 0.728701, 0, 1.0};
Point(11) = {0.101448, 0.732379, 0, 1.0};
Point(12) = {0.093490, 0.735926, 0, 1.0};
Point(13) = {0.085247, 0.739214, 0, 1.0};
Point(14) = {0.076755, 0.742128, 0, 1.0};
Point(15) = {0.068037, 0.744616, 0, 1.0};
Point(16) = {0.059144, 0.746640, 0, 1.0};
Point(17) = {0.050113, 0.748164, 0, 1.0};
Point(18) = {0.040968, 0.749204, 0, 1.0};
Point(19) = {0.031784, 0.749807, 0, 1.0};
Point(20) = {0.022665, 0.750000, 0, 1.0};
Point(21) = {0.013713, 0.749804, 0, 1.0};
Point(22) = {0.005024, 0.749236, 0, 1.0};
Point(23) = {-0.003308, 0.748316, 0, 1.0};
Point(24) = {-0.011194, 0.747073, 0, 1.0};
Point(25) = {-0.018549, 0.745531, 0, 1.0};
Point(26) = {-0.025290, 0.743725, 0, 1.0};
Point(27) = {-0.031343, 0.741693, 0, 1.0};
Point(28) = {-0.036635, 0.739476, 0, 1.0};
Point(29) = {-0.041090, 0.737110, 0, 1.0};
Point(30) = {-0.044656, 0.734604, 0, 1.0};
Point(31) = {-0.047344, 0.732000, 0, 1.0};
Point(32) = {-0.049156, 0.729426, 0, 1.0};
Point(33) = {-0.050017, 0.727051, 0, 1.0};
Point(34) = {-0.049573, 0.724972, 0, 1.0};
Point(35) = {-0.047684, 0.722926, 0, 1.0};
Point(36) = {-0.044586, 0.720695, 0, 1.0};
Point(37) = {-0.040408, 0.718342, 0, 1.0};
Point(38) = {-0.035241, 0.715915, 0, 1.0};
Point(39) = {-0.029167, 0.713460, 0, 1.0};
Point(40) = {-0.022270, 0.711017, 0, 1.0};
Point(41) = {-0.014637, 0.708620, 0, 1.0};
Point(42) = {-0.006363, 0.706312, 0, 1.0};
Point(43) = {0.002447, 0.704128, 0, 1.0};
Point(44) = {0.011690, 0.702106, 0, 1.0};
Point(45) = {0.021255, 0.700288, 0, 1.0};
Point(46) = {0.031030, 0.698713, 0, 1.0};
Point(47) = {0.040898, 0.697440, 0, 1.0};
Point(48) = {0.050775, 0.696546, 0, 1.0};
Point(49) = {0.060629, 0.696080, 0, 1.0};
Point(50) = {0.070438, 0.696029, 0, 1.0};
Point(51) = {0.080151, 0.696342, 0, 1.0};
Point(52) = {0.089682, 0.696944, 0, 1.0};
Point(53) = {0.098899, 0.697801, 0, 1.0};
Point(54) = {0.107739, 0.698939, 0, 1.0};
Point(55) = {0.116259, 0.700288, 0, 1.0};
Point(56) = {0.124454, 0.701600, 0, 1.0};
Point(57) = {0.132174, 0.702544, 0, 1.0};
Point(58) = {0.138975, 0.702779, 0, 1.0};
Point(59) = {0.144164, 0.702346, 0, 1.0};
Point(60) = {0.147302, 0.701737, 0, 1.0};
Point(61) = {-0.148337, -0.701459, 0, 1.0};
Point(62) = {-0.147417, -0.701958, 0, 1.0};
Point(63) = {-0.144956, -0.703564, 0, 1.0};
Point(64) = {-0.141514, -0.706276, 0, 1.0};
Point(65) = {-0.137499, -0.709761, 0, 1.0};
Point(66) = {-0.133050, -0.713612, 0, 1.0};
Point(67) = {-0.128095, -0.717502, 0, 1.0};
Point(68) = {-0.122472, -0.721279, 0, 1.0};
Point(69) = {-0.116085, -0.724988, 0, 1.0};
Point(70) = {-0.109024, -0.728701, 0, 1.0};
Point(71) = {-0.101448, -0.732379, 0, 1.0};
Point(72) = {-0.093490, -0.735926, 0, 1.0};
Point(73) = {-0.085247, -0.739214, 0, 1.0};
Point(74) = {-0.076755, -0.742128, 0, 1.0};
Point(75) = {-0.068037, -0.744616, 0, 1.0};
Point(76) = {-0.059144, -0.746640, 0, 1.0};
Point(77) = {-0.050113, -0.748164, 0, 1.0};
Point(78) = {-0.040968, -0.749204, 0, 1.0};
Point(79) = {-0.031784, -0.749807, 0, 1.0};
Point(80) = {-0.022665, -0.750000, 0, 1.0};
Point(81) = {-0.013713, -0.749804, 0, 1.0};
Point(82) = {-0.005024, -0.749236, 0, 1.0};
Point(83) = {0.003308, -0.748316, 0, 1.0};
Point(84) = {0.011194, -0.747073, 0, 1.0};
Point(85) = {0.018549, -0.745531, 0, 1.0};
Point(86) = {0.025290, -0.743725, 0, 1.0};
Point(87) = {0.031343, -0.741693, 0, 1.0};
Point(88) = {0.036635, -0.739476, 0, 1.0};
Point(89) = {0.041090, -0.737110, 0, 1.0};
Point(90) = {0.044656, -0.734604, 0, 1.0};
Point(91) = {0.047344, -0.732000, 0, 1.0};
Point(92) = {0.049156, -0.729426, 0, 1.0};
Point(93) = {0.050017, -0.727051, 0, 1.0};
Point(94) = {0.049573, -0.724972, 0, 1.0};
Point(95) = {0.047684, -0.722926, 0, 1.0};
Point(96) = {0.044586, -0.720695, 0, 1.0};
Point(97) = {0.040408, -0.718342, 0, 1.0};
Point(98) = {0.035241, -0.715915, 0, 1.0};
Point(99) = {0.029167, -0.713460, 0, 1.0};
Point(100) = {0.022270, -0.711017, 0, 1.0};
Point(101) = {0.014637, -0.708620, 0, 1.0};
Point(102) = {0.006363, -0.706312, 0, 1.0};
Point(103) = {-0.002447, -0.704128, 0, 1.0};
Point(104) = {-0.011690, -0.702106, 0, 1.0};
Point(105) = {-0.021255, -0.700288, 0, 1.0};
Point(106) = {-0.031030, -0.698713, 0, 1.0};
Point(107) = {-0.040898, -0.697440, 0, 1.0};
Point(108) = {-0.050775, -0.696546, 0, 1.0};
Point(109) = {-0.060629, -0.696080, 0, 1.0};
Point(110) = {-0.070438, -0.696029, 0, 1.0};
Point(111) = {-0.080151, -0.696342, 0, 1.0};
Point(112) = {-0.089682, -0.696944, 0, 1.0};
Point(113) = {-0.098899, -0.697801, 0, 1.0};
Point(114) = {-0.107739, -0.698939, 0, 1.0};
Point(115) = {-0.116259, -0.700288, 0, 1.0};
Point(116) = {-0.124454, -0.701600, 0, 1.0};
Point(117) = {-0.132174, -0.702544, 0, 1.0};
Point(118) = {-0.138975, -0.702779, 0, 1.0};
Point(119) = {-0.144164, -0.702346, 0, 1.0};
Point(120) = {-0.147302, -0.701737, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 46 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html