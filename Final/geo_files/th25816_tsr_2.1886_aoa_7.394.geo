SetFactory("OpenCASCADE");

Point(1) = {0.111579, 0.713594, 0, 1.0};
Point(2) = {0.110889, 0.713968, 0, 1.0};
Point(3) = {0.109043, 0.715173, 0, 1.0};
Point(4) = {0.106462, 0.717206, 0, 1.0};
Point(5) = {0.103450, 0.719821, 0, 1.0};
Point(6) = {0.100113, 0.722709, 0, 1.0};
Point(7) = {0.096397, 0.725626, 0, 1.0};
Point(8) = {0.092180, 0.728459, 0, 1.0};
Point(9) = {0.087389, 0.731241, 0, 1.0};
Point(10) = {0.082094, 0.734026, 0, 1.0};
Point(11) = {0.076412, 0.736784, 0, 1.0};
Point(12) = {0.070444, 0.739445, 0, 1.0};
Point(13) = {0.064261, 0.741911, 0, 1.0};
Point(14) = {0.057892, 0.744096, 0, 1.0};
Point(15) = {0.051353, 0.745962, 0, 1.0};
Point(16) = {0.044683, 0.747480, 0, 1.0};
Point(17) = {0.037910, 0.748623, 0, 1.0};
Point(18) = {0.031052, 0.749403, 0, 1.0};
Point(19) = {0.024163, 0.749855, 0, 1.0};
Point(20) = {0.017324, 0.750000, 0, 1.0};
Point(21) = {0.010610, 0.749853, 0, 1.0};
Point(22) = {0.004093, 0.749427, 0, 1.0};
Point(23) = {-0.002156, 0.748737, 0, 1.0};
Point(24) = {-0.008070, 0.747805, 0, 1.0};
Point(25) = {-0.013587, 0.746648, 0, 1.0};
Point(26) = {-0.018642, 0.745294, 0, 1.0};
Point(27) = {-0.023183, 0.743770, 0, 1.0};
Point(28) = {-0.027151, 0.742107, 0, 1.0};
Point(29) = {-0.030493, 0.740332, 0, 1.0};
Point(30) = {-0.033168, 0.738453, 0, 1.0};
Point(31) = {-0.035183, 0.736500, 0, 1.0};
Point(32) = {-0.036543, 0.734569, 0, 1.0};
Point(33) = {-0.037188, 0.732788, 0, 1.0};
Point(34) = {-0.036855, 0.731229, 0, 1.0};
Point(35) = {-0.035439, 0.729694, 0, 1.0};
Point(36) = {-0.033115, 0.728021, 0, 1.0};
Point(37) = {-0.029981, 0.726256, 0, 1.0};
Point(38) = {-0.026106, 0.724436, 0, 1.0};
Point(39) = {-0.021550, 0.722595, 0, 1.0};
Point(40) = {-0.016378, 0.720762, 0, 1.0};
Point(41) = {-0.010653, 0.718965, 0, 1.0};
Point(42) = {-0.004447, 0.717234, 0, 1.0};
Point(43) = {0.002160, 0.715596, 0, 1.0};
Point(44) = {0.009093, 0.714079, 0, 1.0};
Point(45) = {0.016267, 0.712716, 0, 1.0};
Point(46) = {0.023598, 0.711534, 0, 1.0};
Point(47) = {0.030999, 0.710580, 0, 1.0};
Point(48) = {0.038407, 0.709909, 0, 1.0};
Point(49) = {0.045797, 0.709560, 0, 1.0};
Point(50) = {0.053154, 0.709521, 0, 1.0};
Point(51) = {0.060439, 0.709756, 0, 1.0};
Point(52) = {0.067587, 0.710208, 0, 1.0};
Point(53) = {0.074500, 0.710851, 0, 1.0};
Point(54) = {0.081130, 0.711704, 0, 1.0};
Point(55) = {0.087520, 0.712715, 0, 1.0};
Point(56) = {0.093667, 0.713700, 0, 1.0};
Point(57) = {0.099457, 0.714408, 0, 1.0};
Point(58) = {0.104557, 0.714584, 0, 1.0};
Point(59) = {0.108449, 0.714259, 0, 1.0};
Point(60) = {0.110803, 0.713802, 0, 1.0};
Point(61) = {-0.111579, -0.713594, 0, 1.0};
Point(62) = {-0.110889, -0.713968, 0, 1.0};
Point(63) = {-0.109043, -0.715173, 0, 1.0};
Point(64) = {-0.106462, -0.717206, 0, 1.0};
Point(65) = {-0.103450, -0.719821, 0, 1.0};
Point(66) = {-0.100113, -0.722709, 0, 1.0};
Point(67) = {-0.096397, -0.725626, 0, 1.0};
Point(68) = {-0.092180, -0.728459, 0, 1.0};
Point(69) = {-0.087389, -0.731241, 0, 1.0};
Point(70) = {-0.082094, -0.734026, 0, 1.0};
Point(71) = {-0.076412, -0.736784, 0, 1.0};
Point(72) = {-0.070444, -0.739445, 0, 1.0};
Point(73) = {-0.064261, -0.741911, 0, 1.0};
Point(74) = {-0.057892, -0.744096, 0, 1.0};
Point(75) = {-0.051353, -0.745962, 0, 1.0};
Point(76) = {-0.044683, -0.747480, 0, 1.0};
Point(77) = {-0.037910, -0.748623, 0, 1.0};
Point(78) = {-0.031052, -0.749403, 0, 1.0};
Point(79) = {-0.024163, -0.749855, 0, 1.0};
Point(80) = {-0.017324, -0.750000, 0, 1.0};
Point(81) = {-0.010610, -0.749853, 0, 1.0};
Point(82) = {-0.004093, -0.749427, 0, 1.0};
Point(83) = {0.002156, -0.748737, 0, 1.0};
Point(84) = {0.008070, -0.747805, 0, 1.0};
Point(85) = {0.013587, -0.746648, 0, 1.0};
Point(86) = {0.018642, -0.745294, 0, 1.0};
Point(87) = {0.023183, -0.743770, 0, 1.0};
Point(88) = {0.027151, -0.742107, 0, 1.0};
Point(89) = {0.030493, -0.740332, 0, 1.0};
Point(90) = {0.033168, -0.738453, 0, 1.0};
Point(91) = {0.035183, -0.736500, 0, 1.0};
Point(92) = {0.036543, -0.734569, 0, 1.0};
Point(93) = {0.037188, -0.732788, 0, 1.0};
Point(94) = {0.036855, -0.731229, 0, 1.0};
Point(95) = {0.035439, -0.729694, 0, 1.0};
Point(96) = {0.033115, -0.728021, 0, 1.0};
Point(97) = {0.029981, -0.726256, 0, 1.0};
Point(98) = {0.026106, -0.724436, 0, 1.0};
Point(99) = {0.021550, -0.722595, 0, 1.0};
Point(100) = {0.016378, -0.720762, 0, 1.0};
Point(101) = {0.010653, -0.718965, 0, 1.0};
Point(102) = {0.004447, -0.717234, 0, 1.0};
Point(103) = {-0.002160, -0.715596, 0, 1.0};
Point(104) = {-0.009093, -0.714079, 0, 1.0};
Point(105) = {-0.016267, -0.712716, 0, 1.0};
Point(106) = {-0.023598, -0.711534, 0, 1.0};
Point(107) = {-0.030999, -0.710580, 0, 1.0};
Point(108) = {-0.038407, -0.709909, 0, 1.0};
Point(109) = {-0.045797, -0.709560, 0, 1.0};
Point(110) = {-0.053154, -0.709521, 0, 1.0};
Point(111) = {-0.060439, -0.709756, 0, 1.0};
Point(112) = {-0.067587, -0.710208, 0, 1.0};
Point(113) = {-0.074500, -0.710851, 0, 1.0};
Point(114) = {-0.081130, -0.711704, 0, 1.0};
Point(115) = {-0.087520, -0.712715, 0, 1.0};
Point(116) = {-0.093667, -0.713700, 0, 1.0};
Point(117) = {-0.099457, -0.714408, 0, 1.0};
Point(118) = {-0.104557, -0.714584, 0, 1.0};
Point(119) = {-0.108449, -0.714259, 0, 1.0};
Point(120) = {-0.110803, -0.713802, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 35 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html