SetFactory("OpenCASCADE");

Point(1) = {0.149719, 0.724216, 0, 1.0};
Point(2) = {0.148957, 0.724408, 0, 1.0};
Point(3) = {0.146794, 0.725039, 0, 1.0};
Point(4) = {0.143472, 0.726134, 0, 1.0};
Point(5) = {0.139181, 0.727585, 0, 1.0};
Point(6) = {0.134016, 0.729246, 0, 1.0};
Point(7) = {0.127995, 0.731017, 0, 1.0};
Point(8) = {0.121154, 0.732870, 0, 1.0};
Point(9) = {0.113572, 0.734777, 0, 1.0};
Point(10) = {0.105335, 0.736699, 0, 1.0};
Point(11) = {0.096532, 0.738603, 0, 1.0};
Point(12) = {0.087254, 0.740452, 0, 1.0};
Point(13) = {0.077605, 0.742223, 0, 1.0};
Point(14) = {0.067694, 0.743881, 0, 1.0};
Point(15) = {0.057627, 0.745390, 0, 1.0};
Point(16) = {0.047506, 0.746721, 0, 1.0};
Point(17) = {0.037433, 0.747849, 0, 1.0};
Point(18) = {0.027510, 0.748754, 0, 1.0};
Point(19) = {0.017836, 0.749422, 0, 1.0};
Point(20) = {0.008511, 0.749840, 0, 1.0};
Point(21) = {-0.000373, 0.750000, 0, 1.0};
Point(22) = {-0.008721, 0.749897, 0, 1.0};
Point(23) = {-0.016446, 0.749523, 0, 1.0};
Point(24) = {-0.023476, 0.748870, 0, 1.0};
Point(25) = {-0.029760, 0.747946, 0, 1.0};
Point(26) = {-0.035229, 0.746781, 0, 1.0};
Point(27) = {-0.039787, 0.745370, 0, 1.0};
Point(28) = {-0.043409, 0.743635, 0, 1.0};
Point(29) = {-0.046199, 0.741567, 0, 1.0};
Point(30) = {-0.048230, 0.739296, 0, 1.0};
Point(31) = {-0.049507, 0.736968, 0, 1.0};
Point(32) = {-0.049958, 0.735266, 0, 1.0};
Point(33) = {-0.050007, 0.734626, 0, 1.0};
Point(34) = {-0.049977, 0.734021, 0, 1.0};
Point(35) = {-0.049910, 0.733643, 0, 1.0};
Point(36) = {-0.049794, 0.733294, 0, 1.0};
Point(37) = {-0.049612, 0.732961, 0, 1.0};
Point(38) = {-0.049364, 0.732626, 0, 1.0};
Point(39) = {-0.048891, 0.732114, 0, 1.0};
Point(40) = {-0.048309, 0.731593, 0, 1.0};
Point(41) = {-0.047764, 0.731162, 0, 1.0};
Point(42) = {-0.044868, 0.729364, 0, 1.0};
Point(43) = {-0.040982, 0.727545, 0, 1.0};
Point(44) = {-0.036182, 0.725750, 0, 1.0};
Point(45) = {-0.030538, 0.724024, 0, 1.0};
Point(46) = {-0.024123, 0.722415, 0, 1.0};
Point(47) = {-0.016994, 0.720975, 0, 1.0};
Point(48) = {-0.009205, 0.719727, 0, 1.0};
Point(49) = {-0.000835, 0.718687, 0, 1.0};
Point(50) = {0.008034, 0.717891, 0, 1.0};
Point(51) = {0.017339, 0.717353, 0, 1.0};
Point(52) = {0.026996, 0.717076, 0, 1.0};
Point(53) = {0.036926, 0.717069, 0, 1.0};
Point(54) = {0.047060, 0.717322, 0, 1.0};
Point(55) = {0.057317, 0.717802, 0, 1.0};
Point(56) = {0.067601, 0.718472, 0, 1.0};
Point(57) = {0.077816, 0.719295, 0, 1.0};
Point(58) = {0.087865, 0.720219, 0, 1.0};
Point(59) = {0.097639, 0.721179, 0, 1.0};
Point(60) = {0.107013, 0.722110, 0, 1.0};
Point(61) = {0.115852, 0.722949, 0, 1.0};
Point(62) = {0.124005, 0.723638, 0, 1.0};
Point(63) = {0.131318, 0.724141, 0, 1.0};
Point(64) = {0.137628, 0.724431, 0, 1.0};
Point(65) = {0.142769, 0.724515, 0, 1.0};
Point(66) = {0.146579, 0.724437, 0, 1.0};
Point(67) = {0.148926, 0.724291, 0, 1.0};
Point(68) = {-0.149719, -0.724216, 0, 1.0};
Point(69) = {-0.148957, -0.724408, 0, 1.0};
Point(70) = {-0.146794, -0.725039, 0, 1.0};
Point(71) = {-0.143472, -0.726134, 0, 1.0};
Point(72) = {-0.139181, -0.727585, 0, 1.0};
Point(73) = {-0.134016, -0.729246, 0, 1.0};
Point(74) = {-0.127995, -0.731017, 0, 1.0};
Point(75) = {-0.121154, -0.732870, 0, 1.0};
Point(76) = {-0.113572, -0.734777, 0, 1.0};
Point(77) = {-0.105335, -0.736699, 0, 1.0};
Point(78) = {-0.096532, -0.738603, 0, 1.0};
Point(79) = {-0.087254, -0.740452, 0, 1.0};
Point(80) = {-0.077605, -0.742223, 0, 1.0};
Point(81) = {-0.067694, -0.743881, 0, 1.0};
Point(82) = {-0.057627, -0.745390, 0, 1.0};
Point(83) = {-0.047506, -0.746721, 0, 1.0};
Point(84) = {-0.037433, -0.747849, 0, 1.0};
Point(85) = {-0.027510, -0.748754, 0, 1.0};
Point(86) = {-0.017836, -0.749422, 0, 1.0};
Point(87) = {-0.008511, -0.749840, 0, 1.0};
Point(88) = {0.000373, -0.750000, 0, 1.0};
Point(89) = {0.008721, -0.749897, 0, 1.0};
Point(90) = {0.016446, -0.749523, 0, 1.0};
Point(91) = {0.023476, -0.748870, 0, 1.0};
Point(92) = {0.029760, -0.747946, 0, 1.0};
Point(93) = {0.035229, -0.746781, 0, 1.0};
Point(94) = {0.039787, -0.745370, 0, 1.0};
Point(95) = {0.043409, -0.743635, 0, 1.0};
Point(96) = {0.046199, -0.741567, 0, 1.0};
Point(97) = {0.048230, -0.739296, 0, 1.0};
Point(98) = {0.049507, -0.736968, 0, 1.0};
Point(99) = {0.049958, -0.735266, 0, 1.0};
Point(100) = {0.050007, -0.734626, 0, 1.0};
Point(101) = {0.049977, -0.734021, 0, 1.0};
Point(102) = {0.049910, -0.733643, 0, 1.0};
Point(103) = {0.049794, -0.733294, 0, 1.0};
Point(104) = {0.049612, -0.732961, 0, 1.0};
Point(105) = {0.049364, -0.732626, 0, 1.0};
Point(106) = {0.048891, -0.732114, 0, 1.0};
Point(107) = {0.048309, -0.731593, 0, 1.0};
Point(108) = {0.047764, -0.731162, 0, 1.0};
Point(109) = {0.044868, -0.729364, 0, 1.0};
Point(110) = {0.040982, -0.727545, 0, 1.0};
Point(111) = {0.036182, -0.725750, 0, 1.0};
Point(112) = {0.030538, -0.724024, 0, 1.0};
Point(113) = {0.024123, -0.722415, 0, 1.0};
Point(114) = {0.016994, -0.720975, 0, 1.0};
Point(115) = {0.009205, -0.719727, 0, 1.0};
Point(116) = {0.000835, -0.718687, 0, 1.0};
Point(117) = {-0.008034, -0.717891, 0, 1.0};
Point(118) = {-0.017339, -0.717353, 0, 1.0};
Point(119) = {-0.026996, -0.717076, 0, 1.0};
Point(120) = {-0.036926, -0.717069, 0, 1.0};
Point(121) = {-0.047060, -0.717322, 0, 1.0};
Point(122) = {-0.057317, -0.717802, 0, 1.0};
Point(123) = {-0.067601, -0.718472, 0, 1.0};
Point(124) = {-0.077816, -0.719295, 0, 1.0};
Point(125) = {-0.087865, -0.720219, 0, 1.0};
Point(126) = {-0.097639, -0.721179, 0, 1.0};
Point(127) = {-0.107013, -0.722110, 0, 1.0};
Point(128) = {-0.115852, -0.722949, 0, 1.0};
Point(129) = {-0.124005, -0.723638, 0, 1.0};
Point(130) = {-0.131318, -0.724141, 0, 1.0};
Point(131) = {-0.137628, -0.724431, 0, 1.0};
Point(132) = {-0.142769, -0.724515, 0, 1.0};
Point(133) = {-0.146579, -0.724437, 0, 1.0};
Point(134) = {-0.148926, -0.724291, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html