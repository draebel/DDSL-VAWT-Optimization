SetFactory("OpenCASCADE");

Point(1) = {0.112344, 0.730663, 0, 1.0};
Point(2) = {0.111772, 0.730806, 0, 1.0};
Point(3) = {0.110150, 0.731280, 0, 1.0};
Point(4) = {0.107659, 0.732101, 0, 1.0};
Point(5) = {0.104441, 0.733189, 0, 1.0};
Point(6) = {0.100567, 0.734435, 0, 1.0};
Point(7) = {0.096051, 0.735763, 0, 1.0};
Point(8) = {0.090921, 0.737152, 0, 1.0};
Point(9) = {0.085235, 0.738583, 0, 1.0};
Point(10) = {0.079057, 0.740025, 0, 1.0};
Point(11) = {0.072454, 0.741452, 0, 1.0};
Point(12) = {0.065496, 0.742839, 0, 1.0};
Point(13) = {0.058259, 0.744167, 0, 1.0};
Point(14) = {0.050826, 0.745411, 0, 1.0};
Point(15) = {0.043276, 0.746543, 0, 1.0};
Point(16) = {0.035686, 0.747541, 0, 1.0};
Point(17) = {0.028132, 0.748387, 0, 1.0};
Point(18) = {0.020689, 0.749066, 0, 1.0};
Point(19) = {0.013434, 0.749567, 0, 1.0};
Point(20) = {0.006440, 0.749880, 0, 1.0};
Point(21) = {-0.000223, 0.750000, 0, 1.0};
Point(22) = {-0.006484, 0.749923, 0, 1.0};
Point(23) = {-0.012277, 0.749643, 0, 1.0};
Point(24) = {-0.017550, 0.749153, 0, 1.0};
Point(25) = {-0.022263, 0.748459, 0, 1.0};
Point(26) = {-0.026365, 0.747586, 0, 1.0};
Point(27) = {-0.029783, 0.746528, 0, 1.0};
Point(28) = {-0.032499, 0.745226, 0, 1.0};
Point(29) = {-0.034591, 0.743675, 0, 1.0};
Point(30) = {-0.036115, 0.741972, 0, 1.0};
Point(31) = {-0.037073, 0.740226, 0, 1.0};
Point(32) = {-0.037411, 0.738949, 0, 1.0};
Point(33) = {-0.037447, 0.738470, 0, 1.0};
Point(34) = {-0.037425, 0.738016, 0, 1.0};
Point(35) = {-0.037375, 0.737732, 0, 1.0};
Point(36) = {-0.037288, 0.737470, 0, 1.0};
Point(37) = {-0.037152, 0.737221, 0, 1.0};
Point(38) = {-0.036965, 0.736970, 0, 1.0};
Point(39) = {-0.036610, 0.736586, 0, 1.0};
Point(40) = {-0.036174, 0.736195, 0, 1.0};
Point(41) = {-0.035765, 0.735872, 0, 1.0};
Point(42) = {-0.033594, 0.734524, 0, 1.0};
Point(43) = {-0.030679, 0.733159, 0, 1.0};
Point(44) = {-0.027079, 0.731813, 0, 1.0};
Point(45) = {-0.022846, 0.730519, 0, 1.0};
Point(46) = {-0.018035, 0.729312, 0, 1.0};
Point(47) = {-0.012688, 0.728231, 0, 1.0};
Point(48) = {-0.006846, 0.727295, 0, 1.0};
Point(49) = {-0.000569, 0.726516, 0, 1.0};
Point(50) = {0.006083, 0.725918, 0, 1.0};
Point(51) = {0.013061, 0.725515, 0, 1.0};
Point(52) = {0.020304, 0.725307, 0, 1.0};
Point(53) = {0.027751, 0.725302, 0, 1.0};
Point(54) = {0.035351, 0.725492, 0, 1.0};
Point(55) = {0.043044, 0.725852, 0, 1.0};
Point(56) = {0.050756, 0.726354, 0, 1.0};
Point(57) = {0.058418, 0.726972, 0, 1.0};
Point(58) = {0.065955, 0.727664, 0, 1.0};
Point(59) = {0.073285, 0.728385, 0, 1.0};
Point(60) = {0.080315, 0.729083, 0, 1.0};
Point(61) = {0.086944, 0.729712, 0, 1.0};
Point(62) = {0.093059, 0.730229, 0, 1.0};
Point(63) = {0.098544, 0.730606, 0, 1.0};
Point(64) = {0.103276, 0.730824, 0, 1.0};
Point(65) = {0.107132, 0.730886, 0, 1.0};
Point(66) = {0.109989, 0.730828, 0, 1.0};
Point(67) = {0.111749, 0.730719, 0, 1.0};
Point(68) = {-0.112344, -0.730663, 0, 1.0};
Point(69) = {-0.111772, -0.730806, 0, 1.0};
Point(70) = {-0.110150, -0.731280, 0, 1.0};
Point(71) = {-0.107659, -0.732101, 0, 1.0};
Point(72) = {-0.104441, -0.733189, 0, 1.0};
Point(73) = {-0.100567, -0.734435, 0, 1.0};
Point(74) = {-0.096051, -0.735763, 0, 1.0};
Point(75) = {-0.090921, -0.737152, 0, 1.0};
Point(76) = {-0.085235, -0.738583, 0, 1.0};
Point(77) = {-0.079057, -0.740025, 0, 1.0};
Point(78) = {-0.072454, -0.741452, 0, 1.0};
Point(79) = {-0.065496, -0.742839, 0, 1.0};
Point(80) = {-0.058259, -0.744167, 0, 1.0};
Point(81) = {-0.050826, -0.745411, 0, 1.0};
Point(82) = {-0.043276, -0.746543, 0, 1.0};
Point(83) = {-0.035686, -0.747541, 0, 1.0};
Point(84) = {-0.028132, -0.748387, 0, 1.0};
Point(85) = {-0.020689, -0.749066, 0, 1.0};
Point(86) = {-0.013434, -0.749567, 0, 1.0};
Point(87) = {-0.006440, -0.749880, 0, 1.0};
Point(88) = {0.000223, -0.750000, 0, 1.0};
Point(89) = {0.006484, -0.749923, 0, 1.0};
Point(90) = {0.012277, -0.749643, 0, 1.0};
Point(91) = {0.017550, -0.749153, 0, 1.0};
Point(92) = {0.022263, -0.748459, 0, 1.0};
Point(93) = {0.026365, -0.747586, 0, 1.0};
Point(94) = {0.029783, -0.746528, 0, 1.0};
Point(95) = {0.032499, -0.745226, 0, 1.0};
Point(96) = {0.034591, -0.743675, 0, 1.0};
Point(97) = {0.036115, -0.741972, 0, 1.0};
Point(98) = {0.037073, -0.740226, 0, 1.0};
Point(99) = {0.037411, -0.738949, 0, 1.0};
Point(100) = {0.037447, -0.738470, 0, 1.0};
Point(101) = {0.037425, -0.738016, 0, 1.0};
Point(102) = {0.037375, -0.737732, 0, 1.0};
Point(103) = {0.037288, -0.737470, 0, 1.0};
Point(104) = {0.037152, -0.737221, 0, 1.0};
Point(105) = {0.036965, -0.736970, 0, 1.0};
Point(106) = {0.036610, -0.736586, 0, 1.0};
Point(107) = {0.036174, -0.736195, 0, 1.0};
Point(108) = {0.035765, -0.735872, 0, 1.0};
Point(109) = {0.033594, -0.734524, 0, 1.0};
Point(110) = {0.030679, -0.733159, 0, 1.0};
Point(111) = {0.027079, -0.731813, 0, 1.0};
Point(112) = {0.022846, -0.730519, 0, 1.0};
Point(113) = {0.018035, -0.729312, 0, 1.0};
Point(114) = {0.012688, -0.728231, 0, 1.0};
Point(115) = {0.006846, -0.727295, 0, 1.0};
Point(116) = {0.000569, -0.726516, 0, 1.0};
Point(117) = {-0.006083, -0.725918, 0, 1.0};
Point(118) = {-0.013061, -0.725515, 0, 1.0};
Point(119) = {-0.020304, -0.725307, 0, 1.0};
Point(120) = {-0.027751, -0.725302, 0, 1.0};
Point(121) = {-0.035351, -0.725492, 0, 1.0};
Point(122) = {-0.043044, -0.725852, 0, 1.0};
Point(123) = {-0.050756, -0.726354, 0, 1.0};
Point(124) = {-0.058418, -0.726972, 0, 1.0};
Point(125) = {-0.065955, -0.727664, 0, 1.0};
Point(126) = {-0.073285, -0.728385, 0, 1.0};
Point(127) = {-0.080315, -0.729083, 0, 1.0};
Point(128) = {-0.086944, -0.729712, 0, 1.0};
Point(129) = {-0.093059, -0.730229, 0, 1.0};
Point(130) = {-0.098544, -0.730606, 0, 1.0};
Point(131) = {-0.103276, -0.730824, 0, 1.0};
Point(132) = {-0.107132, -0.730886, 0, 1.0};
Point(133) = {-0.109989, -0.730828, 0, 1.0};
Point(134) = {-0.111749, -0.730719, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html