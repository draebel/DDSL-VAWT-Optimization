SetFactory("OpenCASCADE");

Point(1) = {0.074859, 0.737108, 0, 1.0};
Point(2) = {0.074478, 0.737204, 0, 1.0};
Point(3) = {0.073397, 0.737520, 0, 1.0};
Point(4) = {0.071736, 0.738067, 0, 1.0};
Point(5) = {0.069591, 0.738792, 0, 1.0};
Point(6) = {0.067008, 0.739623, 0, 1.0};
Point(7) = {0.063998, 0.740509, 0, 1.0};
Point(8) = {0.060577, 0.741435, 0, 1.0};
Point(9) = {0.056786, 0.742388, 0, 1.0};
Point(10) = {0.052668, 0.743350, 0, 1.0};
Point(11) = {0.048266, 0.744301, 0, 1.0};
Point(12) = {0.043627, 0.745226, 0, 1.0};
Point(13) = {0.038802, 0.746111, 0, 1.0};
Point(14) = {0.033847, 0.746940, 0, 1.0};
Point(15) = {0.028814, 0.747695, 0, 1.0};
Point(16) = {0.023753, 0.748360, 0, 1.0};
Point(17) = {0.018717, 0.748924, 0, 1.0};
Point(18) = {0.013755, 0.749377, 0, 1.0};
Point(19) = {0.008918, 0.749711, 0, 1.0};
Point(20) = {0.004255, 0.749920, 0, 1.0};
Point(21) = {-0.000186, 0.750000, 0, 1.0};
Point(22) = {-0.004360, 0.749948, 0, 1.0};
Point(23) = {-0.008223, 0.749762, 0, 1.0};
Point(24) = {-0.011738, 0.749435, 0, 1.0};
Point(25) = {-0.014880, 0.748973, 0, 1.0};
Point(26) = {-0.017615, 0.748391, 0, 1.0};
Point(27) = {-0.019894, 0.747685, 0, 1.0};
Point(28) = {-0.021704, 0.746817, 0, 1.0};
Point(29) = {-0.023099, 0.745784, 0, 1.0};
Point(30) = {-0.024115, 0.744648, 0, 1.0};
Point(31) = {-0.024753, 0.743484, 0, 1.0};
Point(32) = {-0.024979, 0.742633, 0, 1.0};
Point(33) = {-0.025003, 0.742313, 0, 1.0};
Point(34) = {-0.024989, 0.742011, 0, 1.0};
Point(35) = {-0.024955, 0.741821, 0, 1.0};
Point(36) = {-0.024897, 0.741647, 0, 1.0};
Point(37) = {-0.024806, 0.741481, 0, 1.0};
Point(38) = {-0.024682, 0.741313, 0, 1.0};
Point(39) = {-0.024445, 0.741057, 0, 1.0};
Point(40) = {-0.024155, 0.740796, 0, 1.0};
Point(41) = {-0.023882, 0.740581, 0, 1.0};
Point(42) = {-0.022434, 0.739682, 0, 1.0};
Point(43) = {-0.020491, 0.738772, 0, 1.0};
Point(44) = {-0.018091, 0.737875, 0, 1.0};
Point(45) = {-0.015269, 0.737012, 0, 1.0};
Point(46) = {-0.012061, 0.736208, 0, 1.0};
Point(47) = {-0.008497, 0.735487, 0, 1.0};
Point(48) = {-0.004602, 0.734863, 0, 1.0};
Point(49) = {-0.000418, 0.734344, 0, 1.0};
Point(50) = {0.004017, 0.733945, 0, 1.0};
Point(51) = {0.008669, 0.733676, 0, 1.0};
Point(52) = {0.013498, 0.733538, 0, 1.0};
Point(53) = {0.018463, 0.733535, 0, 1.0};
Point(54) = {0.023530, 0.733661, 0, 1.0};
Point(55) = {0.028658, 0.733901, 0, 1.0};
Point(56) = {0.033800, 0.734236, 0, 1.0};
Point(57) = {0.038908, 0.734648, 0, 1.0};
Point(58) = {0.043933, 0.735109, 0, 1.0};
Point(59) = {0.048819, 0.735590, 0, 1.0};
Point(60) = {0.053507, 0.736055, 0, 1.0};
Point(61) = {0.057926, 0.736474, 0, 1.0};
Point(62) = {0.062003, 0.736819, 0, 1.0};
Point(63) = {0.065659, 0.737070, 0, 1.0};
Point(64) = {0.068814, 0.737215, 0, 1.0};
Point(65) = {0.071384, 0.737257, 0, 1.0};
Point(66) = {0.073289, 0.737219, 0, 1.0};
Point(67) = {0.074463, 0.737146, 0, 1.0};
Point(68) = {-0.074859, -0.737108, 0, 1.0};
Point(69) = {-0.074478, -0.737204, 0, 1.0};
Point(70) = {-0.073397, -0.737520, 0, 1.0};
Point(71) = {-0.071736, -0.738067, 0, 1.0};
Point(72) = {-0.069591, -0.738792, 0, 1.0};
Point(73) = {-0.067008, -0.739623, 0, 1.0};
Point(74) = {-0.063998, -0.740509, 0, 1.0};
Point(75) = {-0.060577, -0.741435, 0, 1.0};
Point(76) = {-0.056786, -0.742388, 0, 1.0};
Point(77) = {-0.052668, -0.743350, 0, 1.0};
Point(78) = {-0.048266, -0.744301, 0, 1.0};
Point(79) = {-0.043627, -0.745226, 0, 1.0};
Point(80) = {-0.038802, -0.746111, 0, 1.0};
Point(81) = {-0.033847, -0.746940, 0, 1.0};
Point(82) = {-0.028814, -0.747695, 0, 1.0};
Point(83) = {-0.023753, -0.748360, 0, 1.0};
Point(84) = {-0.018717, -0.748924, 0, 1.0};
Point(85) = {-0.013755, -0.749377, 0, 1.0};
Point(86) = {-0.008918, -0.749711, 0, 1.0};
Point(87) = {-0.004255, -0.749920, 0, 1.0};
Point(88) = {0.000186, -0.750000, 0, 1.0};
Point(89) = {0.004360, -0.749948, 0, 1.0};
Point(90) = {0.008223, -0.749762, 0, 1.0};
Point(91) = {0.011738, -0.749435, 0, 1.0};
Point(92) = {0.014880, -0.748973, 0, 1.0};
Point(93) = {0.017615, -0.748391, 0, 1.0};
Point(94) = {0.019894, -0.747685, 0, 1.0};
Point(95) = {0.021704, -0.746817, 0, 1.0};
Point(96) = {0.023099, -0.745784, 0, 1.0};
Point(97) = {0.024115, -0.744648, 0, 1.0};
Point(98) = {0.024753, -0.743484, 0, 1.0};
Point(99) = {0.024979, -0.742633, 0, 1.0};
Point(100) = {0.025003, -0.742313, 0, 1.0};
Point(101) = {0.024989, -0.742011, 0, 1.0};
Point(102) = {0.024955, -0.741821, 0, 1.0};
Point(103) = {0.024897, -0.741647, 0, 1.0};
Point(104) = {0.024806, -0.741481, 0, 1.0};
Point(105) = {0.024682, -0.741313, 0, 1.0};
Point(106) = {0.024445, -0.741057, 0, 1.0};
Point(107) = {0.024155, -0.740796, 0, 1.0};
Point(108) = {0.023882, -0.740581, 0, 1.0};
Point(109) = {0.022434, -0.739682, 0, 1.0};
Point(110) = {0.020491, -0.738772, 0, 1.0};
Point(111) = {0.018091, -0.737875, 0, 1.0};
Point(112) = {0.015269, -0.737012, 0, 1.0};
Point(113) = {0.012061, -0.736208, 0, 1.0};
Point(114) = {0.008497, -0.735487, 0, 1.0};
Point(115) = {0.004602, -0.734863, 0, 1.0};
Point(116) = {0.000418, -0.734344, 0, 1.0};
Point(117) = {-0.004017, -0.733945, 0, 1.0};
Point(118) = {-0.008669, -0.733676, 0, 1.0};
Point(119) = {-0.013498, -0.733538, 0, 1.0};
Point(120) = {-0.018463, -0.733535, 0, 1.0};
Point(121) = {-0.023530, -0.733661, 0, 1.0};
Point(122) = {-0.028658, -0.733901, 0, 1.0};
Point(123) = {-0.033800, -0.734236, 0, 1.0};
Point(124) = {-0.038908, -0.734648, 0, 1.0};
Point(125) = {-0.043933, -0.735109, 0, 1.0};
Point(126) = {-0.048819, -0.735590, 0, 1.0};
Point(127) = {-0.053507, -0.736055, 0, 1.0};
Point(128) = {-0.057926, -0.736474, 0, 1.0};
Point(129) = {-0.062003, -0.736819, 0, 1.0};
Point(130) = {-0.065659, -0.737070, 0, 1.0};
Point(131) = {-0.068814, -0.737215, 0, 1.0};
Point(132) = {-0.071384, -0.737257, 0, 1.0};
Point(133) = {-0.073289, -0.737219, 0, 1.0};
Point(134) = {-0.074463, -0.737146, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html