SetFactory("OpenCASCADE");

Point(1) = {0.074786, 0.727236, 0, 1.0};
Point(2) = {0.074714, 0.727257, 0, 1.0};
Point(3) = {0.069887, 0.728693, 0, 1.0};
Point(4) = {0.064406, 0.730339, 0, 1.0};
Point(5) = {0.058356, 0.732164, 0, 1.0};
Point(6) = {0.051828, 0.734125, 0, 1.0};
Point(7) = {0.044914, 0.736178, 0, 1.0};
Point(8) = {0.037710, 0.738267, 0, 1.0};
Point(9) = {0.030302, 0.740327, 0, 1.0};
Point(10) = {0.022765, 0.742292, 0, 1.0};
Point(11) = {0.015162, 0.744096, 0, 1.0};
Point(12) = {0.007539, 0.745690, 0, 1.0};
Point(13) = {-0.000060, 0.747042, 0, 1.0};
Point(14) = {-0.007593, 0.748138, 0, 1.0};
Point(15) = {-0.015005, 0.748979, 0, 1.0};
Point(16) = {-0.022232, 0.749567, 0, 1.0};
Point(17) = {-0.029212, 0.749905, 0, 1.0};
Point(18) = {-0.035885, 0.750000, 0, 1.0};
Point(19) = {-0.042189, 0.749864, 0, 1.0};
Point(20) = {-0.048066, 0.749510, 0, 1.0};
Point(21) = {-0.053463, 0.748953, 0, 1.0};
Point(22) = {-0.058335, 0.748214, 0, 1.0};
Point(23) = {-0.062640, 0.747320, 0, 1.0};
Point(24) = {-0.066339, 0.746306, 0, 1.0};
Point(25) = {-0.069398, 0.745209, 0, 1.0};
Point(26) = {-0.071781, 0.744077, 0, 1.0};
Point(27) = {-0.073457, 0.742960, 0, 1.0};
Point(28) = {-0.074077, 0.742366, 0, 1.0};
Point(29) = {-0.074311, 0.742067, 0, 1.0};
Point(30) = {-0.074472, 0.741787, 0, 1.0};
Point(31) = {-0.074536, 0.741614, 0, 1.0};
Point(32) = {-0.074553, 0.741458, 0, 1.0};
Point(33) = {-0.074517, 0.741304, 0, 1.0};
Point(34) = {-0.074433, 0.741141, 0, 1.0};
Point(35) = {-0.074239, 0.740884, 0, 1.0};
Point(36) = {-0.073969, 0.740618, 0, 1.0};
Point(37) = {-0.073441, 0.740217, 0, 1.0};
Point(38) = {-0.071651, 0.739295, 0, 1.0};
Point(39) = {-0.069057, 0.738421, 0, 1.0};
Point(40) = {-0.065653, 0.737631, 0, 1.0};
Point(41) = {-0.061440, 0.736934, 0, 1.0};
Point(42) = {-0.056426, 0.736321, 0, 1.0};
Point(43) = {-0.050649, 0.735769, 0, 1.0};
Point(44) = {-0.044168, 0.735256, 0, 1.0};
Point(45) = {-0.037052, 0.734766, 0, 1.0};
Point(46) = {-0.029383, 0.734285, 0, 1.0};
Point(47) = {-0.021251, 0.733800, 0, 1.0};
Point(48) = {-0.012751, 0.733299, 0, 1.0};
Point(49) = {-0.003985, 0.732772, 0, 1.0};
Point(50) = {0.004938, 0.732212, 0, 1.0};
Point(51) = {0.013907, 0.731610, 0, 1.0};
Point(52) = {0.022804, 0.730963, 0, 1.0};
Point(53) = {0.031514, 0.730274, 0, 1.0};
Point(54) = {0.039919, 0.729548, 0, 1.0};
Point(55) = {0.047908, 0.728796, 0, 1.0};
Point(56) = {0.055375, 0.728032, 0, 1.0};
Point(57) = {0.062223, 0.727275, 0, 1.0};
Point(58) = {0.068363, 0.726542, 0, 1.0};
Point(59) = {0.073712, 0.725855, 0, 1.0};
Point(60) = {0.074622, 0.725737, 0, 1.0};
Point(61) = {-0.074786, -0.727236, 0, 1.0};
Point(62) = {-0.074714, -0.727257, 0, 1.0};
Point(63) = {-0.069887, -0.728693, 0, 1.0};
Point(64) = {-0.064406, -0.730339, 0, 1.0};
Point(65) = {-0.058356, -0.732164, 0, 1.0};
Point(66) = {-0.051828, -0.734125, 0, 1.0};
Point(67) = {-0.044914, -0.736178, 0, 1.0};
Point(68) = {-0.037710, -0.738267, 0, 1.0};
Point(69) = {-0.030302, -0.740327, 0, 1.0};
Point(70) = {-0.022765, -0.742292, 0, 1.0};
Point(71) = {-0.015162, -0.744096, 0, 1.0};
Point(72) = {-0.007539, -0.745690, 0, 1.0};
Point(73) = {0.000060, -0.747042, 0, 1.0};
Point(74) = {0.007593, -0.748138, 0, 1.0};
Point(75) = {0.015005, -0.748979, 0, 1.0};
Point(76) = {0.022232, -0.749567, 0, 1.0};
Point(77) = {0.029212, -0.749905, 0, 1.0};
Point(78) = {0.035885, -0.750000, 0, 1.0};
Point(79) = {0.042189, -0.749864, 0, 1.0};
Point(80) = {0.048066, -0.749510, 0, 1.0};
Point(81) = {0.053463, -0.748953, 0, 1.0};
Point(82) = {0.058335, -0.748214, 0, 1.0};
Point(83) = {0.062640, -0.747320, 0, 1.0};
Point(84) = {0.066339, -0.746306, 0, 1.0};
Point(85) = {0.069398, -0.745209, 0, 1.0};
Point(86) = {0.071781, -0.744077, 0, 1.0};
Point(87) = {0.073457, -0.742960, 0, 1.0};
Point(88) = {0.074077, -0.742366, 0, 1.0};
Point(89) = {0.074311, -0.742067, 0, 1.0};
Point(90) = {0.074472, -0.741787, 0, 1.0};
Point(91) = {0.074536, -0.741614, 0, 1.0};
Point(92) = {0.074553, -0.741458, 0, 1.0};
Point(93) = {0.074517, -0.741304, 0, 1.0};
Point(94) = {0.074433, -0.741141, 0, 1.0};
Point(95) = {0.074239, -0.740884, 0, 1.0};
Point(96) = {0.073969, -0.740618, 0, 1.0};
Point(97) = {0.073441, -0.740217, 0, 1.0};
Point(98) = {0.071651, -0.739295, 0, 1.0};
Point(99) = {0.069057, -0.738421, 0, 1.0};
Point(100) = {0.065653, -0.737631, 0, 1.0};
Point(101) = {0.061440, -0.736934, 0, 1.0};
Point(102) = {0.056426, -0.736321, 0, 1.0};
Point(103) = {0.050649, -0.735769, 0, 1.0};
Point(104) = {0.044168, -0.735256, 0, 1.0};
Point(105) = {0.037052, -0.734766, 0, 1.0};
Point(106) = {0.029383, -0.734285, 0, 1.0};
Point(107) = {0.021251, -0.733800, 0, 1.0};
Point(108) = {0.012751, -0.733299, 0, 1.0};
Point(109) = {0.003985, -0.732772, 0, 1.0};
Point(110) = {-0.004938, -0.732212, 0, 1.0};
Point(111) = {-0.013907, -0.731610, 0, 1.0};
Point(112) = {-0.022804, -0.730963, 0, 1.0};
Point(113) = {-0.031514, -0.730274, 0, 1.0};
Point(114) = {-0.039919, -0.729548, 0, 1.0};
Point(115) = {-0.047908, -0.728796, 0, 1.0};
Point(116) = {-0.055375, -0.728032, 0, 1.0};
Point(117) = {-0.062223, -0.727275, 0, 1.0};
Point(118) = {-0.068363, -0.726542, 0, 1.0};
Point(119) = {-0.073712, -0.725855, 0, 1.0};
Point(120) = {-0.074622, -0.725737, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:17};
Spline(2) = {17:45};
Spline(3) = {45:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:77};
Spline(6) = {77:105};
Spline(7) = {105:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {36.00000000, 15.00000000, 0, 1.0};
Point(124) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html