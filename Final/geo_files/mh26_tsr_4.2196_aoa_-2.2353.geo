SetFactory("OpenCASCADE");

Point(1) = {0.149848, 0.740102, 0, 1.0};
Point(2) = {0.149048, 0.740165, 0, 1.0};
Point(3) = {0.146777, 0.740480, 0, 1.0};
Point(4) = {0.143285, 0.741151, 0, 1.0};
Point(5) = {0.138792, 0.742128, 0, 1.0};
Point(6) = {0.133457, 0.743319, 0, 1.0};
Point(7) = {0.127400, 0.744614, 0, 1.0};
Point(8) = {0.120723, 0.745882, 0, 1.0};
Point(9) = {0.113441, 0.746980, 0, 1.0};
Point(10) = {0.105512, 0.747870, 0, 1.0};
Point(11) = {0.096973, 0.748597, 0, 1.0};
Point(12) = {0.087927, 0.749177, 0, 1.0};
Point(13) = {0.078468, 0.749603, 0, 1.0};
Point(14) = {0.068700, 0.749880, 0, 1.0};
Point(15) = {0.058731, 0.750000, 0, 1.0};
Point(16) = {0.048671, 0.749962, 0, 1.0};
Point(17) = {0.038626, 0.749760, 0, 1.0};
Point(18) = {0.028705, 0.749396, 0, 1.0};
Point(19) = {0.019013, 0.748866, 0, 1.0};
Point(20) = {0.009650, 0.748174, 0, 1.0};
Point(21) = {0.000713, 0.747322, 0, 1.0};
Point(22) = {-0.007708, 0.746318, 0, 1.0};
Point(23) = {-0.015529, 0.745166, 0, 1.0};
Point(24) = {-0.022679, 0.743881, 0, 1.0};
Point(25) = {-0.029092, 0.742475, 0, 1.0};
Point(26) = {-0.034714, 0.740971, 0, 1.0};
Point(27) = {-0.039499, 0.739393, 0, 1.0};
Point(28) = {-0.043416, 0.737773, 0, 1.0};
Point(29) = {-0.046438, 0.736155, 0, 1.0};
Point(30) = {-0.048552, 0.734595, 0, 1.0};
Point(31) = {-0.049664, 0.733302, 0, 1.0};
Point(32) = {-0.049860, 0.732911, 0, 1.0};
Point(33) = {-0.049974, 0.732552, 0, 1.0};
Point(34) = {-0.050001, 0.732336, 0, 1.0};
Point(35) = {-0.049976, 0.732149, 0, 1.0};
Point(36) = {-0.049884, 0.731978, 0, 1.0};
Point(37) = {-0.049726, 0.731803, 0, 1.0};
Point(38) = {-0.049392, 0.731533, 0, 1.0};
Point(39) = {-0.048955, 0.731257, 0, 1.0};
Point(40) = {-0.046544, 0.730269, 0, 1.0};
Point(41) = {-0.043246, 0.729432, 0, 1.0};
Point(42) = {-0.038945, 0.728705, 0, 1.0};
Point(43) = {-0.033674, 0.728105, 0, 1.0};
Point(44) = {-0.027479, 0.727633, 0, 1.0};
Point(45) = {-0.020423, 0.727282, 0, 1.0};
Point(46) = {-0.012592, 0.727046, 0, 1.0};
Point(47) = {-0.004076, 0.726926, 0, 1.0};
Point(48) = {0.005025, 0.726925, 0, 1.0};
Point(49) = {0.014615, 0.727050, 0, 1.0};
Point(50) = {0.024595, 0.727294, 0, 1.0};
Point(51) = {0.034858, 0.727648, 0, 1.0};
Point(52) = {0.045286, 0.728098, 0, 1.0};
Point(53) = {0.055758, 0.728639, 0, 1.0};
Point(54) = {0.066154, 0.729263, 0, 1.0};
Point(55) = {0.076354, 0.729965, 0, 1.0};
Point(56) = {0.086240, 0.730740, 0, 1.0};
Point(57) = {0.095699, 0.731588, 0, 1.0};
Point(58) = {0.104625, 0.732506, 0, 1.0};
Point(59) = {0.112909, 0.733514, 0, 1.0};
Point(60) = {0.120520, 0.734649, 0, 1.0};
Point(61) = {0.127460, 0.735842, 0, 1.0};
Point(62) = {0.133633, 0.736997, 0, 1.0};
Point(63) = {0.138963, 0.738090, 0, 1.0};
Point(64) = {0.143411, 0.739032, 0, 1.0};
Point(65) = {0.146853, 0.739695, 0, 1.0};
Point(66) = {0.149074, 0.740024, 0, 1.0};
Point(67) = {-0.149848, -0.740102, 0, 1.0};
Point(68) = {-0.149048, -0.740165, 0, 1.0};
Point(69) = {-0.146777, -0.740480, 0, 1.0};
Point(70) = {-0.143285, -0.741151, 0, 1.0};
Point(71) = {-0.138792, -0.742128, 0, 1.0};
Point(72) = {-0.133457, -0.743319, 0, 1.0};
Point(73) = {-0.127400, -0.744614, 0, 1.0};
Point(74) = {-0.120723, -0.745882, 0, 1.0};
Point(75) = {-0.113441, -0.746980, 0, 1.0};
Point(76) = {-0.105512, -0.747870, 0, 1.0};
Point(77) = {-0.096973, -0.748597, 0, 1.0};
Point(78) = {-0.087927, -0.749177, 0, 1.0};
Point(79) = {-0.078468, -0.749603, 0, 1.0};
Point(80) = {-0.068700, -0.749880, 0, 1.0};
Point(81) = {-0.058731, -0.750000, 0, 1.0};
Point(82) = {-0.048671, -0.749962, 0, 1.0};
Point(83) = {-0.038626, -0.749760, 0, 1.0};
Point(84) = {-0.028705, -0.749396, 0, 1.0};
Point(85) = {-0.019013, -0.748866, 0, 1.0};
Point(86) = {-0.009650, -0.748174, 0, 1.0};
Point(87) = {-0.000713, -0.747322, 0, 1.0};
Point(88) = {0.007708, -0.746318, 0, 1.0};
Point(89) = {0.015529, -0.745166, 0, 1.0};
Point(90) = {0.022679, -0.743881, 0, 1.0};
Point(91) = {0.029092, -0.742475, 0, 1.0};
Point(92) = {0.034714, -0.740971, 0, 1.0};
Point(93) = {0.039499, -0.739393, 0, 1.0};
Point(94) = {0.043416, -0.737773, 0, 1.0};
Point(95) = {0.046438, -0.736155, 0, 1.0};
Point(96) = {0.048552, -0.734595, 0, 1.0};
Point(97) = {0.049664, -0.733302, 0, 1.0};
Point(98) = {0.049860, -0.732911, 0, 1.0};
Point(99) = {0.049974, -0.732552, 0, 1.0};
Point(100) = {0.050001, -0.732336, 0, 1.0};
Point(101) = {0.049976, -0.732149, 0, 1.0};
Point(102) = {0.049884, -0.731978, 0, 1.0};
Point(103) = {0.049726, -0.731803, 0, 1.0};
Point(104) = {0.049392, -0.731533, 0, 1.0};
Point(105) = {0.048955, -0.731257, 0, 1.0};
Point(106) = {0.046544, -0.730269, 0, 1.0};
Point(107) = {0.043246, -0.729432, 0, 1.0};
Point(108) = {0.038945, -0.728705, 0, 1.0};
Point(109) = {0.033674, -0.728105, 0, 1.0};
Point(110) = {0.027479, -0.727633, 0, 1.0};
Point(111) = {0.020423, -0.727282, 0, 1.0};
Point(112) = {0.012592, -0.727046, 0, 1.0};
Point(113) = {0.004076, -0.726926, 0, 1.0};
Point(114) = {-0.005025, -0.726925, 0, 1.0};
Point(115) = {-0.014615, -0.727050, 0, 1.0};
Point(116) = {-0.024595, -0.727294, 0, 1.0};
Point(117) = {-0.034858, -0.727648, 0, 1.0};
Point(118) = {-0.045286, -0.728098, 0, 1.0};
Point(119) = {-0.055758, -0.728639, 0, 1.0};
Point(120) = {-0.066154, -0.729263, 0, 1.0};
Point(121) = {-0.076354, -0.729965, 0, 1.0};
Point(122) = {-0.086240, -0.730740, 0, 1.0};
Point(123) = {-0.095699, -0.731588, 0, 1.0};
Point(124) = {-0.104625, -0.732506, 0, 1.0};
Point(125) = {-0.112909, -0.733514, 0, 1.0};
Point(126) = {-0.120520, -0.734649, 0, 1.0};
Point(127) = {-0.127460, -0.735842, 0, 1.0};
Point(128) = {-0.133633, -0.736997, 0, 1.0};
Point(129) = {-0.138963, -0.738090, 0, 1.0};
Point(130) = {-0.143411, -0.739032, 0, 1.0};
Point(131) = {-0.146853, -0.739695, 0, 1.0};
Point(132) = {-0.149074, -0.740024, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:48};
Spline(3) = {48:66};
Spline(4) = {66,1};

// Lines: second blade (splines 5-8)
Spline(5) = {67:86};
Spline(6) = {86:114};
Spline(7) = {114:132};
Spline(8) = {132,67};

// Outer domain (points 20001-4 and lines)
Point(133) = {-13.50000000, -15.00000000, 0, 1.0};
Point(134) = {-13.50000000, 15.00000000, 0, 1.0};
Point(135) = {13.50000000, 15.00000000, 0, 1.0};
Point(136) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {133, 134};
Line(12) = {134, 135};
Line(13) = {135, 136};
Line(14) = {133, 136};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html