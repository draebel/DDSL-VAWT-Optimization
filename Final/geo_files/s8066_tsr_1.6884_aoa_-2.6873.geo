SetFactory("OpenCASCADE");

Point(1) = {0.112363, 0.745042, 0, 1.0};
Point(2) = {0.112071, 0.745053, 0, 1.0};
Point(3) = {0.111221, 0.745099, 0, 1.0};
Point(4) = {0.109840, 0.745180, 0, 1.0};
Point(5) = {0.107941, 0.745308, 0, 1.0};
Point(6) = {0.105554, 0.745495, 0, 1.0};
Point(7) = {0.102713, 0.745747, 0, 1.0};
Point(8) = {0.099454, 0.746064, 0, 1.0};
Point(9) = {0.095817, 0.746442, 0, 1.0};
Point(10) = {0.091844, 0.746875, 0, 1.0};
Point(11) = {0.087580, 0.747346, 0, 1.0};
Point(12) = {0.083069, 0.747837, 0, 1.0};
Point(13) = {0.078357, 0.748305, 0, 1.0};
Point(14) = {0.073444, 0.748716, 0, 1.0};
Point(15) = {0.068328, 0.749073, 0, 1.0};
Point(16) = {0.063045, 0.749379, 0, 1.0};
Point(17) = {0.057628, 0.749630, 0, 1.0};
Point(18) = {0.052109, 0.749821, 0, 1.0};
Point(19) = {0.046519, 0.749946, 0, 1.0};
Point(20) = {0.040888, 0.750000, 0, 1.0};
Point(21) = {0.035247, 0.749978, 0, 1.0};
Point(22) = {0.029626, 0.749879, 0, 1.0};
Point(23) = {0.024051, 0.749701, 0, 1.0};
Point(24) = {0.018551, 0.749445, 0, 1.0};
Point(25) = {0.013154, 0.749116, 0, 1.0};
Point(26) = {0.007890, 0.748720, 0, 1.0};
Point(27) = {0.002790, 0.748263, 0, 1.0};
Point(28) = {-0.002117, 0.747748, 0, 1.0};
Point(29) = {-0.006801, 0.747181, 0, 1.0};
Point(30) = {-0.011234, 0.746567, 0, 1.0};
Point(31) = {-0.015391, 0.745911, 0, 1.0};
Point(32) = {-0.019247, 0.745219, 0, 1.0};
Point(33) = {-0.022780, 0.744496, 0, 1.0};
Point(34) = {-0.025969, 0.743749, 0, 1.0};
Point(35) = {-0.028795, 0.742983, 0, 1.0};
Point(36) = {-0.031241, 0.742207, 0, 1.0};
Point(37) = {-0.033288, 0.741423, 0, 1.0};
Point(38) = {-0.034930, 0.740633, 0, 1.0};
Point(39) = {-0.036172, 0.739842, 0, 1.0};
Point(40) = {-0.037014, 0.739062, 0, 1.0};
Point(41) = {-0.037472, 0.738333, 0, 1.0};
Point(42) = {-0.037459, 0.737724, 0, 1.0};
Point(43) = {-0.036930, 0.737158, 0, 1.0};
Point(44) = {-0.035961, 0.736573, 0, 1.0};
Point(45) = {-0.034578, 0.736020, 0, 1.0};
Point(46) = {-0.032783, 0.735513, 0, 1.0};
Point(47) = {-0.030577, 0.735062, 0, 1.0};
Point(48) = {-0.027972, 0.734672, 0, 1.0};
Point(49) = {-0.024979, 0.734346, 0, 1.0};
Point(50) = {-0.021614, 0.734083, 0, 1.0};
Point(51) = {-0.017893, 0.733884, 0, 1.0};
Point(52) = {-0.013841, 0.733748, 0, 1.0};
Point(53) = {-0.009483, 0.733673, 0, 1.0};
Point(54) = {-0.004846, 0.733662, 0, 1.0};
Point(55) = {0.000040, 0.733714, 0, 1.0};
Point(56) = {0.005145, 0.733831, 0, 1.0};
Point(57) = {0.010436, 0.734015, 0, 1.0};
Point(58) = {0.015886, 0.734268, 0, 1.0};
Point(59) = {0.021463, 0.734591, 0, 1.0};
Point(60) = {0.027138, 0.734982, 0, 1.0};
Point(61) = {0.032881, 0.735441, 0, 1.0};
Point(62) = {0.038666, 0.735959, 0, 1.0};
Point(63) = {0.044460, 0.736524, 0, 1.0};
Point(64) = {0.050224, 0.737128, 0, 1.0};
Point(65) = {0.055917, 0.737766, 0, 1.0};
Point(66) = {0.061497, 0.738439, 0, 1.0};
Point(67) = {0.066950, 0.739168, 0, 1.0};
Point(68) = {0.072278, 0.739931, 0, 1.0};
Point(69) = {0.077449, 0.740681, 0, 1.0};
Point(70) = {0.082415, 0.741396, 0, 1.0};
Point(71) = {0.087132, 0.742060, 0, 1.0};
Point(72) = {0.091556, 0.742661, 0, 1.0};
Point(73) = {0.095644, 0.743192, 0, 1.0};
Point(74) = {0.099356, 0.743650, 0, 1.0};
Point(75) = {0.102656, 0.744036, 0, 1.0};
Point(76) = {0.105508, 0.744352, 0, 1.0};
Point(77) = {0.107888, 0.744612, 0, 1.0};
Point(78) = {0.109788, 0.744821, 0, 1.0};
Point(79) = {0.111193, 0.744963, 0, 1.0};
Point(80) = {0.112066, 0.745029, 0, 1.0};
Point(81) = {-0.112363, -0.745042, 0, 1.0};
Point(82) = {-0.112071, -0.745053, 0, 1.0};
Point(83) = {-0.111221, -0.745099, 0, 1.0};
Point(84) = {-0.109840, -0.745180, 0, 1.0};
Point(85) = {-0.107941, -0.745308, 0, 1.0};
Point(86) = {-0.105554, -0.745495, 0, 1.0};
Point(87) = {-0.102713, -0.745747, 0, 1.0};
Point(88) = {-0.099454, -0.746064, 0, 1.0};
Point(89) = {-0.095817, -0.746442, 0, 1.0};
Point(90) = {-0.091844, -0.746875, 0, 1.0};
Point(91) = {-0.087580, -0.747346, 0, 1.0};
Point(92) = {-0.083069, -0.747837, 0, 1.0};
Point(93) = {-0.078357, -0.748305, 0, 1.0};
Point(94) = {-0.073444, -0.748716, 0, 1.0};
Point(95) = {-0.068328, -0.749073, 0, 1.0};
Point(96) = {-0.063045, -0.749379, 0, 1.0};
Point(97) = {-0.057628, -0.749630, 0, 1.0};
Point(98) = {-0.052109, -0.749821, 0, 1.0};
Point(99) = {-0.046519, -0.749946, 0, 1.0};
Point(100) = {-0.040888, -0.750000, 0, 1.0};
Point(101) = {-0.035247, -0.749978, 0, 1.0};
Point(102) = {-0.029626, -0.749879, 0, 1.0};
Point(103) = {-0.024051, -0.749701, 0, 1.0};
Point(104) = {-0.018551, -0.749445, 0, 1.0};
Point(105) = {-0.013154, -0.749116, 0, 1.0};
Point(106) = {-0.007890, -0.748720, 0, 1.0};
Point(107) = {-0.002790, -0.748263, 0, 1.0};
Point(108) = {0.002117, -0.747748, 0, 1.0};
Point(109) = {0.006801, -0.747181, 0, 1.0};
Point(110) = {0.011234, -0.746567, 0, 1.0};
Point(111) = {0.015391, -0.745911, 0, 1.0};
Point(112) = {0.019247, -0.745219, 0, 1.0};
Point(113) = {0.022780, -0.744496, 0, 1.0};
Point(114) = {0.025969, -0.743749, 0, 1.0};
Point(115) = {0.028795, -0.742983, 0, 1.0};
Point(116) = {0.031241, -0.742207, 0, 1.0};
Point(117) = {0.033288, -0.741423, 0, 1.0};
Point(118) = {0.034930, -0.740633, 0, 1.0};
Point(119) = {0.036172, -0.739842, 0, 1.0};
Point(120) = {0.037014, -0.739062, 0, 1.0};
Point(121) = {0.037472, -0.738333, 0, 1.0};
Point(122) = {0.037459, -0.737724, 0, 1.0};
Point(123) = {0.036930, -0.737158, 0, 1.0};
Point(124) = {0.035961, -0.736573, 0, 1.0};
Point(125) = {0.034578, -0.736020, 0, 1.0};
Point(126) = {0.032783, -0.735513, 0, 1.0};
Point(127) = {0.030577, -0.735062, 0, 1.0};
Point(128) = {0.027972, -0.734672, 0, 1.0};
Point(129) = {0.024979, -0.734346, 0, 1.0};
Point(130) = {0.021614, -0.734083, 0, 1.0};
Point(131) = {0.017893, -0.733884, 0, 1.0};
Point(132) = {0.013841, -0.733748, 0, 1.0};
Point(133) = {0.009483, -0.733673, 0, 1.0};
Point(134) = {0.004846, -0.733662, 0, 1.0};
Point(135) = {-0.000040, -0.733714, 0, 1.0};
Point(136) = {-0.005145, -0.733831, 0, 1.0};
Point(137) = {-0.010436, -0.734015, 0, 1.0};
Point(138) = {-0.015886, -0.734268, 0, 1.0};
Point(139) = {-0.021463, -0.734591, 0, 1.0};
Point(140) = {-0.027138, -0.734982, 0, 1.0};
Point(141) = {-0.032881, -0.735441, 0, 1.0};
Point(142) = {-0.038666, -0.735959, 0, 1.0};
Point(143) = {-0.044460, -0.736524, 0, 1.0};
Point(144) = {-0.050224, -0.737128, 0, 1.0};
Point(145) = {-0.055917, -0.737766, 0, 1.0};
Point(146) = {-0.061497, -0.738439, 0, 1.0};
Point(147) = {-0.066950, -0.739168, 0, 1.0};
Point(148) = {-0.072278, -0.739931, 0, 1.0};
Point(149) = {-0.077449, -0.740681, 0, 1.0};
Point(150) = {-0.082415, -0.741396, 0, 1.0};
Point(151) = {-0.087132, -0.742060, 0, 1.0};
Point(152) = {-0.091556, -0.742661, 0, 1.0};
Point(153) = {-0.095644, -0.743192, 0, 1.0};
Point(154) = {-0.099356, -0.743650, 0, 1.0};
Point(155) = {-0.102656, -0.744036, 0, 1.0};
Point(156) = {-0.105508, -0.744352, 0, 1.0};
Point(157) = {-0.107888, -0.744612, 0, 1.0};
Point(158) = {-0.109788, -0.744821, 0, 1.0};
Point(159) = {-0.111193, -0.744963, 0, 1.0};
Point(160) = {-0.112066, -0.745029, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html