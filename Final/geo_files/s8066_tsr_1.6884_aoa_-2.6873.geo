SetFactory("OpenCASCADE");

Point(1) = {0.112243, 0.745046, 0, 1.0};
Point(2) = {0.111951, 0.745057, 0, 1.0};
Point(3) = {0.111102, 0.745103, 0, 1.0};
Point(4) = {0.109722, 0.745184, 0, 1.0};
Point(5) = {0.107825, 0.745312, 0, 1.0};
Point(6) = {0.105440, 0.745499, 0, 1.0};
Point(7) = {0.102601, 0.745750, 0, 1.0};
Point(8) = {0.099344, 0.746067, 0, 1.0};
Point(9) = {0.095710, 0.746445, 0, 1.0};
Point(10) = {0.091741, 0.746877, 0, 1.0};
Point(11) = {0.087480, 0.747348, 0, 1.0};
Point(12) = {0.082973, 0.747839, 0, 1.0};
Point(13) = {0.078264, 0.748307, 0, 1.0};
Point(14) = {0.073355, 0.748717, 0, 1.0};
Point(15) = {0.068243, 0.749074, 0, 1.0};
Point(16) = {0.062964, 0.749380, 0, 1.0};
Point(17) = {0.057552, 0.749630, 0, 1.0};
Point(18) = {0.052038, 0.749821, 0, 1.0};
Point(19) = {0.046451, 0.749946, 0, 1.0};
Point(20) = {0.040825, 0.750000, 0, 1.0};
Point(21) = {0.035189, 0.749978, 0, 1.0};
Point(22) = {0.029572, 0.749879, 0, 1.0};
Point(23) = {0.024002, 0.749701, 0, 1.0};
Point(24) = {0.018506, 0.749446, 0, 1.0};
Point(25) = {0.013114, 0.749117, 0, 1.0};
Point(26) = {0.007854, 0.748721, 0, 1.0};
Point(27) = {0.002757, 0.748264, 0, 1.0};
Point(28) = {-0.002145, 0.747750, 0, 1.0};
Point(29) = {-0.006825, 0.747184, 0, 1.0};
Point(30) = {-0.011255, 0.746570, 0, 1.0};
Point(31) = {-0.015409, 0.745915, 0, 1.0};
Point(32) = {-0.019262, 0.745223, 0, 1.0};
Point(33) = {-0.022792, 0.744501, 0, 1.0};
Point(34) = {-0.025978, 0.743754, 0, 1.0};
Point(35) = {-0.028802, 0.742989, 0, 1.0};
Point(36) = {-0.031246, 0.742213, 0, 1.0};
Point(37) = {-0.033291, 0.741430, 0, 1.0};
Point(38) = {-0.034932, 0.740640, 0, 1.0};
Point(39) = {-0.036173, 0.739850, 0, 1.0};
Point(40) = {-0.037014, 0.739071, 0, 1.0};
Point(41) = {-0.037472, 0.738343, 0, 1.0};
Point(42) = {-0.037459, 0.737733, 0, 1.0};
Point(43) = {-0.036931, 0.737168, 0, 1.0};
Point(44) = {-0.035962, 0.736584, 0, 1.0};
Point(45) = {-0.034580, 0.736031, 0, 1.0};
Point(46) = {-0.032787, 0.735525, 0, 1.0};
Point(47) = {-0.030583, 0.735073, 0, 1.0};
Point(48) = {-0.027980, 0.734684, 0, 1.0};
Point(49) = {-0.024989, 0.734359, 0, 1.0};
Point(50) = {-0.021626, 0.734096, 0, 1.0};
Point(51) = {-0.017909, 0.733897, 0, 1.0};
Point(52) = {-0.013860, 0.733761, 0, 1.0};
Point(53) = {-0.009505, 0.733686, 0, 1.0};
Point(54) = {-0.004872, 0.733675, 0, 1.0};
Point(55) = {0.000010, 0.733727, 0, 1.0};
Point(56) = {0.005111, 0.733844, 0, 1.0};
Point(57) = {0.010398, 0.734028, 0, 1.0};
Point(58) = {0.015843, 0.734281, 0, 1.0};
Point(59) = {0.021416, 0.734603, 0, 1.0};
Point(60) = {0.027087, 0.734994, 0, 1.0};
Point(61) = {0.032825, 0.735453, 0, 1.0};
Point(62) = {0.038605, 0.735970, 0, 1.0};
Point(63) = {0.044395, 0.736535, 0, 1.0};
Point(64) = {0.050154, 0.737138, 0, 1.0};
Point(65) = {0.055842, 0.737775, 0, 1.0};
Point(66) = {0.061417, 0.738449, 0, 1.0};
Point(67) = {0.066866, 0.739176, 0, 1.0};
Point(68) = {0.072190, 0.739939, 0, 1.0};
Point(69) = {0.077357, 0.740689, 0, 1.0};
Point(70) = {0.082319, 0.741403, 0, 1.0};
Point(71) = {0.087032, 0.742066, 0, 1.0};
Point(72) = {0.091452, 0.742667, 0, 1.0};
Point(73) = {0.095537, 0.743198, 0, 1.0};
Point(74) = {0.099247, 0.743656, 0, 1.0};
Point(75) = {0.102543, 0.744040, 0, 1.0};
Point(76) = {0.105394, 0.744357, 0, 1.0};
Point(77) = {0.107772, 0.744616, 0, 1.0};
Point(78) = {0.109670, 0.744825, 0, 1.0};
Point(79) = {0.111074, 0.744967, 0, 1.0};
Point(80) = {0.111946, 0.745033, 0, 1.0};
Point(81) = {-0.112243, -0.745046, 0, 1.0};
Point(82) = {-0.111951, -0.745057, 0, 1.0};
Point(83) = {-0.111102, -0.745103, 0, 1.0};
Point(84) = {-0.109722, -0.745184, 0, 1.0};
Point(85) = {-0.107825, -0.745312, 0, 1.0};
Point(86) = {-0.105440, -0.745499, 0, 1.0};
Point(87) = {-0.102601, -0.745750, 0, 1.0};
Point(88) = {-0.099344, -0.746067, 0, 1.0};
Point(89) = {-0.095710, -0.746445, 0, 1.0};
Point(90) = {-0.091741, -0.746877, 0, 1.0};
Point(91) = {-0.087480, -0.747348, 0, 1.0};
Point(92) = {-0.082973, -0.747839, 0, 1.0};
Point(93) = {-0.078264, -0.748307, 0, 1.0};
Point(94) = {-0.073355, -0.748717, 0, 1.0};
Point(95) = {-0.068243, -0.749074, 0, 1.0};
Point(96) = {-0.062964, -0.749380, 0, 1.0};
Point(97) = {-0.057552, -0.749630, 0, 1.0};
Point(98) = {-0.052038, -0.749821, 0, 1.0};
Point(99) = {-0.046451, -0.749946, 0, 1.0};
Point(100) = {-0.040825, -0.750000, 0, 1.0};
Point(101) = {-0.035189, -0.749978, 0, 1.0};
Point(102) = {-0.029572, -0.749879, 0, 1.0};
Point(103) = {-0.024002, -0.749701, 0, 1.0};
Point(104) = {-0.018506, -0.749446, 0, 1.0};
Point(105) = {-0.013114, -0.749117, 0, 1.0};
Point(106) = {-0.007854, -0.748721, 0, 1.0};
Point(107) = {-0.002757, -0.748264, 0, 1.0};
Point(108) = {0.002145, -0.747750, 0, 1.0};
Point(109) = {0.006825, -0.747184, 0, 1.0};
Point(110) = {0.011255, -0.746570, 0, 1.0};
Point(111) = {0.015409, -0.745915, 0, 1.0};
Point(112) = {0.019262, -0.745223, 0, 1.0};
Point(113) = {0.022792, -0.744501, 0, 1.0};
Point(114) = {0.025978, -0.743754, 0, 1.0};
Point(115) = {0.028802, -0.742989, 0, 1.0};
Point(116) = {0.031246, -0.742213, 0, 1.0};
Point(117) = {0.033291, -0.741430, 0, 1.0};
Point(118) = {0.034932, -0.740640, 0, 1.0};
Point(119) = {0.036173, -0.739850, 0, 1.0};
Point(120) = {0.037014, -0.739071, 0, 1.0};
Point(121) = {0.037472, -0.738343, 0, 1.0};
Point(122) = {0.037459, -0.737733, 0, 1.0};
Point(123) = {0.036931, -0.737168, 0, 1.0};
Point(124) = {0.035962, -0.736584, 0, 1.0};
Point(125) = {0.034580, -0.736031, 0, 1.0};
Point(126) = {0.032787, -0.735525, 0, 1.0};
Point(127) = {0.030583, -0.735073, 0, 1.0};
Point(128) = {0.027980, -0.734684, 0, 1.0};
Point(129) = {0.024989, -0.734359, 0, 1.0};
Point(130) = {0.021626, -0.734096, 0, 1.0};
Point(131) = {0.017909, -0.733897, 0, 1.0};
Point(132) = {0.013860, -0.733761, 0, 1.0};
Point(133) = {0.009505, -0.733686, 0, 1.0};
Point(134) = {0.004872, -0.733675, 0, 1.0};
Point(135) = {-0.000010, -0.733727, 0, 1.0};
Point(136) = {-0.005111, -0.733844, 0, 1.0};
Point(137) = {-0.010398, -0.734028, 0, 1.0};
Point(138) = {-0.015843, -0.734281, 0, 1.0};
Point(139) = {-0.021416, -0.734603, 0, 1.0};
Point(140) = {-0.027087, -0.734994, 0, 1.0};
Point(141) = {-0.032825, -0.735453, 0, 1.0};
Point(142) = {-0.038605, -0.735970, 0, 1.0};
Point(143) = {-0.044395, -0.736535, 0, 1.0};
Point(144) = {-0.050154, -0.737138, 0, 1.0};
Point(145) = {-0.055842, -0.737775, 0, 1.0};
Point(146) = {-0.061417, -0.738449, 0, 1.0};
Point(147) = {-0.066866, -0.739176, 0, 1.0};
Point(148) = {-0.072190, -0.739939, 0, 1.0};
Point(149) = {-0.077357, -0.740689, 0, 1.0};
Point(150) = {-0.082319, -0.741403, 0, 1.0};
Point(151) = {-0.087032, -0.742066, 0, 1.0};
Point(152) = {-0.091452, -0.742667, 0, 1.0};
Point(153) = {-0.095537, -0.743198, 0, 1.0};
Point(154) = {-0.099247, -0.743656, 0, 1.0};
Point(155) = {-0.102543, -0.744040, 0, 1.0};
Point(156) = {-0.105394, -0.744357, 0, 1.0};
Point(157) = {-0.107772, -0.744616, 0, 1.0};
Point(158) = {-0.109670, -0.744825, 0, 1.0};
Point(159) = {-0.111074, -0.744967, 0, 1.0};
Point(160) = {-0.111946, -0.745033, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html