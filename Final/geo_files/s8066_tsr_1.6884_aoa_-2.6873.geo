SetFactory("OpenCASCADE");

Point(1) = {0.074890, 0.746696, 0, 1.0};
Point(2) = {0.074695, 0.746703, 0, 1.0};
Point(3) = {0.074129, 0.746734, 0, 1.0};
Point(4) = {0.073208, 0.746788, 0, 1.0};
Point(5) = {0.071943, 0.746873, 0, 1.0};
Point(6) = {0.070353, 0.746998, 0, 1.0};
Point(7) = {0.068459, 0.747166, 0, 1.0};
Point(8) = {0.066287, 0.747377, 0, 1.0};
Point(9) = {0.063864, 0.747629, 0, 1.0};
Point(10) = {0.061216, 0.747917, 0, 1.0};
Point(11) = {0.058375, 0.748232, 0, 1.0};
Point(12) = {0.055369, 0.748559, 0, 1.0};
Point(13) = {0.052228, 0.748871, 0, 1.0};
Point(14) = {0.048954, 0.749145, 0, 1.0};
Point(15) = {0.045545, 0.749382, 0, 1.0};
Point(16) = {0.042024, 0.749586, 0, 1.0};
Point(17) = {0.038415, 0.749753, 0, 1.0};
Point(18) = {0.034737, 0.749881, 0, 1.0};
Point(19) = {0.031011, 0.749964, 0, 1.0};
Point(20) = {0.027259, 0.750000, 0, 1.0};
Point(21) = {0.023500, 0.749985, 0, 1.0};
Point(22) = {0.019754, 0.749919, 0, 1.0};
Point(23) = {0.016039, 0.749801, 0, 1.0};
Point(24) = {0.012374, 0.749630, 0, 1.0};
Point(25) = {0.008777, 0.749411, 0, 1.0};
Point(26) = {0.005269, 0.749147, 0, 1.0};
Point(27) = {0.001870, 0.748842, 0, 1.0};
Point(28) = {-0.001399, 0.748499, 0, 1.0};
Point(29) = {-0.004521, 0.748122, 0, 1.0};
Point(30) = {-0.007475, 0.747712, 0, 1.0};
Point(31) = {-0.010245, 0.747275, 0, 1.0};
Point(32) = {-0.012815, 0.746814, 0, 1.0};
Point(33) = {-0.015169, 0.746332, 0, 1.0};
Point(34) = {-0.017294, 0.745834, 0, 1.0};
Point(35) = {-0.019177, 0.745324, 0, 1.0};
Point(36) = {-0.020808, 0.744807, 0, 1.0};
Point(37) = {-0.022172, 0.744284, 0, 1.0};
Point(38) = {-0.023266, 0.743758, 0, 1.0};
Point(39) = {-0.024094, 0.743231, 0, 1.0};
Point(40) = {-0.024655, 0.742711, 0, 1.0};
Point(41) = {-0.024960, 0.742225, 0, 1.0};
Point(42) = {-0.024951, 0.741819, 0, 1.0};
Point(43) = {-0.024599, 0.741442, 0, 1.0};
Point(44) = {-0.023953, 0.741052, 0, 1.0};
Point(45) = {-0.023031, 0.740684, 0, 1.0};
Point(46) = {-0.021835, 0.740346, 0, 1.0};
Point(47) = {-0.020365, 0.740045, 0, 1.0};
Point(48) = {-0.018629, 0.739785, 0, 1.0};
Point(49) = {-0.016635, 0.739568, 0, 1.0};
Point(50) = {-0.014392, 0.739393, 0, 1.0};
Point(51) = {-0.011913, 0.739260, 0, 1.0};
Point(52) = {-0.009212, 0.739169, 0, 1.0};
Point(53) = {-0.006308, 0.739120, 0, 1.0};
Point(54) = {-0.003218, 0.739112, 0, 1.0};
Point(55) = {0.000038, 0.739147, 0, 1.0};
Point(56) = {0.003440, 0.739225, 0, 1.0};
Point(57) = {0.006966, 0.739348, 0, 1.0};
Point(58) = {0.010598, 0.739517, 0, 1.0};
Point(59) = {0.014314, 0.739731, 0, 1.0};
Point(60) = {0.018096, 0.739992, 0, 1.0};
Point(61) = {0.021923, 0.740298, 0, 1.0};
Point(62) = {0.025778, 0.740643, 0, 1.0};
Point(63) = {0.029640, 0.741020, 0, 1.0};
Point(64) = {0.033481, 0.741422, 0, 1.0};
Point(65) = {0.037275, 0.741847, 0, 1.0};
Point(66) = {0.040993, 0.742296, 0, 1.0};
Point(67) = {0.044627, 0.742781, 0, 1.0};
Point(68) = {0.048177, 0.743290, 0, 1.0};
Point(69) = {0.051623, 0.743790, 0, 1.0};
Point(70) = {0.054933, 0.744266, 0, 1.0};
Point(71) = {0.058076, 0.744709, 0, 1.0};
Point(72) = {0.061024, 0.745109, 0, 1.0};
Point(73) = {0.063748, 0.745463, 0, 1.0};
Point(74) = {0.066222, 0.745769, 0, 1.0};
Point(75) = {0.068421, 0.746025, 0, 1.0};
Point(76) = {0.070322, 0.746236, 0, 1.0};
Point(77) = {0.071908, 0.746409, 0, 1.0};
Point(78) = {0.073174, 0.746548, 0, 1.0};
Point(79) = {0.074110, 0.746643, 0, 1.0};
Point(80) = {0.074692, 0.746688, 0, 1.0};
Point(81) = {-0.074890, -0.746696, 0, 1.0};
Point(82) = {-0.074695, -0.746703, 0, 1.0};
Point(83) = {-0.074129, -0.746734, 0, 1.0};
Point(84) = {-0.073208, -0.746788, 0, 1.0};
Point(85) = {-0.071943, -0.746873, 0, 1.0};
Point(86) = {-0.070353, -0.746998, 0, 1.0};
Point(87) = {-0.068459, -0.747166, 0, 1.0};
Point(88) = {-0.066287, -0.747377, 0, 1.0};
Point(89) = {-0.063864, -0.747629, 0, 1.0};
Point(90) = {-0.061216, -0.747917, 0, 1.0};
Point(91) = {-0.058375, -0.748232, 0, 1.0};
Point(92) = {-0.055369, -0.748559, 0, 1.0};
Point(93) = {-0.052228, -0.748871, 0, 1.0};
Point(94) = {-0.048954, -0.749145, 0, 1.0};
Point(95) = {-0.045545, -0.749382, 0, 1.0};
Point(96) = {-0.042024, -0.749586, 0, 1.0};
Point(97) = {-0.038415, -0.749753, 0, 1.0};
Point(98) = {-0.034737, -0.749881, 0, 1.0};
Point(99) = {-0.031011, -0.749964, 0, 1.0};
Point(100) = {-0.027259, -0.750000, 0, 1.0};
Point(101) = {-0.023500, -0.749985, 0, 1.0};
Point(102) = {-0.019754, -0.749919, 0, 1.0};
Point(103) = {-0.016039, -0.749801, 0, 1.0};
Point(104) = {-0.012374, -0.749630, 0, 1.0};
Point(105) = {-0.008777, -0.749411, 0, 1.0};
Point(106) = {-0.005269, -0.749147, 0, 1.0};
Point(107) = {-0.001870, -0.748842, 0, 1.0};
Point(108) = {0.001399, -0.748499, 0, 1.0};
Point(109) = {0.004521, -0.748122, 0, 1.0};
Point(110) = {0.007475, -0.747712, 0, 1.0};
Point(111) = {0.010245, -0.747275, 0, 1.0};
Point(112) = {0.012815, -0.746814, 0, 1.0};
Point(113) = {0.015169, -0.746332, 0, 1.0};
Point(114) = {0.017294, -0.745834, 0, 1.0};
Point(115) = {0.019177, -0.745324, 0, 1.0};
Point(116) = {0.020808, -0.744807, 0, 1.0};
Point(117) = {0.022172, -0.744284, 0, 1.0};
Point(118) = {0.023266, -0.743758, 0, 1.0};
Point(119) = {0.024094, -0.743231, 0, 1.0};
Point(120) = {0.024655, -0.742711, 0, 1.0};
Point(121) = {0.024960, -0.742225, 0, 1.0};
Point(122) = {0.024951, -0.741819, 0, 1.0};
Point(123) = {0.024599, -0.741442, 0, 1.0};
Point(124) = {0.023953, -0.741052, 0, 1.0};
Point(125) = {0.023031, -0.740684, 0, 1.0};
Point(126) = {0.021835, -0.740346, 0, 1.0};
Point(127) = {0.020365, -0.740045, 0, 1.0};
Point(128) = {0.018629, -0.739785, 0, 1.0};
Point(129) = {0.016635, -0.739568, 0, 1.0};
Point(130) = {0.014392, -0.739393, 0, 1.0};
Point(131) = {0.011913, -0.739260, 0, 1.0};
Point(132) = {0.009212, -0.739169, 0, 1.0};
Point(133) = {0.006308, -0.739120, 0, 1.0};
Point(134) = {0.003218, -0.739112, 0, 1.0};
Point(135) = {-0.000038, -0.739147, 0, 1.0};
Point(136) = {-0.003440, -0.739225, 0, 1.0};
Point(137) = {-0.006966, -0.739348, 0, 1.0};
Point(138) = {-0.010598, -0.739517, 0, 1.0};
Point(139) = {-0.014314, -0.739731, 0, 1.0};
Point(140) = {-0.018096, -0.739992, 0, 1.0};
Point(141) = {-0.021923, -0.740298, 0, 1.0};
Point(142) = {-0.025778, -0.740643, 0, 1.0};
Point(143) = {-0.029640, -0.741020, 0, 1.0};
Point(144) = {-0.033481, -0.741422, 0, 1.0};
Point(145) = {-0.037275, -0.741847, 0, 1.0};
Point(146) = {-0.040993, -0.742296, 0, 1.0};
Point(147) = {-0.044627, -0.742781, 0, 1.0};
Point(148) = {-0.048177, -0.743290, 0, 1.0};
Point(149) = {-0.051623, -0.743790, 0, 1.0};
Point(150) = {-0.054933, -0.744266, 0, 1.0};
Point(151) = {-0.058076, -0.744709, 0, 1.0};
Point(152) = {-0.061024, -0.745109, 0, 1.0};
Point(153) = {-0.063748, -0.745463, 0, 1.0};
Point(154) = {-0.066222, -0.745769, 0, 1.0};
Point(155) = {-0.068421, -0.746025, 0, 1.0};
Point(156) = {-0.070322, -0.746236, 0, 1.0};
Point(157) = {-0.071908, -0.746409, 0, 1.0};
Point(158) = {-0.073174, -0.746548, 0, 1.0};
Point(159) = {-0.074110, -0.746643, 0, 1.0};
Point(160) = {-0.074692, -0.746688, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html