SetFactory("OpenCASCADE");

Point(1) = {0.112335, 0.745044, 0, 1.0};
Point(2) = {0.112043, 0.745055, 0, 1.0};
Point(3) = {0.111194, 0.745101, 0, 1.0};
Point(4) = {0.109813, 0.745182, 0, 1.0};
Point(5) = {0.107915, 0.745310, 0, 1.0};
Point(6) = {0.105529, 0.745497, 0, 1.0};
Point(7) = {0.102689, 0.745748, 0, 1.0};
Point(8) = {0.099431, 0.746065, 0, 1.0};
Point(9) = {0.095795, 0.746444, 0, 1.0};
Point(10) = {0.091824, 0.746876, 0, 1.0};
Point(11) = {0.087562, 0.747347, 0, 1.0};
Point(12) = {0.083053, 0.747838, 0, 1.0};
Point(13) = {0.078342, 0.748306, 0, 1.0};
Point(14) = {0.073431, 0.748717, 0, 1.0};
Point(15) = {0.068317, 0.749073, 0, 1.0};
Point(16) = {0.063037, 0.749379, 0, 1.0};
Point(17) = {0.057622, 0.749630, 0, 1.0};
Point(18) = {0.052106, 0.749821, 0, 1.0};
Point(19) = {0.046517, 0.749946, 0, 1.0};
Point(20) = {0.040888, 0.750000, 0, 1.0};
Point(21) = {0.035250, 0.749978, 0, 1.0};
Point(22) = {0.029631, 0.749879, 0, 1.0};
Point(23) = {0.024059, 0.749701, 0, 1.0};
Point(24) = {0.018561, 0.749445, 0, 1.0};
Point(25) = {0.013166, 0.749116, 0, 1.0};
Point(26) = {0.007904, 0.748721, 0, 1.0};
Point(27) = {0.002806, 0.748263, 0, 1.0};
Point(28) = {-0.002099, 0.747749, 0, 1.0};
Point(29) = {-0.006781, 0.747182, 0, 1.0};
Point(30) = {-0.011213, 0.746569, 0, 1.0};
Point(31) = {-0.015368, 0.745913, 0, 1.0};
Point(32) = {-0.019223, 0.745221, 0, 1.0};
Point(33) = {-0.022754, 0.744498, 0, 1.0};
Point(34) = {-0.025941, 0.743751, 0, 1.0};
Point(35) = {-0.028766, 0.742986, 0, 1.0};
Point(36) = {-0.031211, 0.742210, 0, 1.0};
Point(37) = {-0.033257, 0.741426, 0, 1.0};
Point(38) = {-0.034899, 0.740636, 0, 1.0};
Point(39) = {-0.036141, 0.739846, 0, 1.0};
Point(40) = {-0.036982, 0.739066, 0, 1.0};
Point(41) = {-0.037440, 0.738338, 0, 1.0};
Point(42) = {-0.037427, 0.737729, 0, 1.0};
Point(43) = {-0.036898, 0.737163, 0, 1.0};
Point(44) = {-0.035930, 0.736578, 0, 1.0};
Point(45) = {-0.034547, 0.736026, 0, 1.0};
Point(46) = {-0.032753, 0.735519, 0, 1.0};
Point(47) = {-0.030548, 0.735067, 0, 1.0};
Point(48) = {-0.027944, 0.734678, 0, 1.0};
Point(49) = {-0.024952, 0.734352, 0, 1.0};
Point(50) = {-0.021588, 0.734090, 0, 1.0};
Point(51) = {-0.017869, 0.733891, 0, 1.0};
Point(52) = {-0.013818, 0.733754, 0, 1.0};
Point(53) = {-0.009462, 0.733680, 0, 1.0};
Point(54) = {-0.004827, 0.733668, 0, 1.0};
Point(55) = {0.000057, 0.733721, 0, 1.0};
Point(56) = {0.005160, 0.733838, 0, 1.0};
Point(57) = {0.010449, 0.734021, 0, 1.0};
Point(58) = {0.015896, 0.734275, 0, 1.0};
Point(59) = {0.021472, 0.734597, 0, 1.0};
Point(60) = {0.027144, 0.734988, 0, 1.0};
Point(61) = {0.032885, 0.735447, 0, 1.0};
Point(62) = {0.038668, 0.735965, 0, 1.0};
Point(63) = {0.044460, 0.736530, 0, 1.0};
Point(64) = {0.050221, 0.737133, 0, 1.0};
Point(65) = {0.055912, 0.737771, 0, 1.0};
Point(66) = {0.061489, 0.738444, 0, 1.0};
Point(67) = {0.066940, 0.739172, 0, 1.0};
Point(68) = {0.072266, 0.739935, 0, 1.0};
Point(69) = {0.077435, 0.740685, 0, 1.0};
Point(70) = {0.082399, 0.741400, 0, 1.0};
Point(71) = {0.087114, 0.742063, 0, 1.0};
Point(72) = {0.091536, 0.742664, 0, 1.0};
Point(73) = {0.095623, 0.743195, 0, 1.0};
Point(74) = {0.099333, 0.743653, 0, 1.0};
Point(75) = {0.102632, 0.744038, 0, 1.0};
Point(76) = {0.105483, 0.744354, 0, 1.0};
Point(77) = {0.107862, 0.744614, 0, 1.0};
Point(78) = {0.109761, 0.744823, 0, 1.0};
Point(79) = {0.111166, 0.744965, 0, 1.0};
Point(80) = {0.112038, 0.745031, 0, 1.0};
Point(81) = {-0.112335, -0.745044, 0, 1.0};
Point(82) = {-0.112043, -0.745055, 0, 1.0};
Point(83) = {-0.111194, -0.745101, 0, 1.0};
Point(84) = {-0.109813, -0.745182, 0, 1.0};
Point(85) = {-0.107915, -0.745310, 0, 1.0};
Point(86) = {-0.105529, -0.745497, 0, 1.0};
Point(87) = {-0.102689, -0.745748, 0, 1.0};
Point(88) = {-0.099431, -0.746065, 0, 1.0};
Point(89) = {-0.095795, -0.746444, 0, 1.0};
Point(90) = {-0.091824, -0.746876, 0, 1.0};
Point(91) = {-0.087562, -0.747347, 0, 1.0};
Point(92) = {-0.083053, -0.747838, 0, 1.0};
Point(93) = {-0.078342, -0.748306, 0, 1.0};
Point(94) = {-0.073431, -0.748717, 0, 1.0};
Point(95) = {-0.068317, -0.749073, 0, 1.0};
Point(96) = {-0.063037, -0.749379, 0, 1.0};
Point(97) = {-0.057622, -0.749630, 0, 1.0};
Point(98) = {-0.052106, -0.749821, 0, 1.0};
Point(99) = {-0.046517, -0.749946, 0, 1.0};
Point(100) = {-0.040888, -0.750000, 0, 1.0};
Point(101) = {-0.035250, -0.749978, 0, 1.0};
Point(102) = {-0.029631, -0.749879, 0, 1.0};
Point(103) = {-0.024059, -0.749701, 0, 1.0};
Point(104) = {-0.018561, -0.749445, 0, 1.0};
Point(105) = {-0.013166, -0.749116, 0, 1.0};
Point(106) = {-0.007904, -0.748721, 0, 1.0};
Point(107) = {-0.002806, -0.748263, 0, 1.0};
Point(108) = {0.002099, -0.747749, 0, 1.0};
Point(109) = {0.006781, -0.747182, 0, 1.0};
Point(110) = {0.011213, -0.746569, 0, 1.0};
Point(111) = {0.015368, -0.745913, 0, 1.0};
Point(112) = {0.019223, -0.745221, 0, 1.0};
Point(113) = {0.022754, -0.744498, 0, 1.0};
Point(114) = {0.025941, -0.743751, 0, 1.0};
Point(115) = {0.028766, -0.742986, 0, 1.0};
Point(116) = {0.031211, -0.742210, 0, 1.0};
Point(117) = {0.033257, -0.741426, 0, 1.0};
Point(118) = {0.034899, -0.740636, 0, 1.0};
Point(119) = {0.036141, -0.739846, 0, 1.0};
Point(120) = {0.036982, -0.739066, 0, 1.0};
Point(121) = {0.037440, -0.738338, 0, 1.0};
Point(122) = {0.037427, -0.737729, 0, 1.0};
Point(123) = {0.036898, -0.737163, 0, 1.0};
Point(124) = {0.035930, -0.736578, 0, 1.0};
Point(125) = {0.034547, -0.736026, 0, 1.0};
Point(126) = {0.032753, -0.735519, 0, 1.0};
Point(127) = {0.030548, -0.735067, 0, 1.0};
Point(128) = {0.027944, -0.734678, 0, 1.0};
Point(129) = {0.024952, -0.734352, 0, 1.0};
Point(130) = {0.021588, -0.734090, 0, 1.0};
Point(131) = {0.017869, -0.733891, 0, 1.0};
Point(132) = {0.013818, -0.733754, 0, 1.0};
Point(133) = {0.009462, -0.733680, 0, 1.0};
Point(134) = {0.004827, -0.733668, 0, 1.0};
Point(135) = {-0.000057, -0.733721, 0, 1.0};
Point(136) = {-0.005160, -0.733838, 0, 1.0};
Point(137) = {-0.010449, -0.734021, 0, 1.0};
Point(138) = {-0.015896, -0.734275, 0, 1.0};
Point(139) = {-0.021472, -0.734597, 0, 1.0};
Point(140) = {-0.027144, -0.734988, 0, 1.0};
Point(141) = {-0.032885, -0.735447, 0, 1.0};
Point(142) = {-0.038668, -0.735965, 0, 1.0};
Point(143) = {-0.044460, -0.736530, 0, 1.0};
Point(144) = {-0.050221, -0.737133, 0, 1.0};
Point(145) = {-0.055912, -0.737771, 0, 1.0};
Point(146) = {-0.061489, -0.738444, 0, 1.0};
Point(147) = {-0.066940, -0.739172, 0, 1.0};
Point(148) = {-0.072266, -0.739935, 0, 1.0};
Point(149) = {-0.077435, -0.740685, 0, 1.0};
Point(150) = {-0.082399, -0.741400, 0, 1.0};
Point(151) = {-0.087114, -0.742063, 0, 1.0};
Point(152) = {-0.091536, -0.742664, 0, 1.0};
Point(153) = {-0.095623, -0.743195, 0, 1.0};
Point(154) = {-0.099333, -0.743653, 0, 1.0};
Point(155) = {-0.102632, -0.744038, 0, 1.0};
Point(156) = {-0.105483, -0.744354, 0, 1.0};
Point(157) = {-0.107862, -0.744614, 0, 1.0};
Point(158) = {-0.109761, -0.744823, 0, 1.0};
Point(159) = {-0.111166, -0.744965, 0, 1.0};
Point(160) = {-0.112038, -0.745031, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html