SetFactory("OpenCASCADE");

Point(1) = {0.074931, 0.728892, 0, 1.0};
Point(2) = {0.072341, 0.729636, 0, 1.0};
Point(3) = {0.068204, 0.730841, 0, 1.0};
Point(4) = {0.063321, 0.732262, 0, 1.0};
Point(5) = {0.057791, 0.733876, 0, 1.0};
Point(6) = {0.051717, 0.735650, 0, 1.0};
Point(7) = {0.045200, 0.737535, 0, 1.0};
Point(8) = {0.038339, 0.739478, 0, 1.0};
Point(9) = {0.031220, 0.741416, 0, 1.0};
Point(10) = {0.023933, 0.743289, 0, 1.0};
Point(11) = {0.016551, 0.745035, 0, 1.0};
Point(12) = {0.009150, 0.746595, 0, 1.0};
Point(13) = {0.001793, 0.747899, 0, 1.0};
Point(14) = {-0.005496, 0.748888, 0, 1.0};
Point(15) = {-0.012711, 0.749547, 0, 1.0};
Point(16) = {-0.019823, 0.749907, 0, 1.0};
Point(17) = {-0.026771, 0.750000, 0, 1.0};
Point(18) = {-0.033474, 0.749849, 0, 1.0};
Point(19) = {-0.039865, 0.749465, 0, 1.0};
Point(20) = {-0.045875, 0.748862, 0, 1.0};
Point(21) = {-0.051446, 0.748057, 0, 1.0};
Point(22) = {-0.056523, 0.747068, 0, 1.0};
Point(23) = {-0.061056, 0.745918, 0, 1.0};
Point(24) = {-0.065002, 0.744631, 0, 1.0};
Point(25) = {-0.068327, 0.743240, 0, 1.0};
Point(26) = {-0.070999, 0.741784, 0, 1.0};
Point(27) = {-0.072993, 0.740309, 0, 1.0};
Point(28) = {-0.074280, 0.738885, 0, 1.0};
Point(29) = {-0.074511, 0.738500, 0, 1.0};
Point(30) = {-0.074692, 0.738109, 0, 1.0};
Point(31) = {-0.074773, 0.737861, 0, 1.0};
Point(32) = {-0.074820, 0.737626, 0, 1.0};
Point(33) = {-0.074829, 0.737514, 0, 1.0};
Point(34) = {-0.074830, 0.737408, 0, 1.0};
Point(35) = {-0.074816, 0.737308, 0, 1.0};
Point(36) = {-0.074786, 0.737209, 0, 1.0};
Point(37) = {-0.074741, 0.737108, 0, 1.0};
Point(38) = {-0.074683, 0.737004, 0, 1.0};
Point(39) = {-0.074533, 0.736793, 0, 1.0};
Point(40) = {-0.074344, 0.736575, 0, 1.0};
Point(41) = {-0.073989, 0.736234, 0, 1.0};
Point(42) = {-0.072825, 0.735383, 0, 1.0};
Point(43) = {-0.070484, 0.734137, 0, 1.0};
Point(44) = {-0.067344, 0.732861, 0, 1.0};
Point(45) = {-0.063447, 0.731574, 0, 1.0};
Point(46) = {-0.058839, 0.730294, 0, 1.0};
Point(47) = {-0.053573, 0.729030, 0, 1.0};
Point(48) = {-0.047722, 0.727790, 0, 1.0};
Point(49) = {-0.041361, 0.726593, 0, 1.0};
Point(50) = {-0.034571, 0.725457, 0, 1.0};
Point(51) = {-0.027437, 0.724409, 0, 1.0};
Point(52) = {-0.020042, 0.723467, 0, 1.0};
Point(53) = {-0.012474, 0.722656, 0, 1.0};
Point(54) = {-0.004821, 0.722001, 0, 1.0};
Point(55) = {0.002827, 0.721530, 0, 1.0};
Point(56) = {0.010384, 0.721276, 0, 1.0};
Point(57) = {0.017757, 0.721311, 0, 1.0};
Point(58) = {0.024956, 0.721740, 0, 1.0};
Point(59) = {0.032072, 0.722561, 0, 1.0};
Point(60) = {0.039185, 0.723649, 0, 1.0};
Point(61) = {0.046261, 0.724782, 0, 1.0};
Point(62) = {0.053124, 0.725782, 0, 1.0};
Point(63) = {0.059585, 0.726565, 0, 1.0};
Point(64) = {0.065446, 0.727086, 0, 1.0};
Point(65) = {0.070524, 0.727349, 0, 1.0};
Point(66) = {0.074658, 0.727396, 0, 1.0};
Point(67) = {0.074829, 0.727394, 0, 1.0};
Point(68) = {-0.074931, -0.728892, 0, 1.0};
Point(69) = {-0.072341, -0.729636, 0, 1.0};
Point(70) = {-0.068204, -0.730841, 0, 1.0};
Point(71) = {-0.063321, -0.732262, 0, 1.0};
Point(72) = {-0.057791, -0.733876, 0, 1.0};
Point(73) = {-0.051717, -0.735650, 0, 1.0};
Point(74) = {-0.045200, -0.737535, 0, 1.0};
Point(75) = {-0.038339, -0.739478, 0, 1.0};
Point(76) = {-0.031220, -0.741416, 0, 1.0};
Point(77) = {-0.023933, -0.743289, 0, 1.0};
Point(78) = {-0.016551, -0.745035, 0, 1.0};
Point(79) = {-0.009150, -0.746595, 0, 1.0};
Point(80) = {-0.001793, -0.747899, 0, 1.0};
Point(81) = {0.005496, -0.748888, 0, 1.0};
Point(82) = {0.012711, -0.749547, 0, 1.0};
Point(83) = {0.019823, -0.749907, 0, 1.0};
Point(84) = {0.026771, -0.750000, 0, 1.0};
Point(85) = {0.033474, -0.749849, 0, 1.0};
Point(86) = {0.039865, -0.749465, 0, 1.0};
Point(87) = {0.045875, -0.748862, 0, 1.0};
Point(88) = {0.051446, -0.748057, 0, 1.0};
Point(89) = {0.056523, -0.747068, 0, 1.0};
Point(90) = {0.061056, -0.745918, 0, 1.0};
Point(91) = {0.065002, -0.744631, 0, 1.0};
Point(92) = {0.068327, -0.743240, 0, 1.0};
Point(93) = {0.070999, -0.741784, 0, 1.0};
Point(94) = {0.072993, -0.740309, 0, 1.0};
Point(95) = {0.074280, -0.738885, 0, 1.0};
Point(96) = {0.074511, -0.738500, 0, 1.0};
Point(97) = {0.074692, -0.738109, 0, 1.0};
Point(98) = {0.074773, -0.737861, 0, 1.0};
Point(99) = {0.074820, -0.737626, 0, 1.0};
Point(100) = {0.074829, -0.737514, 0, 1.0};
Point(101) = {0.074830, -0.737408, 0, 1.0};
Point(102) = {0.074816, -0.737308, 0, 1.0};
Point(103) = {0.074786, -0.737209, 0, 1.0};
Point(104) = {0.074741, -0.737108, 0, 1.0};
Point(105) = {0.074683, -0.737004, 0, 1.0};
Point(106) = {0.074533, -0.736793, 0, 1.0};
Point(107) = {0.074344, -0.736575, 0, 1.0};
Point(108) = {0.073989, -0.736234, 0, 1.0};
Point(109) = {0.072825, -0.735383, 0, 1.0};
Point(110) = {0.070484, -0.734137, 0, 1.0};
Point(111) = {0.067344, -0.732861, 0, 1.0};
Point(112) = {0.063447, -0.731574, 0, 1.0};
Point(113) = {0.058839, -0.730294, 0, 1.0};
Point(114) = {0.053573, -0.729030, 0, 1.0};
Point(115) = {0.047722, -0.727790, 0, 1.0};
Point(116) = {0.041361, -0.726593, 0, 1.0};
Point(117) = {0.034571, -0.725457, 0, 1.0};
Point(118) = {0.027437, -0.724409, 0, 1.0};
Point(119) = {0.020042, -0.723467, 0, 1.0};
Point(120) = {0.012474, -0.722656, 0, 1.0};
Point(121) = {0.004821, -0.722001, 0, 1.0};
Point(122) = {-0.002827, -0.721530, 0, 1.0};
Point(123) = {-0.010384, -0.721276, 0, 1.0};
Point(124) = {-0.017757, -0.721311, 0, 1.0};
Point(125) = {-0.024956, -0.721740, 0, 1.0};
Point(126) = {-0.032072, -0.722561, 0, 1.0};
Point(127) = {-0.039185, -0.723649, 0, 1.0};
Point(128) = {-0.046261, -0.724782, 0, 1.0};
Point(129) = {-0.053124, -0.725782, 0, 1.0};
Point(130) = {-0.059585, -0.726565, 0, 1.0};
Point(131) = {-0.065446, -0.727086, 0, 1.0};
Point(132) = {-0.070524, -0.727349, 0, 1.0};
Point(133) = {-0.074658, -0.727396, 0, 1.0};
Point(134) = {-0.074829, -0.727394, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:85};
Spline(6) = {85:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {36.00000000, 15.00000000, 0, 1.0};
Point(138) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html