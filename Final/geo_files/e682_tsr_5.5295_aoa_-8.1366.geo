SetFactory("OpenCASCADE");

Point(1) = {0.073993, 0.746210, 0, 1.0};
Point(2) = {0.073611, 0.746221, 0, 1.0};
Point(3) = {0.072501, 0.746288, 0, 1.0};
Point(4) = {0.070750, 0.746450, 0, 1.0};
Point(5) = {0.068441, 0.746694, 0, 1.0};
Point(6) = {0.065624, 0.746986, 0, 1.0};
Point(7) = {0.062327, 0.747321, 0, 1.0};
Point(8) = {0.058603, 0.747718, 0, 1.0};
Point(9) = {0.054538, 0.748183, 0, 1.0};
Point(10) = {0.050227, 0.748699, 0, 1.0};
Point(11) = {0.045771, 0.749236, 0, 1.0};
Point(12) = {0.041282, 0.749710, 0, 1.0};
Point(13) = {0.036789, 0.749984, 0, 1.0};
Point(14) = {0.032214, 0.750000, 0, 1.0};
Point(15) = {0.027538, 0.749817, 0, 1.0};
Point(16) = {0.022815, 0.749472, 0, 1.0};
Point(17) = {0.018098, 0.748976, 0, 1.0};
Point(18) = {0.013435, 0.748336, 0, 1.0};
Point(19) = {0.008872, 0.747562, 0, 1.0};
Point(20) = {0.004454, 0.746660, 0, 1.0};
Point(21) = {0.000219, 0.745647, 0, 1.0};
Point(22) = {-0.003788, 0.744534, 0, 1.0};
Point(23) = {-0.007532, 0.743339, 0, 1.0};
Point(24) = {-0.010978, 0.742073, 0, 1.0};
Point(25) = {-0.014095, 0.740759, 0, 1.0};
Point(26) = {-0.016857, 0.739416, 0, 1.0};
Point(27) = {-0.019238, 0.738065, 0, 1.0};
Point(28) = {-0.021226, 0.736729, 0, 1.0};
Point(29) = {-0.022808, 0.735439, 0, 1.0};
Point(30) = {-0.023969, 0.734230, 0, 1.0};
Point(31) = {-0.024704, 0.733140, 0, 1.0};
Point(32) = {-0.025007, 0.732228, 0, 1.0};
Point(33) = {-0.024765, 0.731584, 0, 1.0};
Point(34) = {-0.023897, 0.731132, 0, 1.0};
Point(35) = {-0.022460, 0.730776, 0, 1.0};
Point(36) = {-0.020493, 0.730536, 0, 1.0};
Point(37) = {-0.018024, 0.730417, 0, 1.0};
Point(38) = {-0.015073, 0.730416, 0, 1.0};
Point(39) = {-0.011675, 0.730526, 0, 1.0};
Point(40) = {-0.007873, 0.730739, 0, 1.0};
Point(41) = {-0.003714, 0.731051, 0, 1.0};
Point(42) = {0.000753, 0.731457, 0, 1.0};
Point(43) = {0.005474, 0.731949, 0, 1.0};
Point(44) = {0.010395, 0.732522, 0, 1.0};
Point(45) = {0.015457, 0.733171, 0, 1.0};
Point(46) = {0.020601, 0.733888, 0, 1.0};
Point(47) = {0.025767, 0.734666, 0, 1.0};
Point(48) = {0.030892, 0.735500, 0, 1.0};
Point(49) = {0.035916, 0.736380, 0, 1.0};
Point(50) = {0.040772, 0.737306, 0, 1.0};
Point(51) = {0.045394, 0.738282, 0, 1.0};
Point(52) = {0.049714, 0.739349, 0, 1.0};
Point(53) = {0.053752, 0.740590, 0, 1.0};
Point(54) = {0.057640, 0.741958, 0, 1.0};
Point(55) = {0.061386, 0.743264, 0, 1.0};
Point(56) = {0.064877, 0.744370, 0, 1.0};
Point(57) = {0.067975, 0.745211, 0, 1.0};
Point(58) = {0.070542, 0.745762, 0, 1.0};
Point(59) = {0.072446, 0.746058, 0, 1.0};
Point(60) = {0.073606, 0.746181, 0, 1.0};
Point(61) = {-0.073993, -0.746210, 0, 1.0};
Point(62) = {-0.073611, -0.746221, 0, 1.0};
Point(63) = {-0.072501, -0.746288, 0, 1.0};
Point(64) = {-0.070750, -0.746450, 0, 1.0};
Point(65) = {-0.068441, -0.746694, 0, 1.0};
Point(66) = {-0.065624, -0.746986, 0, 1.0};
Point(67) = {-0.062327, -0.747321, 0, 1.0};
Point(68) = {-0.058603, -0.747718, 0, 1.0};
Point(69) = {-0.054538, -0.748183, 0, 1.0};
Point(70) = {-0.050227, -0.748699, 0, 1.0};
Point(71) = {-0.045771, -0.749236, 0, 1.0};
Point(72) = {-0.041282, -0.749710, 0, 1.0};
Point(73) = {-0.036789, -0.749984, 0, 1.0};
Point(74) = {-0.032214, -0.750000, 0, 1.0};
Point(75) = {-0.027538, -0.749817, 0, 1.0};
Point(76) = {-0.022815, -0.749472, 0, 1.0};
Point(77) = {-0.018098, -0.748976, 0, 1.0};
Point(78) = {-0.013435, -0.748336, 0, 1.0};
Point(79) = {-0.008872, -0.747562, 0, 1.0};
Point(80) = {-0.004454, -0.746660, 0, 1.0};
Point(81) = {-0.000219, -0.745647, 0, 1.0};
Point(82) = {0.003788, -0.744534, 0, 1.0};
Point(83) = {0.007532, -0.743339, 0, 1.0};
Point(84) = {0.010978, -0.742073, 0, 1.0};
Point(85) = {0.014095, -0.740759, 0, 1.0};
Point(86) = {0.016857, -0.739416, 0, 1.0};
Point(87) = {0.019238, -0.738065, 0, 1.0};
Point(88) = {0.021226, -0.736729, 0, 1.0};
Point(89) = {0.022808, -0.735439, 0, 1.0};
Point(90) = {0.023969, -0.734230, 0, 1.0};
Point(91) = {0.024704, -0.733140, 0, 1.0};
Point(92) = {0.025007, -0.732228, 0, 1.0};
Point(93) = {0.024765, -0.731584, 0, 1.0};
Point(94) = {0.023897, -0.731132, 0, 1.0};
Point(95) = {0.022460, -0.730776, 0, 1.0};
Point(96) = {0.020493, -0.730536, 0, 1.0};
Point(97) = {0.018024, -0.730417, 0, 1.0};
Point(98) = {0.015073, -0.730416, 0, 1.0};
Point(99) = {0.011675, -0.730526, 0, 1.0};
Point(100) = {0.007873, -0.730739, 0, 1.0};
Point(101) = {0.003714, -0.731051, 0, 1.0};
Point(102) = {-0.000753, -0.731457, 0, 1.0};
Point(103) = {-0.005474, -0.731949, 0, 1.0};
Point(104) = {-0.010395, -0.732522, 0, 1.0};
Point(105) = {-0.015457, -0.733171, 0, 1.0};
Point(106) = {-0.020601, -0.733888, 0, 1.0};
Point(107) = {-0.025767, -0.734666, 0, 1.0};
Point(108) = {-0.030892, -0.735500, 0, 1.0};
Point(109) = {-0.035916, -0.736380, 0, 1.0};
Point(110) = {-0.040772, -0.737306, 0, 1.0};
Point(111) = {-0.045394, -0.738282, 0, 1.0};
Point(112) = {-0.049714, -0.739349, 0, 1.0};
Point(113) = {-0.053752, -0.740590, 0, 1.0};
Point(114) = {-0.057640, -0.741958, 0, 1.0};
Point(115) = {-0.061386, -0.743264, 0, 1.0};
Point(116) = {-0.064877, -0.744370, 0, 1.0};
Point(117) = {-0.067975, -0.745211, 0, 1.0};
Point(118) = {-0.070542, -0.745762, 0, 1.0};
Point(119) = {-0.072446, -0.746058, 0, 1.0};
Point(120) = {-0.073606, -0.746181, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html