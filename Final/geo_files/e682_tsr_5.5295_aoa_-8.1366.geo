SetFactory("OpenCASCADE");

Point(1) = {0.147987, 0.742420, 0, 1.0};
Point(2) = {0.147222, 0.742442, 0, 1.0};
Point(3) = {0.145003, 0.742575, 0, 1.0};
Point(4) = {0.141499, 0.742901, 0, 1.0};
Point(5) = {0.136882, 0.743388, 0, 1.0};
Point(6) = {0.131248, 0.743973, 0, 1.0};
Point(7) = {0.124653, 0.744642, 0, 1.0};
Point(8) = {0.117206, 0.745436, 0, 1.0};
Point(9) = {0.109076, 0.746367, 0, 1.0};
Point(10) = {0.100454, 0.747399, 0, 1.0};
Point(11) = {0.091542, 0.748472, 0, 1.0};
Point(12) = {0.082563, 0.749421, 0, 1.0};
Point(13) = {0.073577, 0.749969, 0, 1.0};
Point(14) = {0.064429, 0.750000, 0, 1.0};
Point(15) = {0.055076, 0.749635, 0, 1.0};
Point(16) = {0.045631, 0.748945, 0, 1.0};
Point(17) = {0.036196, 0.747952, 0, 1.0};
Point(18) = {0.026870, 0.746673, 0, 1.0};
Point(19) = {0.017745, 0.745124, 0, 1.0};
Point(20) = {0.008907, 0.743321, 0, 1.0};
Point(21) = {0.000439, 0.741294, 0, 1.0};
Point(22) = {-0.007577, 0.739069, 0, 1.0};
Point(23) = {-0.015064, 0.736677, 0, 1.0};
Point(24) = {-0.021955, 0.734146, 0, 1.0};
Point(25) = {-0.028190, 0.731517, 0, 1.0};
Point(26) = {-0.033713, 0.728833, 0, 1.0};
Point(27) = {-0.038477, 0.726129, 0, 1.0};
Point(28) = {-0.042453, 0.723458, 0, 1.0};
Point(29) = {-0.045615, 0.720878, 0, 1.0};
Point(30) = {-0.047939, 0.718461, 0, 1.0};
Point(31) = {-0.049409, 0.716281, 0, 1.0};
Point(32) = {-0.050015, 0.714457, 0, 1.0};
Point(33) = {-0.049530, 0.713168, 0, 1.0};
Point(34) = {-0.047794, 0.712265, 0, 1.0};
Point(35) = {-0.044920, 0.711552, 0, 1.0};
Point(36) = {-0.040987, 0.711072, 0, 1.0};
Point(37) = {-0.036047, 0.710833, 0, 1.0};
Point(38) = {-0.030146, 0.710832, 0, 1.0};
Point(39) = {-0.023350, 0.711052, 0, 1.0};
Point(40) = {-0.015746, 0.711479, 0, 1.0};
Point(41) = {-0.007429, 0.712102, 0, 1.0};
Point(42) = {0.001506, 0.712913, 0, 1.0};
Point(43) = {0.010948, 0.713897, 0, 1.0};
Point(44) = {0.020791, 0.715044, 0, 1.0};
Point(45) = {0.030913, 0.716342, 0, 1.0};
Point(46) = {0.041202, 0.717776, 0, 1.0};
Point(47) = {0.051533, 0.719332, 0, 1.0};
Point(48) = {0.061785, 0.721000, 0, 1.0};
Point(49) = {0.071833, 0.722760, 0, 1.0};
Point(50) = {0.081544, 0.724613, 0, 1.0};
Point(51) = {0.090789, 0.726565, 0, 1.0};
Point(52) = {0.099428, 0.728697, 0, 1.0};
Point(53) = {0.107504, 0.731179, 0, 1.0};
Point(54) = {0.115279, 0.733915, 0, 1.0};
Point(55) = {0.122773, 0.736528, 0, 1.0};
Point(56) = {0.129754, 0.738740, 0, 1.0};
Point(57) = {0.135950, 0.740422, 0, 1.0};
Point(58) = {0.141084, 0.741524, 0, 1.0};
Point(59) = {0.144892, 0.742117, 0, 1.0};
Point(60) = {0.147211, 0.742362, 0, 1.0};
Point(61) = {-0.147987, -0.742420, 0, 1.0};
Point(62) = {-0.147222, -0.742442, 0, 1.0};
Point(63) = {-0.145003, -0.742575, 0, 1.0};
Point(64) = {-0.141499, -0.742901, 0, 1.0};
Point(65) = {-0.136882, -0.743388, 0, 1.0};
Point(66) = {-0.131248, -0.743973, 0, 1.0};
Point(67) = {-0.124653, -0.744642, 0, 1.0};
Point(68) = {-0.117206, -0.745436, 0, 1.0};
Point(69) = {-0.109076, -0.746367, 0, 1.0};
Point(70) = {-0.100454, -0.747399, 0, 1.0};
Point(71) = {-0.091542, -0.748472, 0, 1.0};
Point(72) = {-0.082563, -0.749421, 0, 1.0};
Point(73) = {-0.073577, -0.749969, 0, 1.0};
Point(74) = {-0.064429, -0.750000, 0, 1.0};
Point(75) = {-0.055076, -0.749635, 0, 1.0};
Point(76) = {-0.045631, -0.748945, 0, 1.0};
Point(77) = {-0.036196, -0.747952, 0, 1.0};
Point(78) = {-0.026870, -0.746673, 0, 1.0};
Point(79) = {-0.017745, -0.745124, 0, 1.0};
Point(80) = {-0.008907, -0.743321, 0, 1.0};
Point(81) = {-0.000439, -0.741294, 0, 1.0};
Point(82) = {0.007577, -0.739069, 0, 1.0};
Point(83) = {0.015064, -0.736677, 0, 1.0};
Point(84) = {0.021955, -0.734146, 0, 1.0};
Point(85) = {0.028190, -0.731517, 0, 1.0};
Point(86) = {0.033713, -0.728833, 0, 1.0};
Point(87) = {0.038477, -0.726129, 0, 1.0};
Point(88) = {0.042453, -0.723458, 0, 1.0};
Point(89) = {0.045615, -0.720878, 0, 1.0};
Point(90) = {0.047939, -0.718461, 0, 1.0};
Point(91) = {0.049409, -0.716281, 0, 1.0};
Point(92) = {0.050015, -0.714457, 0, 1.0};
Point(93) = {0.049530, -0.713168, 0, 1.0};
Point(94) = {0.047794, -0.712265, 0, 1.0};
Point(95) = {0.044920, -0.711552, 0, 1.0};
Point(96) = {0.040987, -0.711072, 0, 1.0};
Point(97) = {0.036047, -0.710833, 0, 1.0};
Point(98) = {0.030146, -0.710832, 0, 1.0};
Point(99) = {0.023350, -0.711052, 0, 1.0};
Point(100) = {0.015746, -0.711479, 0, 1.0};
Point(101) = {0.007429, -0.712102, 0, 1.0};
Point(102) = {-0.001506, -0.712913, 0, 1.0};
Point(103) = {-0.010948, -0.713897, 0, 1.0};
Point(104) = {-0.020791, -0.715044, 0, 1.0};
Point(105) = {-0.030913, -0.716342, 0, 1.0};
Point(106) = {-0.041202, -0.717776, 0, 1.0};
Point(107) = {-0.051533, -0.719332, 0, 1.0};
Point(108) = {-0.061785, -0.721000, 0, 1.0};
Point(109) = {-0.071833, -0.722760, 0, 1.0};
Point(110) = {-0.081544, -0.724613, 0, 1.0};
Point(111) = {-0.090789, -0.726565, 0, 1.0};
Point(112) = {-0.099428, -0.728697, 0, 1.0};
Point(113) = {-0.107504, -0.731179, 0, 1.0};
Point(114) = {-0.115279, -0.733915, 0, 1.0};
Point(115) = {-0.122773, -0.736528, 0, 1.0};
Point(116) = {-0.129754, -0.738740, 0, 1.0};
Point(117) = {-0.135950, -0.740422, 0, 1.0};
Point(118) = {-0.141084, -0.741524, 0, 1.0};
Point(119) = {-0.144892, -0.742117, 0, 1.0};
Point(120) = {-0.147211, -0.742362, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html