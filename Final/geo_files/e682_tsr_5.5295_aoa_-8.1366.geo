SetFactory("OpenCASCADE");

Point(1) = {0.111353, 0.744316, 0, 1.0};
Point(2) = {0.110780, 0.744332, 0, 1.0};
Point(3) = {0.109116, 0.744432, 0, 1.0};
Point(4) = {0.106489, 0.744676, 0, 1.0};
Point(5) = {0.103026, 0.745042, 0, 1.0};
Point(6) = {0.098802, 0.745480, 0, 1.0};
Point(7) = {0.093856, 0.745982, 0, 1.0};
Point(8) = {0.088272, 0.746577, 0, 1.0};
Point(9) = {0.082176, 0.747275, 0, 1.0};
Point(10) = {0.075710, 0.748049, 0, 1.0};
Point(11) = {0.069027, 0.748854, 0, 1.0};
Point(12) = {0.062294, 0.749566, 0, 1.0};
Point(13) = {0.055556, 0.749976, 0, 1.0};
Point(14) = {0.048696, 0.750000, 0, 1.0};
Point(15) = {0.041682, 0.749726, 0, 1.0};
Point(16) = {0.034599, 0.749209, 0, 1.0};
Point(17) = {0.027525, 0.748464, 0, 1.0};
Point(18) = {0.020531, 0.747505, 0, 1.0};
Point(19) = {0.013689, 0.746343, 0, 1.0};
Point(20) = {0.007061, 0.744991, 0, 1.0};
Point(21) = {0.000711, 0.743471, 0, 1.0};
Point(22) = {-0.005300, 0.741803, 0, 1.0};
Point(23) = {-0.010914, 0.740009, 0, 1.0};
Point(24) = {-0.016081, 0.738112, 0, 1.0};
Point(25) = {-0.020757, 0.736140, 0, 1.0};
Point(26) = {-0.024899, 0.734127, 0, 1.0};
Point(27) = {-0.028470, 0.732100, 0, 1.0};
Point(28) = {-0.031452, 0.730097, 0, 1.0};
Point(29) = {-0.033823, 0.728162, 0, 1.0};
Point(30) = {-0.035566, 0.726350, 0, 1.0};
Point(31) = {-0.036668, 0.724715, 0, 1.0};
Point(32) = {-0.037123, 0.723347, 0, 1.0};
Point(33) = {-0.036759, 0.722381, 0, 1.0};
Point(34) = {-0.035457, 0.721703, 0, 1.0};
Point(35) = {-0.033302, 0.721169, 0, 1.0};
Point(36) = {-0.030353, 0.720809, 0, 1.0};
Point(37) = {-0.026649, 0.720630, 0, 1.0};
Point(38) = {-0.022223, 0.720629, 0, 1.0};
Point(39) = {-0.017128, 0.720794, 0, 1.0};
Point(40) = {-0.011426, 0.721114, 0, 1.0};
Point(41) = {-0.005188, 0.721582, 0, 1.0};
Point(42) = {0.001512, 0.722190, 0, 1.0};
Point(43) = {0.008592, 0.722928, 0, 1.0};
Point(44) = {0.015973, 0.723787, 0, 1.0};
Point(45) = {0.023563, 0.724760, 0, 1.0};
Point(46) = {0.031278, 0.725836, 0, 1.0};
Point(47) = {0.039026, 0.727003, 0, 1.0};
Point(48) = {0.046713, 0.728254, 0, 1.0};
Point(49) = {0.054248, 0.729573, 0, 1.0};
Point(50) = {0.061530, 0.730963, 0, 1.0};
Point(51) = {0.068462, 0.732427, 0, 1.0};
Point(52) = {0.074941, 0.734026, 0, 1.0};
Point(53) = {0.080997, 0.735887, 0, 1.0};
Point(54) = {0.086827, 0.737938, 0, 1.0};
Point(55) = {0.092446, 0.739898, 0, 1.0};
Point(56) = {0.097681, 0.741557, 0, 1.0};
Point(57) = {0.102328, 0.742818, 0, 1.0};
Point(58) = {0.106177, 0.743644, 0, 1.0};
Point(59) = {0.109033, 0.744089, 0, 1.0};
Point(60) = {0.110772, 0.744272, 0, 1.0};
Point(61) = {-0.111353, -0.744316, 0, 1.0};
Point(62) = {-0.110780, -0.744332, 0, 1.0};
Point(63) = {-0.109116, -0.744432, 0, 1.0};
Point(64) = {-0.106489, -0.744676, 0, 1.0};
Point(65) = {-0.103026, -0.745042, 0, 1.0};
Point(66) = {-0.098802, -0.745480, 0, 1.0};
Point(67) = {-0.093856, -0.745982, 0, 1.0};
Point(68) = {-0.088272, -0.746577, 0, 1.0};
Point(69) = {-0.082176, -0.747275, 0, 1.0};
Point(70) = {-0.075710, -0.748049, 0, 1.0};
Point(71) = {-0.069027, -0.748854, 0, 1.0};
Point(72) = {-0.062294, -0.749566, 0, 1.0};
Point(73) = {-0.055556, -0.749976, 0, 1.0};
Point(74) = {-0.048696, -0.750000, 0, 1.0};
Point(75) = {-0.041682, -0.749726, 0, 1.0};
Point(76) = {-0.034599, -0.749209, 0, 1.0};
Point(77) = {-0.027525, -0.748464, 0, 1.0};
Point(78) = {-0.020531, -0.747505, 0, 1.0};
Point(79) = {-0.013689, -0.746343, 0, 1.0};
Point(80) = {-0.007061, -0.744991, 0, 1.0};
Point(81) = {-0.000711, -0.743471, 0, 1.0};
Point(82) = {0.005300, -0.741803, 0, 1.0};
Point(83) = {0.010914, -0.740009, 0, 1.0};
Point(84) = {0.016081, -0.738112, 0, 1.0};
Point(85) = {0.020757, -0.736140, 0, 1.0};
Point(86) = {0.024899, -0.734127, 0, 1.0};
Point(87) = {0.028470, -0.732100, 0, 1.0};
Point(88) = {0.031452, -0.730097, 0, 1.0};
Point(89) = {0.033823, -0.728162, 0, 1.0};
Point(90) = {0.035566, -0.726350, 0, 1.0};
Point(91) = {0.036668, -0.724715, 0, 1.0};
Point(92) = {0.037123, -0.723347, 0, 1.0};
Point(93) = {0.036759, -0.722381, 0, 1.0};
Point(94) = {0.035457, -0.721703, 0, 1.0};
Point(95) = {0.033302, -0.721169, 0, 1.0};
Point(96) = {0.030353, -0.720809, 0, 1.0};
Point(97) = {0.026649, -0.720630, 0, 1.0};
Point(98) = {0.022223, -0.720629, 0, 1.0};
Point(99) = {0.017128, -0.720794, 0, 1.0};
Point(100) = {0.011426, -0.721114, 0, 1.0};
Point(101) = {0.005188, -0.721582, 0, 1.0};
Point(102) = {-0.001512, -0.722190, 0, 1.0};
Point(103) = {-0.008592, -0.722928, 0, 1.0};
Point(104) = {-0.015973, -0.723787, 0, 1.0};
Point(105) = {-0.023563, -0.724760, 0, 1.0};
Point(106) = {-0.031278, -0.725836, 0, 1.0};
Point(107) = {-0.039026, -0.727003, 0, 1.0};
Point(108) = {-0.046713, -0.728254, 0, 1.0};
Point(109) = {-0.054248, -0.729573, 0, 1.0};
Point(110) = {-0.061530, -0.730963, 0, 1.0};
Point(111) = {-0.068462, -0.732427, 0, 1.0};
Point(112) = {-0.074941, -0.734026, 0, 1.0};
Point(113) = {-0.080997, -0.735887, 0, 1.0};
Point(114) = {-0.086827, -0.737938, 0, 1.0};
Point(115) = {-0.092446, -0.739898, 0, 1.0};
Point(116) = {-0.097681, -0.741557, 0, 1.0};
Point(117) = {-0.102328, -0.742818, 0, 1.0};
Point(118) = {-0.106177, -0.743644, 0, 1.0};
Point(119) = {-0.109033, -0.744089, 0, 1.0};
Point(120) = {-0.110772, -0.744272, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html