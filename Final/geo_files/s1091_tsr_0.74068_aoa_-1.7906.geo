SetFactory("OpenCASCADE");

Point(1) = {0.074951, 0.744071, 0, 1.0};
Point(2) = {0.074771, 0.744113, 0, 1.0};
Point(3) = {0.074256, 0.744246, 0, 1.0};
Point(4) = {0.073446, 0.744463, 0, 1.0};
Point(5) = {0.072364, 0.744741, 0, 1.0};
Point(6) = {0.071025, 0.745063, 0, 1.0};
Point(7) = {0.069443, 0.745409, 0, 1.0};
Point(8) = {0.067619, 0.745758, 0, 1.0};
Point(9) = {0.065547, 0.746101, 0, 1.0};
Point(10) = {0.063229, 0.746444, 0, 1.0};
Point(11) = {0.060683, 0.746790, 0, 1.0};
Point(12) = {0.057926, 0.747140, 0, 1.0};
Point(13) = {0.054978, 0.747489, 0, 1.0};
Point(14) = {0.051857, 0.747837, 0, 1.0};
Point(15) = {0.048587, 0.748179, 0, 1.0};
Point(16) = {0.045190, 0.748511, 0, 1.0};
Point(17) = {0.041690, 0.748828, 0, 1.0};
Point(18) = {0.038111, 0.749125, 0, 1.0};
Point(19) = {0.034478, 0.749397, 0, 1.0};
Point(20) = {0.030816, 0.749632, 0, 1.0};
Point(21) = {0.027150, 0.749824, 0, 1.0};
Point(22) = {0.023494, 0.749948, 0, 1.0};
Point(23) = {0.019852, 0.750000, 0, 1.0};
Point(24) = {0.016237, 0.749996, 0, 1.0};
Point(25) = {0.012671, 0.749936, 0, 1.0};
Point(26) = {0.009174, 0.749822, 0, 1.0};
Point(27) = {0.005769, 0.749657, 0, 1.0};
Point(28) = {0.002474, 0.749440, 0, 1.0};
Point(29) = {-0.000690, 0.749170, 0, 1.0};
Point(30) = {-0.003709, 0.748846, 0, 1.0};
Point(31) = {-0.006569, 0.748469, 0, 1.0};
Point(32) = {-0.009259, 0.748042, 0, 1.0};
Point(33) = {-0.011767, 0.747573, 0, 1.0};
Point(34) = {-0.014080, 0.747065, 0, 1.0};
Point(35) = {-0.016185, 0.746526, 0, 1.0};
Point(36) = {-0.018074, 0.745960, 0, 1.0};
Point(37) = {-0.019737, 0.745373, 0, 1.0};
Point(38) = {-0.021163, 0.744769, 0, 1.0};
Point(39) = {-0.022345, 0.744154, 0, 1.0};
Point(40) = {-0.023282, 0.743511, 0, 1.0};
Point(41) = {-0.024001, 0.742843, 0, 1.0};
Point(42) = {-0.024526, 0.742189, 0, 1.0};
Point(43) = {-0.024858, 0.741580, 0, 1.0};
Point(44) = {-0.024998, 0.741053, 0, 1.0};
Point(45) = {-0.024959, 0.740666, 0, 1.0};
Point(46) = {-0.024635, 0.740488, 0, 1.0};
Point(47) = {-0.023937, 0.740463, 0, 1.0};
Point(48) = {-0.022909, 0.740524, 0, 1.0};
Point(49) = {-0.021565, 0.740675, 0, 1.0};
Point(50) = {-0.019916, 0.740925, 0, 1.0};
Point(51) = {-0.017953, 0.741281, 0, 1.0};
Point(52) = {-0.015659, 0.741723, 0, 1.0};
Point(53) = {-0.013044, 0.742238, 0, 1.0};
Point(54) = {-0.010121, 0.742802, 0, 1.0};
Point(55) = {-0.006901, 0.743399, 0, 1.0};
Point(56) = {-0.003403, 0.744010, 0, 1.0};
Point(57) = {0.000350, 0.744619, 0, 1.0};
Point(58) = {0.004333, 0.745206, 0, 1.0};
Point(59) = {0.008521, 0.745755, 0, 1.0};
Point(60) = {0.012885, 0.746244, 0, 1.0};
Point(61) = {0.017390, 0.746658, 0, 1.0};
Point(62) = {0.022003, 0.746971, 0, 1.0};
Point(63) = {0.026685, 0.747158, 0, 1.0};
Point(64) = {0.031378, 0.747160, 0, 1.0};
Point(65) = {0.035993, 0.746953, 0, 1.0};
Point(66) = {0.040331, 0.746630, 0, 1.0};
Point(67) = {0.044359, 0.746300, 0, 1.0};
Point(68) = {0.048198, 0.746023, 0, 1.0};
Point(69) = {0.051844, 0.745774, 0, 1.0};
Point(70) = {0.055284, 0.745542, 0, 1.0};
Point(71) = {0.058502, 0.745327, 0, 1.0};
Point(72) = {0.061482, 0.745124, 0, 1.0};
Point(73) = {0.064205, 0.744932, 0, 1.0};
Point(74) = {0.066655, 0.744750, 0, 1.0};
Point(75) = {0.068812, 0.744577, 0, 1.0};
Point(76) = {0.070658, 0.744418, 0, 1.0};
Point(77) = {0.072178, 0.744283, 0, 1.0};
Point(78) = {0.073368, 0.744183, 0, 1.0};
Point(79) = {0.074232, 0.744120, 0, 1.0};
Point(80) = {0.074768, 0.744085, 0, 1.0};
Point(81) = {-0.074951, -0.744071, 0, 1.0};
Point(82) = {-0.074771, -0.744113, 0, 1.0};
Point(83) = {-0.074256, -0.744246, 0, 1.0};
Point(84) = {-0.073446, -0.744463, 0, 1.0};
Point(85) = {-0.072364, -0.744741, 0, 1.0};
Point(86) = {-0.071025, -0.745063, 0, 1.0};
Point(87) = {-0.069443, -0.745409, 0, 1.0};
Point(88) = {-0.067619, -0.745758, 0, 1.0};
Point(89) = {-0.065547, -0.746101, 0, 1.0};
Point(90) = {-0.063229, -0.746444, 0, 1.0};
Point(91) = {-0.060683, -0.746790, 0, 1.0};
Point(92) = {-0.057926, -0.747140, 0, 1.0};
Point(93) = {-0.054978, -0.747489, 0, 1.0};
Point(94) = {-0.051857, -0.747837, 0, 1.0};
Point(95) = {-0.048587, -0.748179, 0, 1.0};
Point(96) = {-0.045190, -0.748511, 0, 1.0};
Point(97) = {-0.041690, -0.748828, 0, 1.0};
Point(98) = {-0.038111, -0.749125, 0, 1.0};
Point(99) = {-0.034478, -0.749397, 0, 1.0};
Point(100) = {-0.030816, -0.749632, 0, 1.0};
Point(101) = {-0.027150, -0.749824, 0, 1.0};
Point(102) = {-0.023494, -0.749948, 0, 1.0};
Point(103) = {-0.019852, -0.750000, 0, 1.0};
Point(104) = {-0.016237, -0.749996, 0, 1.0};
Point(105) = {-0.012671, -0.749936, 0, 1.0};
Point(106) = {-0.009174, -0.749822, 0, 1.0};
Point(107) = {-0.005769, -0.749657, 0, 1.0};
Point(108) = {-0.002474, -0.749440, 0, 1.0};
Point(109) = {0.000690, -0.749170, 0, 1.0};
Point(110) = {0.003709, -0.748846, 0, 1.0};
Point(111) = {0.006569, -0.748469, 0, 1.0};
Point(112) = {0.009259, -0.748042, 0, 1.0};
Point(113) = {0.011767, -0.747573, 0, 1.0};
Point(114) = {0.014080, -0.747065, 0, 1.0};
Point(115) = {0.016185, -0.746526, 0, 1.0};
Point(116) = {0.018074, -0.745960, 0, 1.0};
Point(117) = {0.019737, -0.745373, 0, 1.0};
Point(118) = {0.021163, -0.744769, 0, 1.0};
Point(119) = {0.022345, -0.744154, 0, 1.0};
Point(120) = {0.023282, -0.743511, 0, 1.0};
Point(121) = {0.024001, -0.742843, 0, 1.0};
Point(122) = {0.024526, -0.742189, 0, 1.0};
Point(123) = {0.024858, -0.741580, 0, 1.0};
Point(124) = {0.024998, -0.741053, 0, 1.0};
Point(125) = {0.024959, -0.740666, 0, 1.0};
Point(126) = {0.024635, -0.740488, 0, 1.0};
Point(127) = {0.023937, -0.740463, 0, 1.0};
Point(128) = {0.022909, -0.740524, 0, 1.0};
Point(129) = {0.021565, -0.740675, 0, 1.0};
Point(130) = {0.019916, -0.740925, 0, 1.0};
Point(131) = {0.017953, -0.741281, 0, 1.0};
Point(132) = {0.015659, -0.741723, 0, 1.0};
Point(133) = {0.013044, -0.742238, 0, 1.0};
Point(134) = {0.010121, -0.742802, 0, 1.0};
Point(135) = {0.006901, -0.743399, 0, 1.0};
Point(136) = {0.003403, -0.744010, 0, 1.0};
Point(137) = {-0.000350, -0.744619, 0, 1.0};
Point(138) = {-0.004333, -0.745206, 0, 1.0};
Point(139) = {-0.008521, -0.745755, 0, 1.0};
Point(140) = {-0.012885, -0.746244, 0, 1.0};
Point(141) = {-0.017390, -0.746658, 0, 1.0};
Point(142) = {-0.022003, -0.746971, 0, 1.0};
Point(143) = {-0.026685, -0.747158, 0, 1.0};
Point(144) = {-0.031378, -0.747160, 0, 1.0};
Point(145) = {-0.035993, -0.746953, 0, 1.0};
Point(146) = {-0.040331, -0.746630, 0, 1.0};
Point(147) = {-0.044359, -0.746300, 0, 1.0};
Point(148) = {-0.048198, -0.746023, 0, 1.0};
Point(149) = {-0.051844, -0.745774, 0, 1.0};
Point(150) = {-0.055284, -0.745542, 0, 1.0};
Point(151) = {-0.058502, -0.745327, 0, 1.0};
Point(152) = {-0.061482, -0.745124, 0, 1.0};
Point(153) = {-0.064205, -0.744932, 0, 1.0};
Point(154) = {-0.066655, -0.744750, 0, 1.0};
Point(155) = {-0.068812, -0.744577, 0, 1.0};
Point(156) = {-0.070658, -0.744418, 0, 1.0};
Point(157) = {-0.072178, -0.744283, 0, 1.0};
Point(158) = {-0.073368, -0.744183, 0, 1.0};
Point(159) = {-0.074232, -0.744120, 0, 1.0};
Point(160) = {-0.074768, -0.744085, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:28};
Spline(2) = {28:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:108};
Spline(6) = {108:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html