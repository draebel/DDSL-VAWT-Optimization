SetFactory("OpenCASCADE");

Point(1) = {0.149902, 0.738142, 0, 1.0};
Point(2) = {0.149542, 0.738226, 0, 1.0};
Point(3) = {0.148513, 0.738492, 0, 1.0};
Point(4) = {0.146892, 0.738926, 0, 1.0};
Point(5) = {0.144728, 0.739483, 0, 1.0};
Point(6) = {0.142051, 0.740125, 0, 1.0};
Point(7) = {0.138885, 0.740819, 0, 1.0};
Point(8) = {0.135238, 0.741517, 0, 1.0};
Point(9) = {0.131094, 0.742202, 0, 1.0};
Point(10) = {0.126459, 0.742887, 0, 1.0};
Point(11) = {0.121366, 0.743581, 0, 1.0};
Point(12) = {0.115852, 0.744281, 0, 1.0};
Point(13) = {0.109955, 0.744979, 0, 1.0};
Point(14) = {0.103714, 0.745674, 0, 1.0};
Point(15) = {0.097174, 0.746358, 0, 1.0};
Point(16) = {0.090380, 0.747022, 0, 1.0};
Point(17) = {0.083381, 0.747656, 0, 1.0};
Point(18) = {0.076223, 0.748250, 0, 1.0};
Point(19) = {0.068956, 0.748793, 0, 1.0};
Point(20) = {0.061632, 0.749265, 0, 1.0};
Point(21) = {0.054300, 0.749648, 0, 1.0};
Point(22) = {0.046989, 0.749896, 0, 1.0};
Point(23) = {0.039704, 0.750000, 0, 1.0};
Point(24) = {0.032475, 0.749992, 0, 1.0};
Point(25) = {0.025341, 0.749871, 0, 1.0};
Point(26) = {0.018349, 0.749645, 0, 1.0};
Point(27) = {0.011538, 0.749314, 0, 1.0};
Point(28) = {0.004948, 0.748879, 0, 1.0};
Point(29) = {-0.001380, 0.748339, 0, 1.0};
Point(30) = {-0.007419, 0.747692, 0, 1.0};
Point(31) = {-0.013138, 0.746937, 0, 1.0};
Point(32) = {-0.018518, 0.746085, 0, 1.0};
Point(33) = {-0.023533, 0.745146, 0, 1.0};
Point(34) = {-0.028160, 0.744131, 0, 1.0};
Point(35) = {-0.032370, 0.743053, 0, 1.0};
Point(36) = {-0.036149, 0.741920, 0, 1.0};
Point(37) = {-0.039473, 0.740745, 0, 1.0};
Point(38) = {-0.042325, 0.739538, 0, 1.0};
Point(39) = {-0.044690, 0.738307, 0, 1.0};
Point(40) = {-0.046565, 0.737022, 0, 1.0};
Point(41) = {-0.048002, 0.735687, 0, 1.0};
Point(42) = {-0.049051, 0.734377, 0, 1.0};
Point(43) = {-0.049715, 0.733160, 0, 1.0};
Point(44) = {-0.049997, 0.732106, 0, 1.0};
Point(45) = {-0.049918, 0.731332, 0, 1.0};
Point(46) = {-0.049269, 0.730977, 0, 1.0};
Point(47) = {-0.047875, 0.730926, 0, 1.0};
Point(48) = {-0.045818, 0.731048, 0, 1.0};
Point(49) = {-0.043130, 0.731351, 0, 1.0};
Point(50) = {-0.039832, 0.731850, 0, 1.0};
Point(51) = {-0.035906, 0.732563, 0, 1.0};
Point(52) = {-0.031317, 0.733447, 0, 1.0};
Point(53) = {-0.026087, 0.734477, 0, 1.0};
Point(54) = {-0.020241, 0.735604, 0, 1.0};
Point(55) = {-0.013802, 0.736798, 0, 1.0};
Point(56) = {-0.006806, 0.738021, 0, 1.0};
Point(57) = {0.000699, 0.739238, 0, 1.0};
Point(58) = {0.008666, 0.740412, 0, 1.0};
Point(59) = {0.017042, 0.741510, 0, 1.0};
Point(60) = {0.025770, 0.742489, 0, 1.0};
Point(61) = {0.034780, 0.743317, 0, 1.0};
Point(62) = {0.044005, 0.743941, 0, 1.0};
Point(63) = {0.053370, 0.744316, 0, 1.0};
Point(64) = {0.062757, 0.744320, 0, 1.0};
Point(65) = {0.071986, 0.743906, 0, 1.0};
Point(66) = {0.080663, 0.743261, 0, 1.0};
Point(67) = {0.088717, 0.742600, 0, 1.0};
Point(68) = {0.096396, 0.742046, 0, 1.0};
Point(69) = {0.103687, 0.741547, 0, 1.0};
Point(70) = {0.110567, 0.741084, 0, 1.0};
Point(71) = {0.117004, 0.740655, 0, 1.0};
Point(72) = {0.122963, 0.740249, 0, 1.0};
Point(73) = {0.128410, 0.739865, 0, 1.0};
Point(74) = {0.133310, 0.739500, 0, 1.0};
Point(75) = {0.137625, 0.739154, 0, 1.0};
Point(76) = {0.141316, 0.738836, 0, 1.0};
Point(77) = {0.144356, 0.738566, 0, 1.0};
Point(78) = {0.146736, 0.738367, 0, 1.0};
Point(79) = {0.148465, 0.738241, 0, 1.0};
Point(80) = {0.149535, 0.738170, 0, 1.0};
Point(81) = {-0.149902, -0.738142, 0, 1.0};
Point(82) = {-0.149542, -0.738226, 0, 1.0};
Point(83) = {-0.148513, -0.738492, 0, 1.0};
Point(84) = {-0.146892, -0.738926, 0, 1.0};
Point(85) = {-0.144728, -0.739483, 0, 1.0};
Point(86) = {-0.142051, -0.740125, 0, 1.0};
Point(87) = {-0.138885, -0.740819, 0, 1.0};
Point(88) = {-0.135238, -0.741517, 0, 1.0};
Point(89) = {-0.131094, -0.742202, 0, 1.0};
Point(90) = {-0.126459, -0.742887, 0, 1.0};
Point(91) = {-0.121366, -0.743581, 0, 1.0};
Point(92) = {-0.115852, -0.744281, 0, 1.0};
Point(93) = {-0.109955, -0.744979, 0, 1.0};
Point(94) = {-0.103714, -0.745674, 0, 1.0};
Point(95) = {-0.097174, -0.746358, 0, 1.0};
Point(96) = {-0.090380, -0.747022, 0, 1.0};
Point(97) = {-0.083381, -0.747656, 0, 1.0};
Point(98) = {-0.076223, -0.748250, 0, 1.0};
Point(99) = {-0.068956, -0.748793, 0, 1.0};
Point(100) = {-0.061632, -0.749265, 0, 1.0};
Point(101) = {-0.054300, -0.749648, 0, 1.0};
Point(102) = {-0.046989, -0.749896, 0, 1.0};
Point(103) = {-0.039704, -0.750000, 0, 1.0};
Point(104) = {-0.032475, -0.749992, 0, 1.0};
Point(105) = {-0.025341, -0.749871, 0, 1.0};
Point(106) = {-0.018349, -0.749645, 0, 1.0};
Point(107) = {-0.011538, -0.749314, 0, 1.0};
Point(108) = {-0.004948, -0.748879, 0, 1.0};
Point(109) = {0.001380, -0.748339, 0, 1.0};
Point(110) = {0.007419, -0.747692, 0, 1.0};
Point(111) = {0.013138, -0.746937, 0, 1.0};
Point(112) = {0.018518, -0.746085, 0, 1.0};
Point(113) = {0.023533, -0.745146, 0, 1.0};
Point(114) = {0.028160, -0.744131, 0, 1.0};
Point(115) = {0.032370, -0.743053, 0, 1.0};
Point(116) = {0.036149, -0.741920, 0, 1.0};
Point(117) = {0.039473, -0.740745, 0, 1.0};
Point(118) = {0.042325, -0.739538, 0, 1.0};
Point(119) = {0.044690, -0.738307, 0, 1.0};
Point(120) = {0.046565, -0.737022, 0, 1.0};
Point(121) = {0.048002, -0.735687, 0, 1.0};
Point(122) = {0.049051, -0.734377, 0, 1.0};
Point(123) = {0.049715, -0.733160, 0, 1.0};
Point(124) = {0.049997, -0.732106, 0, 1.0};
Point(125) = {0.049918, -0.731332, 0, 1.0};
Point(126) = {0.049269, -0.730977, 0, 1.0};
Point(127) = {0.047875, -0.730926, 0, 1.0};
Point(128) = {0.045818, -0.731048, 0, 1.0};
Point(129) = {0.043130, -0.731351, 0, 1.0};
Point(130) = {0.039832, -0.731850, 0, 1.0};
Point(131) = {0.035906, -0.732563, 0, 1.0};
Point(132) = {0.031317, -0.733447, 0, 1.0};
Point(133) = {0.026087, -0.734477, 0, 1.0};
Point(134) = {0.020241, -0.735604, 0, 1.0};
Point(135) = {0.013802, -0.736798, 0, 1.0};
Point(136) = {0.006806, -0.738021, 0, 1.0};
Point(137) = {-0.000699, -0.739238, 0, 1.0};
Point(138) = {-0.008666, -0.740412, 0, 1.0};
Point(139) = {-0.017042, -0.741510, 0, 1.0};
Point(140) = {-0.025770, -0.742489, 0, 1.0};
Point(141) = {-0.034780, -0.743317, 0, 1.0};
Point(142) = {-0.044005, -0.743941, 0, 1.0};
Point(143) = {-0.053370, -0.744316, 0, 1.0};
Point(144) = {-0.062757, -0.744320, 0, 1.0};
Point(145) = {-0.071986, -0.743906, 0, 1.0};
Point(146) = {-0.080663, -0.743261, 0, 1.0};
Point(147) = {-0.088717, -0.742600, 0, 1.0};
Point(148) = {-0.096396, -0.742046, 0, 1.0};
Point(149) = {-0.103687, -0.741547, 0, 1.0};
Point(150) = {-0.110567, -0.741084, 0, 1.0};
Point(151) = {-0.117004, -0.740655, 0, 1.0};
Point(152) = {-0.122963, -0.740249, 0, 1.0};
Point(153) = {-0.128410, -0.739865, 0, 1.0};
Point(154) = {-0.133310, -0.739500, 0, 1.0};
Point(155) = {-0.137625, -0.739154, 0, 1.0};
Point(156) = {-0.141316, -0.738836, 0, 1.0};
Point(157) = {-0.144356, -0.738566, 0, 1.0};
Point(158) = {-0.146736, -0.738367, 0, 1.0};
Point(159) = {-0.148465, -0.738241, 0, 1.0};
Point(160) = {-0.149535, -0.738170, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:28};
Spline(2) = {28:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:108};
Spline(6) = {108:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html