SetFactory("OpenCASCADE");

Point(1) = {0.112427, 0.741106, 0, 1.0};
Point(2) = {0.112156, 0.741170, 0, 1.0};
Point(3) = {0.111385, 0.741369, 0, 1.0};
Point(4) = {0.110169, 0.741694, 0, 1.0};
Point(5) = {0.108546, 0.742112, 0, 1.0};
Point(6) = {0.106538, 0.742594, 0, 1.0};
Point(7) = {0.104164, 0.743114, 0, 1.0};
Point(8) = {0.101428, 0.743638, 0, 1.0};
Point(9) = {0.098321, 0.744151, 0, 1.0};
Point(10) = {0.094844, 0.744665, 0, 1.0};
Point(11) = {0.091025, 0.745185, 0, 1.0};
Point(12) = {0.086889, 0.745710, 0, 1.0};
Point(13) = {0.082466, 0.746234, 0, 1.0};
Point(14) = {0.077786, 0.746755, 0, 1.0};
Point(15) = {0.072880, 0.747268, 0, 1.0};
Point(16) = {0.067785, 0.747766, 0, 1.0};
Point(17) = {0.062535, 0.748242, 0, 1.0};
Point(18) = {0.057167, 0.748688, 0, 1.0};
Point(19) = {0.051717, 0.749095, 0, 1.0};
Point(20) = {0.046224, 0.749449, 0, 1.0};
Point(21) = {0.040725, 0.749736, 0, 1.0};
Point(22) = {0.035242, 0.749922, 0, 1.0};
Point(23) = {0.029778, 0.750000, 0, 1.0};
Point(24) = {0.024356, 0.749994, 0, 1.0};
Point(25) = {0.019006, 0.749903, 0, 1.0};
Point(26) = {0.013762, 0.749733, 0, 1.0};
Point(27) = {0.008653, 0.749485, 0, 1.0};
Point(28) = {0.003711, 0.749160, 0, 1.0};
Point(29) = {-0.001035, 0.748755, 0, 1.0};
Point(30) = {-0.005564, 0.748269, 0, 1.0};
Point(31) = {-0.009854, 0.747703, 0, 1.0};
Point(32) = {-0.013889, 0.747064, 0, 1.0};
Point(33) = {-0.017650, 0.746359, 0, 1.0};
Point(34) = {-0.021120, 0.745598, 0, 1.0};
Point(35) = {-0.024278, 0.744789, 0, 1.0};
Point(36) = {-0.027111, 0.743940, 0, 1.0};
Point(37) = {-0.029605, 0.743059, 0, 1.0};
Point(38) = {-0.031744, 0.742153, 0, 1.0};
Point(39) = {-0.033517, 0.741230, 0, 1.0};
Point(40) = {-0.034923, 0.740267, 0, 1.0};
Point(41) = {-0.036001, 0.739265, 0, 1.0};
Point(42) = {-0.036788, 0.738283, 0, 1.0};
Point(43) = {-0.037287, 0.737370, 0, 1.0};
Point(44) = {-0.037498, 0.736580, 0, 1.0};
Point(45) = {-0.037439, 0.735999, 0, 1.0};
Point(46) = {-0.036952, 0.735732, 0, 1.0};
Point(47) = {-0.035906, 0.735695, 0, 1.0};
Point(48) = {-0.034363, 0.735786, 0, 1.0};
Point(49) = {-0.032347, 0.736013, 0, 1.0};
Point(50) = {-0.029874, 0.736387, 0, 1.0};
Point(51) = {-0.026930, 0.736922, 0, 1.0};
Point(52) = {-0.023488, 0.737585, 0, 1.0};
Point(53) = {-0.019565, 0.738358, 0, 1.0};
Point(54) = {-0.015181, 0.739203, 0, 1.0};
Point(55) = {-0.010351, 0.740098, 0, 1.0};
Point(56) = {-0.005105, 0.741016, 0, 1.0};
Point(57) = {0.000524, 0.741928, 0, 1.0};
Point(58) = {0.006500, 0.742809, 0, 1.0};
Point(59) = {0.012782, 0.743632, 0, 1.0};
Point(60) = {0.019327, 0.744367, 0, 1.0};
Point(61) = {0.026085, 0.744988, 0, 1.0};
Point(62) = {0.033004, 0.745456, 0, 1.0};
Point(63) = {0.040028, 0.745737, 0, 1.0};
Point(64) = {0.047068, 0.745740, 0, 1.0};
Point(65) = {0.053990, 0.745429, 0, 1.0};
Point(66) = {0.060497, 0.744945, 0, 1.0};
Point(67) = {0.066538, 0.744450, 0, 1.0};
Point(68) = {0.072297, 0.744034, 0, 1.0};
Point(69) = {0.077766, 0.743660, 0, 1.0};
Point(70) = {0.082925, 0.743313, 0, 1.0};
Point(71) = {0.087753, 0.742991, 0, 1.0};
Point(72) = {0.092223, 0.742687, 0, 1.0};
Point(73) = {0.096307, 0.742399, 0, 1.0};
Point(74) = {0.099982, 0.742125, 0, 1.0};
Point(75) = {0.103219, 0.741866, 0, 1.0};
Point(76) = {0.105987, 0.741627, 0, 1.0};
Point(77) = {0.108267, 0.741425, 0, 1.0};
Point(78) = {0.110052, 0.741275, 0, 1.0};
Point(79) = {0.111348, 0.741180, 0, 1.0};
Point(80) = {0.112151, 0.741128, 0, 1.0};
Point(81) = {-0.112427, -0.741106, 0, 1.0};
Point(82) = {-0.112156, -0.741170, 0, 1.0};
Point(83) = {-0.111385, -0.741369, 0, 1.0};
Point(84) = {-0.110169, -0.741694, 0, 1.0};
Point(85) = {-0.108546, -0.742112, 0, 1.0};
Point(86) = {-0.106538, -0.742594, 0, 1.0};
Point(87) = {-0.104164, -0.743114, 0, 1.0};
Point(88) = {-0.101428, -0.743638, 0, 1.0};
Point(89) = {-0.098321, -0.744151, 0, 1.0};
Point(90) = {-0.094844, -0.744665, 0, 1.0};
Point(91) = {-0.091025, -0.745185, 0, 1.0};
Point(92) = {-0.086889, -0.745710, 0, 1.0};
Point(93) = {-0.082466, -0.746234, 0, 1.0};
Point(94) = {-0.077786, -0.746755, 0, 1.0};
Point(95) = {-0.072880, -0.747268, 0, 1.0};
Point(96) = {-0.067785, -0.747766, 0, 1.0};
Point(97) = {-0.062535, -0.748242, 0, 1.0};
Point(98) = {-0.057167, -0.748688, 0, 1.0};
Point(99) = {-0.051717, -0.749095, 0, 1.0};
Point(100) = {-0.046224, -0.749449, 0, 1.0};
Point(101) = {-0.040725, -0.749736, 0, 1.0};
Point(102) = {-0.035242, -0.749922, 0, 1.0};
Point(103) = {-0.029778, -0.750000, 0, 1.0};
Point(104) = {-0.024356, -0.749994, 0, 1.0};
Point(105) = {-0.019006, -0.749903, 0, 1.0};
Point(106) = {-0.013762, -0.749733, 0, 1.0};
Point(107) = {-0.008653, -0.749485, 0, 1.0};
Point(108) = {-0.003711, -0.749160, 0, 1.0};
Point(109) = {0.001035, -0.748755, 0, 1.0};
Point(110) = {0.005564, -0.748269, 0, 1.0};
Point(111) = {0.009854, -0.747703, 0, 1.0};
Point(112) = {0.013889, -0.747064, 0, 1.0};
Point(113) = {0.017650, -0.746359, 0, 1.0};
Point(114) = {0.021120, -0.745598, 0, 1.0};
Point(115) = {0.024278, -0.744789, 0, 1.0};
Point(116) = {0.027111, -0.743940, 0, 1.0};
Point(117) = {0.029605, -0.743059, 0, 1.0};
Point(118) = {0.031744, -0.742153, 0, 1.0};
Point(119) = {0.033517, -0.741230, 0, 1.0};
Point(120) = {0.034923, -0.740267, 0, 1.0};
Point(121) = {0.036001, -0.739265, 0, 1.0};
Point(122) = {0.036788, -0.738283, 0, 1.0};
Point(123) = {0.037287, -0.737370, 0, 1.0};
Point(124) = {0.037498, -0.736580, 0, 1.0};
Point(125) = {0.037439, -0.735999, 0, 1.0};
Point(126) = {0.036952, -0.735732, 0, 1.0};
Point(127) = {0.035906, -0.735695, 0, 1.0};
Point(128) = {0.034363, -0.735786, 0, 1.0};
Point(129) = {0.032347, -0.736013, 0, 1.0};
Point(130) = {0.029874, -0.736387, 0, 1.0};
Point(131) = {0.026930, -0.736922, 0, 1.0};
Point(132) = {0.023488, -0.737585, 0, 1.0};
Point(133) = {0.019565, -0.738358, 0, 1.0};
Point(134) = {0.015181, -0.739203, 0, 1.0};
Point(135) = {0.010351, -0.740098, 0, 1.0};
Point(136) = {0.005105, -0.741016, 0, 1.0};
Point(137) = {-0.000524, -0.741928, 0, 1.0};
Point(138) = {-0.006500, -0.742809, 0, 1.0};
Point(139) = {-0.012782, -0.743632, 0, 1.0};
Point(140) = {-0.019327, -0.744367, 0, 1.0};
Point(141) = {-0.026085, -0.744988, 0, 1.0};
Point(142) = {-0.033004, -0.745456, 0, 1.0};
Point(143) = {-0.040028, -0.745737, 0, 1.0};
Point(144) = {-0.047068, -0.745740, 0, 1.0};
Point(145) = {-0.053990, -0.745429, 0, 1.0};
Point(146) = {-0.060497, -0.744945, 0, 1.0};
Point(147) = {-0.066538, -0.744450, 0, 1.0};
Point(148) = {-0.072297, -0.744034, 0, 1.0};
Point(149) = {-0.077766, -0.743660, 0, 1.0};
Point(150) = {-0.082925, -0.743313, 0, 1.0};
Point(151) = {-0.087753, -0.742991, 0, 1.0};
Point(152) = {-0.092223, -0.742687, 0, 1.0};
Point(153) = {-0.096307, -0.742399, 0, 1.0};
Point(154) = {-0.099982, -0.742125, 0, 1.0};
Point(155) = {-0.103219, -0.741866, 0, 1.0};
Point(156) = {-0.105987, -0.741627, 0, 1.0};
Point(157) = {-0.108267, -0.741425, 0, 1.0};
Point(158) = {-0.110052, -0.741275, 0, 1.0};
Point(159) = {-0.111348, -0.741180, 0, 1.0};
Point(160) = {-0.112151, -0.741128, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:28};
Spline(2) = {28:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:108};
Spline(6) = {108:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html