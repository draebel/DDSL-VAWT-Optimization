SetFactory("OpenCASCADE");

Point(1) = {0.073771, 0.730847, 0, 1.0};
Point(2) = {0.072931, 0.731074, 0, 1.0};
Point(3) = {0.071542, 0.731456, 0, 1.0};
Point(4) = {0.069628, 0.732005, 0, 1.0};
Point(5) = {0.067227, 0.732719, 0, 1.0};
Point(6) = {0.064378, 0.733586, 0, 1.0};
Point(7) = {0.061121, 0.734591, 0, 1.0};
Point(8) = {0.057504, 0.735720, 0, 1.0};
Point(9) = {0.053571, 0.736953, 0, 1.0};
Point(10) = {0.049376, 0.738270, 0, 1.0};
Point(11) = {0.044971, 0.739648, 0, 1.0};
Point(12) = {0.040412, 0.741058, 0, 1.0};
Point(13) = {0.035755, 0.742476, 0, 1.0};
Point(14) = {0.031060, 0.743871, 0, 1.0};
Point(15) = {0.026379, 0.745206, 0, 1.0};
Point(16) = {0.021768, 0.746441, 0, 1.0};
Point(17) = {0.017262, 0.747522, 0, 1.0};
Point(18) = {0.012873, 0.748420, 0, 1.0};
Point(19) = {0.008619, 0.749118, 0, 1.0};
Point(20) = {0.004516, 0.749613, 0, 1.0};
Point(21) = {0.000580, 0.749901, 0, 1.0};
Point(22) = {-0.003173, 0.750000, 0, 1.0};
Point(23) = {-0.006720, 0.749933, 0, 1.0};
Point(24) = {-0.010023, 0.749723, 0, 1.0};
Point(25) = {-0.013050, 0.749381, 0, 1.0};
Point(26) = {-0.015774, 0.748929, 0, 1.0};
Point(27) = {-0.018169, 0.748380, 0, 1.0};
Point(28) = {-0.020221, 0.747754, 0, 1.0};
Point(29) = {-0.021911, 0.747074, 0, 1.0};
Point(30) = {-0.023236, 0.746368, 0, 1.0};
Point(31) = {-0.024188, 0.745669, 0, 1.0};
Point(32) = {-0.024775, 0.745016, 0, 1.0};
Point(33) = {-0.025003, 0.744483, 0, 1.0};
Point(34) = {-0.024834, 0.744195, 0, 1.0};
Point(35) = {-0.024184, 0.744190, 0, 1.0};
Point(36) = {-0.022964, 0.744496, 0, 1.0};
Point(37) = {-0.021067, 0.745127, 0, 1.0};
Point(38) = {-0.018381, 0.746050, 0, 1.0};
Point(39) = {-0.014794, 0.747162, 0, 1.0};
Point(40) = {-0.010210, 0.748310, 0, 1.0};
Point(41) = {-0.004564, 0.749175, 0, 1.0};
Point(42) = {0.001877, 0.749303, 0, 1.0};
Point(43) = {0.008500, 0.748640, 0, 1.0};
Point(44) = {0.014995, 0.747499, 0, 1.0};
Point(45) = {0.021311, 0.746100, 0, 1.0};
Point(46) = {0.027411, 0.744545, 0, 1.0};
Point(47) = {0.033259, 0.742926, 0, 1.0};
Point(48) = {0.038827, 0.741298, 0, 1.0};
Point(49) = {0.044089, 0.739713, 0, 1.0};
Point(50) = {0.049013, 0.738193, 0, 1.0};
Point(51) = {0.053566, 0.736770, 0, 1.0};
Point(52) = {0.057715, 0.735465, 0, 1.0};
Point(53) = {0.061433, 0.734302, 0, 1.0};
Point(54) = {0.064695, 0.733294, 0, 1.0};
Point(55) = {0.067484, 0.732457, 0, 1.0};
Point(56) = {0.069784, 0.731801, 0, 1.0};
Point(57) = {0.071601, 0.731333, 0, 1.0};
Point(58) = {0.072939, 0.731022, 0, 1.0};
Point(59) = {0.073769, 0.730837, 0, 1.0};
Point(60) = {-0.073771, -0.730847, 0, 1.0};
Point(61) = {-0.072931, -0.731074, 0, 1.0};
Point(62) = {-0.071542, -0.731456, 0, 1.0};
Point(63) = {-0.069628, -0.732005, 0, 1.0};
Point(64) = {-0.067227, -0.732719, 0, 1.0};
Point(65) = {-0.064378, -0.733586, 0, 1.0};
Point(66) = {-0.061121, -0.734591, 0, 1.0};
Point(67) = {-0.057504, -0.735720, 0, 1.0};
Point(68) = {-0.053571, -0.736953, 0, 1.0};
Point(69) = {-0.049376, -0.738270, 0, 1.0};
Point(70) = {-0.044971, -0.739648, 0, 1.0};
Point(71) = {-0.040412, -0.741058, 0, 1.0};
Point(72) = {-0.035755, -0.742476, 0, 1.0};
Point(73) = {-0.031060, -0.743871, 0, 1.0};
Point(74) = {-0.026379, -0.745206, 0, 1.0};
Point(75) = {-0.021768, -0.746441, 0, 1.0};
Point(76) = {-0.017262, -0.747522, 0, 1.0};
Point(77) = {-0.012873, -0.748420, 0, 1.0};
Point(78) = {-0.008619, -0.749118, 0, 1.0};
Point(79) = {-0.004516, -0.749613, 0, 1.0};
Point(80) = {-0.000580, -0.749901, 0, 1.0};
Point(81) = {0.003173, -0.750000, 0, 1.0};
Point(82) = {0.006720, -0.749933, 0, 1.0};
Point(83) = {0.010023, -0.749723, 0, 1.0};
Point(84) = {0.013050, -0.749381, 0, 1.0};
Point(85) = {0.015774, -0.748929, 0, 1.0};
Point(86) = {0.018169, -0.748380, 0, 1.0};
Point(87) = {0.020221, -0.747754, 0, 1.0};
Point(88) = {0.021911, -0.747074, 0, 1.0};
Point(89) = {0.023236, -0.746368, 0, 1.0};
Point(90) = {0.024188, -0.745669, 0, 1.0};
Point(91) = {0.024775, -0.745016, 0, 1.0};
Point(92) = {0.025003, -0.744483, 0, 1.0};
Point(93) = {0.024834, -0.744195, 0, 1.0};
Point(94) = {0.024184, -0.744190, 0, 1.0};
Point(95) = {0.022964, -0.744496, 0, 1.0};
Point(96) = {0.021067, -0.745127, 0, 1.0};
Point(97) = {0.018381, -0.746050, 0, 1.0};
Point(98) = {0.014794, -0.747162, 0, 1.0};
Point(99) = {0.010210, -0.748310, 0, 1.0};
Point(100) = {0.004564, -0.749175, 0, 1.0};
Point(101) = {-0.001877, -0.749303, 0, 1.0};
Point(102) = {-0.008500, -0.748640, 0, 1.0};
Point(103) = {-0.014995, -0.747499, 0, 1.0};
Point(104) = {-0.021311, -0.746100, 0, 1.0};
Point(105) = {-0.027411, -0.744545, 0, 1.0};
Point(106) = {-0.033259, -0.742926, 0, 1.0};
Point(107) = {-0.038827, -0.741298, 0, 1.0};
Point(108) = {-0.044089, -0.739713, 0, 1.0};
Point(109) = {-0.049013, -0.738193, 0, 1.0};
Point(110) = {-0.053566, -0.736770, 0, 1.0};
Point(111) = {-0.057715, -0.735465, 0, 1.0};
Point(112) = {-0.061433, -0.734302, 0, 1.0};
Point(113) = {-0.064695, -0.733294, 0, 1.0};
Point(114) = {-0.067484, -0.732457, 0, 1.0};
Point(115) = {-0.069784, -0.731801, 0, 1.0};
Point(116) = {-0.071601, -0.731333, 0, 1.0};
Point(117) = {-0.072939, -0.731022, 0, 1.0};
Point(118) = {-0.073769, -0.730837, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:79};
Spline(6) = {79:101};
Spline(7) = {101:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html