SetFactory("OpenCASCADE");

Point(1) = {0.147542, 0.711694, 0, 1.0};
Point(2) = {0.145862, 0.712147, 0, 1.0};
Point(3) = {0.143085, 0.712912, 0, 1.0};
Point(4) = {0.139255, 0.714011, 0, 1.0};
Point(5) = {0.134454, 0.715438, 0, 1.0};
Point(6) = {0.128756, 0.717172, 0, 1.0};
Point(7) = {0.122243, 0.719182, 0, 1.0};
Point(8) = {0.115008, 0.721439, 0, 1.0};
Point(9) = {0.107143, 0.723906, 0, 1.0};
Point(10) = {0.098751, 0.726540, 0, 1.0};
Point(11) = {0.089942, 0.729297, 0, 1.0};
Point(12) = {0.080823, 0.732117, 0, 1.0};
Point(13) = {0.071511, 0.734951, 0, 1.0};
Point(14) = {0.062119, 0.737743, 0, 1.0};
Point(15) = {0.052757, 0.740413, 0, 1.0};
Point(16) = {0.043537, 0.742881, 0, 1.0};
Point(17) = {0.034525, 0.745044, 0, 1.0};
Point(18) = {0.025746, 0.746840, 0, 1.0};
Point(19) = {0.017237, 0.748236, 0, 1.0};
Point(20) = {0.009031, 0.749225, 0, 1.0};
Point(21) = {0.001160, 0.749803, 0, 1.0};
Point(22) = {-0.006346, 0.750000, 0, 1.0};
Point(23) = {-0.013440, 0.749866, 0, 1.0};
Point(24) = {-0.020046, 0.749446, 0, 1.0};
Point(25) = {-0.026100, 0.748763, 0, 1.0};
Point(26) = {-0.031548, 0.747857, 0, 1.0};
Point(27) = {-0.036338, 0.746759, 0, 1.0};
Point(28) = {-0.040441, 0.745507, 0, 1.0};
Point(29) = {-0.043822, 0.744149, 0, 1.0};
Point(30) = {-0.046471, 0.742735, 0, 1.0};
Point(31) = {-0.048375, 0.741338, 0, 1.0};
Point(32) = {-0.049550, 0.740033, 0, 1.0};
Point(33) = {-0.050007, 0.738966, 0, 1.0};
Point(34) = {-0.049669, 0.738390, 0, 1.0};
Point(35) = {-0.048368, 0.738381, 0, 1.0};
Point(36) = {-0.045929, 0.738991, 0, 1.0};
Point(37) = {-0.042133, 0.740254, 0, 1.0};
Point(38) = {-0.036763, 0.742099, 0, 1.0};
Point(39) = {-0.029589, 0.744324, 0, 1.0};
Point(40) = {-0.020420, 0.746620, 0, 1.0};
Point(41) = {-0.009127, 0.748351, 0, 1.0};
Point(42) = {0.003754, 0.748607, 0, 1.0};
Point(43) = {0.017000, 0.747280, 0, 1.0};
Point(44) = {0.029989, 0.744997, 0, 1.0};
Point(45) = {0.042623, 0.742200, 0, 1.0};
Point(46) = {0.054823, 0.739090, 0, 1.0};
Point(47) = {0.066519, 0.735852, 0, 1.0};
Point(48) = {0.077653, 0.732597, 0, 1.0};
Point(49) = {0.088177, 0.729427, 0, 1.0};
Point(50) = {0.098027, 0.726386, 0, 1.0};
Point(51) = {0.107132, 0.723540, 0, 1.0};
Point(52) = {0.115430, 0.720931, 0, 1.0};
Point(53) = {0.122865, 0.718605, 0, 1.0};
Point(54) = {0.129390, 0.716589, 0, 1.0};
Point(55) = {0.134969, 0.714914, 0, 1.0};
Point(56) = {0.139568, 0.713602, 0, 1.0};
Point(57) = {0.143202, 0.712665, 0, 1.0};
Point(58) = {0.145878, 0.712044, 0, 1.0};
Point(59) = {0.147539, 0.711674, 0, 1.0};
Point(60) = {-0.147542, -0.711694, 0, 1.0};
Point(61) = {-0.145862, -0.712147, 0, 1.0};
Point(62) = {-0.143085, -0.712912, 0, 1.0};
Point(63) = {-0.139255, -0.714011, 0, 1.0};
Point(64) = {-0.134454, -0.715438, 0, 1.0};
Point(65) = {-0.128756, -0.717172, 0, 1.0};
Point(66) = {-0.122243, -0.719182, 0, 1.0};
Point(67) = {-0.115008, -0.721439, 0, 1.0};
Point(68) = {-0.107143, -0.723906, 0, 1.0};
Point(69) = {-0.098751, -0.726540, 0, 1.0};
Point(70) = {-0.089942, -0.729297, 0, 1.0};
Point(71) = {-0.080823, -0.732117, 0, 1.0};
Point(72) = {-0.071511, -0.734951, 0, 1.0};
Point(73) = {-0.062119, -0.737743, 0, 1.0};
Point(74) = {-0.052757, -0.740413, 0, 1.0};
Point(75) = {-0.043537, -0.742881, 0, 1.0};
Point(76) = {-0.034525, -0.745044, 0, 1.0};
Point(77) = {-0.025746, -0.746840, 0, 1.0};
Point(78) = {-0.017237, -0.748236, 0, 1.0};
Point(79) = {-0.009031, -0.749225, 0, 1.0};
Point(80) = {-0.001160, -0.749803, 0, 1.0};
Point(81) = {0.006346, -0.750000, 0, 1.0};
Point(82) = {0.013440, -0.749866, 0, 1.0};
Point(83) = {0.020046, -0.749446, 0, 1.0};
Point(84) = {0.026100, -0.748763, 0, 1.0};
Point(85) = {0.031548, -0.747857, 0, 1.0};
Point(86) = {0.036338, -0.746759, 0, 1.0};
Point(87) = {0.040441, -0.745507, 0, 1.0};
Point(88) = {0.043822, -0.744149, 0, 1.0};
Point(89) = {0.046471, -0.742735, 0, 1.0};
Point(90) = {0.048375, -0.741338, 0, 1.0};
Point(91) = {0.049550, -0.740033, 0, 1.0};
Point(92) = {0.050007, -0.738966, 0, 1.0};
Point(93) = {0.049669, -0.738390, 0, 1.0};
Point(94) = {0.048368, -0.738381, 0, 1.0};
Point(95) = {0.045929, -0.738991, 0, 1.0};
Point(96) = {0.042133, -0.740254, 0, 1.0};
Point(97) = {0.036763, -0.742099, 0, 1.0};
Point(98) = {0.029589, -0.744324, 0, 1.0};
Point(99) = {0.020420, -0.746620, 0, 1.0};
Point(100) = {0.009127, -0.748351, 0, 1.0};
Point(101) = {-0.003754, -0.748607, 0, 1.0};
Point(102) = {-0.017000, -0.747280, 0, 1.0};
Point(103) = {-0.029989, -0.744997, 0, 1.0};
Point(104) = {-0.042623, -0.742200, 0, 1.0};
Point(105) = {-0.054823, -0.739090, 0, 1.0};
Point(106) = {-0.066519, -0.735852, 0, 1.0};
Point(107) = {-0.077653, -0.732597, 0, 1.0};
Point(108) = {-0.088177, -0.729427, 0, 1.0};
Point(109) = {-0.098027, -0.726386, 0, 1.0};
Point(110) = {-0.107132, -0.723540, 0, 1.0};
Point(111) = {-0.115430, -0.720931, 0, 1.0};
Point(112) = {-0.122865, -0.718605, 0, 1.0};
Point(113) = {-0.129390, -0.716589, 0, 1.0};
Point(114) = {-0.134969, -0.714914, 0, 1.0};
Point(115) = {-0.139568, -0.713602, 0, 1.0};
Point(116) = {-0.143202, -0.712665, 0, 1.0};
Point(117) = {-0.145878, -0.712044, 0, 1.0};
Point(118) = {-0.147539, -0.711674, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:79};
Spline(6) = {79:101};
Spline(7) = {101:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html