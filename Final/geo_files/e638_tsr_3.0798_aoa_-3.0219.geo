SetFactory("OpenCASCADE");

Point(1) = {0.074896, 0.739725, 0, 1.0};
Point(2) = {0.074331, 0.739768, 0, 1.0};
Point(3) = {0.072729, 0.739947, 0, 1.0};
Point(4) = {0.070249, 0.740286, 0, 1.0};
Point(5) = {0.066976, 0.740681, 0, 1.0};
Point(6) = {0.062890, 0.741098, 0, 1.0};
Point(7) = {0.058014, 0.741577, 0, 1.0};
Point(8) = {0.052429, 0.742146, 0, 1.0};
Point(9) = {0.046231, 0.742813, 0, 1.0};
Point(10) = {0.039517, 0.743573, 0, 1.0};
Point(11) = {0.032397, 0.744413, 0, 1.0};
Point(12) = {0.024981, 0.745311, 0, 1.0};
Point(13) = {0.017376, 0.746234, 0, 1.0};
Point(14) = {0.009687, 0.747146, 0, 1.0};
Point(15) = {0.002017, 0.748004, 0, 1.0};
Point(16) = {-0.005545, 0.748762, 0, 1.0};
Point(17) = {-0.012912, 0.749378, 0, 1.0};
Point(18) = {-0.020016, 0.749804, 0, 1.0};
Point(19) = {-0.026788, 0.750000, 0, 1.0};
Point(20) = {-0.033170, 0.749920, 0, 1.0};
Point(21) = {-0.039150, 0.749511, 0, 1.0};
Point(22) = {-0.044737, 0.748773, 0, 1.0};
Point(23) = {-0.049924, 0.747731, 0, 1.0};
Point(24) = {-0.054704, 0.746425, 0, 1.0};
Point(25) = {-0.059056, 0.744919, 0, 1.0};
Point(26) = {-0.062943, 0.743264, 0, 1.0};
Point(27) = {-0.066325, 0.741509, 0, 1.0};
Point(28) = {-0.069174, 0.739696, 0, 1.0};
Point(29) = {-0.071469, 0.737878, 0, 1.0};
Point(30) = {-0.073192, 0.736102, 0, 1.0};
Point(31) = {-0.074344, 0.734433, 0, 1.0};
Point(32) = {-0.074912, 0.732960, 0, 1.0};
Point(33) = {-0.074896, 0.731818, 0, 1.0};
Point(34) = {-0.074045, 0.731132, 0, 1.0};
Point(35) = {-0.072179, 0.730769, 0, 1.0};
Point(36) = {-0.069391, 0.730584, 0, 1.0};
Point(37) = {-0.065718, 0.730551, 0, 1.0};
Point(38) = {-0.061192, 0.730628, 0, 1.0};
Point(39) = {-0.055884, 0.730758, 0, 1.0};
Point(40) = {-0.049897, 0.730911, 0, 1.0};
Point(41) = {-0.043332, 0.731085, 0, 1.0};
Point(42) = {-0.036291, 0.731278, 0, 1.0};
Point(43) = {-0.028866, 0.731509, 0, 1.0};
Point(44) = {-0.021140, 0.731780, 0, 1.0};
Point(45) = {-0.013205, 0.732094, 0, 1.0};
Point(46) = {-0.005148, 0.732450, 0, 1.0};
Point(47) = {0.002938, 0.732850, 0, 1.0};
Point(48) = {0.010960, 0.733287, 0, 1.0};
Point(49) = {0.018825, 0.733764, 0, 1.0};
Point(50) = {0.026447, 0.734282, 0, 1.0};
Point(51) = {0.033744, 0.734846, 0, 1.0};
Point(52) = {0.040652, 0.735453, 0, 1.0};
Point(53) = {0.047104, 0.736091, 0, 1.0};
Point(54) = {0.053035, 0.736741, 0, 1.0};
Point(55) = {0.058385, 0.737382, 0, 1.0};
Point(56) = {0.063091, 0.737990, 0, 1.0};
Point(57) = {0.067081, 0.738542, 0, 1.0};
Point(58) = {0.070312, 0.739041, 0, 1.0};
Point(59) = {0.072763, 0.739438, 0, 1.0};
Point(60) = {0.074341, 0.739663, 0, 1.0};
Point(61) = {-0.074896, -0.739725, 0, 1.0};
Point(62) = {-0.074331, -0.739768, 0, 1.0};
Point(63) = {-0.072729, -0.739947, 0, 1.0};
Point(64) = {-0.070249, -0.740286, 0, 1.0};
Point(65) = {-0.066976, -0.740681, 0, 1.0};
Point(66) = {-0.062890, -0.741098, 0, 1.0};
Point(67) = {-0.058014, -0.741577, 0, 1.0};
Point(68) = {-0.052429, -0.742146, 0, 1.0};
Point(69) = {-0.046231, -0.742813, 0, 1.0};
Point(70) = {-0.039517, -0.743573, 0, 1.0};
Point(71) = {-0.032397, -0.744413, 0, 1.0};
Point(72) = {-0.024981, -0.745311, 0, 1.0};
Point(73) = {-0.017376, -0.746234, 0, 1.0};
Point(74) = {-0.009687, -0.747146, 0, 1.0};
Point(75) = {-0.002017, -0.748004, 0, 1.0};
Point(76) = {0.005545, -0.748762, 0, 1.0};
Point(77) = {0.012912, -0.749378, 0, 1.0};
Point(78) = {0.020016, -0.749804, 0, 1.0};
Point(79) = {0.026788, -0.750000, 0, 1.0};
Point(80) = {0.033170, -0.749920, 0, 1.0};
Point(81) = {0.039150, -0.749511, 0, 1.0};
Point(82) = {0.044737, -0.748773, 0, 1.0};
Point(83) = {0.049924, -0.747731, 0, 1.0};
Point(84) = {0.054704, -0.746425, 0, 1.0};
Point(85) = {0.059056, -0.744919, 0, 1.0};
Point(86) = {0.062943, -0.743264, 0, 1.0};
Point(87) = {0.066325, -0.741509, 0, 1.0};
Point(88) = {0.069174, -0.739696, 0, 1.0};
Point(89) = {0.071469, -0.737878, 0, 1.0};
Point(90) = {0.073192, -0.736102, 0, 1.0};
Point(91) = {0.074344, -0.734433, 0, 1.0};
Point(92) = {0.074912, -0.732960, 0, 1.0};
Point(93) = {0.074896, -0.731818, 0, 1.0};
Point(94) = {0.074045, -0.731132, 0, 1.0};
Point(95) = {0.072179, -0.730769, 0, 1.0};
Point(96) = {0.069391, -0.730584, 0, 1.0};
Point(97) = {0.065718, -0.730551, 0, 1.0};
Point(98) = {0.061192, -0.730628, 0, 1.0};
Point(99) = {0.055884, -0.730758, 0, 1.0};
Point(100) = {0.049897, -0.730911, 0, 1.0};
Point(101) = {0.043332, -0.731085, 0, 1.0};
Point(102) = {0.036291, -0.731278, 0, 1.0};
Point(103) = {0.028866, -0.731509, 0, 1.0};
Point(104) = {0.021140, -0.731780, 0, 1.0};
Point(105) = {0.013205, -0.732094, 0, 1.0};
Point(106) = {0.005148, -0.732450, 0, 1.0};
Point(107) = {-0.002938, -0.732850, 0, 1.0};
Point(108) = {-0.010960, -0.733287, 0, 1.0};
Point(109) = {-0.018825, -0.733764, 0, 1.0};
Point(110) = {-0.026447, -0.734282, 0, 1.0};
Point(111) = {-0.033744, -0.734846, 0, 1.0};
Point(112) = {-0.040652, -0.735453, 0, 1.0};
Point(113) = {-0.047104, -0.736091, 0, 1.0};
Point(114) = {-0.053035, -0.736741, 0, 1.0};
Point(115) = {-0.058385, -0.737382, 0, 1.0};
Point(116) = {-0.063091, -0.737990, 0, 1.0};
Point(117) = {-0.067081, -0.738542, 0, 1.0};
Point(118) = {-0.070312, -0.739041, 0, 1.0};
Point(119) = {-0.072763, -0.739438, 0, 1.0};
Point(120) = {-0.074341, -0.739663, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html