SetFactory("OpenCASCADE");

Point(1) = {0.112170, 0.739737, 0, 1.0};
Point(2) = {0.111606, 0.739779, 0, 1.0};
Point(3) = {0.110005, 0.739959, 0, 1.0};
Point(4) = {0.107529, 0.740297, 0, 1.0};
Point(5) = {0.104259, 0.740692, 0, 1.0};
Point(6) = {0.100178, 0.741108, 0, 1.0};
Point(7) = {0.095308, 0.741587, 0, 1.0};
Point(8) = {0.089730, 0.742155, 0, 1.0};
Point(9) = {0.083538, 0.742821, 0, 1.0};
Point(10) = {0.076832, 0.743581, 0, 1.0};
Point(11) = {0.069720, 0.744420, 0, 1.0};
Point(12) = {0.062313, 0.745317, 0, 1.0};
Point(13) = {0.054717, 0.746238, 0, 1.0};
Point(14) = {0.047037, 0.747149, 0, 1.0};
Point(15) = {0.039376, 0.748006, 0, 1.0};
Point(16) = {0.031823, 0.748763, 0, 1.0};
Point(17) = {0.024464, 0.749379, 0, 1.0};
Point(18) = {0.017368, 0.749805, 0, 1.0};
Point(19) = {0.010604, 0.750000, 0, 1.0};
Point(20) = {0.004229, 0.749920, 0, 1.0};
Point(21) = {-0.001744, 0.749512, 0, 1.0};
Point(22) = {-0.007324, 0.748774, 0, 1.0};
Point(23) = {-0.012505, 0.747734, 0, 1.0};
Point(24) = {-0.017279, 0.746429, 0, 1.0};
Point(25) = {-0.021627, 0.744925, 0, 1.0};
Point(26) = {-0.025509, 0.743272, 0, 1.0};
Point(27) = {-0.028887, 0.741519, 0, 1.0};
Point(28) = {-0.031732, 0.739708, 0, 1.0};
Point(29) = {-0.034025, 0.737892, 0, 1.0};
Point(30) = {-0.035746, 0.736118, 0, 1.0};
Point(31) = {-0.036897, 0.734451, 0, 1.0};
Point(32) = {-0.037465, 0.732980, 0, 1.0};
Point(33) = {-0.037448, 0.731839, 0, 1.0};
Point(34) = {-0.036598, 0.731154, 0, 1.0};
Point(35) = {-0.034734, 0.730791, 0, 1.0};
Point(36) = {-0.031950, 0.730607, 0, 1.0};
Point(37) = {-0.028281, 0.730574, 0, 1.0};
Point(38) = {-0.023760, 0.730650, 0, 1.0};
Point(39) = {-0.018459, 0.730780, 0, 1.0};
Point(40) = {-0.012478, 0.730933, 0, 1.0};
Point(41) = {-0.005921, 0.731107, 0, 1.0};
Point(42) = {0.001112, 0.731300, 0, 1.0};
Point(43) = {0.008528, 0.731531, 0, 1.0};
Point(44) = {0.016245, 0.731801, 0, 1.0};
Point(45) = {0.024172, 0.732115, 0, 1.0};
Point(46) = {0.032219, 0.732470, 0, 1.0};
Point(47) = {0.040295, 0.732870, 0, 1.0};
Point(48) = {0.048308, 0.733306, 0, 1.0};
Point(49) = {0.056165, 0.733783, 0, 1.0};
Point(50) = {0.063777, 0.734300, 0, 1.0};
Point(51) = {0.071066, 0.734863, 0, 1.0};
Point(52) = {0.077966, 0.735469, 0, 1.0};
Point(53) = {0.084410, 0.736107, 0, 1.0};
Point(54) = {0.090334, 0.736756, 0, 1.0};
Point(55) = {0.095678, 0.737397, 0, 1.0};
Point(56) = {0.100379, 0.738004, 0, 1.0};
Point(57) = {0.104364, 0.738555, 0, 1.0};
Point(58) = {0.107591, 0.739054, 0, 1.0};
Point(59) = {0.110040, 0.739451, 0, 1.0};
Point(60) = {0.111616, 0.739675, 0, 1.0};
Point(61) = {-0.112170, -0.739737, 0, 1.0};
Point(62) = {-0.111606, -0.739779, 0, 1.0};
Point(63) = {-0.110005, -0.739959, 0, 1.0};
Point(64) = {-0.107529, -0.740297, 0, 1.0};
Point(65) = {-0.104259, -0.740692, 0, 1.0};
Point(66) = {-0.100178, -0.741108, 0, 1.0};
Point(67) = {-0.095308, -0.741587, 0, 1.0};
Point(68) = {-0.089730, -0.742155, 0, 1.0};
Point(69) = {-0.083538, -0.742821, 0, 1.0};
Point(70) = {-0.076832, -0.743581, 0, 1.0};
Point(71) = {-0.069720, -0.744420, 0, 1.0};
Point(72) = {-0.062313, -0.745317, 0, 1.0};
Point(73) = {-0.054717, -0.746238, 0, 1.0};
Point(74) = {-0.047037, -0.747149, 0, 1.0};
Point(75) = {-0.039376, -0.748006, 0, 1.0};
Point(76) = {-0.031823, -0.748763, 0, 1.0};
Point(77) = {-0.024464, -0.749379, 0, 1.0};
Point(78) = {-0.017368, -0.749805, 0, 1.0};
Point(79) = {-0.010604, -0.750000, 0, 1.0};
Point(80) = {-0.004229, -0.749920, 0, 1.0};
Point(81) = {0.001744, -0.749512, 0, 1.0};
Point(82) = {0.007324, -0.748774, 0, 1.0};
Point(83) = {0.012505, -0.747734, 0, 1.0};
Point(84) = {0.017279, -0.746429, 0, 1.0};
Point(85) = {0.021627, -0.744925, 0, 1.0};
Point(86) = {0.025509, -0.743272, 0, 1.0};
Point(87) = {0.028887, -0.741519, 0, 1.0};
Point(88) = {0.031732, -0.739708, 0, 1.0};
Point(89) = {0.034025, -0.737892, 0, 1.0};
Point(90) = {0.035746, -0.736118, 0, 1.0};
Point(91) = {0.036897, -0.734451, 0, 1.0};
Point(92) = {0.037465, -0.732980, 0, 1.0};
Point(93) = {0.037448, -0.731839, 0, 1.0};
Point(94) = {0.036598, -0.731154, 0, 1.0};
Point(95) = {0.034734, -0.730791, 0, 1.0};
Point(96) = {0.031950, -0.730607, 0, 1.0};
Point(97) = {0.028281, -0.730574, 0, 1.0};
Point(98) = {0.023760, -0.730650, 0, 1.0};
Point(99) = {0.018459, -0.730780, 0, 1.0};
Point(100) = {0.012478, -0.730933, 0, 1.0};
Point(101) = {0.005921, -0.731107, 0, 1.0};
Point(102) = {-0.001112, -0.731300, 0, 1.0};
Point(103) = {-0.008528, -0.731531, 0, 1.0};
Point(104) = {-0.016245, -0.731801, 0, 1.0};
Point(105) = {-0.024172, -0.732115, 0, 1.0};
Point(106) = {-0.032219, -0.732470, 0, 1.0};
Point(107) = {-0.040295, -0.732870, 0, 1.0};
Point(108) = {-0.048308, -0.733306, 0, 1.0};
Point(109) = {-0.056165, -0.733783, 0, 1.0};
Point(110) = {-0.063777, -0.734300, 0, 1.0};
Point(111) = {-0.071066, -0.734863, 0, 1.0};
Point(112) = {-0.077966, -0.735469, 0, 1.0};
Point(113) = {-0.084410, -0.736107, 0, 1.0};
Point(114) = {-0.090334, -0.736756, 0, 1.0};
Point(115) = {-0.095678, -0.737397, 0, 1.0};
Point(116) = {-0.100379, -0.738004, 0, 1.0};
Point(117) = {-0.104364, -0.738555, 0, 1.0};
Point(118) = {-0.107591, -0.739054, 0, 1.0};
Point(119) = {-0.110040, -0.739451, 0, 1.0};
Point(120) = {-0.111616, -0.739675, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html