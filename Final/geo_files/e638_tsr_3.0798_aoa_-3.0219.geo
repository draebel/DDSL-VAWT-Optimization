SetFactory("OpenCASCADE");

Point(1) = {0.074861, 0.743154, 0, 1.0};
Point(2) = {0.074485, 0.743182, 0, 1.0};
Point(3) = {0.073417, 0.743302, 0, 1.0};
Point(4) = {0.071765, 0.743527, 0, 1.0};
Point(5) = {0.069584, 0.743791, 0, 1.0};
Point(6) = {0.066862, 0.744069, 0, 1.0};
Point(7) = {0.063613, 0.744388, 0, 1.0};
Point(8) = {0.059892, 0.744767, 0, 1.0};
Point(9) = {0.055762, 0.745211, 0, 1.0};
Point(10) = {0.051289, 0.745718, 0, 1.0};
Point(11) = {0.046545, 0.746278, 0, 1.0};
Point(12) = {0.041603, 0.746876, 0, 1.0};
Point(13) = {0.036537, 0.747491, 0, 1.0};
Point(14) = {0.031414, 0.748099, 0, 1.0};
Point(15) = {0.026304, 0.748670, 0, 1.0};
Point(16) = {0.021265, 0.749175, 0, 1.0};
Point(17) = {0.016357, 0.749586, 0, 1.0};
Point(18) = {0.011623, 0.749870, 0, 1.0};
Point(19) = {0.007111, 0.750000, 0, 1.0};
Point(20) = {0.002859, 0.749947, 0, 1.0};
Point(21) = {-0.001125, 0.749674, 0, 1.0};
Point(22) = {-0.004848, 0.749182, 0, 1.0};
Point(23) = {-0.008304, 0.748488, 0, 1.0};
Point(24) = {-0.011488, 0.747618, 0, 1.0};
Point(25) = {-0.014389, 0.746615, 0, 1.0};
Point(26) = {-0.016978, 0.745512, 0, 1.0};
Point(27) = {-0.019232, 0.744342, 0, 1.0};
Point(28) = {-0.021130, 0.743135, 0, 1.0};
Point(29) = {-0.022659, 0.741923, 0, 1.0};
Point(30) = {-0.023807, 0.740740, 0, 1.0};
Point(31) = {-0.024574, 0.739628, 0, 1.0};
Point(32) = {-0.024953, 0.738647, 0, 1.0};
Point(33) = {-0.024942, 0.737885, 0, 1.0};
Point(34) = {-0.024375, 0.737429, 0, 1.0};
Point(35) = {-0.023132, 0.737187, 0, 1.0};
Point(36) = {-0.021275, 0.737064, 0, 1.0};
Point(37) = {-0.018827, 0.737042, 0, 1.0};
Point(38) = {-0.015812, 0.737093, 0, 1.0};
Point(39) = {-0.012275, 0.737179, 0, 1.0};
Point(40) = {-0.008286, 0.737282, 0, 1.0};
Point(41) = {-0.003912, 0.737397, 0, 1.0};
Point(42) = {0.000780, 0.737526, 0, 1.0};
Point(43) = {0.005726, 0.737680, 0, 1.0};
Point(44) = {0.010874, 0.737861, 0, 1.0};
Point(45) = {0.016161, 0.738070, 0, 1.0};
Point(46) = {0.021529, 0.738307, 0, 1.0};
Point(47) = {0.026917, 0.738573, 0, 1.0};
Point(48) = {0.032262, 0.738864, 0, 1.0};
Point(49) = {0.037502, 0.739182, 0, 1.0};
Point(50) = {0.042580, 0.739527, 0, 1.0};
Point(51) = {0.047442, 0.739903, 0, 1.0};
Point(52) = {0.052045, 0.740307, 0, 1.0};
Point(53) = {0.056344, 0.740733, 0, 1.0};
Point(54) = {0.060296, 0.741165, 0, 1.0};
Point(55) = {0.063860, 0.741593, 0, 1.0};
Point(56) = {0.066996, 0.741998, 0, 1.0};
Point(57) = {0.069654, 0.742366, 0, 1.0};
Point(58) = {0.071807, 0.742698, 0, 1.0};
Point(59) = {0.073440, 0.742963, 0, 1.0};
Point(60) = {0.074492, 0.743113, 0, 1.0};
Point(61) = {-0.074861, -0.743154, 0, 1.0};
Point(62) = {-0.074485, -0.743182, 0, 1.0};
Point(63) = {-0.073417, -0.743302, 0, 1.0};
Point(64) = {-0.071765, -0.743527, 0, 1.0};
Point(65) = {-0.069584, -0.743791, 0, 1.0};
Point(66) = {-0.066862, -0.744069, 0, 1.0};
Point(67) = {-0.063613, -0.744388, 0, 1.0};
Point(68) = {-0.059892, -0.744767, 0, 1.0};
Point(69) = {-0.055762, -0.745211, 0, 1.0};
Point(70) = {-0.051289, -0.745718, 0, 1.0};
Point(71) = {-0.046545, -0.746278, 0, 1.0};
Point(72) = {-0.041603, -0.746876, 0, 1.0};
Point(73) = {-0.036537, -0.747491, 0, 1.0};
Point(74) = {-0.031414, -0.748099, 0, 1.0};
Point(75) = {-0.026304, -0.748670, 0, 1.0};
Point(76) = {-0.021265, -0.749175, 0, 1.0};
Point(77) = {-0.016357, -0.749586, 0, 1.0};
Point(78) = {-0.011623, -0.749870, 0, 1.0};
Point(79) = {-0.007111, -0.750000, 0, 1.0};
Point(80) = {-0.002859, -0.749947, 0, 1.0};
Point(81) = {0.001125, -0.749674, 0, 1.0};
Point(82) = {0.004848, -0.749182, 0, 1.0};
Point(83) = {0.008304, -0.748488, 0, 1.0};
Point(84) = {0.011488, -0.747618, 0, 1.0};
Point(85) = {0.014389, -0.746615, 0, 1.0};
Point(86) = {0.016978, -0.745512, 0, 1.0};
Point(87) = {0.019232, -0.744342, 0, 1.0};
Point(88) = {0.021130, -0.743135, 0, 1.0};
Point(89) = {0.022659, -0.741923, 0, 1.0};
Point(90) = {0.023807, -0.740740, 0, 1.0};
Point(91) = {0.024574, -0.739628, 0, 1.0};
Point(92) = {0.024953, -0.738647, 0, 1.0};
Point(93) = {0.024942, -0.737885, 0, 1.0};
Point(94) = {0.024375, -0.737429, 0, 1.0};
Point(95) = {0.023132, -0.737187, 0, 1.0};
Point(96) = {0.021275, -0.737064, 0, 1.0};
Point(97) = {0.018827, -0.737042, 0, 1.0};
Point(98) = {0.015812, -0.737093, 0, 1.0};
Point(99) = {0.012275, -0.737179, 0, 1.0};
Point(100) = {0.008286, -0.737282, 0, 1.0};
Point(101) = {0.003912, -0.737397, 0, 1.0};
Point(102) = {-0.000780, -0.737526, 0, 1.0};
Point(103) = {-0.005726, -0.737680, 0, 1.0};
Point(104) = {-0.010874, -0.737861, 0, 1.0};
Point(105) = {-0.016161, -0.738070, 0, 1.0};
Point(106) = {-0.021529, -0.738307, 0, 1.0};
Point(107) = {-0.026917, -0.738573, 0, 1.0};
Point(108) = {-0.032262, -0.738864, 0, 1.0};
Point(109) = {-0.037502, -0.739182, 0, 1.0};
Point(110) = {-0.042580, -0.739527, 0, 1.0};
Point(111) = {-0.047442, -0.739903, 0, 1.0};
Point(112) = {-0.052045, -0.740307, 0, 1.0};
Point(113) = {-0.056344, -0.740733, 0, 1.0};
Point(114) = {-0.060296, -0.741165, 0, 1.0};
Point(115) = {-0.063860, -0.741593, 0, 1.0};
Point(116) = {-0.066996, -0.741998, 0, 1.0};
Point(117) = {-0.069654, -0.742366, 0, 1.0};
Point(118) = {-0.071807, -0.742698, 0, 1.0};
Point(119) = {-0.073440, -0.742963, 0, 1.0};
Point(120) = {-0.074492, -0.743113, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html