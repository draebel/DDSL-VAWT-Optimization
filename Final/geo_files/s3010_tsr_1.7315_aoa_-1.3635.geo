SetFactory("OpenCASCADE");

Point(1) = {0.112472, 0.740563, 0, 1.0};
Point(2) = {0.111982, 0.740591, 0, 1.0};
Point(3) = {0.110527, 0.740693, 0, 1.0};
Point(4) = {0.108145, 0.740899, 0, 1.0};
Point(5) = {0.104892, 0.741228, 0, 1.0};
Point(6) = {0.100837, 0.741690, 0, 1.0};
Point(7) = {0.096060, 0.742280, 0, 1.0};
Point(8) = {0.090646, 0.742984, 0, 1.0};
Point(9) = {0.084682, 0.743780, 0, 1.0};
Point(10) = {0.078255, 0.744638, 0, 1.0};
Point(11) = {0.071448, 0.745525, 0, 1.0};
Point(12) = {0.064348, 0.746406, 0, 1.0};
Point(13) = {0.057031, 0.747251, 0, 1.0};
Point(14) = {0.049578, 0.748025, 0, 1.0};
Point(15) = {0.042061, 0.748701, 0, 1.0};
Point(16) = {0.034558, 0.749255, 0, 1.0};
Point(17) = {0.027139, 0.749668, 0, 1.0};
Point(18) = {0.019875, 0.749921, 0, 1.0};
Point(19) = {0.012839, 0.750000, 0, 1.0};
Point(20) = {0.006089, 0.749887, 0, 1.0};
Point(21) = {-0.000325, 0.749576, 0, 1.0};
Point(22) = {-0.006354, 0.749072, 0, 1.0};
Point(23) = {-0.011947, 0.748381, 0, 1.0};
Point(24) = {-0.017059, 0.747516, 0, 1.0};
Point(25) = {-0.021655, 0.746487, 0, 1.0};
Point(26) = {-0.025702, 0.745316, 0, 1.0};
Point(27) = {-0.029175, 0.744027, 0, 1.0};
Point(28) = {-0.032057, 0.742649, 0, 1.0};
Point(29) = {-0.034333, 0.741219, 0, 1.0};
Point(30) = {-0.035996, 0.739782, 0, 1.0};
Point(31) = {-0.037048, 0.738395, 0, 1.0};
Point(32) = {-0.037489, 0.737143, 0, 1.0};
Point(33) = {-0.037202, 0.736185, 0, 1.0};
Point(34) = {-0.036058, 0.735455, 0, 1.0};
Point(35) = {-0.034082, 0.734815, 0, 1.0};
Point(36) = {-0.031336, 0.734298, 0, 1.0};
Point(37) = {-0.027845, 0.733917, 0, 1.0};
Point(38) = {-0.023640, 0.733681, 0, 1.0};
Point(39) = {-0.018754, 0.733587, 0, 1.0};
Point(40) = {-0.013227, 0.733632, 0, 1.0};
Point(41) = {-0.007107, 0.733800, 0, 1.0};
Point(42) = {-0.000459, 0.734077, 0, 1.0};
Point(43) = {0.006646, 0.734444, 0, 1.0};
Point(44) = {0.014130, 0.734889, 0, 1.0};
Point(45) = {0.021912, 0.735393, 0, 1.0};
Point(46) = {0.029903, 0.735943, 0, 1.0};
Point(47) = {0.038011, 0.736518, 0, 1.0};
Point(48) = {0.046146, 0.737105, 0, 1.0};
Point(49) = {0.054211, 0.737684, 0, 1.0};
Point(50) = {0.062109, 0.738240, 0, 1.0};
Point(51) = {0.069743, 0.738756, 0, 1.0};
Point(52) = {0.077017, 0.739220, 0, 1.0};
Point(53) = {0.083836, 0.739623, 0, 1.0};
Point(54) = {0.090109, 0.739954, 0, 1.0};
Point(55) = {0.095751, 0.740211, 0, 1.0};
Point(56) = {0.100682, 0.740394, 0, 1.0};
Point(57) = {0.104828, 0.740510, 0, 1.0};
Point(58) = {0.108126, 0.740567, 0, 1.0};
Point(59) = {0.110525, 0.740579, 0, 1.0};
Point(60) = {0.111982, 0.740570, 0, 1.0};
Point(61) = {-0.112472, -0.740563, 0, 1.0};
Point(62) = {-0.111982, -0.740591, 0, 1.0};
Point(63) = {-0.110527, -0.740693, 0, 1.0};
Point(64) = {-0.108145, -0.740899, 0, 1.0};
Point(65) = {-0.104892, -0.741228, 0, 1.0};
Point(66) = {-0.100837, -0.741690, 0, 1.0};
Point(67) = {-0.096060, -0.742280, 0, 1.0};
Point(68) = {-0.090646, -0.742984, 0, 1.0};
Point(69) = {-0.084682, -0.743780, 0, 1.0};
Point(70) = {-0.078255, -0.744638, 0, 1.0};
Point(71) = {-0.071448, -0.745525, 0, 1.0};
Point(72) = {-0.064348, -0.746406, 0, 1.0};
Point(73) = {-0.057031, -0.747251, 0, 1.0};
Point(74) = {-0.049578, -0.748025, 0, 1.0};
Point(75) = {-0.042061, -0.748701, 0, 1.0};
Point(76) = {-0.034558, -0.749255, 0, 1.0};
Point(77) = {-0.027139, -0.749668, 0, 1.0};
Point(78) = {-0.019875, -0.749921, 0, 1.0};
Point(79) = {-0.012839, -0.750000, 0, 1.0};
Point(80) = {-0.006089, -0.749887, 0, 1.0};
Point(81) = {0.000325, -0.749576, 0, 1.0};
Point(82) = {0.006354, -0.749072, 0, 1.0};
Point(83) = {0.011947, -0.748381, 0, 1.0};
Point(84) = {0.017059, -0.747516, 0, 1.0};
Point(85) = {0.021655, -0.746487, 0, 1.0};
Point(86) = {0.025702, -0.745316, 0, 1.0};
Point(87) = {0.029175, -0.744027, 0, 1.0};
Point(88) = {0.032057, -0.742649, 0, 1.0};
Point(89) = {0.034333, -0.741219, 0, 1.0};
Point(90) = {0.035996, -0.739782, 0, 1.0};
Point(91) = {0.037048, -0.738395, 0, 1.0};
Point(92) = {0.037489, -0.737143, 0, 1.0};
Point(93) = {0.037202, -0.736185, 0, 1.0};
Point(94) = {0.036058, -0.735455, 0, 1.0};
Point(95) = {0.034082, -0.734815, 0, 1.0};
Point(96) = {0.031336, -0.734298, 0, 1.0};
Point(97) = {0.027845, -0.733917, 0, 1.0};
Point(98) = {0.023640, -0.733681, 0, 1.0};
Point(99) = {0.018754, -0.733587, 0, 1.0};
Point(100) = {0.013227, -0.733632, 0, 1.0};
Point(101) = {0.007107, -0.733800, 0, 1.0};
Point(102) = {0.000459, -0.734077, 0, 1.0};
Point(103) = {-0.006646, -0.734444, 0, 1.0};
Point(104) = {-0.014130, -0.734889, 0, 1.0};
Point(105) = {-0.021912, -0.735393, 0, 1.0};
Point(106) = {-0.029903, -0.735943, 0, 1.0};
Point(107) = {-0.038011, -0.736518, 0, 1.0};
Point(108) = {-0.046146, -0.737105, 0, 1.0};
Point(109) = {-0.054211, -0.737684, 0, 1.0};
Point(110) = {-0.062109, -0.738240, 0, 1.0};
Point(111) = {-0.069743, -0.738756, 0, 1.0};
Point(112) = {-0.077017, -0.739220, 0, 1.0};
Point(113) = {-0.083836, -0.739623, 0, 1.0};
Point(114) = {-0.090109, -0.739954, 0, 1.0};
Point(115) = {-0.095751, -0.740211, 0, 1.0};
Point(116) = {-0.100682, -0.740394, 0, 1.0};
Point(117) = {-0.104828, -0.740510, 0, 1.0};
Point(118) = {-0.108126, -0.740567, 0, 1.0};
Point(119) = {-0.110525, -0.740579, 0, 1.0};
Point(120) = {-0.111982, -0.740570, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html