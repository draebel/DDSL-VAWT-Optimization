SetFactory("OpenCASCADE");

Point(1) = {0.075014, 0.739305, 0, 1.0};
Point(2) = {0.071984, 0.739819, 0, 1.0};
Point(3) = {0.068016, 0.740483, 0, 1.0};
Point(4) = {0.064045, 0.741131, 0, 1.0};
Point(5) = {0.060075, 0.741763, 0, 1.0};
Point(6) = {0.056106, 0.742379, 0, 1.0};
Point(7) = {0.052136, 0.742974, 0, 1.0};
Point(8) = {0.048166, 0.743550, 0, 1.0};
Point(9) = {0.044196, 0.744106, 0, 1.0};
Point(10) = {0.040225, 0.744641, 0, 1.0};
Point(11) = {0.036254, 0.745157, 0, 1.0};
Point(12) = {0.032285, 0.745651, 0, 1.0};
Point(13) = {0.028313, 0.746124, 0, 1.0};
Point(14) = {0.020373, 0.747003, 0, 1.0};
Point(15) = {0.012431, 0.747792, 0, 1.0};
Point(16) = {0.004489, 0.748482, 0, 1.0};
Point(17) = {-0.003454, 0.749064, 0, 1.0};
Point(18) = {-0.011396, 0.749526, 0, 1.0};
Point(19) = {-0.019341, 0.749847, 0, 1.0};
Point(20) = {-0.027285, 0.749999, 0, 1.0};
Point(21) = {-0.031256, 0.750000, 0, 1.0};
Point(22) = {-0.035230, 0.749941, 0, 1.0};
Point(23) = {-0.039203, 0.749812, 0, 1.0};
Point(24) = {-0.043175, 0.749603, 0, 1.0};
Point(25) = {-0.047149, 0.749300, 0, 1.0};
Point(26) = {-0.051124, 0.748882, 0, 1.0};
Point(27) = {-0.055098, 0.748319, 0, 1.0};
Point(28) = {-0.059072, 0.747575, 0, 1.0};
Point(29) = {-0.063049, 0.746584, 0, 1.0};
Point(30) = {-0.067028, 0.745259, 0, 1.0};
Point(31) = {-0.069415, 0.744246, 0, 1.0};
Point(32) = {-0.071007, 0.743440, 0, 1.0};
Point(33) = {-0.071803, 0.742983, 0, 1.0};
Point(34) = {-0.072599, 0.742473, 0, 1.0};
Point(35) = {-0.072998, 0.742193, 0, 1.0};
Point(36) = {-0.073396, 0.741892, 0, 1.0};
Point(37) = {-0.073795, 0.741557, 0, 1.0};
Point(38) = {-0.074194, 0.741173, 0, 1.0};
Point(39) = {-0.074354, 0.740999, 0, 1.0};
Point(40) = {-0.074512, 0.740805, 0, 1.0};
Point(41) = {-0.074593, 0.740698, 0, 1.0};
Point(42) = {-0.074672, 0.740583, 0, 1.0};
Point(43) = {-0.074752, 0.740454, 0, 1.0};
Point(44) = {-0.074833, 0.740306, 0, 1.0};
Point(45) = {-0.074912, 0.740116, 0, 1.0};
Point(46) = {-0.074994, 0.739696, 0, 1.0};
Point(47) = {-0.074916, 0.739320, 0, 1.0};
Point(48) = {-0.074837, 0.739179, 0, 1.0};
Point(49) = {-0.074757, 0.739076, 0, 1.0};
Point(50) = {-0.074679, 0.738994, 0, 1.0};
Point(51) = {-0.074600, 0.738923, 0, 1.0};
Point(52) = {-0.074520, 0.738863, 0, 1.0};
Point(53) = {-0.074362, 0.738761, 0, 1.0};
Point(54) = {-0.074203, 0.738678, 0, 1.0};
Point(55) = {-0.073806, 0.738522, 0, 1.0};
Point(56) = {-0.073410, 0.738410, 0, 1.0};
Point(57) = {-0.073012, 0.738327, 0, 1.0};
Point(58) = {-0.072616, 0.738266, 0, 1.0};
Point(59) = {-0.071822, 0.738188, 0, 1.0};
Point(60) = {-0.071027, 0.738152, 0, 1.0};
Point(61) = {-0.069439, 0.738156, 0, 1.0};
Point(62) = {-0.067054, 0.738270, 0, 1.0};
Point(63) = {-0.063080, 0.738577, 0, 1.0};
Point(64) = {-0.059108, 0.738906, 0, 1.0};
Point(65) = {-0.055134, 0.739214, 0, 1.0};
Point(66) = {-0.051161, 0.739481, 0, 1.0};
Point(67) = {-0.047187, 0.739706, 0, 1.0};
Point(68) = {-0.043215, 0.739891, 0, 1.0};
Point(69) = {-0.039241, 0.740037, 0, 1.0};
Point(70) = {-0.035269, 0.740151, 0, 1.0};
Point(71) = {-0.031295, 0.740234, 0, 1.0};
Point(72) = {-0.027323, 0.740288, 0, 1.0};
Point(73) = {-0.019378, 0.740324, 0, 1.0};
Point(74) = {-0.011433, 0.740279, 0, 1.0};
Point(75) = {-0.003489, 0.740175, 0, 1.0};
Point(76) = {0.004455, 0.740028, 0, 1.0};
Point(77) = {0.012400, 0.739858, 0, 1.0};
Point(78) = {0.020343, 0.739663, 0, 1.0};
Point(79) = {0.028288, 0.739447, 0, 1.0};
Point(80) = {0.032259, 0.739331, 0, 1.0};
Point(81) = {0.036230, 0.739209, 0, 1.0};
Point(82) = {0.040203, 0.739083, 0, 1.0};
Point(83) = {0.044174, 0.738950, 0, 1.0};
Point(84) = {0.048147, 0.738813, 0, 1.0};
Point(85) = {0.052118, 0.738674, 0, 1.0};
Point(86) = {0.056091, 0.738530, 0, 1.0};
Point(87) = {0.060061, 0.738383, 0, 1.0};
Point(88) = {0.064034, 0.738232, 0, 1.0};
Point(89) = {0.068006, 0.738080, 0, 1.0};
Point(90) = {0.071977, 0.737927, 0, 1.0};
Point(91) = {0.074995, 0.737812, 0, 1.0};
Point(92) = {-0.075014, -0.739305, 0, 1.0};
Point(93) = {-0.071984, -0.739819, 0, 1.0};
Point(94) = {-0.068016, -0.740483, 0, 1.0};
Point(95) = {-0.064045, -0.741131, 0, 1.0};
Point(96) = {-0.060075, -0.741763, 0, 1.0};
Point(97) = {-0.056106, -0.742379, 0, 1.0};
Point(98) = {-0.052136, -0.742974, 0, 1.0};
Point(99) = {-0.048166, -0.743550, 0, 1.0};
Point(100) = {-0.044196, -0.744106, 0, 1.0};
Point(101) = {-0.040225, -0.744641, 0, 1.0};
Point(102) = {-0.036254, -0.745157, 0, 1.0};
Point(103) = {-0.032285, -0.745651, 0, 1.0};
Point(104) = {-0.028313, -0.746124, 0, 1.0};
Point(105) = {-0.020373, -0.747003, 0, 1.0};
Point(106) = {-0.012431, -0.747792, 0, 1.0};
Point(107) = {-0.004489, -0.748482, 0, 1.0};
Point(108) = {0.003454, -0.749064, 0, 1.0};
Point(109) = {0.011396, -0.749526, 0, 1.0};
Point(110) = {0.019341, -0.749847, 0, 1.0};
Point(111) = {0.027285, -0.749999, 0, 1.0};
Point(112) = {0.031256, -0.750000, 0, 1.0};
Point(113) = {0.035230, -0.749941, 0, 1.0};
Point(114) = {0.039203, -0.749812, 0, 1.0};
Point(115) = {0.043175, -0.749603, 0, 1.0};
Point(116) = {0.047149, -0.749300, 0, 1.0};
Point(117) = {0.051124, -0.748882, 0, 1.0};
Point(118) = {0.055098, -0.748319, 0, 1.0};
Point(119) = {0.059072, -0.747575, 0, 1.0};
Point(120) = {0.063049, -0.746584, 0, 1.0};
Point(121) = {0.067028, -0.745259, 0, 1.0};
Point(122) = {0.069415, -0.744246, 0, 1.0};
Point(123) = {0.071007, -0.743440, 0, 1.0};
Point(124) = {0.071803, -0.742983, 0, 1.0};
Point(125) = {0.072599, -0.742473, 0, 1.0};
Point(126) = {0.072998, -0.742193, 0, 1.0};
Point(127) = {0.073396, -0.741892, 0, 1.0};
Point(128) = {0.073795, -0.741557, 0, 1.0};
Point(129) = {0.074194, -0.741173, 0, 1.0};
Point(130) = {0.074354, -0.740999, 0, 1.0};
Point(131) = {0.074512, -0.740805, 0, 1.0};
Point(132) = {0.074593, -0.740698, 0, 1.0};
Point(133) = {0.074672, -0.740583, 0, 1.0};
Point(134) = {0.074752, -0.740454, 0, 1.0};
Point(135) = {0.074833, -0.740306, 0, 1.0};
Point(136) = {0.074912, -0.740116, 0, 1.0};
Point(137) = {0.074994, -0.739696, 0, 1.0};
Point(138) = {0.074916, -0.739320, 0, 1.0};
Point(139) = {0.074837, -0.739179, 0, 1.0};
Point(140) = {0.074757, -0.739076, 0, 1.0};
Point(141) = {0.074679, -0.738994, 0, 1.0};
Point(142) = {0.074600, -0.738923, 0, 1.0};
Point(143) = {0.074520, -0.738863, 0, 1.0};
Point(144) = {0.074362, -0.738761, 0, 1.0};
Point(145) = {0.074203, -0.738678, 0, 1.0};
Point(146) = {0.073806, -0.738522, 0, 1.0};
Point(147) = {0.073410, -0.738410, 0, 1.0};
Point(148) = {0.073012, -0.738327, 0, 1.0};
Point(149) = {0.072616, -0.738266, 0, 1.0};
Point(150) = {0.071822, -0.738188, 0, 1.0};
Point(151) = {0.071027, -0.738152, 0, 1.0};
Point(152) = {0.069439, -0.738156, 0, 1.0};
Point(153) = {0.067054, -0.738270, 0, 1.0};
Point(154) = {0.063080, -0.738577, 0, 1.0};
Point(155) = {0.059108, -0.738906, 0, 1.0};
Point(156) = {0.055134, -0.739214, 0, 1.0};
Point(157) = {0.051161, -0.739481, 0, 1.0};
Point(158) = {0.047187, -0.739706, 0, 1.0};
Point(159) = {0.043215, -0.739891, 0, 1.0};
Point(160) = {0.039241, -0.740037, 0, 1.0};
Point(161) = {0.035269, -0.740151, 0, 1.0};
Point(162) = {0.031295, -0.740234, 0, 1.0};
Point(163) = {0.027323, -0.740288, 0, 1.0};
Point(164) = {0.019378, -0.740324, 0, 1.0};
Point(165) = {0.011433, -0.740279, 0, 1.0};
Point(166) = {0.003489, -0.740175, 0, 1.0};
Point(167) = {-0.004455, -0.740028, 0, 1.0};
Point(168) = {-0.012400, -0.739858, 0, 1.0};
Point(169) = {-0.020343, -0.739663, 0, 1.0};
Point(170) = {-0.028288, -0.739447, 0, 1.0};
Point(171) = {-0.032259, -0.739331, 0, 1.0};
Point(172) = {-0.036230, -0.739209, 0, 1.0};
Point(173) = {-0.040203, -0.739083, 0, 1.0};
Point(174) = {-0.044174, -0.738950, 0, 1.0};
Point(175) = {-0.048147, -0.738813, 0, 1.0};
Point(176) = {-0.052118, -0.738674, 0, 1.0};
Point(177) = {-0.056091, -0.738530, 0, 1.0};
Point(178) = {-0.060061, -0.738383, 0, 1.0};
Point(179) = {-0.064034, -0.738232, 0, 1.0};
Point(180) = {-0.068006, -0.738080, 0, 1.0};
Point(181) = {-0.071977, -0.737927, 0, 1.0};
Point(182) = {-0.074995, -0.737812, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:70};
Spline(3) = {70:91};
Spline(4) = {91,1};

// Lines: second blade (splines 5-8)
Spline(5) = {92:112};
Spline(6) = {112:161};
Spline(7) = {161:182};
Spline(8) = {182,92};

// Outer domain (points 20001-4 and lines)
Point(183) = {-13.50000000, -15.00000000, 0, 1.0};
Point(184) = {-13.50000000, 15.00000000, 0, 1.0};
Point(185) = {36.00000000, 15.00000000, 0, 1.0};
Point(186) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {183, 184};
Line(12) = {184, 185};
Line(13) = {185, 186};
Line(14) = {183, 186};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html