SetFactory("OpenCASCADE");

Point(1) = {0.074324, 0.749145, 0, 1.0};
Point(2) = {0.074133, 0.749179, 0, 1.0};
Point(3) = {0.073611, 0.749284, 0, 1.0};
Point(4) = {0.072810, 0.749416, 0, 1.0};
Point(5) = {0.071730, 0.749536, 0, 1.0};
Point(6) = {0.070355, 0.749636, 0, 1.0};
Point(7) = {0.068691, 0.749725, 0, 1.0};
Point(8) = {0.066751, 0.749803, 0, 1.0};
Point(9) = {0.064547, 0.749870, 0, 1.0};
Point(10) = {0.062094, 0.749924, 0, 1.0};
Point(11) = {0.059410, 0.749963, 0, 1.0};
Point(12) = {0.056509, 0.749989, 0, 1.0};
Point(13) = {0.053413, 0.750000, 0, 1.0};
Point(14) = {0.050141, 0.749996, 0, 1.0};
Point(15) = {0.046715, 0.749976, 0, 1.0};
Point(16) = {0.043157, 0.749942, 0, 1.0};
Point(17) = {0.039492, 0.749893, 0, 1.0};
Point(18) = {0.035745, 0.749827, 0, 1.0};
Point(19) = {0.031942, 0.749747, 0, 1.0};
Point(20) = {0.028110, 0.749650, 0, 1.0};
Point(21) = {0.024278, 0.749533, 0, 1.0};
Point(22) = {0.020472, 0.749392, 0, 1.0};
Point(23) = {0.016719, 0.749225, 0, 1.0};
Point(24) = {0.013044, 0.749024, 0, 1.0};
Point(25) = {0.009471, 0.748781, 0, 1.0};
Point(26) = {0.006019, 0.748492, 0, 1.0};
Point(27) = {0.002713, 0.748145, 0, 1.0};
Point(28) = {-0.000443, 0.747731, 0, 1.0};
Point(29) = {-0.003445, 0.747252, 0, 1.0};
Point(30) = {-0.006274, 0.746708, 0, 1.0};
Point(31) = {-0.008931, 0.746097, 0, 1.0};
Point(32) = {-0.011410, 0.745436, 0, 1.0};
Point(33) = {-0.013699, 0.744729, 0, 1.0};
Point(34) = {-0.015794, 0.743985, 0, 1.0};
Point(35) = {-0.017683, 0.743216, 0, 1.0};
Point(36) = {-0.019362, 0.742429, 0, 1.0};
Point(37) = {-0.020830, 0.741636, 0, 1.0};
Point(38) = {-0.022076, 0.740848, 0, 1.0};
Point(39) = {-0.023103, 0.740077, 0, 1.0};
Point(40) = {-0.023910, 0.739341, 0, 1.0};
Point(41) = {-0.024495, 0.738657, 0, 1.0};
Point(42) = {-0.024858, 0.738046, 0, 1.0};
Point(43) = {-0.025002, 0.737549, 0, 1.0};
Point(44) = {-0.024861, 0.737201, 0, 1.0};
Point(45) = {-0.024391, 0.736982, 0, 1.0};
Point(46) = {-0.023606, 0.736849, 0, 1.0};
Point(47) = {-0.022515, 0.736798, 0, 1.0};
Point(48) = {-0.021127, 0.736832, 0, 1.0};
Point(49) = {-0.019447, 0.736947, 0, 1.0};
Point(50) = {-0.017484, 0.737138, 0, 1.0};
Point(51) = {-0.015247, 0.737404, 0, 1.0};
Point(52) = {-0.012749, 0.737738, 0, 1.0};
Point(53) = {-0.010001, 0.738136, 0, 1.0};
Point(54) = {-0.007018, 0.738592, 0, 1.0};
Point(55) = {-0.003817, 0.739097, 0, 1.0};
Point(56) = {-0.000420, 0.739645, 0, 1.0};
Point(57) = {0.003157, 0.740228, 0, 1.0};
Point(58) = {0.006887, 0.740838, 0, 1.0};
Point(59) = {0.010749, 0.741468, 0, 1.0};
Point(60) = {0.014716, 0.742109, 0, 1.0};
Point(61) = {0.018765, 0.742755, 0, 1.0};
Point(62) = {0.022864, 0.743395, 0, 1.0};
Point(63) = {0.026988, 0.744026, 0, 1.0};
Point(64) = {0.031106, 0.744643, 0, 1.0};
Point(65) = {0.035196, 0.745242, 0, 1.0};
Point(66) = {0.039241, 0.745817, 0, 1.0};
Point(67) = {0.043215, 0.746338, 0, 1.0};
Point(68) = {0.047070, 0.746791, 0, 1.0};
Point(69) = {0.050750, 0.747182, 0, 1.0};
Point(70) = {0.054236, 0.747525, 0, 1.0};
Point(71) = {0.057501, 0.747826, 0, 1.0};
Point(72) = {0.060526, 0.748087, 0, 1.0};
Point(73) = {0.063292, 0.748313, 0, 1.0};
Point(74) = {0.065777, 0.748504, 0, 1.0};
Point(75) = {0.067968, 0.748666, 0, 1.0};
Point(76) = {0.069848, 0.748802, 0, 1.0};
Point(77) = {0.071412, 0.748921, 0, 1.0};
Point(78) = {0.072655, 0.749018, 0, 1.0};
Point(79) = {0.073564, 0.749088, 0, 1.0};
Point(80) = {0.074129, 0.749133, 0, 1.0};
Point(81) = {-0.074324, -0.749145, 0, 1.0};
Point(82) = {-0.074133, -0.749179, 0, 1.0};
Point(83) = {-0.073611, -0.749284, 0, 1.0};
Point(84) = {-0.072810, -0.749416, 0, 1.0};
Point(85) = {-0.071730, -0.749536, 0, 1.0};
Point(86) = {-0.070355, -0.749636, 0, 1.0};
Point(87) = {-0.068691, -0.749725, 0, 1.0};
Point(88) = {-0.066751, -0.749803, 0, 1.0};
Point(89) = {-0.064547, -0.749870, 0, 1.0};
Point(90) = {-0.062094, -0.749924, 0, 1.0};
Point(91) = {-0.059410, -0.749963, 0, 1.0};
Point(92) = {-0.056509, -0.749989, 0, 1.0};
Point(93) = {-0.053413, -0.750000, 0, 1.0};
Point(94) = {-0.050141, -0.749996, 0, 1.0};
Point(95) = {-0.046715, -0.749976, 0, 1.0};
Point(96) = {-0.043157, -0.749942, 0, 1.0};
Point(97) = {-0.039492, -0.749893, 0, 1.0};
Point(98) = {-0.035745, -0.749827, 0, 1.0};
Point(99) = {-0.031942, -0.749747, 0, 1.0};
Point(100) = {-0.028110, -0.749650, 0, 1.0};
Point(101) = {-0.024278, -0.749533, 0, 1.0};
Point(102) = {-0.020472, -0.749392, 0, 1.0};
Point(103) = {-0.016719, -0.749225, 0, 1.0};
Point(104) = {-0.013044, -0.749024, 0, 1.0};
Point(105) = {-0.009471, -0.748781, 0, 1.0};
Point(106) = {-0.006019, -0.748492, 0, 1.0};
Point(107) = {-0.002713, -0.748145, 0, 1.0};
Point(108) = {0.000443, -0.747731, 0, 1.0};
Point(109) = {0.003445, -0.747252, 0, 1.0};
Point(110) = {0.006274, -0.746708, 0, 1.0};
Point(111) = {0.008931, -0.746097, 0, 1.0};
Point(112) = {0.011410, -0.745436, 0, 1.0};
Point(113) = {0.013699, -0.744729, 0, 1.0};
Point(114) = {0.015794, -0.743985, 0, 1.0};
Point(115) = {0.017683, -0.743216, 0, 1.0};
Point(116) = {0.019362, -0.742429, 0, 1.0};
Point(117) = {0.020830, -0.741636, 0, 1.0};
Point(118) = {0.022076, -0.740848, 0, 1.0};
Point(119) = {0.023103, -0.740077, 0, 1.0};
Point(120) = {0.023910, -0.739341, 0, 1.0};
Point(121) = {0.024495, -0.738657, 0, 1.0};
Point(122) = {0.024858, -0.738046, 0, 1.0};
Point(123) = {0.025002, -0.737549, 0, 1.0};
Point(124) = {0.024861, -0.737201, 0, 1.0};
Point(125) = {0.024391, -0.736982, 0, 1.0};
Point(126) = {0.023606, -0.736849, 0, 1.0};
Point(127) = {0.022515, -0.736798, 0, 1.0};
Point(128) = {0.021127, -0.736832, 0, 1.0};
Point(129) = {0.019447, -0.736947, 0, 1.0};
Point(130) = {0.017484, -0.737138, 0, 1.0};
Point(131) = {0.015247, -0.737404, 0, 1.0};
Point(132) = {0.012749, -0.737738, 0, 1.0};
Point(133) = {0.010001, -0.738136, 0, 1.0};
Point(134) = {0.007018, -0.738592, 0, 1.0};
Point(135) = {0.003817, -0.739097, 0, 1.0};
Point(136) = {0.000420, -0.739645, 0, 1.0};
Point(137) = {-0.003157, -0.740228, 0, 1.0};
Point(138) = {-0.006887, -0.740838, 0, 1.0};
Point(139) = {-0.010749, -0.741468, 0, 1.0};
Point(140) = {-0.014716, -0.742109, 0, 1.0};
Point(141) = {-0.018765, -0.742755, 0, 1.0};
Point(142) = {-0.022864, -0.743395, 0, 1.0};
Point(143) = {-0.026988, -0.744026, 0, 1.0};
Point(144) = {-0.031106, -0.744643, 0, 1.0};
Point(145) = {-0.035196, -0.745242, 0, 1.0};
Point(146) = {-0.039241, -0.745817, 0, 1.0};
Point(147) = {-0.043215, -0.746338, 0, 1.0};
Point(148) = {-0.047070, -0.746791, 0, 1.0};
Point(149) = {-0.050750, -0.747182, 0, 1.0};
Point(150) = {-0.054236, -0.747525, 0, 1.0};
Point(151) = {-0.057501, -0.747826, 0, 1.0};
Point(152) = {-0.060526, -0.748087, 0, 1.0};
Point(153) = {-0.063292, -0.748313, 0, 1.0};
Point(154) = {-0.065777, -0.748504, 0, 1.0};
Point(155) = {-0.067968, -0.748666, 0, 1.0};
Point(156) = {-0.069848, -0.748802, 0, 1.0};
Point(157) = {-0.071412, -0.748921, 0, 1.0};
Point(158) = {-0.072655, -0.749018, 0, 1.0};
Point(159) = {-0.073564, -0.749088, 0, 1.0};
Point(160) = {-0.074129, -0.749133, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html