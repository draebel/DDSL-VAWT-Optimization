SetFactory("OpenCASCADE");

Point(1) = {0.074620, 0.735169, 0, 1.0};
Point(2) = {0.074280, 0.735257, 0, 1.0};
Point(3) = {0.073297, 0.735536, 0, 1.0};
Point(4) = {0.071752, 0.736011, 0, 1.0};
Point(5) = {0.069707, 0.736645, 0, 1.0};
Point(6) = {0.067192, 0.737390, 0, 1.0};
Point(7) = {0.064216, 0.738228, 0, 1.0};
Point(8) = {0.060814, 0.739157, 0, 1.0};
Point(9) = {0.057037, 0.740173, 0, 1.0};
Point(10) = {0.052939, 0.741256, 0, 1.0};
Point(11) = {0.048577, 0.742387, 0, 1.0};
Point(12) = {0.044010, 0.743543, 0, 1.0};
Point(13) = {0.039300, 0.744699, 0, 1.0};
Point(14) = {0.034506, 0.745823, 0, 1.0};
Point(15) = {0.029691, 0.746879, 0, 1.0};
Point(16) = {0.024898, 0.747816, 0, 1.0};
Point(17) = {0.020155, 0.748605, 0, 1.0};
Point(18) = {0.015489, 0.749224, 0, 1.0};
Point(19) = {0.010925, 0.749663, 0, 1.0};
Point(20) = {0.006489, 0.749920, 0, 1.0};
Point(21) = {0.002201, 0.750000, 0, 1.0};
Point(22) = {-0.001901, 0.749928, 0, 1.0};
Point(23) = {-0.005776, 0.749718, 0, 1.0};
Point(24) = {-0.009383, 0.749382, 0, 1.0};
Point(25) = {-0.012685, 0.748933, 0, 1.0};
Point(26) = {-0.015647, 0.748381, 0, 1.0};
Point(27) = {-0.018242, 0.747743, 0, 1.0};
Point(28) = {-0.020444, 0.747034, 0, 1.0};
Point(29) = {-0.022234, 0.746274, 0, 1.0};
Point(30) = {-0.023596, 0.745488, 0, 1.0};
Point(31) = {-0.024518, 0.744711, 0, 1.0};
Point(32) = {-0.024978, 0.744000, 0, 1.0};
Point(33) = {-0.024856, 0.743371, 0, 1.0};
Point(34) = {-0.024131, 0.742747, 0, 1.0};
Point(35) = {-0.022888, 0.742109, 0, 1.0};
Point(36) = {-0.021138, 0.741487, 0, 1.0};
Point(37) = {-0.018895, 0.740894, 0, 1.0};
Point(38) = {-0.016177, 0.740336, 0, 1.0};
Point(39) = {-0.013009, 0.739821, 0, 1.0};
Point(40) = {-0.009418, 0.739351, 0, 1.0};
Point(41) = {-0.005441, 0.738925, 0, 1.0};
Point(42) = {-0.001120, 0.738547, 0, 1.0};
Point(43) = {0.003499, 0.738214, 0, 1.0};
Point(44) = {0.008363, 0.737937, 0, 1.0};
Point(45) = {0.013434, 0.737729, 0, 1.0};
Point(46) = {0.018687, 0.737576, 0, 1.0};
Point(47) = {0.024066, 0.737447, 0, 1.0};
Point(48) = {0.029501, 0.737322, 0, 1.0};
Point(49) = {0.034918, 0.737189, 0, 1.0};
Point(50) = {0.040244, 0.737044, 0, 1.0};
Point(51) = {0.045407, 0.736880, 0, 1.0};
Point(52) = {0.050337, 0.736698, 0, 1.0};
Point(53) = {0.054967, 0.736499, 0, 1.0};
Point(54) = {0.059231, 0.736288, 0, 1.0};
Point(55) = {0.063071, 0.736071, 0, 1.0};
Point(56) = {0.066431, 0.735858, 0, 1.0};
Point(57) = {0.069268, 0.735662, 0, 1.0};
Point(58) = {0.071549, 0.735489, 0, 1.0};
Point(59) = {0.073232, 0.735336, 0, 1.0};
Point(60) = {0.074269, 0.735217, 0, 1.0};
Point(61) = {-0.074620, -0.735169, 0, 1.0};
Point(62) = {-0.074280, -0.735257, 0, 1.0};
Point(63) = {-0.073297, -0.735536, 0, 1.0};
Point(64) = {-0.071752, -0.736011, 0, 1.0};
Point(65) = {-0.069707, -0.736645, 0, 1.0};
Point(66) = {-0.067192, -0.737390, 0, 1.0};
Point(67) = {-0.064216, -0.738228, 0, 1.0};
Point(68) = {-0.060814, -0.739157, 0, 1.0};
Point(69) = {-0.057037, -0.740173, 0, 1.0};
Point(70) = {-0.052939, -0.741256, 0, 1.0};
Point(71) = {-0.048577, -0.742387, 0, 1.0};
Point(72) = {-0.044010, -0.743543, 0, 1.0};
Point(73) = {-0.039300, -0.744699, 0, 1.0};
Point(74) = {-0.034506, -0.745823, 0, 1.0};
Point(75) = {-0.029691, -0.746879, 0, 1.0};
Point(76) = {-0.024898, -0.747816, 0, 1.0};
Point(77) = {-0.020155, -0.748605, 0, 1.0};
Point(78) = {-0.015489, -0.749224, 0, 1.0};
Point(79) = {-0.010925, -0.749663, 0, 1.0};
Point(80) = {-0.006489, -0.749920, 0, 1.0};
Point(81) = {-0.002201, -0.750000, 0, 1.0};
Point(82) = {0.001901, -0.749928, 0, 1.0};
Point(83) = {0.005776, -0.749718, 0, 1.0};
Point(84) = {0.009383, -0.749382, 0, 1.0};
Point(85) = {0.012685, -0.748933, 0, 1.0};
Point(86) = {0.015647, -0.748381, 0, 1.0};
Point(87) = {0.018242, -0.747743, 0, 1.0};
Point(88) = {0.020444, -0.747034, 0, 1.0};
Point(89) = {0.022234, -0.746274, 0, 1.0};
Point(90) = {0.023596, -0.745488, 0, 1.0};
Point(91) = {0.024518, -0.744711, 0, 1.0};
Point(92) = {0.024978, -0.744000, 0, 1.0};
Point(93) = {0.024856, -0.743371, 0, 1.0};
Point(94) = {0.024131, -0.742747, 0, 1.0};
Point(95) = {0.022888, -0.742109, 0, 1.0};
Point(96) = {0.021138, -0.741487, 0, 1.0};
Point(97) = {0.018895, -0.740894, 0, 1.0};
Point(98) = {0.016177, -0.740336, 0, 1.0};
Point(99) = {0.013009, -0.739821, 0, 1.0};
Point(100) = {0.009418, -0.739351, 0, 1.0};
Point(101) = {0.005441, -0.738925, 0, 1.0};
Point(102) = {0.001120, -0.738547, 0, 1.0};
Point(103) = {-0.003499, -0.738214, 0, 1.0};
Point(104) = {-0.008363, -0.737937, 0, 1.0};
Point(105) = {-0.013434, -0.737729, 0, 1.0};
Point(106) = {-0.018687, -0.737576, 0, 1.0};
Point(107) = {-0.024066, -0.737447, 0, 1.0};
Point(108) = {-0.029501, -0.737322, 0, 1.0};
Point(109) = {-0.034918, -0.737189, 0, 1.0};
Point(110) = {-0.040244, -0.737044, 0, 1.0};
Point(111) = {-0.045407, -0.736880, 0, 1.0};
Point(112) = {-0.050337, -0.736698, 0, 1.0};
Point(113) = {-0.054967, -0.736499, 0, 1.0};
Point(114) = {-0.059231, -0.736288, 0, 1.0};
Point(115) = {-0.063071, -0.736071, 0, 1.0};
Point(116) = {-0.066431, -0.735858, 0, 1.0};
Point(117) = {-0.069268, -0.735662, 0, 1.0};
Point(118) = {-0.071549, -0.735489, 0, 1.0};
Point(119) = {-0.073232, -0.735336, 0, 1.0};
Point(120) = {-0.074269, -0.735217, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html