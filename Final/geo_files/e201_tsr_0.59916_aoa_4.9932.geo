SetFactory("OpenCASCADE");

Point(1) = {0.074699, 0.727752, 0, 1.0};
Point(2) = {0.074188, 0.727884, 0, 1.0};
Point(3) = {0.072714, 0.728302, 0, 1.0};
Point(4) = {0.070395, 0.729015, 0, 1.0};
Point(5) = {0.067328, 0.729965, 0, 1.0};
Point(6) = {0.063554, 0.731082, 0, 1.0};
Point(7) = {0.059090, 0.732340, 0, 1.0};
Point(8) = {0.053987, 0.733734, 0, 1.0};
Point(9) = {0.048321, 0.735258, 0, 1.0};
Point(10) = {0.042173, 0.736882, 0, 1.0};
Point(11) = {0.035629, 0.738579, 0, 1.0};
Point(12) = {0.028778, 0.740313, 0, 1.0};
Point(13) = {0.021712, 0.742047, 0, 1.0};
Point(14) = {0.014520, 0.743735, 0, 1.0};
Point(15) = {0.007297, 0.745317, 0, 1.0};
Point(16) = {0.000106, 0.746724, 0, 1.0};
Point(17) = {-0.007008, 0.747907, 0, 1.0};
Point(18) = {-0.014008, 0.748837, 0, 1.0};
Point(19) = {-0.020855, 0.749495, 0, 1.0};
Point(20) = {-0.027510, 0.749879, 0, 1.0};
Point(21) = {-0.033942, 0.750000, 0, 1.0};
Point(22) = {-0.040097, 0.749892, 0, 1.0};
Point(23) = {-0.045910, 0.749577, 0, 1.0};
Point(24) = {-0.051321, 0.749073, 0, 1.0};
Point(25) = {-0.056274, 0.748399, 0, 1.0};
Point(26) = {-0.060718, 0.747572, 0, 1.0};
Point(27) = {-0.064610, 0.746614, 0, 1.0};
Point(28) = {-0.067913, 0.745550, 0, 1.0};
Point(29) = {-0.070598, 0.744410, 0, 1.0};
Point(30) = {-0.072642, 0.743232, 0, 1.0};
Point(31) = {-0.074026, 0.742065, 0, 1.0};
Point(32) = {-0.074715, 0.740999, 0, 1.0};
Point(33) = {-0.074533, 0.740055, 0, 1.0};
Point(34) = {-0.073444, 0.739120, 0, 1.0};
Point(35) = {-0.071580, 0.738162, 0, 1.0};
Point(36) = {-0.068955, 0.737229, 0, 1.0};
Point(37) = {-0.065590, 0.736339, 0, 1.0};
Point(38) = {-0.061513, 0.735502, 0, 1.0};
Point(39) = {-0.056760, 0.734730, 0, 1.0};
Point(40) = {-0.051374, 0.734025, 0, 1.0};
Point(41) = {-0.045407, 0.733386, 0, 1.0};
Point(42) = {-0.038925, 0.732818, 0, 1.0};
Point(43) = {-0.031996, 0.732320, 0, 1.0};
Point(44) = {-0.024699, 0.731903, 0, 1.0};
Point(45) = {-0.017091, 0.731591, 0, 1.0};
Point(46) = {-0.009211, 0.731362, 0, 1.0};
Point(47) = {-0.001142, 0.731169, 0, 1.0};
Point(48) = {0.007011, 0.730981, 0, 1.0};
Point(49) = {0.015138, 0.730781, 0, 1.0};
Point(50) = {0.023128, 0.730563, 0, 1.0};
Point(51) = {0.030874, 0.730317, 0, 1.0};
Point(52) = {0.038270, 0.730045, 0, 1.0};
Point(53) = {0.045215, 0.729747, 0, 1.0};
Point(54) = {0.051613, 0.729430, 0, 1.0};
Point(55) = {0.057373, 0.729104, 0, 1.0};
Point(56) = {0.062414, 0.728784, 0, 1.0};
Point(57) = {0.066669, 0.728491, 0, 1.0};
Point(58) = {0.070090, 0.728231, 0, 1.0};
Point(59) = {0.072615, 0.728002, 0, 1.0};
Point(60) = {0.074172, 0.727823, 0, 1.0};
Point(61) = {-0.074699, -0.727752, 0, 1.0};
Point(62) = {-0.074188, -0.727884, 0, 1.0};
Point(63) = {-0.072714, -0.728302, 0, 1.0};
Point(64) = {-0.070395, -0.729015, 0, 1.0};
Point(65) = {-0.067328, -0.729965, 0, 1.0};
Point(66) = {-0.063554, -0.731082, 0, 1.0};
Point(67) = {-0.059090, -0.732340, 0, 1.0};
Point(68) = {-0.053987, -0.733734, 0, 1.0};
Point(69) = {-0.048321, -0.735258, 0, 1.0};
Point(70) = {-0.042173, -0.736882, 0, 1.0};
Point(71) = {-0.035629, -0.738579, 0, 1.0};
Point(72) = {-0.028778, -0.740313, 0, 1.0};
Point(73) = {-0.021712, -0.742047, 0, 1.0};
Point(74) = {-0.014520, -0.743735, 0, 1.0};
Point(75) = {-0.007297, -0.745317, 0, 1.0};
Point(76) = {-0.000106, -0.746724, 0, 1.0};
Point(77) = {0.007008, -0.747907, 0, 1.0};
Point(78) = {0.014008, -0.748837, 0, 1.0};
Point(79) = {0.020855, -0.749495, 0, 1.0};
Point(80) = {0.027510, -0.749879, 0, 1.0};
Point(81) = {0.033942, -0.750000, 0, 1.0};
Point(82) = {0.040097, -0.749892, 0, 1.0};
Point(83) = {0.045910, -0.749577, 0, 1.0};
Point(84) = {0.051321, -0.749073, 0, 1.0};
Point(85) = {0.056274, -0.748399, 0, 1.0};
Point(86) = {0.060718, -0.747572, 0, 1.0};
Point(87) = {0.064610, -0.746614, 0, 1.0};
Point(88) = {0.067913, -0.745550, 0, 1.0};
Point(89) = {0.070598, -0.744410, 0, 1.0};
Point(90) = {0.072642, -0.743232, 0, 1.0};
Point(91) = {0.074026, -0.742065, 0, 1.0};
Point(92) = {0.074715, -0.740999, 0, 1.0};
Point(93) = {0.074533, -0.740055, 0, 1.0};
Point(94) = {0.073444, -0.739120, 0, 1.0};
Point(95) = {0.071580, -0.738162, 0, 1.0};
Point(96) = {0.068955, -0.737229, 0, 1.0};
Point(97) = {0.065590, -0.736339, 0, 1.0};
Point(98) = {0.061513, -0.735502, 0, 1.0};
Point(99) = {0.056760, -0.734730, 0, 1.0};
Point(100) = {0.051374, -0.734025, 0, 1.0};
Point(101) = {0.045407, -0.733386, 0, 1.0};
Point(102) = {0.038925, -0.732818, 0, 1.0};
Point(103) = {0.031996, -0.732320, 0, 1.0};
Point(104) = {0.024699, -0.731903, 0, 1.0};
Point(105) = {0.017091, -0.731591, 0, 1.0};
Point(106) = {0.009211, -0.731362, 0, 1.0};
Point(107) = {0.001142, -0.731169, 0, 1.0};
Point(108) = {-0.007011, -0.730981, 0, 1.0};
Point(109) = {-0.015138, -0.730781, 0, 1.0};
Point(110) = {-0.023128, -0.730563, 0, 1.0};
Point(111) = {-0.030874, -0.730317, 0, 1.0};
Point(112) = {-0.038270, -0.730045, 0, 1.0};
Point(113) = {-0.045215, -0.729747, 0, 1.0};
Point(114) = {-0.051613, -0.729430, 0, 1.0};
Point(115) = {-0.057373, -0.729104, 0, 1.0};
Point(116) = {-0.062414, -0.728784, 0, 1.0};
Point(117) = {-0.066669, -0.728491, 0, 1.0};
Point(118) = {-0.070090, -0.728231, 0, 1.0};
Point(119) = {-0.072615, -0.728002, 0, 1.0};
Point(120) = {-0.074172, -0.727823, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html