SetFactory("OpenCASCADE");

Point(1) = {0.074844, 0.742022, 0, 1.0};
Point(2) = {0.074460, 0.742055, 0, 1.0};
Point(3) = {0.073343, 0.742208, 0, 1.0};
Point(4) = {0.071585, 0.742531, 0, 1.0};
Point(5) = {0.069287, 0.743016, 0, 1.0};
Point(6) = {0.066524, 0.743618, 0, 1.0};
Point(7) = {0.063334, 0.744288, 0, 1.0};
Point(8) = {0.059737, 0.745020, 0, 1.0};
Point(9) = {0.055798, 0.745827, 0, 1.0};
Point(10) = {0.051604, 0.746692, 0, 1.0};
Point(11) = {0.047239, 0.747582, 0, 1.0};
Point(12) = {0.042790, 0.748448, 0, 1.0};
Point(13) = {0.038338, 0.749216, 0, 1.0};
Point(14) = {0.033927, 0.749752, 0, 1.0};
Point(15) = {0.029461, 0.750000, 0, 1.0};
Point(16) = {0.024929, 0.749996, 0, 1.0};
Point(17) = {0.020336, 0.749779, 0, 1.0};
Point(18) = {0.015730, 0.749387, 0, 1.0};
Point(19) = {0.011158, 0.748846, 0, 1.0};
Point(20) = {0.006672, 0.748173, 0, 1.0};
Point(21) = {0.002318, 0.747386, 0, 1.0};
Point(22) = {-0.001855, 0.746505, 0, 1.0};
Point(23) = {-0.005805, 0.745548, 0, 1.0};
Point(24) = {-0.009485, 0.744534, 0, 1.0};
Point(25) = {-0.012857, 0.743483, 0, 1.0};
Point(26) = {-0.015879, 0.742417, 0, 1.0};
Point(27) = {-0.018519, 0.741356, 0, 1.0};
Point(28) = {-0.020736, 0.740321, 0, 1.0};
Point(29) = {-0.022500, 0.739321, 0, 1.0};
Point(30) = {-0.023802, 0.738370, 0, 1.0};
Point(31) = {-0.024615, 0.737489, 0, 1.0};
Point(32) = {-0.024978, 0.736696, 0, 1.0};
Point(33) = {-0.024997, 0.736568, 0, 1.0};
Point(34) = {-0.024997, 0.736413, 0, 1.0};
Point(35) = {-0.024985, 0.736343, 0, 1.0};
Point(36) = {-0.024964, 0.736282, 0, 1.0};
Point(37) = {-0.024927, 0.736226, 0, 1.0};
Point(38) = {-0.024878, 0.736170, 0, 1.0};
Point(39) = {-0.024848, 0.736143, 0, 1.0};
Point(40) = {-0.024745, 0.736062, 0, 1.0};
Point(41) = {-0.024039, 0.735749, 0, 1.0};
Point(42) = {-0.022610, 0.735428, 0, 1.0};
Point(43) = {-0.020600, 0.735185, 0, 1.0};
Point(44) = {-0.018003, 0.734999, 0, 1.0};
Point(45) = {-0.014859, 0.734815, 0, 1.0};
Point(46) = {-0.011262, 0.734620, 0, 1.0};
Point(47) = {-0.007267, 0.734423, 0, 1.0};
Point(48) = {-0.002950, 0.734231, 0, 1.0};
Point(49) = {0.001633, 0.734058, 0, 1.0};
Point(50) = {0.006411, 0.733919, 0, 1.0};
Point(51) = {0.011327, 0.733830, 0, 1.0};
Point(52) = {0.016315, 0.733808, 0, 1.0};
Point(53) = {0.021316, 0.733873, 0, 1.0};
Point(54) = {0.026267, 0.734047, 0, 1.0};
Point(55) = {0.031109, 0.734363, 0, 1.0};
Point(56) = {0.035800, 0.734908, 0, 1.0};
Point(57) = {0.040442, 0.735698, 0, 1.0};
Point(58) = {0.045036, 0.736653, 0, 1.0};
Point(59) = {0.049583, 0.737695, 0, 1.0};
Point(60) = {0.054022, 0.738723, 0, 1.0};
Point(61) = {0.058271, 0.739668, 0, 1.0};
Point(62) = {0.062234, 0.740478, 0, 1.0};
Point(63) = {0.065816, 0.741120, 0, 1.0};
Point(64) = {0.068916, 0.741579, 0, 1.0};
Point(65) = {0.071443, 0.741863, 0, 1.0};
Point(66) = {0.073313, 0.741995, 0, 1.0};
Point(67) = {0.074459, 0.742027, 0, 1.0};
Point(68) = {-0.074844, -0.742022, 0, 1.0};
Point(69) = {-0.074460, -0.742055, 0, 1.0};
Point(70) = {-0.073343, -0.742208, 0, 1.0};
Point(71) = {-0.071585, -0.742531, 0, 1.0};
Point(72) = {-0.069287, -0.743016, 0, 1.0};
Point(73) = {-0.066524, -0.743618, 0, 1.0};
Point(74) = {-0.063334, -0.744288, 0, 1.0};
Point(75) = {-0.059737, -0.745020, 0, 1.0};
Point(76) = {-0.055798, -0.745827, 0, 1.0};
Point(77) = {-0.051604, -0.746692, 0, 1.0};
Point(78) = {-0.047239, -0.747582, 0, 1.0};
Point(79) = {-0.042790, -0.748448, 0, 1.0};
Point(80) = {-0.038338, -0.749216, 0, 1.0};
Point(81) = {-0.033927, -0.749752, 0, 1.0};
Point(82) = {-0.029461, -0.750000, 0, 1.0};
Point(83) = {-0.024929, -0.749996, 0, 1.0};
Point(84) = {-0.020336, -0.749779, 0, 1.0};
Point(85) = {-0.015730, -0.749387, 0, 1.0};
Point(86) = {-0.011158, -0.748846, 0, 1.0};
Point(87) = {-0.006672, -0.748173, 0, 1.0};
Point(88) = {-0.002318, -0.747386, 0, 1.0};
Point(89) = {0.001855, -0.746505, 0, 1.0};
Point(90) = {0.005805, -0.745548, 0, 1.0};
Point(91) = {0.009485, -0.744534, 0, 1.0};
Point(92) = {0.012857, -0.743483, 0, 1.0};
Point(93) = {0.015879, -0.742417, 0, 1.0};
Point(94) = {0.018519, -0.741356, 0, 1.0};
Point(95) = {0.020736, -0.740321, 0, 1.0};
Point(96) = {0.022500, -0.739321, 0, 1.0};
Point(97) = {0.023802, -0.738370, 0, 1.0};
Point(98) = {0.024615, -0.737489, 0, 1.0};
Point(99) = {0.024978, -0.736696, 0, 1.0};
Point(100) = {0.024997, -0.736568, 0, 1.0};
Point(101) = {0.024997, -0.736413, 0, 1.0};
Point(102) = {0.024985, -0.736343, 0, 1.0};
Point(103) = {0.024964, -0.736282, 0, 1.0};
Point(104) = {0.024927, -0.736226, 0, 1.0};
Point(105) = {0.024878, -0.736170, 0, 1.0};
Point(106) = {0.024848, -0.736143, 0, 1.0};
Point(107) = {0.024745, -0.736062, 0, 1.0};
Point(108) = {0.024039, -0.735749, 0, 1.0};
Point(109) = {0.022610, -0.735428, 0, 1.0};
Point(110) = {0.020600, -0.735185, 0, 1.0};
Point(111) = {0.018003, -0.734999, 0, 1.0};
Point(112) = {0.014859, -0.734815, 0, 1.0};
Point(113) = {0.011262, -0.734620, 0, 1.0};
Point(114) = {0.007267, -0.734423, 0, 1.0};
Point(115) = {0.002950, -0.734231, 0, 1.0};
Point(116) = {-0.001633, -0.734058, 0, 1.0};
Point(117) = {-0.006411, -0.733919, 0, 1.0};
Point(118) = {-0.011327, -0.733830, 0, 1.0};
Point(119) = {-0.016315, -0.733808, 0, 1.0};
Point(120) = {-0.021316, -0.733873, 0, 1.0};
Point(121) = {-0.026267, -0.734047, 0, 1.0};
Point(122) = {-0.031109, -0.734363, 0, 1.0};
Point(123) = {-0.035800, -0.734908, 0, 1.0};
Point(124) = {-0.040442, -0.735698, 0, 1.0};
Point(125) = {-0.045036, -0.736653, 0, 1.0};
Point(126) = {-0.049583, -0.737695, 0, 1.0};
Point(127) = {-0.054022, -0.738723, 0, 1.0};
Point(128) = {-0.058271, -0.739668, 0, 1.0};
Point(129) = {-0.062234, -0.740478, 0, 1.0};
Point(130) = {-0.065816, -0.741120, 0, 1.0};
Point(131) = {-0.068916, -0.741579, 0, 1.0};
Point(132) = {-0.071443, -0.741863, 0, 1.0};
Point(133) = {-0.073313, -0.741995, 0, 1.0};
Point(134) = {-0.074459, -0.742027, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html