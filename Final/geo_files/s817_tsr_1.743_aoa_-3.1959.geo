SetFactory("OpenCASCADE");

Point(1) = {0.112319, 0.738033, 0, 1.0};
Point(2) = {0.111743, 0.738082, 0, 1.0};
Point(3) = {0.110068, 0.738312, 0, 1.0};
Point(4) = {0.107431, 0.738797, 0, 1.0};
Point(5) = {0.103983, 0.739523, 0, 1.0};
Point(6) = {0.099839, 0.740426, 0, 1.0};
Point(7) = {0.095055, 0.741432, 0, 1.0};
Point(8) = {0.089658, 0.742530, 0, 1.0};
Point(9) = {0.083750, 0.743740, 0, 1.0};
Point(10) = {0.077458, 0.745038, 0, 1.0};
Point(11) = {0.070912, 0.746373, 0, 1.0};
Point(12) = {0.064239, 0.747672, 0, 1.0};
Point(13) = {0.057560, 0.748824, 0, 1.0};
Point(14) = {0.050944, 0.749629, 0, 1.0};
Point(15) = {0.044245, 0.750000, 0, 1.0};
Point(16) = {0.037446, 0.749994, 0, 1.0};
Point(17) = {0.030558, 0.749668, 0, 1.0};
Point(18) = {0.023648, 0.749081, 0, 1.0};
Point(19) = {0.016791, 0.748269, 0, 1.0};
Point(20) = {0.010062, 0.747259, 0, 1.0};
Point(21) = {0.003531, 0.746079, 0, 1.0};
Point(22) = {-0.002729, 0.744757, 0, 1.0};
Point(23) = {-0.008653, 0.743322, 0, 1.0};
Point(24) = {-0.014173, 0.741801, 0, 1.0};
Point(25) = {-0.019231, 0.740225, 0, 1.0};
Point(26) = {-0.023765, 0.738626, 0, 1.0};
Point(27) = {-0.027724, 0.737034, 0, 1.0};
Point(28) = {-0.031050, 0.735482, 0, 1.0};
Point(29) = {-0.033696, 0.733981, 0, 1.0};
Point(30) = {-0.035648, 0.732556, 0, 1.0};
Point(31) = {-0.036868, 0.731234, 0, 1.0};
Point(32) = {-0.037413, 0.730044, 0, 1.0};
Point(33) = {-0.037441, 0.729853, 0, 1.0};
Point(34) = {-0.037442, 0.729619, 0, 1.0};
Point(35) = {-0.037424, 0.729515, 0, 1.0};
Point(36) = {-0.037392, 0.729423, 0, 1.0};
Point(37) = {-0.037337, 0.729339, 0, 1.0};
Point(38) = {-0.037262, 0.729256, 0, 1.0};
Point(39) = {-0.037218, 0.729214, 0, 1.0};
Point(40) = {-0.037063, 0.729094, 0, 1.0};
Point(41) = {-0.036004, 0.728623, 0, 1.0};
Point(42) = {-0.033861, 0.728143, 0, 1.0};
Point(43) = {-0.030847, 0.727777, 0, 1.0};
Point(44) = {-0.026950, 0.727499, 0, 1.0};
Point(45) = {-0.022235, 0.727223, 0, 1.0};
Point(46) = {-0.016839, 0.726931, 0, 1.0};
Point(47) = {-0.010846, 0.726634, 0, 1.0};
Point(48) = {-0.004371, 0.726346, 0, 1.0};
Point(49) = {0.002503, 0.726087, 0, 1.0};
Point(50) = {0.009670, 0.725879, 0, 1.0};
Point(51) = {0.017045, 0.725746, 0, 1.0};
Point(52) = {0.024526, 0.725713, 0, 1.0};
Point(53) = {0.032028, 0.725810, 0, 1.0};
Point(54) = {0.039454, 0.726071, 0, 1.0};
Point(55) = {0.046718, 0.726545, 0, 1.0};
Point(56) = {0.053754, 0.727362, 0, 1.0};
Point(57) = {0.060717, 0.728547, 0, 1.0};
Point(58) = {0.067607, 0.729979, 0, 1.0};
Point(59) = {0.074427, 0.731542, 0, 1.0};
Point(60) = {0.081087, 0.733085, 0, 1.0};
Point(61) = {0.087459, 0.734503, 0, 1.0};
Point(62) = {0.093405, 0.735717, 0, 1.0};
Point(63) = {0.098776, 0.736680, 0, 1.0};
Point(64) = {0.103427, 0.737369, 0, 1.0};
Point(65) = {0.107217, 0.737794, 0, 1.0};
Point(66) = {0.110022, 0.737993, 0, 1.0};
Point(67) = {0.111741, 0.738041, 0, 1.0};
Point(68) = {-0.112319, -0.738033, 0, 1.0};
Point(69) = {-0.111743, -0.738082, 0, 1.0};
Point(70) = {-0.110068, -0.738312, 0, 1.0};
Point(71) = {-0.107431, -0.738797, 0, 1.0};
Point(72) = {-0.103983, -0.739523, 0, 1.0};
Point(73) = {-0.099839, -0.740426, 0, 1.0};
Point(74) = {-0.095055, -0.741432, 0, 1.0};
Point(75) = {-0.089658, -0.742530, 0, 1.0};
Point(76) = {-0.083750, -0.743740, 0, 1.0};
Point(77) = {-0.077458, -0.745038, 0, 1.0};
Point(78) = {-0.070912, -0.746373, 0, 1.0};
Point(79) = {-0.064239, -0.747672, 0, 1.0};
Point(80) = {-0.057560, -0.748824, 0, 1.0};
Point(81) = {-0.050944, -0.749629, 0, 1.0};
Point(82) = {-0.044245, -0.750000, 0, 1.0};
Point(83) = {-0.037446, -0.749994, 0, 1.0};
Point(84) = {-0.030558, -0.749668, 0, 1.0};
Point(85) = {-0.023648, -0.749081, 0, 1.0};
Point(86) = {-0.016791, -0.748269, 0, 1.0};
Point(87) = {-0.010062, -0.747259, 0, 1.0};
Point(88) = {-0.003531, -0.746079, 0, 1.0};
Point(89) = {0.002729, -0.744757, 0, 1.0};
Point(90) = {0.008653, -0.743322, 0, 1.0};
Point(91) = {0.014173, -0.741801, 0, 1.0};
Point(92) = {0.019231, -0.740225, 0, 1.0};
Point(93) = {0.023765, -0.738626, 0, 1.0};
Point(94) = {0.027724, -0.737034, 0, 1.0};
Point(95) = {0.031050, -0.735482, 0, 1.0};
Point(96) = {0.033696, -0.733981, 0, 1.0};
Point(97) = {0.035648, -0.732556, 0, 1.0};
Point(98) = {0.036868, -0.731234, 0, 1.0};
Point(99) = {0.037413, -0.730044, 0, 1.0};
Point(100) = {0.037441, -0.729853, 0, 1.0};
Point(101) = {0.037442, -0.729619, 0, 1.0};
Point(102) = {0.037424, -0.729515, 0, 1.0};
Point(103) = {0.037392, -0.729423, 0, 1.0};
Point(104) = {0.037337, -0.729339, 0, 1.0};
Point(105) = {0.037262, -0.729256, 0, 1.0};
Point(106) = {0.037218, -0.729214, 0, 1.0};
Point(107) = {0.037063, -0.729094, 0, 1.0};
Point(108) = {0.036004, -0.728623, 0, 1.0};
Point(109) = {0.033861, -0.728143, 0, 1.0};
Point(110) = {0.030847, -0.727777, 0, 1.0};
Point(111) = {0.026950, -0.727499, 0, 1.0};
Point(112) = {0.022235, -0.727223, 0, 1.0};
Point(113) = {0.016839, -0.726931, 0, 1.0};
Point(114) = {0.010846, -0.726634, 0, 1.0};
Point(115) = {0.004371, -0.726346, 0, 1.0};
Point(116) = {-0.002503, -0.726087, 0, 1.0};
Point(117) = {-0.009670, -0.725879, 0, 1.0};
Point(118) = {-0.017045, -0.725746, 0, 1.0};
Point(119) = {-0.024526, -0.725713, 0, 1.0};
Point(120) = {-0.032028, -0.725810, 0, 1.0};
Point(121) = {-0.039454, -0.726071, 0, 1.0};
Point(122) = {-0.046718, -0.726545, 0, 1.0};
Point(123) = {-0.053754, -0.727362, 0, 1.0};
Point(124) = {-0.060717, -0.728547, 0, 1.0};
Point(125) = {-0.067607, -0.729979, 0, 1.0};
Point(126) = {-0.074427, -0.731542, 0, 1.0};
Point(127) = {-0.081087, -0.733085, 0, 1.0};
Point(128) = {-0.087459, -0.734503, 0, 1.0};
Point(129) = {-0.093405, -0.735717, 0, 1.0};
Point(130) = {-0.098776, -0.736680, 0, 1.0};
Point(131) = {-0.103427, -0.737369, 0, 1.0};
Point(132) = {-0.107217, -0.737794, 0, 1.0};
Point(133) = {-0.110022, -0.737993, 0, 1.0};
Point(134) = {-0.111741, -0.738041, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html