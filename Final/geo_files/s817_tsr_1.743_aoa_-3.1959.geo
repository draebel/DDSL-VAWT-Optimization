SetFactory("OpenCASCADE");

Point(1) = {0.149689, 0.734044, 0, 1.0};
Point(2) = {0.148920, 0.734109, 0, 1.0};
Point(3) = {0.146687, 0.734416, 0, 1.0};
Point(4) = {0.143170, 0.735062, 0, 1.0};
Point(5) = {0.138574, 0.736031, 0, 1.0};
Point(6) = {0.133048, 0.737235, 0, 1.0};
Point(7) = {0.126669, 0.738576, 0, 1.0};
Point(8) = {0.119473, 0.740040, 0, 1.0};
Point(9) = {0.111596, 0.741654, 0, 1.0};
Point(10) = {0.103207, 0.743384, 0, 1.0};
Point(11) = {0.094479, 0.745164, 0, 1.0};
Point(12) = {0.085581, 0.746896, 0, 1.0};
Point(13) = {0.076675, 0.748432, 0, 1.0};
Point(14) = {0.067854, 0.749505, 0, 1.0};
Point(15) = {0.058923, 0.750000, 0, 1.0};
Point(16) = {0.049857, 0.749992, 0, 1.0};
Point(17) = {0.040672, 0.749557, 0, 1.0};
Point(18) = {0.031459, 0.748775, 0, 1.0};
Point(19) = {0.022316, 0.747691, 0, 1.0};
Point(20) = {0.013344, 0.746345, 0, 1.0};
Point(21) = {0.004636, 0.744772, 0, 1.0};
Point(22) = {-0.003710, 0.743010, 0, 1.0};
Point(23) = {-0.011609, 0.741095, 0, 1.0};
Point(24) = {-0.018969, 0.739068, 0, 1.0};
Point(25) = {-0.025713, 0.736967, 0, 1.0};
Point(26) = {-0.031758, 0.734835, 0, 1.0};
Point(27) = {-0.037038, 0.732712, 0, 1.0};
Point(28) = {-0.041472, 0.730642, 0, 1.0};
Point(29) = {-0.045000, 0.728642, 0, 1.0};
Point(30) = {-0.047603, 0.726741, 0, 1.0};
Point(31) = {-0.049229, 0.724978, 0, 1.0};
Point(32) = {-0.049956, 0.723392, 0, 1.0};
Point(33) = {-0.049994, 0.723137, 0, 1.0};
Point(34) = {-0.049994, 0.722826, 0, 1.0};
Point(35) = {-0.049971, 0.722687, 0, 1.0};
Point(36) = {-0.049928, 0.722563, 0, 1.0};
Point(37) = {-0.049855, 0.722451, 0, 1.0};
Point(38) = {-0.049755, 0.722341, 0, 1.0};
Point(39) = {-0.049696, 0.722286, 0, 1.0};
Point(40) = {-0.049490, 0.722125, 0, 1.0};
Point(41) = {-0.048078, 0.721497, 0, 1.0};
Point(42) = {-0.045220, 0.720857, 0, 1.0};
Point(43) = {-0.041201, 0.720369, 0, 1.0};
Point(44) = {-0.036006, 0.719998, 0, 1.0};
Point(45) = {-0.029718, 0.719630, 0, 1.0};
Point(46) = {-0.022524, 0.719241, 0, 1.0};
Point(47) = {-0.014534, 0.718845, 0, 1.0};
Point(48) = {-0.005900, 0.718461, 0, 1.0};
Point(49) = {0.003266, 0.718116, 0, 1.0};
Point(50) = {0.012822, 0.717838, 0, 1.0};
Point(51) = {0.022655, 0.717661, 0, 1.0};
Point(52) = {0.032630, 0.717617, 0, 1.0};
Point(53) = {0.042632, 0.717746, 0, 1.0};
Point(54) = {0.052534, 0.718094, 0, 1.0};
Point(55) = {0.062219, 0.718727, 0, 1.0};
Point(56) = {0.071601, 0.719816, 0, 1.0};
Point(57) = {0.080885, 0.721396, 0, 1.0};
Point(58) = {0.090072, 0.723305, 0, 1.0};
Point(59) = {0.099165, 0.725390, 0, 1.0};
Point(60) = {0.108045, 0.727447, 0, 1.0};
Point(61) = {0.116541, 0.729337, 0, 1.0};
Point(62) = {0.124469, 0.730956, 0, 1.0};
Point(63) = {0.131631, 0.732240, 0, 1.0};
Point(64) = {0.137832, 0.733158, 0, 1.0};
Point(65) = {0.142886, 0.733725, 0, 1.0};
Point(66) = {0.146625, 0.733991, 0, 1.0};
Point(67) = {0.148918, 0.734054, 0, 1.0};
Point(68) = {-0.149689, -0.734044, 0, 1.0};
Point(69) = {-0.148920, -0.734109, 0, 1.0};
Point(70) = {-0.146687, -0.734416, 0, 1.0};
Point(71) = {-0.143170, -0.735062, 0, 1.0};
Point(72) = {-0.138574, -0.736031, 0, 1.0};
Point(73) = {-0.133048, -0.737235, 0, 1.0};
Point(74) = {-0.126669, -0.738576, 0, 1.0};
Point(75) = {-0.119473, -0.740040, 0, 1.0};
Point(76) = {-0.111596, -0.741654, 0, 1.0};
Point(77) = {-0.103207, -0.743384, 0, 1.0};
Point(78) = {-0.094479, -0.745164, 0, 1.0};
Point(79) = {-0.085581, -0.746896, 0, 1.0};
Point(80) = {-0.076675, -0.748432, 0, 1.0};
Point(81) = {-0.067854, -0.749505, 0, 1.0};
Point(82) = {-0.058923, -0.750000, 0, 1.0};
Point(83) = {-0.049857, -0.749992, 0, 1.0};
Point(84) = {-0.040672, -0.749557, 0, 1.0};
Point(85) = {-0.031459, -0.748775, 0, 1.0};
Point(86) = {-0.022316, -0.747691, 0, 1.0};
Point(87) = {-0.013344, -0.746345, 0, 1.0};
Point(88) = {-0.004636, -0.744772, 0, 1.0};
Point(89) = {0.003710, -0.743010, 0, 1.0};
Point(90) = {0.011609, -0.741095, 0, 1.0};
Point(91) = {0.018969, -0.739068, 0, 1.0};
Point(92) = {0.025713, -0.736967, 0, 1.0};
Point(93) = {0.031758, -0.734835, 0, 1.0};
Point(94) = {0.037038, -0.732712, 0, 1.0};
Point(95) = {0.041472, -0.730642, 0, 1.0};
Point(96) = {0.045000, -0.728642, 0, 1.0};
Point(97) = {0.047603, -0.726741, 0, 1.0};
Point(98) = {0.049229, -0.724978, 0, 1.0};
Point(99) = {0.049956, -0.723392, 0, 1.0};
Point(100) = {0.049994, -0.723137, 0, 1.0};
Point(101) = {0.049994, -0.722826, 0, 1.0};
Point(102) = {0.049971, -0.722687, 0, 1.0};
Point(103) = {0.049928, -0.722563, 0, 1.0};
Point(104) = {0.049855, -0.722451, 0, 1.0};
Point(105) = {0.049755, -0.722341, 0, 1.0};
Point(106) = {0.049696, -0.722286, 0, 1.0};
Point(107) = {0.049490, -0.722125, 0, 1.0};
Point(108) = {0.048078, -0.721497, 0, 1.0};
Point(109) = {0.045220, -0.720857, 0, 1.0};
Point(110) = {0.041201, -0.720369, 0, 1.0};
Point(111) = {0.036006, -0.719998, 0, 1.0};
Point(112) = {0.029718, -0.719630, 0, 1.0};
Point(113) = {0.022524, -0.719241, 0, 1.0};
Point(114) = {0.014534, -0.718845, 0, 1.0};
Point(115) = {0.005900, -0.718461, 0, 1.0};
Point(116) = {-0.003266, -0.718116, 0, 1.0};
Point(117) = {-0.012822, -0.717838, 0, 1.0};
Point(118) = {-0.022655, -0.717661, 0, 1.0};
Point(119) = {-0.032630, -0.717617, 0, 1.0};
Point(120) = {-0.042632, -0.717746, 0, 1.0};
Point(121) = {-0.052534, -0.718094, 0, 1.0};
Point(122) = {-0.062219, -0.718727, 0, 1.0};
Point(123) = {-0.071601, -0.719816, 0, 1.0};
Point(124) = {-0.080885, -0.721396, 0, 1.0};
Point(125) = {-0.090072, -0.723305, 0, 1.0};
Point(126) = {-0.099165, -0.725390, 0, 1.0};
Point(127) = {-0.108045, -0.727447, 0, 1.0};
Point(128) = {-0.116541, -0.729337, 0, 1.0};
Point(129) = {-0.124469, -0.730956, 0, 1.0};
Point(130) = {-0.131631, -0.732240, 0, 1.0};
Point(131) = {-0.137832, -0.733158, 0, 1.0};
Point(132) = {-0.142886, -0.733725, 0, 1.0};
Point(133) = {-0.146625, -0.733991, 0, 1.0};
Point(134) = {-0.148918, -0.734054, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html