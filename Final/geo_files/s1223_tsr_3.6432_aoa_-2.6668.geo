SetFactory("OpenCASCADE");

Point(1) = {0.149783, 0.729204, 0, 1.0};
Point(2) = {0.149448, 0.729441, 0, 1.0};
Point(3) = {0.148573, 0.730137, 0, 1.0};
Point(4) = {0.147339, 0.731167, 0, 1.0};
Point(5) = {0.145784, 0.732314, 0, 1.0};
Point(6) = {0.143802, 0.733431, 0, 1.0};
Point(7) = {0.141295, 0.734521, 0, 1.0};
Point(8) = {0.138250, 0.735627, 0, 1.0};
Point(9) = {0.134694, 0.736743, 0, 1.0};
Point(10) = {0.130642, 0.737859, 0, 1.0};
Point(11) = {0.126116, 0.738968, 0, 1.0};
Point(12) = {0.121141, 0.740062, 0, 1.0};
Point(13) = {0.115746, 0.741132, 0, 1.0};
Point(14) = {0.109961, 0.742170, 0, 1.0};
Point(15) = {0.103822, 0.743169, 0, 1.0};
Point(16) = {0.097364, 0.744124, 0, 1.0};
Point(17) = {0.090629, 0.745023, 0, 1.0};
Point(18) = {0.083657, 0.745864, 0, 1.0};
Point(19) = {0.076489, 0.746637, 0, 1.0};
Point(20) = {0.069168, 0.747343, 0, 1.0};
Point(21) = {0.061745, 0.747979, 0, 1.0};
Point(22) = {0.054268, 0.748543, 0, 1.0};
Point(23) = {0.046799, 0.749040, 0, 1.0};
Point(24) = {0.039402, 0.749457, 0, 1.0};
Point(25) = {0.032141, 0.749775, 0, 1.0};
Point(26) = {0.025068, 0.749966, 0, 1.0};
Point(27) = {0.018227, 0.750000, 0, 1.0};
Point(28) = {0.011649, 0.749852, 0, 1.0};
Point(29) = {0.005376, 0.749518, 0, 1.0};
Point(30) = {-0.000557, 0.748923, 0, 1.0};
Point(31) = {-0.006180, 0.748042, 0, 1.0};
Point(32) = {-0.011523, 0.746906, 0, 1.0};
Point(33) = {-0.016585, 0.745533, 0, 1.0};
Point(34) = {-0.021363, 0.743967, 0, 1.0};
Point(35) = {-0.025831, 0.742244, 0, 1.0};
Point(36) = {-0.029968, 0.740393, 0, 1.0};
Point(37) = {-0.033755, 0.738433, 0, 1.0};
Point(38) = {-0.037176, 0.736393, 0, 1.0};
Point(39) = {-0.040213, 0.734300, 0, 1.0};
Point(40) = {-0.042854, 0.732181, 0, 1.0};
Point(41) = {-0.045080, 0.730071, 0, 1.0};
Point(42) = {-0.046862, 0.727976, 0, 1.0};
Point(43) = {-0.048221, 0.725896, 0, 1.0};
Point(44) = {-0.049194, 0.723879, 0, 1.0};
Point(45) = {-0.049786, 0.721977, 0, 1.0};
Point(46) = {-0.050007, 0.720255, 0, 1.0};
Point(47) = {-0.049860, 0.718782, 0, 1.0};
Point(48) = {-0.049368, 0.717686, 0, 1.0};
Point(49) = {-0.048291, 0.717121, 0, 1.0};
Point(50) = {-0.046423, 0.716962, 0, 1.0};
Point(51) = {-0.043847, 0.717014, 0, 1.0};
Point(52) = {-0.040613, 0.717269, 0, 1.0};
Point(53) = {-0.036762, 0.717705, 0, 1.0};
Point(54) = {-0.032333, 0.718315, 0, 1.0};
Point(55) = {-0.027374, 0.719101, 0, 1.0};
Point(56) = {-0.021938, 0.720079, 0, 1.0};
Point(57) = {-0.016018, 0.721332, 0, 1.0};
Point(58) = {-0.009538, 0.722855, 0, 1.0};
Point(59) = {-0.002485, 0.724541, 0, 1.0};
Point(60) = {0.005107, 0.726326, 0, 1.0};
Point(61) = {0.013184, 0.728152, 0, 1.0};
Point(62) = {0.021697, 0.729962, 0, 1.0};
Point(63) = {0.030576, 0.731703, 0, 1.0};
Point(64) = {0.039750, 0.733325, 0, 1.0};
Point(65) = {0.049135, 0.734786, 0, 1.0};
Point(66) = {0.058645, 0.736039, 0, 1.0};
Point(67) = {0.068186, 0.737056, 0, 1.0};
Point(68) = {0.077657, 0.737810, 0, 1.0};
Point(69) = {0.086957, 0.738279, 0, 1.0};
Point(70) = {0.095983, 0.738455, 0, 1.0};
Point(71) = {0.104630, 0.738337, 0, 1.0};
Point(72) = {0.112795, 0.737931, 0, 1.0};
Point(73) = {0.120377, 0.737257, 0, 1.0};
Point(74) = {0.127283, 0.736341, 0, 1.0};
Point(75) = {0.133418, 0.735224, 0, 1.0};
Point(76) = {0.138697, 0.733942, 0, 1.0};
Point(77) = {0.143007, 0.732537, 0, 1.0};
Point(78) = {0.146199, 0.731160, 0, 1.0};
Point(79) = {0.148277, 0.730071, 0, 1.0};
Point(80) = {0.149423, 0.729418, 0, 1.0};
Point(81) = {-0.149783, -0.729204, 0, 1.0};
Point(82) = {-0.149448, -0.729441, 0, 1.0};
Point(83) = {-0.148573, -0.730137, 0, 1.0};
Point(84) = {-0.147339, -0.731167, 0, 1.0};
Point(85) = {-0.145784, -0.732314, 0, 1.0};
Point(86) = {-0.143802, -0.733431, 0, 1.0};
Point(87) = {-0.141295, -0.734521, 0, 1.0};
Point(88) = {-0.138250, -0.735627, 0, 1.0};
Point(89) = {-0.134694, -0.736743, 0, 1.0};
Point(90) = {-0.130642, -0.737859, 0, 1.0};
Point(91) = {-0.126116, -0.738968, 0, 1.0};
Point(92) = {-0.121141, -0.740062, 0, 1.0};
Point(93) = {-0.115746, -0.741132, 0, 1.0};
Point(94) = {-0.109961, -0.742170, 0, 1.0};
Point(95) = {-0.103822, -0.743169, 0, 1.0};
Point(96) = {-0.097364, -0.744124, 0, 1.0};
Point(97) = {-0.090629, -0.745023, 0, 1.0};
Point(98) = {-0.083657, -0.745864, 0, 1.0};
Point(99) = {-0.076489, -0.746637, 0, 1.0};
Point(100) = {-0.069168, -0.747343, 0, 1.0};
Point(101) = {-0.061745, -0.747979, 0, 1.0};
Point(102) = {-0.054268, -0.748543, 0, 1.0};
Point(103) = {-0.046799, -0.749040, 0, 1.0};
Point(104) = {-0.039402, -0.749457, 0, 1.0};
Point(105) = {-0.032141, -0.749775, 0, 1.0};
Point(106) = {-0.025068, -0.749966, 0, 1.0};
Point(107) = {-0.018227, -0.750000, 0, 1.0};
Point(108) = {-0.011649, -0.749852, 0, 1.0};
Point(109) = {-0.005376, -0.749518, 0, 1.0};
Point(110) = {0.000557, -0.748923, 0, 1.0};
Point(111) = {0.006180, -0.748042, 0, 1.0};
Point(112) = {0.011523, -0.746906, 0, 1.0};
Point(113) = {0.016585, -0.745533, 0, 1.0};
Point(114) = {0.021363, -0.743967, 0, 1.0};
Point(115) = {0.025831, -0.742244, 0, 1.0};
Point(116) = {0.029968, -0.740393, 0, 1.0};
Point(117) = {0.033755, -0.738433, 0, 1.0};
Point(118) = {0.037176, -0.736393, 0, 1.0};
Point(119) = {0.040213, -0.734300, 0, 1.0};
Point(120) = {0.042854, -0.732181, 0, 1.0};
Point(121) = {0.045080, -0.730071, 0, 1.0};
Point(122) = {0.046862, -0.727976, 0, 1.0};
Point(123) = {0.048221, -0.725896, 0, 1.0};
Point(124) = {0.049194, -0.723879, 0, 1.0};
Point(125) = {0.049786, -0.721977, 0, 1.0};
Point(126) = {0.050007, -0.720255, 0, 1.0};
Point(127) = {0.049860, -0.718782, 0, 1.0};
Point(128) = {0.049368, -0.717686, 0, 1.0};
Point(129) = {0.048291, -0.717121, 0, 1.0};
Point(130) = {0.046423, -0.716962, 0, 1.0};
Point(131) = {0.043847, -0.717014, 0, 1.0};
Point(132) = {0.040613, -0.717269, 0, 1.0};
Point(133) = {0.036762, -0.717705, 0, 1.0};
Point(134) = {0.032333, -0.718315, 0, 1.0};
Point(135) = {0.027374, -0.719101, 0, 1.0};
Point(136) = {0.021938, -0.720079, 0, 1.0};
Point(137) = {0.016018, -0.721332, 0, 1.0};
Point(138) = {0.009538, -0.722855, 0, 1.0};
Point(139) = {0.002485, -0.724541, 0, 1.0};
Point(140) = {-0.005107, -0.726326, 0, 1.0};
Point(141) = {-0.013184, -0.728152, 0, 1.0};
Point(142) = {-0.021697, -0.729962, 0, 1.0};
Point(143) = {-0.030576, -0.731703, 0, 1.0};
Point(144) = {-0.039750, -0.733325, 0, 1.0};
Point(145) = {-0.049135, -0.734786, 0, 1.0};
Point(146) = {-0.058645, -0.736039, 0, 1.0};
Point(147) = {-0.068186, -0.737056, 0, 1.0};
Point(148) = {-0.077657, -0.737810, 0, 1.0};
Point(149) = {-0.086957, -0.738279, 0, 1.0};
Point(150) = {-0.095983, -0.738455, 0, 1.0};
Point(151) = {-0.104630, -0.738337, 0, 1.0};
Point(152) = {-0.112795, -0.737931, 0, 1.0};
Point(153) = {-0.120377, -0.737257, 0, 1.0};
Point(154) = {-0.127283, -0.736341, 0, 1.0};
Point(155) = {-0.133418, -0.735224, 0, 1.0};
Point(156) = {-0.138697, -0.733942, 0, 1.0};
Point(157) = {-0.143007, -0.732537, 0, 1.0};
Point(158) = {-0.146199, -0.731160, 0, 1.0};
Point(159) = {-0.148277, -0.730071, 0, 1.0};
Point(160) = {-0.149423, -0.729418, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:29};
Spline(2) = {29:59};
Spline(3) = {59:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:109};
Spline(6) = {109:139};
Spline(7) = {139:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 46 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html