SetFactory("OpenCASCADE");

Point(1) = {0.074892, 0.739602, 0, 1.0};
Point(2) = {0.074724, 0.739721, 0, 1.0};
Point(3) = {0.074286, 0.740069, 0, 1.0};
Point(4) = {0.073670, 0.740583, 0, 1.0};
Point(5) = {0.072892, 0.741157, 0, 1.0};
Point(6) = {0.071901, 0.741715, 0, 1.0};
Point(7) = {0.070647, 0.742261, 0, 1.0};
Point(8) = {0.069125, 0.742813, 0, 1.0};
Point(9) = {0.067347, 0.743371, 0, 1.0};
Point(10) = {0.065321, 0.743930, 0, 1.0};
Point(11) = {0.063058, 0.744484, 0, 1.0};
Point(12) = {0.060571, 0.745031, 0, 1.0};
Point(13) = {0.057873, 0.745566, 0, 1.0};
Point(14) = {0.054981, 0.746085, 0, 1.0};
Point(15) = {0.051911, 0.746585, 0, 1.0};
Point(16) = {0.048682, 0.747062, 0, 1.0};
Point(17) = {0.045315, 0.747512, 0, 1.0};
Point(18) = {0.041828, 0.747932, 0, 1.0};
Point(19) = {0.038244, 0.748319, 0, 1.0};
Point(20) = {0.034584, 0.748672, 0, 1.0};
Point(21) = {0.030872, 0.748989, 0, 1.0};
Point(22) = {0.027134, 0.749272, 0, 1.0};
Point(23) = {0.023399, 0.749520, 0, 1.0};
Point(24) = {0.019701, 0.749728, 0, 1.0};
Point(25) = {0.016070, 0.749888, 0, 1.0};
Point(26) = {0.012534, 0.749983, 0, 1.0};
Point(27) = {0.009114, 0.750000, 0, 1.0};
Point(28) = {0.005825, 0.749926, 0, 1.0};
Point(29) = {0.002688, 0.749759, 0, 1.0};
Point(30) = {-0.000278, 0.749461, 0, 1.0};
Point(31) = {-0.003090, 0.749021, 0, 1.0};
Point(32) = {-0.005761, 0.748453, 0, 1.0};
Point(33) = {-0.008292, 0.747767, 0, 1.0};
Point(34) = {-0.010681, 0.746984, 0, 1.0};
Point(35) = {-0.012916, 0.746122, 0, 1.0};
Point(36) = {-0.014984, 0.745197, 0, 1.0};
Point(37) = {-0.016877, 0.744216, 0, 1.0};
Point(38) = {-0.018588, 0.743197, 0, 1.0};
Point(39) = {-0.020107, 0.742150, 0, 1.0};
Point(40) = {-0.021427, 0.741090, 0, 1.0};
Point(41) = {-0.022540, 0.740035, 0, 1.0};
Point(42) = {-0.023431, 0.738988, 0, 1.0};
Point(43) = {-0.024111, 0.737948, 0, 1.0};
Point(44) = {-0.024597, 0.736939, 0, 1.0};
Point(45) = {-0.024893, 0.735989, 0, 1.0};
Point(46) = {-0.025003, 0.735128, 0, 1.0};
Point(47) = {-0.024930, 0.734391, 0, 1.0};
Point(48) = {-0.024684, 0.733843, 0, 1.0};
Point(49) = {-0.024145, 0.733561, 0, 1.0};
Point(50) = {-0.023212, 0.733481, 0, 1.0};
Point(51) = {-0.021924, 0.733507, 0, 1.0};
Point(52) = {-0.020307, 0.733634, 0, 1.0};
Point(53) = {-0.018381, 0.733852, 0, 1.0};
Point(54) = {-0.016167, 0.734158, 0, 1.0};
Point(55) = {-0.013687, 0.734550, 0, 1.0};
Point(56) = {-0.010969, 0.735039, 0, 1.0};
Point(57) = {-0.008009, 0.735666, 0, 1.0};
Point(58) = {-0.004769, 0.736427, 0, 1.0};
Point(59) = {-0.001242, 0.737270, 0, 1.0};
Point(60) = {0.002553, 0.738163, 0, 1.0};
Point(61) = {0.006592, 0.739076, 0, 1.0};
Point(62) = {0.010849, 0.739981, 0, 1.0};
Point(63) = {0.015288, 0.740851, 0, 1.0};
Point(64) = {0.019875, 0.741663, 0, 1.0};
Point(65) = {0.024567, 0.742393, 0, 1.0};
Point(66) = {0.029322, 0.743020, 0, 1.0};
Point(67) = {0.034093, 0.743528, 0, 1.0};
Point(68) = {0.038828, 0.743905, 0, 1.0};
Point(69) = {0.043479, 0.744140, 0, 1.0};
Point(70) = {0.047991, 0.744228, 0, 1.0};
Point(71) = {0.052315, 0.744169, 0, 1.0};
Point(72) = {0.056398, 0.743965, 0, 1.0};
Point(73) = {0.060188, 0.743628, 0, 1.0};
Point(74) = {0.063641, 0.743171, 0, 1.0};
Point(75) = {0.066709, 0.742612, 0, 1.0};
Point(76) = {0.069348, 0.741971, 0, 1.0};
Point(77) = {0.071504, 0.741268, 0, 1.0};
Point(78) = {0.073099, 0.740580, 0, 1.0};
Point(79) = {0.074139, 0.740036, 0, 1.0};
Point(80) = {0.074712, 0.739709, 0, 1.0};
Point(81) = {-0.074892, -0.739602, 0, 1.0};
Point(82) = {-0.074724, -0.739721, 0, 1.0};
Point(83) = {-0.074286, -0.740069, 0, 1.0};
Point(84) = {-0.073670, -0.740583, 0, 1.0};
Point(85) = {-0.072892, -0.741157, 0, 1.0};
Point(86) = {-0.071901, -0.741715, 0, 1.0};
Point(87) = {-0.070647, -0.742261, 0, 1.0};
Point(88) = {-0.069125, -0.742813, 0, 1.0};
Point(89) = {-0.067347, -0.743371, 0, 1.0};
Point(90) = {-0.065321, -0.743930, 0, 1.0};
Point(91) = {-0.063058, -0.744484, 0, 1.0};
Point(92) = {-0.060571, -0.745031, 0, 1.0};
Point(93) = {-0.057873, -0.745566, 0, 1.0};
Point(94) = {-0.054981, -0.746085, 0, 1.0};
Point(95) = {-0.051911, -0.746585, 0, 1.0};
Point(96) = {-0.048682, -0.747062, 0, 1.0};
Point(97) = {-0.045315, -0.747512, 0, 1.0};
Point(98) = {-0.041828, -0.747932, 0, 1.0};
Point(99) = {-0.038244, -0.748319, 0, 1.0};
Point(100) = {-0.034584, -0.748672, 0, 1.0};
Point(101) = {-0.030872, -0.748989, 0, 1.0};
Point(102) = {-0.027134, -0.749272, 0, 1.0};
Point(103) = {-0.023399, -0.749520, 0, 1.0};
Point(104) = {-0.019701, -0.749728, 0, 1.0};
Point(105) = {-0.016070, -0.749888, 0, 1.0};
Point(106) = {-0.012534, -0.749983, 0, 1.0};
Point(107) = {-0.009114, -0.750000, 0, 1.0};
Point(108) = {-0.005825, -0.749926, 0, 1.0};
Point(109) = {-0.002688, -0.749759, 0, 1.0};
Point(110) = {0.000278, -0.749461, 0, 1.0};
Point(111) = {0.003090, -0.749021, 0, 1.0};
Point(112) = {0.005761, -0.748453, 0, 1.0};
Point(113) = {0.008292, -0.747767, 0, 1.0};
Point(114) = {0.010681, -0.746984, 0, 1.0};
Point(115) = {0.012916, -0.746122, 0, 1.0};
Point(116) = {0.014984, -0.745197, 0, 1.0};
Point(117) = {0.016877, -0.744216, 0, 1.0};
Point(118) = {0.018588, -0.743197, 0, 1.0};
Point(119) = {0.020107, -0.742150, 0, 1.0};
Point(120) = {0.021427, -0.741090, 0, 1.0};
Point(121) = {0.022540, -0.740035, 0, 1.0};
Point(122) = {0.023431, -0.738988, 0, 1.0};
Point(123) = {0.024111, -0.737948, 0, 1.0};
Point(124) = {0.024597, -0.736939, 0, 1.0};
Point(125) = {0.024893, -0.735989, 0, 1.0};
Point(126) = {0.025003, -0.735128, 0, 1.0};
Point(127) = {0.024930, -0.734391, 0, 1.0};
Point(128) = {0.024684, -0.733843, 0, 1.0};
Point(129) = {0.024145, -0.733561, 0, 1.0};
Point(130) = {0.023212, -0.733481, 0, 1.0};
Point(131) = {0.021924, -0.733507, 0, 1.0};
Point(132) = {0.020307, -0.733634, 0, 1.0};
Point(133) = {0.018381, -0.733852, 0, 1.0};
Point(134) = {0.016167, -0.734158, 0, 1.0};
Point(135) = {0.013687, -0.734550, 0, 1.0};
Point(136) = {0.010969, -0.735039, 0, 1.0};
Point(137) = {0.008009, -0.735666, 0, 1.0};
Point(138) = {0.004769, -0.736427, 0, 1.0};
Point(139) = {0.001242, -0.737270, 0, 1.0};
Point(140) = {-0.002553, -0.738163, 0, 1.0};
Point(141) = {-0.006592, -0.739076, 0, 1.0};
Point(142) = {-0.010849, -0.739981, 0, 1.0};
Point(143) = {-0.015288, -0.740851, 0, 1.0};
Point(144) = {-0.019875, -0.741663, 0, 1.0};
Point(145) = {-0.024567, -0.742393, 0, 1.0};
Point(146) = {-0.029322, -0.743020, 0, 1.0};
Point(147) = {-0.034093, -0.743528, 0, 1.0};
Point(148) = {-0.038828, -0.743905, 0, 1.0};
Point(149) = {-0.043479, -0.744140, 0, 1.0};
Point(150) = {-0.047991, -0.744228, 0, 1.0};
Point(151) = {-0.052315, -0.744169, 0, 1.0};
Point(152) = {-0.056398, -0.743965, 0, 1.0};
Point(153) = {-0.060188, -0.743628, 0, 1.0};
Point(154) = {-0.063641, -0.743171, 0, 1.0};
Point(155) = {-0.066709, -0.742612, 0, 1.0};
Point(156) = {-0.069348, -0.741971, 0, 1.0};
Point(157) = {-0.071504, -0.741268, 0, 1.0};
Point(158) = {-0.073099, -0.740580, 0, 1.0};
Point(159) = {-0.074139, -0.740036, 0, 1.0};
Point(160) = {-0.074712, -0.739709, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:29};
Spline(2) = {29:59};
Spline(3) = {59:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:109};
Spline(6) = {109:139};
Spline(7) = {139:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 23 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html