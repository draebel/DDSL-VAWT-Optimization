SetFactory("OpenCASCADE");

Point(1) = {0.112391, 0.734403, 0, 1.0};
Point(2) = {0.112139, 0.734580, 0, 1.0};
Point(3) = {0.111483, 0.735102, 0, 1.0};
Point(4) = {0.110558, 0.735874, 0, 1.0};
Point(5) = {0.109391, 0.736735, 0, 1.0};
Point(6) = {0.107905, 0.737572, 0, 1.0};
Point(7) = {0.106024, 0.738390, 0, 1.0};
Point(8) = {0.103740, 0.739220, 0, 1.0};
Point(9) = {0.101073, 0.740056, 0, 1.0};
Point(10) = {0.098034, 0.740894, 0, 1.0};
Point(11) = {0.094639, 0.741725, 0, 1.0};
Point(12) = {0.090908, 0.742546, 0, 1.0};
Point(13) = {0.086861, 0.743348, 0, 1.0};
Point(14) = {0.082522, 0.744127, 0, 1.0};
Point(15) = {0.077918, 0.744877, 0, 1.0};
Point(16) = {0.073074, 0.745593, 0, 1.0};
Point(17) = {0.068023, 0.746267, 0, 1.0};
Point(18) = {0.062793, 0.746898, 0, 1.0};
Point(19) = {0.057417, 0.747478, 0, 1.0};
Point(20) = {0.051926, 0.748007, 0, 1.0};
Point(21) = {0.046358, 0.748484, 0, 1.0};
Point(22) = {0.040751, 0.748907, 0, 1.0};
Point(23) = {0.035148, 0.749280, 0, 1.0};
Point(24) = {0.029600, 0.749592, 0, 1.0};
Point(25) = {0.024154, 0.749831, 0, 1.0};
Point(26) = {0.018850, 0.749975, 0, 1.0};
Point(27) = {0.013719, 0.750000, 0, 1.0};
Point(28) = {0.008785, 0.749889, 0, 1.0};
Point(29) = {0.004080, 0.749638, 0, 1.0};
Point(30) = {-0.000370, 0.749192, 0, 1.0};
Point(31) = {-0.004588, 0.748532, 0, 1.0};
Point(32) = {-0.008595, 0.747680, 0, 1.0};
Point(33) = {-0.012392, 0.746650, 0, 1.0};
Point(34) = {-0.015976, 0.745475, 0, 1.0};
Point(35) = {-0.019327, 0.744182, 0, 1.0};
Point(36) = {-0.022430, 0.742795, 0, 1.0};
Point(37) = {-0.025270, 0.741324, 0, 1.0};
Point(38) = {-0.027836, 0.739795, 0, 1.0};
Point(39) = {-0.030114, 0.738224, 0, 1.0};
Point(40) = {-0.032094, 0.736635, 0, 1.0};
Point(41) = {-0.033764, 0.735052, 0, 1.0};
Point(42) = {-0.035101, 0.733481, 0, 1.0};
Point(43) = {-0.036120, 0.731921, 0, 1.0};
Point(44) = {-0.036850, 0.730408, 0, 1.0};
Point(45) = {-0.037294, 0.728982, 0, 1.0};
Point(46) = {-0.037459, 0.727690, 0, 1.0};
Point(47) = {-0.037349, 0.726586, 0, 1.0};
Point(48) = {-0.036981, 0.725763, 0, 1.0};
Point(49) = {-0.036173, 0.725340, 0, 1.0};
Point(50) = {-0.034772, 0.725220, 0, 1.0};
Point(51) = {-0.032840, 0.725259, 0, 1.0};
Point(52) = {-0.030414, 0.725450, 0, 1.0};
Point(53) = {-0.027525, 0.725777, 0, 1.0};
Point(54) = {-0.024204, 0.726235, 0, 1.0};
Point(55) = {-0.020484, 0.726824, 0, 1.0};
Point(56) = {-0.016407, 0.727558, 0, 1.0};
Point(57) = {-0.011967, 0.728498, 0, 1.0};
Point(58) = {-0.007106, 0.729640, 0, 1.0};
Point(59) = {-0.001816, 0.730905, 0, 1.0};
Point(60) = {0.003878, 0.732244, 0, 1.0};
Point(61) = {0.009936, 0.733613, 0, 1.0};
Point(62) = {0.016321, 0.734971, 0, 1.0};
Point(63) = {0.022981, 0.736276, 0, 1.0};
Point(64) = {0.029862, 0.737493, 0, 1.0};
Point(65) = {0.036900, 0.738589, 0, 1.0};
Point(66) = {0.044033, 0.739529, 0, 1.0};
Point(67) = {0.051189, 0.740292, 0, 1.0};
Point(68) = {0.058293, 0.740857, 0, 1.0};
Point(69) = {0.065269, 0.741209, 0, 1.0};
Point(70) = {0.072038, 0.741341, 0, 1.0};
Point(71) = {0.078524, 0.741253, 0, 1.0};
Point(72) = {0.084648, 0.740948, 0, 1.0};
Point(73) = {0.090335, 0.740442, 0, 1.0};
Point(74) = {0.095514, 0.739755, 0, 1.0};
Point(75) = {0.100116, 0.738917, 0, 1.0};
Point(76) = {0.104075, 0.737956, 0, 1.0};
Point(77) = {0.107308, 0.736902, 0, 1.0};
Point(78) = {0.109702, 0.735869, 0, 1.0};
Point(79) = {0.111261, 0.735053, 0, 1.0};
Point(80) = {0.112120, 0.734563, 0, 1.0};
Point(81) = {-0.112391, -0.734403, 0, 1.0};
Point(82) = {-0.112139, -0.734580, 0, 1.0};
Point(83) = {-0.111483, -0.735102, 0, 1.0};
Point(84) = {-0.110558, -0.735874, 0, 1.0};
Point(85) = {-0.109391, -0.736735, 0, 1.0};
Point(86) = {-0.107905, -0.737572, 0, 1.0};
Point(87) = {-0.106024, -0.738390, 0, 1.0};
Point(88) = {-0.103740, -0.739220, 0, 1.0};
Point(89) = {-0.101073, -0.740056, 0, 1.0};
Point(90) = {-0.098034, -0.740894, 0, 1.0};
Point(91) = {-0.094639, -0.741725, 0, 1.0};
Point(92) = {-0.090908, -0.742546, 0, 1.0};
Point(93) = {-0.086861, -0.743348, 0, 1.0};
Point(94) = {-0.082522, -0.744127, 0, 1.0};
Point(95) = {-0.077918, -0.744877, 0, 1.0};
Point(96) = {-0.073074, -0.745593, 0, 1.0};
Point(97) = {-0.068023, -0.746267, 0, 1.0};
Point(98) = {-0.062793, -0.746898, 0, 1.0};
Point(99) = {-0.057417, -0.747478, 0, 1.0};
Point(100) = {-0.051926, -0.748007, 0, 1.0};
Point(101) = {-0.046358, -0.748484, 0, 1.0};
Point(102) = {-0.040751, -0.748907, 0, 1.0};
Point(103) = {-0.035148, -0.749280, 0, 1.0};
Point(104) = {-0.029600, -0.749592, 0, 1.0};
Point(105) = {-0.024154, -0.749831, 0, 1.0};
Point(106) = {-0.018850, -0.749975, 0, 1.0};
Point(107) = {-0.013719, -0.750000, 0, 1.0};
Point(108) = {-0.008785, -0.749889, 0, 1.0};
Point(109) = {-0.004080, -0.749638, 0, 1.0};
Point(110) = {0.000370, -0.749192, 0, 1.0};
Point(111) = {0.004588, -0.748532, 0, 1.0};
Point(112) = {0.008595, -0.747680, 0, 1.0};
Point(113) = {0.012392, -0.746650, 0, 1.0};
Point(114) = {0.015976, -0.745475, 0, 1.0};
Point(115) = {0.019327, -0.744182, 0, 1.0};
Point(116) = {0.022430, -0.742795, 0, 1.0};
Point(117) = {0.025270, -0.741324, 0, 1.0};
Point(118) = {0.027836, -0.739795, 0, 1.0};
Point(119) = {0.030114, -0.738224, 0, 1.0};
Point(120) = {0.032094, -0.736635, 0, 1.0};
Point(121) = {0.033764, -0.735052, 0, 1.0};
Point(122) = {0.035101, -0.733481, 0, 1.0};
Point(123) = {0.036120, -0.731921, 0, 1.0};
Point(124) = {0.036850, -0.730408, 0, 1.0};
Point(125) = {0.037294, -0.728982, 0, 1.0};
Point(126) = {0.037459, -0.727690, 0, 1.0};
Point(127) = {0.037349, -0.726586, 0, 1.0};
Point(128) = {0.036981, -0.725763, 0, 1.0};
Point(129) = {0.036173, -0.725340, 0, 1.0};
Point(130) = {0.034772, -0.725220, 0, 1.0};
Point(131) = {0.032840, -0.725259, 0, 1.0};
Point(132) = {0.030414, -0.725450, 0, 1.0};
Point(133) = {0.027525, -0.725777, 0, 1.0};
Point(134) = {0.024204, -0.726235, 0, 1.0};
Point(135) = {0.020484, -0.726824, 0, 1.0};
Point(136) = {0.016407, -0.727558, 0, 1.0};
Point(137) = {0.011967, -0.728498, 0, 1.0};
Point(138) = {0.007106, -0.729640, 0, 1.0};
Point(139) = {0.001816, -0.730905, 0, 1.0};
Point(140) = {-0.003878, -0.732244, 0, 1.0};
Point(141) = {-0.009936, -0.733613, 0, 1.0};
Point(142) = {-0.016321, -0.734971, 0, 1.0};
Point(143) = {-0.022981, -0.736276, 0, 1.0};
Point(144) = {-0.029862, -0.737493, 0, 1.0};
Point(145) = {-0.036900, -0.738589, 0, 1.0};
Point(146) = {-0.044033, -0.739529, 0, 1.0};
Point(147) = {-0.051189, -0.740292, 0, 1.0};
Point(148) = {-0.058293, -0.740857, 0, 1.0};
Point(149) = {-0.065269, -0.741209, 0, 1.0};
Point(150) = {-0.072038, -0.741341, 0, 1.0};
Point(151) = {-0.078524, -0.741253, 0, 1.0};
Point(152) = {-0.084648, -0.740948, 0, 1.0};
Point(153) = {-0.090335, -0.740442, 0, 1.0};
Point(154) = {-0.095514, -0.739755, 0, 1.0};
Point(155) = {-0.100116, -0.738917, 0, 1.0};
Point(156) = {-0.104075, -0.737956, 0, 1.0};
Point(157) = {-0.107308, -0.736902, 0, 1.0};
Point(158) = {-0.109702, -0.735869, 0, 1.0};
Point(159) = {-0.111261, -0.735053, 0, 1.0};
Point(160) = {-0.112120, -0.734563, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:29};
Spline(2) = {29:59};
Spline(3) = {59:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:109};
Spline(6) = {109:139};
Spline(7) = {139:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html