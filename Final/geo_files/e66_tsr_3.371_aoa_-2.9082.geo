SetFactory("OpenCASCADE");

Point(1) = {0.074871, 0.744078, 0, 1.0};
Point(2) = {0.074536, 0.744163, 0, 1.0};
Point(3) = {0.073595, 0.744425, 0, 1.0};
Point(4) = {0.072149, 0.744834, 0, 1.0};
Point(5) = {0.070244, 0.745311, 0, 1.0};
Point(6) = {0.067872, 0.745817, 0, 1.0};
Point(7) = {0.065048, 0.746355, 0, 1.0};
Point(8) = {0.061820, 0.746917, 0, 1.0};
Point(9) = {0.058233, 0.747485, 0, 1.0};
Point(10) = {0.054333, 0.748037, 0, 1.0};
Point(11) = {0.050162, 0.748552, 0, 1.0};
Point(12) = {0.045762, 0.749011, 0, 1.0};
Point(13) = {0.041178, 0.749397, 0, 1.0};
Point(14) = {0.036453, 0.749697, 0, 1.0};
Point(15) = {0.031633, 0.749902, 0, 1.0};
Point(16) = {0.026763, 0.750000, 0, 1.0};
Point(17) = {0.021889, 0.749986, 0, 1.0};
Point(18) = {0.017055, 0.749857, 0, 1.0};
Point(19) = {0.012306, 0.749612, 0, 1.0};
Point(20) = {0.007686, 0.749251, 0, 1.0};
Point(21) = {0.003236, 0.748781, 0, 1.0};
Point(22) = {-0.001001, 0.748206, 0, 1.0};
Point(23) = {-0.004989, 0.747535, 0, 1.0};
Point(24) = {-0.008689, 0.746778, 0, 1.0};
Point(25) = {-0.012071, 0.745947, 0, 1.0};
Point(26) = {-0.015102, 0.745054, 0, 1.0};
Point(27) = {-0.017760, 0.744116, 0, 1.0};
Point(28) = {-0.020022, 0.743149, 0, 1.0};
Point(29) = {-0.021874, 0.742173, 0, 1.0};
Point(30) = {-0.023303, 0.741214, 0, 1.0};
Point(31) = {-0.024306, 0.740300, 0, 1.0};
Point(32) = {-0.024874, 0.739481, 0, 1.0};
Point(33) = {-0.024971, 0.738847, 0, 1.0};
Point(34) = {-0.024509, 0.738355, 0, 1.0};
Point(35) = {-0.023479, 0.737918, 0, 1.0};
Point(36) = {-0.021947, 0.737576, 0, 1.0};
Point(37) = {-0.019922, 0.737348, 0, 1.0};
Point(38) = {-0.017417, 0.737245, 0, 1.0};
Point(39) = {-0.014444, 0.737266, 0, 1.0};
Point(40) = {-0.011025, 0.737407, 0, 1.0};
Point(41) = {-0.007185, 0.737660, 0, 1.0};
Point(42) = {-0.002960, 0.738012, 0, 1.0};
Point(43) = {0.001609, 0.738449, 0, 1.0};
Point(44) = {0.006478, 0.738956, 0, 1.0};
Point(45) = {0.011593, 0.739516, 0, 1.0};
Point(46) = {0.016898, 0.740111, 0, 1.0};
Point(47) = {0.022333, 0.740724, 0, 1.0};
Point(48) = {0.027835, 0.741338, 0, 1.0};
Point(49) = {0.033338, 0.741935, 0, 1.0};
Point(50) = {0.038776, 0.742500, 0, 1.0};
Point(51) = {0.044079, 0.743015, 0, 1.0};
Point(52) = {0.049178, 0.743466, 0, 1.0};
Point(53) = {0.054004, 0.743842, 0, 1.0};
Point(54) = {0.058489, 0.744132, 0, 1.0};
Point(55) = {0.062566, 0.744330, 0, 1.0};
Point(56) = {0.066168, 0.744434, 0, 1.0};
Point(57) = {0.069231, 0.744440, 0, 1.0};
Point(58) = {0.071682, 0.744360, 0, 1.0};
Point(59) = {0.073455, 0.744234, 0, 1.0};
Point(60) = {0.074518, 0.744122, 0, 1.0};
Point(61) = {-0.074871, -0.744078, 0, 1.0};
Point(62) = {-0.074536, -0.744163, 0, 1.0};
Point(63) = {-0.073595, -0.744425, 0, 1.0};
Point(64) = {-0.072149, -0.744834, 0, 1.0};
Point(65) = {-0.070244, -0.745311, 0, 1.0};
Point(66) = {-0.067872, -0.745817, 0, 1.0};
Point(67) = {-0.065048, -0.746355, 0, 1.0};
Point(68) = {-0.061820, -0.746917, 0, 1.0};
Point(69) = {-0.058233, -0.747485, 0, 1.0};
Point(70) = {-0.054333, -0.748037, 0, 1.0};
Point(71) = {-0.050162, -0.748552, 0, 1.0};
Point(72) = {-0.045762, -0.749011, 0, 1.0};
Point(73) = {-0.041178, -0.749397, 0, 1.0};
Point(74) = {-0.036453, -0.749697, 0, 1.0};
Point(75) = {-0.031633, -0.749902, 0, 1.0};
Point(76) = {-0.026763, -0.750000, 0, 1.0};
Point(77) = {-0.021889, -0.749986, 0, 1.0};
Point(78) = {-0.017055, -0.749857, 0, 1.0};
Point(79) = {-0.012306, -0.749612, 0, 1.0};
Point(80) = {-0.007686, -0.749251, 0, 1.0};
Point(81) = {-0.003236, -0.748781, 0, 1.0};
Point(82) = {0.001001, -0.748206, 0, 1.0};
Point(83) = {0.004989, -0.747535, 0, 1.0};
Point(84) = {0.008689, -0.746778, 0, 1.0};
Point(85) = {0.012071, -0.745947, 0, 1.0};
Point(86) = {0.015102, -0.745054, 0, 1.0};
Point(87) = {0.017760, -0.744116, 0, 1.0};
Point(88) = {0.020022, -0.743149, 0, 1.0};
Point(89) = {0.021874, -0.742173, 0, 1.0};
Point(90) = {0.023303, -0.741214, 0, 1.0};
Point(91) = {0.024306, -0.740300, 0, 1.0};
Point(92) = {0.024874, -0.739481, 0, 1.0};
Point(93) = {0.024971, -0.738847, 0, 1.0};
Point(94) = {0.024509, -0.738355, 0, 1.0};
Point(95) = {0.023479, -0.737918, 0, 1.0};
Point(96) = {0.021947, -0.737576, 0, 1.0};
Point(97) = {0.019922, -0.737348, 0, 1.0};
Point(98) = {0.017417, -0.737245, 0, 1.0};
Point(99) = {0.014444, -0.737266, 0, 1.0};
Point(100) = {0.011025, -0.737407, 0, 1.0};
Point(101) = {0.007185, -0.737660, 0, 1.0};
Point(102) = {0.002960, -0.738012, 0, 1.0};
Point(103) = {-0.001609, -0.738449, 0, 1.0};
Point(104) = {-0.006478, -0.738956, 0, 1.0};
Point(105) = {-0.011593, -0.739516, 0, 1.0};
Point(106) = {-0.016898, -0.740111, 0, 1.0};
Point(107) = {-0.022333, -0.740724, 0, 1.0};
Point(108) = {-0.027835, -0.741338, 0, 1.0};
Point(109) = {-0.033338, -0.741935, 0, 1.0};
Point(110) = {-0.038776, -0.742500, 0, 1.0};
Point(111) = {-0.044079, -0.743015, 0, 1.0};
Point(112) = {-0.049178, -0.743466, 0, 1.0};
Point(113) = {-0.054004, -0.743842, 0, 1.0};
Point(114) = {-0.058489, -0.744132, 0, 1.0};
Point(115) = {-0.062566, -0.744330, 0, 1.0};
Point(116) = {-0.066168, -0.744434, 0, 1.0};
Point(117) = {-0.069231, -0.744440, 0, 1.0};
Point(118) = {-0.071682, -0.744360, 0, 1.0};
Point(119) = {-0.073455, -0.744234, 0, 1.0};
Point(120) = {-0.074518, -0.744122, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html