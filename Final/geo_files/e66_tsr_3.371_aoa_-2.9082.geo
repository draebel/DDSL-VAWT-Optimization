SetFactory("OpenCASCADE");

Point(1) = {0.149742, 0.738156, 0, 1.0};
Point(2) = {0.149073, 0.738327, 0, 1.0};
Point(3) = {0.147190, 0.738850, 0, 1.0};
Point(4) = {0.144299, 0.739668, 0, 1.0};
Point(5) = {0.140487, 0.740622, 0, 1.0};
Point(6) = {0.135744, 0.741635, 0, 1.0};
Point(7) = {0.130096, 0.742709, 0, 1.0};
Point(8) = {0.123641, 0.743833, 0, 1.0};
Point(9) = {0.116466, 0.744971, 0, 1.0};
Point(10) = {0.108666, 0.746075, 0, 1.0};
Point(11) = {0.100325, 0.747105, 0, 1.0};
Point(12) = {0.091525, 0.748021, 0, 1.0};
Point(13) = {0.082356, 0.748793, 0, 1.0};
Point(14) = {0.072905, 0.749394, 0, 1.0};
Point(15) = {0.063266, 0.749804, 0, 1.0};
Point(16) = {0.053526, 0.750000, 0, 1.0};
Point(17) = {0.043779, 0.749971, 0, 1.0};
Point(18) = {0.034109, 0.749715, 0, 1.0};
Point(19) = {0.024612, 0.749224, 0, 1.0};
Point(20) = {0.015372, 0.748502, 0, 1.0};
Point(21) = {0.006473, 0.747562, 0, 1.0};
Point(22) = {-0.002002, 0.746412, 0, 1.0};
Point(23) = {-0.009978, 0.745070, 0, 1.0};
Point(24) = {-0.017379, 0.743556, 0, 1.0};
Point(25) = {-0.024141, 0.741893, 0, 1.0};
Point(26) = {-0.030204, 0.740107, 0, 1.0};
Point(27) = {-0.035520, 0.738231, 0, 1.0};
Point(28) = {-0.040044, 0.736297, 0, 1.0};
Point(29) = {-0.043747, 0.734347, 0, 1.0};
Point(30) = {-0.046606, 0.732427, 0, 1.0};
Point(31) = {-0.048612, 0.730601, 0, 1.0};
Point(32) = {-0.049748, 0.728961, 0, 1.0};
Point(33) = {-0.049942, 0.727694, 0, 1.0};
Point(34) = {-0.049019, 0.726709, 0, 1.0};
Point(35) = {-0.046958, 0.725837, 0, 1.0};
Point(36) = {-0.043893, 0.725151, 0, 1.0};
Point(37) = {-0.039845, 0.724696, 0, 1.0};
Point(38) = {-0.034834, 0.724490, 0, 1.0};
Point(39) = {-0.028888, 0.724532, 0, 1.0};
Point(40) = {-0.022050, 0.724813, 0, 1.0};
Point(41) = {-0.014370, 0.725319, 0, 1.0};
Point(42) = {-0.005920, 0.726023, 0, 1.0};
Point(43) = {0.003219, 0.726898, 0, 1.0};
Point(44) = {0.012956, 0.727911, 0, 1.0};
Point(45) = {0.023186, 0.729032, 0, 1.0};
Point(46) = {0.033796, 0.730222, 0, 1.0};
Point(47) = {0.044665, 0.731449, 0, 1.0};
Point(48) = {0.055669, 0.732676, 0, 1.0};
Point(49) = {0.066677, 0.733870, 0, 1.0};
Point(50) = {0.077552, 0.735000, 0, 1.0};
Point(51) = {0.088157, 0.736029, 0, 1.0};
Point(52) = {0.098356, 0.736932, 0, 1.0};
Point(53) = {0.108009, 0.737684, 0, 1.0};
Point(54) = {0.116979, 0.738264, 0, 1.0};
Point(55) = {0.125131, 0.738660, 0, 1.0};
Point(56) = {0.132336, 0.738868, 0, 1.0};
Point(57) = {0.138461, 0.738881, 0, 1.0};
Point(58) = {0.143364, 0.738719, 0, 1.0};
Point(59) = {0.146909, 0.738467, 0, 1.0};
Point(60) = {0.149035, 0.738245, 0, 1.0};
Point(61) = {-0.149742, -0.738156, 0, 1.0};
Point(62) = {-0.149073, -0.738327, 0, 1.0};
Point(63) = {-0.147190, -0.738850, 0, 1.0};
Point(64) = {-0.144299, -0.739668, 0, 1.0};
Point(65) = {-0.140487, -0.740622, 0, 1.0};
Point(66) = {-0.135744, -0.741635, 0, 1.0};
Point(67) = {-0.130096, -0.742709, 0, 1.0};
Point(68) = {-0.123641, -0.743833, 0, 1.0};
Point(69) = {-0.116466, -0.744971, 0, 1.0};
Point(70) = {-0.108666, -0.746075, 0, 1.0};
Point(71) = {-0.100325, -0.747105, 0, 1.0};
Point(72) = {-0.091525, -0.748021, 0, 1.0};
Point(73) = {-0.082356, -0.748793, 0, 1.0};
Point(74) = {-0.072905, -0.749394, 0, 1.0};
Point(75) = {-0.063266, -0.749804, 0, 1.0};
Point(76) = {-0.053526, -0.750000, 0, 1.0};
Point(77) = {-0.043779, -0.749971, 0, 1.0};
Point(78) = {-0.034109, -0.749715, 0, 1.0};
Point(79) = {-0.024612, -0.749224, 0, 1.0};
Point(80) = {-0.015372, -0.748502, 0, 1.0};
Point(81) = {-0.006473, -0.747562, 0, 1.0};
Point(82) = {0.002002, -0.746412, 0, 1.0};
Point(83) = {0.009978, -0.745070, 0, 1.0};
Point(84) = {0.017379, -0.743556, 0, 1.0};
Point(85) = {0.024141, -0.741893, 0, 1.0};
Point(86) = {0.030204, -0.740107, 0, 1.0};
Point(87) = {0.035520, -0.738231, 0, 1.0};
Point(88) = {0.040044, -0.736297, 0, 1.0};
Point(89) = {0.043747, -0.734347, 0, 1.0};
Point(90) = {0.046606, -0.732427, 0, 1.0};
Point(91) = {0.048612, -0.730601, 0, 1.0};
Point(92) = {0.049748, -0.728961, 0, 1.0};
Point(93) = {0.049942, -0.727694, 0, 1.0};
Point(94) = {0.049019, -0.726709, 0, 1.0};
Point(95) = {0.046958, -0.725837, 0, 1.0};
Point(96) = {0.043893, -0.725151, 0, 1.0};
Point(97) = {0.039845, -0.724696, 0, 1.0};
Point(98) = {0.034834, -0.724490, 0, 1.0};
Point(99) = {0.028888, -0.724532, 0, 1.0};
Point(100) = {0.022050, -0.724813, 0, 1.0};
Point(101) = {0.014370, -0.725319, 0, 1.0};
Point(102) = {0.005920, -0.726023, 0, 1.0};
Point(103) = {-0.003219, -0.726898, 0, 1.0};
Point(104) = {-0.012956, -0.727911, 0, 1.0};
Point(105) = {-0.023186, -0.729032, 0, 1.0};
Point(106) = {-0.033796, -0.730222, 0, 1.0};
Point(107) = {-0.044665, -0.731449, 0, 1.0};
Point(108) = {-0.055669, -0.732676, 0, 1.0};
Point(109) = {-0.066677, -0.733870, 0, 1.0};
Point(110) = {-0.077552, -0.735000, 0, 1.0};
Point(111) = {-0.088157, -0.736029, 0, 1.0};
Point(112) = {-0.098356, -0.736932, 0, 1.0};
Point(113) = {-0.108009, -0.737684, 0, 1.0};
Point(114) = {-0.116979, -0.738264, 0, 1.0};
Point(115) = {-0.125131, -0.738660, 0, 1.0};
Point(116) = {-0.132336, -0.738868, 0, 1.0};
Point(117) = {-0.138461, -0.738881, 0, 1.0};
Point(118) = {-0.143364, -0.738719, 0, 1.0};
Point(119) = {-0.146909, -0.738467, 0, 1.0};
Point(120) = {-0.149035, -0.738245, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html