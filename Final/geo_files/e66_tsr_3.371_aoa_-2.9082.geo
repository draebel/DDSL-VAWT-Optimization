SetFactory("OpenCASCADE");

Point(1) = {0.112343, 0.741115, 0, 1.0};
Point(2) = {0.111841, 0.741243, 0, 1.0};
Point(3) = {0.110428, 0.741636, 0, 1.0};
Point(4) = {0.108259, 0.742249, 0, 1.0};
Point(5) = {0.105400, 0.742965, 0, 1.0};
Point(6) = {0.101842, 0.743725, 0, 1.0};
Point(7) = {0.097605, 0.744531, 0, 1.0};
Point(8) = {0.092763, 0.745374, 0, 1.0};
Point(9) = {0.087380, 0.746227, 0, 1.0};
Point(10) = {0.081529, 0.747055, 0, 1.0};
Point(11) = {0.075272, 0.747828, 0, 1.0};
Point(12) = {0.068671, 0.748516, 0, 1.0};
Point(13) = {0.061793, 0.749095, 0, 1.0};
Point(14) = {0.054703, 0.749546, 0, 1.0};
Point(15) = {0.047472, 0.749853, 0, 1.0};
Point(16) = {0.040165, 0.750000, 0, 1.0};
Point(17) = {0.032853, 0.749979, 0, 1.0};
Point(18) = {0.025600, 0.749786, 0, 1.0};
Point(19) = {0.018475, 0.749418, 0, 1.0};
Point(20) = {0.011544, 0.748877, 0, 1.0};
Point(21) = {0.004868, 0.748171, 0, 1.0};
Point(22) = {-0.001489, 0.747309, 0, 1.0};
Point(23) = {-0.007472, 0.746302, 0, 1.0};
Point(24) = {-0.013024, 0.745166, 0, 1.0};
Point(25) = {-0.018097, 0.743919, 0, 1.0};
Point(26) = {-0.022645, 0.742579, 0, 1.0};
Point(27) = {-0.026633, 0.741171, 0, 1.0};
Point(28) = {-0.030026, 0.739721, 0, 1.0};
Point(29) = {-0.032805, 0.738257, 0, 1.0};
Point(30) = {-0.034949, 0.736818, 0, 1.0};
Point(31) = {-0.036454, 0.735448, 0, 1.0};
Point(32) = {-0.037306, 0.734218, 0, 1.0};
Point(33) = {-0.037452, 0.733267, 0, 1.0};
Point(34) = {-0.036759, 0.732528, 0, 1.0};
Point(35) = {-0.035213, 0.731874, 0, 1.0};
Point(36) = {-0.032914, 0.731360, 0, 1.0};
Point(37) = {-0.029877, 0.731018, 0, 1.0};
Point(38) = {-0.026118, 0.730864, 0, 1.0};
Point(39) = {-0.021658, 0.730895, 0, 1.0};
Point(40) = {-0.016528, 0.731106, 0, 1.0};
Point(41) = {-0.010767, 0.731486, 0, 1.0};
Point(42) = {-0.004429, 0.732014, 0, 1.0};
Point(43) = {0.002427, 0.732670, 0, 1.0};
Point(44) = {0.009732, 0.733430, 0, 1.0};
Point(45) = {0.017406, 0.734270, 0, 1.0};
Point(46) = {0.025365, 0.735163, 0, 1.0};
Point(47) = {0.033519, 0.736084, 0, 1.0};
Point(48) = {0.041773, 0.737005, 0, 1.0};
Point(49) = {0.050031, 0.737900, 0, 1.0};
Point(50) = {0.058189, 0.738747, 0, 1.0};
Point(51) = {0.066144, 0.739520, 0, 1.0};
Point(52) = {0.073795, 0.740197, 0, 1.0};
Point(53) = {0.081036, 0.740761, 0, 1.0};
Point(54) = {0.087765, 0.741196, 0, 1.0};
Point(55) = {0.093881, 0.741493, 0, 1.0};
Point(56) = {0.099285, 0.741649, 0, 1.0};
Point(57) = {0.103880, 0.741659, 0, 1.0};
Point(58) = {0.107558, 0.741538, 0, 1.0};
Point(59) = {0.110218, 0.741348, 0, 1.0};
Point(60) = {0.111812, 0.741182, 0, 1.0};
Point(61) = {-0.112343, -0.741115, 0, 1.0};
Point(62) = {-0.111841, -0.741243, 0, 1.0};
Point(63) = {-0.110428, -0.741636, 0, 1.0};
Point(64) = {-0.108259, -0.742249, 0, 1.0};
Point(65) = {-0.105400, -0.742965, 0, 1.0};
Point(66) = {-0.101842, -0.743725, 0, 1.0};
Point(67) = {-0.097605, -0.744531, 0, 1.0};
Point(68) = {-0.092763, -0.745374, 0, 1.0};
Point(69) = {-0.087380, -0.746227, 0, 1.0};
Point(70) = {-0.081529, -0.747055, 0, 1.0};
Point(71) = {-0.075272, -0.747828, 0, 1.0};
Point(72) = {-0.068671, -0.748516, 0, 1.0};
Point(73) = {-0.061793, -0.749095, 0, 1.0};
Point(74) = {-0.054703, -0.749546, 0, 1.0};
Point(75) = {-0.047472, -0.749853, 0, 1.0};
Point(76) = {-0.040165, -0.750000, 0, 1.0};
Point(77) = {-0.032853, -0.749979, 0, 1.0};
Point(78) = {-0.025600, -0.749786, 0, 1.0};
Point(79) = {-0.018475, -0.749418, 0, 1.0};
Point(80) = {-0.011544, -0.748877, 0, 1.0};
Point(81) = {-0.004868, -0.748171, 0, 1.0};
Point(82) = {0.001489, -0.747309, 0, 1.0};
Point(83) = {0.007472, -0.746302, 0, 1.0};
Point(84) = {0.013024, -0.745166, 0, 1.0};
Point(85) = {0.018097, -0.743919, 0, 1.0};
Point(86) = {0.022645, -0.742579, 0, 1.0};
Point(87) = {0.026633, -0.741171, 0, 1.0};
Point(88) = {0.030026, -0.739721, 0, 1.0};
Point(89) = {0.032805, -0.738257, 0, 1.0};
Point(90) = {0.034949, -0.736818, 0, 1.0};
Point(91) = {0.036454, -0.735448, 0, 1.0};
Point(92) = {0.037306, -0.734218, 0, 1.0};
Point(93) = {0.037452, -0.733267, 0, 1.0};
Point(94) = {0.036759, -0.732528, 0, 1.0};
Point(95) = {0.035213, -0.731874, 0, 1.0};
Point(96) = {0.032914, -0.731360, 0, 1.0};
Point(97) = {0.029877, -0.731018, 0, 1.0};
Point(98) = {0.026118, -0.730864, 0, 1.0};
Point(99) = {0.021658, -0.730895, 0, 1.0};
Point(100) = {0.016528, -0.731106, 0, 1.0};
Point(101) = {0.010767, -0.731486, 0, 1.0};
Point(102) = {0.004429, -0.732014, 0, 1.0};
Point(103) = {-0.002427, -0.732670, 0, 1.0};
Point(104) = {-0.009732, -0.733430, 0, 1.0};
Point(105) = {-0.017406, -0.734270, 0, 1.0};
Point(106) = {-0.025365, -0.735163, 0, 1.0};
Point(107) = {-0.033519, -0.736084, 0, 1.0};
Point(108) = {-0.041773, -0.737005, 0, 1.0};
Point(109) = {-0.050031, -0.737900, 0, 1.0};
Point(110) = {-0.058189, -0.738747, 0, 1.0};
Point(111) = {-0.066144, -0.739520, 0, 1.0};
Point(112) = {-0.073795, -0.740197, 0, 1.0};
Point(113) = {-0.081036, -0.740761, 0, 1.0};
Point(114) = {-0.087765, -0.741196, 0, 1.0};
Point(115) = {-0.093881, -0.741493, 0, 1.0};
Point(116) = {-0.099285, -0.741649, 0, 1.0};
Point(117) = {-0.103880, -0.741659, 0, 1.0};
Point(118) = {-0.107558, -0.741538, 0, 1.0};
Point(119) = {-0.110218, -0.741348, 0, 1.0};
Point(120) = {-0.111812, -0.741182, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html