SetFactory("OpenCASCADE");

Point(1) = {0.112334, 0.728364, 0, 1.0};
Point(2) = {0.111804, 0.728585, 0, 1.0};
Point(3) = {0.110323, 0.729279, 0, 1.0};
Point(4) = {0.108094, 0.730415, 0, 1.0};
Point(5) = {0.105254, 0.731849, 0, 1.0};
Point(6) = {0.101814, 0.733439, 0, 1.0};
Point(7) = {0.097758, 0.735155, 0, 1.0};
Point(8) = {0.093153, 0.737001, 0, 1.0};
Point(9) = {0.088124, 0.738932, 0, 1.0};
Point(10) = {0.082790, 0.740804, 0, 1.0};
Point(11) = {0.077104, 0.742411, 0, 1.0};
Point(12) = {0.070868, 0.743783, 0, 1.0};
Point(13) = {0.064152, 0.745173, 0, 1.0};
Point(14) = {0.057268, 0.746600, 0, 1.0};
Point(15) = {0.050365, 0.747878, 0, 1.0};
Point(16) = {0.043465, 0.748895, 0, 1.0};
Point(17) = {0.036567, 0.749579, 0, 1.0};
Point(18) = {0.029647, 0.749928, 0, 1.0};
Point(19) = {0.022733, 0.750000, 0, 1.0};
Point(20) = {0.015914, 0.749831, 0, 1.0};
Point(21) = {0.009261, 0.749431, 0, 1.0};
Point(22) = {0.002843, 0.748811, 0, 1.0};
Point(23) = {-0.003273, 0.747985, 0, 1.0};
Point(24) = {-0.009030, 0.746967, 0, 1.0};
Point(25) = {-0.014373, 0.745775, 0, 1.0};
Point(26) = {-0.019253, 0.744434, 0, 1.0};
Point(27) = {-0.023622, 0.742965, 0, 1.0};
Point(28) = {-0.027446, 0.741396, 0, 1.0};
Point(29) = {-0.030692, 0.739763, 0, 1.0};
Point(30) = {-0.033340, 0.738105, 0, 1.0};
Point(31) = {-0.035367, 0.736473, 0, 1.0};
Point(32) = {-0.036753, 0.734926, 0, 1.0};
Point(33) = {-0.037481, 0.733552, 0, 1.0};
Point(34) = {-0.037387, 0.732490, 0, 1.0};
Point(35) = {-0.036350, 0.731626, 0, 1.0};
Point(36) = {-0.034431, 0.730814, 0, 1.0};
Point(37) = {-0.031679, 0.730092, 0, 1.0};
Point(38) = {-0.028131, 0.729453, 0, 1.0};
Point(39) = {-0.023831, 0.728905, 0, 1.0};
Point(40) = {-0.018827, 0.728447, 0, 1.0};
Point(41) = {-0.013171, 0.728074, 0, 1.0};
Point(42) = {-0.006932, 0.727779, 0, 1.0};
Point(43) = {-0.000188, 0.727560, 0, 1.0};
Point(44) = {0.006981, 0.727424, 0, 1.0};
Point(45) = {0.014499, 0.727372, 0, 1.0};
Point(46) = {0.022274, 0.727399, 0, 1.0};
Point(47) = {0.030222, 0.727519, 0, 1.0};
Point(48) = {0.038273, 0.727729, 0, 1.0};
Point(49) = {0.046331, 0.728005, 0, 1.0};
Point(50) = {0.054282, 0.728372, 0, 1.0};
Point(51) = {0.062089, 0.728884, 0, 1.0};
Point(52) = {0.069779, 0.729502, 0, 1.0};
Point(53) = {0.077311, 0.730097, 0, 1.0};
Point(54) = {0.084567, 0.730539, 0, 1.0};
Point(55) = {0.091374, 0.730727, 0, 1.0};
Point(56) = {0.097520, 0.730625, 0, 1.0};
Point(57) = {0.102810, 0.730243, 0, 1.0};
Point(58) = {0.107035, 0.729645, 0, 1.0};
Point(59) = {0.110027, 0.729003, 0, 1.0};
Point(60) = {0.111768, 0.728533, 0, 1.0};
Point(61) = {-0.112334, -0.728364, 0, 1.0};
Point(62) = {-0.111804, -0.728585, 0, 1.0};
Point(63) = {-0.110323, -0.729279, 0, 1.0};
Point(64) = {-0.108094, -0.730415, 0, 1.0};
Point(65) = {-0.105254, -0.731849, 0, 1.0};
Point(66) = {-0.101814, -0.733439, 0, 1.0};
Point(67) = {-0.097758, -0.735155, 0, 1.0};
Point(68) = {-0.093153, -0.737001, 0, 1.0};
Point(69) = {-0.088124, -0.738932, 0, 1.0};
Point(70) = {-0.082790, -0.740804, 0, 1.0};
Point(71) = {-0.077104, -0.742411, 0, 1.0};
Point(72) = {-0.070868, -0.743783, 0, 1.0};
Point(73) = {-0.064152, -0.745173, 0, 1.0};
Point(74) = {-0.057268, -0.746600, 0, 1.0};
Point(75) = {-0.050365, -0.747878, 0, 1.0};
Point(76) = {-0.043465, -0.748895, 0, 1.0};
Point(77) = {-0.036567, -0.749579, 0, 1.0};
Point(78) = {-0.029647, -0.749928, 0, 1.0};
Point(79) = {-0.022733, -0.750000, 0, 1.0};
Point(80) = {-0.015914, -0.749831, 0, 1.0};
Point(81) = {-0.009261, -0.749431, 0, 1.0};
Point(82) = {-0.002843, -0.748811, 0, 1.0};
Point(83) = {0.003273, -0.747985, 0, 1.0};
Point(84) = {0.009030, -0.746967, 0, 1.0};
Point(85) = {0.014373, -0.745775, 0, 1.0};
Point(86) = {0.019253, -0.744434, 0, 1.0};
Point(87) = {0.023622, -0.742965, 0, 1.0};
Point(88) = {0.027446, -0.741396, 0, 1.0};
Point(89) = {0.030692, -0.739763, 0, 1.0};
Point(90) = {0.033340, -0.738105, 0, 1.0};
Point(91) = {0.035367, -0.736473, 0, 1.0};
Point(92) = {0.036753, -0.734926, 0, 1.0};
Point(93) = {0.037481, -0.733552, 0, 1.0};
Point(94) = {0.037387, -0.732490, 0, 1.0};
Point(95) = {0.036350, -0.731626, 0, 1.0};
Point(96) = {0.034431, -0.730814, 0, 1.0};
Point(97) = {0.031679, -0.730092, 0, 1.0};
Point(98) = {0.028131, -0.729453, 0, 1.0};
Point(99) = {0.023831, -0.728905, 0, 1.0};
Point(100) = {0.018827, -0.728447, 0, 1.0};
Point(101) = {0.013171, -0.728074, 0, 1.0};
Point(102) = {0.006932, -0.727779, 0, 1.0};
Point(103) = {0.000188, -0.727560, 0, 1.0};
Point(104) = {-0.006981, -0.727424, 0, 1.0};
Point(105) = {-0.014499, -0.727372, 0, 1.0};
Point(106) = {-0.022274, -0.727399, 0, 1.0};
Point(107) = {-0.030222, -0.727519, 0, 1.0};
Point(108) = {-0.038273, -0.727729, 0, 1.0};
Point(109) = {-0.046331, -0.728005, 0, 1.0};
Point(110) = {-0.054282, -0.728372, 0, 1.0};
Point(111) = {-0.062089, -0.728884, 0, 1.0};
Point(112) = {-0.069779, -0.729502, 0, 1.0};
Point(113) = {-0.077311, -0.730097, 0, 1.0};
Point(114) = {-0.084567, -0.730539, 0, 1.0};
Point(115) = {-0.091374, -0.730727, 0, 1.0};
Point(116) = {-0.097520, -0.730625, 0, 1.0};
Point(117) = {-0.102810, -0.730243, 0, 1.0};
Point(118) = {-0.107035, -0.729645, 0, 1.0};
Point(119) = {-0.110027, -0.729003, 0, 1.0};
Point(120) = {-0.111768, -0.728533, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html