SetFactory("OpenCASCADE");

Point(1) = {0.112424, 0.728357, 0, 1.0};
Point(2) = {0.111893, 0.728578, 0, 1.0};
Point(3) = {0.110412, 0.729272, 0, 1.0};
Point(4) = {0.108182, 0.730409, 0, 1.0};
Point(5) = {0.105342, 0.731843, 0, 1.0};
Point(6) = {0.101900, 0.733434, 0, 1.0};
Point(7) = {0.097843, 0.735150, 0, 1.0};
Point(8) = {0.093236, 0.736997, 0, 1.0};
Point(9) = {0.088206, 0.738929, 0, 1.0};
Point(10) = {0.082870, 0.740801, 0, 1.0};
Point(11) = {0.077183, 0.742408, 0, 1.0};
Point(12) = {0.070944, 0.743781, 0, 1.0};
Point(13) = {0.064226, 0.745171, 0, 1.0};
Point(14) = {0.057340, 0.746599, 0, 1.0};
Point(15) = {0.050435, 0.747878, 0, 1.0};
Point(16) = {0.043533, 0.748895, 0, 1.0};
Point(17) = {0.036633, 0.749579, 0, 1.0};
Point(18) = {0.029710, 0.749928, 0, 1.0};
Point(19) = {0.022794, 0.750000, 0, 1.0};
Point(20) = {0.015972, 0.749831, 0, 1.0};
Point(21) = {0.009317, 0.749431, 0, 1.0};
Point(22) = {0.002898, 0.748811, 0, 1.0};
Point(23) = {-0.003220, 0.747984, 0, 1.0};
Point(24) = {-0.008979, 0.746966, 0, 1.0};
Point(25) = {-0.014324, 0.745774, 0, 1.0};
Point(26) = {-0.019205, 0.744432, 0, 1.0};
Point(27) = {-0.023576, 0.742963, 0, 1.0};
Point(28) = {-0.027401, 0.741393, 0, 1.0};
Point(29) = {-0.030648, 0.739759, 0, 1.0};
Point(30) = {-0.033297, 0.738101, 0, 1.0};
Point(31) = {-0.035324, 0.736469, 0, 1.0};
Point(32) = {-0.036711, 0.734921, 0, 1.0};
Point(33) = {-0.037439, 0.733547, 0, 1.0};
Point(34) = {-0.037346, 0.732484, 0, 1.0};
Point(35) = {-0.036308, 0.731620, 0, 1.0};
Point(36) = {-0.034389, 0.730808, 0, 1.0};
Point(37) = {-0.031635, 0.730085, 0, 1.0};
Point(38) = {-0.028087, 0.729447, 0, 1.0};
Point(39) = {-0.023785, 0.728898, 0, 1.0};
Point(40) = {-0.018780, 0.728440, 0, 1.0};
Point(41) = {-0.013122, 0.728067, 0, 1.0};
Point(42) = {-0.006880, 0.727771, 0, 1.0};
Point(43) = {-0.000134, 0.727553, 0, 1.0};
Point(44) = {0.007037, 0.727417, 0, 1.0};
Point(45) = {0.014557, 0.727364, 0, 1.0};
Point(46) = {0.022335, 0.727392, 0, 1.0};
Point(47) = {0.030285, 0.727512, 0, 1.0};
Point(48) = {0.038339, 0.727721, 0, 1.0};
Point(49) = {0.046399, 0.727998, 0, 1.0};
Point(50) = {0.054353, 0.728366, 0, 1.0};
Point(51) = {0.062163, 0.728877, 0, 1.0};
Point(52) = {0.069855, 0.729496, 0, 1.0};
Point(53) = {0.077390, 0.730091, 0, 1.0};
Point(54) = {0.084648, 0.730533, 0, 1.0};
Point(55) = {0.091457, 0.730721, 0, 1.0};
Point(56) = {0.097605, 0.730619, 0, 1.0};
Point(57) = {0.102897, 0.730237, 0, 1.0};
Point(58) = {0.107123, 0.729638, 0, 1.0};
Point(59) = {0.110116, 0.728996, 0, 1.0};
Point(60) = {0.111857, 0.728527, 0, 1.0};
Point(61) = {-0.112424, -0.728357, 0, 1.0};
Point(62) = {-0.111893, -0.728578, 0, 1.0};
Point(63) = {-0.110412, -0.729272, 0, 1.0};
Point(64) = {-0.108182, -0.730409, 0, 1.0};
Point(65) = {-0.105342, -0.731843, 0, 1.0};
Point(66) = {-0.101900, -0.733434, 0, 1.0};
Point(67) = {-0.097843, -0.735150, 0, 1.0};
Point(68) = {-0.093236, -0.736997, 0, 1.0};
Point(69) = {-0.088206, -0.738929, 0, 1.0};
Point(70) = {-0.082870, -0.740801, 0, 1.0};
Point(71) = {-0.077183, -0.742408, 0, 1.0};
Point(72) = {-0.070944, -0.743781, 0, 1.0};
Point(73) = {-0.064226, -0.745171, 0, 1.0};
Point(74) = {-0.057340, -0.746599, 0, 1.0};
Point(75) = {-0.050435, -0.747878, 0, 1.0};
Point(76) = {-0.043533, -0.748895, 0, 1.0};
Point(77) = {-0.036633, -0.749579, 0, 1.0};
Point(78) = {-0.029710, -0.749928, 0, 1.0};
Point(79) = {-0.022794, -0.750000, 0, 1.0};
Point(80) = {-0.015972, -0.749831, 0, 1.0};
Point(81) = {-0.009317, -0.749431, 0, 1.0};
Point(82) = {-0.002898, -0.748811, 0, 1.0};
Point(83) = {0.003220, -0.747984, 0, 1.0};
Point(84) = {0.008979, -0.746966, 0, 1.0};
Point(85) = {0.014324, -0.745774, 0, 1.0};
Point(86) = {0.019205, -0.744432, 0, 1.0};
Point(87) = {0.023576, -0.742963, 0, 1.0};
Point(88) = {0.027401, -0.741393, 0, 1.0};
Point(89) = {0.030648, -0.739759, 0, 1.0};
Point(90) = {0.033297, -0.738101, 0, 1.0};
Point(91) = {0.035324, -0.736469, 0, 1.0};
Point(92) = {0.036711, -0.734921, 0, 1.0};
Point(93) = {0.037439, -0.733547, 0, 1.0};
Point(94) = {0.037346, -0.732484, 0, 1.0};
Point(95) = {0.036308, -0.731620, 0, 1.0};
Point(96) = {0.034389, -0.730808, 0, 1.0};
Point(97) = {0.031635, -0.730085, 0, 1.0};
Point(98) = {0.028087, -0.729447, 0, 1.0};
Point(99) = {0.023785, -0.728898, 0, 1.0};
Point(100) = {0.018780, -0.728440, 0, 1.0};
Point(101) = {0.013122, -0.728067, 0, 1.0};
Point(102) = {0.006880, -0.727771, 0, 1.0};
Point(103) = {0.000134, -0.727553, 0, 1.0};
Point(104) = {-0.007037, -0.727417, 0, 1.0};
Point(105) = {-0.014557, -0.727364, 0, 1.0};
Point(106) = {-0.022335, -0.727392, 0, 1.0};
Point(107) = {-0.030285, -0.727512, 0, 1.0};
Point(108) = {-0.038339, -0.727721, 0, 1.0};
Point(109) = {-0.046399, -0.727998, 0, 1.0};
Point(110) = {-0.054353, -0.728366, 0, 1.0};
Point(111) = {-0.062163, -0.728877, 0, 1.0};
Point(112) = {-0.069855, -0.729496, 0, 1.0};
Point(113) = {-0.077390, -0.730091, 0, 1.0};
Point(114) = {-0.084648, -0.730533, 0, 1.0};
Point(115) = {-0.091457, -0.730721, 0, 1.0};
Point(116) = {-0.097605, -0.730619, 0, 1.0};
Point(117) = {-0.102897, -0.730237, 0, 1.0};
Point(118) = {-0.107123, -0.729638, 0, 1.0};
Point(119) = {-0.110116, -0.728996, 0, 1.0};
Point(120) = {-0.111857, -0.728527, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html