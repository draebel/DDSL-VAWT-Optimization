SetFactory("OpenCASCADE");

Point(1) = {0.074900, 0.737117, 0, 1.0};
Point(2) = {0.074413, 0.737251, 0, 1.0};
Point(3) = {0.073013, 0.737632, 0, 1.0};
Point(4) = {0.070807, 0.738218, 0, 1.0};
Point(5) = {0.067858, 0.738966, 0, 1.0};
Point(6) = {0.064173, 0.739845, 0, 1.0};
Point(7) = {0.059786, 0.740812, 0, 1.0};
Point(8) = {0.054757, 0.741825, 0, 1.0};
Point(9) = {0.049152, 0.742849, 0, 1.0};
Point(10) = {0.043041, 0.743855, 0, 1.0};
Point(11) = {0.036494, 0.744823, 0, 1.0};
Point(12) = {0.029590, 0.745734, 0, 1.0};
Point(13) = {0.022403, 0.746575, 0, 1.0};
Point(14) = {0.015015, 0.747337, 0, 1.0};
Point(15) = {0.007502, 0.748011, 0, 1.0};
Point(16) = {-0.000055, 0.748592, 0, 1.0};
Point(17) = {-0.007579, 0.749076, 0, 1.0};
Point(18) = {-0.014992, 0.749460, 0, 1.0};
Point(19) = {-0.022222, 0.749742, 0, 1.0};
Point(20) = {-0.029206, 0.749922, 0, 1.0};
Point(21) = {-0.035869, 0.750000, 0, 1.0};
Point(22) = {-0.042156, 0.749978, 0, 1.0};
Point(23) = {-0.048011, 0.749857, 0, 1.0};
Point(24) = {-0.053383, 0.749640, 0, 1.0};
Point(25) = {-0.058230, 0.749331, 0, 1.0};
Point(26) = {-0.062511, 0.748931, 0, 1.0};
Point(27) = {-0.066194, 0.748446, 0, 1.0};
Point(28) = {-0.069250, 0.747879, 0, 1.0};
Point(29) = {-0.071659, 0.747236, 0, 1.0};
Point(30) = {-0.073414, 0.746518, 0, 1.0};
Point(31) = {-0.074502, 0.745723, 0, 1.0};
Point(32) = {-0.074900, 0.744857, 0, 1.0};
Point(33) = {-0.074432, 0.744158, 0, 1.0};
Point(34) = {-0.073095, 0.743536, 0, 1.0};
Point(35) = {-0.070988, 0.742960, 0, 1.0};
Point(36) = {-0.068123, 0.742416, 0, 1.0};
Point(37) = {-0.064524, 0.741903, 0, 1.0};
Point(38) = {-0.060214, 0.741420, 0, 1.0};
Point(39) = {-0.055238, 0.740970, 0, 1.0};
Point(40) = {-0.049644, 0.740554, 0, 1.0};
Point(41) = {-0.043490, 0.740173, 0, 1.0};
Point(42) = {-0.036845, 0.739827, 0, 1.0};
Point(43) = {-0.029784, 0.739517, 0, 1.0};
Point(44) = {-0.022386, 0.739242, 0, 1.0};
Point(45) = {-0.014737, 0.739002, 0, 1.0};
Point(46) = {-0.006928, 0.738795, 0, 1.0};
Point(47) = {0.000949, 0.738619, 0, 1.0};
Point(48) = {0.008798, 0.738473, 0, 1.0};
Point(49) = {0.016578, 0.738351, 0, 1.0};
Point(50) = {0.024257, 0.738249, 0, 1.0};
Point(51) = {0.031752, 0.738165, 0, 1.0};
Point(52) = {0.038958, 0.738091, 0, 1.0};
Point(53) = {0.045771, 0.738023, 0, 1.0};
Point(54) = {0.052081, 0.737952, 0, 1.0};
Point(55) = {0.057791, 0.737870, 0, 1.0};
Point(56) = {0.062805, 0.737769, 0, 1.0};
Point(57) = {0.067039, 0.737641, 0, 1.0};
Point(58) = {0.070418, 0.737486, 0, 1.0};
Point(59) = {0.072887, 0.737317, 0, 1.0};
Point(60) = {0.074392, 0.737175, 0, 1.0};
Point(61) = {-0.074900, -0.737117, 0, 1.0};
Point(62) = {-0.074413, -0.737251, 0, 1.0};
Point(63) = {-0.073013, -0.737632, 0, 1.0};
Point(64) = {-0.070807, -0.738218, 0, 1.0};
Point(65) = {-0.067858, -0.738966, 0, 1.0};
Point(66) = {-0.064173, -0.739845, 0, 1.0};
Point(67) = {-0.059786, -0.740812, 0, 1.0};
Point(68) = {-0.054757, -0.741825, 0, 1.0};
Point(69) = {-0.049152, -0.742849, 0, 1.0};
Point(70) = {-0.043041, -0.743855, 0, 1.0};
Point(71) = {-0.036494, -0.744823, 0, 1.0};
Point(72) = {-0.029590, -0.745734, 0, 1.0};
Point(73) = {-0.022403, -0.746575, 0, 1.0};
Point(74) = {-0.015015, -0.747337, 0, 1.0};
Point(75) = {-0.007502, -0.748011, 0, 1.0};
Point(76) = {0.000055, -0.748592, 0, 1.0};
Point(77) = {0.007579, -0.749076, 0, 1.0};
Point(78) = {0.014992, -0.749460, 0, 1.0};
Point(79) = {0.022222, -0.749742, 0, 1.0};
Point(80) = {0.029206, -0.749922, 0, 1.0};
Point(81) = {0.035869, -0.750000, 0, 1.0};
Point(82) = {0.042156, -0.749978, 0, 1.0};
Point(83) = {0.048011, -0.749857, 0, 1.0};
Point(84) = {0.053383, -0.749640, 0, 1.0};
Point(85) = {0.058230, -0.749331, 0, 1.0};
Point(86) = {0.062511, -0.748931, 0, 1.0};
Point(87) = {0.066194, -0.748446, 0, 1.0};
Point(88) = {0.069250, -0.747879, 0, 1.0};
Point(89) = {0.071659, -0.747236, 0, 1.0};
Point(90) = {0.073414, -0.746518, 0, 1.0};
Point(91) = {0.074502, -0.745723, 0, 1.0};
Point(92) = {0.074900, -0.744857, 0, 1.0};
Point(93) = {0.074432, -0.744158, 0, 1.0};
Point(94) = {0.073095, -0.743536, 0, 1.0};
Point(95) = {0.070988, -0.742960, 0, 1.0};
Point(96) = {0.068123, -0.742416, 0, 1.0};
Point(97) = {0.064524, -0.741903, 0, 1.0};
Point(98) = {0.060214, -0.741420, 0, 1.0};
Point(99) = {0.055238, -0.740970, 0, 1.0};
Point(100) = {0.049644, -0.740554, 0, 1.0};
Point(101) = {0.043490, -0.740173, 0, 1.0};
Point(102) = {0.036845, -0.739827, 0, 1.0};
Point(103) = {0.029784, -0.739517, 0, 1.0};
Point(104) = {0.022386, -0.739242, 0, 1.0};
Point(105) = {0.014737, -0.739002, 0, 1.0};
Point(106) = {0.006928, -0.738795, 0, 1.0};
Point(107) = {-0.000949, -0.738619, 0, 1.0};
Point(108) = {-0.008798, -0.738473, 0, 1.0};
Point(109) = {-0.016578, -0.738351, 0, 1.0};
Point(110) = {-0.024257, -0.738249, 0, 1.0};
Point(111) = {-0.031752, -0.738165, 0, 1.0};
Point(112) = {-0.038958, -0.738091, 0, 1.0};
Point(113) = {-0.045771, -0.738023, 0, 1.0};
Point(114) = {-0.052081, -0.737952, 0, 1.0};
Point(115) = {-0.057791, -0.737870, 0, 1.0};
Point(116) = {-0.062805, -0.737769, 0, 1.0};
Point(117) = {-0.067039, -0.737641, 0, 1.0};
Point(118) = {-0.070418, -0.737486, 0, 1.0};
Point(119) = {-0.072887, -0.737317, 0, 1.0};
Point(120) = {-0.074392, -0.737175, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html