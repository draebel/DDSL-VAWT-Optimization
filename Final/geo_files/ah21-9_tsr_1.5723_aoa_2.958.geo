SetFactory("OpenCASCADE");

Point(1) = {0.149734, 0.732822, 0, 1.0};
Point(2) = {0.149084, 0.733001, 0, 1.0};
Point(3) = {0.147218, 0.733510, 0, 1.0};
Point(4) = {0.144276, 0.734291, 0, 1.0};
Point(5) = {0.140344, 0.735289, 0, 1.0};
Point(6) = {0.135430, 0.736460, 0, 1.0};
Point(7) = {0.129581, 0.737749, 0, 1.0};
Point(8) = {0.122876, 0.739100, 0, 1.0};
Point(9) = {0.115402, 0.740465, 0, 1.0};
Point(10) = {0.107255, 0.741807, 0, 1.0};
Point(11) = {0.098526, 0.743097, 0, 1.0};
Point(12) = {0.089320, 0.744312, 0, 1.0};
Point(13) = {0.079737, 0.745434, 0, 1.0};
Point(14) = {0.069886, 0.746449, 0, 1.0};
Point(15) = {0.059869, 0.747348, 0, 1.0};
Point(16) = {0.049794, 0.748123, 0, 1.0};
Point(17) = {0.039762, 0.748768, 0, 1.0};
Point(18) = {0.029877, 0.749280, 0, 1.0};
Point(19) = {0.020238, 0.749656, 0, 1.0};
Point(20) = {0.010926, 0.749896, 0, 1.0};
Point(21) = {0.002041, 0.750000, 0, 1.0};
Point(22) = {-0.006342, 0.749971, 0, 1.0};
Point(23) = {-0.014148, 0.749810, 0, 1.0};
Point(24) = {-0.021311, 0.749521, 0, 1.0};
Point(25) = {-0.027773, 0.749107, 0, 1.0};
Point(26) = {-0.033482, 0.748575, 0, 1.0};
Point(27) = {-0.038392, 0.747928, 0, 1.0};
Point(28) = {-0.042466, 0.747172, 0, 1.0};
Point(29) = {-0.045679, 0.746315, 0, 1.0};
Point(30) = {-0.048019, 0.745357, 0, 1.0};
Point(31) = {-0.049470, 0.744298, 0, 1.0};
Point(32) = {-0.050000, 0.743143, 0, 1.0};
Point(33) = {-0.049375, 0.742211, 0, 1.0};
Point(34) = {-0.047594, 0.741381, 0, 1.0};
Point(35) = {-0.044784, 0.740613, 0, 1.0};
Point(36) = {-0.040964, 0.739888, 0, 1.0};
Point(37) = {-0.036165, 0.739203, 0, 1.0};
Point(38) = {-0.030418, 0.738560, 0, 1.0};
Point(39) = {-0.023785, 0.737960, 0, 1.0};
Point(40) = {-0.016325, 0.737405, 0, 1.0};
Point(41) = {-0.008121, 0.736897, 0, 1.0};
Point(42) = {0.000739, 0.736435, 0, 1.0};
Point(43) = {0.010155, 0.736022, 0, 1.0};
Point(44) = {0.020019, 0.735656, 0, 1.0};
Point(45) = {0.030218, 0.735335, 0, 1.0};
Point(46) = {0.040630, 0.735060, 0, 1.0};
Point(47) = {0.051132, 0.734826, 0, 1.0};
Point(48) = {0.061597, 0.734630, 0, 1.0};
Point(49) = {0.071971, 0.734468, 0, 1.0};
Point(50) = {0.082210, 0.734333, 0, 1.0};
Point(51) = {0.092203, 0.734220, 0, 1.0};
Point(52) = {0.101811, 0.734121, 0, 1.0};
Point(53) = {0.110894, 0.734030, 0, 1.0};
Point(54) = {0.119308, 0.733936, 0, 1.0};
Point(55) = {0.126921, 0.733827, 0, 1.0};
Point(56) = {0.133607, 0.733692, 0, 1.0};
Point(57) = {0.139252, 0.733522, 0, 1.0};
Point(58) = {0.143757, 0.733315, 0, 1.0};
Point(59) = {0.147050, 0.733090, 0, 1.0};
Point(60) = {0.149057, 0.732900, 0, 1.0};
Point(61) = {-0.149734, -0.732822, 0, 1.0};
Point(62) = {-0.149084, -0.733001, 0, 1.0};
Point(63) = {-0.147218, -0.733510, 0, 1.0};
Point(64) = {-0.144276, -0.734291, 0, 1.0};
Point(65) = {-0.140344, -0.735289, 0, 1.0};
Point(66) = {-0.135430, -0.736460, 0, 1.0};
Point(67) = {-0.129581, -0.737749, 0, 1.0};
Point(68) = {-0.122876, -0.739100, 0, 1.0};
Point(69) = {-0.115402, -0.740465, 0, 1.0};
Point(70) = {-0.107255, -0.741807, 0, 1.0};
Point(71) = {-0.098526, -0.743097, 0, 1.0};
Point(72) = {-0.089320, -0.744312, 0, 1.0};
Point(73) = {-0.079737, -0.745434, 0, 1.0};
Point(74) = {-0.069886, -0.746449, 0, 1.0};
Point(75) = {-0.059869, -0.747348, 0, 1.0};
Point(76) = {-0.049794, -0.748123, 0, 1.0};
Point(77) = {-0.039762, -0.748768, 0, 1.0};
Point(78) = {-0.029877, -0.749280, 0, 1.0};
Point(79) = {-0.020238, -0.749656, 0, 1.0};
Point(80) = {-0.010926, -0.749896, 0, 1.0};
Point(81) = {-0.002041, -0.750000, 0, 1.0};
Point(82) = {0.006342, -0.749971, 0, 1.0};
Point(83) = {0.014148, -0.749810, 0, 1.0};
Point(84) = {0.021311, -0.749521, 0, 1.0};
Point(85) = {0.027773, -0.749107, 0, 1.0};
Point(86) = {0.033482, -0.748575, 0, 1.0};
Point(87) = {0.038392, -0.747928, 0, 1.0};
Point(88) = {0.042466, -0.747172, 0, 1.0};
Point(89) = {0.045679, -0.746315, 0, 1.0};
Point(90) = {0.048019, -0.745357, 0, 1.0};
Point(91) = {0.049470, -0.744298, 0, 1.0};
Point(92) = {0.050000, -0.743143, 0, 1.0};
Point(93) = {0.049375, -0.742211, 0, 1.0};
Point(94) = {0.047594, -0.741381, 0, 1.0};
Point(95) = {0.044784, -0.740613, 0, 1.0};
Point(96) = {0.040964, -0.739888, 0, 1.0};
Point(97) = {0.036165, -0.739203, 0, 1.0};
Point(98) = {0.030418, -0.738560, 0, 1.0};
Point(99) = {0.023785, -0.737960, 0, 1.0};
Point(100) = {0.016325, -0.737405, 0, 1.0};
Point(101) = {0.008121, -0.736897, 0, 1.0};
Point(102) = {-0.000739, -0.736435, 0, 1.0};
Point(103) = {-0.010155, -0.736022, 0, 1.0};
Point(104) = {-0.020019, -0.735656, 0, 1.0};
Point(105) = {-0.030218, -0.735335, 0, 1.0};
Point(106) = {-0.040630, -0.735060, 0, 1.0};
Point(107) = {-0.051132, -0.734826, 0, 1.0};
Point(108) = {-0.061597, -0.734630, 0, 1.0};
Point(109) = {-0.071971, -0.734468, 0, 1.0};
Point(110) = {-0.082210, -0.734333, 0, 1.0};
Point(111) = {-0.092203, -0.734220, 0, 1.0};
Point(112) = {-0.101811, -0.734121, 0, 1.0};
Point(113) = {-0.110894, -0.734030, 0, 1.0};
Point(114) = {-0.119308, -0.733936, 0, 1.0};
Point(115) = {-0.126921, -0.733827, 0, 1.0};
Point(116) = {-0.133607, -0.733692, 0, 1.0};
Point(117) = {-0.139252, -0.733522, 0, 1.0};
Point(118) = {-0.143757, -0.733315, 0, 1.0};
Point(119) = {-0.147050, -0.733090, 0, 1.0};
Point(120) = {-0.149057, -0.732900, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html