SetFactory("OpenCASCADE");

Point(1) = {0.112350, 0.737117, 0, 1.0};
Point(2) = {0.111863, 0.737251, 0, 1.0};
Point(3) = {0.110463, 0.737632, 0, 1.0};
Point(4) = {0.108257, 0.738218, 0, 1.0};
Point(5) = {0.105308, 0.738966, 0, 1.0};
Point(6) = {0.101623, 0.739845, 0, 1.0};
Point(7) = {0.097236, 0.740812, 0, 1.0};
Point(8) = {0.092207, 0.741825, 0, 1.0};
Point(9) = {0.086602, 0.742849, 0, 1.0};
Point(10) = {0.080491, 0.743855, 0, 1.0};
Point(11) = {0.073944, 0.744823, 0, 1.0};
Point(12) = {0.067040, 0.745734, 0, 1.0};
Point(13) = {0.059853, 0.746575, 0, 1.0};
Point(14) = {0.052465, 0.747337, 0, 1.0};
Point(15) = {0.044952, 0.748011, 0, 1.0};
Point(16) = {0.037395, 0.748592, 0, 1.0};
Point(17) = {0.029871, 0.749076, 0, 1.0};
Point(18) = {0.022458, 0.749460, 0, 1.0};
Point(19) = {0.015228, 0.749742, 0, 1.0};
Point(20) = {0.008244, 0.749922, 0, 1.0};
Point(21) = {0.001581, 0.750000, 0, 1.0};
Point(22) = {-0.004706, 0.749978, 0, 1.0};
Point(23) = {-0.010561, 0.749857, 0, 1.0};
Point(24) = {-0.015933, 0.749640, 0, 1.0};
Point(25) = {-0.020779, 0.749331, 0, 1.0};
Point(26) = {-0.025061, 0.748931, 0, 1.0};
Point(27) = {-0.028744, 0.748446, 0, 1.0};
Point(28) = {-0.031800, 0.747879, 0, 1.0};
Point(29) = {-0.034209, 0.747236, 0, 1.0};
Point(30) = {-0.035964, 0.746518, 0, 1.0};
Point(31) = {-0.037052, 0.745723, 0, 1.0};
Point(32) = {-0.037450, 0.744857, 0, 1.0};
Point(33) = {-0.036981, 0.744158, 0, 1.0};
Point(34) = {-0.035645, 0.743536, 0, 1.0};
Point(35) = {-0.033538, 0.742960, 0, 1.0};
Point(36) = {-0.030673, 0.742416, 0, 1.0};
Point(37) = {-0.027074, 0.741903, 0, 1.0};
Point(38) = {-0.022764, 0.741420, 0, 1.0};
Point(39) = {-0.017788, 0.740970, 0, 1.0};
Point(40) = {-0.012194, 0.740554, 0, 1.0};
Point(41) = {-0.006040, 0.740173, 0, 1.0};
Point(42) = {0.000605, 0.739827, 0, 1.0};
Point(43) = {0.007666, 0.739517, 0, 1.0};
Point(44) = {0.015064, 0.739242, 0, 1.0};
Point(45) = {0.022713, 0.739002, 0, 1.0};
Point(46) = {0.030522, 0.738795, 0, 1.0};
Point(47) = {0.038399, 0.738619, 0, 1.0};
Point(48) = {0.046248, 0.738473, 0, 1.0};
Point(49) = {0.054028, 0.738351, 0, 1.0};
Point(50) = {0.061707, 0.738249, 0, 1.0};
Point(51) = {0.069202, 0.738165, 0, 1.0};
Point(52) = {0.076408, 0.738091, 0, 1.0};
Point(53) = {0.083221, 0.738023, 0, 1.0};
Point(54) = {0.089531, 0.737952, 0, 1.0};
Point(55) = {0.095241, 0.737870, 0, 1.0};
Point(56) = {0.100255, 0.737769, 0, 1.0};
Point(57) = {0.104489, 0.737641, 0, 1.0};
Point(58) = {0.107868, 0.737486, 0, 1.0};
Point(59) = {0.110337, 0.737317, 0, 1.0};
Point(60) = {0.111842, 0.737175, 0, 1.0};
Point(61) = {-0.112350, -0.737117, 0, 1.0};
Point(62) = {-0.111863, -0.737251, 0, 1.0};
Point(63) = {-0.110463, -0.737632, 0, 1.0};
Point(64) = {-0.108257, -0.738218, 0, 1.0};
Point(65) = {-0.105308, -0.738966, 0, 1.0};
Point(66) = {-0.101623, -0.739845, 0, 1.0};
Point(67) = {-0.097236, -0.740812, 0, 1.0};
Point(68) = {-0.092207, -0.741825, 0, 1.0};
Point(69) = {-0.086602, -0.742849, 0, 1.0};
Point(70) = {-0.080491, -0.743855, 0, 1.0};
Point(71) = {-0.073944, -0.744823, 0, 1.0};
Point(72) = {-0.067040, -0.745734, 0, 1.0};
Point(73) = {-0.059853, -0.746575, 0, 1.0};
Point(74) = {-0.052465, -0.747337, 0, 1.0};
Point(75) = {-0.044952, -0.748011, 0, 1.0};
Point(76) = {-0.037395, -0.748592, 0, 1.0};
Point(77) = {-0.029871, -0.749076, 0, 1.0};
Point(78) = {-0.022458, -0.749460, 0, 1.0};
Point(79) = {-0.015228, -0.749742, 0, 1.0};
Point(80) = {-0.008244, -0.749922, 0, 1.0};
Point(81) = {-0.001581, -0.750000, 0, 1.0};
Point(82) = {0.004706, -0.749978, 0, 1.0};
Point(83) = {0.010561, -0.749857, 0, 1.0};
Point(84) = {0.015933, -0.749640, 0, 1.0};
Point(85) = {0.020779, -0.749331, 0, 1.0};
Point(86) = {0.025061, -0.748931, 0, 1.0};
Point(87) = {0.028744, -0.748446, 0, 1.0};
Point(88) = {0.031800, -0.747879, 0, 1.0};
Point(89) = {0.034209, -0.747236, 0, 1.0};
Point(90) = {0.035964, -0.746518, 0, 1.0};
Point(91) = {0.037052, -0.745723, 0, 1.0};
Point(92) = {0.037450, -0.744857, 0, 1.0};
Point(93) = {0.036981, -0.744158, 0, 1.0};
Point(94) = {0.035645, -0.743536, 0, 1.0};
Point(95) = {0.033538, -0.742960, 0, 1.0};
Point(96) = {0.030673, -0.742416, 0, 1.0};
Point(97) = {0.027074, -0.741903, 0, 1.0};
Point(98) = {0.022764, -0.741420, 0, 1.0};
Point(99) = {0.017788, -0.740970, 0, 1.0};
Point(100) = {0.012194, -0.740554, 0, 1.0};
Point(101) = {0.006040, -0.740173, 0, 1.0};
Point(102) = {-0.000605, -0.739827, 0, 1.0};
Point(103) = {-0.007666, -0.739517, 0, 1.0};
Point(104) = {-0.015064, -0.739242, 0, 1.0};
Point(105) = {-0.022713, -0.739002, 0, 1.0};
Point(106) = {-0.030522, -0.738795, 0, 1.0};
Point(107) = {-0.038399, -0.738619, 0, 1.0};
Point(108) = {-0.046248, -0.738473, 0, 1.0};
Point(109) = {-0.054028, -0.738351, 0, 1.0};
Point(110) = {-0.061707, -0.738249, 0, 1.0};
Point(111) = {-0.069202, -0.738165, 0, 1.0};
Point(112) = {-0.076408, -0.738091, 0, 1.0};
Point(113) = {-0.083221, -0.738023, 0, 1.0};
Point(114) = {-0.089531, -0.737952, 0, 1.0};
Point(115) = {-0.095241, -0.737870, 0, 1.0};
Point(116) = {-0.100255, -0.737769, 0, 1.0};
Point(117) = {-0.104489, -0.737641, 0, 1.0};
Point(118) = {-0.107868, -0.737486, 0, 1.0};
Point(119) = {-0.110337, -0.737317, 0, 1.0};
Point(120) = {-0.111842, -0.737175, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html