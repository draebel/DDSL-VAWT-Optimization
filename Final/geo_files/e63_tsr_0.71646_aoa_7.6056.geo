SetFactory("OpenCASCADE");

Point(1) = {0.111375, 0.725331, 0, 1.0};
Point(2) = {0.110981, 0.725566, 0, 1.0};
Point(3) = {0.109891, 0.726244, 0, 1.0};
Point(4) = {0.108228, 0.727242, 0, 1.0};
Point(5) = {0.105996, 0.728398, 0, 1.0};
Point(6) = {0.103124, 0.729648, 0, 1.0};
Point(7) = {0.099604, 0.731000, 0, 1.0};
Point(8) = {0.095477, 0.732446, 0, 1.0};
Point(9) = {0.090783, 0.733956, 0, 1.0};
Point(10) = {0.085568, 0.735509, 0, 1.0};
Point(11) = {0.079882, 0.737075, 0, 1.0};
Point(12) = {0.073779, 0.738639, 0, 1.0};
Point(13) = {0.067319, 0.740169, 0, 1.0};
Point(14) = {0.060567, 0.741649, 0, 1.0};
Point(15) = {0.053589, 0.743055, 0, 1.0};
Point(16) = {0.046451, 0.744371, 0, 1.0};
Point(17) = {0.039224, 0.745576, 0, 1.0};
Point(18) = {0.031980, 0.746661, 0, 1.0};
Point(19) = {0.024789, 0.747607, 0, 1.0};
Point(20) = {0.017723, 0.748408, 0, 1.0};
Point(21) = {0.010848, 0.749052, 0, 1.0};
Point(22) = {0.004235, 0.749536, 0, 1.0};
Point(23) = {-0.002054, 0.749851, 0, 1.0};
Point(24) = {-0.007963, 0.750000, 0, 1.0};
Point(25) = {-0.013435, 0.749982, 0, 1.0};
Point(26) = {-0.018421, 0.749805, 0, 1.0};
Point(27) = {-0.022881, 0.749475, 0, 1.0};
Point(28) = {-0.026778, 0.749006, 0, 1.0};
Point(29) = {-0.030083, 0.748416, 0, 1.0};
Point(30) = {-0.032778, 0.747729, 0, 1.0};
Point(31) = {-0.034841, 0.746978, 0, 1.0};
Point(32) = {-0.036275, 0.746204, 0, 1.0};
Point(33) = {-0.037068, 0.745481, 0, 1.0};
Point(34) = {-0.037170, 0.744952, 0, 1.0};
Point(35) = {-0.036457, 0.744607, 0, 1.0};
Point(36) = {-0.034836, 0.744355, 0, 1.0};
Point(37) = {-0.032341, 0.744177, 0, 1.0};
Point(38) = {-0.028977, 0.744065, 0, 1.0};
Point(39) = {-0.024765, 0.743985, 0, 1.0};
Point(40) = {-0.019740, 0.743909, 0, 1.0};
Point(41) = {-0.013957, 0.743807, 0, 1.0};
Point(42) = {-0.007480, 0.743651, 0, 1.0};
Point(43) = {-0.000389, 0.743420, 0, 1.0};
Point(44) = {0.007228, 0.743088, 0, 1.0};
Point(45) = {0.015271, 0.742643, 0, 1.0};
Point(46) = {0.023636, 0.742066, 0, 1.0};
Point(47) = {0.032214, 0.741353, 0, 1.0};
Point(48) = {0.040885, 0.740495, 0, 1.0};
Point(49) = {0.049529, 0.739498, 0, 1.0};
Point(50) = {0.058024, 0.738364, 0, 1.0};
Point(51) = {0.066250, 0.737112, 0, 1.0};
Point(52) = {0.074093, 0.735760, 0, 1.0};
Point(53) = {0.081441, 0.734334, 0, 1.0};
Point(54) = {0.088186, 0.732858, 0, 1.0};
Point(55) = {0.094232, 0.731374, 0, 1.0};
Point(56) = {0.099486, 0.729911, 0, 1.0};
Point(57) = {0.103868, 0.728509, 0, 1.0};
Point(58) = {0.107264, 0.727221, 0, 1.0};
Point(59) = {0.109605, 0.726187, 0, 1.0};
Point(60) = {0.110942, 0.725543, 0, 1.0};
Point(61) = {-0.111375, -0.725331, 0, 1.0};
Point(62) = {-0.110981, -0.725566, 0, 1.0};
Point(63) = {-0.109891, -0.726244, 0, 1.0};
Point(64) = {-0.108228, -0.727242, 0, 1.0};
Point(65) = {-0.105996, -0.728398, 0, 1.0};
Point(66) = {-0.103124, -0.729648, 0, 1.0};
Point(67) = {-0.099604, -0.731000, 0, 1.0};
Point(68) = {-0.095477, -0.732446, 0, 1.0};
Point(69) = {-0.090783, -0.733956, 0, 1.0};
Point(70) = {-0.085568, -0.735509, 0, 1.0};
Point(71) = {-0.079882, -0.737075, 0, 1.0};
Point(72) = {-0.073779, -0.738639, 0, 1.0};
Point(73) = {-0.067319, -0.740169, 0, 1.0};
Point(74) = {-0.060567, -0.741649, 0, 1.0};
Point(75) = {-0.053589, -0.743055, 0, 1.0};
Point(76) = {-0.046451, -0.744371, 0, 1.0};
Point(77) = {-0.039224, -0.745576, 0, 1.0};
Point(78) = {-0.031980, -0.746661, 0, 1.0};
Point(79) = {-0.024789, -0.747607, 0, 1.0};
Point(80) = {-0.017723, -0.748408, 0, 1.0};
Point(81) = {-0.010848, -0.749052, 0, 1.0};
Point(82) = {-0.004235, -0.749536, 0, 1.0};
Point(83) = {0.002054, -0.749851, 0, 1.0};
Point(84) = {0.007963, -0.750000, 0, 1.0};
Point(85) = {0.013435, -0.749982, 0, 1.0};
Point(86) = {0.018421, -0.749805, 0, 1.0};
Point(87) = {0.022881, -0.749475, 0, 1.0};
Point(88) = {0.026778, -0.749006, 0, 1.0};
Point(89) = {0.030083, -0.748416, 0, 1.0};
Point(90) = {0.032778, -0.747729, 0, 1.0};
Point(91) = {0.034841, -0.746978, 0, 1.0};
Point(92) = {0.036275, -0.746204, 0, 1.0};
Point(93) = {0.037068, -0.745481, 0, 1.0};
Point(94) = {0.037170, -0.744952, 0, 1.0};
Point(95) = {0.036457, -0.744607, 0, 1.0};
Point(96) = {0.034836, -0.744355, 0, 1.0};
Point(97) = {0.032341, -0.744177, 0, 1.0};
Point(98) = {0.028977, -0.744065, 0, 1.0};
Point(99) = {0.024765, -0.743985, 0, 1.0};
Point(100) = {0.019740, -0.743909, 0, 1.0};
Point(101) = {0.013957, -0.743807, 0, 1.0};
Point(102) = {0.007480, -0.743651, 0, 1.0};
Point(103) = {0.000389, -0.743420, 0, 1.0};
Point(104) = {-0.007228, -0.743088, 0, 1.0};
Point(105) = {-0.015271, -0.742643, 0, 1.0};
Point(106) = {-0.023636, -0.742066, 0, 1.0};
Point(107) = {-0.032214, -0.741353, 0, 1.0};
Point(108) = {-0.040885, -0.740495, 0, 1.0};
Point(109) = {-0.049529, -0.739498, 0, 1.0};
Point(110) = {-0.058024, -0.738364, 0, 1.0};
Point(111) = {-0.066250, -0.737112, 0, 1.0};
Point(112) = {-0.074093, -0.735760, 0, 1.0};
Point(113) = {-0.081441, -0.734334, 0, 1.0};
Point(114) = {-0.088186, -0.732858, 0, 1.0};
Point(115) = {-0.094232, -0.731374, 0, 1.0};
Point(116) = {-0.099486, -0.729911, 0, 1.0};
Point(117) = {-0.103868, -0.728509, 0, 1.0};
Point(118) = {-0.107264, -0.727221, 0, 1.0};
Point(119) = {-0.109605, -0.726187, 0, 1.0};
Point(120) = {-0.110942, -0.725543, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html