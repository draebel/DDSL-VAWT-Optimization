SetFactory("OpenCASCADE");

Point(1) = {0.074368, 0.725303, 0, 1.0};
Point(2) = {0.073974, 0.725539, 0, 1.0};
Point(3) = {0.072882, 0.726218, 0, 1.0};
Point(4) = {0.071218, 0.727217, 0, 1.0};
Point(5) = {0.068984, 0.728374, 0, 1.0};
Point(6) = {0.066109, 0.729625, 0, 1.0};
Point(7) = {0.062584, 0.730979, 0, 1.0};
Point(8) = {0.058453, 0.732427, 0, 1.0};
Point(9) = {0.053754, 0.733938, 0, 1.0};
Point(10) = {0.048533, 0.735493, 0, 1.0};
Point(11) = {0.042840, 0.737061, 0, 1.0};
Point(12) = {0.036731, 0.738627, 0, 1.0};
Point(13) = {0.030264, 0.740158, 0, 1.0};
Point(14) = {0.023505, 0.741640, 0, 1.0};
Point(15) = {0.016518, 0.743047, 0, 1.0};
Point(16) = {0.009373, 0.744364, 0, 1.0};
Point(17) = {0.002138, 0.745571, 0, 1.0};
Point(18) = {-0.005114, 0.746658, 0, 1.0};
Point(19) = {-0.012313, 0.747604, 0, 1.0};
Point(20) = {-0.019387, 0.748406, 0, 1.0};
Point(21) = {-0.026269, 0.749051, 0, 1.0};
Point(22) = {-0.032889, 0.749535, 0, 1.0};
Point(23) = {-0.039186, 0.749851, 0, 1.0};
Point(24) = {-0.045101, 0.750000, 0, 1.0};
Point(25) = {-0.050579, 0.749982, 0, 1.0};
Point(26) = {-0.055570, 0.749805, 0, 1.0};
Point(27) = {-0.060036, 0.749475, 0, 1.0};
Point(28) = {-0.063937, 0.749005, 0, 1.0};
Point(29) = {-0.067245, 0.748414, 0, 1.0};
Point(30) = {-0.069943, 0.747727, 0, 1.0};
Point(31) = {-0.072009, 0.746975, 0, 1.0};
Point(32) = {-0.073444, 0.746200, 0, 1.0};
Point(33) = {-0.074238, 0.745476, 0, 1.0};
Point(34) = {-0.074340, 0.744947, 0, 1.0};
Point(35) = {-0.073626, 0.744601, 0, 1.0};
Point(36) = {-0.072004, 0.744348, 0, 1.0};
Point(37) = {-0.069506, 0.744171, 0, 1.0};
Point(38) = {-0.066139, 0.744059, 0, 1.0};
Point(39) = {-0.061922, 0.743979, 0, 1.0};
Point(40) = {-0.056891, 0.743902, 0, 1.0};
Point(41) = {-0.051101, 0.743800, 0, 1.0};
Point(42) = {-0.044617, 0.743644, 0, 1.0};
Point(43) = {-0.037518, 0.743412, 0, 1.0};
Point(44) = {-0.029893, 0.743080, 0, 1.0};
Point(45) = {-0.021842, 0.742635, 0, 1.0};
Point(46) = {-0.013467, 0.742057, 0, 1.0};
Point(47) = {-0.004880, 0.741344, 0, 1.0};
Point(48) = {0.003801, 0.740484, 0, 1.0};
Point(49) = {0.012454, 0.739486, 0, 1.0};
Point(50) = {0.020959, 0.738351, 0, 1.0};
Point(51) = {0.029194, 0.737098, 0, 1.0};
Point(52) = {0.037046, 0.735744, 0, 1.0};
Point(53) = {0.044402, 0.734317, 0, 1.0};
Point(54) = {0.051154, 0.732840, 0, 1.0};
Point(55) = {0.057206, 0.731353, 0, 1.0};
Point(56) = {0.062466, 0.729889, 0, 1.0};
Point(57) = {0.066853, 0.728486, 0, 1.0};
Point(58) = {0.070253, 0.727196, 0, 1.0};
Point(59) = {0.072596, 0.726161, 0, 1.0};
Point(60) = {0.073935, 0.725516, 0, 1.0};
Point(61) = {-0.074368, -0.725303, 0, 1.0};
Point(62) = {-0.073974, -0.725539, 0, 1.0};
Point(63) = {-0.072882, -0.726218, 0, 1.0};
Point(64) = {-0.071218, -0.727217, 0, 1.0};
Point(65) = {-0.068984, -0.728374, 0, 1.0};
Point(66) = {-0.066109, -0.729625, 0, 1.0};
Point(67) = {-0.062584, -0.730979, 0, 1.0};
Point(68) = {-0.058453, -0.732427, 0, 1.0};
Point(69) = {-0.053754, -0.733938, 0, 1.0};
Point(70) = {-0.048533, -0.735493, 0, 1.0};
Point(71) = {-0.042840, -0.737061, 0, 1.0};
Point(72) = {-0.036731, -0.738627, 0, 1.0};
Point(73) = {-0.030264, -0.740158, 0, 1.0};
Point(74) = {-0.023505, -0.741640, 0, 1.0};
Point(75) = {-0.016518, -0.743047, 0, 1.0};
Point(76) = {-0.009373, -0.744364, 0, 1.0};
Point(77) = {-0.002138, -0.745571, 0, 1.0};
Point(78) = {0.005114, -0.746658, 0, 1.0};
Point(79) = {0.012313, -0.747604, 0, 1.0};
Point(80) = {0.019387, -0.748406, 0, 1.0};
Point(81) = {0.026269, -0.749051, 0, 1.0};
Point(82) = {0.032889, -0.749535, 0, 1.0};
Point(83) = {0.039186, -0.749851, 0, 1.0};
Point(84) = {0.045101, -0.750000, 0, 1.0};
Point(85) = {0.050579, -0.749982, 0, 1.0};
Point(86) = {0.055570, -0.749805, 0, 1.0};
Point(87) = {0.060036, -0.749475, 0, 1.0};
Point(88) = {0.063937, -0.749005, 0, 1.0};
Point(89) = {0.067245, -0.748414, 0, 1.0};
Point(90) = {0.069943, -0.747727, 0, 1.0};
Point(91) = {0.072009, -0.746975, 0, 1.0};
Point(92) = {0.073444, -0.746200, 0, 1.0};
Point(93) = {0.074238, -0.745476, 0, 1.0};
Point(94) = {0.074340, -0.744947, 0, 1.0};
Point(95) = {0.073626, -0.744601, 0, 1.0};
Point(96) = {0.072004, -0.744348, 0, 1.0};
Point(97) = {0.069506, -0.744171, 0, 1.0};
Point(98) = {0.066139, -0.744059, 0, 1.0};
Point(99) = {0.061922, -0.743979, 0, 1.0};
Point(100) = {0.056891, -0.743902, 0, 1.0};
Point(101) = {0.051101, -0.743800, 0, 1.0};
Point(102) = {0.044617, -0.743644, 0, 1.0};
Point(103) = {0.037518, -0.743412, 0, 1.0};
Point(104) = {0.029893, -0.743080, 0, 1.0};
Point(105) = {0.021842, -0.742635, 0, 1.0};
Point(106) = {0.013467, -0.742057, 0, 1.0};
Point(107) = {0.004880, -0.741344, 0, 1.0};
Point(108) = {-0.003801, -0.740484, 0, 1.0};
Point(109) = {-0.012454, -0.739486, 0, 1.0};
Point(110) = {-0.020959, -0.738351, 0, 1.0};
Point(111) = {-0.029194, -0.737098, 0, 1.0};
Point(112) = {-0.037046, -0.735744, 0, 1.0};
Point(113) = {-0.044402, -0.734317, 0, 1.0};
Point(114) = {-0.051154, -0.732840, 0, 1.0};
Point(115) = {-0.057206, -0.731353, 0, 1.0};
Point(116) = {-0.062466, -0.729889, 0, 1.0};
Point(117) = {-0.066853, -0.728486, 0, 1.0};
Point(118) = {-0.070253, -0.727196, 0, 1.0};
Point(119) = {-0.072596, -0.726161, 0, 1.0};
Point(120) = {-0.073935, -0.725516, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html