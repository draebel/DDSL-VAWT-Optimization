SetFactory("OpenCASCADE");

Point(1) = {0.111180, 0.725317, 0, 1.0};
Point(2) = {0.110787, 0.725553, 0, 1.0};
Point(3) = {0.109695, 0.726231, 0, 1.0};
Point(4) = {0.108032, 0.727229, 0, 1.0};
Point(5) = {0.105799, 0.728386, 0, 1.0};
Point(6) = {0.102925, 0.729637, 0, 1.0};
Point(7) = {0.099403, 0.730989, 0, 1.0};
Point(8) = {0.095274, 0.732436, 0, 1.0};
Point(9) = {0.090577, 0.733947, 0, 1.0};
Point(10) = {0.085360, 0.735501, 0, 1.0};
Point(11) = {0.079670, 0.737068, 0, 1.0};
Point(12) = {0.073564, 0.738633, 0, 1.0};
Point(13) = {0.067101, 0.740163, 0, 1.0};
Point(14) = {0.060345, 0.741645, 0, 1.0};
Point(15) = {0.053362, 0.743051, 0, 1.0};
Point(16) = {0.046221, 0.744368, 0, 1.0};
Point(17) = {0.038990, 0.745574, 0, 1.0};
Point(18) = {0.031742, 0.746660, 0, 1.0};
Point(19) = {0.024547, 0.747605, 0, 1.0};
Point(20) = {0.017477, 0.748407, 0, 1.0};
Point(21) = {0.010598, 0.749052, 0, 1.0};
Point(22) = {0.003982, 0.749536, 0, 1.0};
Point(23) = {-0.002311, 0.749851, 0, 1.0};
Point(24) = {-0.008223, 0.750000, 0, 1.0};
Point(25) = {-0.013698, 0.749982, 0, 1.0};
Point(26) = {-0.018687, 0.749805, 0, 1.0};
Point(27) = {-0.023149, 0.749475, 0, 1.0};
Point(28) = {-0.027048, 0.749006, 0, 1.0};
Point(29) = {-0.030355, 0.748415, 0, 1.0};
Point(30) = {-0.033051, 0.747728, 0, 1.0};
Point(31) = {-0.035116, 0.746976, 0, 1.0};
Point(32) = {-0.036551, 0.746202, 0, 1.0};
Point(33) = {-0.037344, 0.745479, 0, 1.0};
Point(34) = {-0.037446, 0.744949, 0, 1.0};
Point(35) = {-0.036733, 0.744604, 0, 1.0};
Point(36) = {-0.035111, 0.744351, 0, 1.0};
Point(37) = {-0.032615, 0.744174, 0, 1.0};
Point(38) = {-0.029249, 0.744062, 0, 1.0};
Point(39) = {-0.025035, 0.743982, 0, 1.0};
Point(40) = {-0.020007, 0.743905, 0, 1.0};
Point(41) = {-0.014220, 0.743803, 0, 1.0};
Point(42) = {-0.007740, 0.743648, 0, 1.0};
Point(43) = {-0.000644, 0.743416, 0, 1.0};
Point(44) = {0.006976, 0.743084, 0, 1.0};
Point(45) = {0.015024, 0.742639, 0, 1.0};
Point(46) = {0.023394, 0.742062, 0, 1.0};
Point(47) = {0.031976, 0.741348, 0, 1.0};
Point(48) = {0.040652, 0.740490, 0, 1.0};
Point(49) = {0.049301, 0.739492, 0, 1.0};
Point(50) = {0.057801, 0.738357, 0, 1.0};
Point(51) = {0.066031, 0.737105, 0, 1.0};
Point(52) = {0.073878, 0.735752, 0, 1.0};
Point(53) = {0.081230, 0.734325, 0, 1.0};
Point(54) = {0.087979, 0.732849, 0, 1.0};
Point(55) = {0.094028, 0.731363, 0, 1.0};
Point(56) = {0.099285, 0.729900, 0, 1.0};
Point(57) = {0.103669, 0.728498, 0, 1.0};
Point(58) = {0.107067, 0.727209, 0, 1.0};
Point(59) = {0.109409, 0.726174, 0, 1.0};
Point(60) = {0.110747, 0.725529, 0, 1.0};
Point(61) = {-0.111180, -0.725317, 0, 1.0};
Point(62) = {-0.110787, -0.725553, 0, 1.0};
Point(63) = {-0.109695, -0.726231, 0, 1.0};
Point(64) = {-0.108032, -0.727229, 0, 1.0};
Point(65) = {-0.105799, -0.728386, 0, 1.0};
Point(66) = {-0.102925, -0.729637, 0, 1.0};
Point(67) = {-0.099403, -0.730989, 0, 1.0};
Point(68) = {-0.095274, -0.732436, 0, 1.0};
Point(69) = {-0.090577, -0.733947, 0, 1.0};
Point(70) = {-0.085360, -0.735501, 0, 1.0};
Point(71) = {-0.079670, -0.737068, 0, 1.0};
Point(72) = {-0.073564, -0.738633, 0, 1.0};
Point(73) = {-0.067101, -0.740163, 0, 1.0};
Point(74) = {-0.060345, -0.741645, 0, 1.0};
Point(75) = {-0.053362, -0.743051, 0, 1.0};
Point(76) = {-0.046221, -0.744368, 0, 1.0};
Point(77) = {-0.038990, -0.745574, 0, 1.0};
Point(78) = {-0.031742, -0.746660, 0, 1.0};
Point(79) = {-0.024547, -0.747605, 0, 1.0};
Point(80) = {-0.017477, -0.748407, 0, 1.0};
Point(81) = {-0.010598, -0.749052, 0, 1.0};
Point(82) = {-0.003982, -0.749536, 0, 1.0};
Point(83) = {0.002311, -0.749851, 0, 1.0};
Point(84) = {0.008223, -0.750000, 0, 1.0};
Point(85) = {0.013698, -0.749982, 0, 1.0};
Point(86) = {0.018687, -0.749805, 0, 1.0};
Point(87) = {0.023149, -0.749475, 0, 1.0};
Point(88) = {0.027048, -0.749006, 0, 1.0};
Point(89) = {0.030355, -0.748415, 0, 1.0};
Point(90) = {0.033051, -0.747728, 0, 1.0};
Point(91) = {0.035116, -0.746976, 0, 1.0};
Point(92) = {0.036551, -0.746202, 0, 1.0};
Point(93) = {0.037344, -0.745479, 0, 1.0};
Point(94) = {0.037446, -0.744949, 0, 1.0};
Point(95) = {0.036733, -0.744604, 0, 1.0};
Point(96) = {0.035111, -0.744351, 0, 1.0};
Point(97) = {0.032615, -0.744174, 0, 1.0};
Point(98) = {0.029249, -0.744062, 0, 1.0};
Point(99) = {0.025035, -0.743982, 0, 1.0};
Point(100) = {0.020007, -0.743905, 0, 1.0};
Point(101) = {0.014220, -0.743803, 0, 1.0};
Point(102) = {0.007740, -0.743648, 0, 1.0};
Point(103) = {0.000644, -0.743416, 0, 1.0};
Point(104) = {-0.006976, -0.743084, 0, 1.0};
Point(105) = {-0.015024, -0.742639, 0, 1.0};
Point(106) = {-0.023394, -0.742062, 0, 1.0};
Point(107) = {-0.031976, -0.741348, 0, 1.0};
Point(108) = {-0.040652, -0.740490, 0, 1.0};
Point(109) = {-0.049301, -0.739492, 0, 1.0};
Point(110) = {-0.057801, -0.738357, 0, 1.0};
Point(111) = {-0.066031, -0.737105, 0, 1.0};
Point(112) = {-0.073878, -0.735752, 0, 1.0};
Point(113) = {-0.081230, -0.734325, 0, 1.0};
Point(114) = {-0.087979, -0.732849, 0, 1.0};
Point(115) = {-0.094028, -0.731363, 0, 1.0};
Point(116) = {-0.099285, -0.729900, 0, 1.0};
Point(117) = {-0.103669, -0.728498, 0, 1.0};
Point(118) = {-0.107067, -0.727209, 0, 1.0};
Point(119) = {-0.109409, -0.726174, 0, 1.0};
Point(120) = {-0.110747, -0.725529, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html