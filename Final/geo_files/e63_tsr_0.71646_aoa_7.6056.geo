SetFactory("OpenCASCADE");

Point(1) = {0.074120, 0.733545, 0, 1.0};
Point(2) = {0.073858, 0.733702, 0, 1.0};
Point(3) = {0.073130, 0.734154, 0, 1.0};
Point(4) = {0.072022, 0.734820, 0, 1.0};
Point(5) = {0.070532, 0.735591, 0, 1.0};
Point(6) = {0.068617, 0.736424, 0, 1.0};
Point(7) = {0.066269, 0.737326, 0, 1.0};
Point(8) = {0.063516, 0.738291, 0, 1.0};
Point(9) = {0.060385, 0.739298, 0, 1.0};
Point(10) = {0.056906, 0.740334, 0, 1.0};
Point(11) = {0.053113, 0.741379, 0, 1.0};
Point(12) = {0.049043, 0.742422, 0, 1.0};
Point(13) = {0.044734, 0.743442, 0, 1.0};
Point(14) = {0.040230, 0.744430, 0, 1.0};
Point(15) = {0.035575, 0.745367, 0, 1.0};
Point(16) = {0.030814, 0.746245, 0, 1.0};
Point(17) = {0.025993, 0.747049, 0, 1.0};
Point(18) = {0.021162, 0.747773, 0, 1.0};
Point(19) = {0.016365, 0.748403, 0, 1.0};
Point(20) = {0.011651, 0.748938, 0, 1.0};
Point(21) = {0.007066, 0.749368, 0, 1.0};
Point(22) = {0.002654, 0.749690, 0, 1.0};
Point(23) = {-0.001541, 0.749900, 0, 1.0};
Point(24) = {-0.005482, 0.750000, 0, 1.0};
Point(25) = {-0.009132, 0.749988, 0, 1.0};
Point(26) = {-0.012458, 0.749870, 0, 1.0};
Point(27) = {-0.015433, 0.749650, 0, 1.0};
Point(28) = {-0.018032, 0.749337, 0, 1.0};
Point(29) = {-0.020237, 0.748944, 0, 1.0};
Point(30) = {-0.022034, 0.748485, 0, 1.0};
Point(31) = {-0.023411, 0.747984, 0, 1.0};
Point(32) = {-0.024367, 0.747468, 0, 1.0};
Point(33) = {-0.024896, 0.746986, 0, 1.0};
Point(34) = {-0.024964, 0.746633, 0, 1.0};
Point(35) = {-0.024488, 0.746403, 0, 1.0};
Point(36) = {-0.023407, 0.746234, 0, 1.0};
Point(37) = {-0.021743, 0.746116, 0, 1.0};
Point(38) = {-0.019499, 0.746041, 0, 1.0};
Point(39) = {-0.016690, 0.745988, 0, 1.0};
Point(40) = {-0.013338, 0.745937, 0, 1.0};
Point(41) = {-0.009480, 0.745869, 0, 1.0};
Point(42) = {-0.005160, 0.745765, 0, 1.0};
Point(43) = {-0.000430, 0.745611, 0, 1.0};
Point(44) = {0.004651, 0.745389, 0, 1.0};
Point(45) = {0.010016, 0.745093, 0, 1.0};
Point(46) = {0.015596, 0.744708, 0, 1.0};
Point(47) = {0.021317, 0.744232, 0, 1.0};
Point(48) = {0.027101, 0.743660, 0, 1.0};
Point(49) = {0.032867, 0.742995, 0, 1.0};
Point(50) = {0.038534, 0.742238, 0, 1.0};
Point(51) = {0.044021, 0.741404, 0, 1.0};
Point(52) = {0.049252, 0.740501, 0, 1.0};
Point(53) = {0.054153, 0.739550, 0, 1.0};
Point(54) = {0.058653, 0.738566, 0, 1.0};
Point(55) = {0.062685, 0.737576, 0, 1.0};
Point(56) = {0.066190, 0.736600, 0, 1.0};
Point(57) = {0.069113, 0.735665, 0, 1.0};
Point(58) = {0.071378, 0.734806, 0, 1.0};
Point(59) = {0.072939, 0.734116, 0, 1.0};
Point(60) = {0.073831, 0.733686, 0, 1.0};
Point(61) = {-0.074120, -0.733545, 0, 1.0};
Point(62) = {-0.073858, -0.733702, 0, 1.0};
Point(63) = {-0.073130, -0.734154, 0, 1.0};
Point(64) = {-0.072022, -0.734820, 0, 1.0};
Point(65) = {-0.070532, -0.735591, 0, 1.0};
Point(66) = {-0.068617, -0.736424, 0, 1.0};
Point(67) = {-0.066269, -0.737326, 0, 1.0};
Point(68) = {-0.063516, -0.738291, 0, 1.0};
Point(69) = {-0.060385, -0.739298, 0, 1.0};
Point(70) = {-0.056906, -0.740334, 0, 1.0};
Point(71) = {-0.053113, -0.741379, 0, 1.0};
Point(72) = {-0.049043, -0.742422, 0, 1.0};
Point(73) = {-0.044734, -0.743442, 0, 1.0};
Point(74) = {-0.040230, -0.744430, 0, 1.0};
Point(75) = {-0.035575, -0.745367, 0, 1.0};
Point(76) = {-0.030814, -0.746245, 0, 1.0};
Point(77) = {-0.025993, -0.747049, 0, 1.0};
Point(78) = {-0.021162, -0.747773, 0, 1.0};
Point(79) = {-0.016365, -0.748403, 0, 1.0};
Point(80) = {-0.011651, -0.748938, 0, 1.0};
Point(81) = {-0.007066, -0.749368, 0, 1.0};
Point(82) = {-0.002654, -0.749690, 0, 1.0};
Point(83) = {0.001541, -0.749900, 0, 1.0};
Point(84) = {0.005482, -0.750000, 0, 1.0};
Point(85) = {0.009132, -0.749988, 0, 1.0};
Point(86) = {0.012458, -0.749870, 0, 1.0};
Point(87) = {0.015433, -0.749650, 0, 1.0};
Point(88) = {0.018032, -0.749337, 0, 1.0};
Point(89) = {0.020237, -0.748944, 0, 1.0};
Point(90) = {0.022034, -0.748485, 0, 1.0};
Point(91) = {0.023411, -0.747984, 0, 1.0};
Point(92) = {0.024367, -0.747468, 0, 1.0};
Point(93) = {0.024896, -0.746986, 0, 1.0};
Point(94) = {0.024964, -0.746633, 0, 1.0};
Point(95) = {0.024488, -0.746403, 0, 1.0};
Point(96) = {0.023407, -0.746234, 0, 1.0};
Point(97) = {0.021743, -0.746116, 0, 1.0};
Point(98) = {0.019499, -0.746041, 0, 1.0};
Point(99) = {0.016690, -0.745988, 0, 1.0};
Point(100) = {0.013338, -0.745937, 0, 1.0};
Point(101) = {0.009480, -0.745869, 0, 1.0};
Point(102) = {0.005160, -0.745765, 0, 1.0};
Point(103) = {0.000430, -0.745611, 0, 1.0};
Point(104) = {-0.004651, -0.745389, 0, 1.0};
Point(105) = {-0.010016, -0.745093, 0, 1.0};
Point(106) = {-0.015596, -0.744708, 0, 1.0};
Point(107) = {-0.021317, -0.744232, 0, 1.0};
Point(108) = {-0.027101, -0.743660, 0, 1.0};
Point(109) = {-0.032867, -0.742995, 0, 1.0};
Point(110) = {-0.038534, -0.742238, 0, 1.0};
Point(111) = {-0.044021, -0.741404, 0, 1.0};
Point(112) = {-0.049252, -0.740501, 0, 1.0};
Point(113) = {-0.054153, -0.739550, 0, 1.0};
Point(114) = {-0.058653, -0.738566, 0, 1.0};
Point(115) = {-0.062685, -0.737576, 0, 1.0};
Point(116) = {-0.066190, -0.736600, 0, 1.0};
Point(117) = {-0.069113, -0.735665, 0, 1.0};
Point(118) = {-0.071378, -0.734806, 0, 1.0};
Point(119) = {-0.072939, -0.734116, 0, 1.0};
Point(120) = {-0.073831, -0.733686, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:44};
Spline(3) = {44:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:104};
Spline(7) = {104:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html