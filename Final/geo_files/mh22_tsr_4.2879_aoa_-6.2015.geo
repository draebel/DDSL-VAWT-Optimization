SetFactory("OpenCASCADE");

Point(1) = {0.111828, 0.750000, 0, 1.0};
Point(2) = {0.111348, 0.749968, 0, 1.0};
Point(3) = {0.109928, 0.749895, 0, 1.0};
Point(4) = {0.107623, 0.749806, 0, 1.0};
Point(5) = {0.104479, 0.749700, 0, 1.0};
Point(6) = {0.100536, 0.749577, 0, 1.0};
Point(7) = {0.095842, 0.749453, 0, 1.0};
Point(8) = {0.090465, 0.749339, 0, 1.0};
Point(9) = {0.084481, 0.749242, 0, 1.0};
Point(10) = {0.077975, 0.749168, 0, 1.0};
Point(11) = {0.071038, 0.749115, 0, 1.0};
Point(12) = {0.063769, 0.749082, 0, 1.0};
Point(13) = {0.056271, 0.749062, 0, 1.0};
Point(14) = {0.048671, 0.749042, 0, 1.0};
Point(15) = {0.041087, 0.748952, 0, 1.0};
Point(16) = {0.033564, 0.748718, 0, 1.0};
Point(17) = {0.026117, 0.748332, 0, 1.0};
Point(18) = {0.018807, 0.747828, 0, 1.0};
Point(19) = {0.011716, 0.747211, 0, 1.0};
Point(20) = {0.004918, 0.746485, 0, 1.0};
Point(21) = {-0.001521, 0.745643, 0, 1.0};
Point(22) = {-0.007548, 0.744690, 0, 1.0};
Point(23) = {-0.013115, 0.743631, 0, 1.0};
Point(24) = {-0.018184, 0.742482, 0, 1.0};
Point(25) = {-0.022718, 0.741264, 0, 1.0};
Point(26) = {-0.026681, 0.740005, 0, 1.0};
Point(27) = {-0.030043, 0.738730, 0, 1.0};
Point(28) = {-0.032788, 0.737469, 0, 1.0};
Point(29) = {-0.034896, 0.736265, 0, 1.0};
Point(30) = {-0.036355, 0.735168, 0, 1.0};
Point(31) = {-0.037000, 0.734471, 0, 1.0};
Point(32) = {-0.037159, 0.734218, 0, 1.0};
Point(33) = {-0.037258, 0.733993, 0, 1.0};
Point(34) = {-0.037288, 0.733862, 0, 1.0};
Point(35) = {-0.037281, 0.733753, 0, 1.0};
Point(36) = {-0.037224, 0.733657, 0, 1.0};
Point(37) = {-0.037121, 0.733560, 0, 1.0};
Point(38) = {-0.036900, 0.733416, 0, 1.0};
Point(39) = {-0.036608, 0.733271, 0, 1.0};
Point(40) = {-0.036288, 0.733139, 0, 1.0};
Point(41) = {-0.034631, 0.732732, 0, 1.0};
Point(42) = {-0.032245, 0.732475, 0, 1.0};
Point(43) = {-0.029137, 0.732396, 0, 1.0};
Point(44) = {-0.025315, 0.732504, 0, 1.0};
Point(45) = {-0.020803, 0.732791, 0, 1.0};
Point(46) = {-0.015633, 0.733248, 0, 1.0};
Point(47) = {-0.009847, 0.733853, 0, 1.0};
Point(48) = {-0.003503, 0.734583, 0, 1.0};
Point(49) = {0.003330, 0.735411, 0, 1.0};
Point(50) = {0.010570, 0.736315, 0, 1.0};
Point(51) = {0.018128, 0.737273, 0, 1.0};
Point(52) = {0.025913, 0.738275, 0, 1.0};
Point(53) = {0.033836, 0.739304, 0, 1.0};
Point(54) = {0.041804, 0.740349, 0, 1.0};
Point(55) = {0.049727, 0.741394, 0, 1.0};
Point(56) = {0.057512, 0.742426, 0, 1.0};
Point(57) = {0.065070, 0.743431, 0, 1.0};
Point(58) = {0.072312, 0.744398, 0, 1.0};
Point(59) = {0.079155, 0.745315, 0, 1.0};
Point(60) = {0.085518, 0.746173, 0, 1.0};
Point(61) = {0.091328, 0.746961, 0, 1.0};
Point(62) = {0.096514, 0.747674, 0, 1.0};
Point(63) = {0.101014, 0.748304, 0, 1.0};
Point(64) = {0.104774, 0.748855, 0, 1.0};
Point(65) = {0.107764, 0.749330, 0, 1.0};
Point(66) = {0.109973, 0.749705, 0, 1.0};
Point(67) = {0.111354, 0.749930, 0, 1.0};
Point(68) = {-0.111828, -0.750000, 0, 1.0};
Point(69) = {-0.111348, -0.749968, 0, 1.0};
Point(70) = {-0.109928, -0.749895, 0, 1.0};
Point(71) = {-0.107623, -0.749806, 0, 1.0};
Point(72) = {-0.104479, -0.749700, 0, 1.0};
Point(73) = {-0.100536, -0.749577, 0, 1.0};
Point(74) = {-0.095842, -0.749453, 0, 1.0};
Point(75) = {-0.090465, -0.749339, 0, 1.0};
Point(76) = {-0.084481, -0.749242, 0, 1.0};
Point(77) = {-0.077975, -0.749168, 0, 1.0};
Point(78) = {-0.071038, -0.749115, 0, 1.0};
Point(79) = {-0.063769, -0.749082, 0, 1.0};
Point(80) = {-0.056271, -0.749062, 0, 1.0};
Point(81) = {-0.048671, -0.749042, 0, 1.0};
Point(82) = {-0.041087, -0.748952, 0, 1.0};
Point(83) = {-0.033564, -0.748718, 0, 1.0};
Point(84) = {-0.026117, -0.748332, 0, 1.0};
Point(85) = {-0.018807, -0.747828, 0, 1.0};
Point(86) = {-0.011716, -0.747211, 0, 1.0};
Point(87) = {-0.004918, -0.746485, 0, 1.0};
Point(88) = {0.001521, -0.745643, 0, 1.0};
Point(89) = {0.007548, -0.744690, 0, 1.0};
Point(90) = {0.013115, -0.743631, 0, 1.0};
Point(91) = {0.018184, -0.742482, 0, 1.0};
Point(92) = {0.022718, -0.741264, 0, 1.0};
Point(93) = {0.026681, -0.740005, 0, 1.0};
Point(94) = {0.030043, -0.738730, 0, 1.0};
Point(95) = {0.032788, -0.737469, 0, 1.0};
Point(96) = {0.034896, -0.736265, 0, 1.0};
Point(97) = {0.036355, -0.735168, 0, 1.0};
Point(98) = {0.037000, -0.734471, 0, 1.0};
Point(99) = {0.037159, -0.734218, 0, 1.0};
Point(100) = {0.037258, -0.733993, 0, 1.0};
Point(101) = {0.037288, -0.733862, 0, 1.0};
Point(102) = {0.037281, -0.733753, 0, 1.0};
Point(103) = {0.037224, -0.733657, 0, 1.0};
Point(104) = {0.037121, -0.733560, 0, 1.0};
Point(105) = {0.036900, -0.733416, 0, 1.0};
Point(106) = {0.036608, -0.733271, 0, 1.0};
Point(107) = {0.036288, -0.733139, 0, 1.0};
Point(108) = {0.034631, -0.732732, 0, 1.0};
Point(109) = {0.032245, -0.732475, 0, 1.0};
Point(110) = {0.029137, -0.732396, 0, 1.0};
Point(111) = {0.025315, -0.732504, 0, 1.0};
Point(112) = {0.020803, -0.732791, 0, 1.0};
Point(113) = {0.015633, -0.733248, 0, 1.0};
Point(114) = {0.009847, -0.733853, 0, 1.0};
Point(115) = {0.003503, -0.734583, 0, 1.0};
Point(116) = {-0.003330, -0.735411, 0, 1.0};
Point(117) = {-0.010570, -0.736315, 0, 1.0};
Point(118) = {-0.018128, -0.737273, 0, 1.0};
Point(119) = {-0.025913, -0.738275, 0, 1.0};
Point(120) = {-0.033836, -0.739304, 0, 1.0};
Point(121) = {-0.041804, -0.740349, 0, 1.0};
Point(122) = {-0.049727, -0.741394, 0, 1.0};
Point(123) = {-0.057512, -0.742426, 0, 1.0};
Point(124) = {-0.065070, -0.743431, 0, 1.0};
Point(125) = {-0.072312, -0.744398, 0, 1.0};
Point(126) = {-0.079155, -0.745315, 0, 1.0};
Point(127) = {-0.085518, -0.746173, 0, 1.0};
Point(128) = {-0.091328, -0.746961, 0, 1.0};
Point(129) = {-0.096514, -0.747674, 0, 1.0};
Point(130) = {-0.101014, -0.748304, 0, 1.0};
Point(131) = {-0.104774, -0.748855, 0, 1.0};
Point(132) = {-0.107764, -0.749330, 0, 1.0};
Point(133) = {-0.109973, -0.749705, 0, 1.0};
Point(134) = {-0.111354, -0.749930, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html