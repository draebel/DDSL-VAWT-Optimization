SetFactory("OpenCASCADE");

Point(1) = {0.148830, 0.750000, 0, 1.0};
Point(2) = {0.148189, 0.749958, 0, 1.0};
Point(3) = {0.146297, 0.749860, 0, 1.0};
Point(4) = {0.143222, 0.749741, 0, 1.0};
Point(5) = {0.139030, 0.749599, 0, 1.0};
Point(6) = {0.133773, 0.749436, 0, 1.0};
Point(7) = {0.127514, 0.749270, 0, 1.0};
Point(8) = {0.120345, 0.749119, 0, 1.0};
Point(9) = {0.112366, 0.748990, 0, 1.0};
Point(10) = {0.103691, 0.748890, 0, 1.0};
Point(11) = {0.094441, 0.748820, 0, 1.0};
Point(12) = {0.084748, 0.748776, 0, 1.0};
Point(13) = {0.074751, 0.748750, 0, 1.0};
Point(14) = {0.064617, 0.748722, 0, 1.0};
Point(15) = {0.054506, 0.748603, 0, 1.0};
Point(16) = {0.044475, 0.748290, 0, 1.0};
Point(17) = {0.034545, 0.747777, 0, 1.0};
Point(18) = {0.024798, 0.747103, 0, 1.0};
Point(19) = {0.015343, 0.746282, 0, 1.0};
Point(20) = {0.006279, 0.745313, 0, 1.0};
Point(21) = {-0.002307, 0.744191, 0, 1.0};
Point(22) = {-0.010343, 0.742920, 0, 1.0};
Point(23) = {-0.017766, 0.741508, 0, 1.0};
Point(24) = {-0.024525, 0.739975, 0, 1.0};
Point(25) = {-0.030570, 0.738352, 0, 1.0};
Point(26) = {-0.035854, 0.736673, 0, 1.0};
Point(27) = {-0.040338, 0.734973, 0, 1.0};
Point(28) = {-0.043997, 0.733291, 0, 1.0};
Point(29) = {-0.046809, 0.731687, 0, 1.0};
Point(30) = {-0.048753, 0.730223, 0, 1.0};
Point(31) = {-0.049614, 0.729295, 0, 1.0};
Point(32) = {-0.049826, 0.728957, 0, 1.0};
Point(33) = {-0.049958, 0.728657, 0, 1.0};
Point(34) = {-0.049998, 0.728482, 0, 1.0};
Point(35) = {-0.049988, 0.728337, 0, 1.0};
Point(36) = {-0.049913, 0.728209, 0, 1.0};
Point(37) = {-0.049775, 0.728080, 0, 1.0};
Point(38) = {-0.049481, 0.727887, 0, 1.0};
Point(39) = {-0.049091, 0.727694, 0, 1.0};
Point(40) = {-0.048664, 0.727518, 0, 1.0};
Point(41) = {-0.046455, 0.726976, 0, 1.0};
Point(42) = {-0.043274, 0.726632, 0, 1.0};
Point(43) = {-0.039130, 0.726528, 0, 1.0};
Point(44) = {-0.034034, 0.726671, 0, 1.0};
Point(45) = {-0.028018, 0.727054, 0, 1.0};
Point(46) = {-0.021123, 0.727663, 0, 1.0};
Point(47) = {-0.013409, 0.728471, 0, 1.0};
Point(48) = {-0.004949, 0.729444, 0, 1.0};
Point(49) = {0.004161, 0.730548, 0, 1.0};
Point(50) = {0.013815, 0.731753, 0, 1.0};
Point(51) = {0.023892, 0.733030, 0, 1.0};
Point(52) = {0.034273, 0.734366, 0, 1.0};
Point(53) = {0.044837, 0.735739, 0, 1.0};
Point(54) = {0.055462, 0.737132, 0, 1.0};
Point(55) = {0.066026, 0.738524, 0, 1.0};
Point(56) = {0.076406, 0.739901, 0, 1.0};
Point(57) = {0.086483, 0.741241, 0, 1.0};
Point(58) = {0.096140, 0.742531, 0, 1.0};
Point(59) = {0.105264, 0.743753, 0, 1.0};
Point(60) = {0.113749, 0.744897, 0, 1.0};
Point(61) = {0.121495, 0.745948, 0, 1.0};
Point(62) = {0.128410, 0.746898, 0, 1.0};
Point(63) = {0.134411, 0.747739, 0, 1.0};
Point(64) = {0.139424, 0.748473, 0, 1.0};
Point(65) = {0.143411, 0.749107, 0, 1.0};
Point(66) = {0.146356, 0.749606, 0, 1.0};
Point(67) = {0.148197, 0.749906, 0, 1.0};
Point(68) = {-0.148830, -0.750000, 0, 1.0};
Point(69) = {-0.148189, -0.749958, 0, 1.0};
Point(70) = {-0.146297, -0.749860, 0, 1.0};
Point(71) = {-0.143222, -0.749741, 0, 1.0};
Point(72) = {-0.139030, -0.749599, 0, 1.0};
Point(73) = {-0.133773, -0.749436, 0, 1.0};
Point(74) = {-0.127514, -0.749270, 0, 1.0};
Point(75) = {-0.120345, -0.749119, 0, 1.0};
Point(76) = {-0.112366, -0.748990, 0, 1.0};
Point(77) = {-0.103691, -0.748890, 0, 1.0};
Point(78) = {-0.094441, -0.748820, 0, 1.0};
Point(79) = {-0.084748, -0.748776, 0, 1.0};
Point(80) = {-0.074751, -0.748750, 0, 1.0};
Point(81) = {-0.064617, -0.748722, 0, 1.0};
Point(82) = {-0.054506, -0.748603, 0, 1.0};
Point(83) = {-0.044475, -0.748290, 0, 1.0};
Point(84) = {-0.034545, -0.747777, 0, 1.0};
Point(85) = {-0.024798, -0.747103, 0, 1.0};
Point(86) = {-0.015343, -0.746282, 0, 1.0};
Point(87) = {-0.006279, -0.745313, 0, 1.0};
Point(88) = {0.002307, -0.744191, 0, 1.0};
Point(89) = {0.010343, -0.742920, 0, 1.0};
Point(90) = {0.017766, -0.741508, 0, 1.0};
Point(91) = {0.024525, -0.739975, 0, 1.0};
Point(92) = {0.030570, -0.738352, 0, 1.0};
Point(93) = {0.035854, -0.736673, 0, 1.0};
Point(94) = {0.040338, -0.734973, 0, 1.0};
Point(95) = {0.043997, -0.733291, 0, 1.0};
Point(96) = {0.046809, -0.731687, 0, 1.0};
Point(97) = {0.048753, -0.730223, 0, 1.0};
Point(98) = {0.049614, -0.729295, 0, 1.0};
Point(99) = {0.049826, -0.728957, 0, 1.0};
Point(100) = {0.049958, -0.728657, 0, 1.0};
Point(101) = {0.049998, -0.728482, 0, 1.0};
Point(102) = {0.049988, -0.728337, 0, 1.0};
Point(103) = {0.049913, -0.728209, 0, 1.0};
Point(104) = {0.049775, -0.728080, 0, 1.0};
Point(105) = {0.049481, -0.727887, 0, 1.0};
Point(106) = {0.049091, -0.727694, 0, 1.0};
Point(107) = {0.048664, -0.727518, 0, 1.0};
Point(108) = {0.046455, -0.726976, 0, 1.0};
Point(109) = {0.043274, -0.726632, 0, 1.0};
Point(110) = {0.039130, -0.726528, 0, 1.0};
Point(111) = {0.034034, -0.726671, 0, 1.0};
Point(112) = {0.028018, -0.727054, 0, 1.0};
Point(113) = {0.021123, -0.727663, 0, 1.0};
Point(114) = {0.013409, -0.728471, 0, 1.0};
Point(115) = {0.004949, -0.729444, 0, 1.0};
Point(116) = {-0.004161, -0.730548, 0, 1.0};
Point(117) = {-0.013815, -0.731753, 0, 1.0};
Point(118) = {-0.023892, -0.733030, 0, 1.0};
Point(119) = {-0.034273, -0.734366, 0, 1.0};
Point(120) = {-0.044837, -0.735739, 0, 1.0};
Point(121) = {-0.055462, -0.737132, 0, 1.0};
Point(122) = {-0.066026, -0.738524, 0, 1.0};
Point(123) = {-0.076406, -0.739901, 0, 1.0};
Point(124) = {-0.086483, -0.741241, 0, 1.0};
Point(125) = {-0.096140, -0.742531, 0, 1.0};
Point(126) = {-0.105264, -0.743753, 0, 1.0};
Point(127) = {-0.113749, -0.744897, 0, 1.0};
Point(128) = {-0.121495, -0.745948, 0, 1.0};
Point(129) = {-0.128410, -0.746898, 0, 1.0};
Point(130) = {-0.134411, -0.747739, 0, 1.0};
Point(131) = {-0.139424, -0.748473, 0, 1.0};
Point(132) = {-0.143411, -0.749107, 0, 1.0};
Point(133) = {-0.146356, -0.749606, 0, 1.0};
Point(134) = {-0.148197, -0.749906, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html