SetFactory("OpenCASCADE");

Point(1) = {0.074415, 0.750000, 0, 1.0};
Point(2) = {0.074094, 0.749979, 0, 1.0};
Point(3) = {0.073148, 0.749930, 0, 1.0};
Point(4) = {0.071611, 0.749871, 0, 1.0};
Point(5) = {0.069515, 0.749800, 0, 1.0};
Point(6) = {0.066886, 0.749718, 0, 1.0};
Point(7) = {0.063757, 0.749635, 0, 1.0};
Point(8) = {0.060172, 0.749559, 0, 1.0};
Point(9) = {0.056183, 0.749495, 0, 1.0};
Point(10) = {0.051845, 0.749445, 0, 1.0};
Point(11) = {0.047221, 0.749410, 0, 1.0};
Point(12) = {0.042374, 0.749388, 0, 1.0};
Point(13) = {0.037376, 0.749375, 0, 1.0};
Point(14) = {0.032309, 0.749361, 0, 1.0};
Point(15) = {0.027253, 0.749302, 0, 1.0};
Point(16) = {0.022237, 0.749145, 0, 1.0};
Point(17) = {0.017273, 0.748888, 0, 1.0};
Point(18) = {0.012399, 0.748552, 0, 1.0};
Point(19) = {0.007671, 0.748141, 0, 1.0};
Point(20) = {0.003139, 0.747656, 0, 1.0};
Point(21) = {-0.001154, 0.747095, 0, 1.0};
Point(22) = {-0.005172, 0.746460, 0, 1.0};
Point(23) = {-0.008883, 0.745754, 0, 1.0};
Point(24) = {-0.012263, 0.744988, 0, 1.0};
Point(25) = {-0.015285, 0.744176, 0, 1.0};
Point(26) = {-0.017927, 0.743337, 0, 1.0};
Point(27) = {-0.020169, 0.742486, 0, 1.0};
Point(28) = {-0.021998, 0.741646, 0, 1.0};
Point(29) = {-0.023404, 0.740843, 0, 1.0};
Point(30) = {-0.024377, 0.740112, 0, 1.0};
Point(31) = {-0.024807, 0.739647, 0, 1.0};
Point(32) = {-0.024913, 0.739479, 0, 1.0};
Point(33) = {-0.024979, 0.739329, 0, 1.0};
Point(34) = {-0.024999, 0.739241, 0, 1.0};
Point(35) = {-0.024994, 0.739168, 0, 1.0};
Point(36) = {-0.024956, 0.739104, 0, 1.0};
Point(37) = {-0.024888, 0.739040, 0, 1.0};
Point(38) = {-0.024740, 0.738944, 0, 1.0};
Point(39) = {-0.024545, 0.738847, 0, 1.0};
Point(40) = {-0.024332, 0.738759, 0, 1.0};
Point(41) = {-0.023228, 0.738488, 0, 1.0};
Point(42) = {-0.021637, 0.738316, 0, 1.0};
Point(43) = {-0.019565, 0.738264, 0, 1.0};
Point(44) = {-0.017017, 0.738335, 0, 1.0};
Point(45) = {-0.014009, 0.738527, 0, 1.0};
Point(46) = {-0.010562, 0.738832, 0, 1.0};
Point(47) = {-0.006704, 0.739235, 0, 1.0};
Point(48) = {-0.002475, 0.739722, 0, 1.0};
Point(49) = {0.002080, 0.740274, 0, 1.0};
Point(50) = {0.006907, 0.740876, 0, 1.0};
Point(51) = {0.011946, 0.741515, 0, 1.0};
Point(52) = {0.017136, 0.742183, 0, 1.0};
Point(53) = {0.022418, 0.742869, 0, 1.0};
Point(54) = {0.027731, 0.743566, 0, 1.0};
Point(55) = {0.033013, 0.744262, 0, 1.0};
Point(56) = {0.038203, 0.744950, 0, 1.0};
Point(57) = {0.043242, 0.745620, 0, 1.0};
Point(58) = {0.048070, 0.746265, 0, 1.0};
Point(59) = {0.052632, 0.746877, 0, 1.0};
Point(60) = {0.056874, 0.747448, 0, 1.0};
Point(61) = {0.060747, 0.747974, 0, 1.0};
Point(62) = {0.064205, 0.748449, 0, 1.0};
Point(63) = {0.067205, 0.748869, 0, 1.0};
Point(64) = {0.069712, 0.749236, 0, 1.0};
Point(65) = {0.071705, 0.749553, 0, 1.0};
Point(66) = {0.073178, 0.749803, 0, 1.0};
Point(67) = {0.074099, 0.749953, 0, 1.0};
Point(68) = {-0.074415, -0.750000, 0, 1.0};
Point(69) = {-0.074094, -0.749979, 0, 1.0};
Point(70) = {-0.073148, -0.749930, 0, 1.0};
Point(71) = {-0.071611, -0.749871, 0, 1.0};
Point(72) = {-0.069515, -0.749800, 0, 1.0};
Point(73) = {-0.066886, -0.749718, 0, 1.0};
Point(74) = {-0.063757, -0.749635, 0, 1.0};
Point(75) = {-0.060172, -0.749559, 0, 1.0};
Point(76) = {-0.056183, -0.749495, 0, 1.0};
Point(77) = {-0.051845, -0.749445, 0, 1.0};
Point(78) = {-0.047221, -0.749410, 0, 1.0};
Point(79) = {-0.042374, -0.749388, 0, 1.0};
Point(80) = {-0.037376, -0.749375, 0, 1.0};
Point(81) = {-0.032309, -0.749361, 0, 1.0};
Point(82) = {-0.027253, -0.749302, 0, 1.0};
Point(83) = {-0.022237, -0.749145, 0, 1.0};
Point(84) = {-0.017273, -0.748888, 0, 1.0};
Point(85) = {-0.012399, -0.748552, 0, 1.0};
Point(86) = {-0.007671, -0.748141, 0, 1.0};
Point(87) = {-0.003139, -0.747656, 0, 1.0};
Point(88) = {0.001154, -0.747095, 0, 1.0};
Point(89) = {0.005172, -0.746460, 0, 1.0};
Point(90) = {0.008883, -0.745754, 0, 1.0};
Point(91) = {0.012263, -0.744988, 0, 1.0};
Point(92) = {0.015285, -0.744176, 0, 1.0};
Point(93) = {0.017927, -0.743337, 0, 1.0};
Point(94) = {0.020169, -0.742486, 0, 1.0};
Point(95) = {0.021998, -0.741646, 0, 1.0};
Point(96) = {0.023404, -0.740843, 0, 1.0};
Point(97) = {0.024377, -0.740112, 0, 1.0};
Point(98) = {0.024807, -0.739647, 0, 1.0};
Point(99) = {0.024913, -0.739479, 0, 1.0};
Point(100) = {0.024979, -0.739329, 0, 1.0};
Point(101) = {0.024999, -0.739241, 0, 1.0};
Point(102) = {0.024994, -0.739168, 0, 1.0};
Point(103) = {0.024956, -0.739104, 0, 1.0};
Point(104) = {0.024888, -0.739040, 0, 1.0};
Point(105) = {0.024740, -0.738944, 0, 1.0};
Point(106) = {0.024545, -0.738847, 0, 1.0};
Point(107) = {0.024332, -0.738759, 0, 1.0};
Point(108) = {0.023228, -0.738488, 0, 1.0};
Point(109) = {0.021637, -0.738316, 0, 1.0};
Point(110) = {0.019565, -0.738264, 0, 1.0};
Point(111) = {0.017017, -0.738335, 0, 1.0};
Point(112) = {0.014009, -0.738527, 0, 1.0};
Point(113) = {0.010562, -0.738832, 0, 1.0};
Point(114) = {0.006704, -0.739235, 0, 1.0};
Point(115) = {0.002475, -0.739722, 0, 1.0};
Point(116) = {-0.002080, -0.740274, 0, 1.0};
Point(117) = {-0.006907, -0.740876, 0, 1.0};
Point(118) = {-0.011946, -0.741515, 0, 1.0};
Point(119) = {-0.017136, -0.742183, 0, 1.0};
Point(120) = {-0.022418, -0.742869, 0, 1.0};
Point(121) = {-0.027731, -0.743566, 0, 1.0};
Point(122) = {-0.033013, -0.744262, 0, 1.0};
Point(123) = {-0.038203, -0.744950, 0, 1.0};
Point(124) = {-0.043242, -0.745620, 0, 1.0};
Point(125) = {-0.048070, -0.746265, 0, 1.0};
Point(126) = {-0.052632, -0.746877, 0, 1.0};
Point(127) = {-0.056874, -0.747448, 0, 1.0};
Point(128) = {-0.060747, -0.747974, 0, 1.0};
Point(129) = {-0.064205, -0.748449, 0, 1.0};
Point(130) = {-0.067205, -0.748869, 0, 1.0};
Point(131) = {-0.069712, -0.749236, 0, 1.0};
Point(132) = {-0.071705, -0.749553, 0, 1.0};
Point(133) = {-0.073178, -0.749803, 0, 1.0};
Point(134) = {-0.074099, -0.749953, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:87};
Spline(6) = {87:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html