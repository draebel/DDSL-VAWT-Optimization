SetFactory("OpenCASCADE");

Point(1) = {0.074723, 0.732370, 0, 1.0};
Point(2) = {0.074401, 0.732522, 0, 1.0};
Point(3) = {0.073496, 0.732971, 0, 1.0};
Point(4) = {0.072107, 0.733670, 0, 1.0};
Point(5) = {0.070267, 0.734536, 0, 1.0};
Point(6) = {0.067968, 0.735531, 0, 1.0};
Point(7) = {0.065233, 0.736652, 0, 1.0};
Point(8) = {0.062109, 0.737882, 0, 1.0};
Point(9) = {0.058645, 0.739193, 0, 1.0};
Point(10) = {0.054887, 0.740552, 0, 1.0};
Point(11) = {0.050883, 0.741925, 0, 1.0};
Point(12) = {0.046676, 0.743275, 0, 1.0};
Point(13) = {0.042310, 0.744566, 0, 1.0};
Point(14) = {0.037821, 0.745763, 0, 1.0};
Point(15) = {0.033241, 0.746838, 0, 1.0};
Point(16) = {0.028603, 0.747774, 0, 1.0};
Point(17) = {0.023945, 0.748558, 0, 1.0};
Point(18) = {0.019306, 0.749178, 0, 1.0};
Point(19) = {0.014726, 0.749628, 0, 1.0};
Point(20) = {0.010244, 0.749903, 0, 1.0};
Point(21) = {0.005902, 0.750000, 0, 1.0};
Point(22) = {0.001736, 0.749916, 0, 1.0};
Point(23) = {-0.002221, 0.749653, 0, 1.0};
Point(24) = {-0.005937, 0.749217, 0, 1.0};
Point(25) = {-0.009387, 0.748618, 0, 1.0};
Point(26) = {-0.012546, 0.747874, 0, 1.0};
Point(27) = {-0.015387, 0.747003, 0, 1.0};
Point(28) = {-0.017889, 0.746027, 0, 1.0};
Point(29) = {-0.020033, 0.744969, 0, 1.0};
Point(30) = {-0.021807, 0.743857, 0, 1.0};
Point(31) = {-0.023197, 0.742725, 0, 1.0};
Point(32) = {-0.024198, 0.741611, 0, 1.0};
Point(33) = {-0.024803, 0.740568, 0, 1.0};
Point(34) = {-0.024957, 0.740086, 0, 1.0};
Point(35) = {-0.024998, 0.739823, 0, 1.0};
Point(36) = {-0.025001, 0.739584, 0, 1.0};
Point(37) = {-0.024979, 0.739440, 0, 1.0};
Point(38) = {-0.024934, 0.739314, 0, 1.0};
Point(39) = {-0.024856, 0.739201, 0, 1.0};
Point(40) = {-0.024744, 0.739091, 0, 1.0};
Point(41) = {-0.024527, 0.738931, 0, 1.0};
Point(42) = {-0.024256, 0.738778, 0, 1.0};
Point(43) = {-0.023694, 0.738535, 0, 1.0};
Point(44) = {-0.022121, 0.738094, 0, 1.0};
Point(45) = {-0.019994, 0.737731, 0, 1.0};
Point(46) = {-0.017334, 0.737446, 0, 1.0};
Point(47) = {-0.014162, 0.737237, 0, 1.0};
Point(48) = {-0.010507, 0.737096, 0, 1.0};
Point(49) = {-0.006403, 0.737014, 0, 1.0};
Point(50) = {-0.001890, 0.736977, 0, 1.0};
Point(51) = {0.002984, 0.736973, 0, 1.0};
Point(52) = {0.008165, 0.736988, 0, 1.0};
Point(53) = {0.013595, 0.737007, 0, 1.0};
Point(54) = {0.019210, 0.737015, 0, 1.0};
Point(55) = {0.024945, 0.736999, 0, 1.0};
Point(56) = {0.030728, 0.736940, 0, 1.0};
Point(57) = {0.036484, 0.736822, 0, 1.0};
Point(58) = {0.042132, 0.736631, 0, 1.0};
Point(59) = {0.047585, 0.736356, 0, 1.0};
Point(60) = {0.052755, 0.735994, 0, 1.0};
Point(61) = {0.057554, 0.735552, 0, 1.0};
Point(62) = {0.061902, 0.735042, 0, 1.0};
Point(63) = {0.065721, 0.734486, 0, 1.0};
Point(64) = {0.068945, 0.733903, 0, 1.0};
Point(65) = {0.071494, 0.733325, 0, 1.0};
Point(66) = {0.073304, 0.732825, 0, 1.0};
Point(67) = {0.074372, 0.732488, 0, 1.0};
Point(68) = {-0.074723, -0.732370, 0, 1.0};
Point(69) = {-0.074401, -0.732522, 0, 1.0};
Point(70) = {-0.073496, -0.732971, 0, 1.0};
Point(71) = {-0.072107, -0.733670, 0, 1.0};
Point(72) = {-0.070267, -0.734536, 0, 1.0};
Point(73) = {-0.067968, -0.735531, 0, 1.0};
Point(74) = {-0.065233, -0.736652, 0, 1.0};
Point(75) = {-0.062109, -0.737882, 0, 1.0};
Point(76) = {-0.058645, -0.739193, 0, 1.0};
Point(77) = {-0.054887, -0.740552, 0, 1.0};
Point(78) = {-0.050883, -0.741925, 0, 1.0};
Point(79) = {-0.046676, -0.743275, 0, 1.0};
Point(80) = {-0.042310, -0.744566, 0, 1.0};
Point(81) = {-0.037821, -0.745763, 0, 1.0};
Point(82) = {-0.033241, -0.746838, 0, 1.0};
Point(83) = {-0.028603, -0.747774, 0, 1.0};
Point(84) = {-0.023945, -0.748558, 0, 1.0};
Point(85) = {-0.019306, -0.749178, 0, 1.0};
Point(86) = {-0.014726, -0.749628, 0, 1.0};
Point(87) = {-0.010244, -0.749903, 0, 1.0};
Point(88) = {-0.005902, -0.750000, 0, 1.0};
Point(89) = {-0.001736, -0.749916, 0, 1.0};
Point(90) = {0.002221, -0.749653, 0, 1.0};
Point(91) = {0.005937, -0.749217, 0, 1.0};
Point(92) = {0.009387, -0.748618, 0, 1.0};
Point(93) = {0.012546, -0.747874, 0, 1.0};
Point(94) = {0.015387, -0.747003, 0, 1.0};
Point(95) = {0.017889, -0.746027, 0, 1.0};
Point(96) = {0.020033, -0.744969, 0, 1.0};
Point(97) = {0.021807, -0.743857, 0, 1.0};
Point(98) = {0.023197, -0.742725, 0, 1.0};
Point(99) = {0.024198, -0.741611, 0, 1.0};
Point(100) = {0.024803, -0.740568, 0, 1.0};
Point(101) = {0.024957, -0.740086, 0, 1.0};
Point(102) = {0.024998, -0.739823, 0, 1.0};
Point(103) = {0.025001, -0.739584, 0, 1.0};
Point(104) = {0.024979, -0.739440, 0, 1.0};
Point(105) = {0.024934, -0.739314, 0, 1.0};
Point(106) = {0.024856, -0.739201, 0, 1.0};
Point(107) = {0.024744, -0.739091, 0, 1.0};
Point(108) = {0.024527, -0.738931, 0, 1.0};
Point(109) = {0.024256, -0.738778, 0, 1.0};
Point(110) = {0.023694, -0.738535, 0, 1.0};
Point(111) = {0.022121, -0.738094, 0, 1.0};
Point(112) = {0.019994, -0.737731, 0, 1.0};
Point(113) = {0.017334, -0.737446, 0, 1.0};
Point(114) = {0.014162, -0.737237, 0, 1.0};
Point(115) = {0.010507, -0.737096, 0, 1.0};
Point(116) = {0.006403, -0.737014, 0, 1.0};
Point(117) = {0.001890, -0.736977, 0, 1.0};
Point(118) = {-0.002984, -0.736973, 0, 1.0};
Point(119) = {-0.008165, -0.736988, 0, 1.0};
Point(120) = {-0.013595, -0.737007, 0, 1.0};
Point(121) = {-0.019210, -0.737015, 0, 1.0};
Point(122) = {-0.024945, -0.736999, 0, 1.0};
Point(123) = {-0.030728, -0.736940, 0, 1.0};
Point(124) = {-0.036484, -0.736822, 0, 1.0};
Point(125) = {-0.042132, -0.736631, 0, 1.0};
Point(126) = {-0.047585, -0.736356, 0, 1.0};
Point(127) = {-0.052755, -0.735994, 0, 1.0};
Point(128) = {-0.057554, -0.735552, 0, 1.0};
Point(129) = {-0.061902, -0.735042, 0, 1.0};
Point(130) = {-0.065721, -0.734486, 0, 1.0};
Point(131) = {-0.068945, -0.733903, 0, 1.0};
Point(132) = {-0.071494, -0.733325, 0, 1.0};
Point(133) = {-0.073304, -0.732825, 0, 1.0};
Point(134) = {-0.074372, -0.732488, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:51};
Spline(3) = {51:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:118};
Spline(7) = {118:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html