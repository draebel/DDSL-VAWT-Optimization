SetFactory("OpenCASCADE");

Point(1) = {0.149447, 0.714740, 0, 1.0};
Point(2) = {0.148803, 0.715043, 0, 1.0};
Point(3) = {0.146992, 0.715942, 0, 1.0};
Point(4) = {0.144214, 0.717341, 0, 1.0};
Point(5) = {0.140534, 0.719073, 0, 1.0};
Point(6) = {0.135936, 0.721062, 0, 1.0};
Point(7) = {0.130465, 0.723303, 0, 1.0};
Point(8) = {0.124218, 0.725764, 0, 1.0};
Point(9) = {0.117289, 0.728386, 0, 1.0};
Point(10) = {0.109775, 0.731105, 0, 1.0};
Point(11) = {0.101766, 0.733849, 0, 1.0};
Point(12) = {0.093352, 0.736549, 0, 1.0};
Point(13) = {0.084620, 0.739132, 0, 1.0};
Point(14) = {0.075642, 0.741525, 0, 1.0};
Point(15) = {0.066481, 0.743676, 0, 1.0};
Point(16) = {0.057206, 0.745549, 0, 1.0};
Point(17) = {0.047891, 0.747115, 0, 1.0};
Point(18) = {0.038612, 0.748356, 0, 1.0};
Point(19) = {0.029451, 0.749257, 0, 1.0};
Point(20) = {0.020489, 0.749807, 0, 1.0};
Point(21) = {0.011804, 0.750000, 0, 1.0};
Point(22) = {0.003472, 0.749831, 0, 1.0};
Point(23) = {-0.004441, 0.749306, 0, 1.0};
Point(24) = {-0.011874, 0.748434, 0, 1.0};
Point(25) = {-0.018775, 0.747237, 0, 1.0};
Point(26) = {-0.025091, 0.745748, 0, 1.0};
Point(27) = {-0.030774, 0.744007, 0, 1.0};
Point(28) = {-0.035777, 0.742054, 0, 1.0};
Point(29) = {-0.040067, 0.739938, 0, 1.0};
Point(30) = {-0.043613, 0.737714, 0, 1.0};
Point(31) = {-0.046395, 0.735450, 0, 1.0};
Point(32) = {-0.048395, 0.733223, 0, 1.0};
Point(33) = {-0.049606, 0.731135, 0, 1.0};
Point(34) = {-0.049914, 0.730171, 0, 1.0};
Point(35) = {-0.049997, 0.729647, 0, 1.0};
Point(36) = {-0.050001, 0.729168, 0, 1.0};
Point(37) = {-0.049958, 0.728880, 0, 1.0};
Point(38) = {-0.049868, 0.728629, 0, 1.0};
Point(39) = {-0.049712, 0.728403, 0, 1.0};
Point(40) = {-0.049489, 0.728183, 0, 1.0};
Point(41) = {-0.049054, 0.727863, 0, 1.0};
Point(42) = {-0.048512, 0.727556, 0, 1.0};
Point(43) = {-0.047388, 0.727070, 0, 1.0};
Point(44) = {-0.044242, 0.726189, 0, 1.0};
Point(45) = {-0.039988, 0.725462, 0, 1.0};
Point(46) = {-0.034667, 0.724893, 0, 1.0};
Point(47) = {-0.028324, 0.724474, 0, 1.0};
Point(48) = {-0.021014, 0.724192, 0, 1.0};
Point(49) = {-0.012806, 0.724028, 0, 1.0};
Point(50) = {-0.003780, 0.723955, 0, 1.0};
Point(51) = {0.005968, 0.723947, 0, 1.0};
Point(52) = {0.016330, 0.723976, 0, 1.0};
Point(53) = {0.027189, 0.724014, 0, 1.0};
Point(54) = {0.038420, 0.724031, 0, 1.0};
Point(55) = {0.049890, 0.723997, 0, 1.0};
Point(56) = {0.061457, 0.723879, 0, 1.0};
Point(57) = {0.072969, 0.723644, 0, 1.0};
Point(58) = {0.084264, 0.723262, 0, 1.0};
Point(59) = {0.095171, 0.722712, 0, 1.0};
Point(60) = {0.105509, 0.721988, 0, 1.0};
Point(61) = {0.115108, 0.721104, 0, 1.0};
Point(62) = {0.123803, 0.720085, 0, 1.0};
Point(63) = {0.131443, 0.718972, 0, 1.0};
Point(64) = {0.137889, 0.717805, 0, 1.0};
Point(65) = {0.142987, 0.716650, 0, 1.0};
Point(66) = {0.146609, 0.715650, 0, 1.0};
Point(67) = {0.148744, 0.714976, 0, 1.0};
Point(68) = {-0.149447, -0.714740, 0, 1.0};
Point(69) = {-0.148803, -0.715043, 0, 1.0};
Point(70) = {-0.146992, -0.715942, 0, 1.0};
Point(71) = {-0.144214, -0.717341, 0, 1.0};
Point(72) = {-0.140534, -0.719073, 0, 1.0};
Point(73) = {-0.135936, -0.721062, 0, 1.0};
Point(74) = {-0.130465, -0.723303, 0, 1.0};
Point(75) = {-0.124218, -0.725764, 0, 1.0};
Point(76) = {-0.117289, -0.728386, 0, 1.0};
Point(77) = {-0.109775, -0.731105, 0, 1.0};
Point(78) = {-0.101766, -0.733849, 0, 1.0};
Point(79) = {-0.093352, -0.736549, 0, 1.0};
Point(80) = {-0.084620, -0.739132, 0, 1.0};
Point(81) = {-0.075642, -0.741525, 0, 1.0};
Point(82) = {-0.066481, -0.743676, 0, 1.0};
Point(83) = {-0.057206, -0.745549, 0, 1.0};
Point(84) = {-0.047891, -0.747115, 0, 1.0};
Point(85) = {-0.038612, -0.748356, 0, 1.0};
Point(86) = {-0.029451, -0.749257, 0, 1.0};
Point(87) = {-0.020489, -0.749807, 0, 1.0};
Point(88) = {-0.011804, -0.750000, 0, 1.0};
Point(89) = {-0.003472, -0.749831, 0, 1.0};
Point(90) = {0.004441, -0.749306, 0, 1.0};
Point(91) = {0.011874, -0.748434, 0, 1.0};
Point(92) = {0.018775, -0.747237, 0, 1.0};
Point(93) = {0.025091, -0.745748, 0, 1.0};
Point(94) = {0.030774, -0.744007, 0, 1.0};
Point(95) = {0.035777, -0.742054, 0, 1.0};
Point(96) = {0.040067, -0.739938, 0, 1.0};
Point(97) = {0.043613, -0.737714, 0, 1.0};
Point(98) = {0.046395, -0.735450, 0, 1.0};
Point(99) = {0.048395, -0.733223, 0, 1.0};
Point(100) = {0.049606, -0.731135, 0, 1.0};
Point(101) = {0.049914, -0.730171, 0, 1.0};
Point(102) = {0.049997, -0.729647, 0, 1.0};
Point(103) = {0.050001, -0.729168, 0, 1.0};
Point(104) = {0.049958, -0.728880, 0, 1.0};
Point(105) = {0.049868, -0.728629, 0, 1.0};
Point(106) = {0.049712, -0.728403, 0, 1.0};
Point(107) = {0.049489, -0.728183, 0, 1.0};
Point(108) = {0.049054, -0.727863, 0, 1.0};
Point(109) = {0.048512, -0.727556, 0, 1.0};
Point(110) = {0.047388, -0.727070, 0, 1.0};
Point(111) = {0.044242, -0.726189, 0, 1.0};
Point(112) = {0.039988, -0.725462, 0, 1.0};
Point(113) = {0.034667, -0.724893, 0, 1.0};
Point(114) = {0.028324, -0.724474, 0, 1.0};
Point(115) = {0.021014, -0.724192, 0, 1.0};
Point(116) = {0.012806, -0.724028, 0, 1.0};
Point(117) = {0.003780, -0.723955, 0, 1.0};
Point(118) = {-0.005968, -0.723947, 0, 1.0};
Point(119) = {-0.016330, -0.723976, 0, 1.0};
Point(120) = {-0.027189, -0.724014, 0, 1.0};
Point(121) = {-0.038420, -0.724031, 0, 1.0};
Point(122) = {-0.049890, -0.723997, 0, 1.0};
Point(123) = {-0.061457, -0.723879, 0, 1.0};
Point(124) = {-0.072969, -0.723644, 0, 1.0};
Point(125) = {-0.084264, -0.723262, 0, 1.0};
Point(126) = {-0.095171, -0.722712, 0, 1.0};
Point(127) = {-0.105509, -0.721988, 0, 1.0};
Point(128) = {-0.115108, -0.721104, 0, 1.0};
Point(129) = {-0.123803, -0.720085, 0, 1.0};
Point(130) = {-0.131443, -0.718972, 0, 1.0};
Point(131) = {-0.137889, -0.717805, 0, 1.0};
Point(132) = {-0.142987, -0.716650, 0, 1.0};
Point(133) = {-0.146609, -0.715650, 0, 1.0};
Point(134) = {-0.148744, -0.714976, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:51};
Spline(3) = {51:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:118};
Spline(7) = {118:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html