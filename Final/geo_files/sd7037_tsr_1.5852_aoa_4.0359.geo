SetFactory("OpenCASCADE");

Point(1) = {0.112139, 0.731125, 0, 1.0};
Point(2) = {0.111652, 0.731222, 0, 1.0};
Point(3) = {0.110223, 0.731531, 0, 1.0};
Point(4) = {0.107915, 0.732079, 0, 1.0};
Point(5) = {0.104806, 0.732862, 0, 1.0};
Point(6) = {0.100981, 0.733859, 0, 1.0};
Point(7) = {0.096516, 0.735031, 0, 1.0};
Point(8) = {0.091480, 0.736326, 0, 1.0};
Point(9) = {0.085933, 0.737696, 0, 1.0};
Point(10) = {0.079928, 0.739093, 0, 1.0};
Point(11) = {0.073507, 0.740485, 0, 1.0};
Point(12) = {0.066732, 0.741862, 0, 1.0};
Point(13) = {0.059678, 0.743204, 0, 1.0};
Point(14) = {0.052426, 0.744486, 0, 1.0};
Point(15) = {0.045051, 0.745688, 0, 1.0};
Point(16) = {0.037631, 0.746781, 0, 1.0};
Point(17) = {0.030240, 0.747745, 0, 1.0};
Point(18) = {0.022956, 0.748558, 0, 1.0};
Point(19) = {0.015844, 0.749201, 0, 1.0};
Point(20) = {0.008971, 0.749662, 0, 1.0};
Point(21) = {0.002401, 0.749930, 0, 1.0};
Point(22) = {-0.003812, 0.750000, 0, 1.0};
Point(23) = {-0.009613, 0.749870, 0, 1.0};
Point(24) = {-0.014952, 0.749543, 0, 1.0};
Point(25) = {-0.019786, 0.749025, 0, 1.0};
Point(26) = {-0.024081, 0.748327, 0, 1.0};
Point(27) = {-0.027810, 0.747464, 0, 1.0};
Point(28) = {-0.030954, 0.746462, 0, 1.0};
Point(29) = {-0.033497, 0.745358, 0, 1.0};
Point(30) = {-0.035428, 0.744198, 0, 1.0};
Point(31) = {-0.036734, 0.743036, 0, 1.0};
Point(32) = {-0.037407, 0.741955, 0, 1.0};
Point(33) = {-0.037309, 0.741079, 0, 1.0};
Point(34) = {-0.036341, 0.740340, 0, 1.0};
Point(35) = {-0.034539, 0.739630, 0, 1.0};
Point(36) = {-0.031936, 0.738974, 0, 1.0};
Point(37) = {-0.028559, 0.738381, 0, 1.0};
Point(38) = {-0.024432, 0.737853, 0, 1.0};
Point(39) = {-0.019594, 0.737387, 0, 1.0};
Point(40) = {-0.014089, 0.736976, 0, 1.0};
Point(41) = {-0.007973, 0.736612, 0, 1.0};
Point(42) = {-0.001312, 0.736287, 0, 1.0};
Point(43) = {0.005822, 0.735989, 0, 1.0};
Point(44) = {0.013344, 0.735711, 0, 1.0};
Point(45) = {0.021168, 0.735445, 0, 1.0};
Point(46) = {0.029201, 0.735188, 0, 1.0};
Point(47) = {0.037348, 0.734935, 0, 1.0};
Point(48) = {0.045516, 0.734683, 0, 1.0};
Point(49) = {0.053609, 0.734429, 0, 1.0};
Point(50) = {0.061534, 0.734171, 0, 1.0};
Point(51) = {0.069194, 0.733902, 0, 1.0};
Point(52) = {0.076500, 0.733619, 0, 1.0};
Point(53) = {0.083355, 0.733312, 0, 1.0};
Point(54) = {0.089665, 0.732984, 0, 1.0};
Point(55) = {0.095341, 0.732641, 0, 1.0};
Point(56) = {0.100300, 0.732288, 0, 1.0};
Point(57) = {0.104467, 0.731944, 0, 1.0};
Point(58) = {0.107780, 0.731631, 0, 1.0};
Point(59) = {0.110186, 0.731370, 0, 1.0};
Point(60) = {0.111649, 0.731191, 0, 1.0};
Point(61) = {-0.112139, -0.731125, 0, 1.0};
Point(62) = {-0.111652, -0.731222, 0, 1.0};
Point(63) = {-0.110223, -0.731531, 0, 1.0};
Point(64) = {-0.107915, -0.732079, 0, 1.0};
Point(65) = {-0.104806, -0.732862, 0, 1.0};
Point(66) = {-0.100981, -0.733859, 0, 1.0};
Point(67) = {-0.096516, -0.735031, 0, 1.0};
Point(68) = {-0.091480, -0.736326, 0, 1.0};
Point(69) = {-0.085933, -0.737696, 0, 1.0};
Point(70) = {-0.079928, -0.739093, 0, 1.0};
Point(71) = {-0.073507, -0.740485, 0, 1.0};
Point(72) = {-0.066732, -0.741862, 0, 1.0};
Point(73) = {-0.059678, -0.743204, 0, 1.0};
Point(74) = {-0.052426, -0.744486, 0, 1.0};
Point(75) = {-0.045051, -0.745688, 0, 1.0};
Point(76) = {-0.037631, -0.746781, 0, 1.0};
Point(77) = {-0.030240, -0.747745, 0, 1.0};
Point(78) = {-0.022956, -0.748558, 0, 1.0};
Point(79) = {-0.015844, -0.749201, 0, 1.0};
Point(80) = {-0.008971, -0.749662, 0, 1.0};
Point(81) = {-0.002401, -0.749930, 0, 1.0};
Point(82) = {0.003812, -0.750000, 0, 1.0};
Point(83) = {0.009613, -0.749870, 0, 1.0};
Point(84) = {0.014952, -0.749543, 0, 1.0};
Point(85) = {0.019786, -0.749025, 0, 1.0};
Point(86) = {0.024081, -0.748327, 0, 1.0};
Point(87) = {0.027810, -0.747464, 0, 1.0};
Point(88) = {0.030954, -0.746462, 0, 1.0};
Point(89) = {0.033497, -0.745358, 0, 1.0};
Point(90) = {0.035428, -0.744198, 0, 1.0};
Point(91) = {0.036734, -0.743036, 0, 1.0};
Point(92) = {0.037407, -0.741955, 0, 1.0};
Point(93) = {0.037309, -0.741079, 0, 1.0};
Point(94) = {0.036341, -0.740340, 0, 1.0};
Point(95) = {0.034539, -0.739630, 0, 1.0};
Point(96) = {0.031936, -0.738974, 0, 1.0};
Point(97) = {0.028559, -0.738381, 0, 1.0};
Point(98) = {0.024432, -0.737853, 0, 1.0};
Point(99) = {0.019594, -0.737387, 0, 1.0};
Point(100) = {0.014089, -0.736976, 0, 1.0};
Point(101) = {0.007973, -0.736612, 0, 1.0};
Point(102) = {0.001312, -0.736287, 0, 1.0};
Point(103) = {-0.005822, -0.735989, 0, 1.0};
Point(104) = {-0.013344, -0.735711, 0, 1.0};
Point(105) = {-0.021168, -0.735445, 0, 1.0};
Point(106) = {-0.029201, -0.735188, 0, 1.0};
Point(107) = {-0.037348, -0.734935, 0, 1.0};
Point(108) = {-0.045516, -0.734683, 0, 1.0};
Point(109) = {-0.053609, -0.734429, 0, 1.0};
Point(110) = {-0.061534, -0.734171, 0, 1.0};
Point(111) = {-0.069194, -0.733902, 0, 1.0};
Point(112) = {-0.076500, -0.733619, 0, 1.0};
Point(113) = {-0.083355, -0.733312, 0, 1.0};
Point(114) = {-0.089665, -0.732984, 0, 1.0};
Point(115) = {-0.095341, -0.732641, 0, 1.0};
Point(116) = {-0.100300, -0.732288, 0, 1.0};
Point(117) = {-0.104467, -0.731944, 0, 1.0};
Point(118) = {-0.107780, -0.731631, 0, 1.0};
Point(119) = {-0.110186, -0.731370, 0, 1.0};
Point(120) = {-0.111649, -0.731191, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html