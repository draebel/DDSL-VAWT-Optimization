SetFactory("OpenCASCADE");

Point(1) = {0.112128, 0.731121, 0, 1.0};
Point(2) = {0.111642, 0.731219, 0, 1.0};
Point(3) = {0.110212, 0.731527, 0, 1.0};
Point(4) = {0.107904, 0.732075, 0, 1.0};
Point(5) = {0.104794, 0.732858, 0, 1.0};
Point(6) = {0.100968, 0.733856, 0, 1.0};
Point(7) = {0.096502, 0.735028, 0, 1.0};
Point(8) = {0.091465, 0.736323, 0, 1.0};
Point(9) = {0.085917, 0.737694, 0, 1.0};
Point(10) = {0.079911, 0.739090, 0, 1.0};
Point(11) = {0.073489, 0.740483, 0, 1.0};
Point(12) = {0.066712, 0.741861, 0, 1.0};
Point(13) = {0.059657, 0.743202, 0, 1.0};
Point(14) = {0.052403, 0.744485, 0, 1.0};
Point(15) = {0.045026, 0.745687, 0, 1.0};
Point(16) = {0.037604, 0.746781, 0, 1.0};
Point(17) = {0.030212, 0.747744, 0, 1.0};
Point(18) = {0.022927, 0.748557, 0, 1.0};
Point(19) = {0.015813, 0.749201, 0, 1.0};
Point(20) = {0.008939, 0.749662, 0, 1.0};
Point(21) = {0.002367, 0.749930, 0, 1.0};
Point(22) = {-0.003847, 0.750000, 0, 1.0};
Point(23) = {-0.009649, 0.749870, 0, 1.0};
Point(24) = {-0.014989, 0.749543, 0, 1.0};
Point(25) = {-0.019824, 0.749025, 0, 1.0};
Point(26) = {-0.024120, 0.748327, 0, 1.0};
Point(27) = {-0.027850, 0.747464, 0, 1.0};
Point(28) = {-0.030994, 0.746461, 0, 1.0};
Point(29) = {-0.033538, 0.745357, 0, 1.0};
Point(30) = {-0.035470, 0.744197, 0, 1.0};
Point(31) = {-0.036776, 0.743035, 0, 1.0};
Point(32) = {-0.037449, 0.741953, 0, 1.0};
Point(33) = {-0.037351, 0.741077, 0, 1.0};
Point(34) = {-0.036383, 0.740338, 0, 1.0};
Point(35) = {-0.034580, 0.739627, 0, 1.0};
Point(36) = {-0.031977, 0.738971, 0, 1.0};
Point(37) = {-0.028599, 0.738378, 0, 1.0};
Point(38) = {-0.024471, 0.737851, 0, 1.0};
Point(39) = {-0.019632, 0.737385, 0, 1.0};
Point(40) = {-0.014126, 0.736974, 0, 1.0};
Point(41) = {-0.008009, 0.736610, 0, 1.0};
Point(42) = {-0.001346, 0.736284, 0, 1.0};
Point(43) = {0.005789, 0.735987, 0, 1.0};
Point(44) = {0.013312, 0.735708, 0, 1.0};
Point(45) = {0.021138, 0.735442, 0, 1.0};
Point(46) = {0.029173, 0.735185, 0, 1.0};
Point(47) = {0.037322, 0.734932, 0, 1.0};
Point(48) = {0.045492, 0.734680, 0, 1.0};
Point(49) = {0.053586, 0.734426, 0, 1.0};
Point(50) = {0.061512, 0.734168, 0, 1.0};
Point(51) = {0.069175, 0.733899, 0, 1.0};
Point(52) = {0.076482, 0.733615, 0, 1.0};
Point(53) = {0.083339, 0.733309, 0, 1.0};
Point(54) = {0.089649, 0.732981, 0, 1.0};
Point(55) = {0.095327, 0.732637, 0, 1.0};
Point(56) = {0.100287, 0.732284, 0, 1.0};
Point(57) = {0.104455, 0.731941, 0, 1.0};
Point(58) = {0.107768, 0.731627, 0, 1.0};
Point(59) = {0.110175, 0.731366, 0, 1.0};
Point(60) = {0.111638, 0.731187, 0, 1.0};
Point(61) = {-0.112128, -0.731121, 0, 1.0};
Point(62) = {-0.111642, -0.731219, 0, 1.0};
Point(63) = {-0.110212, -0.731527, 0, 1.0};
Point(64) = {-0.107904, -0.732075, 0, 1.0};
Point(65) = {-0.104794, -0.732858, 0, 1.0};
Point(66) = {-0.100968, -0.733856, 0, 1.0};
Point(67) = {-0.096502, -0.735028, 0, 1.0};
Point(68) = {-0.091465, -0.736323, 0, 1.0};
Point(69) = {-0.085917, -0.737694, 0, 1.0};
Point(70) = {-0.079911, -0.739090, 0, 1.0};
Point(71) = {-0.073489, -0.740483, 0, 1.0};
Point(72) = {-0.066712, -0.741861, 0, 1.0};
Point(73) = {-0.059657, -0.743202, 0, 1.0};
Point(74) = {-0.052403, -0.744485, 0, 1.0};
Point(75) = {-0.045026, -0.745687, 0, 1.0};
Point(76) = {-0.037604, -0.746781, 0, 1.0};
Point(77) = {-0.030212, -0.747744, 0, 1.0};
Point(78) = {-0.022927, -0.748557, 0, 1.0};
Point(79) = {-0.015813, -0.749201, 0, 1.0};
Point(80) = {-0.008939, -0.749662, 0, 1.0};
Point(81) = {-0.002367, -0.749930, 0, 1.0};
Point(82) = {0.003847, -0.750000, 0, 1.0};
Point(83) = {0.009649, -0.749870, 0, 1.0};
Point(84) = {0.014989, -0.749543, 0, 1.0};
Point(85) = {0.019824, -0.749025, 0, 1.0};
Point(86) = {0.024120, -0.748327, 0, 1.0};
Point(87) = {0.027850, -0.747464, 0, 1.0};
Point(88) = {0.030994, -0.746461, 0, 1.0};
Point(89) = {0.033538, -0.745357, 0, 1.0};
Point(90) = {0.035470, -0.744197, 0, 1.0};
Point(91) = {0.036776, -0.743035, 0, 1.0};
Point(92) = {0.037449, -0.741953, 0, 1.0};
Point(93) = {0.037351, -0.741077, 0, 1.0};
Point(94) = {0.036383, -0.740338, 0, 1.0};
Point(95) = {0.034580, -0.739627, 0, 1.0};
Point(96) = {0.031977, -0.738971, 0, 1.0};
Point(97) = {0.028599, -0.738378, 0, 1.0};
Point(98) = {0.024471, -0.737851, 0, 1.0};
Point(99) = {0.019632, -0.737385, 0, 1.0};
Point(100) = {0.014126, -0.736974, 0, 1.0};
Point(101) = {0.008009, -0.736610, 0, 1.0};
Point(102) = {0.001346, -0.736284, 0, 1.0};
Point(103) = {-0.005789, -0.735987, 0, 1.0};
Point(104) = {-0.013312, -0.735708, 0, 1.0};
Point(105) = {-0.021138, -0.735442, 0, 1.0};
Point(106) = {-0.029173, -0.735185, 0, 1.0};
Point(107) = {-0.037322, -0.734932, 0, 1.0};
Point(108) = {-0.045492, -0.734680, 0, 1.0};
Point(109) = {-0.053586, -0.734426, 0, 1.0};
Point(110) = {-0.061512, -0.734168, 0, 1.0};
Point(111) = {-0.069175, -0.733899, 0, 1.0};
Point(112) = {-0.076482, -0.733615, 0, 1.0};
Point(113) = {-0.083339, -0.733309, 0, 1.0};
Point(114) = {-0.089649, -0.732981, 0, 1.0};
Point(115) = {-0.095327, -0.732637, 0, 1.0};
Point(116) = {-0.100287, -0.732284, 0, 1.0};
Point(117) = {-0.104455, -0.731941, 0, 1.0};
Point(118) = {-0.107768, -0.731627, 0, 1.0};
Point(119) = {-0.110175, -0.731366, 0, 1.0};
Point(120) = {-0.111638, -0.731187, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html