SetFactory("OpenCASCADE");

Point(1) = {0.112201, 0.731117, 0, 1.0};
Point(2) = {0.111715, 0.731215, 0, 1.0};
Point(3) = {0.110285, 0.731523, 0, 1.0};
Point(4) = {0.107976, 0.732071, 0, 1.0};
Point(5) = {0.104866, 0.732854, 0, 1.0};
Point(6) = {0.101039, 0.733852, 0, 1.0};
Point(7) = {0.096572, 0.735025, 0, 1.0};
Point(8) = {0.091535, 0.736320, 0, 1.0};
Point(9) = {0.085985, 0.737691, 0, 1.0};
Point(10) = {0.079977, 0.739088, 0, 1.0};
Point(11) = {0.073554, 0.740481, 0, 1.0};
Point(12) = {0.066776, 0.741859, 0, 1.0};
Point(13) = {0.059719, 0.743201, 0, 1.0};
Point(14) = {0.052464, 0.744484, 0, 1.0};
Point(15) = {0.045086, 0.745686, 0, 1.0};
Point(16) = {0.037662, 0.746780, 0, 1.0};
Point(17) = {0.030269, 0.747744, 0, 1.0};
Point(18) = {0.022982, 0.748557, 0, 1.0};
Point(19) = {0.015866, 0.749201, 0, 1.0};
Point(20) = {0.008991, 0.749662, 0, 1.0};
Point(21) = {0.002418, 0.749930, 0, 1.0};
Point(22) = {-0.003798, 0.750000, 0, 1.0};
Point(23) = {-0.009601, 0.749869, 0, 1.0};
Point(24) = {-0.014942, 0.749542, 0, 1.0};
Point(25) = {-0.019778, 0.749025, 0, 1.0};
Point(26) = {-0.024075, 0.748326, 0, 1.0};
Point(27) = {-0.027806, 0.747463, 0, 1.0};
Point(28) = {-0.030951, 0.746461, 0, 1.0};
Point(29) = {-0.033495, 0.745356, 0, 1.0};
Point(30) = {-0.035427, 0.744196, 0, 1.0};
Point(31) = {-0.036734, 0.743033, 0, 1.0};
Point(32) = {-0.037407, 0.741951, 0, 1.0};
Point(33) = {-0.037309, 0.741075, 0, 1.0};
Point(34) = {-0.036340, 0.740336, 0, 1.0};
Point(35) = {-0.034537, 0.739625, 0, 1.0};
Point(36) = {-0.031934, 0.738969, 0, 1.0};
Point(37) = {-0.028555, 0.738376, 0, 1.0};
Point(38) = {-0.024426, 0.737848, 0, 1.0};
Point(39) = {-0.019586, 0.737382, 0, 1.0};
Point(40) = {-0.014079, 0.736971, 0, 1.0};
Point(41) = {-0.007960, 0.736607, 0, 1.0};
Point(42) = {-0.001296, 0.736281, 0, 1.0};
Point(43) = {0.005840, 0.735984, 0, 1.0};
Point(44) = {0.013365, 0.735705, 0, 1.0};
Point(45) = {0.021193, 0.735439, 0, 1.0};
Point(46) = {0.029229, 0.735182, 0, 1.0};
Point(47) = {0.037379, 0.734928, 0, 1.0};
Point(48) = {0.045551, 0.734677, 0, 1.0};
Point(49) = {0.053648, 0.734423, 0, 1.0};
Point(50) = {0.061575, 0.734164, 0, 1.0};
Point(51) = {0.069239, 0.733896, 0, 1.0};
Point(52) = {0.076548, 0.733612, 0, 1.0};
Point(53) = {0.083406, 0.733305, 0, 1.0};
Point(54) = {0.089718, 0.732977, 0, 1.0};
Point(55) = {0.095397, 0.732634, 0, 1.0};
Point(56) = {0.100358, 0.732281, 0, 1.0};
Point(57) = {0.104527, 0.731937, 0, 1.0};
Point(58) = {0.107841, 0.731623, 0, 1.0};
Point(59) = {0.110248, 0.731362, 0, 1.0};
Point(60) = {0.111711, 0.731183, 0, 1.0};
Point(61) = {-0.112201, -0.731117, 0, 1.0};
Point(62) = {-0.111715, -0.731215, 0, 1.0};
Point(63) = {-0.110285, -0.731523, 0, 1.0};
Point(64) = {-0.107976, -0.732071, 0, 1.0};
Point(65) = {-0.104866, -0.732854, 0, 1.0};
Point(66) = {-0.101039, -0.733852, 0, 1.0};
Point(67) = {-0.096572, -0.735025, 0, 1.0};
Point(68) = {-0.091535, -0.736320, 0, 1.0};
Point(69) = {-0.085985, -0.737691, 0, 1.0};
Point(70) = {-0.079977, -0.739088, 0, 1.0};
Point(71) = {-0.073554, -0.740481, 0, 1.0};
Point(72) = {-0.066776, -0.741859, 0, 1.0};
Point(73) = {-0.059719, -0.743201, 0, 1.0};
Point(74) = {-0.052464, -0.744484, 0, 1.0};
Point(75) = {-0.045086, -0.745686, 0, 1.0};
Point(76) = {-0.037662, -0.746780, 0, 1.0};
Point(77) = {-0.030269, -0.747744, 0, 1.0};
Point(78) = {-0.022982, -0.748557, 0, 1.0};
Point(79) = {-0.015866, -0.749201, 0, 1.0};
Point(80) = {-0.008991, -0.749662, 0, 1.0};
Point(81) = {-0.002418, -0.749930, 0, 1.0};
Point(82) = {0.003798, -0.750000, 0, 1.0};
Point(83) = {0.009601, -0.749869, 0, 1.0};
Point(84) = {0.014942, -0.749542, 0, 1.0};
Point(85) = {0.019778, -0.749025, 0, 1.0};
Point(86) = {0.024075, -0.748326, 0, 1.0};
Point(87) = {0.027806, -0.747463, 0, 1.0};
Point(88) = {0.030951, -0.746461, 0, 1.0};
Point(89) = {0.033495, -0.745356, 0, 1.0};
Point(90) = {0.035427, -0.744196, 0, 1.0};
Point(91) = {0.036734, -0.743033, 0, 1.0};
Point(92) = {0.037407, -0.741951, 0, 1.0};
Point(93) = {0.037309, -0.741075, 0, 1.0};
Point(94) = {0.036340, -0.740336, 0, 1.0};
Point(95) = {0.034537, -0.739625, 0, 1.0};
Point(96) = {0.031934, -0.738969, 0, 1.0};
Point(97) = {0.028555, -0.738376, 0, 1.0};
Point(98) = {0.024426, -0.737848, 0, 1.0};
Point(99) = {0.019586, -0.737382, 0, 1.0};
Point(100) = {0.014079, -0.736971, 0, 1.0};
Point(101) = {0.007960, -0.736607, 0, 1.0};
Point(102) = {0.001296, -0.736281, 0, 1.0};
Point(103) = {-0.005840, -0.735984, 0, 1.0};
Point(104) = {-0.013365, -0.735705, 0, 1.0};
Point(105) = {-0.021193, -0.735439, 0, 1.0};
Point(106) = {-0.029229, -0.735182, 0, 1.0};
Point(107) = {-0.037379, -0.734928, 0, 1.0};
Point(108) = {-0.045551, -0.734677, 0, 1.0};
Point(109) = {-0.053648, -0.734423, 0, 1.0};
Point(110) = {-0.061575, -0.734164, 0, 1.0};
Point(111) = {-0.069239, -0.733896, 0, 1.0};
Point(112) = {-0.076548, -0.733612, 0, 1.0};
Point(113) = {-0.083406, -0.733305, 0, 1.0};
Point(114) = {-0.089718, -0.732977, 0, 1.0};
Point(115) = {-0.095397, -0.732634, 0, 1.0};
Point(116) = {-0.100358, -0.732281, 0, 1.0};
Point(117) = {-0.104527, -0.731937, 0, 1.0};
Point(118) = {-0.107841, -0.731623, 0, 1.0};
Point(119) = {-0.110248, -0.731362, 0, 1.0};
Point(120) = {-0.111711, -0.731183, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html