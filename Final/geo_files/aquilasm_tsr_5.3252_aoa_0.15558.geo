SetFactory("OpenCASCADE");

Point(1) = {0.149999, 0.732157, 0, 1.0};
Point(2) = {0.149334, 0.732273, 0, 1.0};
Point(3) = {0.148666, 0.732389, 0, 1.0};
Point(4) = {0.148000, 0.732505, 0, 1.0};
Point(5) = {0.147335, 0.732620, 0, 1.0};
Point(6) = {0.146001, 0.732848, 0, 1.0};
Point(7) = {0.135340, 0.734677, 0, 1.0};
Point(8) = {0.124677, 0.736526, 0, 1.0};
Point(9) = {0.114016, 0.738385, 0, 1.0};
Point(10) = {0.102022, 0.740441, 0, 1.0};
Point(11) = {0.091360, 0.742206, 0, 1.0};
Point(12) = {0.080697, 0.743881, 0, 1.0};
Point(13) = {0.070035, 0.745434, 0, 1.0};
Point(14) = {0.059373, 0.746831, 0, 1.0};
Point(15) = {0.048708, 0.748030, 0, 1.0};
Point(16) = {0.038045, 0.748987, 0, 1.0};
Point(17) = {0.028712, 0.749589, 0, 1.0};
Point(18) = {0.019381, 0.749932, 0, 1.0};
Point(19) = {0.012713, 0.750000, 0, 1.0};
Point(20) = {0.004713, 0.749862, 0, 1.0};
Point(21) = {-0.003288, 0.749449, 0, 1.0};
Point(22) = {-0.011290, 0.748705, 0, 1.0};
Point(23) = {-0.017959, 0.747767, 0, 1.0};
Point(24) = {-0.024629, 0.746459, 0, 1.0};
Point(25) = {-0.031301, 0.744673, 0, 1.0};
Point(26) = {-0.037974, 0.742240, 0, 1.0};
Point(27) = {-0.040643, 0.741017, 0, 1.0};
Point(28) = {-0.043315, 0.739590, 0, 1.0};
Point(29) = {-0.044649, 0.738776, 0, 1.0};
Point(30) = {-0.045986, 0.737863, 0, 1.0};
Point(31) = {-0.047323, 0.736797, 0, 1.0};
Point(32) = {-0.047991, 0.736173, 0, 1.0};
Point(33) = {-0.048659, 0.735451, 0, 1.0};
Point(34) = {-0.049329, 0.734556, 0, 1.0};
Point(35) = {-0.050000, 0.732700, 0, 1.0};
Point(36) = {-0.049337, 0.731554, 0, 1.0};
Point(37) = {-0.048670, 0.731247, 0, 1.0};
Point(38) = {-0.048004, 0.731075, 0, 1.0};
Point(39) = {-0.047339, 0.730969, 0, 1.0};
Point(40) = {-0.046005, 0.730855, 0, 1.0};
Point(41) = {-0.044671, 0.730806, 0, 1.0};
Point(42) = {-0.043339, 0.730788, 0, 1.0};
Point(43) = {-0.040671, 0.730797, 0, 1.0};
Point(44) = {-0.038005, 0.730828, 0, 1.0};
Point(45) = {-0.031339, 0.730918, 0, 1.0};
Point(46) = {-0.024671, 0.730989, 0, 1.0};
Point(47) = {-0.018004, 0.731039, 0, 1.0};
Point(48) = {-0.011338, 0.731079, 0, 1.0};
Point(49) = {-0.003338, 0.731126, 0, 1.0};
Point(50) = {0.004662, 0.731176, 0, 1.0};
Point(51) = {0.012662, 0.731230, 0, 1.0};
Point(52) = {0.019330, 0.731276, 0, 1.0};
Point(53) = {0.028663, 0.731339, 0, 1.0};
Point(54) = {0.037997, 0.731401, 0, 1.0};
Point(55) = {0.048663, 0.731472, 0, 1.0};
Point(56) = {0.059331, 0.731543, 0, 1.0};
Point(57) = {0.069997, 0.731614, 0, 1.0};
Point(58) = {0.080664, 0.731685, 0, 1.0};
Point(59) = {0.091332, 0.731758, 0, 1.0};
Point(60) = {0.101998, 0.731829, 0, 1.0};
Point(61) = {0.113998, 0.731909, 0, 1.0};
Point(62) = {0.124665, 0.731982, 0, 1.0};
Point(63) = {0.135333, 0.732057, 0, 1.0};
Point(64) = {0.145999, 0.732130, 0, 1.0};
Point(65) = {0.147333, 0.732138, 0, 1.0};
Point(66) = {0.147999, 0.732145, 0, 1.0};
Point(67) = {0.148665, 0.732149, 0, 1.0};
Point(68) = {0.149333, 0.732153, 0, 1.0};
Point(69) = {-0.149999, -0.732157, 0, 1.0};
Point(70) = {-0.149334, -0.732273, 0, 1.0};
Point(71) = {-0.148666, -0.732389, 0, 1.0};
Point(72) = {-0.148000, -0.732505, 0, 1.0};
Point(73) = {-0.147335, -0.732620, 0, 1.0};
Point(74) = {-0.146001, -0.732848, 0, 1.0};
Point(75) = {-0.135340, -0.734677, 0, 1.0};
Point(76) = {-0.124677, -0.736526, 0, 1.0};
Point(77) = {-0.114016, -0.738385, 0, 1.0};
Point(78) = {-0.102022, -0.740441, 0, 1.0};
Point(79) = {-0.091360, -0.742206, 0, 1.0};
Point(80) = {-0.080697, -0.743881, 0, 1.0};
Point(81) = {-0.070035, -0.745434, 0, 1.0};
Point(82) = {-0.059373, -0.746831, 0, 1.0};
Point(83) = {-0.048708, -0.748030, 0, 1.0};
Point(84) = {-0.038045, -0.748987, 0, 1.0};
Point(85) = {-0.028712, -0.749589, 0, 1.0};
Point(86) = {-0.019381, -0.749932, 0, 1.0};
Point(87) = {-0.012713, -0.750000, 0, 1.0};
Point(88) = {-0.004713, -0.749862, 0, 1.0};
Point(89) = {0.003288, -0.749449, 0, 1.0};
Point(90) = {0.011290, -0.748705, 0, 1.0};
Point(91) = {0.017959, -0.747767, 0, 1.0};
Point(92) = {0.024629, -0.746459, 0, 1.0};
Point(93) = {0.031301, -0.744673, 0, 1.0};
Point(94) = {0.037974, -0.742240, 0, 1.0};
Point(95) = {0.040643, -0.741017, 0, 1.0};
Point(96) = {0.043315, -0.739590, 0, 1.0};
Point(97) = {0.044649, -0.738776, 0, 1.0};
Point(98) = {0.045986, -0.737863, 0, 1.0};
Point(99) = {0.047323, -0.736797, 0, 1.0};
Point(100) = {0.047991, -0.736173, 0, 1.0};
Point(101) = {0.048659, -0.735451, 0, 1.0};
Point(102) = {0.049329, -0.734556, 0, 1.0};
Point(103) = {0.050000, -0.732700, 0, 1.0};
Point(104) = {0.049337, -0.731554, 0, 1.0};
Point(105) = {0.048670, -0.731247, 0, 1.0};
Point(106) = {0.048004, -0.731075, 0, 1.0};
Point(107) = {0.047339, -0.730969, 0, 1.0};
Point(108) = {0.046005, -0.730855, 0, 1.0};
Point(109) = {0.044671, -0.730806, 0, 1.0};
Point(110) = {0.043339, -0.730788, 0, 1.0};
Point(111) = {0.040671, -0.730797, 0, 1.0};
Point(112) = {0.038005, -0.730828, 0, 1.0};
Point(113) = {0.031339, -0.730918, 0, 1.0};
Point(114) = {0.024671, -0.730989, 0, 1.0};
Point(115) = {0.018004, -0.731039, 0, 1.0};
Point(116) = {0.011338, -0.731079, 0, 1.0};
Point(117) = {0.003338, -0.731126, 0, 1.0};
Point(118) = {-0.004662, -0.731176, 0, 1.0};
Point(119) = {-0.012662, -0.731230, 0, 1.0};
Point(120) = {-0.019330, -0.731276, 0, 1.0};
Point(121) = {-0.028663, -0.731339, 0, 1.0};
Point(122) = {-0.037997, -0.731401, 0, 1.0};
Point(123) = {-0.048663, -0.731472, 0, 1.0};
Point(124) = {-0.059331, -0.731543, 0, 1.0};
Point(125) = {-0.069997, -0.731614, 0, 1.0};
Point(126) = {-0.080664, -0.731685, 0, 1.0};
Point(127) = {-0.091332, -0.731758, 0, 1.0};
Point(128) = {-0.101998, -0.731829, 0, 1.0};
Point(129) = {-0.113998, -0.731909, 0, 1.0};
Point(130) = {-0.124665, -0.731982, 0, 1.0};
Point(131) = {-0.135333, -0.732057, 0, 1.0};
Point(132) = {-0.145999, -0.732130, 0, 1.0};
Point(133) = {-0.147333, -0.732138, 0, 1.0};
Point(134) = {-0.147999, -0.732145, 0, 1.0};
Point(135) = {-0.148665, -0.732149, 0, 1.0};
Point(136) = {-0.149333, -0.732153, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:50};
Spline(3) = {50:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:88};
Spline(6) = {88:118};
Spline(7) = {118:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html