SetFactory("OpenCASCADE");

Point(1) = {0.075000, 0.736618, 0, 1.0};
Point(2) = {0.074500, 0.736705, 0, 1.0};
Point(3) = {0.074000, 0.736792, 0, 1.0};
Point(4) = {0.073500, 0.736878, 0, 1.0};
Point(5) = {0.073001, 0.736965, 0, 1.0};
Point(6) = {0.072001, 0.737136, 0, 1.0};
Point(7) = {0.064005, 0.738508, 0, 1.0};
Point(8) = {0.056008, 0.739894, 0, 1.0};
Point(9) = {0.048012, 0.741289, 0, 1.0};
Point(10) = {0.039016, 0.742831, 0, 1.0};
Point(11) = {0.031021, 0.744155, 0, 1.0};
Point(12) = {0.023023, 0.745411, 0, 1.0};
Point(13) = {0.015027, 0.746576, 0, 1.0};
Point(14) = {0.007030, 0.747623, 0, 1.0};
Point(15) = {-0.000969, 0.748523, 0, 1.0};
Point(16) = {-0.008966, 0.749240, 0, 1.0};
Point(17) = {-0.015966, 0.749691, 0, 1.0};
Point(18) = {-0.022964, 0.749949, 0, 1.0};
Point(19) = {-0.027965, 0.750000, 0, 1.0};
Point(20) = {-0.033965, 0.749896, 0, 1.0};
Point(21) = {-0.039966, 0.749587, 0, 1.0};
Point(22) = {-0.045968, 0.749029, 0, 1.0};
Point(23) = {-0.050969, 0.748325, 0, 1.0};
Point(24) = {-0.055971, 0.747345, 0, 1.0};
Point(25) = {-0.060976, 0.746005, 0, 1.0};
Point(26) = {-0.065980, 0.744180, 0, 1.0};
Point(27) = {-0.067982, 0.743263, 0, 1.0};
Point(28) = {-0.069986, 0.742193, 0, 1.0};
Point(29) = {-0.070987, 0.741582, 0, 1.0};
Point(30) = {-0.071989, 0.740898, 0, 1.0};
Point(31) = {-0.072992, 0.740098, 0, 1.0};
Point(32) = {-0.073493, 0.739630, 0, 1.0};
Point(33) = {-0.073994, 0.739088, 0, 1.0};
Point(34) = {-0.074496, 0.738417, 0, 1.0};
Point(35) = {-0.075000, 0.737025, 0, 1.0};
Point(36) = {-0.074503, 0.736166, 0, 1.0};
Point(37) = {-0.074002, 0.735935, 0, 1.0};
Point(38) = {-0.073503, 0.735806, 0, 1.0};
Point(39) = {-0.073004, 0.735727, 0, 1.0};
Point(40) = {-0.072003, 0.735642, 0, 1.0};
Point(41) = {-0.071003, 0.735604, 0, 1.0};
Point(42) = {-0.070004, 0.735591, 0, 1.0};
Point(43) = {-0.068003, 0.735598, 0, 1.0};
Point(44) = {-0.066004, 0.735621, 0, 1.0};
Point(45) = {-0.061004, 0.735688, 0, 1.0};
Point(46) = {-0.056003, 0.735742, 0, 1.0};
Point(47) = {-0.051003, 0.735780, 0, 1.0};
Point(48) = {-0.046003, 0.735809, 0, 1.0};
Point(49) = {-0.040003, 0.735844, 0, 1.0};
Point(50) = {-0.034003, 0.735882, 0, 1.0};
Point(51) = {-0.028003, 0.735923, 0, 1.0};
Point(52) = {-0.023002, 0.735957, 0, 1.0};
Point(53) = {-0.016003, 0.736004, 0, 1.0};
Point(54) = {-0.009002, 0.736051, 0, 1.0};
Point(55) = {-0.001002, 0.736104, 0, 1.0};
Point(56) = {0.006999, 0.736158, 0, 1.0};
Point(57) = {0.014998, 0.736211, 0, 1.0};
Point(58) = {0.022998, 0.736264, 0, 1.0};
Point(59) = {0.030999, 0.736319, 0, 1.0};
Point(60) = {0.038999, 0.736372, 0, 1.0};
Point(61) = {0.047999, 0.736432, 0, 1.0};
Point(62) = {0.055999, 0.736486, 0, 1.0};
Point(63) = {0.064000, 0.736543, 0, 1.0};
Point(64) = {0.072000, 0.736598, 0, 1.0};
Point(65) = {0.073000, 0.736604, 0, 1.0};
Point(66) = {0.073500, 0.736608, 0, 1.0};
Point(67) = {0.073999, 0.736612, 0, 1.0};
Point(68) = {0.074500, 0.736615, 0, 1.0};
Point(69) = {-0.075000, -0.736618, 0, 1.0};
Point(70) = {-0.074500, -0.736705, 0, 1.0};
Point(71) = {-0.074000, -0.736792, 0, 1.0};
Point(72) = {-0.073500, -0.736878, 0, 1.0};
Point(73) = {-0.073001, -0.736965, 0, 1.0};
Point(74) = {-0.072001, -0.737136, 0, 1.0};
Point(75) = {-0.064005, -0.738508, 0, 1.0};
Point(76) = {-0.056008, -0.739894, 0, 1.0};
Point(77) = {-0.048012, -0.741289, 0, 1.0};
Point(78) = {-0.039016, -0.742831, 0, 1.0};
Point(79) = {-0.031021, -0.744155, 0, 1.0};
Point(80) = {-0.023023, -0.745411, 0, 1.0};
Point(81) = {-0.015027, -0.746576, 0, 1.0};
Point(82) = {-0.007030, -0.747623, 0, 1.0};
Point(83) = {0.000969, -0.748523, 0, 1.0};
Point(84) = {0.008966, -0.749240, 0, 1.0};
Point(85) = {0.015966, -0.749691, 0, 1.0};
Point(86) = {0.022964, -0.749949, 0, 1.0};
Point(87) = {0.027965, -0.750000, 0, 1.0};
Point(88) = {0.033965, -0.749896, 0, 1.0};
Point(89) = {0.039966, -0.749587, 0, 1.0};
Point(90) = {0.045968, -0.749029, 0, 1.0};
Point(91) = {0.050969, -0.748325, 0, 1.0};
Point(92) = {0.055971, -0.747345, 0, 1.0};
Point(93) = {0.060976, -0.746005, 0, 1.0};
Point(94) = {0.065980, -0.744180, 0, 1.0};
Point(95) = {0.067982, -0.743263, 0, 1.0};
Point(96) = {0.069986, -0.742193, 0, 1.0};
Point(97) = {0.070987, -0.741582, 0, 1.0};
Point(98) = {0.071989, -0.740898, 0, 1.0};
Point(99) = {0.072992, -0.740098, 0, 1.0};
Point(100) = {0.073493, -0.739630, 0, 1.0};
Point(101) = {0.073994, -0.739088, 0, 1.0};
Point(102) = {0.074496, -0.738417, 0, 1.0};
Point(103) = {0.075000, -0.737025, 0, 1.0};
Point(104) = {0.074503, -0.736166, 0, 1.0};
Point(105) = {0.074002, -0.735935, 0, 1.0};
Point(106) = {0.073503, -0.735806, 0, 1.0};
Point(107) = {0.073004, -0.735727, 0, 1.0};
Point(108) = {0.072003, -0.735642, 0, 1.0};
Point(109) = {0.071003, -0.735604, 0, 1.0};
Point(110) = {0.070004, -0.735591, 0, 1.0};
Point(111) = {0.068003, -0.735598, 0, 1.0};
Point(112) = {0.066004, -0.735621, 0, 1.0};
Point(113) = {0.061004, -0.735688, 0, 1.0};
Point(114) = {0.056003, -0.735742, 0, 1.0};
Point(115) = {0.051003, -0.735780, 0, 1.0};
Point(116) = {0.046003, -0.735809, 0, 1.0};
Point(117) = {0.040003, -0.735844, 0, 1.0};
Point(118) = {0.034003, -0.735882, 0, 1.0};
Point(119) = {0.028003, -0.735923, 0, 1.0};
Point(120) = {0.023002, -0.735957, 0, 1.0};
Point(121) = {0.016003, -0.736004, 0, 1.0};
Point(122) = {0.009002, -0.736051, 0, 1.0};
Point(123) = {0.001002, -0.736104, 0, 1.0};
Point(124) = {-0.006999, -0.736158, 0, 1.0};
Point(125) = {-0.014998, -0.736211, 0, 1.0};
Point(126) = {-0.022998, -0.736264, 0, 1.0};
Point(127) = {-0.030999, -0.736319, 0, 1.0};
Point(128) = {-0.038999, -0.736372, 0, 1.0};
Point(129) = {-0.047999, -0.736432, 0, 1.0};
Point(130) = {-0.055999, -0.736486, 0, 1.0};
Point(131) = {-0.064000, -0.736543, 0, 1.0};
Point(132) = {-0.072000, -0.736598, 0, 1.0};
Point(133) = {-0.073000, -0.736604, 0, 1.0};
Point(134) = {-0.073500, -0.736608, 0, 1.0};
Point(135) = {-0.073999, -0.736612, 0, 1.0};
Point(136) = {-0.074500, -0.736615, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:50};
Spline(3) = {50:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:88};
Spline(6) = {88:118};
Spline(7) = {118:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html