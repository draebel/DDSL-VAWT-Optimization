SetFactory("OpenCASCADE");

Point(1) = {0.112236, 0.745325, 0, 1.0};
Point(2) = {0.111957, 0.745332, 0, 1.0};
Point(3) = {0.111127, 0.745370, 0, 1.0};
Point(4) = {0.109771, 0.745458, 0, 1.0};
Point(5) = {0.107913, 0.745602, 0, 1.0};
Point(6) = {0.105586, 0.745809, 0, 1.0};
Point(7) = {0.102826, 0.746074, 0, 1.0};
Point(8) = {0.099665, 0.746392, 0, 1.0};
Point(9) = {0.096137, 0.746749, 0, 1.0};
Point(10) = {0.092272, 0.747132, 0, 1.0};
Point(11) = {0.088099, 0.747526, 0, 1.0};
Point(12) = {0.083647, 0.747917, 0, 1.0};
Point(13) = {0.078940, 0.748293, 0, 1.0};
Point(14) = {0.074004, 0.748646, 0, 1.0};
Point(15) = {0.068868, 0.748967, 0, 1.0};
Point(16) = {0.063560, 0.749255, 0, 1.0};
Point(17) = {0.058119, 0.749508, 0, 1.0};
Point(18) = {0.052575, 0.749713, 0, 1.0};
Point(19) = {0.046962, 0.749867, 0, 1.0};
Point(20) = {0.041318, 0.749967, 0, 1.0};
Point(21) = {0.035673, 0.750000, 0, 1.0};
Point(22) = {0.030058, 0.749969, 0, 1.0};
Point(23) = {0.024509, 0.749864, 0, 1.0};
Point(24) = {0.019054, 0.749683, 0, 1.0};
Point(25) = {0.013723, 0.749425, 0, 1.0};
Point(26) = {0.008546, 0.749085, 0, 1.0};
Point(27) = {0.003546, 0.748662, 0, 1.0};
Point(28) = {-0.001246, 0.748157, 0, 1.0};
Point(29) = {-0.005809, 0.747570, 0, 1.0};
Point(30) = {-0.010126, 0.746906, 0, 1.0};
Point(31) = {-0.014171, 0.746166, 0, 1.0};
Point(32) = {-0.017930, 0.745353, 0, 1.0};
Point(33) = {-0.021389, 0.744479, 0, 1.0};
Point(34) = {-0.024529, 0.743548, 0, 1.0};
Point(35) = {-0.027347, 0.742568, 0, 1.0};
Point(36) = {-0.029828, 0.741557, 0, 1.0};
Point(37) = {-0.031965, 0.740520, 0, 1.0};
Point(38) = {-0.033763, 0.739479, 0, 1.0};
Point(39) = {-0.035211, 0.738458, 0, 1.0};
Point(40) = {-0.036299, 0.737474, 0, 1.0};
Point(41) = {-0.037036, 0.736555, 0, 1.0};
Point(42) = {-0.037417, 0.735735, 0, 1.0};
Point(43) = {-0.037418, 0.735129, 0, 1.0};
Point(44) = {-0.036903, 0.734685, 0, 1.0};
Point(45) = {-0.035851, 0.734267, 0, 1.0};
Point(46) = {-0.034361, 0.733900, 0, 1.0};
Point(47) = {-0.032447, 0.733612, 0, 1.0};
Point(48) = {-0.030109, 0.733413, 0, 1.0};
Point(49) = {-0.027355, 0.733298, 0, 1.0};
Point(50) = {-0.024205, 0.733264, 0, 1.0};
Point(51) = {-0.020670, 0.733312, 0, 1.0};
Point(52) = {-0.016773, 0.733441, 0, 1.0};
Point(53) = {-0.012532, 0.733647, 0, 1.0};
Point(54) = {-0.007970, 0.733925, 0, 1.0};
Point(55) = {-0.003117, 0.734271, 0, 1.0};
Point(56) = {0.002002, 0.734680, 0, 1.0};
Point(57) = {0.007357, 0.735144, 0, 1.0};
Point(58) = {0.012914, 0.735657, 0, 1.0};
Point(59) = {0.018640, 0.736211, 0, 1.0};
Point(60) = {0.024499, 0.736798, 0, 1.0};
Point(61) = {0.030452, 0.737411, 0, 1.0};
Point(62) = {0.036459, 0.738046, 0, 1.0};
Point(63) = {0.042484, 0.738699, 0, 1.0};
Point(64) = {0.048496, 0.739366, 0, 1.0};
Point(65) = {0.054460, 0.740029, 0, 1.0};
Point(66) = {0.060333, 0.740680, 0, 1.0};
Point(67) = {0.066077, 0.741308, 0, 1.0};
Point(68) = {0.071648, 0.741903, 0, 1.0};
Point(69) = {0.077007, 0.742460, 0, 1.0};
Point(70) = {0.082114, 0.742972, 0, 1.0};
Point(71) = {0.086929, 0.743436, 0, 1.0};
Point(72) = {0.091414, 0.743848, 0, 1.0};
Point(73) = {0.095535, 0.744210, 0, 1.0};
Point(74) = {0.099264, 0.744523, 0, 1.0};
Point(75) = {0.102575, 0.744788, 0, 1.0};
Point(76) = {0.105443, 0.744998, 0, 1.0};
Point(77) = {0.107839, 0.745152, 0, 1.0};
Point(78) = {0.109739, 0.745253, 0, 1.0};
Point(79) = {0.111118, 0.745306, 0, 1.0};
Point(80) = {0.111954, 0.745324, 0, 1.0};
Point(81) = {-0.112236, -0.745325, 0, 1.0};
Point(82) = {-0.111957, -0.745332, 0, 1.0};
Point(83) = {-0.111127, -0.745370, 0, 1.0};
Point(84) = {-0.109771, -0.745458, 0, 1.0};
Point(85) = {-0.107913, -0.745602, 0, 1.0};
Point(86) = {-0.105586, -0.745809, 0, 1.0};
Point(87) = {-0.102826, -0.746074, 0, 1.0};
Point(88) = {-0.099665, -0.746392, 0, 1.0};
Point(89) = {-0.096137, -0.746749, 0, 1.0};
Point(90) = {-0.092272, -0.747132, 0, 1.0};
Point(91) = {-0.088099, -0.747526, 0, 1.0};
Point(92) = {-0.083647, -0.747917, 0, 1.0};
Point(93) = {-0.078940, -0.748293, 0, 1.0};
Point(94) = {-0.074004, -0.748646, 0, 1.0};
Point(95) = {-0.068868, -0.748967, 0, 1.0};
Point(96) = {-0.063560, -0.749255, 0, 1.0};
Point(97) = {-0.058119, -0.749508, 0, 1.0};
Point(98) = {-0.052575, -0.749713, 0, 1.0};
Point(99) = {-0.046962, -0.749867, 0, 1.0};
Point(100) = {-0.041318, -0.749967, 0, 1.0};
Point(101) = {-0.035673, -0.750000, 0, 1.0};
Point(102) = {-0.030058, -0.749969, 0, 1.0};
Point(103) = {-0.024509, -0.749864, 0, 1.0};
Point(104) = {-0.019054, -0.749683, 0, 1.0};
Point(105) = {-0.013723, -0.749425, 0, 1.0};
Point(106) = {-0.008546, -0.749085, 0, 1.0};
Point(107) = {-0.003546, -0.748662, 0, 1.0};
Point(108) = {0.001246, -0.748157, 0, 1.0};
Point(109) = {0.005809, -0.747570, 0, 1.0};
Point(110) = {0.010126, -0.746906, 0, 1.0};
Point(111) = {0.014171, -0.746166, 0, 1.0};
Point(112) = {0.017930, -0.745353, 0, 1.0};
Point(113) = {0.021389, -0.744479, 0, 1.0};
Point(114) = {0.024529, -0.743548, 0, 1.0};
Point(115) = {0.027347, -0.742568, 0, 1.0};
Point(116) = {0.029828, -0.741557, 0, 1.0};
Point(117) = {0.031965, -0.740520, 0, 1.0};
Point(118) = {0.033763, -0.739479, 0, 1.0};
Point(119) = {0.035211, -0.738458, 0, 1.0};
Point(120) = {0.036299, -0.737474, 0, 1.0};
Point(121) = {0.037036, -0.736555, 0, 1.0};
Point(122) = {0.037417, -0.735735, 0, 1.0};
Point(123) = {0.037418, -0.735129, 0, 1.0};
Point(124) = {0.036903, -0.734685, 0, 1.0};
Point(125) = {0.035851, -0.734267, 0, 1.0};
Point(126) = {0.034361, -0.733900, 0, 1.0};
Point(127) = {0.032447, -0.733612, 0, 1.0};
Point(128) = {0.030109, -0.733413, 0, 1.0};
Point(129) = {0.027355, -0.733298, 0, 1.0};
Point(130) = {0.024205, -0.733264, 0, 1.0};
Point(131) = {0.020670, -0.733312, 0, 1.0};
Point(132) = {0.016773, -0.733441, 0, 1.0};
Point(133) = {0.012532, -0.733647, 0, 1.0};
Point(134) = {0.007970, -0.733925, 0, 1.0};
Point(135) = {0.003117, -0.734271, 0, 1.0};
Point(136) = {-0.002002, -0.734680, 0, 1.0};
Point(137) = {-0.007357, -0.735144, 0, 1.0};
Point(138) = {-0.012914, -0.735657, 0, 1.0};
Point(139) = {-0.018640, -0.736211, 0, 1.0};
Point(140) = {-0.024499, -0.736798, 0, 1.0};
Point(141) = {-0.030452, -0.737411, 0, 1.0};
Point(142) = {-0.036459, -0.738046, 0, 1.0};
Point(143) = {-0.042484, -0.738699, 0, 1.0};
Point(144) = {-0.048496, -0.739366, 0, 1.0};
Point(145) = {-0.054460, -0.740029, 0, 1.0};
Point(146) = {-0.060333, -0.740680, 0, 1.0};
Point(147) = {-0.066077, -0.741308, 0, 1.0};
Point(148) = {-0.071648, -0.741903, 0, 1.0};
Point(149) = {-0.077007, -0.742460, 0, 1.0};
Point(150) = {-0.082114, -0.742972, 0, 1.0};
Point(151) = {-0.086929, -0.743436, 0, 1.0};
Point(152) = {-0.091414, -0.743848, 0, 1.0};
Point(153) = {-0.095535, -0.744210, 0, 1.0};
Point(154) = {-0.099264, -0.744523, 0, 1.0};
Point(155) = {-0.102575, -0.744788, 0, 1.0};
Point(156) = {-0.105443, -0.744998, 0, 1.0};
Point(157) = {-0.107839, -0.745152, 0, 1.0};
Point(158) = {-0.109739, -0.745253, 0, 1.0};
Point(159) = {-0.111118, -0.745306, 0, 1.0};
Point(160) = {-0.111954, -0.745324, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html