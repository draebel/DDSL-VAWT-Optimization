SetFactory("OpenCASCADE");

Point(1) = {0.149561, 0.743770, 0, 1.0};
Point(2) = {0.149190, 0.743779, 0, 1.0};
Point(3) = {0.148084, 0.743830, 0, 1.0};
Point(4) = {0.146277, 0.743947, 0, 1.0};
Point(5) = {0.143800, 0.744139, 0, 1.0};
Point(6) = {0.140699, 0.744414, 0, 1.0};
Point(7) = {0.137022, 0.744768, 0, 1.0};
Point(8) = {0.132809, 0.745192, 0, 1.0};
Point(9) = {0.128107, 0.745668, 0, 1.0};
Point(10) = {0.122956, 0.746178, 0, 1.0};
Point(11) = {0.117395, 0.746703, 0, 1.0};
Point(12) = {0.111461, 0.747223, 0, 1.0};
Point(13) = {0.105188, 0.747725, 0, 1.0};
Point(14) = {0.098611, 0.748195, 0, 1.0};
Point(15) = {0.091766, 0.748623, 0, 1.0};
Point(16) = {0.084693, 0.749008, 0, 1.0};
Point(17) = {0.077440, 0.749344, 0, 1.0};
Point(18) = {0.070052, 0.749618, 0, 1.0};
Point(19) = {0.062572, 0.749823, 0, 1.0};
Point(20) = {0.055051, 0.749956, 0, 1.0};
Point(21) = {0.047527, 0.750000, 0, 1.0};
Point(22) = {0.040044, 0.749959, 0, 1.0};
Point(23) = {0.032649, 0.749819, 0, 1.0};
Point(24) = {0.025379, 0.749577, 0, 1.0};
Point(25) = {0.018274, 0.749234, 0, 1.0};
Point(26) = {0.011375, 0.748781, 0, 1.0};
Point(27) = {0.004712, 0.748216, 0, 1.0};
Point(28) = {-0.001674, 0.747544, 0, 1.0};
Point(29) = {-0.007756, 0.746762, 0, 1.0};
Point(30) = {-0.013510, 0.745877, 0, 1.0};
Point(31) = {-0.018900, 0.744890, 0, 1.0};
Point(32) = {-0.023909, 0.743806, 0, 1.0};
Point(33) = {-0.028518, 0.742643, 0, 1.0};
Point(34) = {-0.032703, 0.741401, 0, 1.0};
Point(35) = {-0.036459, 0.740096, 0, 1.0};
Point(36) = {-0.039765, 0.738748, 0, 1.0};
Point(37) = {-0.042614, 0.737366, 0, 1.0};
Point(38) = {-0.045010, 0.735979, 0, 1.0};
Point(39) = {-0.046940, 0.734618, 0, 1.0};
Point(40) = {-0.048390, 0.733307, 0, 1.0};
Point(41) = {-0.049371, 0.732081, 0, 1.0};
Point(42) = {-0.049880, 0.730989, 0, 1.0};
Point(43) = {-0.049881, 0.730182, 0, 1.0};
Point(44) = {-0.049194, 0.729590, 0, 1.0};
Point(45) = {-0.047792, 0.729033, 0, 1.0};
Point(46) = {-0.045807, 0.728544, 0, 1.0};
Point(47) = {-0.043256, 0.728160, 0, 1.0};
Point(48) = {-0.040140, 0.727895, 0, 1.0};
Point(49) = {-0.036470, 0.727742, 0, 1.0};
Point(50) = {-0.032271, 0.727696, 0, 1.0};
Point(51) = {-0.027561, 0.727759, 0, 1.0};
Point(52) = {-0.022367, 0.727932, 0, 1.0};
Point(53) = {-0.016715, 0.728206, 0, 1.0};
Point(54) = {-0.010636, 0.728577, 0, 1.0};
Point(55) = {-0.004169, 0.729038, 0, 1.0};
Point(56) = {0.002654, 0.729583, 0, 1.0};
Point(57) = {0.009791, 0.730201, 0, 1.0};
Point(58) = {0.017196, 0.730885, 0, 1.0};
Point(59) = {0.024828, 0.731623, 0, 1.0};
Point(60) = {0.032635, 0.732406, 0, 1.0};
Point(61) = {0.040569, 0.733223, 0, 1.0};
Point(62) = {0.048574, 0.734068, 0, 1.0};
Point(63) = {0.056604, 0.734940, 0, 1.0};
Point(64) = {0.064617, 0.735828, 0, 1.0};
Point(65) = {0.072564, 0.736712, 0, 1.0};
Point(66) = {0.080391, 0.737580, 0, 1.0};
Point(67) = {0.088047, 0.738416, 0, 1.0};
Point(68) = {0.095471, 0.739210, 0, 1.0};
Point(69) = {0.102613, 0.739952, 0, 1.0};
Point(70) = {0.109419, 0.740634, 0, 1.0};
Point(71) = {0.115836, 0.741252, 0, 1.0};
Point(72) = {0.121813, 0.741801, 0, 1.0};
Point(73) = {0.127305, 0.742283, 0, 1.0};
Point(74) = {0.132274, 0.742701, 0, 1.0};
Point(75) = {0.136687, 0.743054, 0, 1.0};
Point(76) = {0.140508, 0.743333, 0, 1.0};
Point(77) = {0.143702, 0.743539, 0, 1.0};
Point(78) = {0.146235, 0.743673, 0, 1.0};
Point(79) = {0.148072, 0.743745, 0, 1.0};
Point(80) = {0.149187, 0.743769, 0, 1.0};
Point(81) = {-0.149561, -0.743770, 0, 1.0};
Point(82) = {-0.149190, -0.743779, 0, 1.0};
Point(83) = {-0.148084, -0.743830, 0, 1.0};
Point(84) = {-0.146277, -0.743947, 0, 1.0};
Point(85) = {-0.143800, -0.744139, 0, 1.0};
Point(86) = {-0.140699, -0.744414, 0, 1.0};
Point(87) = {-0.137022, -0.744768, 0, 1.0};
Point(88) = {-0.132809, -0.745192, 0, 1.0};
Point(89) = {-0.128107, -0.745668, 0, 1.0};
Point(90) = {-0.122956, -0.746178, 0, 1.0};
Point(91) = {-0.117395, -0.746703, 0, 1.0};
Point(92) = {-0.111461, -0.747223, 0, 1.0};
Point(93) = {-0.105188, -0.747725, 0, 1.0};
Point(94) = {-0.098611, -0.748195, 0, 1.0};
Point(95) = {-0.091766, -0.748623, 0, 1.0};
Point(96) = {-0.084693, -0.749008, 0, 1.0};
Point(97) = {-0.077440, -0.749344, 0, 1.0};
Point(98) = {-0.070052, -0.749618, 0, 1.0};
Point(99) = {-0.062572, -0.749823, 0, 1.0};
Point(100) = {-0.055051, -0.749956, 0, 1.0};
Point(101) = {-0.047527, -0.750000, 0, 1.0};
Point(102) = {-0.040044, -0.749959, 0, 1.0};
Point(103) = {-0.032649, -0.749819, 0, 1.0};
Point(104) = {-0.025379, -0.749577, 0, 1.0};
Point(105) = {-0.018274, -0.749234, 0, 1.0};
Point(106) = {-0.011375, -0.748781, 0, 1.0};
Point(107) = {-0.004712, -0.748216, 0, 1.0};
Point(108) = {0.001674, -0.747544, 0, 1.0};
Point(109) = {0.007756, -0.746762, 0, 1.0};
Point(110) = {0.013510, -0.745877, 0, 1.0};
Point(111) = {0.018900, -0.744890, 0, 1.0};
Point(112) = {0.023909, -0.743806, 0, 1.0};
Point(113) = {0.028518, -0.742643, 0, 1.0};
Point(114) = {0.032703, -0.741401, 0, 1.0};
Point(115) = {0.036459, -0.740096, 0, 1.0};
Point(116) = {0.039765, -0.738748, 0, 1.0};
Point(117) = {0.042614, -0.737366, 0, 1.0};
Point(118) = {0.045010, -0.735979, 0, 1.0};
Point(119) = {0.046940, -0.734618, 0, 1.0};
Point(120) = {0.048390, -0.733307, 0, 1.0};
Point(121) = {0.049371, -0.732081, 0, 1.0};
Point(122) = {0.049880, -0.730989, 0, 1.0};
Point(123) = {0.049881, -0.730182, 0, 1.0};
Point(124) = {0.049194, -0.729590, 0, 1.0};
Point(125) = {0.047792, -0.729033, 0, 1.0};
Point(126) = {0.045807, -0.728544, 0, 1.0};
Point(127) = {0.043256, -0.728160, 0, 1.0};
Point(128) = {0.040140, -0.727895, 0, 1.0};
Point(129) = {0.036470, -0.727742, 0, 1.0};
Point(130) = {0.032271, -0.727696, 0, 1.0};
Point(131) = {0.027561, -0.727759, 0, 1.0};
Point(132) = {0.022367, -0.727932, 0, 1.0};
Point(133) = {0.016715, -0.728206, 0, 1.0};
Point(134) = {0.010636, -0.728577, 0, 1.0};
Point(135) = {0.004169, -0.729038, 0, 1.0};
Point(136) = {-0.002654, -0.729583, 0, 1.0};
Point(137) = {-0.009791, -0.730201, 0, 1.0};
Point(138) = {-0.017196, -0.730885, 0, 1.0};
Point(139) = {-0.024828, -0.731623, 0, 1.0};
Point(140) = {-0.032635, -0.732406, 0, 1.0};
Point(141) = {-0.040569, -0.733223, 0, 1.0};
Point(142) = {-0.048574, -0.734068, 0, 1.0};
Point(143) = {-0.056604, -0.734940, 0, 1.0};
Point(144) = {-0.064617, -0.735828, 0, 1.0};
Point(145) = {-0.072564, -0.736712, 0, 1.0};
Point(146) = {-0.080391, -0.737580, 0, 1.0};
Point(147) = {-0.088047, -0.738416, 0, 1.0};
Point(148) = {-0.095471, -0.739210, 0, 1.0};
Point(149) = {-0.102613, -0.739952, 0, 1.0};
Point(150) = {-0.109419, -0.740634, 0, 1.0};
Point(151) = {-0.115836, -0.741252, 0, 1.0};
Point(152) = {-0.121813, -0.741801, 0, 1.0};
Point(153) = {-0.127305, -0.742283, 0, 1.0};
Point(154) = {-0.132274, -0.742701, 0, 1.0};
Point(155) = {-0.136687, -0.743054, 0, 1.0};
Point(156) = {-0.140508, -0.743333, 0, 1.0};
Point(157) = {-0.143702, -0.743539, 0, 1.0};
Point(158) = {-0.146235, -0.743673, 0, 1.0};
Point(159) = {-0.148072, -0.743745, 0, 1.0};
Point(160) = {-0.149187, -0.743769, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html