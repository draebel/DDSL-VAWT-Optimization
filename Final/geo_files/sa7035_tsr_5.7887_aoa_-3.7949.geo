SetFactory("OpenCASCADE");

Point(1) = {0.074781, 0.746885, 0, 1.0};
Point(2) = {0.074595, 0.746889, 0, 1.0};
Point(3) = {0.074042, 0.746915, 0, 1.0};
Point(4) = {0.073138, 0.746973, 0, 1.0};
Point(5) = {0.071900, 0.747070, 0, 1.0};
Point(6) = {0.070350, 0.747207, 0, 1.0};
Point(7) = {0.068511, 0.747384, 0, 1.0};
Point(8) = {0.066404, 0.747596, 0, 1.0};
Point(9) = {0.064053, 0.747834, 0, 1.0};
Point(10) = {0.061478, 0.748089, 0, 1.0};
Point(11) = {0.058697, 0.748351, 0, 1.0};
Point(12) = {0.055731, 0.748612, 0, 1.0};
Point(13) = {0.052594, 0.748863, 0, 1.0};
Point(14) = {0.049305, 0.749098, 0, 1.0};
Point(15) = {0.045883, 0.749311, 0, 1.0};
Point(16) = {0.042346, 0.749504, 0, 1.0};
Point(17) = {0.038720, 0.749672, 0, 1.0};
Point(18) = {0.035026, 0.749809, 0, 1.0};
Point(19) = {0.031286, 0.749912, 0, 1.0};
Point(20) = {0.027525, 0.749978, 0, 1.0};
Point(21) = {0.023764, 0.750000, 0, 1.0};
Point(22) = {0.020022, 0.749979, 0, 1.0};
Point(23) = {0.016324, 0.749909, 0, 1.0};
Point(24) = {0.012689, 0.749789, 0, 1.0};
Point(25) = {0.009137, 0.749617, 0, 1.0};
Point(26) = {0.005687, 0.749390, 0, 1.0};
Point(27) = {0.002356, 0.749108, 0, 1.0};
Point(28) = {-0.000837, 0.748772, 0, 1.0};
Point(29) = {-0.003878, 0.748381, 0, 1.0};
Point(30) = {-0.006755, 0.747939, 0, 1.0};
Point(31) = {-0.009450, 0.747445, 0, 1.0};
Point(32) = {-0.011955, 0.746903, 0, 1.0};
Point(33) = {-0.014259, 0.746321, 0, 1.0};
Point(34) = {-0.016352, 0.745701, 0, 1.0};
Point(35) = {-0.018230, 0.745048, 0, 1.0};
Point(36) = {-0.019883, 0.744374, 0, 1.0};
Point(37) = {-0.021307, 0.743683, 0, 1.0};
Point(38) = {-0.022505, 0.742989, 0, 1.0};
Point(39) = {-0.023470, 0.742309, 0, 1.0};
Point(40) = {-0.024195, 0.741654, 0, 1.0};
Point(41) = {-0.024686, 0.741041, 0, 1.0};
Point(42) = {-0.024940, 0.740495, 0, 1.0};
Point(43) = {-0.024940, 0.740091, 0, 1.0};
Point(44) = {-0.024597, 0.739795, 0, 1.0};
Point(45) = {-0.023896, 0.739517, 0, 1.0};
Point(46) = {-0.022904, 0.739272, 0, 1.0};
Point(47) = {-0.021628, 0.739080, 0, 1.0};
Point(48) = {-0.020070, 0.738948, 0, 1.0};
Point(49) = {-0.018235, 0.738871, 0, 1.0};
Point(50) = {-0.016136, 0.738848, 0, 1.0};
Point(51) = {-0.013781, 0.738880, 0, 1.0};
Point(52) = {-0.011184, 0.738966, 0, 1.0};
Point(53) = {-0.008358, 0.739103, 0, 1.0};
Point(54) = {-0.005318, 0.739289, 0, 1.0};
Point(55) = {-0.002084, 0.739519, 0, 1.0};
Point(56) = {0.001327, 0.739792, 0, 1.0};
Point(57) = {0.004896, 0.740100, 0, 1.0};
Point(58) = {0.008598, 0.740442, 0, 1.0};
Point(59) = {0.012414, 0.740812, 0, 1.0};
Point(60) = {0.016318, 0.741203, 0, 1.0};
Point(61) = {0.020284, 0.741611, 0, 1.0};
Point(62) = {0.024287, 0.742034, 0, 1.0};
Point(63) = {0.028302, 0.742470, 0, 1.0};
Point(64) = {0.032308, 0.742914, 0, 1.0};
Point(65) = {0.036282, 0.743356, 0, 1.0};
Point(66) = {0.040196, 0.743790, 0, 1.0};
Point(67) = {0.044023, 0.744208, 0, 1.0};
Point(68) = {0.047735, 0.744605, 0, 1.0};
Point(69) = {0.051307, 0.744976, 0, 1.0};
Point(70) = {0.054709, 0.745317, 0, 1.0};
Point(71) = {0.057918, 0.745626, 0, 1.0};
Point(72) = {0.060906, 0.745900, 0, 1.0};
Point(73) = {0.063653, 0.746142, 0, 1.0};
Point(74) = {0.066137, 0.746351, 0, 1.0};
Point(75) = {0.068343, 0.746527, 0, 1.0};
Point(76) = {0.070254, 0.746667, 0, 1.0};
Point(77) = {0.071851, 0.746770, 0, 1.0};
Point(78) = {0.073117, 0.746837, 0, 1.0};
Point(79) = {0.074036, 0.746872, 0, 1.0};
Point(80) = {0.074593, 0.746884, 0, 1.0};
Point(81) = {-0.074781, -0.746885, 0, 1.0};
Point(82) = {-0.074595, -0.746889, 0, 1.0};
Point(83) = {-0.074042, -0.746915, 0, 1.0};
Point(84) = {-0.073138, -0.746973, 0, 1.0};
Point(85) = {-0.071900, -0.747070, 0, 1.0};
Point(86) = {-0.070350, -0.747207, 0, 1.0};
Point(87) = {-0.068511, -0.747384, 0, 1.0};
Point(88) = {-0.066404, -0.747596, 0, 1.0};
Point(89) = {-0.064053, -0.747834, 0, 1.0};
Point(90) = {-0.061478, -0.748089, 0, 1.0};
Point(91) = {-0.058697, -0.748351, 0, 1.0};
Point(92) = {-0.055731, -0.748612, 0, 1.0};
Point(93) = {-0.052594, -0.748863, 0, 1.0};
Point(94) = {-0.049305, -0.749098, 0, 1.0};
Point(95) = {-0.045883, -0.749311, 0, 1.0};
Point(96) = {-0.042346, -0.749504, 0, 1.0};
Point(97) = {-0.038720, -0.749672, 0, 1.0};
Point(98) = {-0.035026, -0.749809, 0, 1.0};
Point(99) = {-0.031286, -0.749912, 0, 1.0};
Point(100) = {-0.027525, -0.749978, 0, 1.0};
Point(101) = {-0.023764, -0.750000, 0, 1.0};
Point(102) = {-0.020022, -0.749979, 0, 1.0};
Point(103) = {-0.016324, -0.749909, 0, 1.0};
Point(104) = {-0.012689, -0.749789, 0, 1.0};
Point(105) = {-0.009137, -0.749617, 0, 1.0};
Point(106) = {-0.005687, -0.749390, 0, 1.0};
Point(107) = {-0.002356, -0.749108, 0, 1.0};
Point(108) = {0.000837, -0.748772, 0, 1.0};
Point(109) = {0.003878, -0.748381, 0, 1.0};
Point(110) = {0.006755, -0.747939, 0, 1.0};
Point(111) = {0.009450, -0.747445, 0, 1.0};
Point(112) = {0.011955, -0.746903, 0, 1.0};
Point(113) = {0.014259, -0.746321, 0, 1.0};
Point(114) = {0.016352, -0.745701, 0, 1.0};
Point(115) = {0.018230, -0.745048, 0, 1.0};
Point(116) = {0.019883, -0.744374, 0, 1.0};
Point(117) = {0.021307, -0.743683, 0, 1.0};
Point(118) = {0.022505, -0.742989, 0, 1.0};
Point(119) = {0.023470, -0.742309, 0, 1.0};
Point(120) = {0.024195, -0.741654, 0, 1.0};
Point(121) = {0.024686, -0.741041, 0, 1.0};
Point(122) = {0.024940, -0.740495, 0, 1.0};
Point(123) = {0.024940, -0.740091, 0, 1.0};
Point(124) = {0.024597, -0.739795, 0, 1.0};
Point(125) = {0.023896, -0.739517, 0, 1.0};
Point(126) = {0.022904, -0.739272, 0, 1.0};
Point(127) = {0.021628, -0.739080, 0, 1.0};
Point(128) = {0.020070, -0.738948, 0, 1.0};
Point(129) = {0.018235, -0.738871, 0, 1.0};
Point(130) = {0.016136, -0.738848, 0, 1.0};
Point(131) = {0.013781, -0.738880, 0, 1.0};
Point(132) = {0.011184, -0.738966, 0, 1.0};
Point(133) = {0.008358, -0.739103, 0, 1.0};
Point(134) = {0.005318, -0.739289, 0, 1.0};
Point(135) = {0.002084, -0.739519, 0, 1.0};
Point(136) = {-0.001327, -0.739792, 0, 1.0};
Point(137) = {-0.004896, -0.740100, 0, 1.0};
Point(138) = {-0.008598, -0.740442, 0, 1.0};
Point(139) = {-0.012414, -0.740812, 0, 1.0};
Point(140) = {-0.016318, -0.741203, 0, 1.0};
Point(141) = {-0.020284, -0.741611, 0, 1.0};
Point(142) = {-0.024287, -0.742034, 0, 1.0};
Point(143) = {-0.028302, -0.742470, 0, 1.0};
Point(144) = {-0.032308, -0.742914, 0, 1.0};
Point(145) = {-0.036282, -0.743356, 0, 1.0};
Point(146) = {-0.040196, -0.743790, 0, 1.0};
Point(147) = {-0.044023, -0.744208, 0, 1.0};
Point(148) = {-0.047735, -0.744605, 0, 1.0};
Point(149) = {-0.051307, -0.744976, 0, 1.0};
Point(150) = {-0.054709, -0.745317, 0, 1.0};
Point(151) = {-0.057918, -0.745626, 0, 1.0};
Point(152) = {-0.060906, -0.745900, 0, 1.0};
Point(153) = {-0.063653, -0.746142, 0, 1.0};
Point(154) = {-0.066137, -0.746351, 0, 1.0};
Point(155) = {-0.068343, -0.746527, 0, 1.0};
Point(156) = {-0.070254, -0.746667, 0, 1.0};
Point(157) = {-0.071851, -0.746770, 0, 1.0};
Point(158) = {-0.073117, -0.746837, 0, 1.0};
Point(159) = {-0.074036, -0.746872, 0, 1.0};
Point(160) = {-0.074593, -0.746884, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html