SetFactory("OpenCASCADE");

Point(1) = {0.112092, 0.745329, 0, 1.0};
Point(2) = {0.111813, 0.745336, 0, 1.0};
Point(3) = {0.110985, 0.745375, 0, 1.0};
Point(4) = {0.109629, 0.745462, 0, 1.0};
Point(5) = {0.107773, 0.745606, 0, 1.0};
Point(6) = {0.105449, 0.745813, 0, 1.0};
Point(7) = {0.102692, 0.746078, 0, 1.0};
Point(8) = {0.099533, 0.746396, 0, 1.0};
Point(9) = {0.096009, 0.746752, 0, 1.0};
Point(10) = {0.092147, 0.747135, 0, 1.0};
Point(11) = {0.087978, 0.747528, 0, 1.0};
Point(12) = {0.083531, 0.747919, 0, 1.0};
Point(13) = {0.078828, 0.748295, 0, 1.0};
Point(14) = {0.073897, 0.748647, 0, 1.0};
Point(15) = {0.068766, 0.748968, 0, 1.0};
Point(16) = {0.063464, 0.749256, 0, 1.0};
Point(17) = {0.058027, 0.749509, 0, 1.0};
Point(18) = {0.052488, 0.749714, 0, 1.0};
Point(19) = {0.046881, 0.749868, 0, 1.0};
Point(20) = {0.041243, 0.749967, 0, 1.0};
Point(21) = {0.035603, 0.750000, 0, 1.0};
Point(22) = {0.029993, 0.749969, 0, 1.0};
Point(23) = {0.024449, 0.749864, 0, 1.0};
Point(24) = {0.019000, 0.749683, 0, 1.0};
Point(25) = {0.013674, 0.749426, 0, 1.0};
Point(26) = {0.008502, 0.749086, 0, 1.0};
Point(27) = {0.003507, 0.748663, 0, 1.0};
Point(28) = {-0.001280, 0.748159, 0, 1.0};
Point(29) = {-0.005839, 0.747573, 0, 1.0};
Point(30) = {-0.010153, 0.746909, 0, 1.0};
Point(31) = {-0.014194, 0.746170, 0, 1.0};
Point(32) = {-0.017949, 0.745357, 0, 1.0};
Point(33) = {-0.021404, 0.744485, 0, 1.0};
Point(34) = {-0.024541, 0.743554, 0, 1.0};
Point(35) = {-0.027357, 0.742575, 0, 1.0};
Point(36) = {-0.029835, 0.741565, 0, 1.0};
Point(37) = {-0.031971, 0.740529, 0, 1.0};
Point(38) = {-0.033766, 0.739489, 0, 1.0};
Point(39) = {-0.035213, 0.738469, 0, 1.0};
Point(40) = {-0.036301, 0.737486, 0, 1.0};
Point(41) = {-0.037036, 0.736568, 0, 1.0};
Point(42) = {-0.037417, 0.735749, 0, 1.0};
Point(43) = {-0.037418, 0.735143, 0, 1.0};
Point(44) = {-0.036903, 0.734700, 0, 1.0};
Point(45) = {-0.035852, 0.734282, 0, 1.0};
Point(46) = {-0.034364, 0.733915, 0, 1.0};
Point(47) = {-0.032452, 0.733628, 0, 1.0};
Point(48) = {-0.030116, 0.733429, 0, 1.0};
Point(49) = {-0.027364, 0.733314, 0, 1.0};
Point(50) = {-0.024217, 0.733280, 0, 1.0};
Point(51) = {-0.020686, 0.733328, 0, 1.0};
Point(52) = {-0.016793, 0.733457, 0, 1.0};
Point(53) = {-0.012556, 0.733663, 0, 1.0};
Point(54) = {-0.007999, 0.733941, 0, 1.0};
Point(55) = {-0.003150, 0.734286, 0, 1.0};
Point(56) = {0.001964, 0.734695, 0, 1.0};
Point(57) = {0.007314, 0.735158, 0, 1.0};
Point(58) = {0.012865, 0.735670, 0, 1.0};
Point(59) = {0.018587, 0.736224, 0, 1.0};
Point(60) = {0.024439, 0.736811, 0, 1.0};
Point(61) = {0.030386, 0.737423, 0, 1.0};
Point(62) = {0.036388, 0.738057, 0, 1.0};
Point(63) = {0.042407, 0.738710, 0, 1.0};
Point(64) = {0.048414, 0.739376, 0, 1.0};
Point(65) = {0.054371, 0.740039, 0, 1.0};
Point(66) = {0.060239, 0.740689, 0, 1.0};
Point(67) = {0.065978, 0.741316, 0, 1.0};
Point(68) = {0.071543, 0.741911, 0, 1.0};
Point(69) = {0.076898, 0.742468, 0, 1.0};
Point(70) = {0.082000, 0.742979, 0, 1.0};
Point(71) = {0.086810, 0.743442, 0, 1.0};
Point(72) = {0.091291, 0.743853, 0, 1.0};
Point(73) = {0.095408, 0.744215, 0, 1.0};
Point(74) = {0.099133, 0.744528, 0, 1.0};
Point(75) = {0.102440, 0.744793, 0, 1.0};
Point(76) = {0.105305, 0.745002, 0, 1.0};
Point(77) = {0.107699, 0.745157, 0, 1.0};
Point(78) = {0.109598, 0.745257, 0, 1.0};
Point(79) = {0.110975, 0.745311, 0, 1.0};
Point(80) = {0.111811, 0.745329, 0, 1.0};
Point(81) = {-0.112092, -0.745329, 0, 1.0};
Point(82) = {-0.111813, -0.745336, 0, 1.0};
Point(83) = {-0.110985, -0.745375, 0, 1.0};
Point(84) = {-0.109629, -0.745462, 0, 1.0};
Point(85) = {-0.107773, -0.745606, 0, 1.0};
Point(86) = {-0.105449, -0.745813, 0, 1.0};
Point(87) = {-0.102692, -0.746078, 0, 1.0};
Point(88) = {-0.099533, -0.746396, 0, 1.0};
Point(89) = {-0.096009, -0.746752, 0, 1.0};
Point(90) = {-0.092147, -0.747135, 0, 1.0};
Point(91) = {-0.087978, -0.747528, 0, 1.0};
Point(92) = {-0.083531, -0.747919, 0, 1.0};
Point(93) = {-0.078828, -0.748295, 0, 1.0};
Point(94) = {-0.073897, -0.748647, 0, 1.0};
Point(95) = {-0.068766, -0.748968, 0, 1.0};
Point(96) = {-0.063464, -0.749256, 0, 1.0};
Point(97) = {-0.058027, -0.749509, 0, 1.0};
Point(98) = {-0.052488, -0.749714, 0, 1.0};
Point(99) = {-0.046881, -0.749868, 0, 1.0};
Point(100) = {-0.041243, -0.749967, 0, 1.0};
Point(101) = {-0.035603, -0.750000, 0, 1.0};
Point(102) = {-0.029993, -0.749969, 0, 1.0};
Point(103) = {-0.024449, -0.749864, 0, 1.0};
Point(104) = {-0.019000, -0.749683, 0, 1.0};
Point(105) = {-0.013674, -0.749426, 0, 1.0};
Point(106) = {-0.008502, -0.749086, 0, 1.0};
Point(107) = {-0.003507, -0.748663, 0, 1.0};
Point(108) = {0.001280, -0.748159, 0, 1.0};
Point(109) = {0.005839, -0.747573, 0, 1.0};
Point(110) = {0.010153, -0.746909, 0, 1.0};
Point(111) = {0.014194, -0.746170, 0, 1.0};
Point(112) = {0.017949, -0.745357, 0, 1.0};
Point(113) = {0.021404, -0.744485, 0, 1.0};
Point(114) = {0.024541, -0.743554, 0, 1.0};
Point(115) = {0.027357, -0.742575, 0, 1.0};
Point(116) = {0.029835, -0.741565, 0, 1.0};
Point(117) = {0.031971, -0.740529, 0, 1.0};
Point(118) = {0.033766, -0.739489, 0, 1.0};
Point(119) = {0.035213, -0.738469, 0, 1.0};
Point(120) = {0.036301, -0.737486, 0, 1.0};
Point(121) = {0.037036, -0.736568, 0, 1.0};
Point(122) = {0.037417, -0.735749, 0, 1.0};
Point(123) = {0.037418, -0.735143, 0, 1.0};
Point(124) = {0.036903, -0.734700, 0, 1.0};
Point(125) = {0.035852, -0.734282, 0, 1.0};
Point(126) = {0.034364, -0.733915, 0, 1.0};
Point(127) = {0.032452, -0.733628, 0, 1.0};
Point(128) = {0.030116, -0.733429, 0, 1.0};
Point(129) = {0.027364, -0.733314, 0, 1.0};
Point(130) = {0.024217, -0.733280, 0, 1.0};
Point(131) = {0.020686, -0.733328, 0, 1.0};
Point(132) = {0.016793, -0.733457, 0, 1.0};
Point(133) = {0.012556, -0.733663, 0, 1.0};
Point(134) = {0.007999, -0.733941, 0, 1.0};
Point(135) = {0.003150, -0.734286, 0, 1.0};
Point(136) = {-0.001964, -0.734695, 0, 1.0};
Point(137) = {-0.007314, -0.735158, 0, 1.0};
Point(138) = {-0.012865, -0.735670, 0, 1.0};
Point(139) = {-0.018587, -0.736224, 0, 1.0};
Point(140) = {-0.024439, -0.736811, 0, 1.0};
Point(141) = {-0.030386, -0.737423, 0, 1.0};
Point(142) = {-0.036388, -0.738057, 0, 1.0};
Point(143) = {-0.042407, -0.738710, 0, 1.0};
Point(144) = {-0.048414, -0.739376, 0, 1.0};
Point(145) = {-0.054371, -0.740039, 0, 1.0};
Point(146) = {-0.060239, -0.740689, 0, 1.0};
Point(147) = {-0.065978, -0.741316, 0, 1.0};
Point(148) = {-0.071543, -0.741911, 0, 1.0};
Point(149) = {-0.076898, -0.742468, 0, 1.0};
Point(150) = {-0.082000, -0.742979, 0, 1.0};
Point(151) = {-0.086810, -0.743442, 0, 1.0};
Point(152) = {-0.091291, -0.743853, 0, 1.0};
Point(153) = {-0.095408, -0.744215, 0, 1.0};
Point(154) = {-0.099133, -0.744528, 0, 1.0};
Point(155) = {-0.102440, -0.744793, 0, 1.0};
Point(156) = {-0.105305, -0.745002, 0, 1.0};
Point(157) = {-0.107699, -0.745157, 0, 1.0};
Point(158) = {-0.109598, -0.745257, 0, 1.0};
Point(159) = {-0.110975, -0.745311, 0, 1.0};
Point(160) = {-0.111811, -0.745329, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html