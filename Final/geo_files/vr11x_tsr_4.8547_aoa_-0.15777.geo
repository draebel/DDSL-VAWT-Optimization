SetFactory("OpenCASCADE");

Point(1) = {0.149998, 0.735178, 0, 1.0};
Point(2) = {0.148997, 0.735241, 0, 1.0};
Point(3) = {0.147997, 0.735305, 0, 1.0};
Point(4) = {0.145997, 0.735427, 0, 1.0};
Point(5) = {0.143997, 0.735562, 0, 1.0};
Point(6) = {0.140995, 0.736193, 0, 1.0};
Point(7) = {0.136992, 0.737062, 0, 1.0};
Point(8) = {0.131989, 0.738128, 0, 1.0};
Point(9) = {0.125986, 0.739466, 0, 1.0};
Point(10) = {0.118982, 0.740933, 0, 1.0};
Point(11) = {0.111977, 0.742635, 0, 1.0};
Point(12) = {0.103972, 0.744459, 0, 1.0};
Point(13) = {0.095968, 0.745885, 0, 1.0};
Point(14) = {0.087965, 0.746921, 0, 1.0};
Point(15) = {0.079963, 0.747615, 0, 1.0};
Point(16) = {0.069961, 0.748390, 0, 1.0};
Point(17) = {0.059959, 0.748936, 0, 1.0};
Point(18) = {0.049958, 0.749453, 0, 1.0};
Point(19) = {0.039957, 0.749783, 0, 1.0};
Point(20) = {0.029956, 0.749970, 0, 1.0};
Point(21) = {0.019956, 0.750000, 0, 1.0};
Point(22) = {0.009957, 0.749856, 0, 1.0};
Point(23) = {-0.000043, 0.749601, 0, 1.0};
Point(24) = {-0.010041, 0.749043, 0, 1.0};
Point(25) = {-0.020039, 0.748186, 0, 1.0};
Point(26) = {-0.030035, 0.746802, 0, 1.0};
Point(27) = {-0.035032, 0.745529, 0, 1.0};
Point(28) = {-0.040027, 0.743675, 0, 1.0};
Point(29) = {-0.045019, 0.740941, 0, 1.0};
Point(30) = {-0.047513, 0.738874, 0, 1.0};
Point(31) = {-0.048511, 0.737891, 0, 1.0};
Point(32) = {-0.049009, 0.737230, 0, 1.0};
Point(33) = {-0.049606, 0.736128, 0, 1.0};
Point(34) = {-0.050000, 0.734027, 0, 1.0};
Point(35) = {-0.049598, 0.733128, 0, 1.0};
Point(36) = {-0.048996, 0.732690, 0, 1.0};
Point(37) = {-0.048496, 0.732471, 0, 1.0};
Point(38) = {-0.047495, 0.732154, 0, 1.0};
Point(39) = {-0.044993, 0.731581, 0, 1.0};
Point(40) = {-0.039991, 0.730855, 0, 1.0};
Point(41) = {-0.034990, 0.730289, 0, 1.0};
Point(42) = {-0.029988, 0.729862, 0, 1.0};
Point(43) = {-0.019987, 0.729210, 0, 1.0};
Point(44) = {-0.009985, 0.728753, 0, 1.0};
Point(45) = {0.000016, 0.728395, 0, 1.0};
Point(46) = {0.010016, 0.728193, 0, 1.0};
Point(47) = {0.020017, 0.728060, 0, 1.0};
Point(48) = {0.030017, 0.728028, 0, 1.0};
Point(49) = {0.040017, 0.728075, 0, 1.0};
Point(50) = {0.050016, 0.728233, 0, 1.0};
Point(51) = {0.060016, 0.728490, 0, 1.0};
Point(52) = {0.070015, 0.728818, 0, 1.0};
Point(53) = {0.080014, 0.729185, 0, 1.0};
Point(54) = {0.088013, 0.729507, 0, 1.0};
Point(55) = {0.096012, 0.729869, 0, 1.0};
Point(56) = {0.104011, 0.730281, 0, 1.0};
Point(57) = {0.112010, 0.730693, 0, 1.0};
Point(58) = {0.119009, 0.731113, 0, 1.0};
Point(59) = {0.126007, 0.731592, 0, 1.0};
Point(60) = {0.132006, 0.732108, 0, 1.0};
Point(61) = {0.137005, 0.732542, 0, 1.0};
Point(62) = {0.141004, 0.732953, 0, 1.0};
Point(63) = {0.144003, 0.733342, 0, 1.0};
Point(64) = {0.146002, 0.733647, 0, 1.0};
Point(65) = {0.148001, 0.734013, 0, 1.0};
Point(66) = {0.149000, 0.734255, 0, 1.0};
Point(67) = {0.149999, 0.734578, 0, 1.0};
Point(68) = {-0.149998, -0.735178, 0, 1.0};
Point(69) = {-0.148997, -0.735241, 0, 1.0};
Point(70) = {-0.147997, -0.735305, 0, 1.0};
Point(71) = {-0.145997, -0.735427, 0, 1.0};
Point(72) = {-0.143997, -0.735562, 0, 1.0};
Point(73) = {-0.140995, -0.736193, 0, 1.0};
Point(74) = {-0.136992, -0.737062, 0, 1.0};
Point(75) = {-0.131989, -0.738128, 0, 1.0};
Point(76) = {-0.125986, -0.739466, 0, 1.0};
Point(77) = {-0.118982, -0.740933, 0, 1.0};
Point(78) = {-0.111977, -0.742635, 0, 1.0};
Point(79) = {-0.103972, -0.744459, 0, 1.0};
Point(80) = {-0.095968, -0.745885, 0, 1.0};
Point(81) = {-0.087965, -0.746921, 0, 1.0};
Point(82) = {-0.079963, -0.747615, 0, 1.0};
Point(83) = {-0.069961, -0.748390, 0, 1.0};
Point(84) = {-0.059959, -0.748936, 0, 1.0};
Point(85) = {-0.049958, -0.749453, 0, 1.0};
Point(86) = {-0.039957, -0.749783, 0, 1.0};
Point(87) = {-0.029956, -0.749970, 0, 1.0};
Point(88) = {-0.019956, -0.750000, 0, 1.0};
Point(89) = {-0.009957, -0.749856, 0, 1.0};
Point(90) = {0.000043, -0.749601, 0, 1.0};
Point(91) = {0.010041, -0.749043, 0, 1.0};
Point(92) = {0.020039, -0.748186, 0, 1.0};
Point(93) = {0.030035, -0.746802, 0, 1.0};
Point(94) = {0.035032, -0.745529, 0, 1.0};
Point(95) = {0.040027, -0.743675, 0, 1.0};
Point(96) = {0.045019, -0.740941, 0, 1.0};
Point(97) = {0.047513, -0.738874, 0, 1.0};
Point(98) = {0.048511, -0.737891, 0, 1.0};
Point(99) = {0.049009, -0.737230, 0, 1.0};
Point(100) = {0.049606, -0.736128, 0, 1.0};
Point(101) = {0.050000, -0.734027, 0, 1.0};
Point(102) = {0.049598, -0.733128, 0, 1.0};
Point(103) = {0.048996, -0.732690, 0, 1.0};
Point(104) = {0.048496, -0.732471, 0, 1.0};
Point(105) = {0.047495, -0.732154, 0, 1.0};
Point(106) = {0.044993, -0.731581, 0, 1.0};
Point(107) = {0.039991, -0.730855, 0, 1.0};
Point(108) = {0.034990, -0.730289, 0, 1.0};
Point(109) = {0.029988, -0.729862, 0, 1.0};
Point(110) = {0.019987, -0.729210, 0, 1.0};
Point(111) = {0.009985, -0.728753, 0, 1.0};
Point(112) = {-0.000016, -0.728395, 0, 1.0};
Point(113) = {-0.010016, -0.728193, 0, 1.0};
Point(114) = {-0.020017, -0.728060, 0, 1.0};
Point(115) = {-0.030017, -0.728028, 0, 1.0};
Point(116) = {-0.040017, -0.728075, 0, 1.0};
Point(117) = {-0.050016, -0.728233, 0, 1.0};
Point(118) = {-0.060016, -0.728490, 0, 1.0};
Point(119) = {-0.070015, -0.728818, 0, 1.0};
Point(120) = {-0.080014, -0.729185, 0, 1.0};
Point(121) = {-0.088013, -0.729507, 0, 1.0};
Point(122) = {-0.096012, -0.729869, 0, 1.0};
Point(123) = {-0.104011, -0.730281, 0, 1.0};
Point(124) = {-0.112010, -0.730693, 0, 1.0};
Point(125) = {-0.119009, -0.731113, 0, 1.0};
Point(126) = {-0.126007, -0.731592, 0, 1.0};
Point(127) = {-0.132006, -0.732108, 0, 1.0};
Point(128) = {-0.137005, -0.732542, 0, 1.0};
Point(129) = {-0.141004, -0.732953, 0, 1.0};
Point(130) = {-0.144003, -0.733342, 0, 1.0};
Point(131) = {-0.146002, -0.733647, 0, 1.0};
Point(132) = {-0.148001, -0.734013, 0, 1.0};
Point(133) = {-0.149000, -0.734255, 0, 1.0};
Point(134) = {-0.149999, -0.734578, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:45};
Spline(3) = {45:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:112};
Spline(7) = {112:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html