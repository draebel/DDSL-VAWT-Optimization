SetFactory("OpenCASCADE");

Point(1) = {0.112498, 0.738884, 0, 1.0};
Point(2) = {0.111748, 0.738931, 0, 1.0};
Point(3) = {0.110998, 0.738978, 0, 1.0};
Point(4) = {0.109498, 0.739070, 0, 1.0};
Point(5) = {0.107997, 0.739171, 0, 1.0};
Point(6) = {0.105746, 0.739645, 0, 1.0};
Point(7) = {0.102744, 0.740297, 0, 1.0};
Point(8) = {0.098992, 0.741096, 0, 1.0};
Point(9) = {0.094489, 0.742099, 0, 1.0};
Point(10) = {0.089236, 0.743199, 0, 1.0};
Point(11) = {0.083983, 0.744477, 0, 1.0};
Point(12) = {0.077979, 0.745844, 0, 1.0};
Point(13) = {0.071976, 0.746914, 0, 1.0};
Point(14) = {0.065974, 0.747691, 0, 1.0};
Point(15) = {0.059972, 0.748211, 0, 1.0};
Point(16) = {0.052471, 0.748792, 0, 1.0};
Point(17) = {0.044970, 0.749202, 0, 1.0};
Point(18) = {0.037468, 0.749589, 0, 1.0};
Point(19) = {0.029968, 0.749837, 0, 1.0};
Point(20) = {0.022467, 0.749977, 0, 1.0};
Point(21) = {0.014967, 0.750000, 0, 1.0};
Point(22) = {0.007467, 0.749892, 0, 1.0};
Point(23) = {-0.000032, 0.749701, 0, 1.0};
Point(24) = {-0.007531, 0.749283, 0, 1.0};
Point(25) = {-0.015029, 0.748639, 0, 1.0};
Point(26) = {-0.022526, 0.747602, 0, 1.0};
Point(27) = {-0.026274, 0.746646, 0, 1.0};
Point(28) = {-0.030020, 0.745256, 0, 1.0};
Point(29) = {-0.033764, 0.743206, 0, 1.0};
Point(30) = {-0.035635, 0.741656, 0, 1.0};
Point(31) = {-0.036383, 0.740919, 0, 1.0};
Point(32) = {-0.036757, 0.740423, 0, 1.0};
Point(33) = {-0.037204, 0.739596, 0, 1.0};
Point(34) = {-0.037500, 0.738020, 0, 1.0};
Point(35) = {-0.037198, 0.737346, 0, 1.0};
Point(36) = {-0.036747, 0.737018, 0, 1.0};
Point(37) = {-0.036372, 0.736854, 0, 1.0};
Point(38) = {-0.035621, 0.736616, 0, 1.0};
Point(39) = {-0.033745, 0.736186, 0, 1.0};
Point(40) = {-0.029993, 0.735641, 0, 1.0};
Point(41) = {-0.026242, 0.735216, 0, 1.0};
Point(42) = {-0.022491, 0.734897, 0, 1.0};
Point(43) = {-0.014990, 0.734407, 0, 1.0};
Point(44) = {-0.007489, 0.734065, 0, 1.0};
Point(45) = {0.000012, 0.733796, 0, 1.0};
Point(46) = {0.007512, 0.733644, 0, 1.0};
Point(47) = {0.015013, 0.733545, 0, 1.0};
Point(48) = {0.022513, 0.733521, 0, 1.0};
Point(49) = {0.030013, 0.733556, 0, 1.0};
Point(50) = {0.037512, 0.733675, 0, 1.0};
Point(51) = {0.045012, 0.733868, 0, 1.0};
Point(52) = {0.052511, 0.734113, 0, 1.0};
Point(53) = {0.060010, 0.734389, 0, 1.0};
Point(54) = {0.066010, 0.734630, 0, 1.0};
Point(55) = {0.072009, 0.734902, 0, 1.0};
Point(56) = {0.078008, 0.735211, 0, 1.0};
Point(57) = {0.084007, 0.735520, 0, 1.0};
Point(58) = {0.089256, 0.735835, 0, 1.0};
Point(59) = {0.094506, 0.736194, 0, 1.0};
Point(60) = {0.099004, 0.736581, 0, 1.0};
Point(61) = {0.102754, 0.736907, 0, 1.0};
Point(62) = {0.105753, 0.737215, 0, 1.0};
Point(63) = {0.108002, 0.737506, 0, 1.0};
Point(64) = {0.109501, 0.737735, 0, 1.0};
Point(65) = {0.111001, 0.738009, 0, 1.0};
Point(66) = {0.111750, 0.738191, 0, 1.0};
Point(67) = {0.112499, 0.738434, 0, 1.0};
Point(68) = {-0.112498, -0.738884, 0, 1.0};
Point(69) = {-0.111748, -0.738931, 0, 1.0};
Point(70) = {-0.110998, -0.738978, 0, 1.0};
Point(71) = {-0.109498, -0.739070, 0, 1.0};
Point(72) = {-0.107997, -0.739171, 0, 1.0};
Point(73) = {-0.105746, -0.739645, 0, 1.0};
Point(74) = {-0.102744, -0.740297, 0, 1.0};
Point(75) = {-0.098992, -0.741096, 0, 1.0};
Point(76) = {-0.094489, -0.742099, 0, 1.0};
Point(77) = {-0.089236, -0.743199, 0, 1.0};
Point(78) = {-0.083983, -0.744477, 0, 1.0};
Point(79) = {-0.077979, -0.745844, 0, 1.0};
Point(80) = {-0.071976, -0.746914, 0, 1.0};
Point(81) = {-0.065974, -0.747691, 0, 1.0};
Point(82) = {-0.059972, -0.748211, 0, 1.0};
Point(83) = {-0.052471, -0.748792, 0, 1.0};
Point(84) = {-0.044970, -0.749202, 0, 1.0};
Point(85) = {-0.037468, -0.749589, 0, 1.0};
Point(86) = {-0.029968, -0.749837, 0, 1.0};
Point(87) = {-0.022467, -0.749977, 0, 1.0};
Point(88) = {-0.014967, -0.750000, 0, 1.0};
Point(89) = {-0.007467, -0.749892, 0, 1.0};
Point(90) = {0.000032, -0.749701, 0, 1.0};
Point(91) = {0.007531, -0.749283, 0, 1.0};
Point(92) = {0.015029, -0.748639, 0, 1.0};
Point(93) = {0.022526, -0.747602, 0, 1.0};
Point(94) = {0.026274, -0.746646, 0, 1.0};
Point(95) = {0.030020, -0.745256, 0, 1.0};
Point(96) = {0.033764, -0.743206, 0, 1.0};
Point(97) = {0.035635, -0.741656, 0, 1.0};
Point(98) = {0.036383, -0.740919, 0, 1.0};
Point(99) = {0.036757, -0.740423, 0, 1.0};
Point(100) = {0.037204, -0.739596, 0, 1.0};
Point(101) = {0.037500, -0.738020, 0, 1.0};
Point(102) = {0.037198, -0.737346, 0, 1.0};
Point(103) = {0.036747, -0.737018, 0, 1.0};
Point(104) = {0.036372, -0.736854, 0, 1.0};
Point(105) = {0.035621, -0.736616, 0, 1.0};
Point(106) = {0.033745, -0.736186, 0, 1.0};
Point(107) = {0.029993, -0.735641, 0, 1.0};
Point(108) = {0.026242, -0.735216, 0, 1.0};
Point(109) = {0.022491, -0.734897, 0, 1.0};
Point(110) = {0.014990, -0.734407, 0, 1.0};
Point(111) = {0.007489, -0.734065, 0, 1.0};
Point(112) = {-0.000012, -0.733796, 0, 1.0};
Point(113) = {-0.007512, -0.733644, 0, 1.0};
Point(114) = {-0.015013, -0.733545, 0, 1.0};
Point(115) = {-0.022513, -0.733521, 0, 1.0};
Point(116) = {-0.030013, -0.733556, 0, 1.0};
Point(117) = {-0.037512, -0.733675, 0, 1.0};
Point(118) = {-0.045012, -0.733868, 0, 1.0};
Point(119) = {-0.052511, -0.734113, 0, 1.0};
Point(120) = {-0.060010, -0.734389, 0, 1.0};
Point(121) = {-0.066010, -0.734630, 0, 1.0};
Point(122) = {-0.072009, -0.734902, 0, 1.0};
Point(123) = {-0.078008, -0.735211, 0, 1.0};
Point(124) = {-0.084007, -0.735520, 0, 1.0};
Point(125) = {-0.089256, -0.735835, 0, 1.0};
Point(126) = {-0.094506, -0.736194, 0, 1.0};
Point(127) = {-0.099004, -0.736581, 0, 1.0};
Point(128) = {-0.102754, -0.736907, 0, 1.0};
Point(129) = {-0.105753, -0.737215, 0, 1.0};
Point(130) = {-0.108002, -0.737506, 0, 1.0};
Point(131) = {-0.109501, -0.737735, 0, 1.0};
Point(132) = {-0.111001, -0.738009, 0, 1.0};
Point(133) = {-0.111750, -0.738191, 0, 1.0};
Point(134) = {-0.112499, -0.738434, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:45};
Spline(3) = {45:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:112};
Spline(7) = {112:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html