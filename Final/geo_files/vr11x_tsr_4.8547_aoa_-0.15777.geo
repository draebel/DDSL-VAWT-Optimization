SetFactory("OpenCASCADE");

Point(1) = {0.074999, 0.742589, 0, 1.0};
Point(2) = {0.074499, 0.742621, 0, 1.0};
Point(3) = {0.073999, 0.742652, 0, 1.0};
Point(4) = {0.072998, 0.742714, 0, 1.0};
Point(5) = {0.071998, 0.742781, 0, 1.0};
Point(6) = {0.070497, 0.743097, 0, 1.0};
Point(7) = {0.068496, 0.743531, 0, 1.0};
Point(8) = {0.065995, 0.744064, 0, 1.0};
Point(9) = {0.062993, 0.744733, 0, 1.0};
Point(10) = {0.059491, 0.745466, 0, 1.0};
Point(11) = {0.055988, 0.746318, 0, 1.0};
Point(12) = {0.051986, 0.747230, 0, 1.0};
Point(13) = {0.047984, 0.747943, 0, 1.0};
Point(14) = {0.043983, 0.748461, 0, 1.0};
Point(15) = {0.039982, 0.748808, 0, 1.0};
Point(16) = {0.034980, 0.749195, 0, 1.0};
Point(17) = {0.029980, 0.749468, 0, 1.0};
Point(18) = {0.024979, 0.749726, 0, 1.0};
Point(19) = {0.019978, 0.749892, 0, 1.0};
Point(20) = {0.014978, 0.749985, 0, 1.0};
Point(21) = {0.009978, 0.750000, 0, 1.0};
Point(22) = {0.004978, 0.749928, 0, 1.0};
Point(23) = {-0.000021, 0.749800, 0, 1.0};
Point(24) = {-0.005021, 0.749522, 0, 1.0};
Point(25) = {-0.010019, 0.749093, 0, 1.0};
Point(26) = {-0.015018, 0.748401, 0, 1.0};
Point(27) = {-0.017516, 0.747764, 0, 1.0};
Point(28) = {-0.020013, 0.746837, 0, 1.0};
Point(29) = {-0.022510, 0.745471, 0, 1.0};
Point(30) = {-0.023757, 0.744437, 0, 1.0};
Point(31) = {-0.024255, 0.743946, 0, 1.0};
Point(32) = {-0.024504, 0.743615, 0, 1.0};
Point(33) = {-0.024803, 0.743064, 0, 1.0};
Point(34) = {-0.025000, 0.742014, 0, 1.0};
Point(35) = {-0.024799, 0.741564, 0, 1.0};
Point(36) = {-0.024498, 0.741345, 0, 1.0};
Point(37) = {-0.024248, 0.741236, 0, 1.0};
Point(38) = {-0.023747, 0.741077, 0, 1.0};
Point(39) = {-0.022497, 0.740791, 0, 1.0};
Point(40) = {-0.019996, 0.740427, 0, 1.0};
Point(41) = {-0.017495, 0.740144, 0, 1.0};
Point(42) = {-0.014994, 0.739931, 0, 1.0};
Point(43) = {-0.009993, 0.739605, 0, 1.0};
Point(44) = {-0.004993, 0.739377, 0, 1.0};
Point(45) = {0.000008, 0.739198, 0, 1.0};
Point(46) = {0.005008, 0.739096, 0, 1.0};
Point(47) = {0.010008, 0.739030, 0, 1.0};
Point(48) = {0.015008, 0.739014, 0, 1.0};
Point(49) = {0.020008, 0.739038, 0, 1.0};
Point(50) = {0.025008, 0.739116, 0, 1.0};
Point(51) = {0.030008, 0.739245, 0, 1.0};
Point(52) = {0.035007, 0.739409, 0, 1.0};
Point(53) = {0.040007, 0.739593, 0, 1.0};
Point(54) = {0.044006, 0.739754, 0, 1.0};
Point(55) = {0.048006, 0.739935, 0, 1.0};
Point(56) = {0.052005, 0.740141, 0, 1.0};
Point(57) = {0.056005, 0.740347, 0, 1.0};
Point(58) = {0.059504, 0.740556, 0, 1.0};
Point(59) = {0.063004, 0.740796, 0, 1.0};
Point(60) = {0.066003, 0.741054, 0, 1.0};
Point(61) = {0.068502, 0.741271, 0, 1.0};
Point(62) = {0.070502, 0.741477, 0, 1.0};
Point(63) = {0.072001, 0.741671, 0, 1.0};
Point(64) = {0.073001, 0.741824, 0, 1.0};
Point(65) = {0.074000, 0.742006, 0, 1.0};
Point(66) = {0.074500, 0.742128, 0, 1.0};
Point(67) = {0.075000, 0.742289, 0, 1.0};
Point(68) = {-0.074999, -0.742589, 0, 1.0};
Point(69) = {-0.074499, -0.742621, 0, 1.0};
Point(70) = {-0.073999, -0.742652, 0, 1.0};
Point(71) = {-0.072998, -0.742714, 0, 1.0};
Point(72) = {-0.071998, -0.742781, 0, 1.0};
Point(73) = {-0.070497, -0.743097, 0, 1.0};
Point(74) = {-0.068496, -0.743531, 0, 1.0};
Point(75) = {-0.065995, -0.744064, 0, 1.0};
Point(76) = {-0.062993, -0.744733, 0, 1.0};
Point(77) = {-0.059491, -0.745466, 0, 1.0};
Point(78) = {-0.055988, -0.746318, 0, 1.0};
Point(79) = {-0.051986, -0.747230, 0, 1.0};
Point(80) = {-0.047984, -0.747943, 0, 1.0};
Point(81) = {-0.043983, -0.748461, 0, 1.0};
Point(82) = {-0.039982, -0.748808, 0, 1.0};
Point(83) = {-0.034980, -0.749195, 0, 1.0};
Point(84) = {-0.029980, -0.749468, 0, 1.0};
Point(85) = {-0.024979, -0.749726, 0, 1.0};
Point(86) = {-0.019978, -0.749892, 0, 1.0};
Point(87) = {-0.014978, -0.749985, 0, 1.0};
Point(88) = {-0.009978, -0.750000, 0, 1.0};
Point(89) = {-0.004978, -0.749928, 0, 1.0};
Point(90) = {0.000021, -0.749800, 0, 1.0};
Point(91) = {0.005021, -0.749522, 0, 1.0};
Point(92) = {0.010019, -0.749093, 0, 1.0};
Point(93) = {0.015018, -0.748401, 0, 1.0};
Point(94) = {0.017516, -0.747764, 0, 1.0};
Point(95) = {0.020013, -0.746837, 0, 1.0};
Point(96) = {0.022510, -0.745471, 0, 1.0};
Point(97) = {0.023757, -0.744437, 0, 1.0};
Point(98) = {0.024255, -0.743946, 0, 1.0};
Point(99) = {0.024504, -0.743615, 0, 1.0};
Point(100) = {0.024803, -0.743064, 0, 1.0};
Point(101) = {0.025000, -0.742014, 0, 1.0};
Point(102) = {0.024799, -0.741564, 0, 1.0};
Point(103) = {0.024498, -0.741345, 0, 1.0};
Point(104) = {0.024248, -0.741236, 0, 1.0};
Point(105) = {0.023747, -0.741077, 0, 1.0};
Point(106) = {0.022497, -0.740791, 0, 1.0};
Point(107) = {0.019996, -0.740427, 0, 1.0};
Point(108) = {0.017495, -0.740144, 0, 1.0};
Point(109) = {0.014994, -0.739931, 0, 1.0};
Point(110) = {0.009993, -0.739605, 0, 1.0};
Point(111) = {0.004993, -0.739377, 0, 1.0};
Point(112) = {-0.000008, -0.739198, 0, 1.0};
Point(113) = {-0.005008, -0.739096, 0, 1.0};
Point(114) = {-0.010008, -0.739030, 0, 1.0};
Point(115) = {-0.015008, -0.739014, 0, 1.0};
Point(116) = {-0.020008, -0.739038, 0, 1.0};
Point(117) = {-0.025008, -0.739116, 0, 1.0};
Point(118) = {-0.030008, -0.739245, 0, 1.0};
Point(119) = {-0.035007, -0.739409, 0, 1.0};
Point(120) = {-0.040007, -0.739593, 0, 1.0};
Point(121) = {-0.044006, -0.739754, 0, 1.0};
Point(122) = {-0.048006, -0.739935, 0, 1.0};
Point(123) = {-0.052005, -0.740141, 0, 1.0};
Point(124) = {-0.056005, -0.740347, 0, 1.0};
Point(125) = {-0.059504, -0.740556, 0, 1.0};
Point(126) = {-0.063004, -0.740796, 0, 1.0};
Point(127) = {-0.066003, -0.741054, 0, 1.0};
Point(128) = {-0.068502, -0.741271, 0, 1.0};
Point(129) = {-0.070502, -0.741477, 0, 1.0};
Point(130) = {-0.072001, -0.741671, 0, 1.0};
Point(131) = {-0.073001, -0.741824, 0, 1.0};
Point(132) = {-0.074000, -0.742006, 0, 1.0};
Point(133) = {-0.074500, -0.742128, 0, 1.0};
Point(134) = {-0.075000, -0.742289, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:45};
Spline(3) = {45:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:89};
Spline(6) = {89:112};
Spline(7) = {112:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html