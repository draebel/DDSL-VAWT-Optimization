SetFactory("OpenCASCADE");

Point(1) = {0.074689, 0.741238, 0, 1.0};
Point(2) = {0.071759, 0.741668, 0, 1.0};
Point(3) = {0.067523, 0.742296, 0, 1.0};
Point(4) = {0.062525, 0.743036, 0, 1.0};
Point(5) = {0.056861, 0.743876, 0, 1.0};
Point(6) = {0.050639, 0.744795, 0, 1.0};
Point(7) = {0.043962, 0.745764, 0, 1.0};
Point(8) = {0.036936, 0.746738, 0, 1.0};
Point(9) = {0.029655, 0.747672, 0, 1.0};
Point(10) = {0.022213, 0.748515, 0, 1.0};
Point(11) = {0.014697, 0.749218, 0, 1.0};
Point(12) = {0.007181, 0.749732, 0, 1.0};
Point(13) = {-0.000258, 0.750000, 0, 1.0};
Point(14) = {-0.007588, 0.749961, 0, 1.0};
Point(15) = {-0.014803, 0.749605, 0, 1.0};
Point(16) = {-0.021879, 0.748964, 0, 1.0};
Point(17) = {-0.028757, 0.748082, 0, 1.0};
Point(18) = {-0.035367, 0.746990, 0, 1.0};
Point(19) = {-0.041636, 0.745709, 0, 1.0};
Point(20) = {-0.047506, 0.744263, 0, 1.0};
Point(21) = {-0.052915, 0.742675, 0, 1.0};
Point(22) = {-0.057814, 0.740973, 0, 1.0};
Point(23) = {-0.062157, 0.739184, 0, 1.0};
Point(24) = {-0.065905, 0.737341, 0, 1.0};
Point(25) = {-0.069027, 0.735480, 0, 1.0};
Point(26) = {-0.071496, 0.733643, 0, 1.0};
Point(27) = {-0.073296, 0.731882, 0, 1.0};
Point(28) = {-0.074405, 0.730263, 0, 1.0};
Point(29) = {-0.074618, 0.729773, 0, 1.0};
Point(30) = {-0.074742, 0.729355, 0, 1.0};
Point(31) = {-0.074788, 0.729094, 0, 1.0};
Point(32) = {-0.074803, 0.728851, 0, 1.0};
Point(33) = {-0.074796, 0.728737, 0, 1.0};
Point(34) = {-0.074782, 0.728629, 0, 1.0};
Point(35) = {-0.074756, 0.728528, 0, 1.0};
Point(36) = {-0.074712, 0.728434, 0, 1.0};
Point(37) = {-0.074653, 0.728338, 0, 1.0};
Point(38) = {-0.074582, 0.728241, 0, 1.0};
Point(39) = {-0.074406, 0.728047, 0, 1.0};
Point(40) = {-0.074188, 0.727852, 0, 1.0};
Point(41) = {-0.073792, 0.727558, 0, 1.0};
Point(42) = {-0.072623, 0.726901, 0, 1.0};
Point(43) = {-0.070188, 0.725961, 0, 1.0};
Point(44) = {-0.066965, 0.725099, 0, 1.0};
Point(45) = {-0.062998, 0.724332, 0, 1.0};
Point(46) = {-0.058334, 0.723673, 0, 1.0};
Point(47) = {-0.053030, 0.723125, 0, 1.0};
Point(48) = {-0.047155, 0.722690, 0, 1.0};
Point(49) = {-0.040790, 0.722375, 0, 1.0};
Point(50) = {-0.034016, 0.722194, 0, 1.0};
Point(51) = {-0.026915, 0.722156, 0, 1.0};
Point(52) = {-0.019576, 0.722275, 0, 1.0};
Point(53) = {-0.012087, 0.722567, 0, 1.0};
Point(54) = {-0.004538, 0.723048, 0, 1.0};
Point(55) = {0.002975, 0.723741, 0, 1.0};
Point(56) = {0.010356, 0.724708, 0, 1.0};
Point(57) = {0.017596, 0.726048, 0, 1.0};
Point(58) = {0.024770, 0.727776, 0, 1.0};
Point(59) = {0.031961, 0.729798, 0, 1.0};
Point(60) = {0.039175, 0.731911, 0, 1.0};
Point(61) = {0.046278, 0.733929, 0, 1.0};
Point(62) = {0.053110, 0.735739, 0, 1.0};
Point(63) = {0.059502, 0.737259, 0, 1.0};
Point(64) = {0.065280, 0.738446, 0, 1.0};
Point(65) = {0.070277, 0.739294, 0, 1.0};
Point(66) = {0.074356, 0.739723, 0, 1.0};
Point(67) = {0.074797, 0.739781, 0, 1.0};
Point(68) = {-0.074689, -0.741238, 0, 1.0};
Point(69) = {-0.071759, -0.741668, 0, 1.0};
Point(70) = {-0.067523, -0.742296, 0, 1.0};
Point(71) = {-0.062525, -0.743036, 0, 1.0};
Point(72) = {-0.056861, -0.743876, 0, 1.0};
Point(73) = {-0.050639, -0.744795, 0, 1.0};
Point(74) = {-0.043962, -0.745764, 0, 1.0};
Point(75) = {-0.036936, -0.746738, 0, 1.0};
Point(76) = {-0.029655, -0.747672, 0, 1.0};
Point(77) = {-0.022213, -0.748515, 0, 1.0};
Point(78) = {-0.014697, -0.749218, 0, 1.0};
Point(79) = {-0.007181, -0.749732, 0, 1.0};
Point(80) = {0.000258, -0.750000, 0, 1.0};
Point(81) = {0.007588, -0.749961, 0, 1.0};
Point(82) = {0.014803, -0.749605, 0, 1.0};
Point(83) = {0.021879, -0.748964, 0, 1.0};
Point(84) = {0.028757, -0.748082, 0, 1.0};
Point(85) = {0.035367, -0.746990, 0, 1.0};
Point(86) = {0.041636, -0.745709, 0, 1.0};
Point(87) = {0.047506, -0.744263, 0, 1.0};
Point(88) = {0.052915, -0.742675, 0, 1.0};
Point(89) = {0.057814, -0.740973, 0, 1.0};
Point(90) = {0.062157, -0.739184, 0, 1.0};
Point(91) = {0.065905, -0.737341, 0, 1.0};
Point(92) = {0.069027, -0.735480, 0, 1.0};
Point(93) = {0.071496, -0.733643, 0, 1.0};
Point(94) = {0.073296, -0.731882, 0, 1.0};
Point(95) = {0.074405, -0.730263, 0, 1.0};
Point(96) = {0.074618, -0.729773, 0, 1.0};
Point(97) = {0.074742, -0.729355, 0, 1.0};
Point(98) = {0.074788, -0.729094, 0, 1.0};
Point(99) = {0.074803, -0.728851, 0, 1.0};
Point(100) = {0.074796, -0.728737, 0, 1.0};
Point(101) = {0.074782, -0.728629, 0, 1.0};
Point(102) = {0.074756, -0.728528, 0, 1.0};
Point(103) = {0.074712, -0.728434, 0, 1.0};
Point(104) = {0.074653, -0.728338, 0, 1.0};
Point(105) = {0.074582, -0.728241, 0, 1.0};
Point(106) = {0.074406, -0.728047, 0, 1.0};
Point(107) = {0.074188, -0.727852, 0, 1.0};
Point(108) = {0.073792, -0.727558, 0, 1.0};
Point(109) = {0.072623, -0.726901, 0, 1.0};
Point(110) = {0.070188, -0.725961, 0, 1.0};
Point(111) = {0.066965, -0.725099, 0, 1.0};
Point(112) = {0.062998, -0.724332, 0, 1.0};
Point(113) = {0.058334, -0.723673, 0, 1.0};
Point(114) = {0.053030, -0.723125, 0, 1.0};
Point(115) = {0.047155, -0.722690, 0, 1.0};
Point(116) = {0.040790, -0.722375, 0, 1.0};
Point(117) = {0.034016, -0.722194, 0, 1.0};
Point(118) = {0.026915, -0.722156, 0, 1.0};
Point(119) = {0.019576, -0.722275, 0, 1.0};
Point(120) = {0.012087, -0.722567, 0, 1.0};
Point(121) = {0.004538, -0.723048, 0, 1.0};
Point(122) = {-0.002975, -0.723741, 0, 1.0};
Point(123) = {-0.010356, -0.724708, 0, 1.0};
Point(124) = {-0.017596, -0.726048, 0, 1.0};
Point(125) = {-0.024770, -0.727776, 0, 1.0};
Point(126) = {-0.031961, -0.729798, 0, 1.0};
Point(127) = {-0.039175, -0.731911, 0, 1.0};
Point(128) = {-0.046278, -0.733929, 0, 1.0};
Point(129) = {-0.053110, -0.735739, 0, 1.0};
Point(130) = {-0.059502, -0.737259, 0, 1.0};
Point(131) = {-0.065280, -0.738446, 0, 1.0};
Point(132) = {-0.070277, -0.739294, 0, 1.0};
Point(133) = {-0.074356, -0.739723, 0, 1.0};
Point(134) = {-0.074797, -0.739781, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:85};
Spline(6) = {85:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {36.00000000, 15.00000000, 0, 1.0};
Point(138) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html