SetFactory("OpenCASCADE");

Point(1) = {0.110928, 0.720552, 0, 1.0};
Point(2) = {0.110408, 0.720704, 0, 1.0};
Point(3) = {0.108903, 0.721179, 0, 1.0};
Point(4) = {0.106531, 0.721997, 0, 1.0};
Point(5) = {0.103385, 0.723109, 0, 1.0};
Point(6) = {0.099516, 0.724458, 0, 1.0};
Point(7) = {0.094959, 0.726019, 0, 1.0};
Point(8) = {0.089774, 0.727782, 0, 1.0};
Point(9) = {0.084048, 0.729730, 0, 1.0};
Point(10) = {0.077867, 0.731825, 0, 1.0};
Point(11) = {0.071322, 0.734032, 0, 1.0};
Point(12) = {0.064506, 0.736301, 0, 1.0};
Point(13) = {0.057514, 0.738583, 0, 1.0};
Point(14) = {0.050439, 0.740813, 0, 1.0};
Point(15) = {0.043372, 0.742911, 0, 1.0};
Point(16) = {0.036358, 0.744785, 0, 1.0};
Point(17) = {0.029406, 0.746383, 0, 1.0};
Point(18) = {0.022548, 0.747692, 0, 1.0};
Point(19) = {0.015823, 0.748702, 0, 1.0};
Point(20) = {0.009270, 0.749411, 0, 1.0};
Point(21) = {0.002924, 0.749834, 0, 1.0};
Point(22) = {-0.003161, 0.750000, 0, 1.0};
Point(23) = {-0.008917, 0.749933, 0, 1.0};
Point(24) = {-0.014284, 0.749649, 0, 1.0};
Point(25) = {-0.019201, 0.749163, 0, 1.0};
Point(26) = {-0.023621, 0.748494, 0, 1.0};
Point(27) = {-0.027496, 0.747662, 0, 1.0};
Point(28) = {-0.030788, 0.746693, 0, 1.0};
Point(29) = {-0.033463, 0.745617, 0, 1.0};
Point(30) = {-0.035496, 0.744474, 0, 1.0};
Point(31) = {-0.036856, 0.743317, 0, 1.0};
Point(32) = {-0.037495, 0.742245, 0, 1.0};
Point(33) = {-0.037224, 0.741205, 0, 1.0};
Point(34) = {-0.036048, 0.740066, 0, 1.0};
Point(35) = {-0.034117, 0.738850, 0, 1.0};
Point(36) = {-0.031444, 0.737610, 0, 1.0};
Point(37) = {-0.028050, 0.736364, 0, 1.0};
Point(38) = {-0.023965, 0.735133, 0, 1.0};
Point(39) = {-0.019226, 0.733932, 0, 1.0};
Point(40) = {-0.013876, 0.732770, 0, 1.0};
Point(41) = {-0.007972, 0.731659, 0, 1.0};
Point(42) = {-0.001572, 0.730607, 0, 1.0};
Point(43) = {0.005251, 0.729627, 0, 1.0};
Point(44) = {0.012425, 0.728744, 0, 1.0};
Point(45) = {0.019902, 0.727988, 0, 1.0};
Point(46) = {0.027658, 0.727341, 0, 1.0};
Point(47) = {0.035618, 0.726748, 0, 1.0};
Point(48) = {0.043672, 0.726179, 0, 1.0};
Point(49) = {0.051709, 0.725617, 0, 1.0};
Point(50) = {0.059618, 0.725057, 0, 1.0};
Point(51) = {0.067291, 0.724497, 0, 1.0};
Point(52) = {0.074624, 0.723936, 0, 1.0};
Point(53) = {0.081513, 0.723381, 0, 1.0};
Point(54) = {0.087863, 0.722840, 0, 1.0};
Point(55) = {0.093584, 0.722325, 0, 1.0};
Point(56) = {0.098594, 0.721856, 0, 1.0};
Point(57) = {0.102832, 0.721457, 0, 1.0};
Point(58) = {0.106258, 0.721127, 0, 1.0};
Point(59) = {0.108807, 0.720849, 0, 1.0};
Point(60) = {0.110390, 0.720637, 0, 1.0};
Point(61) = {-0.110928, -0.720552, 0, 1.0};
Point(62) = {-0.110408, -0.720704, 0, 1.0};
Point(63) = {-0.108903, -0.721179, 0, 1.0};
Point(64) = {-0.106531, -0.721997, 0, 1.0};
Point(65) = {-0.103385, -0.723109, 0, 1.0};
Point(66) = {-0.099516, -0.724458, 0, 1.0};
Point(67) = {-0.094959, -0.726019, 0, 1.0};
Point(68) = {-0.089774, -0.727782, 0, 1.0};
Point(69) = {-0.084048, -0.729730, 0, 1.0};
Point(70) = {-0.077867, -0.731825, 0, 1.0};
Point(71) = {-0.071322, -0.734032, 0, 1.0};
Point(72) = {-0.064506, -0.736301, 0, 1.0};
Point(73) = {-0.057514, -0.738583, 0, 1.0};
Point(74) = {-0.050439, -0.740813, 0, 1.0};
Point(75) = {-0.043372, -0.742911, 0, 1.0};
Point(76) = {-0.036358, -0.744785, 0, 1.0};
Point(77) = {-0.029406, -0.746383, 0, 1.0};
Point(78) = {-0.022548, -0.747692, 0, 1.0};
Point(79) = {-0.015823, -0.748702, 0, 1.0};
Point(80) = {-0.009270, -0.749411, 0, 1.0};
Point(81) = {-0.002924, -0.749834, 0, 1.0};
Point(82) = {0.003161, -0.750000, 0, 1.0};
Point(83) = {0.008917, -0.749933, 0, 1.0};
Point(84) = {0.014284, -0.749649, 0, 1.0};
Point(85) = {0.019201, -0.749163, 0, 1.0};
Point(86) = {0.023621, -0.748494, 0, 1.0};
Point(87) = {0.027496, -0.747662, 0, 1.0};
Point(88) = {0.030788, -0.746693, 0, 1.0};
Point(89) = {0.033463, -0.745617, 0, 1.0};
Point(90) = {0.035496, -0.744474, 0, 1.0};
Point(91) = {0.036856, -0.743317, 0, 1.0};
Point(92) = {0.037495, -0.742245, 0, 1.0};
Point(93) = {0.037224, -0.741205, 0, 1.0};
Point(94) = {0.036048, -0.740066, 0, 1.0};
Point(95) = {0.034117, -0.738850, 0, 1.0};
Point(96) = {0.031444, -0.737610, 0, 1.0};
Point(97) = {0.028050, -0.736364, 0, 1.0};
Point(98) = {0.023965, -0.735133, 0, 1.0};
Point(99) = {0.019226, -0.733932, 0, 1.0};
Point(100) = {0.013876, -0.732770, 0, 1.0};
Point(101) = {0.007972, -0.731659, 0, 1.0};
Point(102) = {0.001572, -0.730607, 0, 1.0};
Point(103) = {-0.005251, -0.729627, 0, 1.0};
Point(104) = {-0.012425, -0.728744, 0, 1.0};
Point(105) = {-0.019902, -0.727988, 0, 1.0};
Point(106) = {-0.027658, -0.727341, 0, 1.0};
Point(107) = {-0.035618, -0.726748, 0, 1.0};
Point(108) = {-0.043672, -0.726179, 0, 1.0};
Point(109) = {-0.051709, -0.725617, 0, 1.0};
Point(110) = {-0.059618, -0.725057, 0, 1.0};
Point(111) = {-0.067291, -0.724497, 0, 1.0};
Point(112) = {-0.074624, -0.723936, 0, 1.0};
Point(113) = {-0.081513, -0.723381, 0, 1.0};
Point(114) = {-0.087863, -0.722840, 0, 1.0};
Point(115) = {-0.093584, -0.722325, 0, 1.0};
Point(116) = {-0.098594, -0.721856, 0, 1.0};
Point(117) = {-0.102832, -0.721457, 0, 1.0};
Point(118) = {-0.106258, -0.721127, 0, 1.0};
Point(119) = {-0.108807, -0.720849, 0, 1.0};
Point(120) = {-0.110390, -0.720637, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html