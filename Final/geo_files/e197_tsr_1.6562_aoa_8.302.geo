SetFactory("OpenCASCADE");

Point(1) = {0.073952, 0.730368, 0, 1.0};
Point(2) = {0.073605, 0.730469, 0, 1.0};
Point(3) = {0.072602, 0.730786, 0, 1.0};
Point(4) = {0.071020, 0.731331, 0, 1.0};
Point(5) = {0.068924, 0.732073, 0, 1.0};
Point(6) = {0.066344, 0.732972, 0, 1.0};
Point(7) = {0.063306, 0.734012, 0, 1.0};
Point(8) = {0.059849, 0.735188, 0, 1.0};
Point(9) = {0.056032, 0.736487, 0, 1.0};
Point(10) = {0.051911, 0.737883, 0, 1.0};
Point(11) = {0.047548, 0.739355, 0, 1.0};
Point(12) = {0.043004, 0.740868, 0, 1.0};
Point(13) = {0.038343, 0.742389, 0, 1.0};
Point(14) = {0.033626, 0.743875, 0, 1.0};
Point(15) = {0.028914, 0.745274, 0, 1.0};
Point(16) = {0.024239, 0.746523, 0, 1.0};
Point(17) = {0.019604, 0.747589, 0, 1.0};
Point(18) = {0.015032, 0.748461, 0, 1.0};
Point(19) = {0.010548, 0.749135, 0, 1.0};
Point(20) = {0.006180, 0.749607, 0, 1.0};
Point(21) = {0.001949, 0.749889, 0, 1.0};
Point(22) = {-0.002107, 0.750000, 0, 1.0};
Point(23) = {-0.005945, 0.749956, 0, 1.0};
Point(24) = {-0.009523, 0.749766, 0, 1.0};
Point(25) = {-0.012801, 0.749442, 0, 1.0};
Point(26) = {-0.015747, 0.748996, 0, 1.0};
Point(27) = {-0.018330, 0.748441, 0, 1.0};
Point(28) = {-0.020526, 0.747795, 0, 1.0};
Point(29) = {-0.022309, 0.747078, 0, 1.0};
Point(30) = {-0.023664, 0.746316, 0, 1.0};
Point(31) = {-0.024571, 0.745545, 0, 1.0};
Point(32) = {-0.024997, 0.744830, 0, 1.0};
Point(33) = {-0.024816, 0.744136, 0, 1.0};
Point(34) = {-0.024032, 0.743377, 0, 1.0};
Point(35) = {-0.022745, 0.742567, 0, 1.0};
Point(36) = {-0.020963, 0.741740, 0, 1.0};
Point(37) = {-0.018700, 0.740910, 0, 1.0};
Point(38) = {-0.015977, 0.740089, 0, 1.0};
Point(39) = {-0.012817, 0.739288, 0, 1.0};
Point(40) = {-0.009251, 0.738513, 0, 1.0};
Point(41) = {-0.005314, 0.737773, 0, 1.0};
Point(42) = {-0.001048, 0.737072, 0, 1.0};
Point(43) = {0.003500, 0.736418, 0, 1.0};
Point(44) = {0.008283, 0.735829, 0, 1.0};
Point(45) = {0.013268, 0.735325, 0, 1.0};
Point(46) = {0.018439, 0.734894, 0, 1.0};
Point(47) = {0.023745, 0.734499, 0, 1.0};
Point(48) = {0.029115, 0.734119, 0, 1.0};
Point(49) = {0.034473, 0.733745, 0, 1.0};
Point(50) = {0.039745, 0.733372, 0, 1.0};
Point(51) = {0.044861, 0.732998, 0, 1.0};
Point(52) = {0.049749, 0.732624, 0, 1.0};
Point(53) = {0.054342, 0.732254, 0, 1.0};
Point(54) = {0.058575, 0.731893, 0, 1.0};
Point(55) = {0.062390, 0.731550, 0, 1.0};
Point(56) = {0.065729, 0.731237, 0, 1.0};
Point(57) = {0.068555, 0.730972, 0, 1.0};
Point(58) = {0.070839, 0.730752, 0, 1.0};
Point(59) = {0.072538, 0.730566, 0, 1.0};
Point(60) = {0.073593, 0.730424, 0, 1.0};
Point(61) = {-0.073952, -0.730368, 0, 1.0};
Point(62) = {-0.073605, -0.730469, 0, 1.0};
Point(63) = {-0.072602, -0.730786, 0, 1.0};
Point(64) = {-0.071020, -0.731331, 0, 1.0};
Point(65) = {-0.068924, -0.732073, 0, 1.0};
Point(66) = {-0.066344, -0.732972, 0, 1.0};
Point(67) = {-0.063306, -0.734012, 0, 1.0};
Point(68) = {-0.059849, -0.735188, 0, 1.0};
Point(69) = {-0.056032, -0.736487, 0, 1.0};
Point(70) = {-0.051911, -0.737883, 0, 1.0};
Point(71) = {-0.047548, -0.739355, 0, 1.0};
Point(72) = {-0.043004, -0.740868, 0, 1.0};
Point(73) = {-0.038343, -0.742389, 0, 1.0};
Point(74) = {-0.033626, -0.743875, 0, 1.0};
Point(75) = {-0.028914, -0.745274, 0, 1.0};
Point(76) = {-0.024239, -0.746523, 0, 1.0};
Point(77) = {-0.019604, -0.747589, 0, 1.0};
Point(78) = {-0.015032, -0.748461, 0, 1.0};
Point(79) = {-0.010548, -0.749135, 0, 1.0};
Point(80) = {-0.006180, -0.749607, 0, 1.0};
Point(81) = {-0.001949, -0.749889, 0, 1.0};
Point(82) = {0.002107, -0.750000, 0, 1.0};
Point(83) = {0.005945, -0.749956, 0, 1.0};
Point(84) = {0.009523, -0.749766, 0, 1.0};
Point(85) = {0.012801, -0.749442, 0, 1.0};
Point(86) = {0.015747, -0.748996, 0, 1.0};
Point(87) = {0.018330, -0.748441, 0, 1.0};
Point(88) = {0.020526, -0.747795, 0, 1.0};
Point(89) = {0.022309, -0.747078, 0, 1.0};
Point(90) = {0.023664, -0.746316, 0, 1.0};
Point(91) = {0.024571, -0.745545, 0, 1.0};
Point(92) = {0.024997, -0.744830, 0, 1.0};
Point(93) = {0.024816, -0.744136, 0, 1.0};
Point(94) = {0.024032, -0.743377, 0, 1.0};
Point(95) = {0.022745, -0.742567, 0, 1.0};
Point(96) = {0.020963, -0.741740, 0, 1.0};
Point(97) = {0.018700, -0.740910, 0, 1.0};
Point(98) = {0.015977, -0.740089, 0, 1.0};
Point(99) = {0.012817, -0.739288, 0, 1.0};
Point(100) = {0.009251, -0.738513, 0, 1.0};
Point(101) = {0.005314, -0.737773, 0, 1.0};
Point(102) = {0.001048, -0.737072, 0, 1.0};
Point(103) = {-0.003500, -0.736418, 0, 1.0};
Point(104) = {-0.008283, -0.735829, 0, 1.0};
Point(105) = {-0.013268, -0.735325, 0, 1.0};
Point(106) = {-0.018439, -0.734894, 0, 1.0};
Point(107) = {-0.023745, -0.734499, 0, 1.0};
Point(108) = {-0.029115, -0.734119, 0, 1.0};
Point(109) = {-0.034473, -0.733745, 0, 1.0};
Point(110) = {-0.039745, -0.733372, 0, 1.0};
Point(111) = {-0.044861, -0.732998, 0, 1.0};
Point(112) = {-0.049749, -0.732624, 0, 1.0};
Point(113) = {-0.054342, -0.732254, 0, 1.0};
Point(114) = {-0.058575, -0.731893, 0, 1.0};
Point(115) = {-0.062390, -0.731550, 0, 1.0};
Point(116) = {-0.065729, -0.731237, 0, 1.0};
Point(117) = {-0.068555, -0.730972, 0, 1.0};
Point(118) = {-0.070839, -0.730752, 0, 1.0};
Point(119) = {-0.072538, -0.730566, 0, 1.0};
Point(120) = {-0.073593, -0.730424, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html