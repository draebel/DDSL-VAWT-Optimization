SetFactory("OpenCASCADE");

Point(1) = {0.074209, 0.720552, 0, 1.0};
Point(2) = {0.073689, 0.720704, 0, 1.0};
Point(3) = {0.072184, 0.721179, 0, 1.0};
Point(4) = {0.069812, 0.721997, 0, 1.0};
Point(5) = {0.066666, 0.723109, 0, 1.0};
Point(6) = {0.062797, 0.724458, 0, 1.0};
Point(7) = {0.058240, 0.726019, 0, 1.0};
Point(8) = {0.053055, 0.727782, 0, 1.0};
Point(9) = {0.047329, 0.729730, 0, 1.0};
Point(10) = {0.041148, 0.731825, 0, 1.0};
Point(11) = {0.034603, 0.734032, 0, 1.0};
Point(12) = {0.027787, 0.736301, 0, 1.0};
Point(13) = {0.020795, 0.738583, 0, 1.0};
Point(14) = {0.013720, 0.740813, 0, 1.0};
Point(15) = {0.006653, 0.742911, 0, 1.0};
Point(16) = {-0.000361, 0.744785, 0, 1.0};
Point(17) = {-0.007313, 0.746383, 0, 1.0};
Point(18) = {-0.014171, 0.747692, 0, 1.0};
Point(19) = {-0.020896, 0.748702, 0, 1.0};
Point(20) = {-0.027449, 0.749411, 0, 1.0};
Point(21) = {-0.033795, 0.749834, 0, 1.0};
Point(22) = {-0.039880, 0.750000, 0, 1.0};
Point(23) = {-0.045636, 0.749933, 0, 1.0};
Point(24) = {-0.051003, 0.749649, 0, 1.0};
Point(25) = {-0.055920, 0.749163, 0, 1.0};
Point(26) = {-0.060340, 0.748494, 0, 1.0};
Point(27) = {-0.064215, 0.747662, 0, 1.0};
Point(28) = {-0.067507, 0.746693, 0, 1.0};
Point(29) = {-0.070182, 0.745617, 0, 1.0};
Point(30) = {-0.072215, 0.744474, 0, 1.0};
Point(31) = {-0.073575, 0.743317, 0, 1.0};
Point(32) = {-0.074214, 0.742245, 0, 1.0};
Point(33) = {-0.073943, 0.741205, 0, 1.0};
Point(34) = {-0.072767, 0.740066, 0, 1.0};
Point(35) = {-0.070836, 0.738850, 0, 1.0};
Point(36) = {-0.068163, 0.737610, 0, 1.0};
Point(37) = {-0.064769, 0.736364, 0, 1.0};
Point(38) = {-0.060684, 0.735133, 0, 1.0};
Point(39) = {-0.055945, 0.733932, 0, 1.0};
Point(40) = {-0.050595, 0.732770, 0, 1.0};
Point(41) = {-0.044691, 0.731659, 0, 1.0};
Point(42) = {-0.038291, 0.730607, 0, 1.0};
Point(43) = {-0.031469, 0.729627, 0, 1.0};
Point(44) = {-0.024294, 0.728744, 0, 1.0};
Point(45) = {-0.016817, 0.727988, 0, 1.0};
Point(46) = {-0.009061, 0.727341, 0, 1.0};
Point(47) = {-0.001101, 0.726748, 0, 1.0};
Point(48) = {0.006953, 0.726179, 0, 1.0};
Point(49) = {0.014990, 0.725617, 0, 1.0};
Point(50) = {0.022899, 0.725057, 0, 1.0};
Point(51) = {0.030572, 0.724497, 0, 1.0};
Point(52) = {0.037905, 0.723936, 0, 1.0};
Point(53) = {0.044794, 0.723381, 0, 1.0};
Point(54) = {0.051144, 0.722840, 0, 1.0};
Point(55) = {0.056865, 0.722325, 0, 1.0};
Point(56) = {0.061875, 0.721856, 0, 1.0};
Point(57) = {0.066113, 0.721457, 0, 1.0};
Point(58) = {0.069539, 0.721127, 0, 1.0};
Point(59) = {0.072088, 0.720849, 0, 1.0};
Point(60) = {0.073671, 0.720637, 0, 1.0};
Point(61) = {-0.074209, -0.720552, 0, 1.0};
Point(62) = {-0.073689, -0.720704, 0, 1.0};
Point(63) = {-0.072184, -0.721179, 0, 1.0};
Point(64) = {-0.069812, -0.721997, 0, 1.0};
Point(65) = {-0.066666, -0.723109, 0, 1.0};
Point(66) = {-0.062797, -0.724458, 0, 1.0};
Point(67) = {-0.058240, -0.726019, 0, 1.0};
Point(68) = {-0.053055, -0.727782, 0, 1.0};
Point(69) = {-0.047329, -0.729730, 0, 1.0};
Point(70) = {-0.041148, -0.731825, 0, 1.0};
Point(71) = {-0.034603, -0.734032, 0, 1.0};
Point(72) = {-0.027787, -0.736301, 0, 1.0};
Point(73) = {-0.020795, -0.738583, 0, 1.0};
Point(74) = {-0.013720, -0.740813, 0, 1.0};
Point(75) = {-0.006653, -0.742911, 0, 1.0};
Point(76) = {0.000361, -0.744785, 0, 1.0};
Point(77) = {0.007313, -0.746383, 0, 1.0};
Point(78) = {0.014171, -0.747692, 0, 1.0};
Point(79) = {0.020896, -0.748702, 0, 1.0};
Point(80) = {0.027449, -0.749411, 0, 1.0};
Point(81) = {0.033795, -0.749834, 0, 1.0};
Point(82) = {0.039880, -0.750000, 0, 1.0};
Point(83) = {0.045636, -0.749933, 0, 1.0};
Point(84) = {0.051003, -0.749649, 0, 1.0};
Point(85) = {0.055920, -0.749163, 0, 1.0};
Point(86) = {0.060340, -0.748494, 0, 1.0};
Point(87) = {0.064215, -0.747662, 0, 1.0};
Point(88) = {0.067507, -0.746693, 0, 1.0};
Point(89) = {0.070182, -0.745617, 0, 1.0};
Point(90) = {0.072215, -0.744474, 0, 1.0};
Point(91) = {0.073575, -0.743317, 0, 1.0};
Point(92) = {0.074214, -0.742245, 0, 1.0};
Point(93) = {0.073943, -0.741205, 0, 1.0};
Point(94) = {0.072767, -0.740066, 0, 1.0};
Point(95) = {0.070836, -0.738850, 0, 1.0};
Point(96) = {0.068163, -0.737610, 0, 1.0};
Point(97) = {0.064769, -0.736364, 0, 1.0};
Point(98) = {0.060684, -0.735133, 0, 1.0};
Point(99) = {0.055945, -0.733932, 0, 1.0};
Point(100) = {0.050595, -0.732770, 0, 1.0};
Point(101) = {0.044691, -0.731659, 0, 1.0};
Point(102) = {0.038291, -0.730607, 0, 1.0};
Point(103) = {0.031469, -0.729627, 0, 1.0};
Point(104) = {0.024294, -0.728744, 0, 1.0};
Point(105) = {0.016817, -0.727988, 0, 1.0};
Point(106) = {0.009061, -0.727341, 0, 1.0};
Point(107) = {0.001101, -0.726748, 0, 1.0};
Point(108) = {-0.006953, -0.726179, 0, 1.0};
Point(109) = {-0.014990, -0.725617, 0, 1.0};
Point(110) = {-0.022899, -0.725057, 0, 1.0};
Point(111) = {-0.030572, -0.724497, 0, 1.0};
Point(112) = {-0.037905, -0.723936, 0, 1.0};
Point(113) = {-0.044794, -0.723381, 0, 1.0};
Point(114) = {-0.051144, -0.722840, 0, 1.0};
Point(115) = {-0.056865, -0.722325, 0, 1.0};
Point(116) = {-0.061875, -0.721856, 0, 1.0};
Point(117) = {-0.066113, -0.721457, 0, 1.0};
Point(118) = {-0.069539, -0.721127, 0, 1.0};
Point(119) = {-0.072088, -0.720849, 0, 1.0};
Point(120) = {-0.073671, -0.720637, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html