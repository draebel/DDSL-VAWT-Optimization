SetFactory("OpenCASCADE");

Point(1) = {0.074980, 0.742292, 0, 1.0};
Point(2) = {0.074630, 0.742320, 0, 1.0};
Point(3) = {0.073614, 0.742427, 0, 1.0};
Point(4) = {0.072004, 0.742622, 0, 1.0};
Point(5) = {0.069846, 0.742869, 0, 1.0};
Point(6) = {0.067142, 0.743153, 0, 1.0};
Point(7) = {0.063916, 0.743490, 0, 1.0};
Point(8) = {0.060219, 0.743890, 0, 1.0};
Point(9) = {0.056108, 0.744356, 0, 1.0};
Point(10) = {0.051643, 0.744884, 0, 1.0};
Point(11) = {0.046892, 0.745463, 0, 1.0};
Point(12) = {0.041920, 0.746081, 0, 1.0};
Point(13) = {0.036797, 0.746720, 0, 1.0};
Point(14) = {0.031588, 0.747362, 0, 1.0};
Point(15) = {0.026358, 0.747982, 0, 1.0};
Point(16) = {0.021169, 0.748557, 0, 1.0};
Point(17) = {0.016075, 0.749064, 0, 1.0};
Point(18) = {0.011129, 0.749479, 0, 1.0};
Point(19) = {0.006377, 0.749783, 0, 1.0};
Point(20) = {0.001857, 0.749960, 0, 1.0};
Point(21) = {-0.002397, 0.750000, 0, 1.0};
Point(22) = {-0.006349, 0.749896, 0, 1.0};
Point(23) = {-0.009976, 0.749645, 0, 1.0};
Point(24) = {-0.013258, 0.749249, 0, 1.0};
Point(25) = {-0.016180, 0.748722, 0, 1.0};
Point(26) = {-0.018725, 0.748089, 0, 1.0};
Point(27) = {-0.020869, 0.747375, 0, 1.0};
Point(28) = {-0.022590, 0.746602, 0, 1.0};
Point(29) = {-0.023875, 0.745797, 0, 1.0};
Point(30) = {-0.024699, 0.744996, 0, 1.0};
Point(31) = {-0.025000, 0.744269, 0, 1.0};
Point(32) = {-0.024728, 0.743530, 0, 1.0};
Point(33) = {-0.023936, 0.742697, 0, 1.0};
Point(34) = {-0.022685, 0.741842, 0, 1.0};
Point(35) = {-0.020995, 0.741002, 0, 1.0};
Point(36) = {-0.018881, 0.740203, 0, 1.0};
Point(37) = {-0.016363, 0.739470, 0, 1.0};
Point(38) = {-0.013464, 0.738829, 0, 1.0};
Point(39) = {-0.010200, 0.738303, 0, 1.0};
Point(40) = {-0.006586, 0.737908, 0, 1.0};
Point(41) = {-0.002642, 0.737648, 0, 1.0};
Point(42) = {0.001611, 0.737520, 0, 1.0};
Point(43) = {0.006135, 0.737518, 0, 1.0};
Point(44) = {0.010895, 0.737634, 0, 1.0};
Point(45) = {0.015853, 0.737854, 0, 1.0};
Point(46) = {0.020963, 0.738159, 0, 1.0};
Point(47) = {0.026172, 0.738528, 0, 1.0};
Point(48) = {0.031422, 0.738941, 0, 1.0};
Point(49) = {0.036651, 0.739376, 0, 1.0};
Point(50) = {0.041796, 0.739812, 0, 1.0};
Point(51) = {0.046788, 0.740234, 0, 1.0};
Point(52) = {0.051559, 0.740624, 0, 1.0};
Point(53) = {0.056041, 0.740975, 0, 1.0};
Point(54) = {0.060168, 0.741278, 0, 1.0};
Point(55) = {0.063877, 0.741532, 0, 1.0};
Point(56) = {0.067114, 0.741741, 0, 1.0};
Point(57) = {0.069827, 0.741918, 0, 1.0};
Point(58) = {0.071994, 0.742080, 0, 1.0};
Point(59) = {0.073610, 0.742211, 0, 1.0};
Point(60) = {0.074629, 0.742278, 0, 1.0};
Point(61) = {-0.074980, -0.742292, 0, 1.0};
Point(62) = {-0.074630, -0.742320, 0, 1.0};
Point(63) = {-0.073614, -0.742427, 0, 1.0};
Point(64) = {-0.072004, -0.742622, 0, 1.0};
Point(65) = {-0.069846, -0.742869, 0, 1.0};
Point(66) = {-0.067142, -0.743153, 0, 1.0};
Point(67) = {-0.063916, -0.743490, 0, 1.0};
Point(68) = {-0.060219, -0.743890, 0, 1.0};
Point(69) = {-0.056108, -0.744356, 0, 1.0};
Point(70) = {-0.051643, -0.744884, 0, 1.0};
Point(71) = {-0.046892, -0.745463, 0, 1.0};
Point(72) = {-0.041920, -0.746081, 0, 1.0};
Point(73) = {-0.036797, -0.746720, 0, 1.0};
Point(74) = {-0.031588, -0.747362, 0, 1.0};
Point(75) = {-0.026358, -0.747982, 0, 1.0};
Point(76) = {-0.021169, -0.748557, 0, 1.0};
Point(77) = {-0.016075, -0.749064, 0, 1.0};
Point(78) = {-0.011129, -0.749479, 0, 1.0};
Point(79) = {-0.006377, -0.749783, 0, 1.0};
Point(80) = {-0.001857, -0.749960, 0, 1.0};
Point(81) = {0.002397, -0.750000, 0, 1.0};
Point(82) = {0.006349, -0.749896, 0, 1.0};
Point(83) = {0.009976, -0.749645, 0, 1.0};
Point(84) = {0.013258, -0.749249, 0, 1.0};
Point(85) = {0.016180, -0.748722, 0, 1.0};
Point(86) = {0.018725, -0.748089, 0, 1.0};
Point(87) = {0.020869, -0.747375, 0, 1.0};
Point(88) = {0.022590, -0.746602, 0, 1.0};
Point(89) = {0.023875, -0.745797, 0, 1.0};
Point(90) = {0.024699, -0.744996, 0, 1.0};
Point(91) = {0.025000, -0.744269, 0, 1.0};
Point(92) = {0.024728, -0.743530, 0, 1.0};
Point(93) = {0.023936, -0.742697, 0, 1.0};
Point(94) = {0.022685, -0.741842, 0, 1.0};
Point(95) = {0.020995, -0.741002, 0, 1.0};
Point(96) = {0.018881, -0.740203, 0, 1.0};
Point(97) = {0.016363, -0.739470, 0, 1.0};
Point(98) = {0.013464, -0.738829, 0, 1.0};
Point(99) = {0.010200, -0.738303, 0, 1.0};
Point(100) = {0.006586, -0.737908, 0, 1.0};
Point(101) = {0.002642, -0.737648, 0, 1.0};
Point(102) = {-0.001611, -0.737520, 0, 1.0};
Point(103) = {-0.006135, -0.737518, 0, 1.0};
Point(104) = {-0.010895, -0.737634, 0, 1.0};
Point(105) = {-0.015853, -0.737854, 0, 1.0};
Point(106) = {-0.020963, -0.738159, 0, 1.0};
Point(107) = {-0.026172, -0.738528, 0, 1.0};
Point(108) = {-0.031422, -0.738941, 0, 1.0};
Point(109) = {-0.036651, -0.739376, 0, 1.0};
Point(110) = {-0.041796, -0.739812, 0, 1.0};
Point(111) = {-0.046788, -0.740234, 0, 1.0};
Point(112) = {-0.051559, -0.740624, 0, 1.0};
Point(113) = {-0.056041, -0.740975, 0, 1.0};
Point(114) = {-0.060168, -0.741278, 0, 1.0};
Point(115) = {-0.063877, -0.741532, 0, 1.0};
Point(116) = {-0.067114, -0.741741, 0, 1.0};
Point(117) = {-0.069827, -0.741918, 0, 1.0};
Point(118) = {-0.071994, -0.742080, 0, 1.0};
Point(119) = {-0.073610, -0.742211, 0, 1.0};
Point(120) = {-0.074629, -0.742278, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html