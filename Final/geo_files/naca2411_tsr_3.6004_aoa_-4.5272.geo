SetFactory("OpenCASCADE");

Point(1) = {0.112149, 0.745032, 0, 1.0};
Point(2) = {0.111738, 0.745088, 0, 1.0};
Point(3) = {0.110503, 0.745255, 0, 1.0};
Point(4) = {0.108466, 0.745523, 0, 1.0};
Point(5) = {0.105642, 0.745880, 0, 1.0};
Point(6) = {0.102064, 0.746310, 0, 1.0};
Point(7) = {0.097768, 0.746793, 0, 1.0};
Point(8) = {0.092799, 0.747310, 0, 1.0};
Point(9) = {0.087215, 0.747835, 0, 1.0};
Point(10) = {0.081070, 0.748348, 0, 1.0};
Point(11) = {0.074439, 0.748826, 0, 1.0};
Point(12) = {0.067389, 0.749249, 0, 1.0};
Point(13) = {0.060001, 0.749596, 0, 1.0};
Point(14) = {0.052352, 0.749848, 0, 1.0};
Point(15) = {0.044530, 0.749988, 0, 1.0};
Point(16) = {0.036622, 0.750000, 0, 1.0};
Point(17) = {0.028717, 0.749871, 0, 1.0};
Point(18) = {0.020900, 0.749589, 0, 1.0};
Point(19) = {0.013201, 0.749103, 0, 1.0};
Point(20) = {0.005779, 0.748393, 0, 1.0};
Point(21) = {-0.001280, 0.747468, 0, 1.0};
Point(22) = {-0.007892, 0.746351, 0, 1.0};
Point(23) = {-0.013985, 0.745065, 0, 1.0};
Point(24) = {-0.019480, 0.743647, 0, 1.0};
Point(25) = {-0.024326, 0.742130, 0, 1.0};
Point(26) = {-0.028461, 0.740560, 0, 1.0};
Point(27) = {-0.031845, 0.738977, 0, 1.0};
Point(28) = {-0.034452, 0.737418, 0, 1.0};
Point(29) = {-0.036249, 0.735918, 0, 1.0};
Point(30) = {-0.037228, 0.734502, 0, 1.0};
Point(31) = {-0.037383, 0.733192, 0, 1.0};
Point(32) = {-0.036728, 0.732049, 0, 1.0};
Point(33) = {-0.035278, 0.731127, 0, 1.0};
Point(34) = {-0.033067, 0.730433, 0, 1.0};
Point(35) = {-0.030112, 0.729960, 0, 1.0};
Point(36) = {-0.026454, 0.729705, 0, 1.0};
Point(37) = {-0.022134, 0.729658, 0, 1.0};
Point(38) = {-0.017196, 0.729810, 0, 1.0};
Point(39) = {-0.011694, 0.730142, 0, 1.0};
Point(40) = {-0.005684, 0.730634, 0, 1.0};
Point(41) = {0.000771, 0.731261, 0, 1.0};
Point(42) = {0.007615, 0.731993, 0, 1.0};
Point(43) = {0.014774, 0.732800, 0, 1.0};
Point(44) = {0.022185, 0.733650, 0, 1.0};
Point(45) = {0.029830, 0.734546, 0, 1.0};
Point(46) = {0.037569, 0.735493, 0, 1.0};
Point(47) = {0.045314, 0.736469, 0, 1.0};
Point(48) = {0.052983, 0.737451, 0, 1.0};
Point(49) = {0.060490, 0.738418, 0, 1.0};
Point(50) = {0.067755, 0.739356, 0, 1.0};
Point(51) = {0.074703, 0.740249, 0, 1.0};
Point(52) = {0.081249, 0.741090, 0, 1.0};
Point(53) = {0.087327, 0.741866, 0, 1.0};
Point(54) = {0.092863, 0.742571, 0, 1.0};
Point(55) = {0.097801, 0.743199, 0, 1.0};
Point(56) = {0.102076, 0.743744, 0, 1.0};
Point(57) = {0.105644, 0.744199, 0, 1.0};
Point(58) = {0.108467, 0.744560, 0, 1.0};
Point(59) = {0.110503, 0.744820, 0, 1.0};
Point(60) = {0.111736, 0.744980, 0, 1.0};
Point(61) = {-0.112149, -0.745032, 0, 1.0};
Point(62) = {-0.111738, -0.745088, 0, 1.0};
Point(63) = {-0.110503, -0.745255, 0, 1.0};
Point(64) = {-0.108466, -0.745523, 0, 1.0};
Point(65) = {-0.105642, -0.745880, 0, 1.0};
Point(66) = {-0.102064, -0.746310, 0, 1.0};
Point(67) = {-0.097768, -0.746793, 0, 1.0};
Point(68) = {-0.092799, -0.747310, 0, 1.0};
Point(69) = {-0.087215, -0.747835, 0, 1.0};
Point(70) = {-0.081070, -0.748348, 0, 1.0};
Point(71) = {-0.074439, -0.748826, 0, 1.0};
Point(72) = {-0.067389, -0.749249, 0, 1.0};
Point(73) = {-0.060001, -0.749596, 0, 1.0};
Point(74) = {-0.052352, -0.749848, 0, 1.0};
Point(75) = {-0.044530, -0.749988, 0, 1.0};
Point(76) = {-0.036622, -0.750000, 0, 1.0};
Point(77) = {-0.028717, -0.749871, 0, 1.0};
Point(78) = {-0.020900, -0.749589, 0, 1.0};
Point(79) = {-0.013201, -0.749103, 0, 1.0};
Point(80) = {-0.005779, -0.748393, 0, 1.0};
Point(81) = {0.001280, -0.747468, 0, 1.0};
Point(82) = {0.007892, -0.746351, 0, 1.0};
Point(83) = {0.013985, -0.745065, 0, 1.0};
Point(84) = {0.019480, -0.743647, 0, 1.0};
Point(85) = {0.024326, -0.742130, 0, 1.0};
Point(86) = {0.028461, -0.740560, 0, 1.0};
Point(87) = {0.031845, -0.738977, 0, 1.0};
Point(88) = {0.034452, -0.737418, 0, 1.0};
Point(89) = {0.036249, -0.735918, 0, 1.0};
Point(90) = {0.037228, -0.734502, 0, 1.0};
Point(91) = {0.037383, -0.733192, 0, 1.0};
Point(92) = {0.036728, -0.732049, 0, 1.0};
Point(93) = {0.035278, -0.731127, 0, 1.0};
Point(94) = {0.033067, -0.730433, 0, 1.0};
Point(95) = {0.030112, -0.729960, 0, 1.0};
Point(96) = {0.026454, -0.729705, 0, 1.0};
Point(97) = {0.022134, -0.729658, 0, 1.0};
Point(98) = {0.017196, -0.729810, 0, 1.0};
Point(99) = {0.011694, -0.730142, 0, 1.0};
Point(100) = {0.005684, -0.730634, 0, 1.0};
Point(101) = {-0.000771, -0.731261, 0, 1.0};
Point(102) = {-0.007615, -0.731993, 0, 1.0};
Point(103) = {-0.014774, -0.732800, 0, 1.0};
Point(104) = {-0.022185, -0.733650, 0, 1.0};
Point(105) = {-0.029830, -0.734546, 0, 1.0};
Point(106) = {-0.037569, -0.735493, 0, 1.0};
Point(107) = {-0.045314, -0.736469, 0, 1.0};
Point(108) = {-0.052983, -0.737451, 0, 1.0};
Point(109) = {-0.060490, -0.738418, 0, 1.0};
Point(110) = {-0.067755, -0.739356, 0, 1.0};
Point(111) = {-0.074703, -0.740249, 0, 1.0};
Point(112) = {-0.081249, -0.741090, 0, 1.0};
Point(113) = {-0.087327, -0.741866, 0, 1.0};
Point(114) = {-0.092863, -0.742571, 0, 1.0};
Point(115) = {-0.097801, -0.743199, 0, 1.0};
Point(116) = {-0.102076, -0.743744, 0, 1.0};
Point(117) = {-0.105644, -0.744199, 0, 1.0};
Point(118) = {-0.108467, -0.744560, 0, 1.0};
Point(119) = {-0.110503, -0.744820, 0, 1.0};
Point(120) = {-0.111736, -0.744980, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:101};
Spline(7) = {101:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html