SetFactory("OpenCASCADE");

Point(1) = {0.149376, 0.743376, 0, 1.0};
Point(2) = {0.148828, 0.743451, 0, 1.0};
Point(3) = {0.147182, 0.743674, 0, 1.0};
Point(4) = {0.144465, 0.744030, 0, 1.0};
Point(5) = {0.140700, 0.744507, 0, 1.0};
Point(6) = {0.135930, 0.745080, 0, 1.0};
Point(7) = {0.130201, 0.745724, 0, 1.0};
Point(8) = {0.123576, 0.746413, 0, 1.0};
Point(9) = {0.116131, 0.747114, 0, 1.0};
Point(10) = {0.107938, 0.747797, 0, 1.0};
Point(11) = {0.099096, 0.748435, 0, 1.0};
Point(12) = {0.089696, 0.748999, 0, 1.0};
Point(13) = {0.079845, 0.749461, 0, 1.0};
Point(14) = {0.069646, 0.749797, 0, 1.0};
Point(15) = {0.059217, 0.749984, 0, 1.0};
Point(16) = {0.048673, 0.750000, 0, 1.0};
Point(17) = {0.038134, 0.749828, 0, 1.0};
Point(18) = {0.027711, 0.749452, 0, 1.0};
Point(19) = {0.017446, 0.748803, 0, 1.0};
Point(20) = {0.007550, 0.747857, 0, 1.0};
Point(21) = {-0.001862, 0.746625, 0, 1.0};
Point(22) = {-0.010678, 0.745134, 0, 1.0};
Point(23) = {-0.018802, 0.743420, 0, 1.0};
Point(24) = {-0.026130, 0.741529, 0, 1.0};
Point(25) = {-0.032590, 0.739507, 0, 1.0};
Point(26) = {-0.038104, 0.737413, 0, 1.0};
Point(27) = {-0.042616, 0.735303, 0, 1.0};
Point(28) = {-0.046093, 0.733224, 0, 1.0};
Point(29) = {-0.048488, 0.731224, 0, 1.0};
Point(30) = {-0.049793, 0.729335, 0, 1.0};
Point(31) = {-0.050000, 0.727590, 0, 1.0};
Point(32) = {-0.049127, 0.726066, 0, 1.0};
Point(33) = {-0.047194, 0.724837, 0, 1.0};
Point(34) = {-0.044246, 0.723910, 0, 1.0};
Point(35) = {-0.040306, 0.723279, 0, 1.0};
Point(36) = {-0.035427, 0.722939, 0, 1.0};
Point(37) = {-0.029669, 0.722878, 0, 1.0};
Point(38) = {-0.023084, 0.723080, 0, 1.0};
Point(39) = {-0.015748, 0.723523, 0, 1.0};
Point(40) = {-0.007735, 0.724179, 0, 1.0};
Point(41) = {0.000872, 0.725015, 0, 1.0};
Point(42) = {0.009997, 0.725990, 0, 1.0};
Point(43) = {0.019542, 0.727067, 0, 1.0};
Point(44) = {0.029424, 0.728201, 0, 1.0};
Point(45) = {0.039617, 0.729395, 0, 1.0};
Point(46) = {0.049936, 0.730657, 0, 1.0};
Point(47) = {0.060263, 0.731959, 0, 1.0};
Point(48) = {0.070488, 0.733268, 0, 1.0};
Point(49) = {0.080497, 0.734558, 0, 1.0};
Point(50) = {0.090185, 0.735808, 0, 1.0};
Point(51) = {0.099448, 0.736999, 0, 1.0};
Point(52) = {0.108176, 0.738120, 0, 1.0};
Point(53) = {0.116280, 0.739154, 0, 1.0};
Point(54) = {0.123661, 0.740094, 0, 1.0};
Point(55) = {0.130245, 0.740932, 0, 1.0};
Point(56) = {0.135946, 0.741659, 0, 1.0};
Point(57) = {0.140703, 0.742266, 0, 1.0};
Point(58) = {0.144466, 0.742747, 0, 1.0};
Point(59) = {0.147181, 0.743094, 0, 1.0};
Point(60) = {0.148826, 0.743306, 0, 1.0};
Point(61) = {-0.149376, -0.743376, 0, 1.0};
Point(62) = {-0.148828, -0.743451, 0, 1.0};
Point(63) = {-0.147182, -0.743674, 0, 1.0};
Point(64) = {-0.144465, -0.744030, 0, 1.0};
Point(65) = {-0.140700, -0.744507, 0, 1.0};
Point(66) = {-0.135930, -0.745080, 0, 1.0};
Point(67) = {-0.130201, -0.745724, 0, 1.0};
Point(68) = {-0.123576, -0.746413, 0, 1.0};
Point(69) = {-0.116131, -0.747114, 0, 1.0};
Point(70) = {-0.107938, -0.747797, 0, 1.0};
Point(71) = {-0.099096, -0.748435, 0, 1.0};
Point(72) = {-0.089696, -0.748999, 0, 1.0};
Point(73) = {-0.079845, -0.749461, 0, 1.0};
Point(74) = {-0.069646, -0.749797, 0, 1.0};
Point(75) = {-0.059217, -0.749984, 0, 1.0};
Point(76) = {-0.048673, -0.750000, 0, 1.0};
Point(77) = {-0.038134, -0.749828, 0, 1.0};
Point(78) = {-0.027711, -0.749452, 0, 1.0};
Point(79) = {-0.017446, -0.748803, 0, 1.0};
Point(80) = {-0.007550, -0.747857, 0, 1.0};
Point(81) = {0.001862, -0.746625, 0, 1.0};
Point(82) = {0.010678, -0.745134, 0, 1.0};
Point(83) = {0.018802, -0.743420, 0, 1.0};
Point(84) = {0.026130, -0.741529, 0, 1.0};
Point(85) = {0.032590, -0.739507, 0, 1.0};
Point(86) = {0.038104, -0.737413, 0, 1.0};
Point(87) = {0.042616, -0.735303, 0, 1.0};
Point(88) = {0.046093, -0.733224, 0, 1.0};
Point(89) = {0.048488, -0.731224, 0, 1.0};
Point(90) = {0.049793, -0.729335, 0, 1.0};
Point(91) = {0.050000, -0.727590, 0, 1.0};
Point(92) = {0.049127, -0.726066, 0, 1.0};
Point(93) = {0.047194, -0.724837, 0, 1.0};
Point(94) = {0.044246, -0.723910, 0, 1.0};
Point(95) = {0.040306, -0.723279, 0, 1.0};
Point(96) = {0.035427, -0.722939, 0, 1.0};
Point(97) = {0.029669, -0.722878, 0, 1.0};
Point(98) = {0.023084, -0.723080, 0, 1.0};
Point(99) = {0.015748, -0.723523, 0, 1.0};
Point(100) = {0.007735, -0.724179, 0, 1.0};
Point(101) = {-0.000872, -0.725015, 0, 1.0};
Point(102) = {-0.009997, -0.725990, 0, 1.0};
Point(103) = {-0.019542, -0.727067, 0, 1.0};
Point(104) = {-0.029424, -0.728201, 0, 1.0};
Point(105) = {-0.039617, -0.729395, 0, 1.0};
Point(106) = {-0.049936, -0.730657, 0, 1.0};
Point(107) = {-0.060263, -0.731959, 0, 1.0};
Point(108) = {-0.070488, -0.733268, 0, 1.0};
Point(109) = {-0.080497, -0.734558, 0, 1.0};
Point(110) = {-0.090185, -0.735808, 0, 1.0};
Point(111) = {-0.099448, -0.736999, 0, 1.0};
Point(112) = {-0.108176, -0.738120, 0, 1.0};
Point(113) = {-0.116280, -0.739154, 0, 1.0};
Point(114) = {-0.123661, -0.740094, 0, 1.0};
Point(115) = {-0.130245, -0.740932, 0, 1.0};
Point(116) = {-0.135946, -0.741659, 0, 1.0};
Point(117) = {-0.140703, -0.742266, 0, 1.0};
Point(118) = {-0.144466, -0.742747, 0, 1.0};
Point(119) = {-0.147181, -0.743094, 0, 1.0};
Point(120) = {-0.148826, -0.743306, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:101};
Spline(7) = {101:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html