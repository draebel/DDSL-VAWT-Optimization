SetFactory("OpenCASCADE");

Point(1) = {0.074688, 0.746688, 0, 1.0};
Point(2) = {0.074414, 0.746725, 0, 1.0};
Point(3) = {0.073591, 0.746837, 0, 1.0};
Point(4) = {0.072233, 0.747015, 0, 1.0};
Point(5) = {0.070350, 0.747253, 0, 1.0};
Point(6) = {0.067965, 0.747540, 0, 1.0};
Point(7) = {0.065100, 0.747862, 0, 1.0};
Point(8) = {0.061788, 0.748207, 0, 1.0};
Point(9) = {0.058066, 0.748557, 0, 1.0};
Point(10) = {0.053969, 0.748898, 0, 1.0};
Point(11) = {0.049548, 0.749218, 0, 1.0};
Point(12) = {0.044848, 0.749499, 0, 1.0};
Point(13) = {0.039922, 0.749730, 0, 1.0};
Point(14) = {0.034823, 0.749898, 0, 1.0};
Point(15) = {0.029609, 0.749992, 0, 1.0};
Point(16) = {0.024336, 0.750000, 0, 1.0};
Point(17) = {0.019067, 0.749914, 0, 1.0};
Point(18) = {0.013855, 0.749726, 0, 1.0};
Point(19) = {0.008723, 0.749402, 0, 1.0};
Point(20) = {0.003775, 0.748929, 0, 1.0};
Point(21) = {-0.000931, 0.748312, 0, 1.0};
Point(22) = {-0.005339, 0.747567, 0, 1.0};
Point(23) = {-0.009401, 0.746710, 0, 1.0};
Point(24) = {-0.013065, 0.745765, 0, 1.0};
Point(25) = {-0.016295, 0.744754, 0, 1.0};
Point(26) = {-0.019052, 0.743707, 0, 1.0};
Point(27) = {-0.021308, 0.742651, 0, 1.0};
Point(28) = {-0.023046, 0.741612, 0, 1.0};
Point(29) = {-0.024244, 0.740612, 0, 1.0};
Point(30) = {-0.024897, 0.739668, 0, 1.0};
Point(31) = {-0.025000, 0.738795, 0, 1.0};
Point(32) = {-0.024563, 0.738033, 0, 1.0};
Point(33) = {-0.023597, 0.737418, 0, 1.0};
Point(34) = {-0.022123, 0.736955, 0, 1.0};
Point(35) = {-0.020153, 0.736640, 0, 1.0};
Point(36) = {-0.017714, 0.736470, 0, 1.0};
Point(37) = {-0.014834, 0.736439, 0, 1.0};
Point(38) = {-0.011542, 0.736540, 0, 1.0};
Point(39) = {-0.007874, 0.736761, 0, 1.0};
Point(40) = {-0.003867, 0.737090, 0, 1.0};
Point(41) = {0.000436, 0.737508, 0, 1.0};
Point(42) = {0.004999, 0.737995, 0, 1.0};
Point(43) = {0.009771, 0.738534, 0, 1.0};
Point(44) = {0.014712, 0.739100, 0, 1.0};
Point(45) = {0.019809, 0.739697, 0, 1.0};
Point(46) = {0.024968, 0.740329, 0, 1.0};
Point(47) = {0.030132, 0.740979, 0, 1.0};
Point(48) = {0.035244, 0.741634, 0, 1.0};
Point(49) = {0.040249, 0.742279, 0, 1.0};
Point(50) = {0.045092, 0.742904, 0, 1.0};
Point(51) = {0.049724, 0.743500, 0, 1.0};
Point(52) = {0.054088, 0.744060, 0, 1.0};
Point(53) = {0.058140, 0.744577, 0, 1.0};
Point(54) = {0.061830, 0.745047, 0, 1.0};
Point(55) = {0.065123, 0.745466, 0, 1.0};
Point(56) = {0.067973, 0.745829, 0, 1.0};
Point(57) = {0.070351, 0.746133, 0, 1.0};
Point(58) = {0.072233, 0.746373, 0, 1.0};
Point(59) = {0.073591, 0.746547, 0, 1.0};
Point(60) = {0.074413, 0.746653, 0, 1.0};
Point(61) = {-0.074688, -0.746688, 0, 1.0};
Point(62) = {-0.074414, -0.746725, 0, 1.0};
Point(63) = {-0.073591, -0.746837, 0, 1.0};
Point(64) = {-0.072233, -0.747015, 0, 1.0};
Point(65) = {-0.070350, -0.747253, 0, 1.0};
Point(66) = {-0.067965, -0.747540, 0, 1.0};
Point(67) = {-0.065100, -0.747862, 0, 1.0};
Point(68) = {-0.061788, -0.748207, 0, 1.0};
Point(69) = {-0.058066, -0.748557, 0, 1.0};
Point(70) = {-0.053969, -0.748898, 0, 1.0};
Point(71) = {-0.049548, -0.749218, 0, 1.0};
Point(72) = {-0.044848, -0.749499, 0, 1.0};
Point(73) = {-0.039922, -0.749730, 0, 1.0};
Point(74) = {-0.034823, -0.749898, 0, 1.0};
Point(75) = {-0.029609, -0.749992, 0, 1.0};
Point(76) = {-0.024336, -0.750000, 0, 1.0};
Point(77) = {-0.019067, -0.749914, 0, 1.0};
Point(78) = {-0.013855, -0.749726, 0, 1.0};
Point(79) = {-0.008723, -0.749402, 0, 1.0};
Point(80) = {-0.003775, -0.748929, 0, 1.0};
Point(81) = {0.000931, -0.748312, 0, 1.0};
Point(82) = {0.005339, -0.747567, 0, 1.0};
Point(83) = {0.009401, -0.746710, 0, 1.0};
Point(84) = {0.013065, -0.745765, 0, 1.0};
Point(85) = {0.016295, -0.744754, 0, 1.0};
Point(86) = {0.019052, -0.743707, 0, 1.0};
Point(87) = {0.021308, -0.742651, 0, 1.0};
Point(88) = {0.023046, -0.741612, 0, 1.0};
Point(89) = {0.024244, -0.740612, 0, 1.0};
Point(90) = {0.024897, -0.739668, 0, 1.0};
Point(91) = {0.025000, -0.738795, 0, 1.0};
Point(92) = {0.024563, -0.738033, 0, 1.0};
Point(93) = {0.023597, -0.737418, 0, 1.0};
Point(94) = {0.022123, -0.736955, 0, 1.0};
Point(95) = {0.020153, -0.736640, 0, 1.0};
Point(96) = {0.017714, -0.736470, 0, 1.0};
Point(97) = {0.014834, -0.736439, 0, 1.0};
Point(98) = {0.011542, -0.736540, 0, 1.0};
Point(99) = {0.007874, -0.736761, 0, 1.0};
Point(100) = {0.003867, -0.737090, 0, 1.0};
Point(101) = {-0.000436, -0.737508, 0, 1.0};
Point(102) = {-0.004999, -0.737995, 0, 1.0};
Point(103) = {-0.009771, -0.738534, 0, 1.0};
Point(104) = {-0.014712, -0.739100, 0, 1.0};
Point(105) = {-0.019809, -0.739697, 0, 1.0};
Point(106) = {-0.024968, -0.740329, 0, 1.0};
Point(107) = {-0.030132, -0.740979, 0, 1.0};
Point(108) = {-0.035244, -0.741634, 0, 1.0};
Point(109) = {-0.040249, -0.742279, 0, 1.0};
Point(110) = {-0.045092, -0.742904, 0, 1.0};
Point(111) = {-0.049724, -0.743500, 0, 1.0};
Point(112) = {-0.054088, -0.744060, 0, 1.0};
Point(113) = {-0.058140, -0.744577, 0, 1.0};
Point(114) = {-0.061830, -0.745047, 0, 1.0};
Point(115) = {-0.065123, -0.745466, 0, 1.0};
Point(116) = {-0.067973, -0.745829, 0, 1.0};
Point(117) = {-0.070351, -0.746133, 0, 1.0};
Point(118) = {-0.072233, -0.746373, 0, 1.0};
Point(119) = {-0.073591, -0.746547, 0, 1.0};
Point(120) = {-0.074413, -0.746653, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:41};
Spline(3) = {41:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:101};
Spline(7) = {101:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html