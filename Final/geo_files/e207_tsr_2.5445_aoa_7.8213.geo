SetFactory("OpenCASCADE");

Point(1) = {0.074070, 0.731554, 0, 1.0};
Point(2) = {0.073726, 0.731646, 0, 1.0};
Point(3) = {0.072735, 0.731941, 0, 1.0};
Point(4) = {0.071175, 0.732445, 0, 1.0};
Point(5) = {0.069107, 0.733125, 0, 1.0};
Point(6) = {0.066562, 0.733934, 0, 1.0};
Point(7) = {0.063549, 0.734857, 0, 1.0};
Point(8) = {0.060107, 0.735894, 0, 1.0};
Point(9) = {0.056283, 0.737036, 0, 1.0};
Point(10) = {0.052136, 0.738267, 0, 1.0};
Point(11) = {0.047721, 0.739566, 0, 1.0};
Point(12) = {0.043098, 0.740910, 0, 1.0};
Point(13) = {0.038328, 0.742276, 0, 1.0};
Point(14) = {0.033475, 0.743631, 0, 1.0};
Point(15) = {0.028598, 0.744945, 0, 1.0};
Point(16) = {0.023760, 0.746174, 0, 1.0};
Point(17) = {0.019002, 0.747269, 0, 1.0};
Point(18) = {0.014346, 0.748198, 0, 1.0};
Point(19) = {0.009819, 0.748942, 0, 1.0};
Point(20) = {0.005445, 0.749489, 0, 1.0};
Point(21) = {0.001244, 0.749839, 0, 1.0};
Point(22) = {-0.002764, 0.750000, 0, 1.0};
Point(23) = {-0.006546, 0.749996, 0, 1.0};
Point(24) = {-0.010062, 0.749842, 0, 1.0};
Point(25) = {-0.013276, 0.749551, 0, 1.0};
Point(26) = {-0.016152, 0.749138, 0, 1.0};
Point(27) = {-0.018663, 0.748614, 0, 1.0};
Point(28) = {-0.020784, 0.747998, 0, 1.0};
Point(29) = {-0.022496, 0.747309, 0, 1.0};
Point(30) = {-0.023781, 0.746574, 0, 1.0};
Point(31) = {-0.024626, 0.745831, 0, 1.0};
Point(32) = {-0.025002, 0.745147, 0, 1.0};
Point(33) = {-0.024784, 0.744500, 0, 1.0};
Point(34) = {-0.023963, 0.743804, 0, 1.0};
Point(35) = {-0.022635, 0.743071, 0, 1.0};
Point(36) = {-0.020803, 0.742331, 0, 1.0};
Point(37) = {-0.018482, 0.741593, 0, 1.0};
Point(38) = {-0.015691, 0.740864, 0, 1.0};
Point(39) = {-0.012456, 0.740151, 0, 1.0};
Point(40) = {-0.008809, 0.739458, 0, 1.0};
Point(41) = {-0.004786, 0.738787, 0, 1.0};
Point(42) = {-0.000435, 0.738143, 0, 1.0};
Point(43) = {0.004199, 0.737531, 0, 1.0};
Point(44) = {0.009062, 0.736963, 0, 1.0};
Point(45) = {0.014116, 0.736456, 0, 1.0};
Point(46) = {0.019331, 0.736000, 0, 1.0};
Point(47) = {0.024652, 0.735572, 0, 1.0};
Point(48) = {0.030010, 0.735158, 0, 1.0};
Point(49) = {0.035334, 0.734753, 0, 1.0};
Point(50) = {0.040553, 0.734354, 0, 1.0};
Point(51) = {0.045600, 0.733962, 0, 1.0};
Point(52) = {0.050408, 0.733580, 0, 1.0};
Point(53) = {0.054913, 0.733213, 0, 1.0};
Point(54) = {0.059057, 0.732865, 0, 1.0};
Point(55) = {0.062781, 0.732544, 0, 1.0};
Point(56) = {0.066034, 0.732264, 0, 1.0};
Point(57) = {0.068786, 0.732038, 0, 1.0};
Point(58) = {0.071014, 0.731864, 0, 1.0};
Point(59) = {0.072677, 0.731719, 0, 1.0};
Point(60) = {0.073716, 0.731602, 0, 1.0};
Point(61) = {-0.074070, -0.731554, 0, 1.0};
Point(62) = {-0.073726, -0.731646, 0, 1.0};
Point(63) = {-0.072735, -0.731941, 0, 1.0};
Point(64) = {-0.071175, -0.732445, 0, 1.0};
Point(65) = {-0.069107, -0.733125, 0, 1.0};
Point(66) = {-0.066562, -0.733934, 0, 1.0};
Point(67) = {-0.063549, -0.734857, 0, 1.0};
Point(68) = {-0.060107, -0.735894, 0, 1.0};
Point(69) = {-0.056283, -0.737036, 0, 1.0};
Point(70) = {-0.052136, -0.738267, 0, 1.0};
Point(71) = {-0.047721, -0.739566, 0, 1.0};
Point(72) = {-0.043098, -0.740910, 0, 1.0};
Point(73) = {-0.038328, -0.742276, 0, 1.0};
Point(74) = {-0.033475, -0.743631, 0, 1.0};
Point(75) = {-0.028598, -0.744945, 0, 1.0};
Point(76) = {-0.023760, -0.746174, 0, 1.0};
Point(77) = {-0.019002, -0.747269, 0, 1.0};
Point(78) = {-0.014346, -0.748198, 0, 1.0};
Point(79) = {-0.009819, -0.748942, 0, 1.0};
Point(80) = {-0.005445, -0.749489, 0, 1.0};
Point(81) = {-0.001244, -0.749839, 0, 1.0};
Point(82) = {0.002764, -0.750000, 0, 1.0};
Point(83) = {0.006546, -0.749996, 0, 1.0};
Point(84) = {0.010062, -0.749842, 0, 1.0};
Point(85) = {0.013276, -0.749551, 0, 1.0};
Point(86) = {0.016152, -0.749138, 0, 1.0};
Point(87) = {0.018663, -0.748614, 0, 1.0};
Point(88) = {0.020784, -0.747998, 0, 1.0};
Point(89) = {0.022496, -0.747309, 0, 1.0};
Point(90) = {0.023781, -0.746574, 0, 1.0};
Point(91) = {0.024626, -0.745831, 0, 1.0};
Point(92) = {0.025002, -0.745147, 0, 1.0};
Point(93) = {0.024784, -0.744500, 0, 1.0};
Point(94) = {0.023963, -0.743804, 0, 1.0};
Point(95) = {0.022635, -0.743071, 0, 1.0};
Point(96) = {0.020803, -0.742331, 0, 1.0};
Point(97) = {0.018482, -0.741593, 0, 1.0};
Point(98) = {0.015691, -0.740864, 0, 1.0};
Point(99) = {0.012456, -0.740151, 0, 1.0};
Point(100) = {0.008809, -0.739458, 0, 1.0};
Point(101) = {0.004786, -0.738787, 0, 1.0};
Point(102) = {0.000435, -0.738143, 0, 1.0};
Point(103) = {-0.004199, -0.737531, 0, 1.0};
Point(104) = {-0.009062, -0.736963, 0, 1.0};
Point(105) = {-0.014116, -0.736456, 0, 1.0};
Point(106) = {-0.019331, -0.736000, 0, 1.0};
Point(107) = {-0.024652, -0.735572, 0, 1.0};
Point(108) = {-0.030010, -0.735158, 0, 1.0};
Point(109) = {-0.035334, -0.734753, 0, 1.0};
Point(110) = {-0.040553, -0.734354, 0, 1.0};
Point(111) = {-0.045600, -0.733962, 0, 1.0};
Point(112) = {-0.050408, -0.733580, 0, 1.0};
Point(113) = {-0.054913, -0.733213, 0, 1.0};
Point(114) = {-0.059057, -0.732865, 0, 1.0};
Point(115) = {-0.062781, -0.732544, 0, 1.0};
Point(116) = {-0.066034, -0.732264, 0, 1.0};
Point(117) = {-0.068786, -0.732038, 0, 1.0};
Point(118) = {-0.071014, -0.731864, 0, 1.0};
Point(119) = {-0.072677, -0.731719, 0, 1.0};
Point(120) = {-0.073716, -0.731602, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html