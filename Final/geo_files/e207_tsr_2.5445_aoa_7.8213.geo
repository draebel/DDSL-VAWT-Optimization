SetFactory("OpenCASCADE");

Point(1) = {0.074305, 0.722330, 0, 1.0};
Point(2) = {0.073790, 0.722469, 0, 1.0};
Point(3) = {0.072303, 0.722911, 0, 1.0};
Point(4) = {0.069963, 0.723667, 0, 1.0};
Point(5) = {0.066862, 0.724687, 0, 1.0};
Point(6) = {0.063044, 0.725902, 0, 1.0};
Point(7) = {0.058525, 0.727285, 0, 1.0};
Point(8) = {0.053361, 0.728841, 0, 1.0};
Point(9) = {0.047626, 0.730554, 0, 1.0};
Point(10) = {0.041405, 0.732400, 0, 1.0};
Point(11) = {0.034782, 0.734349, 0, 1.0};
Point(12) = {0.027848, 0.736366, 0, 1.0};
Point(13) = {0.020693, 0.738414, 0, 1.0};
Point(14) = {0.013413, 0.740447, 0, 1.0};
Point(15) = {0.006098, 0.742418, 0, 1.0};
Point(16) = {-0.001159, 0.744261, 0, 1.0};
Point(17) = {-0.008296, 0.745903, 0, 1.0};
Point(18) = {-0.015280, 0.747297, 0, 1.0};
Point(19) = {-0.022070, 0.748413, 0, 1.0};
Point(20) = {-0.028632, 0.749234, 0, 1.0};
Point(21) = {-0.034934, 0.749759, 0, 1.0};
Point(22) = {-0.040945, 0.750000, 0, 1.0};
Point(23) = {-0.046618, 0.749993, 0, 1.0};
Point(24) = {-0.051893, 0.749763, 0, 1.0};
Point(25) = {-0.056713, 0.749327, 0, 1.0};
Point(26) = {-0.061027, 0.748707, 0, 1.0};
Point(27) = {-0.064794, 0.747921, 0, 1.0};
Point(28) = {-0.067975, 0.746996, 0, 1.0};
Point(29) = {-0.070542, 0.745964, 0, 1.0};
Point(30) = {-0.072471, 0.744861, 0, 1.0};
Point(31) = {-0.073739, 0.743747, 0, 1.0};
Point(32) = {-0.074302, 0.742721, 0, 1.0};
Point(33) = {-0.073975, 0.741751, 0, 1.0};
Point(34) = {-0.072744, 0.740706, 0, 1.0};
Point(35) = {-0.070751, 0.739606, 0, 1.0};
Point(36) = {-0.068004, 0.738496, 0, 1.0};
Point(37) = {-0.064522, 0.737389, 0, 1.0};
Point(38) = {-0.060336, 0.736296, 0, 1.0};
Point(39) = {-0.055483, 0.735227, 0, 1.0};
Point(40) = {-0.050012, 0.734186, 0, 1.0};
Point(41) = {-0.043979, 0.733180, 0, 1.0};
Point(42) = {-0.037451, 0.732214, 0, 1.0};
Point(43) = {-0.030500, 0.731297, 0, 1.0};
Point(44) = {-0.023206, 0.730445, 0, 1.0};
Point(45) = {-0.015625, 0.729684, 0, 1.0};
Point(46) = {-0.007803, 0.729000, 0, 1.0};
Point(47) = {0.000179, 0.728358, 0, 1.0};
Point(48) = {0.008216, 0.727737, 0, 1.0};
Point(49) = {0.016201, 0.727129, 0, 1.0};
Point(50) = {0.024030, 0.726531, 0, 1.0};
Point(51) = {0.031600, 0.725943, 0, 1.0};
Point(52) = {0.038813, 0.725371, 0, 1.0};
Point(53) = {0.045571, 0.724819, 0, 1.0};
Point(54) = {0.051786, 0.724297, 0, 1.0};
Point(55) = {0.057372, 0.723816, 0, 1.0};
Point(56) = {0.062251, 0.723396, 0, 1.0};
Point(57) = {0.066379, 0.723057, 0, 1.0};
Point(58) = {0.069721, 0.722797, 0, 1.0};
Point(59) = {0.072217, 0.722578, 0, 1.0};
Point(60) = {0.073775, 0.722403, 0, 1.0};
Point(61) = {-0.074305, -0.722330, 0, 1.0};
Point(62) = {-0.073790, -0.722469, 0, 1.0};
Point(63) = {-0.072303, -0.722911, 0, 1.0};
Point(64) = {-0.069963, -0.723667, 0, 1.0};
Point(65) = {-0.066862, -0.724687, 0, 1.0};
Point(66) = {-0.063044, -0.725902, 0, 1.0};
Point(67) = {-0.058525, -0.727285, 0, 1.0};
Point(68) = {-0.053361, -0.728841, 0, 1.0};
Point(69) = {-0.047626, -0.730554, 0, 1.0};
Point(70) = {-0.041405, -0.732400, 0, 1.0};
Point(71) = {-0.034782, -0.734349, 0, 1.0};
Point(72) = {-0.027848, -0.736366, 0, 1.0};
Point(73) = {-0.020693, -0.738414, 0, 1.0};
Point(74) = {-0.013413, -0.740447, 0, 1.0};
Point(75) = {-0.006098, -0.742418, 0, 1.0};
Point(76) = {0.001159, -0.744261, 0, 1.0};
Point(77) = {0.008296, -0.745903, 0, 1.0};
Point(78) = {0.015280, -0.747297, 0, 1.0};
Point(79) = {0.022070, -0.748413, 0, 1.0};
Point(80) = {0.028632, -0.749234, 0, 1.0};
Point(81) = {0.034934, -0.749759, 0, 1.0};
Point(82) = {0.040945, -0.750000, 0, 1.0};
Point(83) = {0.046618, -0.749993, 0, 1.0};
Point(84) = {0.051893, -0.749763, 0, 1.0};
Point(85) = {0.056713, -0.749327, 0, 1.0};
Point(86) = {0.061027, -0.748707, 0, 1.0};
Point(87) = {0.064794, -0.747921, 0, 1.0};
Point(88) = {0.067975, -0.746996, 0, 1.0};
Point(89) = {0.070542, -0.745964, 0, 1.0};
Point(90) = {0.072471, -0.744861, 0, 1.0};
Point(91) = {0.073739, -0.743747, 0, 1.0};
Point(92) = {0.074302, -0.742721, 0, 1.0};
Point(93) = {0.073975, -0.741751, 0, 1.0};
Point(94) = {0.072744, -0.740706, 0, 1.0};
Point(95) = {0.070751, -0.739606, 0, 1.0};
Point(96) = {0.068004, -0.738496, 0, 1.0};
Point(97) = {0.064522, -0.737389, 0, 1.0};
Point(98) = {0.060336, -0.736296, 0, 1.0};
Point(99) = {0.055483, -0.735227, 0, 1.0};
Point(100) = {0.050012, -0.734186, 0, 1.0};
Point(101) = {0.043979, -0.733180, 0, 1.0};
Point(102) = {0.037451, -0.732214, 0, 1.0};
Point(103) = {0.030500, -0.731297, 0, 1.0};
Point(104) = {0.023206, -0.730445, 0, 1.0};
Point(105) = {0.015625, -0.729684, 0, 1.0};
Point(106) = {0.007803, -0.729000, 0, 1.0};
Point(107) = {-0.000179, -0.728358, 0, 1.0};
Point(108) = {-0.008216, -0.727737, 0, 1.0};
Point(109) = {-0.016201, -0.727129, 0, 1.0};
Point(110) = {-0.024030, -0.726531, 0, 1.0};
Point(111) = {-0.031600, -0.725943, 0, 1.0};
Point(112) = {-0.038813, -0.725371, 0, 1.0};
Point(113) = {-0.045571, -0.724819, 0, 1.0};
Point(114) = {-0.051786, -0.724297, 0, 1.0};
Point(115) = {-0.057372, -0.723816, 0, 1.0};
Point(116) = {-0.062251, -0.723396, 0, 1.0};
Point(117) = {-0.066379, -0.723057, 0, 1.0};
Point(118) = {-0.069721, -0.722797, 0, 1.0};
Point(119) = {-0.072217, -0.722578, 0, 1.0};
Point(120) = {-0.073775, -0.722403, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html