SetFactory("OpenCASCADE");

Point(1) = {0.147467, 0.712342, 0, 1.0};
Point(2) = {0.146777, 0.712411, 0, 1.0};
Point(3) = {0.144719, 0.712650, 0, 1.0};
Point(4) = {0.141330, 0.713144, 0, 1.0};
Point(5) = {0.136693, 0.713972, 0, 1.0};
Point(6) = {0.130930, 0.715172, 0, 1.0};
Point(7) = {0.124177, 0.716737, 0, 1.0};
Point(8) = {0.116554, 0.718653, 0, 1.0};
Point(9) = {0.108197, 0.720889, 0, 1.0};
Point(10) = {0.099239, 0.723408, 0, 1.0};
Point(11) = {0.089823, 0.726161, 0, 1.0};
Point(12) = {0.080094, 0.729088, 0, 1.0};
Point(13) = {0.070191, 0.732115, 0, 1.0};
Point(14) = {0.060258, 0.735160, 0, 1.0};
Point(15) = {0.050430, 0.738109, 0, 1.0};
Point(16) = {0.040781, 0.740830, 0, 1.0};
Point(17) = {0.031346, 0.743241, 0, 1.0};
Point(18) = {0.022166, 0.745294, 0, 1.0};
Point(19) = {0.013274, 0.746962, 0, 1.0};
Point(20) = {0.004708, 0.748239, 0, 1.0};
Point(21) = {-0.003491, 0.749143, 0, 1.0};
Point(22) = {-0.011257, 0.749721, 0, 1.0};
Point(23) = {-0.018503, 0.750000, 0, 1.0};
Point(24) = {-0.025146, 0.749996, 0, 1.0};
Point(25) = {-0.031116, 0.749728, 0, 1.0};
Point(26) = {-0.036352, 0.749214, 0, 1.0};
Point(27) = {-0.040803, 0.748479, 0, 1.0};
Point(28) = {-0.044428, 0.747552, 0, 1.0};
Point(29) = {-0.047191, 0.746481, 0, 1.0};
Point(30) = {-0.049055, 0.745328, 0, 1.0};
Point(31) = {-0.049970, 0.744211, 0, 1.0};
Point(32) = {-0.049704, 0.743079, 0, 1.0};
Point(33) = {-0.048252, 0.741764, 0, 1.0};
Point(34) = {-0.045806, 0.740301, 0, 1.0};
Point(35) = {-0.042372, 0.738761, 0, 1.0};
Point(36) = {-0.037975, 0.737169, 0, 1.0};
Point(37) = {-0.032645, 0.735547, 0, 1.0};
Point(38) = {-0.026426, 0.733907, 0, 1.0};
Point(39) = {-0.019379, 0.732258, 0, 1.0};
Point(40) = {-0.011569, 0.730612, 0, 1.0};
Point(41) = {-0.003081, 0.728975, 0, 1.0};
Point(42) = {0.005993, 0.727355, 0, 1.0};
Point(43) = {0.015555, 0.725763, 0, 1.0};
Point(44) = {0.025498, 0.724206, 0, 1.0};
Point(45) = {0.035708, 0.722697, 0, 1.0};
Point(46) = {0.046073, 0.721244, 0, 1.0};
Point(47) = {0.056473, 0.719861, 0, 1.0};
Point(48) = {0.066793, 0.718557, 0, 1.0};
Point(49) = {0.076913, 0.717346, 0, 1.0};
Point(50) = {0.086719, 0.716238, 0, 1.0};
Point(51) = {0.096104, 0.715242, 0, 1.0};
Point(52) = {0.104958, 0.714368, 0, 1.0};
Point(53) = {0.113179, 0.713622, 0, 1.0};
Point(54) = {0.120680, 0.713015, 0, 1.0};
Point(55) = {0.127369, 0.712548, 0, 1.0};
Point(56) = {0.133172, 0.712229, 0, 1.0};
Point(57) = {0.138019, 0.712076, 0, 1.0};
Point(58) = {0.141910, 0.712111, 0, 1.0};
Point(59) = {0.144868, 0.712243, 0, 1.0};
Point(60) = {0.146790, 0.712327, 0, 1.0};
Point(61) = {-0.147467, -0.712342, 0, 1.0};
Point(62) = {-0.146777, -0.712411, 0, 1.0};
Point(63) = {-0.144719, -0.712650, 0, 1.0};
Point(64) = {-0.141330, -0.713144, 0, 1.0};
Point(65) = {-0.136693, -0.713972, 0, 1.0};
Point(66) = {-0.130930, -0.715172, 0, 1.0};
Point(67) = {-0.124177, -0.716737, 0, 1.0};
Point(68) = {-0.116554, -0.718653, 0, 1.0};
Point(69) = {-0.108197, -0.720889, 0, 1.0};
Point(70) = {-0.099239, -0.723408, 0, 1.0};
Point(71) = {-0.089823, -0.726161, 0, 1.0};
Point(72) = {-0.080094, -0.729088, 0, 1.0};
Point(73) = {-0.070191, -0.732115, 0, 1.0};
Point(74) = {-0.060258, -0.735160, 0, 1.0};
Point(75) = {-0.050430, -0.738109, 0, 1.0};
Point(76) = {-0.040781, -0.740830, 0, 1.0};
Point(77) = {-0.031346, -0.743241, 0, 1.0};
Point(78) = {-0.022166, -0.745294, 0, 1.0};
Point(79) = {-0.013274, -0.746962, 0, 1.0};
Point(80) = {-0.004708, -0.748239, 0, 1.0};
Point(81) = {0.003491, -0.749143, 0, 1.0};
Point(82) = {0.011257, -0.749721, 0, 1.0};
Point(83) = {0.018503, -0.750000, 0, 1.0};
Point(84) = {0.025146, -0.749996, 0, 1.0};
Point(85) = {0.031116, -0.749728, 0, 1.0};
Point(86) = {0.036352, -0.749214, 0, 1.0};
Point(87) = {0.040803, -0.748479, 0, 1.0};
Point(88) = {0.044428, -0.747552, 0, 1.0};
Point(89) = {0.047191, -0.746481, 0, 1.0};
Point(90) = {0.049055, -0.745328, 0, 1.0};
Point(91) = {0.049970, -0.744211, 0, 1.0};
Point(92) = {0.049704, -0.743079, 0, 1.0};
Point(93) = {0.048252, -0.741764, 0, 1.0};
Point(94) = {0.045806, -0.740301, 0, 1.0};
Point(95) = {0.042372, -0.738761, 0, 1.0};
Point(96) = {0.037975, -0.737169, 0, 1.0};
Point(97) = {0.032645, -0.735547, 0, 1.0};
Point(98) = {0.026426, -0.733907, 0, 1.0};
Point(99) = {0.019379, -0.732258, 0, 1.0};
Point(100) = {0.011569, -0.730612, 0, 1.0};
Point(101) = {0.003081, -0.728975, 0, 1.0};
Point(102) = {-0.005993, -0.727355, 0, 1.0};
Point(103) = {-0.015555, -0.725763, 0, 1.0};
Point(104) = {-0.025498, -0.724206, 0, 1.0};
Point(105) = {-0.035708, -0.722697, 0, 1.0};
Point(106) = {-0.046073, -0.721244, 0, 1.0};
Point(107) = {-0.056473, -0.719861, 0, 1.0};
Point(108) = {-0.066793, -0.718557, 0, 1.0};
Point(109) = {-0.076913, -0.717346, 0, 1.0};
Point(110) = {-0.086719, -0.716238, 0, 1.0};
Point(111) = {-0.096104, -0.715242, 0, 1.0};
Point(112) = {-0.104958, -0.714368, 0, 1.0};
Point(113) = {-0.113179, -0.713622, 0, 1.0};
Point(114) = {-0.120680, -0.713015, 0, 1.0};
Point(115) = {-0.127369, -0.712548, 0, 1.0};
Point(116) = {-0.133172, -0.712229, 0, 1.0};
Point(117) = {-0.138019, -0.712076, 0, 1.0};
Point(118) = {-0.141910, -0.712111, 0, 1.0};
Point(119) = {-0.144868, -0.712243, 0, 1.0};
Point(120) = {-0.146790, -0.712327, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html