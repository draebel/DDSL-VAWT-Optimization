SetFactory("OpenCASCADE");

Point(1) = {0.073733, 0.731171, 0, 1.0};
Point(2) = {0.073388, 0.731205, 0, 1.0};
Point(3) = {0.072359, 0.731325, 0, 1.0};
Point(4) = {0.070665, 0.731572, 0, 1.0};
Point(5) = {0.068346, 0.731986, 0, 1.0};
Point(6) = {0.065465, 0.732586, 0, 1.0};
Point(7) = {0.062088, 0.733369, 0, 1.0};
Point(8) = {0.058277, 0.734326, 0, 1.0};
Point(9) = {0.054099, 0.735445, 0, 1.0};
Point(10) = {0.049620, 0.736704, 0, 1.0};
Point(11) = {0.044911, 0.738081, 0, 1.0};
Point(12) = {0.040047, 0.739544, 0, 1.0};
Point(13) = {0.035096, 0.741058, 0, 1.0};
Point(14) = {0.030129, 0.742580, 0, 1.0};
Point(15) = {0.025215, 0.744054, 0, 1.0};
Point(16) = {0.020391, 0.745415, 0, 1.0};
Point(17) = {0.015673, 0.746621, 0, 1.0};
Point(18) = {0.011083, 0.747647, 0, 1.0};
Point(19) = {0.006637, 0.748481, 0, 1.0};
Point(20) = {0.002354, 0.749120, 0, 1.0};
Point(21) = {-0.001745, 0.749572, 0, 1.0};
Point(22) = {-0.005629, 0.749860, 0, 1.0};
Point(23) = {-0.009251, 0.750000, 0, 1.0};
Point(24) = {-0.012573, 0.749998, 0, 1.0};
Point(25) = {-0.015558, 0.749864, 0, 1.0};
Point(26) = {-0.018176, 0.749607, 0, 1.0};
Point(27) = {-0.020401, 0.749239, 0, 1.0};
Point(28) = {-0.022214, 0.748776, 0, 1.0};
Point(29) = {-0.023595, 0.748241, 0, 1.0};
Point(30) = {-0.024528, 0.747664, 0, 1.0};
Point(31) = {-0.024985, 0.747106, 0, 1.0};
Point(32) = {-0.024852, 0.746539, 0, 1.0};
Point(33) = {-0.024126, 0.745882, 0, 1.0};
Point(34) = {-0.022903, 0.745150, 0, 1.0};
Point(35) = {-0.021186, 0.744380, 0, 1.0};
Point(36) = {-0.018988, 0.743584, 0, 1.0};
Point(37) = {-0.016323, 0.742773, 0, 1.0};
Point(38) = {-0.013213, 0.741954, 0, 1.0};
Point(39) = {-0.009689, 0.741129, 0, 1.0};
Point(40) = {-0.005785, 0.740306, 0, 1.0};
Point(41) = {-0.001541, 0.739487, 0, 1.0};
Point(42) = {0.002996, 0.738677, 0, 1.0};
Point(43) = {0.007778, 0.737882, 0, 1.0};
Point(44) = {0.012749, 0.737103, 0, 1.0};
Point(45) = {0.017854, 0.736349, 0, 1.0};
Point(46) = {0.023036, 0.735622, 0, 1.0};
Point(47) = {0.028236, 0.734930, 0, 1.0};
Point(48) = {0.033396, 0.734278, 0, 1.0};
Point(49) = {0.038456, 0.733673, 0, 1.0};
Point(50) = {0.043360, 0.733119, 0, 1.0};
Point(51) = {0.048052, 0.732621, 0, 1.0};
Point(52) = {0.052479, 0.732184, 0, 1.0};
Point(53) = {0.056590, 0.731811, 0, 1.0};
Point(54) = {0.060340, 0.731507, 0, 1.0};
Point(55) = {0.063684, 0.731274, 0, 1.0};
Point(56) = {0.066586, 0.731114, 0, 1.0};
Point(57) = {0.069009, 0.731038, 0, 1.0};
Point(58) = {0.070955, 0.731056, 0, 1.0};
Point(59) = {0.072434, 0.731122, 0, 1.0};
Point(60) = {0.073395, 0.731164, 0, 1.0};
Point(61) = {-0.073733, -0.731171, 0, 1.0};
Point(62) = {-0.073388, -0.731205, 0, 1.0};
Point(63) = {-0.072359, -0.731325, 0, 1.0};
Point(64) = {-0.070665, -0.731572, 0, 1.0};
Point(65) = {-0.068346, -0.731986, 0, 1.0};
Point(66) = {-0.065465, -0.732586, 0, 1.0};
Point(67) = {-0.062088, -0.733369, 0, 1.0};
Point(68) = {-0.058277, -0.734326, 0, 1.0};
Point(69) = {-0.054099, -0.735445, 0, 1.0};
Point(70) = {-0.049620, -0.736704, 0, 1.0};
Point(71) = {-0.044911, -0.738081, 0, 1.0};
Point(72) = {-0.040047, -0.739544, 0, 1.0};
Point(73) = {-0.035096, -0.741058, 0, 1.0};
Point(74) = {-0.030129, -0.742580, 0, 1.0};
Point(75) = {-0.025215, -0.744054, 0, 1.0};
Point(76) = {-0.020391, -0.745415, 0, 1.0};
Point(77) = {-0.015673, -0.746621, 0, 1.0};
Point(78) = {-0.011083, -0.747647, 0, 1.0};
Point(79) = {-0.006637, -0.748481, 0, 1.0};
Point(80) = {-0.002354, -0.749120, 0, 1.0};
Point(81) = {0.001745, -0.749572, 0, 1.0};
Point(82) = {0.005629, -0.749860, 0, 1.0};
Point(83) = {0.009251, -0.750000, 0, 1.0};
Point(84) = {0.012573, -0.749998, 0, 1.0};
Point(85) = {0.015558, -0.749864, 0, 1.0};
Point(86) = {0.018176, -0.749607, 0, 1.0};
Point(87) = {0.020401, -0.749239, 0, 1.0};
Point(88) = {0.022214, -0.748776, 0, 1.0};
Point(89) = {0.023595, -0.748241, 0, 1.0};
Point(90) = {0.024528, -0.747664, 0, 1.0};
Point(91) = {0.024985, -0.747106, 0, 1.0};
Point(92) = {0.024852, -0.746539, 0, 1.0};
Point(93) = {0.024126, -0.745882, 0, 1.0};
Point(94) = {0.022903, -0.745150, 0, 1.0};
Point(95) = {0.021186, -0.744380, 0, 1.0};
Point(96) = {0.018988, -0.743584, 0, 1.0};
Point(97) = {0.016323, -0.742773, 0, 1.0};
Point(98) = {0.013213, -0.741954, 0, 1.0};
Point(99) = {0.009689, -0.741129, 0, 1.0};
Point(100) = {0.005785, -0.740306, 0, 1.0};
Point(101) = {0.001541, -0.739487, 0, 1.0};
Point(102) = {-0.002996, -0.738677, 0, 1.0};
Point(103) = {-0.007778, -0.737882, 0, 1.0};
Point(104) = {-0.012749, -0.737103, 0, 1.0};
Point(105) = {-0.017854, -0.736349, 0, 1.0};
Point(106) = {-0.023036, -0.735622, 0, 1.0};
Point(107) = {-0.028236, -0.734930, 0, 1.0};
Point(108) = {-0.033396, -0.734278, 0, 1.0};
Point(109) = {-0.038456, -0.733673, 0, 1.0};
Point(110) = {-0.043360, -0.733119, 0, 1.0};
Point(111) = {-0.048052, -0.732621, 0, 1.0};
Point(112) = {-0.052479, -0.732184, 0, 1.0};
Point(113) = {-0.056590, -0.731811, 0, 1.0};
Point(114) = {-0.060340, -0.731507, 0, 1.0};
Point(115) = {-0.063684, -0.731274, 0, 1.0};
Point(116) = {-0.066586, -0.731114, 0, 1.0};
Point(117) = {-0.069009, -0.731038, 0, 1.0};
Point(118) = {-0.070955, -0.731056, 0, 1.0};
Point(119) = {-0.072434, -0.731122, 0, 1.0};
Point(120) = {-0.073395, -0.731164, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html