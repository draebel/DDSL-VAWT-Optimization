SetFactory("OpenCASCADE");

Point(1) = {0.149702, 0.731865, 0, 1.0};
Point(2) = {0.148869, 0.731957, 0, 1.0};
Point(3) = {0.146467, 0.732381, 0, 1.0};
Point(4) = {0.142740, 0.733263, 0, 1.0};
Point(5) = {0.137952, 0.734580, 0, 1.0};
Point(6) = {0.132299, 0.736209, 0, 1.0};
Point(7) = {0.125886, 0.738014, 0, 1.0};
Point(8) = {0.118763, 0.739939, 0, 1.0};
Point(9) = {0.111071, 0.741957, 0, 1.0};
Point(10) = {0.102955, 0.743984, 0, 1.0};
Point(11) = {0.094547, 0.745916, 0, 1.0};
Point(12) = {0.085959, 0.747637, 0, 1.0};
Point(13) = {0.077293, 0.749009, 0, 1.0};
Point(14) = {0.068577, 0.749799, 0, 1.0};
Point(15) = {0.059569, 0.750000, 0, 1.0};
Point(16) = {0.050334, 0.749782, 0, 1.0};
Point(17) = {0.040975, 0.749202, 0, 1.0};
Point(18) = {0.031600, 0.748298, 0, 1.0};
Point(19) = {0.022307, 0.747105, 0, 1.0};
Point(20) = {0.013202, 0.745654, 0, 1.0};
Point(21) = {0.004380, 0.743977, 0, 1.0};
Point(22) = {-0.004055, 0.742107, 0, 1.0};
Point(23) = {-0.012016, 0.740078, 0, 1.0};
Point(24) = {-0.019410, 0.737923, 0, 1.0};
Point(25) = {-0.026158, 0.735678, 0, 1.0};
Point(26) = {-0.032184, 0.733380, 0, 1.0};
Point(27) = {-0.037420, 0.731069, 0, 1.0};
Point(28) = {-0.041809, 0.728785, 0, 1.0};
Point(29) = {-0.045297, 0.726571, 0, 1.0};
Point(30) = {-0.047855, 0.724481, 0, 1.0};
Point(31) = {-0.049434, 0.722591, 0, 1.0};
Point(32) = {-0.049946, 0.721432, 0, 1.0};
Point(33) = {-0.050000, 0.721080, 0, 1.0};
Point(34) = {-0.050001, 0.721024, 0, 1.0};
Point(35) = {-0.049998, 0.720920, 0, 1.0};
Point(36) = {-0.049971, 0.720775, 0, 1.0};
Point(37) = {-0.049910, 0.720638, 0, 1.0};
Point(38) = {-0.049819, 0.720498, 0, 1.0};
Point(39) = {-0.049566, 0.720212, 0, 1.0};
Point(40) = {-0.049160, 0.719867, 0, 1.0};
Point(41) = {-0.046983, 0.718662, 0, 1.0};
Point(42) = {-0.043665, 0.717485, 0, 1.0};
Point(43) = {-0.039232, 0.716350, 0, 1.0};
Point(44) = {-0.033756, 0.715239, 0, 1.0};
Point(45) = {-0.027314, 0.714140, 0, 1.0};
Point(46) = {-0.020002, 0.713014, 0, 1.0};
Point(47) = {-0.011978, 0.711854, 0, 1.0};
Point(48) = {-0.003372, 0.710630, 0, 1.0};
Point(49) = {0.005569, 0.709378, 0, 1.0};
Point(50) = {0.014672, 0.708099, 0, 1.0};
Point(51) = {0.023522, 0.707015, 0, 1.0};
Point(52) = {0.032106, 0.706592, 0, 1.0};
Point(53) = {0.040723, 0.706925, 0, 1.0};
Point(54) = {0.049345, 0.708032, 0, 1.0};
Point(55) = {0.058242, 0.709896, 0, 1.0};
Point(56) = {0.067419, 0.712252, 0, 1.0};
Point(57) = {0.076795, 0.714931, 0, 1.0};
Point(58) = {0.086276, 0.717781, 0, 1.0};
Point(59) = {0.095742, 0.720652, 0, 1.0};
Point(60) = {0.105048, 0.723396, 0, 1.0};
Point(61) = {0.114021, 0.725878, 0, 1.0};
Point(62) = {0.122461, 0.727985, 0, 1.0};
Point(63) = {0.130147, 0.729636, 0, 1.0};
Point(64) = {0.136840, 0.730797, 0, 1.0};
Point(65) = {0.142313, 0.731496, 0, 1.0};
Point(66) = {0.146369, 0.731815, 0, 1.0};
Point(67) = {0.148862, 0.731883, 0, 1.0};
Point(68) = {-0.149702, -0.731865, 0, 1.0};
Point(69) = {-0.148869, -0.731957, 0, 1.0};
Point(70) = {-0.146467, -0.732381, 0, 1.0};
Point(71) = {-0.142740, -0.733263, 0, 1.0};
Point(72) = {-0.137952, -0.734580, 0, 1.0};
Point(73) = {-0.132299, -0.736209, 0, 1.0};
Point(74) = {-0.125886, -0.738014, 0, 1.0};
Point(75) = {-0.118763, -0.739939, 0, 1.0};
Point(76) = {-0.111071, -0.741957, 0, 1.0};
Point(77) = {-0.102955, -0.743984, 0, 1.0};
Point(78) = {-0.094547, -0.745916, 0, 1.0};
Point(79) = {-0.085959, -0.747637, 0, 1.0};
Point(80) = {-0.077293, -0.749009, 0, 1.0};
Point(81) = {-0.068577, -0.749799, 0, 1.0};
Point(82) = {-0.059569, -0.750000, 0, 1.0};
Point(83) = {-0.050334, -0.749782, 0, 1.0};
Point(84) = {-0.040975, -0.749202, 0, 1.0};
Point(85) = {-0.031600, -0.748298, 0, 1.0};
Point(86) = {-0.022307, -0.747105, 0, 1.0};
Point(87) = {-0.013202, -0.745654, 0, 1.0};
Point(88) = {-0.004380, -0.743977, 0, 1.0};
Point(89) = {0.004055, -0.742107, 0, 1.0};
Point(90) = {0.012016, -0.740078, 0, 1.0};
Point(91) = {0.019410, -0.737923, 0, 1.0};
Point(92) = {0.026158, -0.735678, 0, 1.0};
Point(93) = {0.032184, -0.733380, 0, 1.0};
Point(94) = {0.037420, -0.731069, 0, 1.0};
Point(95) = {0.041809, -0.728785, 0, 1.0};
Point(96) = {0.045297, -0.726571, 0, 1.0};
Point(97) = {0.047855, -0.724481, 0, 1.0};
Point(98) = {0.049434, -0.722591, 0, 1.0};
Point(99) = {0.049946, -0.721432, 0, 1.0};
Point(100) = {0.050000, -0.721080, 0, 1.0};
Point(101) = {0.050001, -0.721024, 0, 1.0};
Point(102) = {0.049998, -0.720920, 0, 1.0};
Point(103) = {0.049971, -0.720775, 0, 1.0};
Point(104) = {0.049910, -0.720638, 0, 1.0};
Point(105) = {0.049819, -0.720498, 0, 1.0};
Point(106) = {0.049566, -0.720212, 0, 1.0};
Point(107) = {0.049160, -0.719867, 0, 1.0};
Point(108) = {0.046983, -0.718662, 0, 1.0};
Point(109) = {0.043665, -0.717485, 0, 1.0};
Point(110) = {0.039232, -0.716350, 0, 1.0};
Point(111) = {0.033756, -0.715239, 0, 1.0};
Point(112) = {0.027314, -0.714140, 0, 1.0};
Point(113) = {0.020002, -0.713014, 0, 1.0};
Point(114) = {0.011978, -0.711854, 0, 1.0};
Point(115) = {0.003372, -0.710630, 0, 1.0};
Point(116) = {-0.005569, -0.709378, 0, 1.0};
Point(117) = {-0.014672, -0.708099, 0, 1.0};
Point(118) = {-0.023522, -0.707015, 0, 1.0};
Point(119) = {-0.032106, -0.706592, 0, 1.0};
Point(120) = {-0.040723, -0.706925, 0, 1.0};
Point(121) = {-0.049345, -0.708032, 0, 1.0};
Point(122) = {-0.058242, -0.709896, 0, 1.0};
Point(123) = {-0.067419, -0.712252, 0, 1.0};
Point(124) = {-0.076795, -0.714931, 0, 1.0};
Point(125) = {-0.086276, -0.717781, 0, 1.0};
Point(126) = {-0.095742, -0.720652, 0, 1.0};
Point(127) = {-0.105048, -0.723396, 0, 1.0};
Point(128) = {-0.114021, -0.725878, 0, 1.0};
Point(129) = {-0.122461, -0.727985, 0, 1.0};
Point(130) = {-0.130147, -0.729636, 0, 1.0};
Point(131) = {-0.136840, -0.730797, 0, 1.0};
Point(132) = {-0.142313, -0.731496, 0, 1.0};
Point(133) = {-0.146369, -0.731815, 0, 1.0};
Point(134) = {-0.148862, -0.731883, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html