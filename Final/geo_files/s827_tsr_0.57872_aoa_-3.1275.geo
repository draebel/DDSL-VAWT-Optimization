SetFactory("OpenCASCADE");

Point(1) = {0.112331, 0.736398, 0, 1.0};
Point(2) = {0.111706, 0.736468, 0, 1.0};
Point(3) = {0.109905, 0.736786, 0, 1.0};
Point(4) = {0.107110, 0.737448, 0, 1.0};
Point(5) = {0.103518, 0.738435, 0, 1.0};
Point(6) = {0.099279, 0.739657, 0, 1.0};
Point(7) = {0.094469, 0.741010, 0, 1.0};
Point(8) = {0.089127, 0.742454, 0, 1.0};
Point(9) = {0.083357, 0.743967, 0, 1.0};
Point(10) = {0.077271, 0.745488, 0, 1.0};
Point(11) = {0.070964, 0.746937, 0, 1.0};
Point(12) = {0.064524, 0.748228, 0, 1.0};
Point(13) = {0.058024, 0.749257, 0, 1.0};
Point(14) = {0.051487, 0.749849, 0, 1.0};
Point(15) = {0.044731, 0.750000, 0, 1.0};
Point(16) = {0.037805, 0.749836, 0, 1.0};
Point(17) = {0.030786, 0.749401, 0, 1.0};
Point(18) = {0.023754, 0.748724, 0, 1.0};
Point(19) = {0.016784, 0.747829, 0, 1.0};
Point(20) = {0.009955, 0.746740, 0, 1.0};
Point(21) = {0.003340, 0.745482, 0, 1.0};
Point(22) = {-0.002987, 0.744080, 0, 1.0};
Point(23) = {-0.008958, 0.742558, 0, 1.0};
Point(24) = {-0.014503, 0.740942, 0, 1.0};
Point(25) = {-0.019565, 0.739258, 0, 1.0};
Point(26) = {-0.024084, 0.737535, 0, 1.0};
Point(27) = {-0.028011, 0.735801, 0, 1.0};
Point(28) = {-0.031303, 0.734089, 0, 1.0};
Point(29) = {-0.033919, 0.732429, 0, 1.0};
Point(30) = {-0.035837, 0.730861, 0, 1.0};
Point(31) = {-0.037021, 0.729443, 0, 1.0};
Point(32) = {-0.037406, 0.728574, 0, 1.0};
Point(33) = {-0.037446, 0.728310, 0, 1.0};
Point(34) = {-0.037447, 0.728268, 0, 1.0};
Point(35) = {-0.037444, 0.728190, 0, 1.0};
Point(36) = {-0.037424, 0.728081, 0, 1.0};
Point(37) = {-0.037379, 0.727979, 0, 1.0};
Point(38) = {-0.037310, 0.727874, 0, 1.0};
Point(39) = {-0.037120, 0.727659, 0, 1.0};
Point(40) = {-0.036816, 0.727400, 0, 1.0};
Point(41) = {-0.035183, 0.726497, 0, 1.0};
Point(42) = {-0.032695, 0.725613, 0, 1.0};
Point(43) = {-0.029370, 0.724762, 0, 1.0};
Point(44) = {-0.025263, 0.723929, 0, 1.0};
Point(45) = {-0.020431, 0.723105, 0, 1.0};
Point(46) = {-0.014947, 0.722260, 0, 1.0};
Point(47) = {-0.008929, 0.721391, 0, 1.0};
Point(48) = {-0.002475, 0.720472, 0, 1.0};
Point(49) = {0.004231, 0.719533, 0, 1.0};
Point(50) = {0.011058, 0.718574, 0, 1.0};
Point(51) = {0.017695, 0.717762, 0, 1.0};
Point(52) = {0.024133, 0.717444, 0, 1.0};
Point(53) = {0.030596, 0.717693, 0, 1.0};
Point(54) = {0.037063, 0.718524, 0, 1.0};
Point(55) = {0.043736, 0.719922, 0, 1.0};
Point(56) = {0.050618, 0.721689, 0, 1.0};
Point(57) = {0.057651, 0.723698, 0, 1.0};
Point(58) = {0.064762, 0.725836, 0, 1.0};
Point(59) = {0.071861, 0.727989, 0, 1.0};
Point(60) = {0.078841, 0.730047, 0, 1.0};
Point(61) = {0.085570, 0.731908, 0, 1.0};
Point(62) = {0.091900, 0.733489, 0, 1.0};
Point(63) = {0.097664, 0.734727, 0, 1.0};
Point(64) = {0.102684, 0.735598, 0, 1.0};
Point(65) = {0.106789, 0.736122, 0, 1.0};
Point(66) = {0.109832, 0.736361, 0, 1.0};
Point(67) = {0.111701, 0.736412, 0, 1.0};
Point(68) = {-0.112331, -0.736398, 0, 1.0};
Point(69) = {-0.111706, -0.736468, 0, 1.0};
Point(70) = {-0.109905, -0.736786, 0, 1.0};
Point(71) = {-0.107110, -0.737448, 0, 1.0};
Point(72) = {-0.103518, -0.738435, 0, 1.0};
Point(73) = {-0.099279, -0.739657, 0, 1.0};
Point(74) = {-0.094469, -0.741010, 0, 1.0};
Point(75) = {-0.089127, -0.742454, 0, 1.0};
Point(76) = {-0.083357, -0.743967, 0, 1.0};
Point(77) = {-0.077271, -0.745488, 0, 1.0};
Point(78) = {-0.070964, -0.746937, 0, 1.0};
Point(79) = {-0.064524, -0.748228, 0, 1.0};
Point(80) = {-0.058024, -0.749257, 0, 1.0};
Point(81) = {-0.051487, -0.749849, 0, 1.0};
Point(82) = {-0.044731, -0.750000, 0, 1.0};
Point(83) = {-0.037805, -0.749836, 0, 1.0};
Point(84) = {-0.030786, -0.749401, 0, 1.0};
Point(85) = {-0.023754, -0.748724, 0, 1.0};
Point(86) = {-0.016784, -0.747829, 0, 1.0};
Point(87) = {-0.009955, -0.746740, 0, 1.0};
Point(88) = {-0.003340, -0.745482, 0, 1.0};
Point(89) = {0.002987, -0.744080, 0, 1.0};
Point(90) = {0.008958, -0.742558, 0, 1.0};
Point(91) = {0.014503, -0.740942, 0, 1.0};
Point(92) = {0.019565, -0.739258, 0, 1.0};
Point(93) = {0.024084, -0.737535, 0, 1.0};
Point(94) = {0.028011, -0.735801, 0, 1.0};
Point(95) = {0.031303, -0.734089, 0, 1.0};
Point(96) = {0.033919, -0.732429, 0, 1.0};
Point(97) = {0.035837, -0.730861, 0, 1.0};
Point(98) = {0.037021, -0.729443, 0, 1.0};
Point(99) = {0.037406, -0.728574, 0, 1.0};
Point(100) = {0.037446, -0.728310, 0, 1.0};
Point(101) = {0.037447, -0.728268, 0, 1.0};
Point(102) = {0.037444, -0.728190, 0, 1.0};
Point(103) = {0.037424, -0.728081, 0, 1.0};
Point(104) = {0.037379, -0.727979, 0, 1.0};
Point(105) = {0.037310, -0.727874, 0, 1.0};
Point(106) = {0.037120, -0.727659, 0, 1.0};
Point(107) = {0.036816, -0.727400, 0, 1.0};
Point(108) = {0.035183, -0.726497, 0, 1.0};
Point(109) = {0.032695, -0.725613, 0, 1.0};
Point(110) = {0.029370, -0.724762, 0, 1.0};
Point(111) = {0.025263, -0.723929, 0, 1.0};
Point(112) = {0.020431, -0.723105, 0, 1.0};
Point(113) = {0.014947, -0.722260, 0, 1.0};
Point(114) = {0.008929, -0.721391, 0, 1.0};
Point(115) = {0.002475, -0.720472, 0, 1.0};
Point(116) = {-0.004231, -0.719533, 0, 1.0};
Point(117) = {-0.011058, -0.718574, 0, 1.0};
Point(118) = {-0.017695, -0.717762, 0, 1.0};
Point(119) = {-0.024133, -0.717444, 0, 1.0};
Point(120) = {-0.030596, -0.717693, 0, 1.0};
Point(121) = {-0.037063, -0.718524, 0, 1.0};
Point(122) = {-0.043736, -0.719922, 0, 1.0};
Point(123) = {-0.050618, -0.721689, 0, 1.0};
Point(124) = {-0.057651, -0.723698, 0, 1.0};
Point(125) = {-0.064762, -0.725836, 0, 1.0};
Point(126) = {-0.071861, -0.727989, 0, 1.0};
Point(127) = {-0.078841, -0.730047, 0, 1.0};
Point(128) = {-0.085570, -0.731908, 0, 1.0};
Point(129) = {-0.091900, -0.733489, 0, 1.0};
Point(130) = {-0.097664, -0.734727, 0, 1.0};
Point(131) = {-0.102684, -0.735598, 0, 1.0};
Point(132) = {-0.106789, -0.736122, 0, 1.0};
Point(133) = {-0.109832, -0.736361, 0, 1.0};
Point(134) = {-0.111701, -0.736412, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html