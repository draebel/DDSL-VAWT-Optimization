SetFactory("OpenCASCADE");

Point(1) = {0.074851, 0.740932, 0, 1.0};
Point(2) = {0.074434, 0.740978, 0, 1.0};
Point(3) = {0.073234, 0.741191, 0, 1.0};
Point(4) = {0.071370, 0.741632, 0, 1.0};
Point(5) = {0.068976, 0.742290, 0, 1.0};
Point(6) = {0.066150, 0.743105, 0, 1.0};
Point(7) = {0.062943, 0.744007, 0, 1.0};
Point(8) = {0.059382, 0.744969, 0, 1.0};
Point(9) = {0.055535, 0.745978, 0, 1.0};
Point(10) = {0.051478, 0.746992, 0, 1.0};
Point(11) = {0.047273, 0.747958, 0, 1.0};
Point(12) = {0.042980, 0.748819, 0, 1.0};
Point(13) = {0.038647, 0.749505, 0, 1.0};
Point(14) = {0.034289, 0.749899, 0, 1.0};
Point(15) = {0.029785, 0.750000, 0, 1.0};
Point(16) = {0.025167, 0.749891, 0, 1.0};
Point(17) = {0.020488, 0.749601, 0, 1.0};
Point(18) = {0.015800, 0.749149, 0, 1.0};
Point(19) = {0.011153, 0.748552, 0, 1.0};
Point(20) = {0.006601, 0.747827, 0, 1.0};
Point(21) = {0.002190, 0.746988, 0, 1.0};
Point(22) = {-0.002028, 0.746054, 0, 1.0};
Point(23) = {-0.006008, 0.745039, 0, 1.0};
Point(24) = {-0.009705, 0.743962, 0, 1.0};
Point(25) = {-0.013079, 0.742839, 0, 1.0};
Point(26) = {-0.016092, 0.741690, 0, 1.0};
Point(27) = {-0.018710, 0.740534, 0, 1.0};
Point(28) = {-0.020905, 0.739392, 0, 1.0};
Point(29) = {-0.022649, 0.738286, 0, 1.0};
Point(30) = {-0.023927, 0.737241, 0, 1.0};
Point(31) = {-0.024717, 0.736296, 0, 1.0};
Point(32) = {-0.024973, 0.735716, 0, 1.0};
Point(33) = {-0.025000, 0.735540, 0, 1.0};
Point(34) = {-0.025001, 0.735512, 0, 1.0};
Point(35) = {-0.024999, 0.735460, 0, 1.0};
Point(36) = {-0.024986, 0.735388, 0, 1.0};
Point(37) = {-0.024955, 0.735319, 0, 1.0};
Point(38) = {-0.024910, 0.735249, 0, 1.0};
Point(39) = {-0.024783, 0.735106, 0, 1.0};
Point(40) = {-0.024580, 0.734934, 0, 1.0};
Point(41) = {-0.023492, 0.734331, 0, 1.0};
Point(42) = {-0.021833, 0.733742, 0, 1.0};
Point(43) = {-0.019616, 0.733175, 0, 1.0};
Point(44) = {-0.016878, 0.732620, 0, 1.0};
Point(45) = {-0.013657, 0.732070, 0, 1.0};
Point(46) = {-0.010001, 0.731507, 0, 1.0};
Point(47) = {-0.005989, 0.730927, 0, 1.0};
Point(48) = {-0.001686, 0.730315, 0, 1.0};
Point(49) = {0.002785, 0.729689, 0, 1.0};
Point(50) = {0.007336, 0.729049, 0, 1.0};
Point(51) = {0.011761, 0.728508, 0, 1.0};
Point(52) = {0.016053, 0.728296, 0, 1.0};
Point(53) = {0.020361, 0.728462, 0, 1.0};
Point(54) = {0.024672, 0.729016, 0, 1.0};
Point(55) = {0.029121, 0.729948, 0, 1.0};
Point(56) = {0.033709, 0.731126, 0, 1.0};
Point(57) = {0.038398, 0.732465, 0, 1.0};
Point(58) = {0.043138, 0.733891, 0, 1.0};
Point(59) = {0.047871, 0.735326, 0, 1.0};
Point(60) = {0.052524, 0.736698, 0, 1.0};
Point(61) = {0.057011, 0.737939, 0, 1.0};
Point(62) = {0.061231, 0.738993, 0, 1.0};
Point(63) = {0.065073, 0.739818, 0, 1.0};
Point(64) = {0.068420, 0.740398, 0, 1.0};
Point(65) = {0.071156, 0.740748, 0, 1.0};
Point(66) = {0.073185, 0.740907, 0, 1.0};
Point(67) = {0.074431, 0.740941, 0, 1.0};
Point(68) = {-0.074851, -0.740932, 0, 1.0};
Point(69) = {-0.074434, -0.740978, 0, 1.0};
Point(70) = {-0.073234, -0.741191, 0, 1.0};
Point(71) = {-0.071370, -0.741632, 0, 1.0};
Point(72) = {-0.068976, -0.742290, 0, 1.0};
Point(73) = {-0.066150, -0.743105, 0, 1.0};
Point(74) = {-0.062943, -0.744007, 0, 1.0};
Point(75) = {-0.059382, -0.744969, 0, 1.0};
Point(76) = {-0.055535, -0.745978, 0, 1.0};
Point(77) = {-0.051478, -0.746992, 0, 1.0};
Point(78) = {-0.047273, -0.747958, 0, 1.0};
Point(79) = {-0.042980, -0.748819, 0, 1.0};
Point(80) = {-0.038647, -0.749505, 0, 1.0};
Point(81) = {-0.034289, -0.749899, 0, 1.0};
Point(82) = {-0.029785, -0.750000, 0, 1.0};
Point(83) = {-0.025167, -0.749891, 0, 1.0};
Point(84) = {-0.020488, -0.749601, 0, 1.0};
Point(85) = {-0.015800, -0.749149, 0, 1.0};
Point(86) = {-0.011153, -0.748552, 0, 1.0};
Point(87) = {-0.006601, -0.747827, 0, 1.0};
Point(88) = {-0.002190, -0.746988, 0, 1.0};
Point(89) = {0.002028, -0.746054, 0, 1.0};
Point(90) = {0.006008, -0.745039, 0, 1.0};
Point(91) = {0.009705, -0.743962, 0, 1.0};
Point(92) = {0.013079, -0.742839, 0, 1.0};
Point(93) = {0.016092, -0.741690, 0, 1.0};
Point(94) = {0.018710, -0.740534, 0, 1.0};
Point(95) = {0.020905, -0.739392, 0, 1.0};
Point(96) = {0.022649, -0.738286, 0, 1.0};
Point(97) = {0.023927, -0.737241, 0, 1.0};
Point(98) = {0.024717, -0.736296, 0, 1.0};
Point(99) = {0.024973, -0.735716, 0, 1.0};
Point(100) = {0.025000, -0.735540, 0, 1.0};
Point(101) = {0.025001, -0.735512, 0, 1.0};
Point(102) = {0.024999, -0.735460, 0, 1.0};
Point(103) = {0.024986, -0.735388, 0, 1.0};
Point(104) = {0.024955, -0.735319, 0, 1.0};
Point(105) = {0.024910, -0.735249, 0, 1.0};
Point(106) = {0.024783, -0.735106, 0, 1.0};
Point(107) = {0.024580, -0.734934, 0, 1.0};
Point(108) = {0.023492, -0.734331, 0, 1.0};
Point(109) = {0.021833, -0.733742, 0, 1.0};
Point(110) = {0.019616, -0.733175, 0, 1.0};
Point(111) = {0.016878, -0.732620, 0, 1.0};
Point(112) = {0.013657, -0.732070, 0, 1.0};
Point(113) = {0.010001, -0.731507, 0, 1.0};
Point(114) = {0.005989, -0.730927, 0, 1.0};
Point(115) = {0.001686, -0.730315, 0, 1.0};
Point(116) = {-0.002785, -0.729689, 0, 1.0};
Point(117) = {-0.007336, -0.729049, 0, 1.0};
Point(118) = {-0.011761, -0.728508, 0, 1.0};
Point(119) = {-0.016053, -0.728296, 0, 1.0};
Point(120) = {-0.020361, -0.728462, 0, 1.0};
Point(121) = {-0.024672, -0.729016, 0, 1.0};
Point(122) = {-0.029121, -0.729948, 0, 1.0};
Point(123) = {-0.033709, -0.731126, 0, 1.0};
Point(124) = {-0.038398, -0.732465, 0, 1.0};
Point(125) = {-0.043138, -0.733891, 0, 1.0};
Point(126) = {-0.047871, -0.735326, 0, 1.0};
Point(127) = {-0.052524, -0.736698, 0, 1.0};
Point(128) = {-0.057011, -0.737939, 0, 1.0};
Point(129) = {-0.061231, -0.738993, 0, 1.0};
Point(130) = {-0.065073, -0.739818, 0, 1.0};
Point(131) = {-0.068420, -0.740398, 0, 1.0};
Point(132) = {-0.071156, -0.740748, 0, 1.0};
Point(133) = {-0.073185, -0.740907, 0, 1.0};
Point(134) = {-0.074431, -0.740941, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:49};
Spline(3) = {49:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:116};
Spline(7) = {116:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html