SetFactory("OpenCASCADE");

Point(1) = {0.074509, 0.747910, 0, 1.0};
Point(2) = {0.074212, 0.747903, 0, 1.0};
Point(3) = {0.073350, 0.747896, 0, 1.0};
Point(4) = {0.071946, 0.747890, 0, 1.0};
Point(5) = {0.070015, 0.747894, 0, 1.0};
Point(6) = {0.067581, 0.747923, 0, 1.0};
Point(7) = {0.064674, 0.747979, 0, 1.0};
Point(8) = {0.061326, 0.748070, 0, 1.0};
Point(9) = {0.057573, 0.748197, 0, 1.0};
Point(10) = {0.053452, 0.748359, 0, 1.0};
Point(11) = {0.049003, 0.748555, 0, 1.0};
Point(12) = {0.044269, 0.748778, 0, 1.0};
Point(13) = {0.039294, 0.749020, 0, 1.0};
Point(14) = {0.034120, 0.749270, 0, 1.0};
Point(15) = {0.028792, 0.749517, 0, 1.0};
Point(16) = {0.023359, 0.749741, 0, 1.0};
Point(17) = {0.017867, 0.749920, 0, 1.0};
Point(18) = {0.012346, 0.750000, 0, 1.0};
Point(19) = {0.006787, 0.749960, 0, 1.0};
Point(20) = {0.001200, 0.749823, 0, 1.0};
Point(21) = {-0.004382, 0.749588, 0, 1.0};
Point(22) = {-0.009937, 0.749259, 0, 1.0};
Point(23) = {-0.015427, 0.748843, 0, 1.0};
Point(24) = {-0.020826, 0.748340, 0, 1.0};
Point(25) = {-0.026109, 0.747756, 0, 1.0};
Point(26) = {-0.031239, 0.747094, 0, 1.0};
Point(27) = {-0.036192, 0.746362, 0, 1.0};
Point(28) = {-0.040936, 0.745565, 0, 1.0};
Point(29) = {-0.045448, 0.744710, 0, 1.0};
Point(30) = {-0.049695, 0.743801, 0, 1.0};
Point(31) = {-0.053655, 0.742843, 0, 1.0};
Point(32) = {-0.057304, 0.741837, 0, 1.0};
Point(33) = {-0.060624, 0.740792, 0, 1.0};
Point(34) = {-0.063592, 0.739701, 0, 1.0};
Point(35) = {-0.066214, 0.738565, 0, 1.0};
Point(36) = {-0.068485, 0.737409, 0, 1.0};
Point(37) = {-0.070394, 0.736240, 0, 1.0};
Point(38) = {-0.071944, 0.735074, 0, 1.0};
Point(39) = {-0.073113, 0.733939, 0, 1.0};
Point(40) = {-0.073912, 0.732827, 0, 1.0};
Point(41) = {-0.074377, 0.731761, 0, 1.0};
Point(42) = {-0.074515, 0.730830, 0, 1.0};
Point(43) = {-0.074212, 0.730106, 0, 1.0};
Point(44) = {-0.073385, 0.729528, 0, 1.0};
Point(45) = {-0.072088, 0.729009, 0, 1.0};
Point(46) = {-0.070357, 0.728553, 0, 1.0};
Point(47) = {-0.068210, 0.728178, 0, 1.0};
Point(48) = {-0.065663, 0.727891, 0, 1.0};
Point(49) = {-0.062732, 0.727698, 0, 1.0};
Point(50) = {-0.059430, 0.727603, 0, 1.0};
Point(51) = {-0.055776, 0.727607, 0, 1.0};
Point(52) = {-0.051789, 0.727709, 0, 1.0};
Point(53) = {-0.047493, 0.727907, 0, 1.0};
Point(54) = {-0.042911, 0.728199, 0, 1.0};
Point(55) = {-0.038071, 0.728583, 0, 1.0};
Point(56) = {-0.033001, 0.729055, 0, 1.0};
Point(57) = {-0.027732, 0.729610, 0, 1.0};
Point(58) = {-0.022295, 0.730243, 0, 1.0};
Point(59) = {-0.016724, 0.730949, 0, 1.0};
Point(60) = {-0.011057, 0.731722, 0, 1.0};
Point(61) = {-0.005330, 0.732559, 0, 1.0};
Point(62) = {0.000421, 0.733457, 0, 1.0};
Point(63) = {0.006150, 0.734427, 0, 1.0};
Point(64) = {0.011849, 0.735477, 0, 1.0};
Point(65) = {0.017508, 0.736590, 0, 1.0};
Point(66) = {0.023102, 0.737745, 0, 1.0};
Point(67) = {0.028606, 0.738920, 0, 1.0};
Point(68) = {0.033987, 0.740086, 0, 1.0};
Point(69) = {0.039210, 0.741217, 0, 1.0};
Point(70) = {0.044228, 0.742287, 0, 1.0};
Point(71) = {0.048996, 0.743280, 0, 1.0};
Point(72) = {0.053469, 0.744184, 0, 1.0};
Point(73) = {0.057603, 0.744988, 0, 1.0};
Point(74) = {0.061357, 0.745690, 0, 1.0};
Point(75) = {0.064695, 0.746290, 0, 1.0};
Point(76) = {0.067579, 0.746789, 0, 1.0};
Point(77) = {0.069985, 0.747200, 0, 1.0};
Point(78) = {0.071905, 0.747528, 0, 1.0};
Point(79) = {0.073325, 0.747758, 0, 1.0};
Point(80) = {0.074208, 0.747878, 0, 1.0};
Point(81) = {-0.074509, -0.747910, 0, 1.0};
Point(82) = {-0.074212, -0.747903, 0, 1.0};
Point(83) = {-0.073350, -0.747896, 0, 1.0};
Point(84) = {-0.071946, -0.747890, 0, 1.0};
Point(85) = {-0.070015, -0.747894, 0, 1.0};
Point(86) = {-0.067581, -0.747923, 0, 1.0};
Point(87) = {-0.064674, -0.747979, 0, 1.0};
Point(88) = {-0.061326, -0.748070, 0, 1.0};
Point(89) = {-0.057573, -0.748197, 0, 1.0};
Point(90) = {-0.053452, -0.748359, 0, 1.0};
Point(91) = {-0.049003, -0.748555, 0, 1.0};
Point(92) = {-0.044269, -0.748778, 0, 1.0};
Point(93) = {-0.039294, -0.749020, 0, 1.0};
Point(94) = {-0.034120, -0.749270, 0, 1.0};
Point(95) = {-0.028792, -0.749517, 0, 1.0};
Point(96) = {-0.023359, -0.749741, 0, 1.0};
Point(97) = {-0.017867, -0.749920, 0, 1.0};
Point(98) = {-0.012346, -0.750000, 0, 1.0};
Point(99) = {-0.006787, -0.749960, 0, 1.0};
Point(100) = {-0.001200, -0.749823, 0, 1.0};
Point(101) = {0.004382, -0.749588, 0, 1.0};
Point(102) = {0.009937, -0.749259, 0, 1.0};
Point(103) = {0.015427, -0.748843, 0, 1.0};
Point(104) = {0.020826, -0.748340, 0, 1.0};
Point(105) = {0.026109, -0.747756, 0, 1.0};
Point(106) = {0.031239, -0.747094, 0, 1.0};
Point(107) = {0.036192, -0.746362, 0, 1.0};
Point(108) = {0.040936, -0.745565, 0, 1.0};
Point(109) = {0.045448, -0.744710, 0, 1.0};
Point(110) = {0.049695, -0.743801, 0, 1.0};
Point(111) = {0.053655, -0.742843, 0, 1.0};
Point(112) = {0.057304, -0.741837, 0, 1.0};
Point(113) = {0.060624, -0.740792, 0, 1.0};
Point(114) = {0.063592, -0.739701, 0, 1.0};
Point(115) = {0.066214, -0.738565, 0, 1.0};
Point(116) = {0.068485, -0.737409, 0, 1.0};
Point(117) = {0.070394, -0.736240, 0, 1.0};
Point(118) = {0.071944, -0.735074, 0, 1.0};
Point(119) = {0.073113, -0.733939, 0, 1.0};
Point(120) = {0.073912, -0.732827, 0, 1.0};
Point(121) = {0.074377, -0.731761, 0, 1.0};
Point(122) = {0.074515, -0.730830, 0, 1.0};
Point(123) = {0.074212, -0.730106, 0, 1.0};
Point(124) = {0.073385, -0.729528, 0, 1.0};
Point(125) = {0.072088, -0.729009, 0, 1.0};
Point(126) = {0.070357, -0.728553, 0, 1.0};
Point(127) = {0.068210, -0.728178, 0, 1.0};
Point(128) = {0.065663, -0.727891, 0, 1.0};
Point(129) = {0.062732, -0.727698, 0, 1.0};
Point(130) = {0.059430, -0.727603, 0, 1.0};
Point(131) = {0.055776, -0.727607, 0, 1.0};
Point(132) = {0.051789, -0.727709, 0, 1.0};
Point(133) = {0.047493, -0.727907, 0, 1.0};
Point(134) = {0.042911, -0.728199, 0, 1.0};
Point(135) = {0.038071, -0.728583, 0, 1.0};
Point(136) = {0.033001, -0.729055, 0, 1.0};
Point(137) = {0.027732, -0.729610, 0, 1.0};
Point(138) = {0.022295, -0.730243, 0, 1.0};
Point(139) = {0.016724, -0.730949, 0, 1.0};
Point(140) = {0.011057, -0.731722, 0, 1.0};
Point(141) = {0.005330, -0.732559, 0, 1.0};
Point(142) = {-0.000421, -0.733457, 0, 1.0};
Point(143) = {-0.006150, -0.734427, 0, 1.0};
Point(144) = {-0.011849, -0.735477, 0, 1.0};
Point(145) = {-0.017508, -0.736590, 0, 1.0};
Point(146) = {-0.023102, -0.737745, 0, 1.0};
Point(147) = {-0.028606, -0.738920, 0, 1.0};
Point(148) = {-0.033987, -0.740086, 0, 1.0};
Point(149) = {-0.039210, -0.741217, 0, 1.0};
Point(150) = {-0.044228, -0.742287, 0, 1.0};
Point(151) = {-0.048996, -0.743280, 0, 1.0};
Point(152) = {-0.053469, -0.744184, 0, 1.0};
Point(153) = {-0.057603, -0.744988, 0, 1.0};
Point(154) = {-0.061357, -0.745690, 0, 1.0};
Point(155) = {-0.064695, -0.746290, 0, 1.0};
Point(156) = {-0.067579, -0.746789, 0, 1.0};
Point(157) = {-0.069985, -0.747200, 0, 1.0};
Point(158) = {-0.071905, -0.747528, 0, 1.0};
Point(159) = {-0.073325, -0.747758, 0, 1.0};
Point(160) = {-0.074208, -0.747878, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html