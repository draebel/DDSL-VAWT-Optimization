SetFactory("OpenCASCADE");

Point(1) = {0.074354, 0.748606, 0, 1.0};
Point(2) = {0.074156, 0.748602, 0, 1.0};
Point(3) = {0.073581, 0.748598, 0, 1.0};
Point(4) = {0.072645, 0.748593, 0, 1.0};
Point(5) = {0.071358, 0.748596, 0, 1.0};
Point(6) = {0.069735, 0.748615, 0, 1.0};
Point(7) = {0.067797, 0.748653, 0, 1.0};
Point(8) = {0.065565, 0.748714, 0, 1.0};
Point(9) = {0.063063, 0.748798, 0, 1.0};
Point(10) = {0.060316, 0.748906, 0, 1.0};
Point(11) = {0.057350, 0.749036, 0, 1.0};
Point(12) = {0.054194, 0.749185, 0, 1.0};
Point(13) = {0.050877, 0.749347, 0, 1.0};
Point(14) = {0.047428, 0.749513, 0, 1.0};
Point(15) = {0.043876, 0.749678, 0, 1.0};
Point(16) = {0.040254, 0.749827, 0, 1.0};
Point(17) = {0.036593, 0.749946, 0, 1.0};
Point(18) = {0.032912, 0.750000, 0, 1.0};
Point(19) = {0.029206, 0.749973, 0, 1.0};
Point(20) = {0.025481, 0.749882, 0, 1.0};
Point(21) = {0.021760, 0.749726, 0, 1.0};
Point(22) = {0.018057, 0.749506, 0, 1.0};
Point(23) = {0.014397, 0.749229, 0, 1.0};
Point(24) = {0.010798, 0.748893, 0, 1.0};
Point(25) = {0.007276, 0.748504, 0, 1.0};
Point(26) = {0.003856, 0.748063, 0, 1.0};
Point(27) = {0.000554, 0.747575, 0, 1.0};
Point(28) = {-0.002609, 0.747043, 0, 1.0};
Point(29) = {-0.005617, 0.746473, 0, 1.0};
Point(30) = {-0.008448, 0.745867, 0, 1.0};
Point(31) = {-0.011088, 0.745228, 0, 1.0};
Point(32) = {-0.013520, 0.744558, 0, 1.0};
Point(33) = {-0.015734, 0.743861, 0, 1.0};
Point(34) = {-0.017713, 0.743134, 0, 1.0};
Point(35) = {-0.019460, 0.742377, 0, 1.0};
Point(36) = {-0.020975, 0.741606, 0, 1.0};
Point(37) = {-0.022247, 0.740826, 0, 1.0};
Point(38) = {-0.023281, 0.740049, 0, 1.0};
Point(39) = {-0.024060, 0.739293, 0, 1.0};
Point(40) = {-0.024592, 0.738552, 0, 1.0};
Point(41) = {-0.024903, 0.737841, 0, 1.0};
Point(42) = {-0.024995, 0.737220, 0, 1.0};
Point(43) = {-0.024793, 0.736737, 0, 1.0};
Point(44) = {-0.024241, 0.736352, 0, 1.0};
Point(45) = {-0.023377, 0.736006, 0, 1.0};
Point(46) = {-0.022223, 0.735702, 0, 1.0};
Point(47) = {-0.020791, 0.735452, 0, 1.0};
Point(48) = {-0.019093, 0.735260, 0, 1.0};
Point(49) = {-0.017139, 0.735132, 0, 1.0};
Point(50) = {-0.014938, 0.735069, 0, 1.0};
Point(51) = {-0.012502, 0.735071, 0, 1.0};
Point(52) = {-0.009844, 0.735139, 0, 1.0};
Point(53) = {-0.006980, 0.735271, 0, 1.0};
Point(54) = {-0.003926, 0.735466, 0, 1.0};
Point(55) = {-0.000699, 0.735722, 0, 1.0};
Point(56) = {0.002681, 0.736037, 0, 1.0};
Point(57) = {0.006194, 0.736407, 0, 1.0};
Point(58) = {0.009819, 0.736829, 0, 1.0};
Point(59) = {0.013532, 0.737299, 0, 1.0};
Point(60) = {0.017310, 0.737815, 0, 1.0};
Point(61) = {0.021128, 0.738373, 0, 1.0};
Point(62) = {0.024962, 0.738971, 0, 1.0};
Point(63) = {0.028782, 0.739618, 0, 1.0};
Point(64) = {0.032581, 0.740318, 0, 1.0};
Point(65) = {0.036354, 0.741060, 0, 1.0};
Point(66) = {0.040083, 0.741830, 0, 1.0};
Point(67) = {0.043752, 0.742614, 0, 1.0};
Point(68) = {0.047339, 0.743391, 0, 1.0};
Point(69) = {0.050821, 0.744145, 0, 1.0};
Point(70) = {0.054167, 0.744858, 0, 1.0};
Point(71) = {0.057345, 0.745520, 0, 1.0};
Point(72) = {0.060327, 0.746122, 0, 1.0};
Point(73) = {0.063083, 0.746659, 0, 1.0};
Point(74) = {0.065586, 0.747127, 0, 1.0};
Point(75) = {0.067811, 0.747527, 0, 1.0};
Point(76) = {0.069734, 0.747859, 0, 1.0};
Point(77) = {0.071338, 0.748133, 0, 1.0};
Point(78) = {0.072618, 0.748352, 0, 1.0};
Point(79) = {0.073564, 0.748505, 0, 1.0};
Point(80) = {0.074153, 0.748585, 0, 1.0};
Point(81) = {-0.074354, -0.748606, 0, 1.0};
Point(82) = {-0.074156, -0.748602, 0, 1.0};
Point(83) = {-0.073581, -0.748598, 0, 1.0};
Point(84) = {-0.072645, -0.748593, 0, 1.0};
Point(85) = {-0.071358, -0.748596, 0, 1.0};
Point(86) = {-0.069735, -0.748615, 0, 1.0};
Point(87) = {-0.067797, -0.748653, 0, 1.0};
Point(88) = {-0.065565, -0.748714, 0, 1.0};
Point(89) = {-0.063063, -0.748798, 0, 1.0};
Point(90) = {-0.060316, -0.748906, 0, 1.0};
Point(91) = {-0.057350, -0.749036, 0, 1.0};
Point(92) = {-0.054194, -0.749185, 0, 1.0};
Point(93) = {-0.050877, -0.749347, 0, 1.0};
Point(94) = {-0.047428, -0.749513, 0, 1.0};
Point(95) = {-0.043876, -0.749678, 0, 1.0};
Point(96) = {-0.040254, -0.749827, 0, 1.0};
Point(97) = {-0.036593, -0.749946, 0, 1.0};
Point(98) = {-0.032912, -0.750000, 0, 1.0};
Point(99) = {-0.029206, -0.749973, 0, 1.0};
Point(100) = {-0.025481, -0.749882, 0, 1.0};
Point(101) = {-0.021760, -0.749726, 0, 1.0};
Point(102) = {-0.018057, -0.749506, 0, 1.0};
Point(103) = {-0.014397, -0.749229, 0, 1.0};
Point(104) = {-0.010798, -0.748893, 0, 1.0};
Point(105) = {-0.007276, -0.748504, 0, 1.0};
Point(106) = {-0.003856, -0.748063, 0, 1.0};
Point(107) = {-0.000554, -0.747575, 0, 1.0};
Point(108) = {0.002609, -0.747043, 0, 1.0};
Point(109) = {0.005617, -0.746473, 0, 1.0};
Point(110) = {0.008448, -0.745867, 0, 1.0};
Point(111) = {0.011088, -0.745228, 0, 1.0};
Point(112) = {0.013520, -0.744558, 0, 1.0};
Point(113) = {0.015734, -0.743861, 0, 1.0};
Point(114) = {0.017713, -0.743134, 0, 1.0};
Point(115) = {0.019460, -0.742377, 0, 1.0};
Point(116) = {0.020975, -0.741606, 0, 1.0};
Point(117) = {0.022247, -0.740826, 0, 1.0};
Point(118) = {0.023281, -0.740049, 0, 1.0};
Point(119) = {0.024060, -0.739293, 0, 1.0};
Point(120) = {0.024592, -0.738552, 0, 1.0};
Point(121) = {0.024903, -0.737841, 0, 1.0};
Point(122) = {0.024995, -0.737220, 0, 1.0};
Point(123) = {0.024793, -0.736737, 0, 1.0};
Point(124) = {0.024241, -0.736352, 0, 1.0};
Point(125) = {0.023377, -0.736006, 0, 1.0};
Point(126) = {0.022223, -0.735702, 0, 1.0};
Point(127) = {0.020791, -0.735452, 0, 1.0};
Point(128) = {0.019093, -0.735260, 0, 1.0};
Point(129) = {0.017139, -0.735132, 0, 1.0};
Point(130) = {0.014938, -0.735069, 0, 1.0};
Point(131) = {0.012502, -0.735071, 0, 1.0};
Point(132) = {0.009844, -0.735139, 0, 1.0};
Point(133) = {0.006980, -0.735271, 0, 1.0};
Point(134) = {0.003926, -0.735466, 0, 1.0};
Point(135) = {0.000699, -0.735722, 0, 1.0};
Point(136) = {-0.002681, -0.736037, 0, 1.0};
Point(137) = {-0.006194, -0.736407, 0, 1.0};
Point(138) = {-0.009819, -0.736829, 0, 1.0};
Point(139) = {-0.013532, -0.737299, 0, 1.0};
Point(140) = {-0.017310, -0.737815, 0, 1.0};
Point(141) = {-0.021128, -0.738373, 0, 1.0};
Point(142) = {-0.024962, -0.738971, 0, 1.0};
Point(143) = {-0.028782, -0.739618, 0, 1.0};
Point(144) = {-0.032581, -0.740318, 0, 1.0};
Point(145) = {-0.036354, -0.741060, 0, 1.0};
Point(146) = {-0.040083, -0.741830, 0, 1.0};
Point(147) = {-0.043752, -0.742614, 0, 1.0};
Point(148) = {-0.047339, -0.743391, 0, 1.0};
Point(149) = {-0.050821, -0.744145, 0, 1.0};
Point(150) = {-0.054167, -0.744858, 0, 1.0};
Point(151) = {-0.057345, -0.745520, 0, 1.0};
Point(152) = {-0.060327, -0.746122, 0, 1.0};
Point(153) = {-0.063083, -0.746659, 0, 1.0};
Point(154) = {-0.065586, -0.747127, 0, 1.0};
Point(155) = {-0.067811, -0.747527, 0, 1.0};
Point(156) = {-0.069734, -0.747859, 0, 1.0};
Point(157) = {-0.071338, -0.748133, 0, 1.0};
Point(158) = {-0.072618, -0.748352, 0, 1.0};
Point(159) = {-0.073564, -0.748505, 0, 1.0};
Point(160) = {-0.074153, -0.748585, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html