SetFactory("OpenCASCADE");

Point(1) = {0.111764, 0.747910, 0, 1.0};
Point(2) = {0.111467, 0.747903, 0, 1.0};
Point(3) = {0.110604, 0.747896, 0, 1.0};
Point(4) = {0.109201, 0.747890, 0, 1.0};
Point(5) = {0.107270, 0.747894, 0, 1.0};
Point(6) = {0.104836, 0.747923, 0, 1.0};
Point(7) = {0.101929, 0.747979, 0, 1.0};
Point(8) = {0.098581, 0.748070, 0, 1.0};
Point(9) = {0.094828, 0.748197, 0, 1.0};
Point(10) = {0.090707, 0.748359, 0, 1.0};
Point(11) = {0.086259, 0.748555, 0, 1.0};
Point(12) = {0.081524, 0.748778, 0, 1.0};
Point(13) = {0.076549, 0.749020, 0, 1.0};
Point(14) = {0.071375, 0.749270, 0, 1.0};
Point(15) = {0.066048, 0.749517, 0, 1.0};
Point(16) = {0.060615, 0.749741, 0, 1.0};
Point(17) = {0.055123, 0.749920, 0, 1.0};
Point(18) = {0.049602, 0.750000, 0, 1.0};
Point(19) = {0.044043, 0.749960, 0, 1.0};
Point(20) = {0.038456, 0.749823, 0, 1.0};
Point(21) = {0.032874, 0.749588, 0, 1.0};
Point(22) = {0.027319, 0.749259, 0, 1.0};
Point(23) = {0.021829, 0.748843, 0, 1.0};
Point(24) = {0.016431, 0.748340, 0, 1.0};
Point(25) = {0.011148, 0.747756, 0, 1.0};
Point(26) = {0.006018, 0.747094, 0, 1.0};
Point(27) = {0.001065, 0.746362, 0, 1.0};
Point(28) = {-0.003679, 0.745565, 0, 1.0};
Point(29) = {-0.008191, 0.744710, 0, 1.0};
Point(30) = {-0.012438, 0.743801, 0, 1.0};
Point(31) = {-0.016397, 0.742843, 0, 1.0};
Point(32) = {-0.020046, 0.741837, 0, 1.0};
Point(33) = {-0.023366, 0.740792, 0, 1.0};
Point(34) = {-0.026335, 0.739701, 0, 1.0};
Point(35) = {-0.028956, 0.738565, 0, 1.0};
Point(36) = {-0.031227, 0.737409, 0, 1.0};
Point(37) = {-0.033137, 0.736240, 0, 1.0};
Point(38) = {-0.034687, 0.735074, 0, 1.0};
Point(39) = {-0.035855, 0.733939, 0, 1.0};
Point(40) = {-0.036654, 0.732828, 0, 1.0};
Point(41) = {-0.037119, 0.731761, 0, 1.0};
Point(42) = {-0.037258, 0.730831, 0, 1.0};
Point(43) = {-0.036954, 0.730106, 0, 1.0};
Point(44) = {-0.036128, 0.729529, 0, 1.0};
Point(45) = {-0.034830, 0.729009, 0, 1.0};
Point(46) = {-0.033099, 0.728553, 0, 1.0};
Point(47) = {-0.030952, 0.728178, 0, 1.0};
Point(48) = {-0.028405, 0.727891, 0, 1.0};
Point(49) = {-0.025474, 0.727699, 0, 1.0};
Point(50) = {-0.022172, 0.727604, 0, 1.0};
Point(51) = {-0.018519, 0.727607, 0, 1.0};
Point(52) = {-0.014531, 0.727709, 0, 1.0};
Point(53) = {-0.010236, 0.727907, 0, 1.0};
Point(54) = {-0.005654, 0.728200, 0, 1.0};
Point(55) = {-0.000814, 0.728583, 0, 1.0};
Point(56) = {0.004256, 0.729055, 0, 1.0};
Point(57) = {0.009525, 0.729610, 0, 1.0};
Point(58) = {0.014962, 0.730244, 0, 1.0};
Point(59) = {0.020532, 0.730949, 0, 1.0};
Point(60) = {0.026199, 0.731722, 0, 1.0};
Point(61) = {0.031926, 0.732559, 0, 1.0};
Point(62) = {0.037677, 0.733457, 0, 1.0};
Point(63) = {0.043406, 0.734427, 0, 1.0};
Point(64) = {0.049105, 0.735477, 0, 1.0};
Point(65) = {0.054764, 0.736590, 0, 1.0};
Point(66) = {0.060357, 0.737745, 0, 1.0};
Point(67) = {0.065862, 0.738920, 0, 1.0};
Point(68) = {0.071242, 0.740086, 0, 1.0};
Point(69) = {0.076465, 0.741217, 0, 1.0};
Point(70) = {0.081484, 0.742287, 0, 1.0};
Point(71) = {0.086251, 0.743280, 0, 1.0};
Point(72) = {0.090724, 0.744184, 0, 1.0};
Point(73) = {0.094858, 0.744988, 0, 1.0};
Point(74) = {0.098612, 0.745690, 0, 1.0};
Point(75) = {0.101950, 0.746290, 0, 1.0};
Point(76) = {0.104834, 0.746789, 0, 1.0};
Point(77) = {0.107240, 0.747200, 0, 1.0};
Point(78) = {0.109159, 0.747528, 0, 1.0};
Point(79) = {0.110579, 0.747758, 0, 1.0};
Point(80) = {0.111462, 0.747878, 0, 1.0};
Point(81) = {-0.111764, -0.747910, 0, 1.0};
Point(82) = {-0.111467, -0.747903, 0, 1.0};
Point(83) = {-0.110604, -0.747896, 0, 1.0};
Point(84) = {-0.109201, -0.747890, 0, 1.0};
Point(85) = {-0.107270, -0.747894, 0, 1.0};
Point(86) = {-0.104836, -0.747923, 0, 1.0};
Point(87) = {-0.101929, -0.747979, 0, 1.0};
Point(88) = {-0.098581, -0.748070, 0, 1.0};
Point(89) = {-0.094828, -0.748197, 0, 1.0};
Point(90) = {-0.090707, -0.748359, 0, 1.0};
Point(91) = {-0.086259, -0.748555, 0, 1.0};
Point(92) = {-0.081524, -0.748778, 0, 1.0};
Point(93) = {-0.076549, -0.749020, 0, 1.0};
Point(94) = {-0.071375, -0.749270, 0, 1.0};
Point(95) = {-0.066048, -0.749517, 0, 1.0};
Point(96) = {-0.060615, -0.749741, 0, 1.0};
Point(97) = {-0.055123, -0.749920, 0, 1.0};
Point(98) = {-0.049602, -0.750000, 0, 1.0};
Point(99) = {-0.044043, -0.749960, 0, 1.0};
Point(100) = {-0.038456, -0.749823, 0, 1.0};
Point(101) = {-0.032874, -0.749588, 0, 1.0};
Point(102) = {-0.027319, -0.749259, 0, 1.0};
Point(103) = {-0.021829, -0.748843, 0, 1.0};
Point(104) = {-0.016431, -0.748340, 0, 1.0};
Point(105) = {-0.011148, -0.747756, 0, 1.0};
Point(106) = {-0.006018, -0.747094, 0, 1.0};
Point(107) = {-0.001065, -0.746362, 0, 1.0};
Point(108) = {0.003679, -0.745565, 0, 1.0};
Point(109) = {0.008191, -0.744710, 0, 1.0};
Point(110) = {0.012438, -0.743801, 0, 1.0};
Point(111) = {0.016397, -0.742843, 0, 1.0};
Point(112) = {0.020046, -0.741837, 0, 1.0};
Point(113) = {0.023366, -0.740792, 0, 1.0};
Point(114) = {0.026335, -0.739701, 0, 1.0};
Point(115) = {0.028956, -0.738565, 0, 1.0};
Point(116) = {0.031227, -0.737409, 0, 1.0};
Point(117) = {0.033137, -0.736240, 0, 1.0};
Point(118) = {0.034687, -0.735074, 0, 1.0};
Point(119) = {0.035855, -0.733939, 0, 1.0};
Point(120) = {0.036654, -0.732828, 0, 1.0};
Point(121) = {0.037119, -0.731761, 0, 1.0};
Point(122) = {0.037258, -0.730831, 0, 1.0};
Point(123) = {0.036954, -0.730106, 0, 1.0};
Point(124) = {0.036128, -0.729529, 0, 1.0};
Point(125) = {0.034830, -0.729009, 0, 1.0};
Point(126) = {0.033099, -0.728553, 0, 1.0};
Point(127) = {0.030952, -0.728178, 0, 1.0};
Point(128) = {0.028405, -0.727891, 0, 1.0};
Point(129) = {0.025474, -0.727699, 0, 1.0};
Point(130) = {0.022172, -0.727604, 0, 1.0};
Point(131) = {0.018519, -0.727607, 0, 1.0};
Point(132) = {0.014531, -0.727709, 0, 1.0};
Point(133) = {0.010236, -0.727907, 0, 1.0};
Point(134) = {0.005654, -0.728200, 0, 1.0};
Point(135) = {0.000814, -0.728583, 0, 1.0};
Point(136) = {-0.004256, -0.729055, 0, 1.0};
Point(137) = {-0.009525, -0.729610, 0, 1.0};
Point(138) = {-0.014962, -0.730244, 0, 1.0};
Point(139) = {-0.020532, -0.730949, 0, 1.0};
Point(140) = {-0.026199, -0.731722, 0, 1.0};
Point(141) = {-0.031926, -0.732559, 0, 1.0};
Point(142) = {-0.037677, -0.733457, 0, 1.0};
Point(143) = {-0.043406, -0.734427, 0, 1.0};
Point(144) = {-0.049105, -0.735477, 0, 1.0};
Point(145) = {-0.054764, -0.736590, 0, 1.0};
Point(146) = {-0.060357, -0.737745, 0, 1.0};
Point(147) = {-0.065862, -0.738920, 0, 1.0};
Point(148) = {-0.071242, -0.740086, 0, 1.0};
Point(149) = {-0.076465, -0.741217, 0, 1.0};
Point(150) = {-0.081484, -0.742287, 0, 1.0};
Point(151) = {-0.086251, -0.743280, 0, 1.0};
Point(152) = {-0.090724, -0.744184, 0, 1.0};
Point(153) = {-0.094858, -0.744988, 0, 1.0};
Point(154) = {-0.098612, -0.745690, 0, 1.0};
Point(155) = {-0.101950, -0.746290, 0, 1.0};
Point(156) = {-0.104834, -0.746789, 0, 1.0};
Point(157) = {-0.107240, -0.747200, 0, 1.0};
Point(158) = {-0.109159, -0.747528, 0, 1.0};
Point(159) = {-0.110579, -0.747758, 0, 1.0};
Point(160) = {-0.111462, -0.747878, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html