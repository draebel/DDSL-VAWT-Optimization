SetFactory("OpenCASCADE");

Point(1) = {0.074699, 0.724962, 0, 1.0};
Point(2) = {0.071435, 0.725648, 0, 1.0};
Point(3) = {0.067039, 0.726552, 0, 1.0};
Point(4) = {0.061813, 0.727645, 0, 1.0};
Point(5) = {0.055855, 0.728951, 0, 1.0};
Point(6) = {0.049274, 0.730468, 0, 1.0};
Point(7) = {0.042182, 0.732176, 0, 1.0};
Point(8) = {0.034701, 0.734047, 0, 1.0};
Point(9) = {0.026944, 0.736039, 0, 1.0};
Point(10) = {0.019031, 0.738104, 0, 1.0};
Point(11) = {0.011067, 0.740180, 0, 1.0};
Point(12) = {0.003155, 0.742209, 0, 1.0};
Point(13) = {-0.004617, 0.744125, 0, 1.0};
Point(14) = {-0.012164, 0.745867, 0, 1.0};
Point(15) = {-0.019421, 0.747376, 0, 1.0};
Point(16) = {-0.026326, 0.748595, 0, 1.0};
Point(17) = {-0.032830, 0.749467, 0, 1.0};
Point(18) = {-0.038931, 0.749932, 0, 1.0};
Point(19) = {-0.044650, 0.750000, 0, 1.0};
Point(20) = {-0.049973, 0.749711, 0, 1.0};
Point(21) = {-0.054876, 0.749105, 0, 1.0};
Point(22) = {-0.059320, 0.748234, 0, 1.0};
Point(23) = {-0.063264, 0.747140, 0, 1.0};
Point(24) = {-0.066674, 0.745865, 0, 1.0};
Point(25) = {-0.069514, 0.744460, 0, 1.0};
Point(26) = {-0.071757, 0.742973, 0, 1.0};
Point(27) = {-0.073378, 0.741467, 0, 1.0};
Point(28) = {-0.074355, 0.740021, 0, 1.0};
Point(29) = {-0.074506, 0.739646, 0, 1.0};
Point(30) = {-0.074610, 0.739263, 0, 1.0};
Point(31) = {-0.074642, 0.739019, 0, 1.0};
Point(32) = {-0.074646, 0.738789, 0, 1.0};
Point(33) = {-0.074636, 0.738680, 0, 1.0};
Point(34) = {-0.074617, 0.738577, 0, 1.0};
Point(35) = {-0.074585, 0.738482, 0, 1.0};
Point(36) = {-0.074537, 0.738389, 0, 1.0};
Point(37) = {-0.074474, 0.738296, 0, 1.0};
Point(38) = {-0.074399, 0.738204, 0, 1.0};
Point(39) = {-0.074211, 0.738016, 0, 1.0};
Point(40) = {-0.073982, 0.737825, 0, 1.0};
Point(41) = {-0.073563, 0.737534, 0, 1.0};
Point(42) = {-0.072222, 0.736805, 0, 1.0};
Point(43) = {-0.069607, 0.735767, 0, 1.0};
Point(44) = {-0.066144, 0.734708, 0, 1.0};
Point(45) = {-0.061877, 0.733631, 0, 1.0};
Point(46) = {-0.056849, 0.732524, 0, 1.0};
Point(47) = {-0.051136, 0.731374, 0, 1.0};
Point(48) = {-0.044833, 0.730183, 0, 1.0};
Point(49) = {-0.038035, 0.728973, 0, 1.0};
Point(50) = {-0.030831, 0.727772, 0, 1.0};
Point(51) = {-0.023306, 0.726610, 0, 1.0};
Point(52) = {-0.015541, 0.725508, 0, 1.0};
Point(53) = {-0.007615, 0.724486, 0, 1.0};
Point(54) = {0.000383, 0.723559, 0, 1.0};
Point(55) = {0.008369, 0.722743, 0, 1.0};
Point(56) = {0.016256, 0.722048, 0, 1.0};
Point(57) = {0.023958, 0.721486, 0, 1.0};
Point(58) = {0.031394, 0.721069, 0, 1.0};
Point(59) = {0.038481, 0.720809, 0, 1.0};
Point(60) = {0.045143, 0.720717, 0, 1.0};
Point(61) = {0.051303, 0.720836, 0, 1.0};
Point(62) = {0.056968, 0.721226, 0, 1.0};
Point(63) = {0.062219, 0.721830, 0, 1.0};
Point(64) = {0.067033, 0.722481, 0, 1.0};
Point(65) = {0.071282, 0.723058, 0, 1.0};
Point(66) = {0.074554, 0.723484, 0, 1.0};
Point(67) = {-0.074699, -0.724962, 0, 1.0};
Point(68) = {-0.071435, -0.725648, 0, 1.0};
Point(69) = {-0.067039, -0.726552, 0, 1.0};
Point(70) = {-0.061813, -0.727645, 0, 1.0};
Point(71) = {-0.055855, -0.728951, 0, 1.0};
Point(72) = {-0.049274, -0.730468, 0, 1.0};
Point(73) = {-0.042182, -0.732176, 0, 1.0};
Point(74) = {-0.034701, -0.734047, 0, 1.0};
Point(75) = {-0.026944, -0.736039, 0, 1.0};
Point(76) = {-0.019031, -0.738104, 0, 1.0};
Point(77) = {-0.011067, -0.740180, 0, 1.0};
Point(78) = {-0.003155, -0.742209, 0, 1.0};
Point(79) = {0.004617, -0.744125, 0, 1.0};
Point(80) = {0.012164, -0.745867, 0, 1.0};
Point(81) = {0.019421, -0.747376, 0, 1.0};
Point(82) = {0.026326, -0.748595, 0, 1.0};
Point(83) = {0.032830, -0.749467, 0, 1.0};
Point(84) = {0.038931, -0.749932, 0, 1.0};
Point(85) = {0.044650, -0.750000, 0, 1.0};
Point(86) = {0.049973, -0.749711, 0, 1.0};
Point(87) = {0.054876, -0.749105, 0, 1.0};
Point(88) = {0.059320, -0.748234, 0, 1.0};
Point(89) = {0.063264, -0.747140, 0, 1.0};
Point(90) = {0.066674, -0.745865, 0, 1.0};
Point(91) = {0.069514, -0.744460, 0, 1.0};
Point(92) = {0.071757, -0.742973, 0, 1.0};
Point(93) = {0.073378, -0.741467, 0, 1.0};
Point(94) = {0.074355, -0.740021, 0, 1.0};
Point(95) = {0.074506, -0.739646, 0, 1.0};
Point(96) = {0.074610, -0.739263, 0, 1.0};
Point(97) = {0.074642, -0.739019, 0, 1.0};
Point(98) = {0.074646, -0.738789, 0, 1.0};
Point(99) = {0.074636, -0.738680, 0, 1.0};
Point(100) = {0.074617, -0.738577, 0, 1.0};
Point(101) = {0.074585, -0.738482, 0, 1.0};
Point(102) = {0.074537, -0.738389, 0, 1.0};
Point(103) = {0.074474, -0.738296, 0, 1.0};
Point(104) = {0.074399, -0.738204, 0, 1.0};
Point(105) = {0.074211, -0.738016, 0, 1.0};
Point(106) = {0.073982, -0.737825, 0, 1.0};
Point(107) = {0.073563, -0.737534, 0, 1.0};
Point(108) = {0.072222, -0.736805, 0, 1.0};
Point(109) = {0.069607, -0.735767, 0, 1.0};
Point(110) = {0.066144, -0.734708, 0, 1.0};
Point(111) = {0.061877, -0.733631, 0, 1.0};
Point(112) = {0.056849, -0.732524, 0, 1.0};
Point(113) = {0.051136, -0.731374, 0, 1.0};
Point(114) = {0.044833, -0.730183, 0, 1.0};
Point(115) = {0.038035, -0.728973, 0, 1.0};
Point(116) = {0.030831, -0.727772, 0, 1.0};
Point(117) = {0.023306, -0.726610, 0, 1.0};
Point(118) = {0.015541, -0.725508, 0, 1.0};
Point(119) = {0.007615, -0.724486, 0, 1.0};
Point(120) = {-0.000383, -0.723559, 0, 1.0};
Point(121) = {-0.008369, -0.722743, 0, 1.0};
Point(122) = {-0.016256, -0.722048, 0, 1.0};
Point(123) = {-0.023958, -0.721486, 0, 1.0};
Point(124) = {-0.031394, -0.721069, 0, 1.0};
Point(125) = {-0.038481, -0.720809, 0, 1.0};
Point(126) = {-0.045143, -0.720717, 0, 1.0};
Point(127) = {-0.051303, -0.720836, 0, 1.0};
Point(128) = {-0.056968, -0.721226, 0, 1.0};
Point(129) = {-0.062219, -0.721830, 0, 1.0};
Point(130) = {-0.067033, -0.722481, 0, 1.0};
Point(131) = {-0.071282, -0.723058, 0, 1.0};
Point(132) = {-0.074554, -0.723484, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:17};
Spline(2) = {17:49};
Spline(3) = {49:66};
Spline(4) = {66,1};

// Lines: second blade (splines 5-8)
Spline(5) = {67:83};
Spline(6) = {83:115};
Spline(7) = {115:132};
Spline(8) = {132,67};

// Outer domain (points 20001-4 and lines)
Point(133) = {-13.50000000, -15.00000000, 0, 1.0};
Point(134) = {-13.50000000, 15.00000000, 0, 1.0};
Point(135) = {36.00000000, 15.00000000, 0, 1.0};
Point(136) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {133, 134};
Line(12) = {134, 135};
Line(13) = {135, 136};
Line(14) = {133, 136};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html