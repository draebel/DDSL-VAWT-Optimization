SetFactory("OpenCASCADE");

Point(1) = {0.149873, 0.719759, 0, 1.0};
Point(2) = {0.147189, 0.720363, 0, 1.0};
Point(3) = {0.143918, 0.721095, 0, 1.0};
Point(4) = {0.139526, 0.722139, 0, 1.0};
Point(5) = {0.133722, 0.723613, 0, 1.0};
Point(6) = {0.127649, 0.725267, 0, 1.0};
Point(7) = {0.121703, 0.726993, 0, 1.0};
Point(8) = {0.115764, 0.728811, 0, 1.0};
Point(9) = {0.109794, 0.730715, 0, 1.0};
Point(10) = {0.103775, 0.732693, 0, 1.0};
Point(11) = {0.097694, 0.734728, 0, 1.0};
Point(12) = {0.091574, 0.736795, 0, 1.0};
Point(13) = {0.085555, 0.738807, 0, 1.0};
Point(14) = {0.079662, 0.740715, 0, 1.0};
Point(15) = {0.073887, 0.742479, 0, 1.0};
Point(16) = {0.068203, 0.744066, 0, 1.0};
Point(17) = {0.062561, 0.745454, 0, 1.0};
Point(18) = {0.056908, 0.746643, 0, 1.0};
Point(19) = {0.051213, 0.747647, 0, 1.0};
Point(20) = {0.045474, 0.748474, 0, 1.0};
Point(21) = {0.039704, 0.749124, 0, 1.0};
Point(22) = {0.033913, 0.749596, 0, 1.0};
Point(23) = {0.028106, 0.749886, 0, 1.0};
Point(24) = {0.022288, 0.750000, 0, 1.0};
Point(25) = {0.016475, 0.749939, 0, 1.0};
Point(26) = {0.010681, 0.749697, 0, 1.0};
Point(27) = {0.004917, 0.749274, 0, 1.0};
Point(28) = {-0.000805, 0.748662, 0, 1.0};
Point(29) = {-0.006467, 0.747858, 0, 1.0};
Point(30) = {-0.012041, 0.746855, 0, 1.0};
Point(31) = {-0.017492, 0.745646, 0, 1.0};
Point(32) = {-0.022778, 0.744231, 0, 1.0};
Point(33) = {-0.027843, 0.742608, 0, 1.0};
Point(34) = {-0.032612, 0.740786, 0, 1.0};
Point(35) = {-0.036992, 0.738789, 0, 1.0};
Point(36) = {-0.040852, 0.736672, 0, 1.0};
Point(37) = {-0.044051, 0.734537, 0, 1.0};
Point(38) = {-0.046498, 0.732508, 0, 1.0};
Point(39) = {-0.048205, 0.730689, 0, 1.0};
Point(40) = {-0.049260, 0.729153, 0, 1.0};
Point(41) = {-0.049812, 0.727907, 0, 1.0};
Point(42) = {-0.050000, 0.726884, 0, 1.0};
Point(43) = {-0.049926, 0.726184, 0, 1.0};
Point(44) = {-0.049644, 0.725585, 0, 1.0};
Point(45) = {-0.049180, 0.725095, 0, 1.0};
Point(46) = {-0.048460, 0.724688, 0, 1.0};
Point(47) = {-0.047267, 0.724310, 0, 1.0};
Point(48) = {-0.045187, 0.723935, 0, 1.0};
Point(49) = {-0.041821, 0.723613, 0, 1.0};
Point(50) = {-0.037137, 0.723410, 0, 1.0};
Point(51) = {-0.031593, 0.723334, 0, 1.0};
Point(52) = {-0.025593, 0.723354, 0, 1.0};
Point(53) = {-0.019368, 0.723441, 0, 1.0};
Point(54) = {-0.013018, 0.723571, 0, 1.0};
Point(55) = {-0.006595, 0.723725, 0, 1.0};
Point(56) = {-0.000127, 0.723892, 0, 1.0};
Point(57) = {0.006370, 0.724062, 0, 1.0};
Point(58) = {0.012868, 0.724229, 0, 1.0};
Point(59) = {0.019348, 0.724388, 0, 1.0};
Point(60) = {0.025812, 0.724532, 0, 1.0};
Point(61) = {0.032260, 0.724659, 0, 1.0};
Point(62) = {0.038692, 0.724763, 0, 1.0};
Point(63) = {0.045109, 0.724841, 0, 1.0};
Point(64) = {0.051508, 0.724890, 0, 1.0};
Point(65) = {0.057892, 0.724900, 0, 1.0};
Point(66) = {0.064263, 0.724869, 0, 1.0};
Point(67) = {0.070625, 0.724795, 0, 1.0};
Point(68) = {0.076978, 0.724673, 0, 1.0};
Point(69) = {0.083327, 0.724506, 0, 1.0};
Point(70) = {0.089672, 0.724293, 0, 1.0};
Point(71) = {0.096011, 0.724035, 0, 1.0};
Point(72) = {0.102342, 0.723734, 0, 1.0};
Point(73) = {0.108660, 0.723385, 0, 1.0};
Point(74) = {0.114965, 0.722985, 0, 1.0};
Point(75) = {0.121266, 0.722532, 0, 1.0};
Point(76) = {0.127605, 0.722020, 0, 1.0};
Point(77) = {0.133926, 0.721451, 0, 1.0};
Point(78) = {0.139506, 0.720903, 0, 1.0};
Point(79) = {0.143824, 0.720445, 0, 1.0};
Point(80) = {0.147139, 0.720072, 0, 1.0};
Point(81) = {-0.149873, -0.719759, 0, 1.0};
Point(82) = {-0.147189, -0.720363, 0, 1.0};
Point(83) = {-0.143918, -0.721095, 0, 1.0};
Point(84) = {-0.139526, -0.722139, 0, 1.0};
Point(85) = {-0.133722, -0.723613, 0, 1.0};
Point(86) = {-0.127649, -0.725267, 0, 1.0};
Point(87) = {-0.121703, -0.726993, 0, 1.0};
Point(88) = {-0.115764, -0.728811, 0, 1.0};
Point(89) = {-0.109794, -0.730715, 0, 1.0};
Point(90) = {-0.103775, -0.732693, 0, 1.0};
Point(91) = {-0.097694, -0.734728, 0, 1.0};
Point(92) = {-0.091574, -0.736795, 0, 1.0};
Point(93) = {-0.085555, -0.738807, 0, 1.0};
Point(94) = {-0.079662, -0.740715, 0, 1.0};
Point(95) = {-0.073887, -0.742479, 0, 1.0};
Point(96) = {-0.068203, -0.744066, 0, 1.0};
Point(97) = {-0.062561, -0.745454, 0, 1.0};
Point(98) = {-0.056908, -0.746643, 0, 1.0};
Point(99) = {-0.051213, -0.747647, 0, 1.0};
Point(100) = {-0.045474, -0.748474, 0, 1.0};
Point(101) = {-0.039704, -0.749124, 0, 1.0};
Point(102) = {-0.033913, -0.749596, 0, 1.0};
Point(103) = {-0.028106, -0.749886, 0, 1.0};
Point(104) = {-0.022288, -0.750000, 0, 1.0};
Point(105) = {-0.016475, -0.749939, 0, 1.0};
Point(106) = {-0.010681, -0.749697, 0, 1.0};
Point(107) = {-0.004917, -0.749274, 0, 1.0};
Point(108) = {0.000805, -0.748662, 0, 1.0};
Point(109) = {0.006467, -0.747858, 0, 1.0};
Point(110) = {0.012041, -0.746855, 0, 1.0};
Point(111) = {0.017492, -0.745646, 0, 1.0};
Point(112) = {0.022778, -0.744231, 0, 1.0};
Point(113) = {0.027843, -0.742608, 0, 1.0};
Point(114) = {0.032612, -0.740786, 0, 1.0};
Point(115) = {0.036992, -0.738789, 0, 1.0};
Point(116) = {0.040852, -0.736672, 0, 1.0};
Point(117) = {0.044051, -0.734537, 0, 1.0};
Point(118) = {0.046498, -0.732508, 0, 1.0};
Point(119) = {0.048205, -0.730689, 0, 1.0};
Point(120) = {0.049260, -0.729153, 0, 1.0};
Point(121) = {0.049812, -0.727907, 0, 1.0};
Point(122) = {0.050000, -0.726884, 0, 1.0};
Point(123) = {0.049926, -0.726184, 0, 1.0};
Point(124) = {0.049644, -0.725585, 0, 1.0};
Point(125) = {0.049180, -0.725095, 0, 1.0};
Point(126) = {0.048460, -0.724688, 0, 1.0};
Point(127) = {0.047267, -0.724310, 0, 1.0};
Point(128) = {0.045187, -0.723935, 0, 1.0};
Point(129) = {0.041821, -0.723613, 0, 1.0};
Point(130) = {0.037137, -0.723410, 0, 1.0};
Point(131) = {0.031593, -0.723334, 0, 1.0};
Point(132) = {0.025593, -0.723354, 0, 1.0};
Point(133) = {0.019368, -0.723441, 0, 1.0};
Point(134) = {0.013018, -0.723571, 0, 1.0};
Point(135) = {0.006595, -0.723725, 0, 1.0};
Point(136) = {0.000127, -0.723892, 0, 1.0};
Point(137) = {-0.006370, -0.724062, 0, 1.0};
Point(138) = {-0.012868, -0.724229, 0, 1.0};
Point(139) = {-0.019348, -0.724388, 0, 1.0};
Point(140) = {-0.025812, -0.724532, 0, 1.0};
Point(141) = {-0.032260, -0.724659, 0, 1.0};
Point(142) = {-0.038692, -0.724763, 0, 1.0};
Point(143) = {-0.045109, -0.724841, 0, 1.0};
Point(144) = {-0.051508, -0.724890, 0, 1.0};
Point(145) = {-0.057892, -0.724900, 0, 1.0};
Point(146) = {-0.064263, -0.724869, 0, 1.0};
Point(147) = {-0.070625, -0.724795, 0, 1.0};
Point(148) = {-0.076978, -0.724673, 0, 1.0};
Point(149) = {-0.083327, -0.724506, 0, 1.0};
Point(150) = {-0.089672, -0.724293, 0, 1.0};
Point(151) = {-0.096011, -0.724035, 0, 1.0};
Point(152) = {-0.102342, -0.723734, 0, 1.0};
Point(153) = {-0.108660, -0.723385, 0, 1.0};
Point(154) = {-0.114965, -0.722985, 0, 1.0};
Point(155) = {-0.121266, -0.722532, 0, 1.0};
Point(156) = {-0.127605, -0.722020, 0, 1.0};
Point(157) = {-0.133926, -0.721451, 0, 1.0};
Point(158) = {-0.139506, -0.720903, 0, 1.0};
Point(159) = {-0.143824, -0.720445, 0, 1.0};
Point(160) = {-0.147139, -0.720072, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html