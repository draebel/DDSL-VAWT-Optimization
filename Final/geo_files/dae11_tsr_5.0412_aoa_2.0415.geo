SetFactory("OpenCASCADE");

Point(1) = {0.112429, 0.727320, 0, 1.0};
Point(2) = {0.110416, 0.727772, 0, 1.0};
Point(3) = {0.107963, 0.728322, 0, 1.0};
Point(4) = {0.104668, 0.729104, 0, 1.0};
Point(5) = {0.100315, 0.730210, 0, 1.0};
Point(6) = {0.095760, 0.731451, 0, 1.0};
Point(7) = {0.091301, 0.732745, 0, 1.0};
Point(8) = {0.086847, 0.734108, 0, 1.0};
Point(9) = {0.082369, 0.735536, 0, 1.0};
Point(10) = {0.077855, 0.737020, 0, 1.0};
Point(11) = {0.073294, 0.738546, 0, 1.0};
Point(12) = {0.068704, 0.740096, 0, 1.0};
Point(13) = {0.064190, 0.741605, 0, 1.0};
Point(14) = {0.059771, 0.743036, 0, 1.0};
Point(15) = {0.055439, 0.744359, 0, 1.0};
Point(16) = {0.051176, 0.745549, 0, 1.0};
Point(17) = {0.046945, 0.746590, 0, 1.0};
Point(18) = {0.042705, 0.747482, 0, 1.0};
Point(19) = {0.038434, 0.748235, 0, 1.0};
Point(20) = {0.034130, 0.748856, 0, 1.0};
Point(21) = {0.029802, 0.749343, 0, 1.0};
Point(22) = {0.025459, 0.749697, 0, 1.0};
Point(23) = {0.021103, 0.749915, 0, 1.0};
Point(24) = {0.016740, 0.750000, 0, 1.0};
Point(25) = {0.012380, 0.749954, 0, 1.0};
Point(26) = {0.008035, 0.749773, 0, 1.0};
Point(27) = {0.003712, 0.749455, 0, 1.0};
Point(28) = {-0.000580, 0.748997, 0, 1.0};
Point(29) = {-0.004826, 0.748394, 0, 1.0};
Point(30) = {-0.009007, 0.747641, 0, 1.0};
Point(31) = {-0.013095, 0.746734, 0, 1.0};
Point(32) = {-0.017060, 0.745673, 0, 1.0};
Point(33) = {-0.020858, 0.744456, 0, 1.0};
Point(34) = {-0.024435, 0.743090, 0, 1.0};
Point(35) = {-0.027720, 0.741592, 0, 1.0};
Point(36) = {-0.030615, 0.740004, 0, 1.0};
Point(37) = {-0.033014, 0.738403, 0, 1.0};
Point(38) = {-0.034850, 0.736881, 0, 1.0};
Point(39) = {-0.036130, 0.735517, 0, 1.0};
Point(40) = {-0.036921, 0.734365, 0, 1.0};
Point(41) = {-0.037335, 0.733430, 0, 1.0};
Point(42) = {-0.037476, 0.732663, 0, 1.0};
Point(43) = {-0.037421, 0.732138, 0, 1.0};
Point(44) = {-0.037209, 0.731689, 0, 1.0};
Point(45) = {-0.036861, 0.731322, 0, 1.0};
Point(46) = {-0.036321, 0.731016, 0, 1.0};
Point(47) = {-0.035426, 0.730733, 0, 1.0};
Point(48) = {-0.033867, 0.730451, 0, 1.0};
Point(49) = {-0.031342, 0.730210, 0, 1.0};
Point(50) = {-0.027829, 0.730058, 0, 1.0};
Point(51) = {-0.023671, 0.730000, 0, 1.0};
Point(52) = {-0.019171, 0.730015, 0, 1.0};
Point(53) = {-0.014502, 0.730081, 0, 1.0};
Point(54) = {-0.009740, 0.730178, 0, 1.0};
Point(55) = {-0.004922, 0.730294, 0, 1.0};
Point(56) = {-0.000072, 0.730419, 0, 1.0};
Point(57) = {0.004801, 0.730546, 0, 1.0};
Point(58) = {0.009674, 0.730672, 0, 1.0};
Point(59) = {0.014535, 0.730791, 0, 1.0};
Point(60) = {0.019383, 0.730899, 0, 1.0};
Point(61) = {0.024219, 0.730995, 0, 1.0};
Point(62) = {0.029042, 0.731072, 0, 1.0};
Point(63) = {0.033855, 0.731131, 0, 1.0};
Point(64) = {0.038655, 0.731167, 0, 1.0};
Point(65) = {0.043443, 0.731175, 0, 1.0};
Point(66) = {0.048221, 0.731152, 0, 1.0};
Point(67) = {0.052992, 0.731096, 0, 1.0};
Point(68) = {0.057757, 0.731005, 0, 1.0};
Point(69) = {0.062519, 0.730880, 0, 1.0};
Point(70) = {0.067277, 0.730720, 0, 1.0};
Point(71) = {0.072032, 0.730527, 0, 1.0};
Point(72) = {0.076781, 0.730300, 0, 1.0};
Point(73) = {0.081519, 0.730039, 0, 1.0};
Point(74) = {0.086248, 0.729739, 0, 1.0};
Point(75) = {0.090973, 0.729399, 0, 1.0};
Point(76) = {0.095728, 0.729015, 0, 1.0};
Point(77) = {0.100468, 0.728589, 0, 1.0};
Point(78) = {0.104653, 0.728177, 0, 1.0};
Point(79) = {0.107892, 0.727834, 0, 1.0};
Point(80) = {0.110378, 0.727554, 0, 1.0};
Point(81) = {-0.112429, -0.727320, 0, 1.0};
Point(82) = {-0.110416, -0.727772, 0, 1.0};
Point(83) = {-0.107963, -0.728322, 0, 1.0};
Point(84) = {-0.104668, -0.729104, 0, 1.0};
Point(85) = {-0.100315, -0.730210, 0, 1.0};
Point(86) = {-0.095760, -0.731451, 0, 1.0};
Point(87) = {-0.091301, -0.732745, 0, 1.0};
Point(88) = {-0.086847, -0.734108, 0, 1.0};
Point(89) = {-0.082369, -0.735536, 0, 1.0};
Point(90) = {-0.077855, -0.737020, 0, 1.0};
Point(91) = {-0.073294, -0.738546, 0, 1.0};
Point(92) = {-0.068704, -0.740096, 0, 1.0};
Point(93) = {-0.064190, -0.741605, 0, 1.0};
Point(94) = {-0.059771, -0.743036, 0, 1.0};
Point(95) = {-0.055439, -0.744359, 0, 1.0};
Point(96) = {-0.051176, -0.745549, 0, 1.0};
Point(97) = {-0.046945, -0.746590, 0, 1.0};
Point(98) = {-0.042705, -0.747482, 0, 1.0};
Point(99) = {-0.038434, -0.748235, 0, 1.0};
Point(100) = {-0.034130, -0.748856, 0, 1.0};
Point(101) = {-0.029802, -0.749343, 0, 1.0};
Point(102) = {-0.025459, -0.749697, 0, 1.0};
Point(103) = {-0.021103, -0.749915, 0, 1.0};
Point(104) = {-0.016740, -0.750000, 0, 1.0};
Point(105) = {-0.012380, -0.749954, 0, 1.0};
Point(106) = {-0.008035, -0.749773, 0, 1.0};
Point(107) = {-0.003712, -0.749455, 0, 1.0};
Point(108) = {0.000580, -0.748997, 0, 1.0};
Point(109) = {0.004826, -0.748394, 0, 1.0};
Point(110) = {0.009007, -0.747641, 0, 1.0};
Point(111) = {0.013095, -0.746734, 0, 1.0};
Point(112) = {0.017060, -0.745673, 0, 1.0};
Point(113) = {0.020858, -0.744456, 0, 1.0};
Point(114) = {0.024435, -0.743090, 0, 1.0};
Point(115) = {0.027720, -0.741592, 0, 1.0};
Point(116) = {0.030615, -0.740004, 0, 1.0};
Point(117) = {0.033014, -0.738403, 0, 1.0};
Point(118) = {0.034850, -0.736881, 0, 1.0};
Point(119) = {0.036130, -0.735517, 0, 1.0};
Point(120) = {0.036921, -0.734365, 0, 1.0};
Point(121) = {0.037335, -0.733430, 0, 1.0};
Point(122) = {0.037476, -0.732663, 0, 1.0};
Point(123) = {0.037421, -0.732138, 0, 1.0};
Point(124) = {0.037209, -0.731689, 0, 1.0};
Point(125) = {0.036861, -0.731322, 0, 1.0};
Point(126) = {0.036321, -0.731016, 0, 1.0};
Point(127) = {0.035426, -0.730733, 0, 1.0};
Point(128) = {0.033867, -0.730451, 0, 1.0};
Point(129) = {0.031342, -0.730210, 0, 1.0};
Point(130) = {0.027829, -0.730058, 0, 1.0};
Point(131) = {0.023671, -0.730000, 0, 1.0};
Point(132) = {0.019171, -0.730015, 0, 1.0};
Point(133) = {0.014502, -0.730081, 0, 1.0};
Point(134) = {0.009740, -0.730178, 0, 1.0};
Point(135) = {0.004922, -0.730294, 0, 1.0};
Point(136) = {0.000072, -0.730419, 0, 1.0};
Point(137) = {-0.004801, -0.730546, 0, 1.0};
Point(138) = {-0.009674, -0.730672, 0, 1.0};
Point(139) = {-0.014535, -0.730791, 0, 1.0};
Point(140) = {-0.019383, -0.730899, 0, 1.0};
Point(141) = {-0.024219, -0.730995, 0, 1.0};
Point(142) = {-0.029042, -0.731072, 0, 1.0};
Point(143) = {-0.033855, -0.731131, 0, 1.0};
Point(144) = {-0.038655, -0.731167, 0, 1.0};
Point(145) = {-0.043443, -0.731175, 0, 1.0};
Point(146) = {-0.048221, -0.731152, 0, 1.0};
Point(147) = {-0.052992, -0.731096, 0, 1.0};
Point(148) = {-0.057757, -0.731005, 0, 1.0};
Point(149) = {-0.062519, -0.730880, 0, 1.0};
Point(150) = {-0.067277, -0.730720, 0, 1.0};
Point(151) = {-0.072032, -0.730527, 0, 1.0};
Point(152) = {-0.076781, -0.730300, 0, 1.0};
Point(153) = {-0.081519, -0.730039, 0, 1.0};
Point(154) = {-0.086248, -0.729739, 0, 1.0};
Point(155) = {-0.090973, -0.729399, 0, 1.0};
Point(156) = {-0.095728, -0.729015, 0, 1.0};
Point(157) = {-0.100468, -0.728589, 0, 1.0};
Point(158) = {-0.104653, -0.728177, 0, 1.0};
Point(159) = {-0.107892, -0.727834, 0, 1.0};
Point(160) = {-0.110378, -0.727554, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html