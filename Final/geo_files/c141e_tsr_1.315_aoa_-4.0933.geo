SetFactory("OpenCASCADE");

Point(1) = {0.074737, 0.745345, 0, 1.0};
Point(2) = {0.072205, 0.745771, 0, 1.0};
Point(3) = {0.068942, 0.746298, 0, 1.0};
Point(4) = {0.065021, 0.746890, 0, 1.0};
Point(5) = {0.060484, 0.747502, 0, 1.0};
Point(6) = {0.055377, 0.748075, 0, 1.0};
Point(7) = {0.049751, 0.748597, 0, 1.0};
Point(8) = {0.043657, 0.749085, 0, 1.0};
Point(9) = {0.037158, 0.749482, 0, 1.0};
Point(10) = {0.030319, 0.749774, 0, 1.0};
Point(11) = {0.023203, 0.749952, 0, 1.0};
Point(12) = {0.015883, 0.750000, 0, 1.0};
Point(13) = {0.008428, 0.749910, 0, 1.0};
Point(14) = {0.000910, 0.749679, 0, 1.0};
Point(15) = {-0.006597, 0.749303, 0, 1.0};
Point(16) = {-0.014022, 0.748789, 0, 1.0};
Point(17) = {-0.021293, 0.748144, 0, 1.0};
Point(18) = {-0.028342, 0.747399, 0, 1.0};
Point(19) = {-0.035102, 0.746576, 0, 1.0};
Point(20) = {-0.041509, 0.745683, 0, 1.0};
Point(21) = {-0.047500, 0.744743, 0, 1.0};
Point(22) = {-0.053020, 0.743765, 0, 1.0};
Point(23) = {-0.058010, 0.742709, 0, 1.0};
Point(24) = {-0.062421, 0.741564, 0, 1.0};
Point(25) = {-0.066217, 0.740419, 0, 1.0};
Point(26) = {-0.069358, 0.739230, 0, 1.0};
Point(27) = {-0.071809, 0.737977, 0, 1.0};
Point(28) = {-0.073552, 0.736717, 0, 1.0};
Point(29) = {-0.074559, 0.735330, 0, 1.0};
Point(30) = {-0.074809, 0.733643, 0, 1.0};
Point(31) = {-0.074354, 0.732466, 0, 1.0};
Point(32) = {-0.073175, 0.731448, 0, 1.0};
Point(33) = {-0.071292, 0.730755, 0, 1.0};
Point(34) = {-0.068721, 0.730331, 0, 1.0};
Point(35) = {-0.065482, 0.730142, 0, 1.0};
Point(36) = {-0.061604, 0.730144, 0, 1.0};
Point(37) = {-0.057118, 0.730249, 0, 1.0};
Point(38) = {-0.052065, 0.730425, 0, 1.0};
Point(39) = {-0.046491, 0.730634, 0, 1.0};
Point(40) = {-0.040452, 0.730922, 0, 1.0};
Point(41) = {-0.034007, 0.731269, 0, 1.0};
Point(42) = {-0.027218, 0.731683, 0, 1.0};
Point(43) = {-0.020149, 0.732161, 0, 1.0};
Point(44) = {-0.012872, 0.732712, 0, 1.0};
Point(45) = {-0.005456, 0.733349, 0, 1.0};
Point(46) = {0.002027, 0.734066, 0, 1.0};
Point(47) = {0.009505, 0.734854, 0, 1.0};
Point(48) = {0.016905, 0.735716, 0, 1.0};
Point(49) = {0.024157, 0.736621, 0, 1.0};
Point(50) = {0.031194, 0.737541, 0, 1.0};
Point(51) = {0.037948, 0.738447, 0, 1.0};
Point(52) = {0.044356, 0.739319, 0, 1.0};
Point(53) = {0.050355, 0.740151, 0, 1.0};
Point(54) = {0.055887, 0.740952, 0, 1.0};
Point(55) = {0.060899, 0.741702, 0, 1.0};
Point(56) = {0.065344, 0.742383, 0, 1.0};
Point(57) = {0.069179, 0.742979, 0, 1.0};
Point(58) = {0.072369, 0.743479, 0, 1.0};
Point(59) = {0.074844, 0.743862, 0, 1.0};
Point(60) = {-0.074737, -0.745345, 0, 1.0};
Point(61) = {-0.072205, -0.745771, 0, 1.0};
Point(62) = {-0.068942, -0.746298, 0, 1.0};
Point(63) = {-0.065021, -0.746890, 0, 1.0};
Point(64) = {-0.060484, -0.747502, 0, 1.0};
Point(65) = {-0.055377, -0.748075, 0, 1.0};
Point(66) = {-0.049751, -0.748597, 0, 1.0};
Point(67) = {-0.043657, -0.749085, 0, 1.0};
Point(68) = {-0.037158, -0.749482, 0, 1.0};
Point(69) = {-0.030319, -0.749774, 0, 1.0};
Point(70) = {-0.023203, -0.749952, 0, 1.0};
Point(71) = {-0.015883, -0.750000, 0, 1.0};
Point(72) = {-0.008428, -0.749910, 0, 1.0};
Point(73) = {-0.000910, -0.749679, 0, 1.0};
Point(74) = {0.006597, -0.749303, 0, 1.0};
Point(75) = {0.014022, -0.748789, 0, 1.0};
Point(76) = {0.021293, -0.748144, 0, 1.0};
Point(77) = {0.028342, -0.747399, 0, 1.0};
Point(78) = {0.035102, -0.746576, 0, 1.0};
Point(79) = {0.041509, -0.745683, 0, 1.0};
Point(80) = {0.047500, -0.744743, 0, 1.0};
Point(81) = {0.053020, -0.743765, 0, 1.0};
Point(82) = {0.058010, -0.742709, 0, 1.0};
Point(83) = {0.062421, -0.741564, 0, 1.0};
Point(84) = {0.066217, -0.740419, 0, 1.0};
Point(85) = {0.069358, -0.739230, 0, 1.0};
Point(86) = {0.071809, -0.737977, 0, 1.0};
Point(87) = {0.073552, -0.736717, 0, 1.0};
Point(88) = {0.074559, -0.735330, 0, 1.0};
Point(89) = {0.074809, -0.733643, 0, 1.0};
Point(90) = {0.074354, -0.732466, 0, 1.0};
Point(91) = {0.073175, -0.731448, 0, 1.0};
Point(92) = {0.071292, -0.730755, 0, 1.0};
Point(93) = {0.068721, -0.730331, 0, 1.0};
Point(94) = {0.065482, -0.730142, 0, 1.0};
Point(95) = {0.061604, -0.730144, 0, 1.0};
Point(96) = {0.057118, -0.730249, 0, 1.0};
Point(97) = {0.052065, -0.730425, 0, 1.0};
Point(98) = {0.046491, -0.730634, 0, 1.0};
Point(99) = {0.040452, -0.730922, 0, 1.0};
Point(100) = {0.034007, -0.731269, 0, 1.0};
Point(101) = {0.027218, -0.731683, 0, 1.0};
Point(102) = {0.020149, -0.732161, 0, 1.0};
Point(103) = {0.012872, -0.732712, 0, 1.0};
Point(104) = {0.005456, -0.733349, 0, 1.0};
Point(105) = {-0.002027, -0.734066, 0, 1.0};
Point(106) = {-0.009505, -0.734854, 0, 1.0};
Point(107) = {-0.016905, -0.735716, 0, 1.0};
Point(108) = {-0.024157, -0.736621, 0, 1.0};
Point(109) = {-0.031194, -0.737541, 0, 1.0};
Point(110) = {-0.037948, -0.738447, 0, 1.0};
Point(111) = {-0.044356, -0.739319, 0, 1.0};
Point(112) = {-0.050355, -0.740151, 0, 1.0};
Point(113) = {-0.055887, -0.740952, 0, 1.0};
Point(114) = {-0.060899, -0.741702, 0, 1.0};
Point(115) = {-0.065344, -0.742383, 0, 1.0};
Point(116) = {-0.069179, -0.742979, 0, 1.0};
Point(117) = {-0.072369, -0.743479, 0, 1.0};
Point(118) = {-0.074844, -0.743862, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:19};
Spline(2) = {19:41};
Spline(3) = {41:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:78};
Spline(6) = {78:100};
Spline(7) = {100:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html