SetFactory("OpenCASCADE");

Point(1) = {0.074323, 0.745652, 0, 1.0};
Point(2) = {0.071182, 0.745900, 0, 1.0};
Point(3) = {0.063319, 0.746500, 0, 1.0};
Point(4) = {0.055453, 0.747128, 0, 1.0};
Point(5) = {0.047585, 0.747768, 0, 1.0};
Point(6) = {0.039720, 0.748392, 0, 1.0};
Point(7) = {0.031860, 0.748965, 0, 1.0};
Point(8) = {0.024011, 0.749452, 0, 1.0};
Point(9) = {0.016178, 0.749811, 0, 1.0};
Point(10) = {0.008366, 0.750000, 0, 1.0};
Point(11) = {0.000579, 0.749973, 0, 1.0};
Point(12) = {-0.007176, 0.749693, 0, 1.0};
Point(13) = {-0.011041, 0.749449, 0, 1.0};
Point(14) = {-0.014897, 0.749133, 0, 1.0};
Point(15) = {-0.018744, 0.748744, 0, 1.0};
Point(16) = {-0.022583, 0.748285, 0, 1.0};
Point(17) = {-0.026414, 0.747761, 0, 1.0};
Point(18) = {-0.030237, 0.747170, 0, 1.0};
Point(19) = {-0.034050, 0.746506, 0, 1.0};
Point(20) = {-0.037853, 0.745751, 0, 1.0};
Point(21) = {-0.041642, 0.744880, 0, 1.0};
Point(22) = {-0.045414, 0.743875, 0, 1.0};
Point(23) = {-0.049167, 0.742715, 0, 1.0};
Point(24) = {-0.052899, 0.741378, 0, 1.0};
Point(25) = {-0.056606, 0.739838, 0, 1.0};
Point(26) = {-0.060284, 0.738065, 0, 1.0};
Point(27) = {-0.062111, 0.737081, 0, 1.0};
Point(28) = {-0.063930, 0.736028, 0, 1.0};
Point(29) = {-0.065741, 0.734907, 0, 1.0};
Point(30) = {-0.067543, 0.733715, 0, 1.0};
Point(31) = {-0.069335, 0.732439, 0, 1.0};
Point(32) = {-0.071112, 0.731043, 0, 1.0};
Point(33) = {-0.073206, 0.729050, 0, 1.0};
Point(34) = {-0.074448, 0.726465, 0, 1.0};
Point(35) = {-0.072692, 0.724838, 0, 1.0};
Point(36) = {-0.070280, 0.724219, 0, 1.0};
Point(37) = {-0.068295, 0.723916, 0, 1.0};
Point(38) = {-0.066320, 0.723687, 0, 1.0};
Point(39) = {-0.064349, 0.723494, 0, 1.0};
Point(40) = {-0.062381, 0.723326, 0, 1.0};
Point(41) = {-0.060416, 0.723184, 0, 1.0};
Point(42) = {-0.058455, 0.723071, 0, 1.0};
Point(43) = {-0.054545, 0.722942, 0, 1.0};
Point(44) = {-0.050648, 0.722928, 0, 1.0};
Point(45) = {-0.046764, 0.723012, 0, 1.0};
Point(46) = {-0.042889, 0.723178, 0, 1.0};
Point(47) = {-0.039023, 0.723410, 0, 1.0};
Point(48) = {-0.035163, 0.723700, 0, 1.0};
Point(49) = {-0.031310, 0.724042, 0, 1.0};
Point(50) = {-0.027463, 0.724430, 0, 1.0};
Point(51) = {-0.023621, 0.724858, 0, 1.0};
Point(52) = {-0.019783, 0.725323, 0, 1.0};
Point(53) = {-0.015948, 0.725821, 0, 1.0};
Point(54) = {-0.012118, 0.726347, 0, 1.0};
Point(55) = {-0.008291, 0.726901, 0, 1.0};
Point(56) = {-0.004467, 0.727484, 0, 1.0};
Point(57) = {0.003170, 0.728737, 0, 1.0};
Point(58) = {0.010793, 0.730098, 0, 1.0};
Point(59) = {0.018403, 0.731567, 0, 1.0};
Point(60) = {0.026002, 0.733129, 0, 1.0};
Point(61) = {0.033592, 0.734770, 0, 1.0};
Point(62) = {0.041173, 0.736474, 0, 1.0};
Point(63) = {0.048750, 0.738216, 0, 1.0};
Point(64) = {0.056325, 0.739978, 0, 1.0};
Point(65) = {0.063900, 0.741737, 0, 1.0};
Point(66) = {0.071477, 0.743480, 0, 1.0};
Point(67) = {0.074503, 0.744174, 0, 1.0};
Point(68) = {-0.074323, -0.745652, 0, 1.0};
Point(69) = {-0.071182, -0.745900, 0, 1.0};
Point(70) = {-0.063319, -0.746500, 0, 1.0};
Point(71) = {-0.055453, -0.747128, 0, 1.0};
Point(72) = {-0.047585, -0.747768, 0, 1.0};
Point(73) = {-0.039720, -0.748392, 0, 1.0};
Point(74) = {-0.031860, -0.748965, 0, 1.0};
Point(75) = {-0.024011, -0.749452, 0, 1.0};
Point(76) = {-0.016178, -0.749811, 0, 1.0};
Point(77) = {-0.008366, -0.750000, 0, 1.0};
Point(78) = {-0.000579, -0.749973, 0, 1.0};
Point(79) = {0.007176, -0.749693, 0, 1.0};
Point(80) = {0.011041, -0.749449, 0, 1.0};
Point(81) = {0.014897, -0.749133, 0, 1.0};
Point(82) = {0.018744, -0.748744, 0, 1.0};
Point(83) = {0.022583, -0.748285, 0, 1.0};
Point(84) = {0.026414, -0.747761, 0, 1.0};
Point(85) = {0.030237, -0.747170, 0, 1.0};
Point(86) = {0.034050, -0.746506, 0, 1.0};
Point(87) = {0.037853, -0.745751, 0, 1.0};
Point(88) = {0.041642, -0.744880, 0, 1.0};
Point(89) = {0.045414, -0.743875, 0, 1.0};
Point(90) = {0.049167, -0.742715, 0, 1.0};
Point(91) = {0.052899, -0.741378, 0, 1.0};
Point(92) = {0.056606, -0.739838, 0, 1.0};
Point(93) = {0.060284, -0.738065, 0, 1.0};
Point(94) = {0.062111, -0.737081, 0, 1.0};
Point(95) = {0.063930, -0.736028, 0, 1.0};
Point(96) = {0.065741, -0.734907, 0, 1.0};
Point(97) = {0.067543, -0.733715, 0, 1.0};
Point(98) = {0.069335, -0.732439, 0, 1.0};
Point(99) = {0.071112, -0.731043, 0, 1.0};
Point(100) = {0.073206, -0.729050, 0, 1.0};
Point(101) = {0.074448, -0.726465, 0, 1.0};
Point(102) = {0.072692, -0.724838, 0, 1.0};
Point(103) = {0.070280, -0.724219, 0, 1.0};
Point(104) = {0.068295, -0.723916, 0, 1.0};
Point(105) = {0.066320, -0.723687, 0, 1.0};
Point(106) = {0.064349, -0.723494, 0, 1.0};
Point(107) = {0.062381, -0.723326, 0, 1.0};
Point(108) = {0.060416, -0.723184, 0, 1.0};
Point(109) = {0.058455, -0.723071, 0, 1.0};
Point(110) = {0.054545, -0.722942, 0, 1.0};
Point(111) = {0.050648, -0.722928, 0, 1.0};
Point(112) = {0.046764, -0.723012, 0, 1.0};
Point(113) = {0.042889, -0.723178, 0, 1.0};
Point(114) = {0.039023, -0.723410, 0, 1.0};
Point(115) = {0.035163, -0.723700, 0, 1.0};
Point(116) = {0.031310, -0.724042, 0, 1.0};
Point(117) = {0.027463, -0.724430, 0, 1.0};
Point(118) = {0.023621, -0.724858, 0, 1.0};
Point(119) = {0.019783, -0.725323, 0, 1.0};
Point(120) = {0.015948, -0.725821, 0, 1.0};
Point(121) = {0.012118, -0.726347, 0, 1.0};
Point(122) = {0.008291, -0.726901, 0, 1.0};
Point(123) = {0.004467, -0.727484, 0, 1.0};
Point(124) = {-0.003170, -0.728737, 0, 1.0};
Point(125) = {-0.010793, -0.730098, 0, 1.0};
Point(126) = {-0.018403, -0.731567, 0, 1.0};
Point(127) = {-0.026002, -0.733129, 0, 1.0};
Point(128) = {-0.033592, -0.734770, 0, 1.0};
Point(129) = {-0.041173, -0.736474, 0, 1.0};
Point(130) = {-0.048750, -0.738216, 0, 1.0};
Point(131) = {-0.056325, -0.739978, 0, 1.0};
Point(132) = {-0.063900, -0.741737, 0, 1.0};
Point(133) = {-0.071477, -0.743480, 0, 1.0};
Point(134) = {-0.074503, -0.744174, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:19};
Spline(2) = {19:48};
Spline(3) = {48:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:86};
Spline(6) = {86:115};
Spline(7) = {115:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html