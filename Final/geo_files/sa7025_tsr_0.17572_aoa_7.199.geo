SetFactory("OpenCASCADE");

Point(1) = {0.074660, 0.726536, 0, 1.0};
Point(2) = {0.072697, 0.727154, 0, 1.0};
Point(3) = {0.069157, 0.728325, 0, 1.0};
Point(4) = {0.065285, 0.729592, 0, 1.0};
Point(5) = {0.061105, 0.730931, 0, 1.0};
Point(6) = {0.056642, 0.732316, 0, 1.0};
Point(7) = {0.051920, 0.733731, 0, 1.0};
Point(8) = {0.046966, 0.735148, 0, 1.0};
Point(9) = {0.041795, 0.736549, 0, 1.0};
Point(10) = {0.036424, 0.737932, 0, 1.0};
Point(11) = {0.030887, 0.739290, 0, 1.0};
Point(12) = {0.025221, 0.740612, 0, 1.0};
Point(13) = {0.019456, 0.741886, 0, 1.0};
Point(14) = {0.013626, 0.743103, 0, 1.0};
Point(15) = {0.007766, 0.744248, 0, 1.0};
Point(16) = {0.001907, 0.745313, 0, 1.0};
Point(17) = {-0.003918, 0.746289, 0, 1.0};
Point(18) = {-0.009676, 0.747164, 0, 1.0};
Point(19) = {-0.015341, 0.747933, 0, 1.0};
Point(20) = {-0.020877, 0.748587, 0, 1.0};
Point(21) = {-0.026260, 0.749120, 0, 1.0};
Point(22) = {-0.031463, 0.749532, 0, 1.0};
Point(23) = {-0.036457, 0.749816, 0, 1.0};
Point(24) = {-0.041221, 0.749970, 0, 1.0};
Point(25) = {-0.045731, 0.750000, 0, 1.0};
Point(26) = {-0.049966, 0.749902, 0, 1.0};
Point(27) = {-0.053912, 0.749681, 0, 1.0};
Point(28) = {-0.057546, 0.749345, 0, 1.0};
Point(29) = {-0.060856, 0.748899, 0, 1.0};
Point(30) = {-0.063830, 0.748358, 0, 1.0};
Point(31) = {-0.066453, 0.747730, 0, 1.0};
Point(32) = {-0.068720, 0.747027, 0, 1.0};
Point(33) = {-0.070623, 0.746276, 0, 1.0};
Point(34) = {-0.072150, 0.745495, 0, 1.0};
Point(35) = {-0.073295, 0.744706, 0, 1.0};
Point(36) = {-0.074050, 0.743943, 0, 1.0};
Point(37) = {-0.074409, 0.743347, 0, 1.0};
Point(38) = {-0.074244, 0.742734, 0, 1.0};
Point(39) = {-0.073475, 0.742239, 0, 1.0};
Point(40) = {-0.072198, 0.741709, 0, 1.0};
Point(41) = {-0.070438, 0.741182, 0, 1.0};
Point(42) = {-0.068197, 0.740673, 0, 1.0};
Point(43) = {-0.065473, 0.740177, 0, 1.0};
Point(44) = {-0.062284, 0.739689, 0, 1.0};
Point(45) = {-0.058645, 0.739213, 0, 1.0};
Point(46) = {-0.054576, 0.738744, 0, 1.0};
Point(47) = {-0.050099, 0.738279, 0, 1.0};
Point(48) = {-0.045240, 0.737815, 0, 1.0};
Point(49) = {-0.040028, 0.737349, 0, 1.0};
Point(50) = {-0.034494, 0.736876, 0, 1.0};
Point(51) = {-0.028673, 0.736394, 0, 1.0};
Point(52) = {-0.022602, 0.735898, 0, 1.0};
Point(53) = {-0.016318, 0.735383, 0, 1.0};
Point(54) = {-0.009865, 0.734846, 0, 1.0};
Point(55) = {-0.003287, 0.734283, 0, 1.0};
Point(56) = {0.003372, 0.733689, 0, 1.0};
Point(57) = {0.010066, 0.733061, 0, 1.0};
Point(58) = {0.016736, 0.732392, 0, 1.0};
Point(59) = {0.023321, 0.731689, 0, 1.0};
Point(60) = {0.029777, 0.730967, 0, 1.0};
Point(61) = {0.036060, 0.730235, 0, 1.0};
Point(62) = {0.042127, 0.729500, 0, 1.0};
Point(63) = {0.047936, 0.728769, 0, 1.0};
Point(64) = {0.053447, 0.728050, 0, 1.0};
Point(65) = {0.058622, 0.727350, 0, 1.0};
Point(66) = {0.063424, 0.726678, 0, 1.0};
Point(67) = {0.067821, 0.726044, 0, 1.0};
Point(68) = {0.071785, 0.725456, 0, 1.0};
Point(69) = {0.074472, 0.725048, 0, 1.0};
Point(70) = {-0.074660, -0.726536, 0, 1.0};
Point(71) = {-0.072697, -0.727154, 0, 1.0};
Point(72) = {-0.069157, -0.728325, 0, 1.0};
Point(73) = {-0.065285, -0.729592, 0, 1.0};
Point(74) = {-0.061105, -0.730931, 0, 1.0};
Point(75) = {-0.056642, -0.732316, 0, 1.0};
Point(76) = {-0.051920, -0.733731, 0, 1.0};
Point(77) = {-0.046966, -0.735148, 0, 1.0};
Point(78) = {-0.041795, -0.736549, 0, 1.0};
Point(79) = {-0.036424, -0.737932, 0, 1.0};
Point(80) = {-0.030887, -0.739290, 0, 1.0};
Point(81) = {-0.025221, -0.740612, 0, 1.0};
Point(82) = {-0.019456, -0.741886, 0, 1.0};
Point(83) = {-0.013626, -0.743103, 0, 1.0};
Point(84) = {-0.007766, -0.744248, 0, 1.0};
Point(85) = {-0.001907, -0.745313, 0, 1.0};
Point(86) = {0.003918, -0.746289, 0, 1.0};
Point(87) = {0.009676, -0.747164, 0, 1.0};
Point(88) = {0.015341, -0.747933, 0, 1.0};
Point(89) = {0.020877, -0.748587, 0, 1.0};
Point(90) = {0.026260, -0.749120, 0, 1.0};
Point(91) = {0.031463, -0.749532, 0, 1.0};
Point(92) = {0.036457, -0.749816, 0, 1.0};
Point(93) = {0.041221, -0.749970, 0, 1.0};
Point(94) = {0.045731, -0.750000, 0, 1.0};
Point(95) = {0.049966, -0.749902, 0, 1.0};
Point(96) = {0.053912, -0.749681, 0, 1.0};
Point(97) = {0.057546, -0.749345, 0, 1.0};
Point(98) = {0.060856, -0.748899, 0, 1.0};
Point(99) = {0.063830, -0.748358, 0, 1.0};
Point(100) = {0.066453, -0.747730, 0, 1.0};
Point(101) = {0.068720, -0.747027, 0, 1.0};
Point(102) = {0.070623, -0.746276, 0, 1.0};
Point(103) = {0.072150, -0.745495, 0, 1.0};
Point(104) = {0.073295, -0.744706, 0, 1.0};
Point(105) = {0.074050, -0.743943, 0, 1.0};
Point(106) = {0.074409, -0.743347, 0, 1.0};
Point(107) = {0.074244, -0.742734, 0, 1.0};
Point(108) = {0.073475, -0.742239, 0, 1.0};
Point(109) = {0.072198, -0.741709, 0, 1.0};
Point(110) = {0.070438, -0.741182, 0, 1.0};
Point(111) = {0.068197, -0.740673, 0, 1.0};
Point(112) = {0.065473, -0.740177, 0, 1.0};
Point(113) = {0.062284, -0.739689, 0, 1.0};
Point(114) = {0.058645, -0.739213, 0, 1.0};
Point(115) = {0.054576, -0.738744, 0, 1.0};
Point(116) = {0.050099, -0.738279, 0, 1.0};
Point(117) = {0.045240, -0.737815, 0, 1.0};
Point(118) = {0.040028, -0.737349, 0, 1.0};
Point(119) = {0.034494, -0.736876, 0, 1.0};
Point(120) = {0.028673, -0.736394, 0, 1.0};
Point(121) = {0.022602, -0.735898, 0, 1.0};
Point(122) = {0.016318, -0.735383, 0, 1.0};
Point(123) = {0.009865, -0.734846, 0, 1.0};
Point(124) = {0.003287, -0.734283, 0, 1.0};
Point(125) = {-0.003372, -0.733689, 0, 1.0};
Point(126) = {-0.010066, -0.733061, 0, 1.0};
Point(127) = {-0.016736, -0.732392, 0, 1.0};
Point(128) = {-0.023321, -0.731689, 0, 1.0};
Point(129) = {-0.029777, -0.730967, 0, 1.0};
Point(130) = {-0.036060, -0.730235, 0, 1.0};
Point(131) = {-0.042127, -0.729500, 0, 1.0};
Point(132) = {-0.047936, -0.728769, 0, 1.0};
Point(133) = {-0.053447, -0.728050, 0, 1.0};
Point(134) = {-0.058622, -0.727350, 0, 1.0};
Point(135) = {-0.063424, -0.726678, 0, 1.0};
Point(136) = {-0.067821, -0.726044, 0, 1.0};
Point(137) = {-0.071785, -0.725456, 0, 1.0};
Point(138) = {-0.074472, -0.725048, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:50};
Spline(3) = {50:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:91};
Spline(6) = {91:119};
Spline(7) = {119:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {36.00000000, 15.00000000, 0, 1.0};
Point(142) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html