SetFactory("OpenCASCADE");

Point(1) = {0.074058, 0.749760, 0, 1.0};
Point(2) = {0.073780, 0.749745, 0, 1.0};
Point(3) = {0.072950, 0.749715, 0, 1.0};
Point(4) = {0.071590, 0.749692, 0, 1.0};
Point(5) = {0.069729, 0.749685, 0, 1.0};
Point(6) = {0.067397, 0.749702, 0, 1.0};
Point(7) = {0.064628, 0.749743, 0, 1.0};
Point(8) = {0.061459, 0.749804, 0, 1.0};
Point(9) = {0.057923, 0.749872, 0, 1.0};
Point(10) = {0.054054, 0.749936, 0, 1.0};
Point(11) = {0.049879, 0.749983, 0, 1.0};
Point(12) = {0.045428, 0.750000, 0, 1.0};
Point(13) = {0.040724, 0.749981, 0, 1.0};
Point(14) = {0.035798, 0.749916, 0, 1.0};
Point(15) = {0.030677, 0.749799, 0, 1.0};
Point(16) = {0.025388, 0.749631, 0, 1.0};
Point(17) = {0.019965, 0.749412, 0, 1.0};
Point(18) = {0.014446, 0.749138, 0, 1.0};
Point(19) = {0.008861, 0.748802, 0, 1.0};
Point(20) = {0.003248, 0.748406, 0, 1.0};
Point(21) = {-0.002363, 0.747945, 0, 1.0};
Point(22) = {-0.007939, 0.747417, 0, 1.0};
Point(23) = {-0.013446, 0.746822, 0, 1.0};
Point(24) = {-0.018853, 0.746154, 0, 1.0};
Point(25) = {-0.024134, 0.745422, 0, 1.0};
Point(26) = {-0.029257, 0.744618, 0, 1.0};
Point(27) = {-0.034197, 0.743746, 0, 1.0};
Point(28) = {-0.038926, 0.742811, 0, 1.0};
Point(29) = {-0.043425, 0.741814, 0, 1.0};
Point(30) = {-0.047671, 0.740757, 0, 1.0};
Point(31) = {-0.051641, 0.739650, 0, 1.0};
Point(32) = {-0.055322, 0.738494, 0, 1.0};
Point(33) = {-0.058702, 0.737303, 0, 1.0};
Point(34) = {-0.061761, 0.736082, 0, 1.0};
Point(35) = {-0.064496, 0.734838, 0, 1.0};
Point(36) = {-0.066894, 0.733593, 0, 1.0};
Point(37) = {-0.068952, 0.732353, 0, 1.0};
Point(38) = {-0.070670, 0.731134, 0, 1.0};
Point(39) = {-0.072044, 0.729961, 0, 1.0};
Point(40) = {-0.073070, 0.728859, 0, 1.0};
Point(41) = {-0.073753, 0.727848, 0, 1.0};
Point(42) = {-0.074091, 0.726963, 0, 1.0};
Point(43) = {-0.074094, 0.726286, 0, 1.0};
Point(44) = {-0.073617, 0.725840, 0, 1.0};
Point(45) = {-0.072597, 0.725525, 0, 1.0};
Point(46) = {-0.071138, 0.725298, 0, 1.0};
Point(47) = {-0.069259, 0.725190, 0, 1.0};
Point(48) = {-0.066964, 0.725215, 0, 1.0};
Point(49) = {-0.064256, 0.725362, 0, 1.0};
Point(50) = {-0.061154, 0.725628, 0, 1.0};
Point(51) = {-0.057673, 0.726013, 0, 1.0};
Point(52) = {-0.053830, 0.726514, 0, 1.0};
Point(53) = {-0.049645, 0.727122, 0, 1.0};
Point(54) = {-0.045144, 0.727831, 0, 1.0};
Point(55) = {-0.040349, 0.728633, 0, 1.0};
Point(56) = {-0.035289, 0.729521, 0, 1.0};
Point(57) = {-0.029995, 0.730484, 0, 1.0};
Point(58) = {-0.024496, 0.731512, 0, 1.0};
Point(59) = {-0.018828, 0.732594, 0, 1.0};
Point(60) = {-0.013024, 0.733717, 0, 1.0};
Point(61) = {-0.007124, 0.734872, 0, 1.0};
Point(62) = {-0.001165, 0.736048, 0, 1.0};
Point(63) = {0.004811, 0.737238, 0, 1.0};
Point(64) = {0.010775, 0.738433, 0, 1.0};
Point(65) = {0.016690, 0.739616, 0, 1.0};
Point(66) = {0.022517, 0.740776, 0, 1.0};
Point(67) = {0.028215, 0.741898, 0, 1.0};
Point(68) = {0.033743, 0.742968, 0, 1.0};
Point(69) = {0.039061, 0.743982, 0, 1.0};
Point(70) = {0.044130, 0.744924, 0, 1.0};
Point(71) = {0.048911, 0.745793, 0, 1.0};
Point(72) = {0.053367, 0.746580, 0, 1.0};
Point(73) = {0.057460, 0.747284, 0, 1.0};
Point(74) = {0.061166, 0.747906, 0, 1.0};
Point(75) = {0.064457, 0.748441, 0, 1.0};
Point(76) = {0.067305, 0.748883, 0, 1.0};
Point(77) = {0.069687, 0.749231, 0, 1.0};
Point(78) = {0.071576, 0.749485, 0, 1.0};
Point(79) = {0.072946, 0.749649, 0, 1.0};
Point(80) = {0.073778, 0.749736, 0, 1.0};
Point(81) = {-0.074058, -0.749760, 0, 1.0};
Point(82) = {-0.073780, -0.749745, 0, 1.0};
Point(83) = {-0.072950, -0.749715, 0, 1.0};
Point(84) = {-0.071590, -0.749692, 0, 1.0};
Point(85) = {-0.069729, -0.749685, 0, 1.0};
Point(86) = {-0.067397, -0.749702, 0, 1.0};
Point(87) = {-0.064628, -0.749743, 0, 1.0};
Point(88) = {-0.061459, -0.749804, 0, 1.0};
Point(89) = {-0.057923, -0.749872, 0, 1.0};
Point(90) = {-0.054054, -0.749936, 0, 1.0};
Point(91) = {-0.049879, -0.749983, 0, 1.0};
Point(92) = {-0.045428, -0.750000, 0, 1.0};
Point(93) = {-0.040724, -0.749981, 0, 1.0};
Point(94) = {-0.035798, -0.749916, 0, 1.0};
Point(95) = {-0.030677, -0.749799, 0, 1.0};
Point(96) = {-0.025388, -0.749631, 0, 1.0};
Point(97) = {-0.019965, -0.749412, 0, 1.0};
Point(98) = {-0.014446, -0.749138, 0, 1.0};
Point(99) = {-0.008861, -0.748802, 0, 1.0};
Point(100) = {-0.003248, -0.748406, 0, 1.0};
Point(101) = {0.002363, -0.747945, 0, 1.0};
Point(102) = {0.007939, -0.747417, 0, 1.0};
Point(103) = {0.013446, -0.746822, 0, 1.0};
Point(104) = {0.018853, -0.746154, 0, 1.0};
Point(105) = {0.024134, -0.745422, 0, 1.0};
Point(106) = {0.029257, -0.744618, 0, 1.0};
Point(107) = {0.034197, -0.743746, 0, 1.0};
Point(108) = {0.038926, -0.742811, 0, 1.0};
Point(109) = {0.043425, -0.741814, 0, 1.0};
Point(110) = {0.047671, -0.740757, 0, 1.0};
Point(111) = {0.051641, -0.739650, 0, 1.0};
Point(112) = {0.055322, -0.738494, 0, 1.0};
Point(113) = {0.058702, -0.737303, 0, 1.0};
Point(114) = {0.061761, -0.736082, 0, 1.0};
Point(115) = {0.064496, -0.734838, 0, 1.0};
Point(116) = {0.066894, -0.733593, 0, 1.0};
Point(117) = {0.068952, -0.732353, 0, 1.0};
Point(118) = {0.070670, -0.731134, 0, 1.0};
Point(119) = {0.072044, -0.729961, 0, 1.0};
Point(120) = {0.073070, -0.728859, 0, 1.0};
Point(121) = {0.073753, -0.727848, 0, 1.0};
Point(122) = {0.074091, -0.726963, 0, 1.0};
Point(123) = {0.074094, -0.726286, 0, 1.0};
Point(124) = {0.073617, -0.725840, 0, 1.0};
Point(125) = {0.072597, -0.725525, 0, 1.0};
Point(126) = {0.071138, -0.725298, 0, 1.0};
Point(127) = {0.069259, -0.725190, 0, 1.0};
Point(128) = {0.066964, -0.725215, 0, 1.0};
Point(129) = {0.064256, -0.725362, 0, 1.0};
Point(130) = {0.061154, -0.725628, 0, 1.0};
Point(131) = {0.057673, -0.726013, 0, 1.0};
Point(132) = {0.053830, -0.726514, 0, 1.0};
Point(133) = {0.049645, -0.727122, 0, 1.0};
Point(134) = {0.045144, -0.727831, 0, 1.0};
Point(135) = {0.040349, -0.728633, 0, 1.0};
Point(136) = {0.035289, -0.729521, 0, 1.0};
Point(137) = {0.029995, -0.730484, 0, 1.0};
Point(138) = {0.024496, -0.731512, 0, 1.0};
Point(139) = {0.018828, -0.732594, 0, 1.0};
Point(140) = {0.013024, -0.733717, 0, 1.0};
Point(141) = {0.007124, -0.734872, 0, 1.0};
Point(142) = {0.001165, -0.736048, 0, 1.0};
Point(143) = {-0.004811, -0.737238, 0, 1.0};
Point(144) = {-0.010775, -0.738433, 0, 1.0};
Point(145) = {-0.016690, -0.739616, 0, 1.0};
Point(146) = {-0.022517, -0.740776, 0, 1.0};
Point(147) = {-0.028215, -0.741898, 0, 1.0};
Point(148) = {-0.033743, -0.742968, 0, 1.0};
Point(149) = {-0.039061, -0.743982, 0, 1.0};
Point(150) = {-0.044130, -0.744924, 0, 1.0};
Point(151) = {-0.048911, -0.745793, 0, 1.0};
Point(152) = {-0.053367, -0.746580, 0, 1.0};
Point(153) = {-0.057460, -0.747284, 0, 1.0};
Point(154) = {-0.061166, -0.747906, 0, 1.0};
Point(155) = {-0.064457, -0.748441, 0, 1.0};
Point(156) = {-0.067305, -0.748883, 0, 1.0};
Point(157) = {-0.069687, -0.749231, 0, 1.0};
Point(158) = {-0.071576, -0.749485, 0, 1.0};
Point(159) = {-0.072946, -0.749649, 0, 1.0};
Point(160) = {-0.073778, -0.749736, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html