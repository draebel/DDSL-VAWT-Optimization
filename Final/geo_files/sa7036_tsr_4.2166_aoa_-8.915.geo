SetFactory("OpenCASCADE");

Point(1) = {0.073789, 0.749742, 0, 1.0};
Point(2) = {0.071367, 0.749789, 0, 1.0};
Point(3) = {0.067573, 0.749862, 0, 1.0};
Point(4) = {0.063421, 0.749931, 0, 1.0};
Point(5) = {0.058941, 0.749982, 0, 1.0};
Point(6) = {0.054164, 0.750000, 0, 1.0};
Point(7) = {0.049117, 0.749979, 0, 1.0};
Point(8) = {0.043831, 0.749909, 0, 1.0};
Point(9) = {0.038335, 0.749784, 0, 1.0};
Point(10) = {0.032659, 0.749604, 0, 1.0};
Point(11) = {0.026840, 0.749369, 0, 1.0};
Point(12) = {0.020918, 0.749075, 0, 1.0};
Point(13) = {0.014925, 0.748715, 0, 1.0};
Point(14) = {0.008901, 0.748290, 0, 1.0};
Point(15) = {0.002880, 0.747795, 0, 1.0};
Point(16) = {-0.003104, 0.747228, 0, 1.0};
Point(17) = {-0.009013, 0.746589, 0, 1.0};
Point(18) = {-0.014815, 0.745873, 0, 1.0};
Point(19) = {-0.020482, 0.745087, 0, 1.0};
Point(20) = {-0.025980, 0.744225, 0, 1.0};
Point(21) = {-0.031281, 0.743289, 0, 1.0};
Point(22) = {-0.036356, 0.742286, 0, 1.0};
Point(23) = {-0.041183, 0.741216, 0, 1.0};
Point(24) = {-0.045740, 0.740082, 0, 1.0};
Point(25) = {-0.049999, 0.738894, 0, 1.0};
Point(26) = {-0.053949, 0.737653, 0, 1.0};
Point(27) = {-0.057577, 0.736375, 0, 1.0};
Point(28) = {-0.060860, 0.735065, 0, 1.0};
Point(29) = {-0.063794, 0.733730, 0, 1.0};
Point(30) = {-0.066368, 0.732393, 0, 1.0};
Point(31) = {-0.068576, 0.731063, 0, 1.0};
Point(32) = {-0.070420, 0.729755, 0, 1.0};
Point(33) = {-0.071895, 0.728497, 0, 1.0};
Point(34) = {-0.072995, 0.727314, 0, 1.0};
Point(35) = {-0.073728, 0.726229, 0, 1.0};
Point(36) = {-0.074090, 0.725279, 0, 1.0};
Point(37) = {-0.074094, 0.724553, 0, 1.0};
Point(38) = {-0.073582, 0.724074, 0, 1.0};
Point(39) = {-0.072488, 0.723736, 0, 1.0};
Point(40) = {-0.070922, 0.723493, 0, 1.0};
Point(41) = {-0.068906, 0.723377, 0, 1.0};
Point(42) = {-0.066443, 0.723403, 0, 1.0};
Point(43) = {-0.063537, 0.723561, 0, 1.0};
Point(44) = {-0.060208, 0.723847, 0, 1.0};
Point(45) = {-0.056472, 0.724260, 0, 1.0};
Point(46) = {-0.052348, 0.724798, 0, 1.0};
Point(47) = {-0.047858, 0.725450, 0, 1.0};
Point(48) = {-0.043028, 0.726211, 0, 1.0};
Point(49) = {-0.037882, 0.727072, 0, 1.0};
Point(50) = {-0.032453, 0.728024, 0, 1.0};
Point(51) = {-0.026772, 0.729057, 0, 1.0};
Point(52) = {-0.020871, 0.730161, 0, 1.0};
Point(53) = {-0.014788, 0.731322, 0, 1.0};
Point(54) = {-0.008561, 0.732527, 0, 1.0};
Point(55) = {-0.002229, 0.733766, 0, 1.0};
Point(56) = {0.004165, 0.735028, 0, 1.0};
Point(57) = {0.010579, 0.736305, 0, 1.0};
Point(58) = {0.016978, 0.737587, 0, 1.0};
Point(59) = {0.023326, 0.738857, 0, 1.0};
Point(60) = {0.029578, 0.740102, 0, 1.0};
Point(61) = {0.035693, 0.741305, 0, 1.0};
Point(62) = {0.041625, 0.742454, 0, 1.0};
Point(63) = {0.047331, 0.743542, 0, 1.0};
Point(64) = {0.052771, 0.744553, 0, 1.0};
Point(65) = {0.057902, 0.745485, 0, 1.0};
Point(66) = {0.062683, 0.746330, 0, 1.0};
Point(67) = {0.067076, 0.747086, 0, 1.0};
Point(68) = {0.071052, 0.747753, 0, 1.0};
Point(69) = {0.074025, 0.748237, 0, 1.0};
Point(70) = {-0.073789, -0.749742, 0, 1.0};
Point(71) = {-0.071367, -0.749789, 0, 1.0};
Point(72) = {-0.067573, -0.749862, 0, 1.0};
Point(73) = {-0.063421, -0.749931, 0, 1.0};
Point(74) = {-0.058941, -0.749982, 0, 1.0};
Point(75) = {-0.054164, -0.750000, 0, 1.0};
Point(76) = {-0.049117, -0.749979, 0, 1.0};
Point(77) = {-0.043831, -0.749909, 0, 1.0};
Point(78) = {-0.038335, -0.749784, 0, 1.0};
Point(79) = {-0.032659, -0.749604, 0, 1.0};
Point(80) = {-0.026840, -0.749369, 0, 1.0};
Point(81) = {-0.020918, -0.749075, 0, 1.0};
Point(82) = {-0.014925, -0.748715, 0, 1.0};
Point(83) = {-0.008901, -0.748290, 0, 1.0};
Point(84) = {-0.002880, -0.747795, 0, 1.0};
Point(85) = {0.003104, -0.747228, 0, 1.0};
Point(86) = {0.009013, -0.746589, 0, 1.0};
Point(87) = {0.014815, -0.745873, 0, 1.0};
Point(88) = {0.020482, -0.745087, 0, 1.0};
Point(89) = {0.025980, -0.744225, 0, 1.0};
Point(90) = {0.031281, -0.743289, 0, 1.0};
Point(91) = {0.036356, -0.742286, 0, 1.0};
Point(92) = {0.041183, -0.741216, 0, 1.0};
Point(93) = {0.045740, -0.740082, 0, 1.0};
Point(94) = {0.049999, -0.738894, 0, 1.0};
Point(95) = {0.053949, -0.737653, 0, 1.0};
Point(96) = {0.057577, -0.736375, 0, 1.0};
Point(97) = {0.060860, -0.735065, 0, 1.0};
Point(98) = {0.063794, -0.733730, 0, 1.0};
Point(99) = {0.066368, -0.732393, 0, 1.0};
Point(100) = {0.068576, -0.731063, 0, 1.0};
Point(101) = {0.070420, -0.729755, 0, 1.0};
Point(102) = {0.071895, -0.728497, 0, 1.0};
Point(103) = {0.072995, -0.727314, 0, 1.0};
Point(104) = {0.073728, -0.726229, 0, 1.0};
Point(105) = {0.074090, -0.725279, 0, 1.0};
Point(106) = {0.074094, -0.724553, 0, 1.0};
Point(107) = {0.073582, -0.724074, 0, 1.0};
Point(108) = {0.072488, -0.723736, 0, 1.0};
Point(109) = {0.070922, -0.723493, 0, 1.0};
Point(110) = {0.068906, -0.723377, 0, 1.0};
Point(111) = {0.066443, -0.723403, 0, 1.0};
Point(112) = {0.063537, -0.723561, 0, 1.0};
Point(113) = {0.060208, -0.723847, 0, 1.0};
Point(114) = {0.056472, -0.724260, 0, 1.0};
Point(115) = {0.052348, -0.724798, 0, 1.0};
Point(116) = {0.047858, -0.725450, 0, 1.0};
Point(117) = {0.043028, -0.726211, 0, 1.0};
Point(118) = {0.037882, -0.727072, 0, 1.0};
Point(119) = {0.032453, -0.728024, 0, 1.0};
Point(120) = {0.026772, -0.729057, 0, 1.0};
Point(121) = {0.020871, -0.730161, 0, 1.0};
Point(122) = {0.014788, -0.731322, 0, 1.0};
Point(123) = {0.008561, -0.732527, 0, 1.0};
Point(124) = {0.002229, -0.733766, 0, 1.0};
Point(125) = {-0.004165, -0.735028, 0, 1.0};
Point(126) = {-0.010579, -0.736305, 0, 1.0};
Point(127) = {-0.016978, -0.737587, 0, 1.0};
Point(128) = {-0.023326, -0.738857, 0, 1.0};
Point(129) = {-0.029578, -0.740102, 0, 1.0};
Point(130) = {-0.035693, -0.741305, 0, 1.0};
Point(131) = {-0.041625, -0.742454, 0, 1.0};
Point(132) = {-0.047331, -0.743542, 0, 1.0};
Point(133) = {-0.052771, -0.744553, 0, 1.0};
Point(134) = {-0.057902, -0.745485, 0, 1.0};
Point(135) = {-0.062683, -0.746330, 0, 1.0};
Point(136) = {-0.067076, -0.747086, 0, 1.0};
Point(137) = {-0.071052, -0.747753, 0, 1.0};
Point(138) = {-0.074025, -0.748237, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:50};
Spline(3) = {50:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:91};
Spline(6) = {91:119};
Spline(7) = {119:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html