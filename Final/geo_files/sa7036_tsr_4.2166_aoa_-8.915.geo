SetFactory("OpenCASCADE");

Point(1) = {0.110688, 0.749760, 0, 1.0};
Point(2) = {0.110409, 0.749745, 0, 1.0};
Point(3) = {0.109580, 0.749715, 0, 1.0};
Point(4) = {0.108221, 0.749692, 0, 1.0};
Point(5) = {0.106360, 0.749686, 0, 1.0};
Point(6) = {0.104028, 0.749702, 0, 1.0};
Point(7) = {0.101260, 0.749743, 0, 1.0};
Point(8) = {0.098092, 0.749804, 0, 1.0};
Point(9) = {0.094558, 0.749872, 0, 1.0};
Point(10) = {0.090690, 0.749936, 0, 1.0};
Point(11) = {0.086516, 0.749983, 0, 1.0};
Point(12) = {0.082066, 0.750000, 0, 1.0};
Point(13) = {0.077364, 0.749981, 0, 1.0};
Point(14) = {0.072439, 0.749916, 0, 1.0};
Point(15) = {0.067319, 0.749799, 0, 1.0};
Point(16) = {0.062032, 0.749631, 0, 1.0};
Point(17) = {0.056610, 0.749413, 0, 1.0};
Point(18) = {0.051093, 0.749138, 0, 1.0};
Point(19) = {0.045510, 0.748802, 0, 1.0};
Point(20) = {0.039898, 0.748407, 0, 1.0};
Point(21) = {0.034289, 0.747946, 0, 1.0};
Point(22) = {0.028714, 0.747417, 0, 1.0};
Point(23) = {0.023209, 0.746823, 0, 1.0};
Point(24) = {0.017804, 0.746155, 0, 1.0};
Point(25) = {0.012524, 0.745423, 0, 1.0};
Point(26) = {0.007403, 0.744620, 0, 1.0};
Point(27) = {0.002464, 0.743748, 0, 1.0};
Point(28) = {-0.002264, 0.742813, 0, 1.0};
Point(29) = {-0.006761, 0.741816, 0, 1.0};
Point(30) = {-0.011006, 0.740760, 0, 1.0};
Point(31) = {-0.014974, 0.739653, 0, 1.0};
Point(32) = {-0.018654, 0.738498, 0, 1.0};
Point(33) = {-0.022034, 0.737307, 0, 1.0};
Point(34) = {-0.025092, 0.736086, 0, 1.0};
Point(35) = {-0.027826, 0.734842, 0, 1.0};
Point(36) = {-0.030224, 0.733597, 0, 1.0};
Point(37) = {-0.032281, 0.732358, 0, 1.0};
Point(38) = {-0.033998, 0.731139, 0, 1.0};
Point(39) = {-0.035372, 0.729967, 0, 1.0};
Point(40) = {-0.036397, 0.728865, 0, 1.0};
Point(41) = {-0.037080, 0.727855, 0, 1.0};
Point(42) = {-0.037418, 0.726970, 0, 1.0};
Point(43) = {-0.037421, 0.726293, 0, 1.0};
Point(44) = {-0.036944, 0.725847, 0, 1.0};
Point(45) = {-0.035925, 0.725532, 0, 1.0};
Point(46) = {-0.034466, 0.725305, 0, 1.0};
Point(47) = {-0.032588, 0.725198, 0, 1.0};
Point(48) = {-0.030293, 0.725222, 0, 1.0};
Point(49) = {-0.027586, 0.725369, 0, 1.0};
Point(50) = {-0.024485, 0.725635, 0, 1.0};
Point(51) = {-0.021005, 0.726020, 0, 1.0};
Point(52) = {-0.017163, 0.726521, 0, 1.0};
Point(53) = {-0.012979, 0.727129, 0, 1.0};
Point(54) = {-0.008479, 0.727838, 0, 1.0};
Point(55) = {-0.003686, 0.728640, 0, 1.0};
Point(56) = {0.001372, 0.729527, 0, 1.0};
Point(57) = {0.006665, 0.730489, 0, 1.0};
Point(58) = {0.012162, 0.731517, 0, 1.0};
Point(59) = {0.017829, 0.732599, 0, 1.0};
Point(60) = {0.023631, 0.733722, 0, 1.0};
Point(61) = {0.029529, 0.734876, 0, 1.0};
Point(62) = {0.035486, 0.736052, 0, 1.0};
Point(63) = {0.041461, 0.737241, 0, 1.0};
Point(64) = {0.047423, 0.738436, 0, 1.0};
Point(65) = {0.053337, 0.739619, 0, 1.0};
Point(66) = {0.059161, 0.740779, 0, 1.0};
Point(67) = {0.064858, 0.741900, 0, 1.0};
Point(68) = {0.070384, 0.742970, 0, 1.0};
Point(69) = {0.075700, 0.743983, 0, 1.0};
Point(70) = {0.080768, 0.744926, 0, 1.0};
Point(71) = {0.085548, 0.745794, 0, 1.0};
Point(72) = {0.090003, 0.746581, 0, 1.0};
Point(73) = {0.094095, 0.747285, 0, 1.0};
Point(74) = {0.097799, 0.747907, 0, 1.0};
Point(75) = {0.101089, 0.748441, 0, 1.0};
Point(76) = {0.103937, 0.748883, 0, 1.0};
Point(77) = {0.106318, 0.749231, 0, 1.0};
Point(78) = {0.108206, 0.749485, 0, 1.0};
Point(79) = {0.109576, 0.749649, 0, 1.0};
Point(80) = {0.110408, 0.749736, 0, 1.0};
Point(81) = {-0.110688, -0.749760, 0, 1.0};
Point(82) = {-0.110409, -0.749745, 0, 1.0};
Point(83) = {-0.109580, -0.749715, 0, 1.0};
Point(84) = {-0.108221, -0.749692, 0, 1.0};
Point(85) = {-0.106360, -0.749686, 0, 1.0};
Point(86) = {-0.104028, -0.749702, 0, 1.0};
Point(87) = {-0.101260, -0.749743, 0, 1.0};
Point(88) = {-0.098092, -0.749804, 0, 1.0};
Point(89) = {-0.094558, -0.749872, 0, 1.0};
Point(90) = {-0.090690, -0.749936, 0, 1.0};
Point(91) = {-0.086516, -0.749983, 0, 1.0};
Point(92) = {-0.082066, -0.750000, 0, 1.0};
Point(93) = {-0.077364, -0.749981, 0, 1.0};
Point(94) = {-0.072439, -0.749916, 0, 1.0};
Point(95) = {-0.067319, -0.749799, 0, 1.0};
Point(96) = {-0.062032, -0.749631, 0, 1.0};
Point(97) = {-0.056610, -0.749413, 0, 1.0};
Point(98) = {-0.051093, -0.749138, 0, 1.0};
Point(99) = {-0.045510, -0.748802, 0, 1.0};
Point(100) = {-0.039898, -0.748407, 0, 1.0};
Point(101) = {-0.034289, -0.747946, 0, 1.0};
Point(102) = {-0.028714, -0.747417, 0, 1.0};
Point(103) = {-0.023209, -0.746823, 0, 1.0};
Point(104) = {-0.017804, -0.746155, 0, 1.0};
Point(105) = {-0.012524, -0.745423, 0, 1.0};
Point(106) = {-0.007403, -0.744620, 0, 1.0};
Point(107) = {-0.002464, -0.743748, 0, 1.0};
Point(108) = {0.002264, -0.742813, 0, 1.0};
Point(109) = {0.006761, -0.741816, 0, 1.0};
Point(110) = {0.011006, -0.740760, 0, 1.0};
Point(111) = {0.014974, -0.739653, 0, 1.0};
Point(112) = {0.018654, -0.738498, 0, 1.0};
Point(113) = {0.022034, -0.737307, 0, 1.0};
Point(114) = {0.025092, -0.736086, 0, 1.0};
Point(115) = {0.027826, -0.734842, 0, 1.0};
Point(116) = {0.030224, -0.733597, 0, 1.0};
Point(117) = {0.032281, -0.732358, 0, 1.0};
Point(118) = {0.033998, -0.731139, 0, 1.0};
Point(119) = {0.035372, -0.729967, 0, 1.0};
Point(120) = {0.036397, -0.728865, 0, 1.0};
Point(121) = {0.037080, -0.727855, 0, 1.0};
Point(122) = {0.037418, -0.726970, 0, 1.0};
Point(123) = {0.037421, -0.726293, 0, 1.0};
Point(124) = {0.036944, -0.725847, 0, 1.0};
Point(125) = {0.035925, -0.725532, 0, 1.0};
Point(126) = {0.034466, -0.725305, 0, 1.0};
Point(127) = {0.032588, -0.725198, 0, 1.0};
Point(128) = {0.030293, -0.725222, 0, 1.0};
Point(129) = {0.027586, -0.725369, 0, 1.0};
Point(130) = {0.024485, -0.725635, 0, 1.0};
Point(131) = {0.021005, -0.726020, 0, 1.0};
Point(132) = {0.017163, -0.726521, 0, 1.0};
Point(133) = {0.012979, -0.727129, 0, 1.0};
Point(134) = {0.008479, -0.727838, 0, 1.0};
Point(135) = {0.003686, -0.728640, 0, 1.0};
Point(136) = {-0.001372, -0.729527, 0, 1.0};
Point(137) = {-0.006665, -0.730489, 0, 1.0};
Point(138) = {-0.012162, -0.731517, 0, 1.0};
Point(139) = {-0.017829, -0.732599, 0, 1.0};
Point(140) = {-0.023631, -0.733722, 0, 1.0};
Point(141) = {-0.029529, -0.734876, 0, 1.0};
Point(142) = {-0.035486, -0.736052, 0, 1.0};
Point(143) = {-0.041461, -0.737241, 0, 1.0};
Point(144) = {-0.047423, -0.738436, 0, 1.0};
Point(145) = {-0.053337, -0.739619, 0, 1.0};
Point(146) = {-0.059161, -0.740779, 0, 1.0};
Point(147) = {-0.064858, -0.741900, 0, 1.0};
Point(148) = {-0.070384, -0.742970, 0, 1.0};
Point(149) = {-0.075700, -0.743983, 0, 1.0};
Point(150) = {-0.080768, -0.744926, 0, 1.0};
Point(151) = {-0.085548, -0.745794, 0, 1.0};
Point(152) = {-0.090003, -0.746581, 0, 1.0};
Point(153) = {-0.094095, -0.747285, 0, 1.0};
Point(154) = {-0.097799, -0.747907, 0, 1.0};
Point(155) = {-0.101089, -0.748441, 0, 1.0};
Point(156) = {-0.103937, -0.748883, 0, 1.0};
Point(157) = {-0.106318, -0.749231, 0, 1.0};
Point(158) = {-0.108206, -0.749485, 0, 1.0};
Point(159) = {-0.109576, -0.749649, 0, 1.0};
Point(160) = {-0.110408, -0.749736, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html