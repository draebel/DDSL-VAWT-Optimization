SetFactory("OpenCASCADE");

Point(1) = {0.111019, 0.749760, 0, 1.0};
Point(2) = {0.110741, 0.749745, 0, 1.0};
Point(3) = {0.109912, 0.749716, 0, 1.0};
Point(4) = {0.108553, 0.749692, 0, 1.0};
Point(5) = {0.106693, 0.749686, 0, 1.0};
Point(6) = {0.104362, 0.749702, 0, 1.0};
Point(7) = {0.101594, 0.749743, 0, 1.0};
Point(8) = {0.098427, 0.749804, 0, 1.0};
Point(9) = {0.094894, 0.749872, 0, 1.0};
Point(10) = {0.091027, 0.749936, 0, 1.0};
Point(11) = {0.086854, 0.749983, 0, 1.0};
Point(12) = {0.082406, 0.750000, 0, 1.0};
Point(13) = {0.077705, 0.749981, 0, 1.0};
Point(14) = {0.072782, 0.749916, 0, 1.0};
Point(15) = {0.067663, 0.749799, 0, 1.0};
Point(16) = {0.062377, 0.749631, 0, 1.0};
Point(17) = {0.056957, 0.749413, 0, 1.0};
Point(18) = {0.051442, 0.749138, 0, 1.0};
Point(19) = {0.045860, 0.748803, 0, 1.0};
Point(20) = {0.040250, 0.748407, 0, 1.0};
Point(21) = {0.034642, 0.747946, 0, 1.0};
Point(22) = {0.029069, 0.747418, 0, 1.0};
Point(23) = {0.023566, 0.746824, 0, 1.0};
Point(24) = {0.018162, 0.746157, 0, 1.0};
Point(25) = {0.012884, 0.745424, 0, 1.0};
Point(26) = {0.007764, 0.744621, 0, 1.0};
Point(27) = {0.002826, 0.743749, 0, 1.0};
Point(28) = {-0.001900, 0.742815, 0, 1.0};
Point(29) = {-0.006396, 0.741819, 0, 1.0};
Point(30) = {-0.010639, 0.740763, 0, 1.0};
Point(31) = {-0.014607, 0.739656, 0, 1.0};
Point(32) = {-0.018285, 0.738501, 0, 1.0};
Point(33) = {-0.021664, 0.737311, 0, 1.0};
Point(34) = {-0.024721, 0.736090, 0, 1.0};
Point(35) = {-0.027454, 0.734847, 0, 1.0};
Point(36) = {-0.029852, 0.733602, 0, 1.0};
Point(37) = {-0.031908, 0.732363, 0, 1.0};
Point(38) = {-0.033625, 0.731145, 0, 1.0};
Point(39) = {-0.034999, 0.729973, 0, 1.0};
Point(40) = {-0.036023, 0.728871, 0, 1.0};
Point(41) = {-0.036706, 0.727861, 0, 1.0};
Point(42) = {-0.037044, 0.726976, 0, 1.0};
Point(43) = {-0.037047, 0.726300, 0, 1.0};
Point(44) = {-0.036570, 0.725854, 0, 1.0};
Point(45) = {-0.035551, 0.725539, 0, 1.0};
Point(46) = {-0.034093, 0.725312, 0, 1.0};
Point(47) = {-0.032215, 0.725205, 0, 1.0};
Point(48) = {-0.029921, 0.725229, 0, 1.0};
Point(49) = {-0.027215, 0.725376, 0, 1.0};
Point(50) = {-0.024114, 0.725642, 0, 1.0};
Point(51) = {-0.020635, 0.726027, 0, 1.0};
Point(52) = {-0.016794, 0.726528, 0, 1.0};
Point(53) = {-0.012612, 0.727135, 0, 1.0};
Point(54) = {-0.008114, 0.727844, 0, 1.0};
Point(55) = {-0.003321, 0.728646, 0, 1.0};
Point(56) = {0.001735, 0.729533, 0, 1.0};
Point(57) = {0.007026, 0.730495, 0, 1.0};
Point(58) = {0.012522, 0.731523, 0, 1.0};
Point(59) = {0.018187, 0.732604, 0, 1.0};
Point(60) = {0.023987, 0.733726, 0, 1.0};
Point(61) = {0.029884, 0.734881, 0, 1.0};
Point(62) = {0.035839, 0.736056, 0, 1.0};
Point(63) = {0.041812, 0.737245, 0, 1.0};
Point(64) = {0.047773, 0.738440, 0, 1.0};
Point(65) = {0.053685, 0.739622, 0, 1.0};
Point(66) = {0.059508, 0.740781, 0, 1.0};
Point(67) = {0.065203, 0.741902, 0, 1.0};
Point(68) = {0.070727, 0.742972, 0, 1.0};
Point(69) = {0.076042, 0.743985, 0, 1.0};
Point(70) = {0.081108, 0.744927, 0, 1.0};
Point(71) = {0.085887, 0.745795, 0, 1.0};
Point(72) = {0.090340, 0.746582, 0, 1.0};
Point(73) = {0.094431, 0.747286, 0, 1.0};
Point(74) = {0.098134, 0.747908, 0, 1.0};
Point(75) = {0.101423, 0.748442, 0, 1.0};
Point(76) = {0.104270, 0.748884, 0, 1.0};
Point(77) = {0.106650, 0.749231, 0, 1.0};
Point(78) = {0.108538, 0.749485, 0, 1.0};
Point(79) = {0.109907, 0.749649, 0, 1.0};
Point(80) = {0.110739, 0.749736, 0, 1.0};
Point(81) = {-0.111019, -0.749760, 0, 1.0};
Point(82) = {-0.110741, -0.749745, 0, 1.0};
Point(83) = {-0.109912, -0.749716, 0, 1.0};
Point(84) = {-0.108553, -0.749692, 0, 1.0};
Point(85) = {-0.106693, -0.749686, 0, 1.0};
Point(86) = {-0.104362, -0.749702, 0, 1.0};
Point(87) = {-0.101594, -0.749743, 0, 1.0};
Point(88) = {-0.098427, -0.749804, 0, 1.0};
Point(89) = {-0.094894, -0.749872, 0, 1.0};
Point(90) = {-0.091027, -0.749936, 0, 1.0};
Point(91) = {-0.086854, -0.749983, 0, 1.0};
Point(92) = {-0.082406, -0.750000, 0, 1.0};
Point(93) = {-0.077705, -0.749981, 0, 1.0};
Point(94) = {-0.072782, -0.749916, 0, 1.0};
Point(95) = {-0.067663, -0.749799, 0, 1.0};
Point(96) = {-0.062377, -0.749631, 0, 1.0};
Point(97) = {-0.056957, -0.749413, 0, 1.0};
Point(98) = {-0.051442, -0.749138, 0, 1.0};
Point(99) = {-0.045860, -0.748803, 0, 1.0};
Point(100) = {-0.040250, -0.748407, 0, 1.0};
Point(101) = {-0.034642, -0.747946, 0, 1.0};
Point(102) = {-0.029069, -0.747418, 0, 1.0};
Point(103) = {-0.023566, -0.746824, 0, 1.0};
Point(104) = {-0.018162, -0.746157, 0, 1.0};
Point(105) = {-0.012884, -0.745424, 0, 1.0};
Point(106) = {-0.007764, -0.744621, 0, 1.0};
Point(107) = {-0.002826, -0.743749, 0, 1.0};
Point(108) = {0.001900, -0.742815, 0, 1.0};
Point(109) = {0.006396, -0.741819, 0, 1.0};
Point(110) = {0.010639, -0.740763, 0, 1.0};
Point(111) = {0.014607, -0.739656, 0, 1.0};
Point(112) = {0.018285, -0.738501, 0, 1.0};
Point(113) = {0.021664, -0.737311, 0, 1.0};
Point(114) = {0.024721, -0.736090, 0, 1.0};
Point(115) = {0.027454, -0.734847, 0, 1.0};
Point(116) = {0.029852, -0.733602, 0, 1.0};
Point(117) = {0.031908, -0.732363, 0, 1.0};
Point(118) = {0.033625, -0.731145, 0, 1.0};
Point(119) = {0.034999, -0.729973, 0, 1.0};
Point(120) = {0.036023, -0.728871, 0, 1.0};
Point(121) = {0.036706, -0.727861, 0, 1.0};
Point(122) = {0.037044, -0.726976, 0, 1.0};
Point(123) = {0.037047, -0.726300, 0, 1.0};
Point(124) = {0.036570, -0.725854, 0, 1.0};
Point(125) = {0.035551, -0.725539, 0, 1.0};
Point(126) = {0.034093, -0.725312, 0, 1.0};
Point(127) = {0.032215, -0.725205, 0, 1.0};
Point(128) = {0.029921, -0.725229, 0, 1.0};
Point(129) = {0.027215, -0.725376, 0, 1.0};
Point(130) = {0.024114, -0.725642, 0, 1.0};
Point(131) = {0.020635, -0.726027, 0, 1.0};
Point(132) = {0.016794, -0.726528, 0, 1.0};
Point(133) = {0.012612, -0.727135, 0, 1.0};
Point(134) = {0.008114, -0.727844, 0, 1.0};
Point(135) = {0.003321, -0.728646, 0, 1.0};
Point(136) = {-0.001735, -0.729533, 0, 1.0};
Point(137) = {-0.007026, -0.730495, 0, 1.0};
Point(138) = {-0.012522, -0.731523, 0, 1.0};
Point(139) = {-0.018187, -0.732604, 0, 1.0};
Point(140) = {-0.023987, -0.733726, 0, 1.0};
Point(141) = {-0.029884, -0.734881, 0, 1.0};
Point(142) = {-0.035839, -0.736056, 0, 1.0};
Point(143) = {-0.041812, -0.737245, 0, 1.0};
Point(144) = {-0.047773, -0.738440, 0, 1.0};
Point(145) = {-0.053685, -0.739622, 0, 1.0};
Point(146) = {-0.059508, -0.740781, 0, 1.0};
Point(147) = {-0.065203, -0.741902, 0, 1.0};
Point(148) = {-0.070727, -0.742972, 0, 1.0};
Point(149) = {-0.076042, -0.743985, 0, 1.0};
Point(150) = {-0.081108, -0.744927, 0, 1.0};
Point(151) = {-0.085887, -0.745795, 0, 1.0};
Point(152) = {-0.090340, -0.746582, 0, 1.0};
Point(153) = {-0.094431, -0.747286, 0, 1.0};
Point(154) = {-0.098134, -0.747908, 0, 1.0};
Point(155) = {-0.101423, -0.748442, 0, 1.0};
Point(156) = {-0.104270, -0.748884, 0, 1.0};
Point(157) = {-0.106650, -0.749231, 0, 1.0};
Point(158) = {-0.108538, -0.749485, 0, 1.0};
Point(159) = {-0.109907, -0.749649, 0, 1.0};
Point(160) = {-0.110739, -0.749736, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html