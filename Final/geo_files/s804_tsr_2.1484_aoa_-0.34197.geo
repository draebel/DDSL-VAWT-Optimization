SetFactory("OpenCASCADE");

Point(1) = {0.149996, 0.724627, 0, 1.0};
Point(2) = {0.149313, 0.724847, 0, 1.0};
Point(3) = {0.147333, 0.725523, 0, 1.0};
Point(4) = {0.144339, 0.726565, 0, 1.0};
Point(5) = {0.140377, 0.727774, 0, 1.0};
Point(6) = {0.135388, 0.729070, 0, 1.0};
Point(7) = {0.129383, 0.730498, 0, 1.0};
Point(8) = {0.122664, 0.732072, 0, 1.0};
Point(9) = {0.114733, 0.733777, 0, 1.0};
Point(10) = {0.106308, 0.735595, 0, 1.0};
Point(11) = {0.097315, 0.737493, 0, 1.0};
Point(12) = {0.087883, 0.739435, 0, 1.0};
Point(13) = {0.078141, 0.741371, 0, 1.0};
Point(14) = {0.068220, 0.743247, 0, 1.0};
Point(15) = {0.058243, 0.745008, 0, 1.0};
Point(16) = {0.048328, 0.746593, 0, 1.0};
Point(17) = {0.038583, 0.747941, 0, 1.0};
Point(18) = {0.029111, 0.748994, 0, 1.0};
Point(19) = {0.020000, 0.749700, 0, 1.0};
Point(20) = {0.011337, 0.750000, 0, 1.0};
Point(21) = {0.003193, 0.749829, 0, 1.0};
Point(22) = {-0.004434, 0.749090, 0, 1.0};
Point(23) = {-0.011627, 0.747805, 0, 1.0};
Point(24) = {-0.018391, 0.746099, 0, 1.0};
Point(25) = {-0.024651, 0.744063, 0, 1.0};
Point(26) = {-0.030343, 0.741767, 0, 1.0};
Point(27) = {-0.035402, 0.739269, 0, 1.0};
Point(28) = {-0.039775, 0.736631, 0, 1.0};
Point(29) = {-0.043414, 0.733905, 0, 1.0};
Point(30) = {-0.046278, 0.731158, 0, 1.0};
Point(31) = {-0.048342, 0.728445, 0, 1.0};
Point(32) = {-0.049586, 0.725840, 0, 1.0};
Point(33) = {-0.050000, 0.723433, 0, 1.0};
Point(34) = {-0.049566, 0.721390, 0, 1.0};
Point(35) = {-0.048020, 0.719765, 0, 1.0};
Point(36) = {-0.045232, 0.718398, 0, 1.0};
Point(37) = {-0.041371, 0.717187, 0, 1.0};
Point(38) = {-0.036512, 0.716146, 0, 1.0};
Point(39) = {-0.030727, 0.715292, 0, 1.0};
Point(40) = {-0.024083, 0.714634, 0, 1.0};
Point(41) = {-0.016660, 0.714180, 0, 1.0};
Point(42) = {-0.008545, 0.713937, 0, 1.0};
Point(43) = {0.000164, 0.713913, 0, 1.0};
Point(44) = {0.009357, 0.714126, 0, 1.0};
Point(45) = {0.018916, 0.714623, 0, 1.0};
Point(46) = {0.028791, 0.715496, 0, 1.0};
Point(47) = {0.039025, 0.716753, 0, 1.0};
Point(48) = {0.049629, 0.718282, 0, 1.0};
Point(49) = {0.060511, 0.719935, 0, 1.0};
Point(50) = {0.071539, 0.721597, 0, 1.0};
Point(51) = {0.082564, 0.723161, 0, 1.0};
Point(52) = {0.093412, 0.724531, 0, 1.0};
Point(53) = {0.103894, 0.725622, 0, 1.0};
Point(54) = {0.113809, 0.726375, 0, 1.0};
Point(55) = {0.122949, 0.726738, 0, 1.0};
Point(56) = {0.131063, 0.726886, 0, 1.0};
Point(57) = {0.137884, 0.726289, 0, 1.0};
Point(58) = {0.143220, 0.725723, 0, 1.0};
Point(59) = {0.147007, 0.725169, 0, 1.0};
Point(60) = {0.149254, 0.724773, 0, 1.0};
Point(61) = {-0.149996, -0.724627, 0, 1.0};
Point(62) = {-0.149313, -0.724847, 0, 1.0};
Point(63) = {-0.147333, -0.725523, 0, 1.0};
Point(64) = {-0.144339, -0.726565, 0, 1.0};
Point(65) = {-0.140377, -0.727774, 0, 1.0};
Point(66) = {-0.135388, -0.729070, 0, 1.0};
Point(67) = {-0.129383, -0.730498, 0, 1.0};
Point(68) = {-0.122664, -0.732072, 0, 1.0};
Point(69) = {-0.114733, -0.733777, 0, 1.0};
Point(70) = {-0.106308, -0.735595, 0, 1.0};
Point(71) = {-0.097315, -0.737493, 0, 1.0};
Point(72) = {-0.087883, -0.739435, 0, 1.0};
Point(73) = {-0.078141, -0.741371, 0, 1.0};
Point(74) = {-0.068220, -0.743247, 0, 1.0};
Point(75) = {-0.058243, -0.745008, 0, 1.0};
Point(76) = {-0.048328, -0.746593, 0, 1.0};
Point(77) = {-0.038583, -0.747941, 0, 1.0};
Point(78) = {-0.029111, -0.748994, 0, 1.0};
Point(79) = {-0.020000, -0.749700, 0, 1.0};
Point(80) = {-0.011337, -0.750000, 0, 1.0};
Point(81) = {-0.003193, -0.749829, 0, 1.0};
Point(82) = {0.004434, -0.749090, 0, 1.0};
Point(83) = {0.011627, -0.747805, 0, 1.0};
Point(84) = {0.018391, -0.746099, 0, 1.0};
Point(85) = {0.024651, -0.744063, 0, 1.0};
Point(86) = {0.030343, -0.741767, 0, 1.0};
Point(87) = {0.035402, -0.739269, 0, 1.0};
Point(88) = {0.039775, -0.736631, 0, 1.0};
Point(89) = {0.043414, -0.733905, 0, 1.0};
Point(90) = {0.046278, -0.731158, 0, 1.0};
Point(91) = {0.048342, -0.728445, 0, 1.0};
Point(92) = {0.049586, -0.725840, 0, 1.0};
Point(93) = {0.050000, -0.723433, 0, 1.0};
Point(94) = {0.049566, -0.721390, 0, 1.0};
Point(95) = {0.048020, -0.719765, 0, 1.0};
Point(96) = {0.045232, -0.718398, 0, 1.0};
Point(97) = {0.041371, -0.717187, 0, 1.0};
Point(98) = {0.036512, -0.716146, 0, 1.0};
Point(99) = {0.030727, -0.715292, 0, 1.0};
Point(100) = {0.024083, -0.714634, 0, 1.0};
Point(101) = {0.016660, -0.714180, 0, 1.0};
Point(102) = {0.008545, -0.713937, 0, 1.0};
Point(103) = {-0.000164, -0.713913, 0, 1.0};
Point(104) = {-0.009357, -0.714126, 0, 1.0};
Point(105) = {-0.018916, -0.714623, 0, 1.0};
Point(106) = {-0.028791, -0.715496, 0, 1.0};
Point(107) = {-0.039025, -0.716753, 0, 1.0};
Point(108) = {-0.049629, -0.718282, 0, 1.0};
Point(109) = {-0.060511, -0.719935, 0, 1.0};
Point(110) = {-0.071539, -0.721597, 0, 1.0};
Point(111) = {-0.082564, -0.723161, 0, 1.0};
Point(112) = {-0.093412, -0.724531, 0, 1.0};
Point(113) = {-0.103894, -0.725622, 0, 1.0};
Point(114) = {-0.113809, -0.726375, 0, 1.0};
Point(115) = {-0.122949, -0.726738, 0, 1.0};
Point(116) = {-0.131063, -0.726886, 0, 1.0};
Point(117) = {-0.137884, -0.726289, 0, 1.0};
Point(118) = {-0.143220, -0.725723, 0, 1.0};
Point(119) = {-0.147007, -0.725169, 0, 1.0};
Point(120) = {-0.149254, -0.724773, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 46 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html