SetFactory("OpenCASCADE");

Point(1) = {0.074998, 0.737314, 0, 1.0};
Point(2) = {0.074657, 0.737424, 0, 1.0};
Point(3) = {0.073667, 0.737762, 0, 1.0};
Point(4) = {0.072169, 0.738283, 0, 1.0};
Point(5) = {0.070189, 0.738887, 0, 1.0};
Point(6) = {0.067694, 0.739535, 0, 1.0};
Point(7) = {0.064692, 0.740249, 0, 1.0};
Point(8) = {0.061332, 0.741036, 0, 1.0};
Point(9) = {0.057367, 0.741888, 0, 1.0};
Point(10) = {0.053154, 0.742797, 0, 1.0};
Point(11) = {0.048657, 0.743746, 0, 1.0};
Point(12) = {0.043941, 0.744717, 0, 1.0};
Point(13) = {0.039071, 0.745685, 0, 1.0};
Point(14) = {0.034110, 0.746624, 0, 1.0};
Point(15) = {0.029122, 0.747504, 0, 1.0};
Point(16) = {0.024164, 0.748296, 0, 1.0};
Point(17) = {0.019292, 0.748970, 0, 1.0};
Point(18) = {0.014555, 0.749497, 0, 1.0};
Point(19) = {0.010000, 0.749850, 0, 1.0};
Point(20) = {0.005668, 0.750000, 0, 1.0};
Point(21) = {0.001597, 0.749915, 0, 1.0};
Point(22) = {-0.002217, 0.749545, 0, 1.0};
Point(23) = {-0.005813, 0.748902, 0, 1.0};
Point(24) = {-0.009195, 0.748049, 0, 1.0};
Point(25) = {-0.012325, 0.747032, 0, 1.0};
Point(26) = {-0.015172, 0.745884, 0, 1.0};
Point(27) = {-0.017701, 0.744634, 0, 1.0};
Point(28) = {-0.019887, 0.743315, 0, 1.0};
Point(29) = {-0.021707, 0.741952, 0, 1.0};
Point(30) = {-0.023139, 0.740579, 0, 1.0};
Point(31) = {-0.024171, 0.739223, 0, 1.0};
Point(32) = {-0.024793, 0.737920, 0, 1.0};
Point(33) = {-0.025000, 0.736717, 0, 1.0};
Point(34) = {-0.024783, 0.735695, 0, 1.0};
Point(35) = {-0.024010, 0.734883, 0, 1.0};
Point(36) = {-0.022616, 0.734199, 0, 1.0};
Point(37) = {-0.020685, 0.733593, 0, 1.0};
Point(38) = {-0.018256, 0.733073, 0, 1.0};
Point(39) = {-0.015364, 0.732646, 0, 1.0};
Point(40) = {-0.012042, 0.732317, 0, 1.0};
Point(41) = {-0.008330, 0.732090, 0, 1.0};
Point(42) = {-0.004272, 0.731968, 0, 1.0};
Point(43) = {0.000082, 0.731956, 0, 1.0};
Point(44) = {0.004678, 0.732063, 0, 1.0};
Point(45) = {0.009458, 0.732311, 0, 1.0};
Point(46) = {0.014395, 0.732748, 0, 1.0};
Point(47) = {0.019513, 0.733376, 0, 1.0};
Point(48) = {0.024814, 0.734141, 0, 1.0};
Point(49) = {0.030255, 0.734967, 0, 1.0};
Point(50) = {0.035770, 0.735798, 0, 1.0};
Point(51) = {0.041282, 0.736580, 0, 1.0};
Point(52) = {0.046706, 0.737266, 0, 1.0};
Point(53) = {0.051947, 0.737811, 0, 1.0};
Point(54) = {0.056905, 0.738188, 0, 1.0};
Point(55) = {0.061475, 0.738369, 0, 1.0};
Point(56) = {0.065531, 0.738443, 0, 1.0};
Point(57) = {0.068942, 0.738144, 0, 1.0};
Point(58) = {0.071610, 0.737861, 0, 1.0};
Point(59) = {0.073504, 0.737585, 0, 1.0};
Point(60) = {0.074627, 0.737386, 0, 1.0};
Point(61) = {-0.074998, -0.737314, 0, 1.0};
Point(62) = {-0.074657, -0.737424, 0, 1.0};
Point(63) = {-0.073667, -0.737762, 0, 1.0};
Point(64) = {-0.072169, -0.738283, 0, 1.0};
Point(65) = {-0.070189, -0.738887, 0, 1.0};
Point(66) = {-0.067694, -0.739535, 0, 1.0};
Point(67) = {-0.064692, -0.740249, 0, 1.0};
Point(68) = {-0.061332, -0.741036, 0, 1.0};
Point(69) = {-0.057367, -0.741888, 0, 1.0};
Point(70) = {-0.053154, -0.742797, 0, 1.0};
Point(71) = {-0.048657, -0.743746, 0, 1.0};
Point(72) = {-0.043941, -0.744717, 0, 1.0};
Point(73) = {-0.039071, -0.745685, 0, 1.0};
Point(74) = {-0.034110, -0.746624, 0, 1.0};
Point(75) = {-0.029122, -0.747504, 0, 1.0};
Point(76) = {-0.024164, -0.748296, 0, 1.0};
Point(77) = {-0.019292, -0.748970, 0, 1.0};
Point(78) = {-0.014555, -0.749497, 0, 1.0};
Point(79) = {-0.010000, -0.749850, 0, 1.0};
Point(80) = {-0.005668, -0.750000, 0, 1.0};
Point(81) = {-0.001597, -0.749915, 0, 1.0};
Point(82) = {0.002217, -0.749545, 0, 1.0};
Point(83) = {0.005813, -0.748902, 0, 1.0};
Point(84) = {0.009195, -0.748049, 0, 1.0};
Point(85) = {0.012325, -0.747032, 0, 1.0};
Point(86) = {0.015172, -0.745884, 0, 1.0};
Point(87) = {0.017701, -0.744634, 0, 1.0};
Point(88) = {0.019887, -0.743315, 0, 1.0};
Point(89) = {0.021707, -0.741952, 0, 1.0};
Point(90) = {0.023139, -0.740579, 0, 1.0};
Point(91) = {0.024171, -0.739223, 0, 1.0};
Point(92) = {0.024793, -0.737920, 0, 1.0};
Point(93) = {0.025000, -0.736717, 0, 1.0};
Point(94) = {0.024783, -0.735695, 0, 1.0};
Point(95) = {0.024010, -0.734883, 0, 1.0};
Point(96) = {0.022616, -0.734199, 0, 1.0};
Point(97) = {0.020685, -0.733593, 0, 1.0};
Point(98) = {0.018256, -0.733073, 0, 1.0};
Point(99) = {0.015364, -0.732646, 0, 1.0};
Point(100) = {0.012042, -0.732317, 0, 1.0};
Point(101) = {0.008330, -0.732090, 0, 1.0};
Point(102) = {0.004272, -0.731968, 0, 1.0};
Point(103) = {-0.000082, -0.731956, 0, 1.0};
Point(104) = {-0.004678, -0.732063, 0, 1.0};
Point(105) = {-0.009458, -0.732311, 0, 1.0};
Point(106) = {-0.014395, -0.732748, 0, 1.0};
Point(107) = {-0.019513, -0.733376, 0, 1.0};
Point(108) = {-0.024814, -0.734141, 0, 1.0};
Point(109) = {-0.030255, -0.734967, 0, 1.0};
Point(110) = {-0.035770, -0.735798, 0, 1.0};
Point(111) = {-0.041282, -0.736580, 0, 1.0};
Point(112) = {-0.046706, -0.737266, 0, 1.0};
Point(113) = {-0.051947, -0.737811, 0, 1.0};
Point(114) = {-0.056905, -0.738188, 0, 1.0};
Point(115) = {-0.061475, -0.738369, 0, 1.0};
Point(116) = {-0.065531, -0.738443, 0, 1.0};
Point(117) = {-0.068942, -0.738144, 0, 1.0};
Point(118) = {-0.071610, -0.737861, 0, 1.0};
Point(119) = {-0.073504, -0.737585, 0, 1.0};
Point(120) = {-0.074627, -0.737386, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 23 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html