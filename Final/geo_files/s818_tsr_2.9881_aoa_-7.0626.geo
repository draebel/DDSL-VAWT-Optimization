SetFactory("OpenCASCADE");

Point(1) = {0.074060, 0.744240, 0, 1.0};
Point(2) = {0.073452, 0.744400, 0, 1.0};
Point(3) = {0.069477, 0.745352, 0, 1.0};
Point(4) = {0.064867, 0.746196, 0, 1.0};
Point(5) = {0.059548, 0.746913, 0, 1.0};
Point(6) = {0.053567, 0.747560, 0, 1.0};
Point(7) = {0.047009, 0.748148, 0, 1.0};
Point(8) = {0.039966, 0.748675, 0, 1.0};
Point(9) = {0.032535, 0.749135, 0, 1.0};
Point(10) = {0.024817, 0.749515, 0, 1.0};
Point(11) = {0.016918, 0.749799, 0, 1.0};
Point(12) = {0.008941, 0.749969, 0, 1.0};
Point(13) = {0.000991, 0.750000, 0, 1.0};
Point(14) = {-0.006830, 0.749867, 0, 1.0};
Point(15) = {-0.014426, 0.749539, 0, 1.0};
Point(16) = {-0.021704, 0.748981, 0, 1.0};
Point(17) = {-0.028574, 0.748146, 0, 1.0};
Point(18) = {-0.034973, 0.746913, 0, 1.0};
Point(19) = {-0.041052, 0.745257, 0, 1.0};
Point(20) = {-0.046797, 0.743319, 0, 1.0};
Point(21) = {-0.052147, 0.741171, 0, 1.0};
Point(22) = {-0.057048, 0.738874, 0, 1.0};
Point(23) = {-0.061441, 0.736482, 0, 1.0};
Point(24) = {-0.065279, 0.734047, 0, 1.0};
Point(25) = {-0.068506, 0.731625, 0, 1.0};
Point(26) = {-0.071074, 0.729257, 0, 1.0};
Point(27) = {-0.072955, 0.726991, 0, 1.0};
Point(28) = {-0.074099, 0.724896, 0, 1.0};
Point(29) = {-0.074432, 0.723640, 0, 1.0};
Point(30) = {-0.074464, 0.723204, 0, 1.0};
Point(31) = {-0.074460, 0.723054, 0, 1.0};
Point(32) = {-0.074431, 0.722801, 0, 1.0};
Point(33) = {-0.074308, 0.722412, 0, 1.0};
Point(34) = {-0.074111, 0.722014, 0, 1.0};
Point(35) = {-0.073746, 0.721459, 0, 1.0};
Point(36) = {-0.072102, 0.719802, 0, 1.0};
Point(37) = {-0.069673, 0.718144, 0, 1.0};
Point(38) = {-0.066533, 0.716537, 0, 1.0};
Point(39) = {-0.062723, 0.714998, 0, 1.0};
Point(40) = {-0.058334, 0.713506, 0, 1.0};
Point(41) = {-0.053522, 0.712125, 0, 1.0};
Point(42) = {-0.048356, 0.710923, 0, 1.0};
Point(43) = {-0.042949, 0.709970, 0, 1.0};
Point(44) = {-0.037414, 0.709302, 0, 1.0};
Point(45) = {-0.031990, 0.709234, 0, 1.0};
Point(46) = {-0.026366, 0.710018, 0, 1.0};
Point(47) = {-0.020392, 0.711596, 0, 1.0};
Point(48) = {-0.013930, 0.713874, 0, 1.0};
Point(49) = {-0.006962, 0.716674, 0, 1.0};
Point(50) = {0.000479, 0.719852, 0, 1.0};
Point(51) = {0.008341, 0.723262, 0, 1.0};
Point(52) = {0.016542, 0.726752, 0, 1.0};
Point(53) = {0.024972, 0.730170, 0, 1.0};
Point(54) = {0.033489, 0.733368, 0, 1.0};
Point(55) = {0.041923, 0.736215, 0, 1.0};
Point(56) = {0.050076, 0.738607, 0, 1.0};
Point(57) = {0.057736, 0.740470, 0, 1.0};
Point(58) = {0.064683, 0.741774, 0, 1.0};
Point(59) = {0.070700, 0.742530, 0, 1.0};
Point(60) = {0.074242, 0.742770, 0, 1.0};
Point(61) = {-0.074060, -0.744240, 0, 1.0};
Point(62) = {-0.073452, -0.744400, 0, 1.0};
Point(63) = {-0.069477, -0.745352, 0, 1.0};
Point(64) = {-0.064867, -0.746196, 0, 1.0};
Point(65) = {-0.059548, -0.746913, 0, 1.0};
Point(66) = {-0.053567, -0.747560, 0, 1.0};
Point(67) = {-0.047009, -0.748148, 0, 1.0};
Point(68) = {-0.039966, -0.748675, 0, 1.0};
Point(69) = {-0.032535, -0.749135, 0, 1.0};
Point(70) = {-0.024817, -0.749515, 0, 1.0};
Point(71) = {-0.016918, -0.749799, 0, 1.0};
Point(72) = {-0.008941, -0.749969, 0, 1.0};
Point(73) = {-0.000991, -0.750000, 0, 1.0};
Point(74) = {0.006830, -0.749867, 0, 1.0};
Point(75) = {0.014426, -0.749539, 0, 1.0};
Point(76) = {0.021704, -0.748981, 0, 1.0};
Point(77) = {0.028574, -0.748146, 0, 1.0};
Point(78) = {0.034973, -0.746913, 0, 1.0};
Point(79) = {0.041052, -0.745257, 0, 1.0};
Point(80) = {0.046797, -0.743319, 0, 1.0};
Point(81) = {0.052147, -0.741171, 0, 1.0};
Point(82) = {0.057048, -0.738874, 0, 1.0};
Point(83) = {0.061441, -0.736482, 0, 1.0};
Point(84) = {0.065279, -0.734047, 0, 1.0};
Point(85) = {0.068506, -0.731625, 0, 1.0};
Point(86) = {0.071074, -0.729257, 0, 1.0};
Point(87) = {0.072955, -0.726991, 0, 1.0};
Point(88) = {0.074099, -0.724896, 0, 1.0};
Point(89) = {0.074432, -0.723640, 0, 1.0};
Point(90) = {0.074464, -0.723204, 0, 1.0};
Point(91) = {0.074460, -0.723054, 0, 1.0};
Point(92) = {0.074431, -0.722801, 0, 1.0};
Point(93) = {0.074308, -0.722412, 0, 1.0};
Point(94) = {0.074111, -0.722014, 0, 1.0};
Point(95) = {0.073746, -0.721459, 0, 1.0};
Point(96) = {0.072102, -0.719802, 0, 1.0};
Point(97) = {0.069673, -0.718144, 0, 1.0};
Point(98) = {0.066533, -0.716537, 0, 1.0};
Point(99) = {0.062723, -0.714998, 0, 1.0};
Point(100) = {0.058334, -0.713506, 0, 1.0};
Point(101) = {0.053522, -0.712125, 0, 1.0};
Point(102) = {0.048356, -0.710923, 0, 1.0};
Point(103) = {0.042949, -0.709970, 0, 1.0};
Point(104) = {0.037414, -0.709302, 0, 1.0};
Point(105) = {0.031990, -0.709234, 0, 1.0};
Point(106) = {0.026366, -0.710018, 0, 1.0};
Point(107) = {0.020392, -0.711596, 0, 1.0};
Point(108) = {0.013930, -0.713874, 0, 1.0};
Point(109) = {0.006962, -0.716674, 0, 1.0};
Point(110) = {-0.000479, -0.719852, 0, 1.0};
Point(111) = {-0.008341, -0.723262, 0, 1.0};
Point(112) = {-0.016542, -0.726752, 0, 1.0};
Point(113) = {-0.024972, -0.730170, 0, 1.0};
Point(114) = {-0.033489, -0.733368, 0, 1.0};
Point(115) = {-0.041923, -0.736215, 0, 1.0};
Point(116) = {-0.050076, -0.738607, 0, 1.0};
Point(117) = {-0.057736, -0.740470, 0, 1.0};
Point(118) = {-0.064683, -0.741774, 0, 1.0};
Point(119) = {-0.070700, -0.742530, 0, 1.0};
Point(120) = {-0.074242, -0.742770, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:19};
Spline(2) = {19:45};
Spline(3) = {45:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:79};
Spline(6) = {79:105};
Spline(7) = {105:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 35 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html