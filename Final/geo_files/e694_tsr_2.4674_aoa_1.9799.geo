SetFactory("OpenCASCADE");

Point(1) = {0.074944, 0.728398, 0, 1.0};
Point(2) = {0.074411, 0.728630, 0, 1.0};
Point(3) = {0.072923, 0.729351, 0, 1.0};
Point(4) = {0.070679, 0.730535, 0, 1.0};
Point(5) = {0.067822, 0.732042, 0, 1.0};
Point(6) = {0.064372, 0.733738, 0, 1.0};
Point(7) = {0.060330, 0.735584, 0, 1.0};
Point(8) = {0.055780, 0.737579, 0, 1.0};
Point(9) = {0.050861, 0.739654, 0, 1.0};
Point(10) = {0.045678, 0.741588, 0, 1.0};
Point(11) = {0.040026, 0.743220, 0, 1.0};
Point(12) = {0.033847, 0.744830, 0, 1.0};
Point(13) = {0.027521, 0.746415, 0, 1.0};
Point(14) = {0.021067, 0.747656, 0, 1.0};
Point(15) = {0.014339, 0.748590, 0, 1.0};
Point(16) = {0.007421, 0.749288, 0, 1.0};
Point(17) = {0.000386, 0.749750, 0, 1.0};
Point(18) = {-0.006690, 0.749989, 0, 1.0};
Point(19) = {-0.013737, 0.750000, 0, 1.0};
Point(20) = {-0.020681, 0.749793, 0, 1.0};
Point(21) = {-0.027451, 0.749371, 0, 1.0};
Point(22) = {-0.033981, 0.748742, 0, 1.0};
Point(23) = {-0.040206, 0.747890, 0, 1.0};
Point(24) = {-0.046065, 0.746916, 0, 1.0};
Point(25) = {-0.051502, 0.745749, 0, 1.0};
Point(26) = {-0.056468, 0.744438, 0, 1.0};
Point(27) = {-0.060915, 0.743008, 0, 1.0};
Point(28) = {-0.064808, 0.741485, 0, 1.0};
Point(29) = {-0.068109, 0.739903, 0, 1.0};
Point(30) = {-0.070797, 0.738299, 0, 1.0};
Point(31) = {-0.072846, 0.736722, 0, 1.0};
Point(32) = {-0.074240, 0.735227, 0, 1.0};
Point(33) = {-0.074955, 0.733908, 0, 1.0};
Point(34) = {-0.074806, 0.732876, 0, 1.0};
Point(35) = {-0.073692, 0.732003, 0, 1.0};
Point(36) = {-0.071709, 0.731158, 0, 1.0};
Point(37) = {-0.068904, 0.730385, 0, 1.0};
Point(38) = {-0.065311, 0.729694, 0, 1.0};
Point(39) = {-0.060962, 0.729084, 0, 1.0};
Point(40) = {-0.055908, 0.728546, 0, 1.0};
Point(41) = {-0.050211, 0.728077, 0, 1.0};
Point(42) = {-0.043945, 0.727671, 0, 1.0};
Point(43) = {-0.037198, 0.727338, 0, 1.0};
Point(44) = {-0.030039, 0.727095, 0, 1.0};
Point(45) = {-0.022539, 0.726939, 0, 1.0};
Point(46) = {-0.014782, 0.726857, 0, 1.0};
Point(47) = {-0.006876, 0.726855, 0, 1.0};
Point(48) = {0.001093, 0.726957, 0, 1.0};
Point(49) = {0.009069, 0.727158, 0, 1.0};
Point(50) = {0.016946, 0.727428, 0, 1.0};
Point(51) = {0.024590, 0.727803, 0, 1.0};
Point(52) = {0.031984, 0.728382, 0, 1.0};
Point(53) = {0.039205, 0.729133, 0, 1.0};
Point(54) = {0.046265, 0.729894, 0, 1.0};
Point(55) = {0.053070, 0.730468, 0, 1.0};
Point(56) = {0.059404, 0.730679, 0, 1.0};
Point(57) = {0.064972, 0.730456, 0, 1.0};
Point(58) = {0.069453, 0.729857, 0, 1.0};
Point(59) = {0.072588, 0.729128, 0, 1.0};
Point(60) = {0.074373, 0.728589, 0, 1.0};
Point(61) = {-0.074944, -0.728398, 0, 1.0};
Point(62) = {-0.074411, -0.728630, 0, 1.0};
Point(63) = {-0.072923, -0.729351, 0, 1.0};
Point(64) = {-0.070679, -0.730535, 0, 1.0};
Point(65) = {-0.067822, -0.732042, 0, 1.0};
Point(66) = {-0.064372, -0.733738, 0, 1.0};
Point(67) = {-0.060330, -0.735584, 0, 1.0};
Point(68) = {-0.055780, -0.737579, 0, 1.0};
Point(69) = {-0.050861, -0.739654, 0, 1.0};
Point(70) = {-0.045678, -0.741588, 0, 1.0};
Point(71) = {-0.040026, -0.743220, 0, 1.0};
Point(72) = {-0.033847, -0.744830, 0, 1.0};
Point(73) = {-0.027521, -0.746415, 0, 1.0};
Point(74) = {-0.021067, -0.747656, 0, 1.0};
Point(75) = {-0.014339, -0.748590, 0, 1.0};
Point(76) = {-0.007421, -0.749288, 0, 1.0};
Point(77) = {-0.000386, -0.749750, 0, 1.0};
Point(78) = {0.006690, -0.749989, 0, 1.0};
Point(79) = {0.013737, -0.750000, 0, 1.0};
Point(80) = {0.020681, -0.749793, 0, 1.0};
Point(81) = {0.027451, -0.749371, 0, 1.0};
Point(82) = {0.033981, -0.748742, 0, 1.0};
Point(83) = {0.040206, -0.747890, 0, 1.0};
Point(84) = {0.046065, -0.746916, 0, 1.0};
Point(85) = {0.051502, -0.745749, 0, 1.0};
Point(86) = {0.056468, -0.744438, 0, 1.0};
Point(87) = {0.060915, -0.743008, 0, 1.0};
Point(88) = {0.064808, -0.741485, 0, 1.0};
Point(89) = {0.068109, -0.739903, 0, 1.0};
Point(90) = {0.070797, -0.738299, 0, 1.0};
Point(91) = {0.072846, -0.736722, 0, 1.0};
Point(92) = {0.074240, -0.735227, 0, 1.0};
Point(93) = {0.074955, -0.733908, 0, 1.0};
Point(94) = {0.074806, -0.732876, 0, 1.0};
Point(95) = {0.073692, -0.732003, 0, 1.0};
Point(96) = {0.071709, -0.731158, 0, 1.0};
Point(97) = {0.068904, -0.730385, 0, 1.0};
Point(98) = {0.065311, -0.729694, 0, 1.0};
Point(99) = {0.060962, -0.729084, 0, 1.0};
Point(100) = {0.055908, -0.728546, 0, 1.0};
Point(101) = {0.050211, -0.728077, 0, 1.0};
Point(102) = {0.043945, -0.727671, 0, 1.0};
Point(103) = {0.037198, -0.727338, 0, 1.0};
Point(104) = {0.030039, -0.727095, 0, 1.0};
Point(105) = {0.022539, -0.726939, 0, 1.0};
Point(106) = {0.014782, -0.726857, 0, 1.0};
Point(107) = {0.006876, -0.726855, 0, 1.0};
Point(108) = {-0.001093, -0.726957, 0, 1.0};
Point(109) = {-0.009069, -0.727158, 0, 1.0};
Point(110) = {-0.016946, -0.727428, 0, 1.0};
Point(111) = {-0.024590, -0.727803, 0, 1.0};
Point(112) = {-0.031984, -0.728382, 0, 1.0};
Point(113) = {-0.039205, -0.729133, 0, 1.0};
Point(114) = {-0.046265, -0.729894, 0, 1.0};
Point(115) = {-0.053070, -0.730468, 0, 1.0};
Point(116) = {-0.059404, -0.730679, 0, 1.0};
Point(117) = {-0.064972, -0.730456, 0, 1.0};
Point(118) = {-0.069453, -0.729857, 0, 1.0};
Point(119) = {-0.072588, -0.729128, 0, 1.0};
Point(120) = {-0.074373, -0.728589, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html