SetFactory("OpenCASCADE");

Point(1) = {0.112353, 0.728408, 0, 1.0};
Point(2) = {0.111820, 0.728640, 0, 1.0};
Point(3) = {0.110333, 0.729361, 0, 1.0};
Point(4) = {0.108090, 0.730544, 0, 1.0};
Point(5) = {0.105234, 0.732050, 0, 1.0};
Point(6) = {0.101786, 0.733745, 0, 1.0};
Point(7) = {0.097745, 0.735591, 0, 1.0};
Point(8) = {0.093197, 0.737585, 0, 1.0};
Point(9) = {0.088281, 0.739659, 0, 1.0};
Point(10) = {0.083100, 0.741592, 0, 1.0};
Point(11) = {0.077450, 0.743223, 0, 1.0};
Point(12) = {0.071274, 0.744833, 0, 1.0};
Point(13) = {0.064952, 0.746417, 0, 1.0};
Point(14) = {0.058500, 0.747657, 0, 1.0};
Point(15) = {0.051775, 0.748590, 0, 1.0};
Point(16) = {0.044861, 0.749288, 0, 1.0};
Point(17) = {0.037829, 0.749751, 0, 1.0};
Point(18) = {0.030756, 0.749989, 0, 1.0};
Point(19) = {0.023713, 0.750000, 0, 1.0};
Point(20) = {0.016771, 0.749793, 0, 1.0};
Point(21) = {0.010004, 0.749371, 0, 1.0};
Point(22) = {0.003478, 0.748743, 0, 1.0};
Point(23) = {-0.002744, 0.747891, 0, 1.0};
Point(24) = {-0.008600, 0.746917, 0, 1.0};
Point(25) = {-0.014035, 0.745751, 0, 1.0};
Point(26) = {-0.018999, 0.744440, 0, 1.0};
Point(27) = {-0.023444, 0.743011, 0, 1.0};
Point(28) = {-0.027335, 0.741489, 0, 1.0};
Point(29) = {-0.030635, 0.739907, 0, 1.0};
Point(30) = {-0.033321, 0.738305, 0, 1.0};
Point(31) = {-0.035370, 0.736728, 0, 1.0};
Point(32) = {-0.036763, 0.735233, 0, 1.0};
Point(33) = {-0.037478, 0.733915, 0, 1.0};
Point(34) = {-0.037329, 0.732884, 0, 1.0};
Point(35) = {-0.036215, 0.732011, 0, 1.0};
Point(36) = {-0.034232, 0.731167, 0, 1.0};
Point(37) = {-0.031429, 0.730394, 0, 1.0};
Point(38) = {-0.027838, 0.729703, 0, 1.0};
Point(39) = {-0.023491, 0.729094, 0, 1.0};
Point(40) = {-0.018439, 0.728556, 0, 1.0};
Point(41) = {-0.012744, 0.728087, 0, 1.0};
Point(42) = {-0.006482, 0.727682, 0, 1.0};
Point(43) = {0.000262, 0.727348, 0, 1.0};
Point(44) = {0.007418, 0.727105, 0, 1.0};
Point(45) = {0.014915, 0.726950, 0, 1.0};
Point(46) = {0.022668, 0.726868, 0, 1.0};
Point(47) = {0.030570, 0.726866, 0, 1.0};
Point(48) = {0.038536, 0.726967, 0, 1.0};
Point(49) = {0.046508, 0.727169, 0, 1.0};
Point(50) = {0.054381, 0.727438, 0, 1.0};
Point(51) = {0.062022, 0.727814, 0, 1.0};
Point(52) = {0.069412, 0.728392, 0, 1.0};
Point(53) = {0.076630, 0.729142, 0, 1.0};
Point(54) = {0.083687, 0.729904, 0, 1.0};
Point(55) = {0.090489, 0.730477, 0, 1.0};
Point(56) = {0.096820, 0.730688, 0, 1.0};
Point(57) = {0.102385, 0.730465, 0, 1.0};
Point(58) = {0.106864, 0.729866, 0, 1.0};
Point(59) = {0.109998, 0.729138, 0, 1.0};
Point(60) = {0.111781, 0.728599, 0, 1.0};
Point(61) = {-0.112353, -0.728408, 0, 1.0};
Point(62) = {-0.111820, -0.728640, 0, 1.0};
Point(63) = {-0.110333, -0.729361, 0, 1.0};
Point(64) = {-0.108090, -0.730544, 0, 1.0};
Point(65) = {-0.105234, -0.732050, 0, 1.0};
Point(66) = {-0.101786, -0.733745, 0, 1.0};
Point(67) = {-0.097745, -0.735591, 0, 1.0};
Point(68) = {-0.093197, -0.737585, 0, 1.0};
Point(69) = {-0.088281, -0.739659, 0, 1.0};
Point(70) = {-0.083100, -0.741592, 0, 1.0};
Point(71) = {-0.077450, -0.743223, 0, 1.0};
Point(72) = {-0.071274, -0.744833, 0, 1.0};
Point(73) = {-0.064952, -0.746417, 0, 1.0};
Point(74) = {-0.058500, -0.747657, 0, 1.0};
Point(75) = {-0.051775, -0.748590, 0, 1.0};
Point(76) = {-0.044861, -0.749288, 0, 1.0};
Point(77) = {-0.037829, -0.749751, 0, 1.0};
Point(78) = {-0.030756, -0.749989, 0, 1.0};
Point(79) = {-0.023713, -0.750000, 0, 1.0};
Point(80) = {-0.016771, -0.749793, 0, 1.0};
Point(81) = {-0.010004, -0.749371, 0, 1.0};
Point(82) = {-0.003478, -0.748743, 0, 1.0};
Point(83) = {0.002744, -0.747891, 0, 1.0};
Point(84) = {0.008600, -0.746917, 0, 1.0};
Point(85) = {0.014035, -0.745751, 0, 1.0};
Point(86) = {0.018999, -0.744440, 0, 1.0};
Point(87) = {0.023444, -0.743011, 0, 1.0};
Point(88) = {0.027335, -0.741489, 0, 1.0};
Point(89) = {0.030635, -0.739907, 0, 1.0};
Point(90) = {0.033321, -0.738305, 0, 1.0};
Point(91) = {0.035370, -0.736728, 0, 1.0};
Point(92) = {0.036763, -0.735233, 0, 1.0};
Point(93) = {0.037478, -0.733915, 0, 1.0};
Point(94) = {0.037329, -0.732884, 0, 1.0};
Point(95) = {0.036215, -0.732011, 0, 1.0};
Point(96) = {0.034232, -0.731167, 0, 1.0};
Point(97) = {0.031429, -0.730394, 0, 1.0};
Point(98) = {0.027838, -0.729703, 0, 1.0};
Point(99) = {0.023491, -0.729094, 0, 1.0};
Point(100) = {0.018439, -0.728556, 0, 1.0};
Point(101) = {0.012744, -0.728087, 0, 1.0};
Point(102) = {0.006482, -0.727682, 0, 1.0};
Point(103) = {-0.000262, -0.727348, 0, 1.0};
Point(104) = {-0.007418, -0.727105, 0, 1.0};
Point(105) = {-0.014915, -0.726950, 0, 1.0};
Point(106) = {-0.022668, -0.726868, 0, 1.0};
Point(107) = {-0.030570, -0.726866, 0, 1.0};
Point(108) = {-0.038536, -0.726967, 0, 1.0};
Point(109) = {-0.046508, -0.727169, 0, 1.0};
Point(110) = {-0.054381, -0.727438, 0, 1.0};
Point(111) = {-0.062022, -0.727814, 0, 1.0};
Point(112) = {-0.069412, -0.728392, 0, 1.0};
Point(113) = {-0.076630, -0.729142, 0, 1.0};
Point(114) = {-0.083687, -0.729904, 0, 1.0};
Point(115) = {-0.090489, -0.730477, 0, 1.0};
Point(116) = {-0.096820, -0.730688, 0, 1.0};
Point(117) = {-0.102385, -0.730465, 0, 1.0};
Point(118) = {-0.106864, -0.729866, 0, 1.0};
Point(119) = {-0.109998, -0.729138, 0, 1.0};
Point(120) = {-0.111781, -0.728599, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html