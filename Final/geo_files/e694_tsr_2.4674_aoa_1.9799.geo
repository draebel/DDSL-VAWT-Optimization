SetFactory("OpenCASCADE");

Point(1) = {0.074940, 0.735602, 0, 1.0};
Point(2) = {0.074585, 0.735757, 0, 1.0};
Point(3) = {0.073593, 0.736237, 0, 1.0};
Point(4) = {0.072098, 0.737026, 0, 1.0};
Point(5) = {0.070193, 0.738031, 0, 1.0};
Point(6) = {0.067894, 0.739161, 0, 1.0};
Point(7) = {0.065200, 0.740392, 0, 1.0};
Point(8) = {0.062167, 0.741721, 0, 1.0};
Point(9) = {0.058889, 0.743104, 0, 1.0};
Point(10) = {0.055434, 0.744393, 0, 1.0};
Point(11) = {0.051667, 0.745481, 0, 1.0};
Point(12) = {0.047548, 0.746554, 0, 1.0};
Point(13) = {0.043332, 0.747611, 0, 1.0};
Point(14) = {0.039030, 0.748438, 0, 1.0};
Point(15) = {0.034546, 0.749060, 0, 1.0};
Point(16) = {0.029935, 0.749526, 0, 1.0};
Point(17) = {0.025246, 0.749834, 0, 1.0};
Point(18) = {0.020530, 0.749993, 0, 1.0};
Point(19) = {0.015833, 0.750000, 0, 1.0};
Point(20) = {0.011205, 0.749862, 0, 1.0};
Point(21) = {0.006692, 0.749581, 0, 1.0};
Point(22) = {0.002340, 0.749162, 0, 1.0};
Point(23) = {-0.001809, 0.748594, 0, 1.0};
Point(24) = {-0.005713, 0.747944, 0, 1.0};
Point(25) = {-0.009337, 0.747167, 0, 1.0};
Point(26) = {-0.012648, 0.746293, 0, 1.0};
Point(27) = {-0.015611, 0.745340, 0, 1.0};
Point(28) = {-0.018206, 0.744325, 0, 1.0};
Point(29) = {-0.020407, 0.743270, 0, 1.0};
Point(30) = {-0.022198, 0.742201, 0, 1.0};
Point(31) = {-0.023564, 0.741150, 0, 1.0};
Point(32) = {-0.024493, 0.740153, 0, 1.0};
Point(33) = {-0.024969, 0.739274, 0, 1.0};
Point(34) = {-0.024870, 0.738586, 0, 1.0};
Point(35) = {-0.024128, 0.738004, 0, 1.0};
Point(36) = {-0.022806, 0.737441, 0, 1.0};
Point(37) = {-0.020936, 0.736927, 0, 1.0};
Point(38) = {-0.018542, 0.736466, 0, 1.0};
Point(39) = {-0.015643, 0.736059, 0, 1.0};
Point(40) = {-0.012274, 0.735701, 0, 1.0};
Point(41) = {-0.008477, 0.735388, 0, 1.0};
Point(42) = {-0.004301, 0.735118, 0, 1.0};
Point(43) = {0.000196, 0.734895, 0, 1.0};
Point(44) = {0.004968, 0.734733, 0, 1.0};
Point(45) = {0.009967, 0.734630, 0, 1.0};
Point(46) = {0.015137, 0.734575, 0, 1.0};
Point(47) = {0.020406, 0.734574, 0, 1.0};
Point(48) = {0.025718, 0.734641, 0, 1.0};
Point(49) = {0.031034, 0.734776, 0, 1.0};
Point(50) = {0.036284, 0.734955, 0, 1.0};
Point(51) = {0.041379, 0.735206, 0, 1.0};
Point(52) = {0.046307, 0.735592, 0, 1.0};
Point(53) = {0.051120, 0.736092, 0, 1.0};
Point(54) = {0.055825, 0.736599, 0, 1.0};
Point(55) = {0.060361, 0.736982, 0, 1.0};
Point(56) = {0.064583, 0.737122, 0, 1.0};
Point(57) = {0.068294, 0.736974, 0, 1.0};
Point(58) = {0.071281, 0.736574, 0, 1.0};
Point(59) = {0.073370, 0.736089, 0, 1.0};
Point(60) = {0.074559, 0.735730, 0, 1.0};
Point(61) = {-0.074940, -0.735602, 0, 1.0};
Point(62) = {-0.074585, -0.735757, 0, 1.0};
Point(63) = {-0.073593, -0.736237, 0, 1.0};
Point(64) = {-0.072098, -0.737026, 0, 1.0};
Point(65) = {-0.070193, -0.738031, 0, 1.0};
Point(66) = {-0.067894, -0.739161, 0, 1.0};
Point(67) = {-0.065200, -0.740392, 0, 1.0};
Point(68) = {-0.062167, -0.741721, 0, 1.0};
Point(69) = {-0.058889, -0.743104, 0, 1.0};
Point(70) = {-0.055434, -0.744393, 0, 1.0};
Point(71) = {-0.051667, -0.745481, 0, 1.0};
Point(72) = {-0.047548, -0.746554, 0, 1.0};
Point(73) = {-0.043332, -0.747611, 0, 1.0};
Point(74) = {-0.039030, -0.748438, 0, 1.0};
Point(75) = {-0.034546, -0.749060, 0, 1.0};
Point(76) = {-0.029935, -0.749526, 0, 1.0};
Point(77) = {-0.025246, -0.749834, 0, 1.0};
Point(78) = {-0.020530, -0.749993, 0, 1.0};
Point(79) = {-0.015833, -0.750000, 0, 1.0};
Point(80) = {-0.011205, -0.749862, 0, 1.0};
Point(81) = {-0.006692, -0.749581, 0, 1.0};
Point(82) = {-0.002340, -0.749162, 0, 1.0};
Point(83) = {0.001809, -0.748594, 0, 1.0};
Point(84) = {0.005713, -0.747944, 0, 1.0};
Point(85) = {0.009337, -0.747167, 0, 1.0};
Point(86) = {0.012648, -0.746293, 0, 1.0};
Point(87) = {0.015611, -0.745340, 0, 1.0};
Point(88) = {0.018206, -0.744325, 0, 1.0};
Point(89) = {0.020407, -0.743270, 0, 1.0};
Point(90) = {0.022198, -0.742201, 0, 1.0};
Point(91) = {0.023564, -0.741150, 0, 1.0};
Point(92) = {0.024493, -0.740153, 0, 1.0};
Point(93) = {0.024969, -0.739274, 0, 1.0};
Point(94) = {0.024870, -0.738586, 0, 1.0};
Point(95) = {0.024128, -0.738004, 0, 1.0};
Point(96) = {0.022806, -0.737441, 0, 1.0};
Point(97) = {0.020936, -0.736927, 0, 1.0};
Point(98) = {0.018542, -0.736466, 0, 1.0};
Point(99) = {0.015643, -0.736059, 0, 1.0};
Point(100) = {0.012274, -0.735701, 0, 1.0};
Point(101) = {0.008477, -0.735388, 0, 1.0};
Point(102) = {0.004301, -0.735118, 0, 1.0};
Point(103) = {-0.000196, -0.734895, 0, 1.0};
Point(104) = {-0.004968, -0.734733, 0, 1.0};
Point(105) = {-0.009967, -0.734630, 0, 1.0};
Point(106) = {-0.015137, -0.734575, 0, 1.0};
Point(107) = {-0.020406, -0.734574, 0, 1.0};
Point(108) = {-0.025718, -0.734641, 0, 1.0};
Point(109) = {-0.031034, -0.734776, 0, 1.0};
Point(110) = {-0.036284, -0.734955, 0, 1.0};
Point(111) = {-0.041379, -0.735206, 0, 1.0};
Point(112) = {-0.046307, -0.735592, 0, 1.0};
Point(113) = {-0.051120, -0.736092, 0, 1.0};
Point(114) = {-0.055825, -0.736599, 0, 1.0};
Point(115) = {-0.060361, -0.736982, 0, 1.0};
Point(116) = {-0.064583, -0.737122, 0, 1.0};
Point(117) = {-0.068294, -0.736974, 0, 1.0};
Point(118) = {-0.071281, -0.736574, 0, 1.0};
Point(119) = {-0.073370, -0.736089, 0, 1.0};
Point(120) = {-0.074559, -0.735730, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:82};
Spline(6) = {82:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html