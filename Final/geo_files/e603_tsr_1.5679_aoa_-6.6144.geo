SetFactory("OpenCASCADE");

Point(1) = {0.111457, 0.740596, 0, 1.0};
Point(2) = {0.110884, 0.740658, 0, 1.0};
Point(3) = {0.109232, 0.740890, 0, 1.0};
Point(4) = {0.106654, 0.741327, 0, 1.0};
Point(5) = {0.103282, 0.741907, 0, 1.0};
Point(6) = {0.099170, 0.742537, 0, 1.0};
Point(7) = {0.094316, 0.743198, 0, 1.0};
Point(8) = {0.088775, 0.743924, 0, 1.0};
Point(9) = {0.082656, 0.744734, 0, 1.0};
Point(10) = {0.076070, 0.745615, 0, 1.0};
Point(11) = {0.069141, 0.746547, 0, 1.0};
Point(12) = {0.061992, 0.747492, 0, 1.0};
Point(13) = {0.054745, 0.748398, 0, 1.0};
Point(14) = {0.047520, 0.749196, 0, 1.0};
Point(15) = {0.040433, 0.749779, 0, 1.0};
Point(16) = {0.033505, 0.750000, 0, 1.0};
Point(17) = {0.026672, 0.749814, 0, 1.0};
Point(18) = {0.019922, 0.749274, 0, 1.0};
Point(19) = {0.013309, 0.748422, 0, 1.0};
Point(20) = {0.006884, 0.747286, 0, 1.0};
Point(21) = {0.000700, 0.745899, 0, 1.0};
Point(22) = {-0.005185, 0.744293, 0, 1.0};
Point(23) = {-0.010715, 0.742505, 0, 1.0};
Point(24) = {-0.015835, 0.740565, 0, 1.0};
Point(25) = {-0.020494, 0.738505, 0, 1.0};
Point(26) = {-0.024649, 0.736359, 0, 1.0};
Point(27) = {-0.028265, 0.734162, 0, 1.0};
Point(28) = {-0.031309, 0.731958, 0, 1.0};
Point(29) = {-0.033760, 0.729786, 0, 1.0};
Point(30) = {-0.035597, 0.727697, 0, 1.0};
Point(31) = {-0.036813, 0.725752, 0, 1.0};
Point(32) = {-0.037390, 0.724039, 0, 1.0};
Point(33) = {-0.037250, 0.722735, 0, 1.0};
Point(34) = {-0.036198, 0.721749, 0, 1.0};
Point(35) = {-0.034207, 0.720875, 0, 1.0};
Point(36) = {-0.031418, 0.720146, 0, 1.0};
Point(37) = {-0.027876, 0.719579, 0, 1.0};
Point(38) = {-0.023620, 0.719177, 0, 1.0};
Point(39) = {-0.018700, 0.718935, 0, 1.0};
Point(40) = {-0.013182, 0.718849, 0, 1.0};
Point(41) = {-0.007138, 0.718919, 0, 1.0};
Point(42) = {-0.000643, 0.719144, 0, 1.0};
Point(43) = {0.006226, 0.719525, 0, 1.0};
Point(44) = {0.013385, 0.720058, 0, 1.0};
Point(45) = {0.020744, 0.720739, 0, 1.0};
Point(46) = {0.028207, 0.721573, 0, 1.0};
Point(47) = {0.035676, 0.722566, 0, 1.0};
Point(48) = {0.043049, 0.723747, 0, 1.0};
Point(49) = {0.050262, 0.725169, 0, 1.0};
Point(50) = {0.057281, 0.726876, 0, 1.0};
Point(51) = {0.064139, 0.728921, 0, 1.0};
Point(52) = {0.070966, 0.731232, 0, 1.0};
Point(53) = {0.077782, 0.733570, 0, 1.0};
Point(54) = {0.084455, 0.735729, 0, 1.0};
Point(55) = {0.090811, 0.737572, 0, 1.0};
Point(56) = {0.096661, 0.739008, 0, 1.0};
Point(57) = {0.101807, 0.739979, 0, 1.0};
Point(58) = {0.106016, 0.740478, 0, 1.0};
Point(59) = {0.109064, 0.740621, 0, 1.0};
Point(60) = {0.110867, 0.740613, 0, 1.0};
Point(61) = {-0.111457, -0.740596, 0, 1.0};
Point(62) = {-0.110884, -0.740658, 0, 1.0};
Point(63) = {-0.109232, -0.740890, 0, 1.0};
Point(64) = {-0.106654, -0.741327, 0, 1.0};
Point(65) = {-0.103282, -0.741907, 0, 1.0};
Point(66) = {-0.099170, -0.742537, 0, 1.0};
Point(67) = {-0.094316, -0.743198, 0, 1.0};
Point(68) = {-0.088775, -0.743924, 0, 1.0};
Point(69) = {-0.082656, -0.744734, 0, 1.0};
Point(70) = {-0.076070, -0.745615, 0, 1.0};
Point(71) = {-0.069141, -0.746547, 0, 1.0};
Point(72) = {-0.061992, -0.747492, 0, 1.0};
Point(73) = {-0.054745, -0.748398, 0, 1.0};
Point(74) = {-0.047520, -0.749196, 0, 1.0};
Point(75) = {-0.040433, -0.749779, 0, 1.0};
Point(76) = {-0.033505, -0.750000, 0, 1.0};
Point(77) = {-0.026672, -0.749814, 0, 1.0};
Point(78) = {-0.019922, -0.749274, 0, 1.0};
Point(79) = {-0.013309, -0.748422, 0, 1.0};
Point(80) = {-0.006884, -0.747286, 0, 1.0};
Point(81) = {-0.000700, -0.745899, 0, 1.0};
Point(82) = {0.005185, -0.744293, 0, 1.0};
Point(83) = {0.010715, -0.742505, 0, 1.0};
Point(84) = {0.015835, -0.740565, 0, 1.0};
Point(85) = {0.020494, -0.738505, 0, 1.0};
Point(86) = {0.024649, -0.736359, 0, 1.0};
Point(87) = {0.028265, -0.734162, 0, 1.0};
Point(88) = {0.031309, -0.731958, 0, 1.0};
Point(89) = {0.033760, -0.729786, 0, 1.0};
Point(90) = {0.035597, -0.727697, 0, 1.0};
Point(91) = {0.036813, -0.725752, 0, 1.0};
Point(92) = {0.037390, -0.724039, 0, 1.0};
Point(93) = {0.037250, -0.722735, 0, 1.0};
Point(94) = {0.036198, -0.721749, 0, 1.0};
Point(95) = {0.034207, -0.720875, 0, 1.0};
Point(96) = {0.031418, -0.720146, 0, 1.0};
Point(97) = {0.027876, -0.719579, 0, 1.0};
Point(98) = {0.023620, -0.719177, 0, 1.0};
Point(99) = {0.018700, -0.718935, 0, 1.0};
Point(100) = {0.013182, -0.718849, 0, 1.0};
Point(101) = {0.007138, -0.718919, 0, 1.0};
Point(102) = {0.000643, -0.719144, 0, 1.0};
Point(103) = {-0.006226, -0.719525, 0, 1.0};
Point(104) = {-0.013385, -0.720058, 0, 1.0};
Point(105) = {-0.020744, -0.720739, 0, 1.0};
Point(106) = {-0.028207, -0.721573, 0, 1.0};
Point(107) = {-0.035676, -0.722566, 0, 1.0};
Point(108) = {-0.043049, -0.723747, 0, 1.0};
Point(109) = {-0.050262, -0.725169, 0, 1.0};
Point(110) = {-0.057281, -0.726876, 0, 1.0};
Point(111) = {-0.064139, -0.728921, 0, 1.0};
Point(112) = {-0.070966, -0.731232, 0, 1.0};
Point(113) = {-0.077782, -0.733570, 0, 1.0};
Point(114) = {-0.084455, -0.735729, 0, 1.0};
Point(115) = {-0.090811, -0.737572, 0, 1.0};
Point(116) = {-0.096661, -0.739008, 0, 1.0};
Point(117) = {-0.101807, -0.739979, 0, 1.0};
Point(118) = {-0.106016, -0.740478, 0, 1.0};
Point(119) = {-0.109064, -0.740621, 0, 1.0};
Point(120) = {-0.110867, -0.740613, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html