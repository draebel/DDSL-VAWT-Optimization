SetFactory("OpenCASCADE");

Point(1) = {0.148669, 0.737452, 0, 1.0};
Point(2) = {0.147904, 0.737534, 0, 1.0};
Point(3) = {0.145700, 0.737844, 0, 1.0};
Point(4) = {0.142260, 0.738428, 0, 1.0};
Point(5) = {0.137761, 0.739201, 0, 1.0};
Point(6) = {0.132273, 0.740042, 0, 1.0};
Point(7) = {0.125797, 0.740924, 0, 1.0};
Point(8) = {0.118404, 0.741893, 0, 1.0};
Point(9) = {0.110239, 0.742974, 0, 1.0};
Point(10) = {0.101451, 0.744149, 0, 1.0};
Point(11) = {0.092204, 0.745392, 0, 1.0};
Point(12) = {0.082665, 0.746654, 0, 1.0};
Point(13) = {0.072996, 0.747862, 0, 1.0};
Point(14) = {0.063355, 0.748927, 0, 1.0};
Point(15) = {0.053899, 0.749705, 0, 1.0};
Point(16) = {0.044655, 0.750000, 0, 1.0};
Point(17) = {0.035537, 0.749752, 0, 1.0};
Point(18) = {0.026530, 0.749032, 0, 1.0};
Point(19) = {0.017706, 0.747894, 0, 1.0};
Point(20) = {0.009134, 0.746378, 0, 1.0};
Point(21) = {0.000882, 0.744527, 0, 1.0};
Point(22) = {-0.006971, 0.742385, 0, 1.0};
Point(23) = {-0.014350, 0.739999, 0, 1.0};
Point(24) = {-0.021181, 0.737411, 0, 1.0};
Point(25) = {-0.027398, 0.734662, 0, 1.0};
Point(26) = {-0.032943, 0.731799, 0, 1.0};
Point(27) = {-0.037767, 0.728867, 0, 1.0};
Point(28) = {-0.041830, 0.725926, 0, 1.0};
Point(29) = {-0.045100, 0.723028, 0, 1.0};
Point(30) = {-0.047551, 0.720241, 0, 1.0};
Point(31) = {-0.049173, 0.717645, 0, 1.0};
Point(32) = {-0.049942, 0.715359, 0, 1.0};
Point(33) = {-0.049757, 0.713619, 0, 1.0};
Point(34) = {-0.048352, 0.712304, 0, 1.0};
Point(35) = {-0.045696, 0.711138, 0, 1.0};
Point(36) = {-0.041975, 0.710164, 0, 1.0};
Point(37) = {-0.037248, 0.709408, 0, 1.0};
Point(38) = {-0.031569, 0.708872, 0, 1.0};
Point(39) = {-0.025004, 0.708548, 0, 1.0};
Point(40) = {-0.017642, 0.708434, 0, 1.0};
Point(41) = {-0.009577, 0.708527, 0, 1.0};
Point(42) = {-0.000910, 0.708827, 0, 1.0};
Point(43) = {0.008255, 0.709336, 0, 1.0};
Point(44) = {0.017808, 0.710048, 0, 1.0};
Point(45) = {0.027627, 0.710957, 0, 1.0};
Point(46) = {0.037585, 0.712069, 0, 1.0};
Point(47) = {0.047551, 0.713394, 0, 1.0};
Point(48) = {0.057389, 0.714970, 0, 1.0};
Point(49) = {0.067014, 0.716867, 0, 1.0};
Point(50) = {0.076380, 0.719145, 0, 1.0};
Point(51) = {0.085531, 0.721873, 0, 1.0};
Point(52) = {0.094640, 0.724957, 0, 1.0};
Point(53) = {0.103735, 0.728077, 0, 1.0};
Point(54) = {0.112639, 0.730958, 0, 1.0};
Point(55) = {0.121120, 0.733417, 0, 1.0};
Point(56) = {0.128925, 0.735333, 0, 1.0};
Point(57) = {0.135792, 0.736629, 0, 1.0};
Point(58) = {0.141409, 0.737294, 0, 1.0};
Point(59) = {0.145476, 0.737486, 0, 1.0};
Point(60) = {0.147881, 0.737475, 0, 1.0};
Point(61) = {-0.148669, -0.737452, 0, 1.0};
Point(62) = {-0.147904, -0.737534, 0, 1.0};
Point(63) = {-0.145700, -0.737844, 0, 1.0};
Point(64) = {-0.142260, -0.738428, 0, 1.0};
Point(65) = {-0.137761, -0.739201, 0, 1.0};
Point(66) = {-0.132273, -0.740042, 0, 1.0};
Point(67) = {-0.125797, -0.740924, 0, 1.0};
Point(68) = {-0.118404, -0.741893, 0, 1.0};
Point(69) = {-0.110239, -0.742974, 0, 1.0};
Point(70) = {-0.101451, -0.744149, 0, 1.0};
Point(71) = {-0.092204, -0.745392, 0, 1.0};
Point(72) = {-0.082665, -0.746654, 0, 1.0};
Point(73) = {-0.072996, -0.747862, 0, 1.0};
Point(74) = {-0.063355, -0.748927, 0, 1.0};
Point(75) = {-0.053899, -0.749705, 0, 1.0};
Point(76) = {-0.044655, -0.750000, 0, 1.0};
Point(77) = {-0.035537, -0.749752, 0, 1.0};
Point(78) = {-0.026530, -0.749032, 0, 1.0};
Point(79) = {-0.017706, -0.747894, 0, 1.0};
Point(80) = {-0.009134, -0.746378, 0, 1.0};
Point(81) = {-0.000882, -0.744527, 0, 1.0};
Point(82) = {0.006971, -0.742385, 0, 1.0};
Point(83) = {0.014350, -0.739999, 0, 1.0};
Point(84) = {0.021181, -0.737411, 0, 1.0};
Point(85) = {0.027398, -0.734662, 0, 1.0};
Point(86) = {0.032943, -0.731799, 0, 1.0};
Point(87) = {0.037767, -0.728867, 0, 1.0};
Point(88) = {0.041830, -0.725926, 0, 1.0};
Point(89) = {0.045100, -0.723028, 0, 1.0};
Point(90) = {0.047551, -0.720241, 0, 1.0};
Point(91) = {0.049173, -0.717645, 0, 1.0};
Point(92) = {0.049942, -0.715359, 0, 1.0};
Point(93) = {0.049757, -0.713619, 0, 1.0};
Point(94) = {0.048352, -0.712304, 0, 1.0};
Point(95) = {0.045696, -0.711138, 0, 1.0};
Point(96) = {0.041975, -0.710164, 0, 1.0};
Point(97) = {0.037248, -0.709408, 0, 1.0};
Point(98) = {0.031569, -0.708872, 0, 1.0};
Point(99) = {0.025004, -0.708548, 0, 1.0};
Point(100) = {0.017642, -0.708434, 0, 1.0};
Point(101) = {0.009577, -0.708527, 0, 1.0};
Point(102) = {0.000910, -0.708827, 0, 1.0};
Point(103) = {-0.008255, -0.709336, 0, 1.0};
Point(104) = {-0.017808, -0.710048, 0, 1.0};
Point(105) = {-0.027627, -0.710957, 0, 1.0};
Point(106) = {-0.037585, -0.712069, 0, 1.0};
Point(107) = {-0.047551, -0.713394, 0, 1.0};
Point(108) = {-0.057389, -0.714970, 0, 1.0};
Point(109) = {-0.067014, -0.716867, 0, 1.0};
Point(110) = {-0.076380, -0.719145, 0, 1.0};
Point(111) = {-0.085531, -0.721873, 0, 1.0};
Point(112) = {-0.094640, -0.724957, 0, 1.0};
Point(113) = {-0.103735, -0.728077, 0, 1.0};
Point(114) = {-0.112639, -0.730958, 0, 1.0};
Point(115) = {-0.121120, -0.733417, 0, 1.0};
Point(116) = {-0.128925, -0.735333, 0, 1.0};
Point(117) = {-0.135792, -0.736629, 0, 1.0};
Point(118) = {-0.141409, -0.737294, 0, 1.0};
Point(119) = {-0.145476, -0.737486, 0, 1.0};
Point(120) = {-0.147881, -0.737475, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html