SetFactory("OpenCASCADE");

Point(1) = {0.074334, 0.743726, 0, 1.0};
Point(2) = {0.073952, 0.743767, 0, 1.0};
Point(3) = {0.072850, 0.743922, 0, 1.0};
Point(4) = {0.071130, 0.744214, 0, 1.0};
Point(5) = {0.068880, 0.744600, 0, 1.0};
Point(6) = {0.066137, 0.745021, 0, 1.0};
Point(7) = {0.062898, 0.745462, 0, 1.0};
Point(8) = {0.059202, 0.745946, 0, 1.0};
Point(9) = {0.055119, 0.746487, 0, 1.0};
Point(10) = {0.050725, 0.747075, 0, 1.0};
Point(11) = {0.046102, 0.747696, 0, 1.0};
Point(12) = {0.041333, 0.748327, 0, 1.0};
Point(13) = {0.036498, 0.748931, 0, 1.0};
Point(14) = {0.031678, 0.749463, 0, 1.0};
Point(15) = {0.026949, 0.749852, 0, 1.0};
Point(16) = {0.022328, 0.750000, 0, 1.0};
Point(17) = {0.017768, 0.749876, 0, 1.0};
Point(18) = {0.013265, 0.749516, 0, 1.0};
Point(19) = {0.008853, 0.748947, 0, 1.0};
Point(20) = {0.004567, 0.748189, 0, 1.0};
Point(21) = {0.000441, 0.747264, 0, 1.0};
Point(22) = {-0.003486, 0.746192, 0, 1.0};
Point(23) = {-0.007175, 0.744999, 0, 1.0};
Point(24) = {-0.010591, 0.743705, 0, 1.0};
Point(25) = {-0.013699, 0.742331, 0, 1.0};
Point(26) = {-0.016471, 0.740899, 0, 1.0};
Point(27) = {-0.018884, 0.739434, 0, 1.0};
Point(28) = {-0.020915, 0.737963, 0, 1.0};
Point(29) = {-0.022550, 0.736514, 0, 1.0};
Point(30) = {-0.023775, 0.735121, 0, 1.0};
Point(31) = {-0.024586, 0.733822, 0, 1.0};
Point(32) = {-0.024971, 0.732680, 0, 1.0};
Point(33) = {-0.024878, 0.731809, 0, 1.0};
Point(34) = {-0.024176, 0.731152, 0, 1.0};
Point(35) = {-0.022848, 0.730569, 0, 1.0};
Point(36) = {-0.020988, 0.730082, 0, 1.0};
Point(37) = {-0.018624, 0.729704, 0, 1.0};
Point(38) = {-0.015784, 0.729436, 0, 1.0};
Point(39) = {-0.012502, 0.729274, 0, 1.0};
Point(40) = {-0.008821, 0.729217, 0, 1.0};
Point(41) = {-0.004788, 0.729264, 0, 1.0};
Point(42) = {-0.000455, 0.729414, 0, 1.0};
Point(43) = {0.004127, 0.729668, 0, 1.0};
Point(44) = {0.008904, 0.730024, 0, 1.0};
Point(45) = {0.013813, 0.730478, 0, 1.0};
Point(46) = {0.018793, 0.731035, 0, 1.0};
Point(47) = {0.023775, 0.731697, 0, 1.0};
Point(48) = {0.028694, 0.732485, 0, 1.0};
Point(49) = {0.033507, 0.733433, 0, 1.0};
Point(50) = {0.038190, 0.734572, 0, 1.0};
Point(51) = {0.042765, 0.735937, 0, 1.0};
Point(52) = {0.047320, 0.737478, 0, 1.0};
Point(53) = {0.051868, 0.739039, 0, 1.0};
Point(54) = {0.056319, 0.740479, 0, 1.0};
Point(55) = {0.060560, 0.741709, 0, 1.0};
Point(56) = {0.064463, 0.742667, 0, 1.0};
Point(57) = {0.067896, 0.743314, 0, 1.0};
Point(58) = {0.070704, 0.743647, 0, 1.0};
Point(59) = {0.072738, 0.743743, 0, 1.0};
Point(60) = {0.073940, 0.743737, 0, 1.0};
Point(61) = {-0.074334, -0.743726, 0, 1.0};
Point(62) = {-0.073952, -0.743767, 0, 1.0};
Point(63) = {-0.072850, -0.743922, 0, 1.0};
Point(64) = {-0.071130, -0.744214, 0, 1.0};
Point(65) = {-0.068880, -0.744600, 0, 1.0};
Point(66) = {-0.066137, -0.745021, 0, 1.0};
Point(67) = {-0.062898, -0.745462, 0, 1.0};
Point(68) = {-0.059202, -0.745946, 0, 1.0};
Point(69) = {-0.055119, -0.746487, 0, 1.0};
Point(70) = {-0.050725, -0.747075, 0, 1.0};
Point(71) = {-0.046102, -0.747696, 0, 1.0};
Point(72) = {-0.041333, -0.748327, 0, 1.0};
Point(73) = {-0.036498, -0.748931, 0, 1.0};
Point(74) = {-0.031678, -0.749463, 0, 1.0};
Point(75) = {-0.026949, -0.749852, 0, 1.0};
Point(76) = {-0.022328, -0.750000, 0, 1.0};
Point(77) = {-0.017768, -0.749876, 0, 1.0};
Point(78) = {-0.013265, -0.749516, 0, 1.0};
Point(79) = {-0.008853, -0.748947, 0, 1.0};
Point(80) = {-0.004567, -0.748189, 0, 1.0};
Point(81) = {-0.000441, -0.747264, 0, 1.0};
Point(82) = {0.003486, -0.746192, 0, 1.0};
Point(83) = {0.007175, -0.744999, 0, 1.0};
Point(84) = {0.010591, -0.743705, 0, 1.0};
Point(85) = {0.013699, -0.742331, 0, 1.0};
Point(86) = {0.016471, -0.740899, 0, 1.0};
Point(87) = {0.018884, -0.739434, 0, 1.0};
Point(88) = {0.020915, -0.737963, 0, 1.0};
Point(89) = {0.022550, -0.736514, 0, 1.0};
Point(90) = {0.023775, -0.735121, 0, 1.0};
Point(91) = {0.024586, -0.733822, 0, 1.0};
Point(92) = {0.024971, -0.732680, 0, 1.0};
Point(93) = {0.024878, -0.731809, 0, 1.0};
Point(94) = {0.024176, -0.731152, 0, 1.0};
Point(95) = {0.022848, -0.730569, 0, 1.0};
Point(96) = {0.020988, -0.730082, 0, 1.0};
Point(97) = {0.018624, -0.729704, 0, 1.0};
Point(98) = {0.015784, -0.729436, 0, 1.0};
Point(99) = {0.012502, -0.729274, 0, 1.0};
Point(100) = {0.008821, -0.729217, 0, 1.0};
Point(101) = {0.004788, -0.729264, 0, 1.0};
Point(102) = {0.000455, -0.729414, 0, 1.0};
Point(103) = {-0.004127, -0.729668, 0, 1.0};
Point(104) = {-0.008904, -0.730024, 0, 1.0};
Point(105) = {-0.013813, -0.730478, 0, 1.0};
Point(106) = {-0.018793, -0.731035, 0, 1.0};
Point(107) = {-0.023775, -0.731697, 0, 1.0};
Point(108) = {-0.028694, -0.732485, 0, 1.0};
Point(109) = {-0.033507, -0.733433, 0, 1.0};
Point(110) = {-0.038190, -0.734572, 0, 1.0};
Point(111) = {-0.042765, -0.735937, 0, 1.0};
Point(112) = {-0.047320, -0.737478, 0, 1.0};
Point(113) = {-0.051868, -0.739039, 0, 1.0};
Point(114) = {-0.056319, -0.740479, 0, 1.0};
Point(115) = {-0.060560, -0.741709, 0, 1.0};
Point(116) = {-0.064463, -0.742667, 0, 1.0};
Point(117) = {-0.067896, -0.743314, 0, 1.0};
Point(118) = {-0.070704, -0.743647, 0, 1.0};
Point(119) = {-0.072738, -0.743743, 0, 1.0};
Point(120) = {-0.073940, -0.743737, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html