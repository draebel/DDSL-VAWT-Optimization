SetFactory("OpenCASCADE");

Point(1) = {0.074605, 0.742401, 0, 1.0};
Point(2) = {0.072007, 0.742783, 0, 1.0};
Point(3) = {0.067788, 0.743410, 0, 1.0};
Point(4) = {0.062818, 0.744143, 0, 1.0};
Point(5) = {0.057202, 0.744970, 0, 1.0};
Point(6) = {0.051046, 0.745866, 0, 1.0};
Point(7) = {0.044459, 0.746794, 0, 1.0};
Point(8) = {0.037541, 0.747705, 0, 1.0};
Point(9) = {0.030393, 0.748546, 0, 1.0};
Point(10) = {0.023103, 0.749260, 0, 1.0};
Point(11) = {0.015757, 0.749772, 0, 1.0};
Point(12) = {0.008389, 0.750000, 0, 1.0};
Point(13) = {0.001000, 0.749916, 0, 1.0};
Point(14) = {-0.006398, 0.749543, 0, 1.0};
Point(15) = {-0.013747, 0.748925, 0, 1.0};
Point(16) = {-0.020970, 0.748094, 0, 1.0};
Point(17) = {-0.027989, 0.747068, 0, 1.0};
Point(18) = {-0.034732, 0.745867, 0, 1.0};
Point(19) = {-0.041127, 0.744512, 0, 1.0};
Point(20) = {-0.047112, 0.743021, 0, 1.0};
Point(21) = {-0.052626, 0.741417, 0, 1.0};
Point(22) = {-0.057616, 0.739723, 0, 1.0};
Point(23) = {-0.062035, 0.737966, 0, 1.0};
Point(24) = {-0.065841, 0.736177, 0, 1.0};
Point(25) = {-0.069004, 0.734389, 0, 1.0};
Point(26) = {-0.071494, 0.732643, 0, 1.0};
Point(27) = {-0.073295, 0.730987, 0, 1.0};
Point(28) = {-0.074383, 0.729487, 0, 1.0};
Point(29) = {-0.074510, 0.729217, 0, 1.0};
Point(30) = {-0.074652, 0.728825, 0, 1.0};
Point(31) = {-0.074709, 0.728581, 0, 1.0};
Point(32) = {-0.074735, 0.728355, 0, 1.0};
Point(33) = {-0.074734, 0.728249, 0, 1.0};
Point(34) = {-0.074726, 0.728150, 0, 1.0};
Point(35) = {-0.074703, 0.728058, 0, 1.0};
Point(36) = {-0.074664, 0.727969, 0, 1.0};
Point(37) = {-0.074610, 0.727882, 0, 1.0};
Point(38) = {-0.074543, 0.727792, 0, 1.0};
Point(39) = {-0.074376, 0.727613, 0, 1.0};
Point(40) = {-0.074169, 0.727432, 0, 1.0};
Point(41) = {-0.073787, 0.727159, 0, 1.0};
Point(42) = {-0.072378, 0.726431, 0, 1.0};
Point(43) = {-0.069879, 0.725572, 0, 1.0};
Point(44) = {-0.066591, 0.724797, 0, 1.0};
Point(45) = {-0.062557, 0.724122, 0, 1.0};
Point(46) = {-0.057824, 0.723556, 0, 1.0};
Point(47) = {-0.052443, 0.723101, 0, 1.0};
Point(48) = {-0.046494, 0.722756, 0, 1.0};
Point(49) = {-0.040047, 0.722528, 0, 1.0};
Point(50) = {-0.033188, 0.722426, 0, 1.0};
Point(51) = {-0.026002, 0.722457, 0, 1.0};
Point(52) = {-0.018574, 0.722633, 0, 1.0};
Point(53) = {-0.010997, 0.722964, 0, 1.0};
Point(54) = {-0.003357, 0.723462, 0, 1.0};
Point(55) = {0.004251, 0.724145, 0, 1.0};
Point(56) = {0.011734, 0.725028, 0, 1.0};
Point(57) = {0.018992, 0.726174, 0, 1.0};
Point(58) = {0.026019, 0.727689, 0, 1.0};
Point(59) = {0.032908, 0.729590, 0, 1.0};
Point(60) = {0.039768, 0.731771, 0, 1.0};
Point(61) = {0.046607, 0.733989, 0, 1.0};
Point(62) = {0.053273, 0.736039, 0, 1.0};
Point(63) = {0.059585, 0.737803, 0, 1.0};
Point(64) = {0.065355, 0.739202, 0, 1.0};
Point(65) = {0.070388, 0.740214, 0, 1.0};
Point(66) = {0.074516, 0.740855, 0, 1.0};
Point(67) = {0.074733, 0.740883, 0, 1.0};
Point(68) = {-0.074605, -0.742401, 0, 1.0};
Point(69) = {-0.072007, -0.742783, 0, 1.0};
Point(70) = {-0.067788, -0.743410, 0, 1.0};
Point(71) = {-0.062818, -0.744143, 0, 1.0};
Point(72) = {-0.057202, -0.744970, 0, 1.0};
Point(73) = {-0.051046, -0.745866, 0, 1.0};
Point(74) = {-0.044459, -0.746794, 0, 1.0};
Point(75) = {-0.037541, -0.747705, 0, 1.0};
Point(76) = {-0.030393, -0.748546, 0, 1.0};
Point(77) = {-0.023103, -0.749260, 0, 1.0};
Point(78) = {-0.015757, -0.749772, 0, 1.0};
Point(79) = {-0.008389, -0.750000, 0, 1.0};
Point(80) = {-0.001000, -0.749916, 0, 1.0};
Point(81) = {0.006398, -0.749543, 0, 1.0};
Point(82) = {0.013747, -0.748925, 0, 1.0};
Point(83) = {0.020970, -0.748094, 0, 1.0};
Point(84) = {0.027989, -0.747068, 0, 1.0};
Point(85) = {0.034732, -0.745867, 0, 1.0};
Point(86) = {0.041127, -0.744512, 0, 1.0};
Point(87) = {0.047112, -0.743021, 0, 1.0};
Point(88) = {0.052626, -0.741417, 0, 1.0};
Point(89) = {0.057616, -0.739723, 0, 1.0};
Point(90) = {0.062035, -0.737966, 0, 1.0};
Point(91) = {0.065841, -0.736177, 0, 1.0};
Point(92) = {0.069004, -0.734389, 0, 1.0};
Point(93) = {0.071494, -0.732643, 0, 1.0};
Point(94) = {0.073295, -0.730987, 0, 1.0};
Point(95) = {0.074383, -0.729487, 0, 1.0};
Point(96) = {0.074510, -0.729217, 0, 1.0};
Point(97) = {0.074652, -0.728825, 0, 1.0};
Point(98) = {0.074709, -0.728581, 0, 1.0};
Point(99) = {0.074735, -0.728355, 0, 1.0};
Point(100) = {0.074734, -0.728249, 0, 1.0};
Point(101) = {0.074726, -0.728150, 0, 1.0};
Point(102) = {0.074703, -0.728058, 0, 1.0};
Point(103) = {0.074664, -0.727969, 0, 1.0};
Point(104) = {0.074610, -0.727882, 0, 1.0};
Point(105) = {0.074543, -0.727792, 0, 1.0};
Point(106) = {0.074376, -0.727613, 0, 1.0};
Point(107) = {0.074169, -0.727432, 0, 1.0};
Point(108) = {0.073787, -0.727159, 0, 1.0};
Point(109) = {0.072378, -0.726431, 0, 1.0};
Point(110) = {0.069879, -0.725572, 0, 1.0};
Point(111) = {0.066591, -0.724797, 0, 1.0};
Point(112) = {0.062557, -0.724122, 0, 1.0};
Point(113) = {0.057824, -0.723556, 0, 1.0};
Point(114) = {0.052443, -0.723101, 0, 1.0};
Point(115) = {0.046494, -0.722756, 0, 1.0};
Point(116) = {0.040047, -0.722528, 0, 1.0};
Point(117) = {0.033188, -0.722426, 0, 1.0};
Point(118) = {0.026002, -0.722457, 0, 1.0};
Point(119) = {0.018574, -0.722633, 0, 1.0};
Point(120) = {0.010997, -0.722964, 0, 1.0};
Point(121) = {0.003357, -0.723462, 0, 1.0};
Point(122) = {-0.004251, -0.724145, 0, 1.0};
Point(123) = {-0.011734, -0.725028, 0, 1.0};
Point(124) = {-0.018992, -0.726174, 0, 1.0};
Point(125) = {-0.026019, -0.727689, 0, 1.0};
Point(126) = {-0.032908, -0.729590, 0, 1.0};
Point(127) = {-0.039768, -0.731771, 0, 1.0};
Point(128) = {-0.046607, -0.733989, 0, 1.0};
Point(129) = {-0.053273, -0.736039, 0, 1.0};
Point(130) = {-0.059585, -0.737803, 0, 1.0};
Point(131) = {-0.065355, -0.739202, 0, 1.0};
Point(132) = {-0.070388, -0.740214, 0, 1.0};
Point(133) = {-0.074516, -0.740855, 0, 1.0};
Point(134) = {-0.074733, -0.740883, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:85};
Spline(6) = {85:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {36.00000000, 15.00000000, 0, 1.0};
Point(138) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html