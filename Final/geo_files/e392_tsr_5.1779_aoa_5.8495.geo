SetFactory("OpenCASCADE");

Point(1) = {0.074479, 0.734190, 0, 1.0};
Point(2) = {0.074163, 0.734279, 0, 1.0};
Point(3) = {0.073237, 0.734551, 0, 1.0};
Point(4) = {0.071757, 0.735009, 0, 1.0};
Point(5) = {0.069770, 0.735626, 0, 1.0};
Point(6) = {0.067305, 0.736372, 0, 1.0};
Point(7) = {0.064386, 0.737230, 0, 1.0};
Point(8) = {0.061048, 0.738195, 0, 1.0};
Point(9) = {0.057338, 0.739252, 0, 1.0};
Point(10) = {0.053312, 0.740386, 0, 1.0};
Point(11) = {0.049021, 0.741574, 0, 1.0};
Point(12) = {0.044525, 0.742793, 0, 1.0};
Point(13) = {0.039881, 0.744014, 0, 1.0};
Point(14) = {0.035149, 0.745210, 0, 1.0};
Point(15) = {0.030388, 0.746339, 0, 1.0};
Point(16) = {0.025640, 0.747355, 0, 1.0};
Point(17) = {0.020932, 0.748226, 0, 1.0};
Point(18) = {0.016292, 0.748933, 0, 1.0};
Point(19) = {0.011746, 0.749463, 0, 1.0};
Point(20) = {0.007320, 0.749810, 0, 1.0};
Point(21) = {0.003033, 0.749983, 0, 1.0};
Point(22) = {-0.001081, 0.750000, 0, 1.0};
Point(23) = {-0.004977, 0.749878, 0, 1.0};
Point(24) = {-0.008615, 0.749628, 0, 1.0};
Point(25) = {-0.011959, 0.749259, 0, 1.0};
Point(26) = {-0.014974, 0.748784, 0, 1.0};
Point(27) = {-0.017633, 0.748216, 0, 1.0};
Point(28) = {-0.019911, 0.747569, 0, 1.0};
Point(29) = {-0.021788, 0.746866, 0, 1.0};
Point(30) = {-0.023249, 0.746125, 0, 1.0};
Point(31) = {-0.024287, 0.745382, 0, 1.0};
Point(32) = {-0.024888, 0.744687, 0, 1.0};
Point(33) = {-0.024961, 0.744122, 0, 1.0};
Point(34) = {-0.024443, 0.743625, 0, 1.0};
Point(35) = {-0.023364, 0.743118, 0, 1.0};
Point(36) = {-0.021748, 0.742634, 0, 1.0};
Point(37) = {-0.019608, 0.742180, 0, 1.0};
Point(38) = {-0.016958, 0.741755, 0, 1.0};
Point(39) = {-0.013822, 0.741357, 0, 1.0};
Point(40) = {-0.010231, 0.740980, 0, 1.0};
Point(41) = {-0.006226, 0.740619, 0, 1.0};
Point(42) = {-0.001849, 0.740273, 0, 1.0};
Point(43) = {0.002847, 0.739937, 0, 1.0};
Point(44) = {0.007807, 0.739615, 0, 1.0};
Point(45) = {0.012978, 0.739310, 0, 1.0};
Point(46) = {0.018311, 0.739019, 0, 1.0};
Point(47) = {0.023750, 0.738738, 0, 1.0};
Point(48) = {0.029237, 0.738453, 0, 1.0};
Point(49) = {0.034705, 0.738152, 0, 1.0};
Point(50) = {0.040079, 0.737828, 0, 1.0};
Point(51) = {0.045287, 0.737478, 0, 1.0};
Point(52) = {0.050258, 0.737106, 0, 1.0};
Point(53) = {0.054924, 0.736712, 0, 1.0};
Point(54) = {0.059218, 0.736305, 0, 1.0};
Point(55) = {0.063083, 0.735893, 0, 1.0};
Point(56) = {0.066459, 0.735488, 0, 1.0};
Point(57) = {0.069298, 0.735100, 0, 1.0};
Point(58) = {0.071552, 0.734745, 0, 1.0};
Point(59) = {0.073176, 0.734453, 0, 1.0};
Point(60) = {0.074154, 0.734258, 0, 1.0};
Point(61) = {-0.074479, -0.734190, 0, 1.0};
Point(62) = {-0.074163, -0.734279, 0, 1.0};
Point(63) = {-0.073237, -0.734551, 0, 1.0};
Point(64) = {-0.071757, -0.735009, 0, 1.0};
Point(65) = {-0.069770, -0.735626, 0, 1.0};
Point(66) = {-0.067305, -0.736372, 0, 1.0};
Point(67) = {-0.064386, -0.737230, 0, 1.0};
Point(68) = {-0.061048, -0.738195, 0, 1.0};
Point(69) = {-0.057338, -0.739252, 0, 1.0};
Point(70) = {-0.053312, -0.740386, 0, 1.0};
Point(71) = {-0.049021, -0.741574, 0, 1.0};
Point(72) = {-0.044525, -0.742793, 0, 1.0};
Point(73) = {-0.039881, -0.744014, 0, 1.0};
Point(74) = {-0.035149, -0.745210, 0, 1.0};
Point(75) = {-0.030388, -0.746339, 0, 1.0};
Point(76) = {-0.025640, -0.747355, 0, 1.0};
Point(77) = {-0.020932, -0.748226, 0, 1.0};
Point(78) = {-0.016292, -0.748933, 0, 1.0};
Point(79) = {-0.011746, -0.749463, 0, 1.0};
Point(80) = {-0.007320, -0.749810, 0, 1.0};
Point(81) = {-0.003033, -0.749983, 0, 1.0};
Point(82) = {0.001081, -0.750000, 0, 1.0};
Point(83) = {0.004977, -0.749878, 0, 1.0};
Point(84) = {0.008615, -0.749628, 0, 1.0};
Point(85) = {0.011959, -0.749259, 0, 1.0};
Point(86) = {0.014974, -0.748784, 0, 1.0};
Point(87) = {0.017633, -0.748216, 0, 1.0};
Point(88) = {0.019911, -0.747569, 0, 1.0};
Point(89) = {0.021788, -0.746866, 0, 1.0};
Point(90) = {0.023249, -0.746125, 0, 1.0};
Point(91) = {0.024287, -0.745382, 0, 1.0};
Point(92) = {0.024888, -0.744687, 0, 1.0};
Point(93) = {0.024961, -0.744122, 0, 1.0};
Point(94) = {0.024443, -0.743625, 0, 1.0};
Point(95) = {0.023364, -0.743118, 0, 1.0};
Point(96) = {0.021748, -0.742634, 0, 1.0};
Point(97) = {0.019608, -0.742180, 0, 1.0};
Point(98) = {0.016958, -0.741755, 0, 1.0};
Point(99) = {0.013822, -0.741357, 0, 1.0};
Point(100) = {0.010231, -0.740980, 0, 1.0};
Point(101) = {0.006226, -0.740619, 0, 1.0};
Point(102) = {0.001849, -0.740273, 0, 1.0};
Point(103) = {-0.002847, -0.739937, 0, 1.0};
Point(104) = {-0.007807, -0.739615, 0, 1.0};
Point(105) = {-0.012978, -0.739310, 0, 1.0};
Point(106) = {-0.018311, -0.739019, 0, 1.0};
Point(107) = {-0.023750, -0.738738, 0, 1.0};
Point(108) = {-0.029237, -0.738453, 0, 1.0};
Point(109) = {-0.034705, -0.738152, 0, 1.0};
Point(110) = {-0.040079, -0.737828, 0, 1.0};
Point(111) = {-0.045287, -0.737478, 0, 1.0};
Point(112) = {-0.050258, -0.737106, 0, 1.0};
Point(113) = {-0.054924, -0.736712, 0, 1.0};
Point(114) = {-0.059218, -0.736305, 0, 1.0};
Point(115) = {-0.063083, -0.735893, 0, 1.0};
Point(116) = {-0.066459, -0.735488, 0, 1.0};
Point(117) = {-0.069298, -0.735100, 0, 1.0};
Point(118) = {-0.071552, -0.734745, 0, 1.0};
Point(119) = {-0.073176, -0.734453, 0, 1.0};
Point(120) = {-0.074154, -0.734258, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html