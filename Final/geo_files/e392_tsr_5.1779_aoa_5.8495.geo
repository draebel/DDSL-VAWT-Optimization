SetFactory("OpenCASCADE");

Point(1) = {0.111719, 0.726285, 0, 1.0};
Point(2) = {0.111244, 0.726418, 0, 1.0};
Point(3) = {0.109855, 0.726827, 0, 1.0};
Point(4) = {0.107635, 0.727513, 0, 1.0};
Point(5) = {0.104655, 0.728440, 0, 1.0};
Point(6) = {0.100958, 0.729559, 0, 1.0};
Point(7) = {0.096578, 0.730846, 0, 1.0};
Point(8) = {0.091571, 0.732292, 0, 1.0};
Point(9) = {0.086007, 0.733878, 0, 1.0};
Point(10) = {0.079967, 0.735578, 0, 1.0};
Point(11) = {0.073532, 0.737361, 0, 1.0};
Point(12) = {0.066788, 0.739189, 0, 1.0};
Point(13) = {0.059822, 0.741021, 0, 1.0};
Point(14) = {0.052723, 0.742815, 0, 1.0};
Point(15) = {0.045582, 0.744508, 0, 1.0};
Point(16) = {0.038460, 0.746032, 0, 1.0};
Point(17) = {0.031398, 0.747339, 0, 1.0};
Point(18) = {0.024438, 0.748399, 0, 1.0};
Point(19) = {0.017619, 0.749194, 0, 1.0};
Point(20) = {0.010979, 0.749715, 0, 1.0};
Point(21) = {0.004549, 0.749974, 0, 1.0};
Point(22) = {-0.001621, 0.750000, 0, 1.0};
Point(23) = {-0.007465, 0.749818, 0, 1.0};
Point(24) = {-0.012922, 0.749442, 0, 1.0};
Point(25) = {-0.017939, 0.748888, 0, 1.0};
Point(26) = {-0.022461, 0.748175, 0, 1.0};
Point(27) = {-0.026449, 0.747323, 0, 1.0};
Point(28) = {-0.029866, 0.746354, 0, 1.0};
Point(29) = {-0.032682, 0.745299, 0, 1.0};
Point(30) = {-0.034874, 0.744188, 0, 1.0};
Point(31) = {-0.036431, 0.743073, 0, 1.0};
Point(32) = {-0.037332, 0.742030, 0, 1.0};
Point(33) = {-0.037442, 0.741183, 0, 1.0};
Point(34) = {-0.036665, 0.740437, 0, 1.0};
Point(35) = {-0.035046, 0.739677, 0, 1.0};
Point(36) = {-0.032622, 0.738951, 0, 1.0};
Point(37) = {-0.029413, 0.738269, 0, 1.0};
Point(38) = {-0.025437, 0.737633, 0, 1.0};
Point(39) = {-0.020733, 0.737035, 0, 1.0};
Point(40) = {-0.015346, 0.736469, 0, 1.0};
Point(41) = {-0.009338, 0.735929, 0, 1.0};
Point(42) = {-0.002774, 0.735409, 0, 1.0};
Point(43) = {0.004271, 0.734906, 0, 1.0};
Point(44) = {0.011711, 0.734423, 0, 1.0};
Point(45) = {0.019467, 0.733964, 0, 1.0};
Point(46) = {0.027467, 0.733529, 0, 1.0};
Point(47) = {0.035624, 0.733107, 0, 1.0};
Point(48) = {0.043856, 0.732679, 0, 1.0};
Point(49) = {0.052058, 0.732228, 0, 1.0};
Point(50) = {0.060118, 0.731742, 0, 1.0};
Point(51) = {0.067931, 0.731217, 0, 1.0};
Point(52) = {0.075388, 0.730658, 0, 1.0};
Point(53) = {0.082385, 0.730068, 0, 1.0};
Point(54) = {0.088828, 0.729458, 0, 1.0};
Point(55) = {0.094624, 0.728840, 0, 1.0};
Point(56) = {0.099688, 0.728232, 0, 1.0};
Point(57) = {0.103947, 0.727650, 0, 1.0};
Point(58) = {0.107327, 0.727118, 0, 1.0};
Point(59) = {0.109765, 0.726680, 0, 1.0};
Point(60) = {0.111230, 0.726388, 0, 1.0};
Point(61) = {-0.111719, -0.726285, 0, 1.0};
Point(62) = {-0.111244, -0.726418, 0, 1.0};
Point(63) = {-0.109855, -0.726827, 0, 1.0};
Point(64) = {-0.107635, -0.727513, 0, 1.0};
Point(65) = {-0.104655, -0.728440, 0, 1.0};
Point(66) = {-0.100958, -0.729559, 0, 1.0};
Point(67) = {-0.096578, -0.730846, 0, 1.0};
Point(68) = {-0.091571, -0.732292, 0, 1.0};
Point(69) = {-0.086007, -0.733878, 0, 1.0};
Point(70) = {-0.079967, -0.735578, 0, 1.0};
Point(71) = {-0.073532, -0.737361, 0, 1.0};
Point(72) = {-0.066788, -0.739189, 0, 1.0};
Point(73) = {-0.059822, -0.741021, 0, 1.0};
Point(74) = {-0.052723, -0.742815, 0, 1.0};
Point(75) = {-0.045582, -0.744508, 0, 1.0};
Point(76) = {-0.038460, -0.746032, 0, 1.0};
Point(77) = {-0.031398, -0.747339, 0, 1.0};
Point(78) = {-0.024438, -0.748399, 0, 1.0};
Point(79) = {-0.017619, -0.749194, 0, 1.0};
Point(80) = {-0.010979, -0.749715, 0, 1.0};
Point(81) = {-0.004549, -0.749974, 0, 1.0};
Point(82) = {0.001621, -0.750000, 0, 1.0};
Point(83) = {0.007465, -0.749818, 0, 1.0};
Point(84) = {0.012922, -0.749442, 0, 1.0};
Point(85) = {0.017939, -0.748888, 0, 1.0};
Point(86) = {0.022461, -0.748175, 0, 1.0};
Point(87) = {0.026449, -0.747323, 0, 1.0};
Point(88) = {0.029866, -0.746354, 0, 1.0};
Point(89) = {0.032682, -0.745299, 0, 1.0};
Point(90) = {0.034874, -0.744188, 0, 1.0};
Point(91) = {0.036431, -0.743073, 0, 1.0};
Point(92) = {0.037332, -0.742030, 0, 1.0};
Point(93) = {0.037442, -0.741183, 0, 1.0};
Point(94) = {0.036665, -0.740437, 0, 1.0};
Point(95) = {0.035046, -0.739677, 0, 1.0};
Point(96) = {0.032622, -0.738951, 0, 1.0};
Point(97) = {0.029413, -0.738269, 0, 1.0};
Point(98) = {0.025437, -0.737633, 0, 1.0};
Point(99) = {0.020733, -0.737035, 0, 1.0};
Point(100) = {0.015346, -0.736469, 0, 1.0};
Point(101) = {0.009338, -0.735929, 0, 1.0};
Point(102) = {0.002774, -0.735409, 0, 1.0};
Point(103) = {-0.004271, -0.734906, 0, 1.0};
Point(104) = {-0.011711, -0.734423, 0, 1.0};
Point(105) = {-0.019467, -0.733964, 0, 1.0};
Point(106) = {-0.027467, -0.733529, 0, 1.0};
Point(107) = {-0.035624, -0.733107, 0, 1.0};
Point(108) = {-0.043856, -0.732679, 0, 1.0};
Point(109) = {-0.052058, -0.732228, 0, 1.0};
Point(110) = {-0.060118, -0.731742, 0, 1.0};
Point(111) = {-0.067931, -0.731217, 0, 1.0};
Point(112) = {-0.075388, -0.730658, 0, 1.0};
Point(113) = {-0.082385, -0.730068, 0, 1.0};
Point(114) = {-0.088828, -0.729458, 0, 1.0};
Point(115) = {-0.094624, -0.728840, 0, 1.0};
Point(116) = {-0.099688, -0.728232, 0, 1.0};
Point(117) = {-0.103947, -0.727650, 0, 1.0};
Point(118) = {-0.107327, -0.727118, 0, 1.0};
Point(119) = {-0.109765, -0.726680, 0, 1.0};
Point(120) = {-0.111230, -0.726388, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html