SetFactory("OpenCASCADE");

Point(1) = {0.111180, 0.745651, 0, 1.0};
Point(2) = {0.110917, 0.745742, 0, 1.0};
Point(3) = {0.110190, 0.746030, 0, 1.0};
Point(4) = {0.109105, 0.746453, 0, 1.0};
Point(5) = {0.107690, 0.746901, 0, 1.0};
Point(6) = {0.105884, 0.747305, 0, 1.0};
Point(7) = {0.103652, 0.747688, 0, 1.0};
Point(8) = {0.102878, 0.747803, 0, 1.0};
Point(9) = {0.091719, 0.749133, 0, 1.0};
Point(10) = {0.086119, 0.749630, 0, 1.0};
Point(11) = {0.083859, 0.749792, 0, 1.0};
Point(12) = {0.081599, 0.749913, 0, 1.0};
Point(13) = {0.079337, 0.749984, 0, 1.0};
Point(14) = {0.077073, 0.750000, 0, 1.0};
Point(15) = {0.069162, 0.749922, 0, 1.0};
Point(16) = {0.057930, 0.749804, 0, 1.0};
Point(17) = {0.056581, 0.749795, 0, 1.0};
Point(18) = {0.050958, 0.749732, 0, 1.0};
Point(19) = {0.045258, 0.749630, 0, 1.0};
Point(20) = {0.039514, 0.749493, 0, 1.0};
Point(21) = {0.033770, 0.749323, 0, 1.0};
Point(22) = {0.028072, 0.749122, 0, 1.0};
Point(23) = {0.022469, 0.748889, 0, 1.0};
Point(24) = {0.017011, 0.748607, 0, 1.0};
Point(25) = {0.011741, 0.748261, 0, 1.0};
Point(26) = {0.006689, 0.747830, 0, 1.0};
Point(27) = {0.001879, 0.747293, 0, 1.0};
Point(28) = {-0.002662, 0.746650, 0, 1.0};
Point(29) = {-0.006908, 0.745853, 0, 1.0};
Point(30) = {-0.010876, 0.744886, 0, 1.0};
Point(31) = {-0.014590, 0.743767, 0, 1.0};
Point(32) = {-0.018054, 0.742509, 0, 1.0};
Point(33) = {-0.021269, 0.741145, 0, 1.0};
Point(34) = {-0.024220, 0.739705, 0, 1.0};
Point(35) = {-0.026893, 0.738214, 0, 1.0};
Point(36) = {-0.029279, 0.736683, 0, 1.0};
Point(37) = {-0.031366, 0.735139, 0, 1.0};
Point(38) = {-0.033151, 0.733602, 0, 1.0};
Point(39) = {-0.034622, 0.732096, 0, 1.0};
Point(40) = {-0.035773, 0.730649, 0, 1.0};
Point(41) = {-0.036582, 0.729272, 0, 1.0};
Point(42) = {-0.037067, 0.727971, 0, 1.0};
Point(43) = {-0.037258, 0.726784, 0, 1.0};
Point(44) = {-0.037166, 0.725782, 0, 1.0};
Point(45) = {-0.036721, 0.725106, 0, 1.0};
Point(46) = {-0.035779, 0.724714, 0, 1.0};
Point(47) = {-0.034308, 0.724451, 0, 1.0};
Point(48) = {-0.032385, 0.724309, 0, 1.0};
Point(49) = {-0.030038, 0.724289, 0, 1.0};
Point(50) = {-0.027295, 0.724388, 0, 1.0};
Point(51) = {-0.024179, 0.724612, 0, 1.0};
Point(52) = {-0.020722, 0.724965, 0, 1.0};
Point(53) = {-0.016950, 0.725451, 0, 1.0};
Point(54) = {-0.012897, 0.726081, 0, 1.0};
Point(55) = {-0.008605, 0.726880, 0, 1.0};
Point(56) = {-0.004062, 0.727926, 0, 1.0};
Point(57) = {0.000802, 0.729215, 0, 1.0};
Point(58) = {0.006002, 0.730669, 0, 1.0};
Point(59) = {0.011515, 0.732238, 0, 1.0};
Point(60) = {0.017307, 0.733883, 0, 1.0};
Point(61) = {0.023341, 0.735563, 0, 1.0};
Point(62) = {0.029575, 0.737246, 0, 1.0};
Point(63) = {0.035964, 0.738891, 0, 1.0};
Point(64) = {0.042452, 0.740468, 0, 1.0};
Point(65) = {0.048986, 0.741945, 0, 1.0};
Point(66) = {0.055510, 0.743300, 0, 1.0};
Point(67) = {0.058798, 0.743931, 0, 1.0};
Point(68) = {0.069869, 0.745941, 0, 1.0};
Point(69) = {0.076528, 0.747018, 0, 1.0};
Point(70) = {0.078758, 0.747321, 0, 1.0};
Point(71) = {0.080995, 0.747561, 0, 1.0};
Point(72) = {0.083239, 0.747737, 0, 1.0};
Point(73) = {0.085488, 0.747846, 0, 1.0};
Point(74) = {0.092159, 0.747928, 0, 1.0};
Point(75) = {0.103418, 0.747286, 0, 1.0};
Point(76) = {0.106277, 0.746886, 0, 1.0};
Point(77) = {0.108534, 0.746406, 0, 1.0};
Point(78) = {0.110052, 0.745989, 0, 1.0};
Point(79) = {0.110906, 0.745733, 0, 1.0};
Point(80) = {0.111177, 0.745650, 0, 1.0};
Point(81) = {-0.111180, -0.745651, 0, 1.0};
Point(82) = {-0.110917, -0.745742, 0, 1.0};
Point(83) = {-0.110190, -0.746030, 0, 1.0};
Point(84) = {-0.109105, -0.746453, 0, 1.0};
Point(85) = {-0.107690, -0.746901, 0, 1.0};
Point(86) = {-0.105884, -0.747305, 0, 1.0};
Point(87) = {-0.103652, -0.747688, 0, 1.0};
Point(88) = {-0.102878, -0.747803, 0, 1.0};
Point(89) = {-0.091719, -0.749133, 0, 1.0};
Point(90) = {-0.086119, -0.749630, 0, 1.0};
Point(91) = {-0.083859, -0.749792, 0, 1.0};
Point(92) = {-0.081599, -0.749913, 0, 1.0};
Point(93) = {-0.079337, -0.749984, 0, 1.0};
Point(94) = {-0.077073, -0.750000, 0, 1.0};
Point(95) = {-0.069162, -0.749922, 0, 1.0};
Point(96) = {-0.057930, -0.749804, 0, 1.0};
Point(97) = {-0.056581, -0.749795, 0, 1.0};
Point(98) = {-0.050958, -0.749732, 0, 1.0};
Point(99) = {-0.045258, -0.749630, 0, 1.0};
Point(100) = {-0.039514, -0.749493, 0, 1.0};
Point(101) = {-0.033770, -0.749323, 0, 1.0};
Point(102) = {-0.028072, -0.749122, 0, 1.0};
Point(103) = {-0.022469, -0.748889, 0, 1.0};
Point(104) = {-0.017011, -0.748607, 0, 1.0};
Point(105) = {-0.011741, -0.748261, 0, 1.0};
Point(106) = {-0.006689, -0.747830, 0, 1.0};
Point(107) = {-0.001879, -0.747293, 0, 1.0};
Point(108) = {0.002662, -0.746650, 0, 1.0};
Point(109) = {0.006908, -0.745853, 0, 1.0};
Point(110) = {0.010876, -0.744886, 0, 1.0};
Point(111) = {0.014590, -0.743767, 0, 1.0};
Point(112) = {0.018054, -0.742509, 0, 1.0};
Point(113) = {0.021269, -0.741145, 0, 1.0};
Point(114) = {0.024220, -0.739705, 0, 1.0};
Point(115) = {0.026893, -0.738214, 0, 1.0};
Point(116) = {0.029279, -0.736683, 0, 1.0};
Point(117) = {0.031366, -0.735139, 0, 1.0};
Point(118) = {0.033151, -0.733602, 0, 1.0};
Point(119) = {0.034622, -0.732096, 0, 1.0};
Point(120) = {0.035773, -0.730649, 0, 1.0};
Point(121) = {0.036582, -0.729272, 0, 1.0};
Point(122) = {0.037067, -0.727971, 0, 1.0};
Point(123) = {0.037258, -0.726784, 0, 1.0};
Point(124) = {0.037166, -0.725782, 0, 1.0};
Point(125) = {0.036721, -0.725106, 0, 1.0};
Point(126) = {0.035779, -0.724714, 0, 1.0};
Point(127) = {0.034308, -0.724451, 0, 1.0};
Point(128) = {0.032385, -0.724309, 0, 1.0};
Point(129) = {0.030038, -0.724289, 0, 1.0};
Point(130) = {0.027295, -0.724388, 0, 1.0};
Point(131) = {0.024179, -0.724612, 0, 1.0};
Point(132) = {0.020722, -0.724965, 0, 1.0};
Point(133) = {0.016950, -0.725451, 0, 1.0};
Point(134) = {0.012897, -0.726081, 0, 1.0};
Point(135) = {0.008605, -0.726880, 0, 1.0};
Point(136) = {0.004062, -0.727926, 0, 1.0};
Point(137) = {-0.000802, -0.729215, 0, 1.0};
Point(138) = {-0.006002, -0.730669, 0, 1.0};
Point(139) = {-0.011515, -0.732238, 0, 1.0};
Point(140) = {-0.017307, -0.733883, 0, 1.0};
Point(141) = {-0.023341, -0.735563, 0, 1.0};
Point(142) = {-0.029575, -0.737246, 0, 1.0};
Point(143) = {-0.035964, -0.738891, 0, 1.0};
Point(144) = {-0.042452, -0.740468, 0, 1.0};
Point(145) = {-0.048986, -0.741945, 0, 1.0};
Point(146) = {-0.055510, -0.743300, 0, 1.0};
Point(147) = {-0.058798, -0.743931, 0, 1.0};
Point(148) = {-0.069869, -0.745941, 0, 1.0};
Point(149) = {-0.076528, -0.747018, 0, 1.0};
Point(150) = {-0.078758, -0.747321, 0, 1.0};
Point(151) = {-0.080995, -0.747561, 0, 1.0};
Point(152) = {-0.083239, -0.747737, 0, 1.0};
Point(153) = {-0.085488, -0.747846, 0, 1.0};
Point(154) = {-0.092159, -0.747928, 0, 1.0};
Point(155) = {-0.103418, -0.747286, 0, 1.0};
Point(156) = {-0.106277, -0.746886, 0, 1.0};
Point(157) = {-0.108534, -0.746406, 0, 1.0};
Point(158) = {-0.110052, -0.745989, 0, 1.0};
Point(159) = {-0.110906, -0.745733, 0, 1.0};
Point(160) = {-0.111177, -0.745650, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html