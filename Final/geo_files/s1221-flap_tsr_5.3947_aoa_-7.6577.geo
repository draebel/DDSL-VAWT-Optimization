SetFactory("OpenCASCADE");

Point(1) = {0.111507, 0.745641, 0, 1.0};
Point(2) = {0.111243, 0.745733, 0, 1.0};
Point(3) = {0.110515, 0.746021, 0, 1.0};
Point(4) = {0.109428, 0.746445, 0, 1.0};
Point(5) = {0.108010, 0.746894, 0, 1.0};
Point(6) = {0.106199, 0.747299, 0, 1.0};
Point(7) = {0.103963, 0.747683, 0, 1.0};
Point(8) = {0.103187, 0.747798, 0, 1.0};
Point(9) = {0.092003, 0.749131, 0, 1.0};
Point(10) = {0.086390, 0.749629, 0, 1.0};
Point(11) = {0.084126, 0.749792, 0, 1.0};
Point(12) = {0.081861, 0.749913, 0, 1.0};
Point(13) = {0.079594, 0.749984, 0, 1.0};
Point(14) = {0.077325, 0.750000, 0, 1.0};
Point(15) = {0.069396, 0.749922, 0, 1.0};
Point(16) = {0.058139, 0.749804, 0, 1.0};
Point(17) = {0.056787, 0.749795, 0, 1.0};
Point(18) = {0.051152, 0.749731, 0, 1.0};
Point(19) = {0.045440, 0.749630, 0, 1.0};
Point(20) = {0.039683, 0.749492, 0, 1.0};
Point(21) = {0.033927, 0.749321, 0, 1.0};
Point(22) = {0.028216, 0.749120, 0, 1.0};
Point(23) = {0.022600, 0.748886, 0, 1.0};
Point(24) = {0.017131, 0.748604, 0, 1.0};
Point(25) = {0.011848, 0.748257, 0, 1.0};
Point(26) = {0.006785, 0.747825, 0, 1.0};
Point(27) = {0.001965, 0.747287, 0, 1.0};
Point(28) = {-0.002586, 0.746642, 0, 1.0};
Point(29) = {-0.006841, 0.745844, 0, 1.0};
Point(30) = {-0.010818, 0.744875, 0, 1.0};
Point(31) = {-0.014540, 0.743753, 0, 1.0};
Point(32) = {-0.018012, 0.742492, 0, 1.0};
Point(33) = {-0.021234, 0.741126, 0, 1.0};
Point(34) = {-0.024192, 0.739683, 0, 1.0};
Point(35) = {-0.026871, 0.738188, 0, 1.0};
Point(36) = {-0.029262, 0.736654, 0, 1.0};
Point(37) = {-0.031354, 0.735106, 0, 1.0};
Point(38) = {-0.033142, 0.733566, 0, 1.0};
Point(39) = {-0.034616, 0.732057, 0, 1.0};
Point(40) = {-0.035770, 0.730606, 0, 1.0};
Point(41) = {-0.036581, 0.729226, 0, 1.0};
Point(42) = {-0.037067, 0.727923, 0, 1.0};
Point(43) = {-0.037258, 0.726733, 0, 1.0};
Point(44) = {-0.037166, 0.725729, 0, 1.0};
Point(45) = {-0.036720, 0.725051, 0, 1.0};
Point(46) = {-0.035776, 0.724658, 0, 1.0};
Point(47) = {-0.034301, 0.724394, 0, 1.0};
Point(48) = {-0.032375, 0.724252, 0, 1.0};
Point(49) = {-0.030022, 0.724232, 0, 1.0};
Point(50) = {-0.027273, 0.724332, 0, 1.0};
Point(51) = {-0.024150, 0.724556, 0, 1.0};
Point(52) = {-0.020686, 0.724910, 0, 1.0};
Point(53) = {-0.016906, 0.725397, 0, 1.0};
Point(54) = {-0.012843, 0.726028, 0, 1.0};
Point(55) = {-0.008542, 0.726829, 0, 1.0};
Point(56) = {-0.003989, 0.727878, 0, 1.0};
Point(57) = {0.000886, 0.729169, 0, 1.0};
Point(58) = {0.006098, 0.730626, 0, 1.0};
Point(59) = {0.011622, 0.732199, 0, 1.0};
Point(60) = {0.017427, 0.733848, 0, 1.0};
Point(61) = {0.023475, 0.735531, 0, 1.0};
Point(62) = {0.029722, 0.737218, 0, 1.0};
Point(63) = {0.036125, 0.738867, 0, 1.0};
Point(64) = {0.042627, 0.740447, 0, 1.0};
Point(65) = {0.049175, 0.741927, 0, 1.0};
Point(66) = {0.055714, 0.743285, 0, 1.0};
Point(67) = {0.059009, 0.743918, 0, 1.0};
Point(68) = {0.070105, 0.745932, 0, 1.0};
Point(69) = {0.076778, 0.747011, 0, 1.0};
Point(70) = {0.079013, 0.747315, 0, 1.0};
Point(71) = {0.081255, 0.747556, 0, 1.0};
Point(72) = {0.083504, 0.747732, 0, 1.0};
Point(73) = {0.085758, 0.747841, 0, 1.0};
Point(74) = {0.092444, 0.747924, 0, 1.0};
Point(75) = {0.103727, 0.747280, 0, 1.0};
Point(76) = {0.106593, 0.746879, 0, 1.0};
Point(77) = {0.108855, 0.746398, 0, 1.0};
Point(78) = {0.110376, 0.745980, 0, 1.0};
Point(79) = {0.111232, 0.745724, 0, 1.0};
Point(80) = {0.111504, 0.745641, 0, 1.0};
Point(81) = {-0.111507, -0.745641, 0, 1.0};
Point(82) = {-0.111243, -0.745733, 0, 1.0};
Point(83) = {-0.110515, -0.746021, 0, 1.0};
Point(84) = {-0.109428, -0.746445, 0, 1.0};
Point(85) = {-0.108010, -0.746894, 0, 1.0};
Point(86) = {-0.106199, -0.747299, 0, 1.0};
Point(87) = {-0.103963, -0.747683, 0, 1.0};
Point(88) = {-0.103187, -0.747798, 0, 1.0};
Point(89) = {-0.092003, -0.749131, 0, 1.0};
Point(90) = {-0.086390, -0.749629, 0, 1.0};
Point(91) = {-0.084126, -0.749792, 0, 1.0};
Point(92) = {-0.081861, -0.749913, 0, 1.0};
Point(93) = {-0.079594, -0.749984, 0, 1.0};
Point(94) = {-0.077325, -0.750000, 0, 1.0};
Point(95) = {-0.069396, -0.749922, 0, 1.0};
Point(96) = {-0.058139, -0.749804, 0, 1.0};
Point(97) = {-0.056787, -0.749795, 0, 1.0};
Point(98) = {-0.051152, -0.749731, 0, 1.0};
Point(99) = {-0.045440, -0.749630, 0, 1.0};
Point(100) = {-0.039683, -0.749492, 0, 1.0};
Point(101) = {-0.033927, -0.749321, 0, 1.0};
Point(102) = {-0.028216, -0.749120, 0, 1.0};
Point(103) = {-0.022600, -0.748886, 0, 1.0};
Point(104) = {-0.017131, -0.748604, 0, 1.0};
Point(105) = {-0.011848, -0.748257, 0, 1.0};
Point(106) = {-0.006785, -0.747825, 0, 1.0};
Point(107) = {-0.001965, -0.747287, 0, 1.0};
Point(108) = {0.002586, -0.746642, 0, 1.0};
Point(109) = {0.006841, -0.745844, 0, 1.0};
Point(110) = {0.010818, -0.744875, 0, 1.0};
Point(111) = {0.014540, -0.743753, 0, 1.0};
Point(112) = {0.018012, -0.742492, 0, 1.0};
Point(113) = {0.021234, -0.741126, 0, 1.0};
Point(114) = {0.024192, -0.739683, 0, 1.0};
Point(115) = {0.026871, -0.738188, 0, 1.0};
Point(116) = {0.029262, -0.736654, 0, 1.0};
Point(117) = {0.031354, -0.735106, 0, 1.0};
Point(118) = {0.033142, -0.733566, 0, 1.0};
Point(119) = {0.034616, -0.732057, 0, 1.0};
Point(120) = {0.035770, -0.730606, 0, 1.0};
Point(121) = {0.036581, -0.729226, 0, 1.0};
Point(122) = {0.037067, -0.727923, 0, 1.0};
Point(123) = {0.037258, -0.726733, 0, 1.0};
Point(124) = {0.037166, -0.725729, 0, 1.0};
Point(125) = {0.036720, -0.725051, 0, 1.0};
Point(126) = {0.035776, -0.724658, 0, 1.0};
Point(127) = {0.034301, -0.724394, 0, 1.0};
Point(128) = {0.032375, -0.724252, 0, 1.0};
Point(129) = {0.030022, -0.724232, 0, 1.0};
Point(130) = {0.027273, -0.724332, 0, 1.0};
Point(131) = {0.024150, -0.724556, 0, 1.0};
Point(132) = {0.020686, -0.724910, 0, 1.0};
Point(133) = {0.016906, -0.725397, 0, 1.0};
Point(134) = {0.012843, -0.726028, 0, 1.0};
Point(135) = {0.008542, -0.726829, 0, 1.0};
Point(136) = {0.003989, -0.727878, 0, 1.0};
Point(137) = {-0.000886, -0.729169, 0, 1.0};
Point(138) = {-0.006098, -0.730626, 0, 1.0};
Point(139) = {-0.011622, -0.732199, 0, 1.0};
Point(140) = {-0.017427, -0.733848, 0, 1.0};
Point(141) = {-0.023475, -0.735531, 0, 1.0};
Point(142) = {-0.029722, -0.737218, 0, 1.0};
Point(143) = {-0.036125, -0.738867, 0, 1.0};
Point(144) = {-0.042627, -0.740447, 0, 1.0};
Point(145) = {-0.049175, -0.741927, 0, 1.0};
Point(146) = {-0.055714, -0.743285, 0, 1.0};
Point(147) = {-0.059009, -0.743918, 0, 1.0};
Point(148) = {-0.070105, -0.745932, 0, 1.0};
Point(149) = {-0.076778, -0.747011, 0, 1.0};
Point(150) = {-0.079013, -0.747315, 0, 1.0};
Point(151) = {-0.081255, -0.747556, 0, 1.0};
Point(152) = {-0.083504, -0.747732, 0, 1.0};
Point(153) = {-0.085758, -0.747841, 0, 1.0};
Point(154) = {-0.092444, -0.747924, 0, 1.0};
Point(155) = {-0.103727, -0.747280, 0, 1.0};
Point(156) = {-0.106593, -0.746879, 0, 1.0};
Point(157) = {-0.108855, -0.746398, 0, 1.0};
Point(158) = {-0.110376, -0.745980, 0, 1.0};
Point(159) = {-0.111232, -0.745724, 0, 1.0};
Point(160) = {-0.111504, -0.745641, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html