SetFactory("OpenCASCADE");

Point(1) = {0.074081, 0.747097, 0, 1.0};
Point(2) = {0.073905, 0.747158, 0, 1.0};
Point(3) = {0.073420, 0.747351, 0, 1.0};
Point(4) = {0.072696, 0.747633, 0, 1.0};
Point(5) = {0.071752, 0.747931, 0, 1.0};
Point(6) = {0.070546, 0.748201, 0, 1.0};
Point(7) = {0.069057, 0.748457, 0, 1.0};
Point(8) = {0.068540, 0.748534, 0, 1.0};
Point(9) = {0.061092, 0.749421, 0, 1.0};
Point(10) = {0.057355, 0.749753, 0, 1.0};
Point(11) = {0.055847, 0.749861, 0, 1.0};
Point(12) = {0.054339, 0.749942, 0, 1.0};
Point(13) = {0.052829, 0.749989, 0, 1.0};
Point(14) = {0.051318, 0.750000, 0, 1.0};
Point(15) = {0.046038, 0.749948, 0, 1.0};
Point(16) = {0.038542, 0.749869, 0, 1.0};
Point(17) = {0.037641, 0.749863, 0, 1.0};
Point(18) = {0.033889, 0.749821, 0, 1.0};
Point(19) = {0.030085, 0.749753, 0, 1.0};
Point(20) = {0.026251, 0.749662, 0, 1.0};
Point(21) = {0.022418, 0.749548, 0, 1.0};
Point(22) = {0.018615, 0.749414, 0, 1.0};
Point(23) = {0.014875, 0.749258, 0, 1.0};
Point(24) = {0.011233, 0.749070, 0, 1.0};
Point(25) = {0.007715, 0.748839, 0, 1.0};
Point(26) = {0.004343, 0.748552, 0, 1.0};
Point(27) = {0.001133, 0.748194, 0, 1.0};
Point(28) = {-0.001898, 0.747764, 0, 1.0};
Point(29) = {-0.004731, 0.747233, 0, 1.0};
Point(30) = {-0.007380, 0.746587, 0, 1.0};
Point(31) = {-0.009858, 0.745840, 0, 1.0};
Point(32) = {-0.012170, 0.745000, 0, 1.0};
Point(33) = {-0.014316, 0.744090, 0, 1.0};
Point(34) = {-0.016285, 0.743129, 0, 1.0};
Point(35) = {-0.018069, 0.742134, 0, 1.0};
Point(36) = {-0.019662, 0.741112, 0, 1.0};
Point(37) = {-0.021055, 0.740082, 0, 1.0};
Point(38) = {-0.022246, 0.739056, 0, 1.0};
Point(39) = {-0.023227, 0.738051, 0, 1.0};
Point(40) = {-0.023996, 0.737085, 0, 1.0};
Point(41) = {-0.024536, 0.736166, 0, 1.0};
Point(42) = {-0.024859, 0.735298, 0, 1.0};
Point(43) = {-0.024987, 0.734506, 0, 1.0};
Point(44) = {-0.024925, 0.733837, 0, 1.0};
Point(45) = {-0.024628, 0.733386, 0, 1.0};
Point(46) = {-0.024000, 0.733124, 0, 1.0};
Point(47) = {-0.023018, 0.732948, 0, 1.0};
Point(48) = {-0.021735, 0.732854, 0, 1.0};
Point(49) = {-0.020168, 0.732840, 0, 1.0};
Point(50) = {-0.018337, 0.732907, 0, 1.0};
Point(51) = {-0.016258, 0.733056, 0, 1.0};
Point(52) = {-0.013951, 0.733292, 0, 1.0};
Point(53) = {-0.011433, 0.733616, 0, 1.0};
Point(54) = {-0.008728, 0.734036, 0, 1.0};
Point(55) = {-0.005864, 0.734570, 0, 1.0};
Point(56) = {-0.002832, 0.735268, 0, 1.0};
Point(57) = {0.000415, 0.736128, 0, 1.0};
Point(58) = {0.003885, 0.737098, 0, 1.0};
Point(59) = {0.007564, 0.738146, 0, 1.0};
Point(60) = {0.011430, 0.739244, 0, 1.0};
Point(61) = {0.015457, 0.740364, 0, 1.0};
Point(62) = {0.019618, 0.741488, 0, 1.0};
Point(63) = {0.023881, 0.742586, 0, 1.0};
Point(64) = {0.028212, 0.743638, 0, 1.0};
Point(65) = {0.032572, 0.744624, 0, 1.0};
Point(66) = {0.036927, 0.745528, 0, 1.0};
Point(67) = {0.039121, 0.745950, 0, 1.0};
Point(68) = {0.046510, 0.747291, 0, 1.0};
Point(69) = {0.050954, 0.748010, 0, 1.0};
Point(70) = {0.052442, 0.748212, 0, 1.0};
Point(71) = {0.053935, 0.748372, 0, 1.0};
Point(72) = {0.055433, 0.748490, 0, 1.0};
Point(73) = {0.056934, 0.748562, 0, 1.0};
Point(74) = {0.061386, 0.748617, 0, 1.0};
Point(75) = {0.068900, 0.748189, 0, 1.0};
Point(76) = {0.070809, 0.747922, 0, 1.0};
Point(77) = {0.072315, 0.747602, 0, 1.0};
Point(78) = {0.073328, 0.747323, 0, 1.0};
Point(79) = {0.073898, 0.747152, 0, 1.0};
Point(80) = {0.074079, 0.747097, 0, 1.0};
Point(81) = {-0.074081, -0.747097, 0, 1.0};
Point(82) = {-0.073905, -0.747158, 0, 1.0};
Point(83) = {-0.073420, -0.747351, 0, 1.0};
Point(84) = {-0.072696, -0.747633, 0, 1.0};
Point(85) = {-0.071752, -0.747931, 0, 1.0};
Point(86) = {-0.070546, -0.748201, 0, 1.0};
Point(87) = {-0.069057, -0.748457, 0, 1.0};
Point(88) = {-0.068540, -0.748534, 0, 1.0};
Point(89) = {-0.061092, -0.749421, 0, 1.0};
Point(90) = {-0.057355, -0.749753, 0, 1.0};
Point(91) = {-0.055847, -0.749861, 0, 1.0};
Point(92) = {-0.054339, -0.749942, 0, 1.0};
Point(93) = {-0.052829, -0.749989, 0, 1.0};
Point(94) = {-0.051318, -0.750000, 0, 1.0};
Point(95) = {-0.046038, -0.749948, 0, 1.0};
Point(96) = {-0.038542, -0.749869, 0, 1.0};
Point(97) = {-0.037641, -0.749863, 0, 1.0};
Point(98) = {-0.033889, -0.749821, 0, 1.0};
Point(99) = {-0.030085, -0.749753, 0, 1.0};
Point(100) = {-0.026251, -0.749662, 0, 1.0};
Point(101) = {-0.022418, -0.749548, 0, 1.0};
Point(102) = {-0.018615, -0.749414, 0, 1.0};
Point(103) = {-0.014875, -0.749258, 0, 1.0};
Point(104) = {-0.011233, -0.749070, 0, 1.0};
Point(105) = {-0.007715, -0.748839, 0, 1.0};
Point(106) = {-0.004343, -0.748552, 0, 1.0};
Point(107) = {-0.001133, -0.748194, 0, 1.0};
Point(108) = {0.001898, -0.747764, 0, 1.0};
Point(109) = {0.004731, -0.747233, 0, 1.0};
Point(110) = {0.007380, -0.746587, 0, 1.0};
Point(111) = {0.009858, -0.745840, 0, 1.0};
Point(112) = {0.012170, -0.745000, 0, 1.0};
Point(113) = {0.014316, -0.744090, 0, 1.0};
Point(114) = {0.016285, -0.743129, 0, 1.0};
Point(115) = {0.018069, -0.742134, 0, 1.0};
Point(116) = {0.019662, -0.741112, 0, 1.0};
Point(117) = {0.021055, -0.740082, 0, 1.0};
Point(118) = {0.022246, -0.739056, 0, 1.0};
Point(119) = {0.023227, -0.738051, 0, 1.0};
Point(120) = {0.023996, -0.737085, 0, 1.0};
Point(121) = {0.024536, -0.736166, 0, 1.0};
Point(122) = {0.024859, -0.735298, 0, 1.0};
Point(123) = {0.024987, -0.734506, 0, 1.0};
Point(124) = {0.024925, -0.733837, 0, 1.0};
Point(125) = {0.024628, -0.733386, 0, 1.0};
Point(126) = {0.024000, -0.733124, 0, 1.0};
Point(127) = {0.023018, -0.732948, 0, 1.0};
Point(128) = {0.021735, -0.732854, 0, 1.0};
Point(129) = {0.020168, -0.732840, 0, 1.0};
Point(130) = {0.018337, -0.732907, 0, 1.0};
Point(131) = {0.016258, -0.733056, 0, 1.0};
Point(132) = {0.013951, -0.733292, 0, 1.0};
Point(133) = {0.011433, -0.733616, 0, 1.0};
Point(134) = {0.008728, -0.734036, 0, 1.0};
Point(135) = {0.005864, -0.734570, 0, 1.0};
Point(136) = {0.002832, -0.735268, 0, 1.0};
Point(137) = {-0.000415, -0.736128, 0, 1.0};
Point(138) = {-0.003885, -0.737098, 0, 1.0};
Point(139) = {-0.007564, -0.738146, 0, 1.0};
Point(140) = {-0.011430, -0.739244, 0, 1.0};
Point(141) = {-0.015457, -0.740364, 0, 1.0};
Point(142) = {-0.019618, -0.741488, 0, 1.0};
Point(143) = {-0.023881, -0.742586, 0, 1.0};
Point(144) = {-0.028212, -0.743638, 0, 1.0};
Point(145) = {-0.032572, -0.744624, 0, 1.0};
Point(146) = {-0.036927, -0.745528, 0, 1.0};
Point(147) = {-0.039121, -0.745950, 0, 1.0};
Point(148) = {-0.046510, -0.747291, 0, 1.0};
Point(149) = {-0.050954, -0.748010, 0, 1.0};
Point(150) = {-0.052442, -0.748212, 0, 1.0};
Point(151) = {-0.053935, -0.748372, 0, 1.0};
Point(152) = {-0.055433, -0.748490, 0, 1.0};
Point(153) = {-0.056934, -0.748562, 0, 1.0};
Point(154) = {-0.061386, -0.748617, 0, 1.0};
Point(155) = {-0.068900, -0.748189, 0, 1.0};
Point(156) = {-0.070809, -0.747922, 0, 1.0};
Point(157) = {-0.072315, -0.747602, 0, 1.0};
Point(158) = {-0.073328, -0.747323, 0, 1.0};
Point(159) = {-0.073898, -0.747152, 0, 1.0};
Point(160) = {-0.074079, -0.747097, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html