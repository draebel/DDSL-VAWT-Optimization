SetFactory("OpenCASCADE");

Point(1) = {0.074341, 0.745641, 0, 1.0};
Point(2) = {0.074077, 0.745733, 0, 1.0};
Point(3) = {0.073349, 0.746021, 0, 1.0};
Point(4) = {0.072262, 0.746445, 0, 1.0};
Point(5) = {0.070844, 0.746894, 0, 1.0};
Point(6) = {0.069034, 0.747299, 0, 1.0};
Point(7) = {0.066797, 0.747683, 0, 1.0};
Point(8) = {0.066021, 0.747798, 0, 1.0};
Point(9) = {0.054837, 0.749131, 0, 1.0};
Point(10) = {0.049225, 0.749629, 0, 1.0};
Point(11) = {0.046960, 0.749792, 0, 1.0};
Point(12) = {0.044696, 0.749913, 0, 1.0};
Point(13) = {0.042428, 0.749984, 0, 1.0};
Point(14) = {0.040160, 0.750000, 0, 1.0};
Point(15) = {0.032231, 0.749922, 0, 1.0};
Point(16) = {0.020974, 0.749804, 0, 1.0};
Point(17) = {0.019622, 0.749795, 0, 1.0};
Point(18) = {0.013986, 0.749731, 0, 1.0};
Point(19) = {0.008274, 0.749630, 0, 1.0};
Point(20) = {0.002517, 0.749492, 0, 1.0};
Point(21) = {-0.003239, 0.749321, 0, 1.0};
Point(22) = {-0.008950, 0.749120, 0, 1.0};
Point(23) = {-0.014565, 0.748886, 0, 1.0};
Point(24) = {-0.020035, 0.748604, 0, 1.0};
Point(25) = {-0.025317, 0.748257, 0, 1.0};
Point(26) = {-0.030380, 0.747825, 0, 1.0};
Point(27) = {-0.035201, 0.747287, 0, 1.0};
Point(28) = {-0.039752, 0.746642, 0, 1.0};
Point(29) = {-0.044007, 0.745844, 0, 1.0};
Point(30) = {-0.047984, 0.744875, 0, 1.0};
Point(31) = {-0.051706, 0.743753, 0, 1.0};
Point(32) = {-0.055177, 0.742492, 0, 1.0};
Point(33) = {-0.058400, 0.741126, 0, 1.0};
Point(34) = {-0.061357, 0.739683, 0, 1.0};
Point(35) = {-0.064036, 0.738188, 0, 1.0};
Point(36) = {-0.066427, 0.736654, 0, 1.0};
Point(37) = {-0.068519, 0.735106, 0, 1.0};
Point(38) = {-0.070307, 0.733566, 0, 1.0};
Point(39) = {-0.071782, 0.732057, 0, 1.0};
Point(40) = {-0.072935, 0.730606, 0, 1.0};
Point(41) = {-0.073747, 0.729226, 0, 1.0};
Point(42) = {-0.074232, 0.727923, 0, 1.0};
Point(43) = {-0.074424, 0.726733, 0, 1.0};
Point(44) = {-0.074331, 0.725729, 0, 1.0};
Point(45) = {-0.073885, 0.725051, 0, 1.0};
Point(46) = {-0.072942, 0.724658, 0, 1.0};
Point(47) = {-0.071467, 0.724394, 0, 1.0};
Point(48) = {-0.069540, 0.724252, 0, 1.0};
Point(49) = {-0.067187, 0.724232, 0, 1.0};
Point(50) = {-0.064439, 0.724332, 0, 1.0};
Point(51) = {-0.061316, 0.724556, 0, 1.0};
Point(52) = {-0.057851, 0.724910, 0, 1.0};
Point(53) = {-0.054071, 0.725397, 0, 1.0};
Point(54) = {-0.050009, 0.726028, 0, 1.0};
Point(55) = {-0.045708, 0.726829, 0, 1.0};
Point(56) = {-0.041155, 0.727878, 0, 1.0};
Point(57) = {-0.036280, 0.729169, 0, 1.0};
Point(58) = {-0.031068, 0.730626, 0, 1.0};
Point(59) = {-0.025543, 0.732199, 0, 1.0};
Point(60) = {-0.019739, 0.733848, 0, 1.0};
Point(61) = {-0.013691, 0.735531, 0, 1.0};
Point(62) = {-0.007443, 0.737218, 0, 1.0};
Point(63) = {-0.001041, 0.738867, 0, 1.0};
Point(64) = {0.005462, 0.740447, 0, 1.0};
Point(65) = {0.012010, 0.741927, 0, 1.0};
Point(66) = {0.018549, 0.743285, 0, 1.0};
Point(67) = {0.021844, 0.743918, 0, 1.0};
Point(68) = {0.032940, 0.745932, 0, 1.0};
Point(69) = {0.039613, 0.747011, 0, 1.0};
Point(70) = {0.041848, 0.747315, 0, 1.0};
Point(71) = {0.044090, 0.747556, 0, 1.0};
Point(72) = {0.046339, 0.747732, 0, 1.0};
Point(73) = {0.048592, 0.747841, 0, 1.0};
Point(74) = {0.055278, 0.747924, 0, 1.0};
Point(75) = {0.066562, 0.747280, 0, 1.0};
Point(76) = {0.069428, 0.746879, 0, 1.0};
Point(77) = {0.071690, 0.746398, 0, 1.0};
Point(78) = {0.073211, 0.745980, 0, 1.0};
Point(79) = {0.074067, 0.745724, 0, 1.0};
Point(80) = {0.074338, 0.745641, 0, 1.0};
Point(81) = {-0.074341, -0.745641, 0, 1.0};
Point(82) = {-0.074077, -0.745733, 0, 1.0};
Point(83) = {-0.073349, -0.746021, 0, 1.0};
Point(84) = {-0.072262, -0.746445, 0, 1.0};
Point(85) = {-0.070844, -0.746894, 0, 1.0};
Point(86) = {-0.069034, -0.747299, 0, 1.0};
Point(87) = {-0.066797, -0.747683, 0, 1.0};
Point(88) = {-0.066021, -0.747798, 0, 1.0};
Point(89) = {-0.054837, -0.749131, 0, 1.0};
Point(90) = {-0.049225, -0.749629, 0, 1.0};
Point(91) = {-0.046960, -0.749792, 0, 1.0};
Point(92) = {-0.044696, -0.749913, 0, 1.0};
Point(93) = {-0.042428, -0.749984, 0, 1.0};
Point(94) = {-0.040160, -0.750000, 0, 1.0};
Point(95) = {-0.032231, -0.749922, 0, 1.0};
Point(96) = {-0.020974, -0.749804, 0, 1.0};
Point(97) = {-0.019622, -0.749795, 0, 1.0};
Point(98) = {-0.013986, -0.749731, 0, 1.0};
Point(99) = {-0.008274, -0.749630, 0, 1.0};
Point(100) = {-0.002517, -0.749492, 0, 1.0};
Point(101) = {0.003239, -0.749321, 0, 1.0};
Point(102) = {0.008950, -0.749120, 0, 1.0};
Point(103) = {0.014565, -0.748886, 0, 1.0};
Point(104) = {0.020035, -0.748604, 0, 1.0};
Point(105) = {0.025317, -0.748257, 0, 1.0};
Point(106) = {0.030380, -0.747825, 0, 1.0};
Point(107) = {0.035201, -0.747287, 0, 1.0};
Point(108) = {0.039752, -0.746642, 0, 1.0};
Point(109) = {0.044007, -0.745844, 0, 1.0};
Point(110) = {0.047984, -0.744875, 0, 1.0};
Point(111) = {0.051706, -0.743753, 0, 1.0};
Point(112) = {0.055177, -0.742492, 0, 1.0};
Point(113) = {0.058400, -0.741126, 0, 1.0};
Point(114) = {0.061357, -0.739683, 0, 1.0};
Point(115) = {0.064036, -0.738188, 0, 1.0};
Point(116) = {0.066427, -0.736654, 0, 1.0};
Point(117) = {0.068519, -0.735106, 0, 1.0};
Point(118) = {0.070307, -0.733566, 0, 1.0};
Point(119) = {0.071782, -0.732057, 0, 1.0};
Point(120) = {0.072935, -0.730606, 0, 1.0};
Point(121) = {0.073747, -0.729226, 0, 1.0};
Point(122) = {0.074232, -0.727923, 0, 1.0};
Point(123) = {0.074424, -0.726733, 0, 1.0};
Point(124) = {0.074331, -0.725729, 0, 1.0};
Point(125) = {0.073885, -0.725051, 0, 1.0};
Point(126) = {0.072942, -0.724658, 0, 1.0};
Point(127) = {0.071467, -0.724394, 0, 1.0};
Point(128) = {0.069540, -0.724252, 0, 1.0};
Point(129) = {0.067187, -0.724232, 0, 1.0};
Point(130) = {0.064439, -0.724332, 0, 1.0};
Point(131) = {0.061316, -0.724556, 0, 1.0};
Point(132) = {0.057851, -0.724910, 0, 1.0};
Point(133) = {0.054071, -0.725397, 0, 1.0};
Point(134) = {0.050009, -0.726028, 0, 1.0};
Point(135) = {0.045708, -0.726829, 0, 1.0};
Point(136) = {0.041155, -0.727878, 0, 1.0};
Point(137) = {0.036280, -0.729169, 0, 1.0};
Point(138) = {0.031068, -0.730626, 0, 1.0};
Point(139) = {0.025543, -0.732199, 0, 1.0};
Point(140) = {0.019739, -0.733848, 0, 1.0};
Point(141) = {0.013691, -0.735531, 0, 1.0};
Point(142) = {0.007443, -0.737218, 0, 1.0};
Point(143) = {0.001041, -0.738867, 0, 1.0};
Point(144) = {-0.005462, -0.740447, 0, 1.0};
Point(145) = {-0.012010, -0.741927, 0, 1.0};
Point(146) = {-0.018549, -0.743285, 0, 1.0};
Point(147) = {-0.021844, -0.743918, 0, 1.0};
Point(148) = {-0.032940, -0.745932, 0, 1.0};
Point(149) = {-0.039613, -0.747011, 0, 1.0};
Point(150) = {-0.041848, -0.747315, 0, 1.0};
Point(151) = {-0.044090, -0.747556, 0, 1.0};
Point(152) = {-0.046339, -0.747732, 0, 1.0};
Point(153) = {-0.048592, -0.747841, 0, 1.0};
Point(154) = {-0.055278, -0.747924, 0, 1.0};
Point(155) = {-0.066562, -0.747280, 0, 1.0};
Point(156) = {-0.069428, -0.746879, 0, 1.0};
Point(157) = {-0.071690, -0.746398, 0, 1.0};
Point(158) = {-0.073211, -0.745980, 0, 1.0};
Point(159) = {-0.074067, -0.745724, 0, 1.0};
Point(160) = {-0.074338, -0.745641, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html