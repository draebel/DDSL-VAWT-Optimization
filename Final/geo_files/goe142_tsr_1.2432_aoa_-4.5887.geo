SetFactory("OpenCASCADE");

Point(1) = {0.074634, 0.747372, 0, 1.0};
Point(2) = {0.071570, 0.747602, 0, 1.0};
Point(3) = {0.067556, 0.747894, 0, 1.0};
Point(4) = {0.063542, 0.748169, 0, 1.0};
Point(5) = {0.059531, 0.748429, 0, 1.0};
Point(6) = {0.055522, 0.748673, 0, 1.0};
Point(7) = {0.051514, 0.748897, 0, 1.0};
Point(8) = {0.047507, 0.749101, 0, 1.0};
Point(9) = {0.043502, 0.749285, 0, 1.0};
Point(10) = {0.039499, 0.749449, 0, 1.0};
Point(11) = {0.035498, 0.749593, 0, 1.0};
Point(12) = {0.031499, 0.749715, 0, 1.0};
Point(13) = {0.027501, 0.749817, 0, 1.0};
Point(14) = {0.019513, 0.749953, 0, 1.0};
Point(15) = {0.011533, 0.750000, 0, 1.0};
Point(16) = {0.003561, 0.749948, 0, 1.0};
Point(17) = {-0.004401, 0.749789, 0, 1.0};
Point(18) = {-0.012353, 0.749510, 0, 1.0};
Point(19) = {-0.020293, 0.749091, 0, 1.0};
Point(20) = {-0.028216, 0.748503, 0, 1.0};
Point(21) = {-0.032170, 0.748134, 0, 1.0};
Point(22) = {-0.036121, 0.747706, 0, 1.0};
Point(23) = {-0.040065, 0.747207, 0, 1.0};
Point(24) = {-0.044001, 0.746630, 0, 1.0};
Point(25) = {-0.047929, 0.745959, 0, 1.0};
Point(26) = {-0.051848, 0.745173, 0, 1.0};
Point(27) = {-0.055752, 0.744243, 0, 1.0};
Point(28) = {-0.059640, 0.743132, 0, 1.0};
Point(29) = {-0.063507, 0.741776, 0, 1.0};
Point(30) = {-0.067346, 0.740086, 0, 1.0};
Point(31) = {-0.069628, 0.738855, 0, 1.0};
Point(32) = {-0.071138, 0.737905, 0, 1.0};
Point(33) = {-0.071888, 0.737376, 0, 1.0};
Point(34) = {-0.072634, 0.736794, 0, 1.0};
Point(35) = {-0.073005, 0.736478, 0, 1.0};
Point(36) = {-0.073374, 0.736141, 0, 1.0};
Point(37) = {-0.073739, 0.735771, 0, 1.0};
Point(38) = {-0.074101, 0.735351, 0, 1.0};
Point(39) = {-0.074244, 0.735163, 0, 1.0};
Point(40) = {-0.074383, 0.734955, 0, 1.0};
Point(41) = {-0.074454, 0.734841, 0, 1.0};
Point(42) = {-0.074522, 0.734719, 0, 1.0};
Point(43) = {-0.074589, 0.734583, 0, 1.0};
Point(44) = {-0.074656, 0.734428, 0, 1.0};
Point(45) = {-0.074717, 0.734232, 0, 1.0};
Point(46) = {-0.074760, 0.733806, 0, 1.0};
Point(47) = {-0.074647, 0.733439, 0, 1.0};
Point(48) = {-0.074555, 0.733306, 0, 1.0};
Point(49) = {-0.074466, 0.733211, 0, 1.0};
Point(50) = {-0.074381, 0.733137, 0, 1.0};
Point(51) = {-0.074296, 0.733073, 0, 1.0};
Point(52) = {-0.074210, 0.733021, 0, 1.0};
Point(53) = {-0.074044, 0.732934, 0, 1.0};
Point(54) = {-0.073878, 0.732866, 0, 1.0};
Point(55) = {-0.073468, 0.732748, 0, 1.0};
Point(56) = {-0.073063, 0.732673, 0, 1.0};
Point(57) = {-0.072660, 0.732628, 0, 1.0};
Point(58) = {-0.072259, 0.732604, 0, 1.0};
Point(59) = {-0.071462, 0.732599, 0, 1.0};
Point(60) = {-0.070666, 0.732638, 0, 1.0};
Point(61) = {-0.069086, 0.732790, 0, 1.0};
Point(62) = {-0.066722, 0.733125, 0, 1.0};
Point(63) = {-0.062794, 0.733800, 0, 1.0};
Point(64) = {-0.058869, 0.734498, 0, 1.0};
Point(65) = {-0.054941, 0.735174, 0, 1.0};
Point(66) = {-0.051010, 0.735809, 0, 1.0};
Point(67) = {-0.047074, 0.736403, 0, 1.0};
Point(68) = {-0.043137, 0.736956, 0, 1.0};
Point(69) = {-0.039194, 0.737472, 0, 1.0};
Point(70) = {-0.035249, 0.737954, 0, 1.0};
Point(71) = {-0.031300, 0.738407, 0, 1.0};
Point(72) = {-0.027351, 0.738831, 0, 1.0};
Point(73) = {-0.019444, 0.739605, 0, 1.0};
Point(74) = {-0.011529, 0.740300, 0, 1.0};
Point(75) = {-0.003609, 0.740935, 0, 1.0};
Point(76) = {0.004314, 0.741528, 0, 1.0};
Point(77) = {0.012240, 0.742097, 0, 1.0};
Point(78) = {0.020167, 0.742643, 0, 1.0};
Point(79) = {0.028097, 0.743166, 0, 1.0};
Point(80) = {0.032062, 0.743420, 0, 1.0};
Point(81) = {0.036027, 0.743669, 0, 1.0};
Point(82) = {0.039995, 0.743912, 0, 1.0};
Point(83) = {0.043961, 0.744149, 0, 1.0};
Point(84) = {0.047929, 0.744383, 0, 1.0};
Point(85) = {0.051896, 0.744614, 0, 1.0};
Point(86) = {0.055865, 0.744840, 0, 1.0};
Point(87) = {0.059832, 0.745063, 0, 1.0};
Point(88) = {0.063801, 0.745282, 0, 1.0};
Point(89) = {0.067771, 0.745500, 0, 1.0};
Point(90) = {0.071738, 0.745717, 0, 1.0};
Point(91) = {0.074753, 0.745883, 0, 1.0};
Point(92) = {-0.074634, -0.747372, 0, 1.0};
Point(93) = {-0.071570, -0.747602, 0, 1.0};
Point(94) = {-0.067556, -0.747894, 0, 1.0};
Point(95) = {-0.063542, -0.748169, 0, 1.0};
Point(96) = {-0.059531, -0.748429, 0, 1.0};
Point(97) = {-0.055522, -0.748673, 0, 1.0};
Point(98) = {-0.051514, -0.748897, 0, 1.0};
Point(99) = {-0.047507, -0.749101, 0, 1.0};
Point(100) = {-0.043502, -0.749285, 0, 1.0};
Point(101) = {-0.039499, -0.749449, 0, 1.0};
Point(102) = {-0.035498, -0.749593, 0, 1.0};
Point(103) = {-0.031499, -0.749715, 0, 1.0};
Point(104) = {-0.027501, -0.749817, 0, 1.0};
Point(105) = {-0.019513, -0.749953, 0, 1.0};
Point(106) = {-0.011533, -0.750000, 0, 1.0};
Point(107) = {-0.003561, -0.749948, 0, 1.0};
Point(108) = {0.004401, -0.749789, 0, 1.0};
Point(109) = {0.012353, -0.749510, 0, 1.0};
Point(110) = {0.020293, -0.749091, 0, 1.0};
Point(111) = {0.028216, -0.748503, 0, 1.0};
Point(112) = {0.032170, -0.748134, 0, 1.0};
Point(113) = {0.036121, -0.747706, 0, 1.0};
Point(114) = {0.040065, -0.747207, 0, 1.0};
Point(115) = {0.044001, -0.746630, 0, 1.0};
Point(116) = {0.047929, -0.745959, 0, 1.0};
Point(117) = {0.051848, -0.745173, 0, 1.0};
Point(118) = {0.055752, -0.744243, 0, 1.0};
Point(119) = {0.059640, -0.743132, 0, 1.0};
Point(120) = {0.063507, -0.741776, 0, 1.0};
Point(121) = {0.067346, -0.740086, 0, 1.0};
Point(122) = {0.069628, -0.738855, 0, 1.0};
Point(123) = {0.071138, -0.737905, 0, 1.0};
Point(124) = {0.071888, -0.737376, 0, 1.0};
Point(125) = {0.072634, -0.736794, 0, 1.0};
Point(126) = {0.073005, -0.736478, 0, 1.0};
Point(127) = {0.073374, -0.736141, 0, 1.0};
Point(128) = {0.073739, -0.735771, 0, 1.0};
Point(129) = {0.074101, -0.735351, 0, 1.0};
Point(130) = {0.074244, -0.735163, 0, 1.0};
Point(131) = {0.074383, -0.734955, 0, 1.0};
Point(132) = {0.074454, -0.734841, 0, 1.0};
Point(133) = {0.074522, -0.734719, 0, 1.0};
Point(134) = {0.074589, -0.734583, 0, 1.0};
Point(135) = {0.074656, -0.734428, 0, 1.0};
Point(136) = {0.074717, -0.734232, 0, 1.0};
Point(137) = {0.074760, -0.733806, 0, 1.0};
Point(138) = {0.074647, -0.733439, 0, 1.0};
Point(139) = {0.074555, -0.733306, 0, 1.0};
Point(140) = {0.074466, -0.733211, 0, 1.0};
Point(141) = {0.074381, -0.733137, 0, 1.0};
Point(142) = {0.074296, -0.733073, 0, 1.0};
Point(143) = {0.074210, -0.733021, 0, 1.0};
Point(144) = {0.074044, -0.732934, 0, 1.0};
Point(145) = {0.073878, -0.732866, 0, 1.0};
Point(146) = {0.073468, -0.732748, 0, 1.0};
Point(147) = {0.073063, -0.732673, 0, 1.0};
Point(148) = {0.072660, -0.732628, 0, 1.0};
Point(149) = {0.072259, -0.732604, 0, 1.0};
Point(150) = {0.071462, -0.732599, 0, 1.0};
Point(151) = {0.070666, -0.732638, 0, 1.0};
Point(152) = {0.069086, -0.732790, 0, 1.0};
Point(153) = {0.066722, -0.733125, 0, 1.0};
Point(154) = {0.062794, -0.733800, 0, 1.0};
Point(155) = {0.058869, -0.734498, 0, 1.0};
Point(156) = {0.054941, -0.735174, 0, 1.0};
Point(157) = {0.051010, -0.735809, 0, 1.0};
Point(158) = {0.047074, -0.736403, 0, 1.0};
Point(159) = {0.043137, -0.736956, 0, 1.0};
Point(160) = {0.039194, -0.737472, 0, 1.0};
Point(161) = {0.035249, -0.737954, 0, 1.0};
Point(162) = {0.031300, -0.738407, 0, 1.0};
Point(163) = {0.027351, -0.738831, 0, 1.0};
Point(164) = {0.019444, -0.739605, 0, 1.0};
Point(165) = {0.011529, -0.740300, 0, 1.0};
Point(166) = {0.003609, -0.740935, 0, 1.0};
Point(167) = {-0.004314, -0.741528, 0, 1.0};
Point(168) = {-0.012240, -0.742097, 0, 1.0};
Point(169) = {-0.020167, -0.742643, 0, 1.0};
Point(170) = {-0.028097, -0.743166, 0, 1.0};
Point(171) = {-0.032062, -0.743420, 0, 1.0};
Point(172) = {-0.036027, -0.743669, 0, 1.0};
Point(173) = {-0.039995, -0.743912, 0, 1.0};
Point(174) = {-0.043961, -0.744149, 0, 1.0};
Point(175) = {-0.047929, -0.744383, 0, 1.0};
Point(176) = {-0.051896, -0.744614, 0, 1.0};
Point(177) = {-0.055865, -0.744840, 0, 1.0};
Point(178) = {-0.059832, -0.745063, 0, 1.0};
Point(179) = {-0.063801, -0.745282, 0, 1.0};
Point(180) = {-0.067771, -0.745500, 0, 1.0};
Point(181) = {-0.071738, -0.745717, 0, 1.0};
Point(182) = {-0.074753, -0.745883, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:70};
Spline(3) = {70:91};
Spline(4) = {91,1};

// Lines: second blade (splines 5-8)
Spline(5) = {92:112};
Spline(6) = {112:161};
Spline(7) = {161:182};
Spline(8) = {182,92};

// Outer domain (points 20001-4 and lines)
Point(183) = {-13.50000000, -15.00000000, 0, 1.0};
Point(184) = {-13.50000000, 15.00000000, 0, 1.0};
Point(185) = {36.00000000, 15.00000000, 0, 1.0};
Point(186) = {36.00000000, -15.00000000, 0, 1.0};
Line(11) = {183, 184};
Line(12) = {184, 185};
Line(13) = {185, 186};
Line(14) = {183, 186};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html