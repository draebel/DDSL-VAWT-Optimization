SetFactory("OpenCASCADE");

Point(1) = {0.074507, 0.720791, 0, 1.0};
Point(2) = {0.074274, 0.720945, 0, 1.0};
Point(3) = {0.073638, 0.721403, 0, 1.0};
Point(4) = {0.072688, 0.722079, 0, 1.0};
Point(5) = {0.071423, 0.722862, 0, 1.0};
Point(6) = {0.069767, 0.723698, 0, 1.0};
Point(7) = {0.067692, 0.724618, 0, 1.0};
Point(8) = {0.066968, 0.724920, 0, 1.0};
Point(9) = {0.056451, 0.728950, 0, 1.0};
Point(10) = {0.051131, 0.730808, 0, 1.0};
Point(11) = {0.048976, 0.731519, 0, 1.0};
Point(12) = {0.046809, 0.732192, 0, 1.0};
Point(13) = {0.044629, 0.732816, 0, 1.0};
Point(14) = {0.042433, 0.733387, 0, 1.0};
Point(15) = {0.034726, 0.735252, 0, 1.0};
Point(16) = {0.023783, 0.737894, 0, 1.0};
Point(17) = {0.022470, 0.738217, 0, 1.0};
Point(18) = {0.016991, 0.739535, 0, 1.0};
Point(19) = {0.011427, 0.740835, 0, 1.0};
Point(20) = {0.005812, 0.742111, 0, 1.0};
Point(21) = {0.000189, 0.743355, 0, 1.0};
Point(22) = {-0.005397, 0.744558, 0, 1.0};
Point(23) = {-0.010899, 0.745707, 0, 1.0};
Point(24) = {-0.016271, 0.746772, 0, 1.0};
Point(25) = {-0.021478, 0.747729, 0, 1.0};
Point(26) = {-0.026492, 0.748550, 0, 1.0};
Point(27) = {-0.031297, 0.749209, 0, 1.0};
Point(28) = {-0.035868, 0.749698, 0, 1.0};
Point(29) = {-0.040189, 0.749966, 0, 1.0};
Point(30) = {-0.044282, 0.750000, 0, 1.0};
Point(31) = {-0.048166, 0.749824, 0, 1.0};
Point(32) = {-0.051840, 0.749452, 0, 1.0};
Point(33) = {-0.055299, 0.748916, 0, 1.0};
Point(34) = {-0.058520, 0.748241, 0, 1.0};
Point(35) = {-0.061484, 0.747447, 0, 1.0};
Point(36) = {-0.064177, 0.746546, 0, 1.0};
Point(37) = {-0.066584, 0.745557, 0, 1.0};
Point(38) = {-0.068696, 0.744501, 0, 1.0};
Point(39) = {-0.070495, 0.743399, 0, 1.0};
Point(40) = {-0.071968, 0.742275, 0, 1.0};
Point(41) = {-0.073093, 0.741136, 0, 1.0};
Point(42) = {-0.073882, 0.739991, 0, 1.0};
Point(43) = {-0.074359, 0.738885, 0, 1.0};
Point(44) = {-0.074516, 0.737889, 0, 1.0};
Point(45) = {-0.074249, 0.737122, 0, 1.0};
Point(46) = {-0.073431, 0.736510, 0, 1.0};
Point(47) = {-0.072065, 0.735893, 0, 1.0};
Point(48) = {-0.070232, 0.735283, 0, 1.0};
Point(49) = {-0.067956, 0.734688, 0, 1.0};
Point(50) = {-0.065266, 0.734112, 0, 1.0};
Point(51) = {-0.062184, 0.733565, 0, 1.0};
Point(52) = {-0.058738, 0.733059, 0, 1.0};
Point(53) = {-0.054954, 0.732606, 0, 1.0};
Point(54) = {-0.050861, 0.732223, 0, 1.0};
Point(55) = {-0.046494, 0.731946, 0, 1.0};
Point(56) = {-0.041823, 0.731848, 0, 1.0};
Point(57) = {-0.036780, 0.731907, 0, 1.0};
Point(58) = {-0.031370, 0.732043, 0, 1.0};
Point(59) = {-0.025628, 0.732216, 0, 1.0};
Point(60) = {-0.019597, 0.732393, 0, 1.0};
Point(61) = {-0.013321, 0.732544, 0, 1.0};
Point(62) = {-0.006851, 0.732650, 0, 1.0};
Point(63) = {-0.000239, 0.732680, 0, 1.0};
Point(64) = {0.006452, 0.732620, 0, 1.0};
Point(65) = {0.013163, 0.732452, 0, 1.0};
Point(66) = {0.019836, 0.732168, 0, 1.0};
Point(67) = {0.023185, 0.731974, 0, 1.0};
Point(68) = {0.034437, 0.731211, 0, 1.0};
Point(69) = {0.041171, 0.730623, 0, 1.0};
Point(70) = {0.043412, 0.730370, 0, 1.0};
Point(71) = {0.045645, 0.730054, 0, 1.0};
Point(72) = {0.047869, 0.729675, 0, 1.0};
Point(73) = {0.050080, 0.729229, 0, 1.0};
Point(74) = {0.056583, 0.727672, 0, 1.0};
Point(75) = {0.067365, 0.724285, 0, 1.0};
Point(76) = {0.070046, 0.723194, 0, 1.0};
Point(77) = {0.072121, 0.722174, 0, 1.0};
Point(78) = {0.073494, 0.721396, 0, 1.0};
Point(79) = {0.074261, 0.720938, 0, 1.0};
Point(80) = {0.074504, 0.720791, 0, 1.0};
Point(81) = {-0.074507, -0.720791, 0, 1.0};
Point(82) = {-0.074274, -0.720945, 0, 1.0};
Point(83) = {-0.073638, -0.721403, 0, 1.0};
Point(84) = {-0.072688, -0.722079, 0, 1.0};
Point(85) = {-0.071423, -0.722862, 0, 1.0};
Point(86) = {-0.069767, -0.723698, 0, 1.0};
Point(87) = {-0.067692, -0.724618, 0, 1.0};
Point(88) = {-0.066968, -0.724920, 0, 1.0};
Point(89) = {-0.056451, -0.728950, 0, 1.0};
Point(90) = {-0.051131, -0.730808, 0, 1.0};
Point(91) = {-0.048976, -0.731519, 0, 1.0};
Point(92) = {-0.046809, -0.732192, 0, 1.0};
Point(93) = {-0.044629, -0.732816, 0, 1.0};
Point(94) = {-0.042433, -0.733387, 0, 1.0};
Point(95) = {-0.034726, -0.735252, 0, 1.0};
Point(96) = {-0.023783, -0.737894, 0, 1.0};
Point(97) = {-0.022470, -0.738217, 0, 1.0};
Point(98) = {-0.016991, -0.739535, 0, 1.0};
Point(99) = {-0.011427, -0.740835, 0, 1.0};
Point(100) = {-0.005812, -0.742111, 0, 1.0};
Point(101) = {-0.000189, -0.743355, 0, 1.0};
Point(102) = {0.005397, -0.744558, 0, 1.0};
Point(103) = {0.010899, -0.745707, 0, 1.0};
Point(104) = {0.016271, -0.746772, 0, 1.0};
Point(105) = {0.021478, -0.747729, 0, 1.0};
Point(106) = {0.026492, -0.748550, 0, 1.0};
Point(107) = {0.031297, -0.749209, 0, 1.0};
Point(108) = {0.035868, -0.749698, 0, 1.0};
Point(109) = {0.040189, -0.749966, 0, 1.0};
Point(110) = {0.044282, -0.750000, 0, 1.0};
Point(111) = {0.048166, -0.749824, 0, 1.0};
Point(112) = {0.051840, -0.749452, 0, 1.0};
Point(113) = {0.055299, -0.748916, 0, 1.0};
Point(114) = {0.058520, -0.748241, 0, 1.0};
Point(115) = {0.061484, -0.747447, 0, 1.0};
Point(116) = {0.064177, -0.746546, 0, 1.0};
Point(117) = {0.066584, -0.745557, 0, 1.0};
Point(118) = {0.068696, -0.744501, 0, 1.0};
Point(119) = {0.070495, -0.743399, 0, 1.0};
Point(120) = {0.071968, -0.742275, 0, 1.0};
Point(121) = {0.073093, -0.741136, 0, 1.0};
Point(122) = {0.073882, -0.739991, 0, 1.0};
Point(123) = {0.074359, -0.738885, 0, 1.0};
Point(124) = {0.074516, -0.737889, 0, 1.0};
Point(125) = {0.074249, -0.737122, 0, 1.0};
Point(126) = {0.073431, -0.736510, 0, 1.0};
Point(127) = {0.072065, -0.735893, 0, 1.0};
Point(128) = {0.070232, -0.735283, 0, 1.0};
Point(129) = {0.067956, -0.734688, 0, 1.0};
Point(130) = {0.065266, -0.734112, 0, 1.0};
Point(131) = {0.062184, -0.733565, 0, 1.0};
Point(132) = {0.058738, -0.733059, 0, 1.0};
Point(133) = {0.054954, -0.732606, 0, 1.0};
Point(134) = {0.050861, -0.732223, 0, 1.0};
Point(135) = {0.046494, -0.731946, 0, 1.0};
Point(136) = {0.041823, -0.731848, 0, 1.0};
Point(137) = {0.036780, -0.731907, 0, 1.0};
Point(138) = {0.031370, -0.732043, 0, 1.0};
Point(139) = {0.025628, -0.732216, 0, 1.0};
Point(140) = {0.019597, -0.732393, 0, 1.0};
Point(141) = {0.013321, -0.732544, 0, 1.0};
Point(142) = {0.006851, -0.732650, 0, 1.0};
Point(143) = {0.000239, -0.732680, 0, 1.0};
Point(144) = {-0.006452, -0.732620, 0, 1.0};
Point(145) = {-0.013163, -0.732452, 0, 1.0};
Point(146) = {-0.019836, -0.732168, 0, 1.0};
Point(147) = {-0.023185, -0.731974, 0, 1.0};
Point(148) = {-0.034437, -0.731211, 0, 1.0};
Point(149) = {-0.041171, -0.730623, 0, 1.0};
Point(150) = {-0.043412, -0.730370, 0, 1.0};
Point(151) = {-0.045645, -0.730054, 0, 1.0};
Point(152) = {-0.047869, -0.729675, 0, 1.0};
Point(153) = {-0.050080, -0.729229, 0, 1.0};
Point(154) = {-0.056583, -0.727672, 0, 1.0};
Point(155) = {-0.067365, -0.724285, 0, 1.0};
Point(156) = {-0.070046, -0.723194, 0, 1.0};
Point(157) = {-0.072121, -0.722174, 0, 1.0};
Point(158) = {-0.073494, -0.721396, 0, 1.0};
Point(159) = {-0.074261, -0.720938, 0, 1.0};
Point(160) = {-0.074504, -0.720791, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html