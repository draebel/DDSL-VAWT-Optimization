SetFactory("OpenCASCADE");

Point(1) = {0.148486, 0.711097, 0, 1.0};
Point(2) = {0.148176, 0.711302, 0, 1.0};
Point(3) = {0.147329, 0.711912, 0, 1.0};
Point(4) = {0.146063, 0.712813, 0, 1.0};
Point(5) = {0.144379, 0.713855, 0, 1.0};
Point(6) = {0.142173, 0.714969, 0, 1.0};
Point(7) = {0.139410, 0.716194, 0, 1.0};
Point(8) = {0.138446, 0.716596, 0, 1.0};
Point(9) = {0.124438, 0.721965, 0, 1.0};
Point(10) = {0.117353, 0.724439, 0, 1.0};
Point(11) = {0.114482, 0.725386, 0, 1.0};
Point(12) = {0.111597, 0.726282, 0, 1.0};
Point(13) = {0.108693, 0.727113, 0, 1.0};
Point(14) = {0.105768, 0.727873, 0, 1.0};
Point(15) = {0.095504, 0.730358, 0, 1.0};
Point(16) = {0.080929, 0.733877, 0, 1.0};
Point(17) = {0.079180, 0.734306, 0, 1.0};
Point(18) = {0.071882, 0.736061, 0, 1.0};
Point(19) = {0.064473, 0.737793, 0, 1.0};
Point(20) = {0.056994, 0.739493, 0, 1.0};
Point(21) = {0.049505, 0.741150, 0, 1.0};
Point(22) = {0.042065, 0.742752, 0, 1.0};
Point(23) = {0.034737, 0.744282, 0, 1.0};
Point(24) = {0.027582, 0.745701, 0, 1.0};
Point(25) = {0.020648, 0.746976, 0, 1.0};
Point(26) = {0.013969, 0.748069, 0, 1.0};
Point(27) = {0.007569, 0.748947, 0, 1.0};
Point(28) = {0.001482, 0.749598, 0, 1.0};
Point(29) = {-0.004273, 0.749955, 0, 1.0};
Point(30) = {-0.009725, 0.750000, 0, 1.0};
Point(31) = {-0.014897, 0.749765, 0, 1.0};
Point(32) = {-0.019791, 0.749270, 0, 1.0};
Point(33) = {-0.024398, 0.748556, 0, 1.0};
Point(34) = {-0.028687, 0.747657, 0, 1.0};
Point(35) = {-0.032635, 0.746600, 0, 1.0};
Point(36) = {-0.036222, 0.745399, 0, 1.0};
Point(37) = {-0.039428, 0.744082, 0, 1.0};
Point(38) = {-0.042240, 0.742676, 0, 1.0};
Point(39) = {-0.044636, 0.741209, 0, 1.0};
Point(40) = {-0.046599, 0.739712, 0, 1.0};
Point(41) = {-0.048097, 0.738194, 0, 1.0};
Point(42) = {-0.049148, 0.736670, 0, 1.0};
Point(43) = {-0.049784, 0.735196, 0, 1.0};
Point(44) = {-0.049992, 0.733869, 0, 1.0};
Point(45) = {-0.049637, 0.732848, 0, 1.0};
Point(46) = {-0.048547, 0.732033, 0, 1.0};
Point(47) = {-0.046728, 0.731212, 0, 1.0};
Point(48) = {-0.044287, 0.730399, 0, 1.0};
Point(49) = {-0.041255, 0.729606, 0, 1.0};
Point(50) = {-0.037673, 0.728839, 0, 1.0};
Point(51) = {-0.033567, 0.728110, 0, 1.0};
Point(52) = {-0.028978, 0.727437, 0, 1.0};
Point(53) = {-0.023938, 0.726833, 0, 1.0};
Point(54) = {-0.018486, 0.726323, 0, 1.0};
Point(55) = {-0.012671, 0.725955, 0, 1.0};
Point(56) = {-0.006449, 0.725824, 0, 1.0};
Point(57) = {0.000267, 0.725902, 0, 1.0};
Point(58) = {0.007472, 0.726084, 0, 1.0};
Point(59) = {0.015120, 0.726314, 0, 1.0};
Point(60) = {0.023152, 0.726550, 0, 1.0};
Point(61) = {0.031511, 0.726751, 0, 1.0};
Point(62) = {0.040129, 0.726892, 0, 1.0};
Point(63) = {0.048934, 0.726933, 0, 1.0};
Point(64) = {0.057847, 0.726853, 0, 1.0};
Point(65) = {0.066785, 0.726629, 0, 1.0};
Point(66) = {0.075672, 0.726250, 0, 1.0};
Point(67) = {0.080133, 0.725992, 0, 1.0};
Point(68) = {0.095118, 0.724975, 0, 1.0};
Point(69) = {0.104088, 0.724192, 0, 1.0};
Point(70) = {0.107073, 0.723855, 0, 1.0};
Point(71) = {0.110046, 0.723435, 0, 1.0};
Point(72) = {0.113008, 0.722930, 0, 1.0};
Point(73) = {0.115954, 0.722336, 0, 1.0};
Point(74) = {0.124614, 0.720262, 0, 1.0};
Point(75) = {0.138975, 0.715751, 0, 1.0};
Point(76) = {0.142545, 0.714298, 0, 1.0};
Point(77) = {0.145309, 0.712940, 0, 1.0};
Point(78) = {0.147137, 0.711904, 0, 1.0};
Point(79) = {0.148159, 0.711294, 0, 1.0};
Point(80) = {0.148482, 0.711098, 0, 1.0};
Point(81) = {-0.148486, -0.711097, 0, 1.0};
Point(82) = {-0.148176, -0.711302, 0, 1.0};
Point(83) = {-0.147329, -0.711912, 0, 1.0};
Point(84) = {-0.146063, -0.712813, 0, 1.0};
Point(85) = {-0.144379, -0.713855, 0, 1.0};
Point(86) = {-0.142173, -0.714969, 0, 1.0};
Point(87) = {-0.139410, -0.716194, 0, 1.0};
Point(88) = {-0.138446, -0.716596, 0, 1.0};
Point(89) = {-0.124438, -0.721965, 0, 1.0};
Point(90) = {-0.117353, -0.724439, 0, 1.0};
Point(91) = {-0.114482, -0.725386, 0, 1.0};
Point(92) = {-0.111597, -0.726282, 0, 1.0};
Point(93) = {-0.108693, -0.727113, 0, 1.0};
Point(94) = {-0.105768, -0.727873, 0, 1.0};
Point(95) = {-0.095504, -0.730358, 0, 1.0};
Point(96) = {-0.080929, -0.733877, 0, 1.0};
Point(97) = {-0.079180, -0.734306, 0, 1.0};
Point(98) = {-0.071882, -0.736061, 0, 1.0};
Point(99) = {-0.064473, -0.737793, 0, 1.0};
Point(100) = {-0.056994, -0.739493, 0, 1.0};
Point(101) = {-0.049505, -0.741150, 0, 1.0};
Point(102) = {-0.042065, -0.742752, 0, 1.0};
Point(103) = {-0.034737, -0.744282, 0, 1.0};
Point(104) = {-0.027582, -0.745701, 0, 1.0};
Point(105) = {-0.020648, -0.746976, 0, 1.0};
Point(106) = {-0.013969, -0.748069, 0, 1.0};
Point(107) = {-0.007569, -0.748947, 0, 1.0};
Point(108) = {-0.001482, -0.749598, 0, 1.0};
Point(109) = {0.004273, -0.749955, 0, 1.0};
Point(110) = {0.009725, -0.750000, 0, 1.0};
Point(111) = {0.014897, -0.749765, 0, 1.0};
Point(112) = {0.019791, -0.749270, 0, 1.0};
Point(113) = {0.024398, -0.748556, 0, 1.0};
Point(114) = {0.028687, -0.747657, 0, 1.0};
Point(115) = {0.032635, -0.746600, 0, 1.0};
Point(116) = {0.036222, -0.745399, 0, 1.0};
Point(117) = {0.039428, -0.744082, 0, 1.0};
Point(118) = {0.042240, -0.742676, 0, 1.0};
Point(119) = {0.044636, -0.741209, 0, 1.0};
Point(120) = {0.046599, -0.739712, 0, 1.0};
Point(121) = {0.048097, -0.738194, 0, 1.0};
Point(122) = {0.049148, -0.736670, 0, 1.0};
Point(123) = {0.049784, -0.735196, 0, 1.0};
Point(124) = {0.049992, -0.733869, 0, 1.0};
Point(125) = {0.049637, -0.732848, 0, 1.0};
Point(126) = {0.048547, -0.732033, 0, 1.0};
Point(127) = {0.046728, -0.731212, 0, 1.0};
Point(128) = {0.044287, -0.730399, 0, 1.0};
Point(129) = {0.041255, -0.729606, 0, 1.0};
Point(130) = {0.037673, -0.728839, 0, 1.0};
Point(131) = {0.033567, -0.728110, 0, 1.0};
Point(132) = {0.028978, -0.727437, 0, 1.0};
Point(133) = {0.023938, -0.726833, 0, 1.0};
Point(134) = {0.018486, -0.726323, 0, 1.0};
Point(135) = {0.012671, -0.725955, 0, 1.0};
Point(136) = {0.006449, -0.725824, 0, 1.0};
Point(137) = {-0.000267, -0.725902, 0, 1.0};
Point(138) = {-0.007472, -0.726084, 0, 1.0};
Point(139) = {-0.015120, -0.726314, 0, 1.0};
Point(140) = {-0.023152, -0.726550, 0, 1.0};
Point(141) = {-0.031511, -0.726751, 0, 1.0};
Point(142) = {-0.040129, -0.726892, 0, 1.0};
Point(143) = {-0.048934, -0.726933, 0, 1.0};
Point(144) = {-0.057847, -0.726853, 0, 1.0};
Point(145) = {-0.066785, -0.726629, 0, 1.0};
Point(146) = {-0.075672, -0.726250, 0, 1.0};
Point(147) = {-0.080133, -0.725992, 0, 1.0};
Point(148) = {-0.095118, -0.724975, 0, 1.0};
Point(149) = {-0.104088, -0.724192, 0, 1.0};
Point(150) = {-0.107073, -0.723855, 0, 1.0};
Point(151) = {-0.110046, -0.723435, 0, 1.0};
Point(152) = {-0.113008, -0.722930, 0, 1.0};
Point(153) = {-0.115954, -0.722336, 0, 1.0};
Point(154) = {-0.124614, -0.720262, 0, 1.0};
Point(155) = {-0.138975, -0.715751, 0, 1.0};
Point(156) = {-0.142545, -0.714298, 0, 1.0};
Point(157) = {-0.145309, -0.712940, 0, 1.0};
Point(158) = {-0.147137, -0.711904, 0, 1.0};
Point(159) = {-0.148159, -0.711294, 0, 1.0};
Point(160) = {-0.148482, -0.711098, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html