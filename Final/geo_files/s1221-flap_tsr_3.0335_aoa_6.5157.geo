SetFactory("OpenCASCADE");

Point(1) = {0.111365, 0.720823, 0, 1.0};
Point(2) = {0.111132, 0.720977, 0, 1.0};
Point(3) = {0.110497, 0.721434, 0, 1.0};
Point(4) = {0.109548, 0.722110, 0, 1.0};
Point(5) = {0.108284, 0.722892, 0, 1.0};
Point(6) = {0.106630, 0.723727, 0, 1.0};
Point(7) = {0.104558, 0.724646, 0, 1.0};
Point(8) = {0.103834, 0.724947, 0, 1.0};
Point(9) = {0.093329, 0.728973, 0, 1.0};
Point(10) = {0.088015, 0.730829, 0, 1.0};
Point(11) = {0.085862, 0.731540, 0, 1.0};
Point(12) = {0.083698, 0.732211, 0, 1.0};
Point(13) = {0.081520, 0.732834, 0, 1.0};
Point(14) = {0.079326, 0.733405, 0, 1.0};
Point(15) = {0.071628, 0.735269, 0, 1.0};
Point(16) = {0.060697, 0.737908, 0, 1.0};
Point(17) = {0.059385, 0.738229, 0, 1.0};
Point(18) = {0.053912, 0.739546, 0, 1.0};
Point(19) = {0.048355, 0.740845, 0, 1.0};
Point(20) = {0.042745, 0.742120, 0, 1.0};
Point(21) = {0.037129, 0.743362, 0, 1.0};
Point(22) = {0.031549, 0.744564, 0, 1.0};
Point(23) = {0.026053, 0.745711, 0, 1.0};
Point(24) = {0.020687, 0.746776, 0, 1.0};
Point(25) = {0.015486, 0.747732, 0, 1.0};
Point(26) = {0.010477, 0.748552, 0, 1.0};
Point(27) = {0.005677, 0.749210, 0, 1.0};
Point(28) = {0.001111, 0.749698, 0, 1.0};
Point(29) = {-0.003205, 0.749966, 0, 1.0};
Point(30) = {-0.007294, 0.750000, 0, 1.0};
Point(31) = {-0.011173, 0.749824, 0, 1.0};
Point(32) = {-0.014843, 0.749452, 0, 1.0};
Point(33) = {-0.018298, 0.748917, 0, 1.0};
Point(34) = {-0.021516, 0.748242, 0, 1.0};
Point(35) = {-0.024476, 0.747450, 0, 1.0};
Point(36) = {-0.027167, 0.746549, 0, 1.0};
Point(37) = {-0.029571, 0.745562, 0, 1.0};
Point(38) = {-0.031680, 0.744507, 0, 1.0};
Point(39) = {-0.033477, 0.743407, 0, 1.0};
Point(40) = {-0.034949, 0.742284, 0, 1.0};
Point(41) = {-0.036072, 0.741146, 0, 1.0};
Point(42) = {-0.036861, 0.740002, 0, 1.0};
Point(43) = {-0.037338, 0.738897, 0, 1.0};
Point(44) = {-0.037494, 0.737902, 0, 1.0};
Point(45) = {-0.037228, 0.737136, 0, 1.0};
Point(46) = {-0.036410, 0.736525, 0, 1.0};
Point(47) = {-0.035046, 0.735909, 0, 1.0};
Point(48) = {-0.033215, 0.735299, 0, 1.0};
Point(49) = {-0.030941, 0.734705, 0, 1.0};
Point(50) = {-0.028255, 0.734129, 0, 1.0};
Point(51) = {-0.025175, 0.733583, 0, 1.0};
Point(52) = {-0.021733, 0.733078, 0, 1.0};
Point(53) = {-0.017953, 0.732625, 0, 1.0};
Point(54) = {-0.013865, 0.732242, 0, 1.0};
Point(55) = {-0.009503, 0.731966, 0, 1.0};
Point(56) = {-0.004837, 0.731868, 0, 1.0};
Point(57) = {0.000200, 0.731927, 0, 1.0};
Point(58) = {0.005604, 0.732063, 0, 1.0};
Point(59) = {0.011340, 0.732235, 0, 1.0};
Point(60) = {0.017364, 0.732412, 0, 1.0};
Point(61) = {0.023633, 0.732563, 0, 1.0};
Point(62) = {0.030097, 0.732669, 0, 1.0};
Point(63) = {0.036701, 0.732699, 0, 1.0};
Point(64) = {0.043385, 0.732640, 0, 1.0};
Point(65) = {0.050089, 0.732472, 0, 1.0};
Point(66) = {0.056754, 0.732188, 0, 1.0};
Point(67) = {0.060100, 0.731994, 0, 1.0};
Point(68) = {0.071339, 0.731231, 0, 1.0};
Point(69) = {0.078066, 0.730644, 0, 1.0};
Point(70) = {0.080304, 0.730392, 0, 1.0};
Point(71) = {0.082535, 0.730076, 0, 1.0};
Point(72) = {0.084756, 0.729697, 0, 1.0};
Point(73) = {0.086965, 0.729252, 0, 1.0};
Point(74) = {0.093461, 0.727696, 0, 1.0};
Point(75) = {0.104231, 0.724313, 0, 1.0};
Point(76) = {0.106909, 0.723224, 0, 1.0};
Point(77) = {0.108982, 0.722205, 0, 1.0};
Point(78) = {0.110353, 0.721428, 0, 1.0};
Point(79) = {0.111119, 0.720970, 0, 1.0};
Point(80) = {0.111362, 0.720823, 0, 1.0};
Point(81) = {-0.111365, -0.720823, 0, 1.0};
Point(82) = {-0.111132, -0.720977, 0, 1.0};
Point(83) = {-0.110497, -0.721434, 0, 1.0};
Point(84) = {-0.109548, -0.722110, 0, 1.0};
Point(85) = {-0.108284, -0.722892, 0, 1.0};
Point(86) = {-0.106630, -0.723727, 0, 1.0};
Point(87) = {-0.104558, -0.724646, 0, 1.0};
Point(88) = {-0.103834, -0.724947, 0, 1.0};
Point(89) = {-0.093329, -0.728973, 0, 1.0};
Point(90) = {-0.088015, -0.730829, 0, 1.0};
Point(91) = {-0.085862, -0.731540, 0, 1.0};
Point(92) = {-0.083698, -0.732211, 0, 1.0};
Point(93) = {-0.081520, -0.732834, 0, 1.0};
Point(94) = {-0.079326, -0.733405, 0, 1.0};
Point(95) = {-0.071628, -0.735269, 0, 1.0};
Point(96) = {-0.060697, -0.737908, 0, 1.0};
Point(97) = {-0.059385, -0.738229, 0, 1.0};
Point(98) = {-0.053912, -0.739546, 0, 1.0};
Point(99) = {-0.048355, -0.740845, 0, 1.0};
Point(100) = {-0.042745, -0.742120, 0, 1.0};
Point(101) = {-0.037129, -0.743362, 0, 1.0};
Point(102) = {-0.031549, -0.744564, 0, 1.0};
Point(103) = {-0.026053, -0.745711, 0, 1.0};
Point(104) = {-0.020687, -0.746776, 0, 1.0};
Point(105) = {-0.015486, -0.747732, 0, 1.0};
Point(106) = {-0.010477, -0.748552, 0, 1.0};
Point(107) = {-0.005677, -0.749210, 0, 1.0};
Point(108) = {-0.001111, -0.749698, 0, 1.0};
Point(109) = {0.003205, -0.749966, 0, 1.0};
Point(110) = {0.007294, -0.750000, 0, 1.0};
Point(111) = {0.011173, -0.749824, 0, 1.0};
Point(112) = {0.014843, -0.749452, 0, 1.0};
Point(113) = {0.018298, -0.748917, 0, 1.0};
Point(114) = {0.021516, -0.748242, 0, 1.0};
Point(115) = {0.024476, -0.747450, 0, 1.0};
Point(116) = {0.027167, -0.746549, 0, 1.0};
Point(117) = {0.029571, -0.745562, 0, 1.0};
Point(118) = {0.031680, -0.744507, 0, 1.0};
Point(119) = {0.033477, -0.743407, 0, 1.0};
Point(120) = {0.034949, -0.742284, 0, 1.0};
Point(121) = {0.036072, -0.741146, 0, 1.0};
Point(122) = {0.036861, -0.740002, 0, 1.0};
Point(123) = {0.037338, -0.738897, 0, 1.0};
Point(124) = {0.037494, -0.737902, 0, 1.0};
Point(125) = {0.037228, -0.737136, 0, 1.0};
Point(126) = {0.036410, -0.736525, 0, 1.0};
Point(127) = {0.035046, -0.735909, 0, 1.0};
Point(128) = {0.033215, -0.735299, 0, 1.0};
Point(129) = {0.030941, -0.734705, 0, 1.0};
Point(130) = {0.028255, -0.734129, 0, 1.0};
Point(131) = {0.025175, -0.733583, 0, 1.0};
Point(132) = {0.021733, -0.733078, 0, 1.0};
Point(133) = {0.017953, -0.732625, 0, 1.0};
Point(134) = {0.013865, -0.732242, 0, 1.0};
Point(135) = {0.009503, -0.731966, 0, 1.0};
Point(136) = {0.004837, -0.731868, 0, 1.0};
Point(137) = {-0.000200, -0.731927, 0, 1.0};
Point(138) = {-0.005604, -0.732063, 0, 1.0};
Point(139) = {-0.011340, -0.732235, 0, 1.0};
Point(140) = {-0.017364, -0.732412, 0, 1.0};
Point(141) = {-0.023633, -0.732563, 0, 1.0};
Point(142) = {-0.030097, -0.732669, 0, 1.0};
Point(143) = {-0.036701, -0.732699, 0, 1.0};
Point(144) = {-0.043385, -0.732640, 0, 1.0};
Point(145) = {-0.050089, -0.732472, 0, 1.0};
Point(146) = {-0.056754, -0.732188, 0, 1.0};
Point(147) = {-0.060100, -0.731994, 0, 1.0};
Point(148) = {-0.071339, -0.731231, 0, 1.0};
Point(149) = {-0.078066, -0.730644, 0, 1.0};
Point(150) = {-0.080304, -0.730392, 0, 1.0};
Point(151) = {-0.082535, -0.730076, 0, 1.0};
Point(152) = {-0.084756, -0.729697, 0, 1.0};
Point(153) = {-0.086965, -0.729252, 0, 1.0};
Point(154) = {-0.093461, -0.727696, 0, 1.0};
Point(155) = {-0.104231, -0.724313, 0, 1.0};
Point(156) = {-0.106909, -0.723224, 0, 1.0};
Point(157) = {-0.108982, -0.722205, 0, 1.0};
Point(158) = {-0.110353, -0.721428, 0, 1.0};
Point(159) = {-0.111119, -0.720970, 0, 1.0};
Point(160) = {-0.111362, -0.720823, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html