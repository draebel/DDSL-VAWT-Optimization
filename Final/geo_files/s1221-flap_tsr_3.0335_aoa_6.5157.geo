SetFactory("OpenCASCADE");

Point(1) = {0.111437, 0.720855, 0, 1.0};
Point(2) = {0.111204, 0.721008, 0, 1.0};
Point(3) = {0.110570, 0.721465, 0, 1.0};
Point(4) = {0.109622, 0.722141, 0, 1.0};
Point(5) = {0.108360, 0.722921, 0, 1.0};
Point(6) = {0.106707, 0.723756, 0, 1.0};
Point(7) = {0.104637, 0.724674, 0, 1.0};
Point(8) = {0.103915, 0.724975, 0, 1.0};
Point(9) = {0.093421, 0.728997, 0, 1.0};
Point(10) = {0.088113, 0.730850, 0, 1.0};
Point(11) = {0.085962, 0.731560, 0, 1.0};
Point(12) = {0.083800, 0.732231, 0, 1.0};
Point(13) = {0.081625, 0.732853, 0, 1.0};
Point(14) = {0.079434, 0.733423, 0, 1.0};
Point(15) = {0.071744, 0.735285, 0, 1.0};
Point(16) = {0.060825, 0.737921, 0, 1.0};
Point(17) = {0.059515, 0.738242, 0, 1.0};
Point(18) = {0.054047, 0.739558, 0, 1.0};
Point(19) = {0.048496, 0.740855, 0, 1.0};
Point(20) = {0.042893, 0.742129, 0, 1.0};
Point(21) = {0.037283, 0.743370, 0, 1.0};
Point(22) = {0.031709, 0.744570, 0, 1.0};
Point(23) = {0.026219, 0.745716, 0, 1.0};
Point(24) = {0.020858, 0.746779, 0, 1.0};
Point(25) = {0.015664, 0.747734, 0, 1.0};
Point(26) = {0.010660, 0.748553, 0, 1.0};
Point(27) = {0.005865, 0.749211, 0, 1.0};
Point(28) = {0.001305, 0.749699, 0, 1.0};
Point(29) = {-0.003006, 0.749966, 0, 1.0};
Point(30) = {-0.007091, 0.750000, 0, 1.0};
Point(31) = {-0.010966, 0.749824, 0, 1.0};
Point(32) = {-0.014632, 0.749453, 0, 1.0};
Point(33) = {-0.018083, 0.748918, 0, 1.0};
Point(34) = {-0.021297, 0.748244, 0, 1.0};
Point(35) = {-0.024255, 0.747453, 0, 1.0};
Point(36) = {-0.026942, 0.746553, 0, 1.0};
Point(37) = {-0.029344, 0.745567, 0, 1.0};
Point(38) = {-0.031451, 0.744513, 0, 1.0};
Point(39) = {-0.033246, 0.743414, 0, 1.0};
Point(40) = {-0.034716, 0.742292, 0, 1.0};
Point(41) = {-0.035838, 0.741155, 0, 1.0};
Point(42) = {-0.036626, 0.740013, 0, 1.0};
Point(43) = {-0.037102, 0.738909, 0, 1.0};
Point(44) = {-0.037258, 0.737915, 0, 1.0};
Point(45) = {-0.036992, 0.737150, 0, 1.0};
Point(46) = {-0.036175, 0.736540, 0, 1.0};
Point(47) = {-0.034813, 0.735924, 0, 1.0};
Point(48) = {-0.032984, 0.735316, 0, 1.0};
Point(49) = {-0.030712, 0.734721, 0, 1.0};
Point(50) = {-0.028029, 0.734147, 0, 1.0};
Point(51) = {-0.024953, 0.733601, 0, 1.0};
Point(52) = {-0.021515, 0.733096, 0, 1.0};
Point(53) = {-0.017739, 0.732644, 0, 1.0};
Point(54) = {-0.013655, 0.732262, 0, 1.0};
Point(55) = {-0.009298, 0.731986, 0, 1.0};
Point(56) = {-0.004637, 0.731888, 0, 1.0};
Point(57) = {0.000395, 0.731947, 0, 1.0};
Point(58) = {0.005793, 0.732083, 0, 1.0};
Point(59) = {0.011522, 0.732255, 0, 1.0};
Point(60) = {0.017540, 0.732432, 0, 1.0};
Point(61) = {0.023802, 0.732582, 0, 1.0};
Point(62) = {0.030258, 0.732688, 0, 1.0};
Point(63) = {0.036855, 0.732718, 0, 1.0};
Point(64) = {0.043532, 0.732659, 0, 1.0};
Point(65) = {0.050228, 0.732491, 0, 1.0};
Point(66) = {0.056886, 0.732207, 0, 1.0};
Point(67) = {0.060228, 0.732014, 0, 1.0};
Point(68) = {0.071455, 0.731252, 0, 1.0};
Point(69) = {0.078174, 0.730665, 0, 1.0};
Point(70) = {0.080411, 0.730413, 0, 1.0};
Point(71) = {0.082638, 0.730098, 0, 1.0};
Point(72) = {0.084857, 0.729720, 0, 1.0};
Point(73) = {0.087064, 0.729275, 0, 1.0};
Point(74) = {0.093552, 0.727721, 0, 1.0};
Point(75) = {0.104311, 0.724341, 0, 1.0};
Point(76) = {0.106986, 0.723253, 0, 1.0};
Point(77) = {0.109057, 0.722236, 0, 1.0};
Point(78) = {0.110426, 0.721459, 0, 1.0};
Point(79) = {0.111191, 0.721002, 0, 1.0};
Point(80) = {0.111434, 0.720856, 0, 1.0};
Point(81) = {-0.111437, -0.720855, 0, 1.0};
Point(82) = {-0.111204, -0.721008, 0, 1.0};
Point(83) = {-0.110570, -0.721465, 0, 1.0};
Point(84) = {-0.109622, -0.722141, 0, 1.0};
Point(85) = {-0.108360, -0.722921, 0, 1.0};
Point(86) = {-0.106707, -0.723756, 0, 1.0};
Point(87) = {-0.104637, -0.724674, 0, 1.0};
Point(88) = {-0.103915, -0.724975, 0, 1.0};
Point(89) = {-0.093421, -0.728997, 0, 1.0};
Point(90) = {-0.088113, -0.730850, 0, 1.0};
Point(91) = {-0.085962, -0.731560, 0, 1.0};
Point(92) = {-0.083800, -0.732231, 0, 1.0};
Point(93) = {-0.081625, -0.732853, 0, 1.0};
Point(94) = {-0.079434, -0.733423, 0, 1.0};
Point(95) = {-0.071744, -0.735285, 0, 1.0};
Point(96) = {-0.060825, -0.737921, 0, 1.0};
Point(97) = {-0.059515, -0.738242, 0, 1.0};
Point(98) = {-0.054047, -0.739558, 0, 1.0};
Point(99) = {-0.048496, -0.740855, 0, 1.0};
Point(100) = {-0.042893, -0.742129, 0, 1.0};
Point(101) = {-0.037283, -0.743370, 0, 1.0};
Point(102) = {-0.031709, -0.744570, 0, 1.0};
Point(103) = {-0.026219, -0.745716, 0, 1.0};
Point(104) = {-0.020858, -0.746779, 0, 1.0};
Point(105) = {-0.015664, -0.747734, 0, 1.0};
Point(106) = {-0.010660, -0.748553, 0, 1.0};
Point(107) = {-0.005865, -0.749211, 0, 1.0};
Point(108) = {-0.001305, -0.749699, 0, 1.0};
Point(109) = {0.003006, -0.749966, 0, 1.0};
Point(110) = {0.007091, -0.750000, 0, 1.0};
Point(111) = {0.010966, -0.749824, 0, 1.0};
Point(112) = {0.014632, -0.749453, 0, 1.0};
Point(113) = {0.018083, -0.748918, 0, 1.0};
Point(114) = {0.021297, -0.748244, 0, 1.0};
Point(115) = {0.024255, -0.747453, 0, 1.0};
Point(116) = {0.026942, -0.746553, 0, 1.0};
Point(117) = {0.029344, -0.745567, 0, 1.0};
Point(118) = {0.031451, -0.744513, 0, 1.0};
Point(119) = {0.033246, -0.743414, 0, 1.0};
Point(120) = {0.034716, -0.742292, 0, 1.0};
Point(121) = {0.035838, -0.741155, 0, 1.0};
Point(122) = {0.036626, -0.740013, 0, 1.0};
Point(123) = {0.037102, -0.738909, 0, 1.0};
Point(124) = {0.037258, -0.737915, 0, 1.0};
Point(125) = {0.036992, -0.737150, 0, 1.0};
Point(126) = {0.036175, -0.736540, 0, 1.0};
Point(127) = {0.034813, -0.735924, 0, 1.0};
Point(128) = {0.032984, -0.735316, 0, 1.0};
Point(129) = {0.030712, -0.734721, 0, 1.0};
Point(130) = {0.028029, -0.734147, 0, 1.0};
Point(131) = {0.024953, -0.733601, 0, 1.0};
Point(132) = {0.021515, -0.733096, 0, 1.0};
Point(133) = {0.017739, -0.732644, 0, 1.0};
Point(134) = {0.013655, -0.732262, 0, 1.0};
Point(135) = {0.009298, -0.731986, 0, 1.0};
Point(136) = {0.004637, -0.731888, 0, 1.0};
Point(137) = {-0.000395, -0.731947, 0, 1.0};
Point(138) = {-0.005793, -0.732083, 0, 1.0};
Point(139) = {-0.011522, -0.732255, 0, 1.0};
Point(140) = {-0.017540, -0.732432, 0, 1.0};
Point(141) = {-0.023802, -0.732582, 0, 1.0};
Point(142) = {-0.030258, -0.732688, 0, 1.0};
Point(143) = {-0.036855, -0.732718, 0, 1.0};
Point(144) = {-0.043532, -0.732659, 0, 1.0};
Point(145) = {-0.050228, -0.732491, 0, 1.0};
Point(146) = {-0.056886, -0.732207, 0, 1.0};
Point(147) = {-0.060228, -0.732014, 0, 1.0};
Point(148) = {-0.071455, -0.731252, 0, 1.0};
Point(149) = {-0.078174, -0.730665, 0, 1.0};
Point(150) = {-0.080411, -0.730413, 0, 1.0};
Point(151) = {-0.082638, -0.730098, 0, 1.0};
Point(152) = {-0.084857, -0.729720, 0, 1.0};
Point(153) = {-0.087064, -0.729275, 0, 1.0};
Point(154) = {-0.093552, -0.727721, 0, 1.0};
Point(155) = {-0.104311, -0.724341, 0, 1.0};
Point(156) = {-0.106986, -0.723253, 0, 1.0};
Point(157) = {-0.109057, -0.722236, 0, 1.0};
Point(158) = {-0.110426, -0.721459, 0, 1.0};
Point(159) = {-0.111191, -0.721002, 0, 1.0};
Point(160) = {-0.111434, -0.720856, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:57};
Spline(3) = {57:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:137};
Spline(7) = {137:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html