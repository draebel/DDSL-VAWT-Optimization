SetFactory("OpenCASCADE");

Point(1) = {0.074886, 0.744977, 0, 1.0};
Point(2) = {0.074454, 0.745043, 0, 1.0};
Point(3) = {0.073167, 0.745239, 0, 1.0};
Point(4) = {0.071047, 0.745559, 0, 1.0};
Point(5) = {0.068130, 0.745997, 0, 1.0};
Point(6) = {0.064467, 0.746536, 0, 1.0};
Point(7) = {0.060120, 0.747148, 0, 1.0};
Point(8) = {0.055166, 0.747791, 0, 1.0};
Point(9) = {0.049692, 0.748419, 0, 1.0};
Point(10) = {0.043792, 0.748986, 0, 1.0};
Point(11) = {0.037570, 0.749453, 0, 1.0};
Point(12) = {0.031131, 0.749792, 0, 1.0};
Point(13) = {0.024589, 0.749979, 0, 1.0};
Point(14) = {0.018054, 0.750000, 0, 1.0};
Point(15) = {0.011640, 0.749838, 0, 1.0};
Point(16) = {0.008513, 0.749684, 0, 1.0};
Point(17) = {0.005457, 0.749481, 0, 1.0};
Point(18) = {0.002486, 0.749228, 0, 1.0};
Point(19) = {-0.000389, 0.748925, 0, 1.0};
Point(20) = {-0.003155, 0.748575, 0, 1.0};
Point(21) = {-0.005798, 0.748181, 0, 1.0};
Point(22) = {-0.008309, 0.747745, 0, 1.0};
Point(23) = {-0.010677, 0.747271, 0, 1.0};
Point(24) = {-0.012892, 0.746763, 0, 1.0};
Point(25) = {-0.014945, 0.746228, 0, 1.0};
Point(26) = {-0.016825, 0.745670, 0, 1.0};
Point(27) = {-0.018528, 0.745094, 0, 1.0};
Point(28) = {-0.020044, 0.744501, 0, 1.0};
Point(29) = {-0.021367, 0.743890, 0, 1.0};
Point(30) = {-0.022490, 0.743255, 0, 1.0};
Point(31) = {-0.023409, 0.742605, 0, 1.0};
Point(32) = {-0.024122, 0.741954, 0, 1.0};
Point(33) = {-0.024626, 0.741337, 0, 1.0};
Point(34) = {-0.024921, 0.740788, 0, 1.0};
Point(35) = {-0.025007, 0.740337, 0, 1.0};
Point(36) = {-0.024883, 0.739984, 0, 1.0};
Point(37) = {-0.024548, 0.739713, 0, 1.0};
Point(38) = {-0.024004, 0.739491, 0, 1.0};
Point(39) = {-0.023251, 0.739287, 0, 1.0};
Point(40) = {-0.022291, 0.739088, 0, 1.0};
Point(41) = {-0.021127, 0.738897, 0, 1.0};
Point(42) = {-0.019768, 0.738725, 0, 1.0};
Point(43) = {-0.018216, 0.738585, 0, 1.0};
Point(44) = {-0.016482, 0.738485, 0, 1.0};
Point(45) = {-0.014572, 0.738427, 0, 1.0};
Point(46) = {-0.012492, 0.738410, 0, 1.0};
Point(47) = {-0.010254, 0.738434, 0, 1.0};
Point(48) = {-0.007866, 0.738502, 0, 1.0};
Point(49) = {-0.005340, 0.738615, 0, 1.0};
Point(50) = {-0.002686, 0.738777, 0, 1.0};
Point(51) = {0.000086, 0.738991, 0, 1.0};
Point(52) = {0.002963, 0.739258, 0, 1.0};
Point(53) = {0.005931, 0.739577, 0, 1.0};
Point(54) = {0.008979, 0.739946, 0, 1.0};
Point(55) = {0.012094, 0.740352, 0, 1.0};
Point(56) = {0.018473, 0.741246, 0, 1.0};
Point(57) = {0.024962, 0.742182, 0, 1.0};
Point(58) = {0.031452, 0.743090, 0, 1.0};
Point(59) = {0.037835, 0.743906, 0, 1.0};
Point(60) = {0.044003, 0.744581, 0, 1.0};
Point(61) = {0.049852, 0.745085, 0, 1.0};
Point(62) = {0.055281, 0.745407, 0, 1.0};
Point(63) = {0.060196, 0.745556, 0, 1.0};
Point(64) = {0.064514, 0.745562, 0, 1.0};
Point(65) = {0.068156, 0.745464, 0, 1.0};
Point(66) = {0.071059, 0.745308, 0, 1.0};
Point(67) = {0.073172, 0.745145, 0, 1.0};
Point(68) = {0.074455, 0.745022, 0, 1.0};
Point(69) = {-0.074886, -0.744977, 0, 1.0};
Point(70) = {-0.074454, -0.745043, 0, 1.0};
Point(71) = {-0.073167, -0.745239, 0, 1.0};
Point(72) = {-0.071047, -0.745559, 0, 1.0};
Point(73) = {-0.068130, -0.745997, 0, 1.0};
Point(74) = {-0.064467, -0.746536, 0, 1.0};
Point(75) = {-0.060120, -0.747148, 0, 1.0};
Point(76) = {-0.055166, -0.747791, 0, 1.0};
Point(77) = {-0.049692, -0.748419, 0, 1.0};
Point(78) = {-0.043792, -0.748986, 0, 1.0};
Point(79) = {-0.037570, -0.749453, 0, 1.0};
Point(80) = {-0.031131, -0.749792, 0, 1.0};
Point(81) = {-0.024589, -0.749979, 0, 1.0};
Point(82) = {-0.018054, -0.750000, 0, 1.0};
Point(83) = {-0.011640, -0.749838, 0, 1.0};
Point(84) = {-0.008513, -0.749684, 0, 1.0};
Point(85) = {-0.005457, -0.749481, 0, 1.0};
Point(86) = {-0.002486, -0.749228, 0, 1.0};
Point(87) = {0.000389, -0.748925, 0, 1.0};
Point(88) = {0.003155, -0.748575, 0, 1.0};
Point(89) = {0.005798, -0.748181, 0, 1.0};
Point(90) = {0.008309, -0.747745, 0, 1.0};
Point(91) = {0.010677, -0.747271, 0, 1.0};
Point(92) = {0.012892, -0.746763, 0, 1.0};
Point(93) = {0.014945, -0.746228, 0, 1.0};
Point(94) = {0.016825, -0.745670, 0, 1.0};
Point(95) = {0.018528, -0.745094, 0, 1.0};
Point(96) = {0.020044, -0.744501, 0, 1.0};
Point(97) = {0.021367, -0.743890, 0, 1.0};
Point(98) = {0.022490, -0.743255, 0, 1.0};
Point(99) = {0.023409, -0.742605, 0, 1.0};
Point(100) = {0.024122, -0.741954, 0, 1.0};
Point(101) = {0.024626, -0.741337, 0, 1.0};
Point(102) = {0.024921, -0.740788, 0, 1.0};
Point(103) = {0.025007, -0.740337, 0, 1.0};
Point(104) = {0.024883, -0.739984, 0, 1.0};
Point(105) = {0.024548, -0.739713, 0, 1.0};
Point(106) = {0.024004, -0.739491, 0, 1.0};
Point(107) = {0.023251, -0.739287, 0, 1.0};
Point(108) = {0.022291, -0.739088, 0, 1.0};
Point(109) = {0.021127, -0.738897, 0, 1.0};
Point(110) = {0.019768, -0.738725, 0, 1.0};
Point(111) = {0.018216, -0.738585, 0, 1.0};
Point(112) = {0.016482, -0.738485, 0, 1.0};
Point(113) = {0.014572, -0.738427, 0, 1.0};
Point(114) = {0.012492, -0.738410, 0, 1.0};
Point(115) = {0.010254, -0.738434, 0, 1.0};
Point(116) = {0.007866, -0.738502, 0, 1.0};
Point(117) = {0.005340, -0.738615, 0, 1.0};
Point(118) = {0.002686, -0.738777, 0, 1.0};
Point(119) = {-0.000086, -0.738991, 0, 1.0};
Point(120) = {-0.002963, -0.739258, 0, 1.0};
Point(121) = {-0.005931, -0.739577, 0, 1.0};
Point(122) = {-0.008979, -0.739946, 0, 1.0};
Point(123) = {-0.012094, -0.740352, 0, 1.0};
Point(124) = {-0.018473, -0.741246, 0, 1.0};
Point(125) = {-0.024962, -0.742182, 0, 1.0};
Point(126) = {-0.031452, -0.743090, 0, 1.0};
Point(127) = {-0.037835, -0.743906, 0, 1.0};
Point(128) = {-0.044003, -0.744581, 0, 1.0};
Point(129) = {-0.049852, -0.745085, 0, 1.0};
Point(130) = {-0.055281, -0.745407, 0, 1.0};
Point(131) = {-0.060196, -0.745556, 0, 1.0};
Point(132) = {-0.064514, -0.745562, 0, 1.0};
Point(133) = {-0.068156, -0.745464, 0, 1.0};
Point(134) = {-0.071059, -0.745308, 0, 1.0};
Point(135) = {-0.073172, -0.745145, 0, 1.0};
Point(136) = {-0.074455, -0.745022, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:52};
Spline(3) = {52:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:86};
Spline(6) = {86:120};
Spline(7) = {120:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html