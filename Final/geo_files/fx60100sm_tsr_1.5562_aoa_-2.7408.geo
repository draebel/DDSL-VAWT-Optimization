SetFactory("OpenCASCADE");

Point(1) = {0.112381, 0.742465, 0, 1.0};
Point(2) = {0.111734, 0.742565, 0, 1.0};
Point(3) = {0.109804, 0.742858, 0, 1.0};
Point(4) = {0.106624, 0.743338, 0, 1.0};
Point(5) = {0.102248, 0.743995, 0, 1.0};
Point(6) = {0.096754, 0.744805, 0, 1.0};
Point(7) = {0.090233, 0.745722, 0, 1.0};
Point(8) = {0.082803, 0.746687, 0, 1.0};
Point(9) = {0.074591, 0.747629, 0, 1.0};
Point(10) = {0.065742, 0.748478, 0, 1.0};
Point(11) = {0.056408, 0.749179, 0, 1.0};
Point(12) = {0.046750, 0.749688, 0, 1.0};
Point(13) = {0.036936, 0.749969, 0, 1.0};
Point(14) = {0.027135, 0.750000, 0, 1.0};
Point(15) = {0.017513, 0.749757, 0, 1.0};
Point(16) = {0.012822, 0.749527, 0, 1.0};
Point(17) = {0.008238, 0.749222, 0, 1.0};
Point(18) = {0.003781, 0.748841, 0, 1.0};
Point(19) = {-0.000531, 0.748387, 0, 1.0};
Point(20) = {-0.004679, 0.747863, 0, 1.0};
Point(21) = {-0.008644, 0.747272, 0, 1.0};
Point(22) = {-0.012410, 0.746617, 0, 1.0};
Point(23) = {-0.015962, 0.745906, 0, 1.0};
Point(24) = {-0.019285, 0.745145, 0, 1.0};
Point(25) = {-0.022364, 0.744342, 0, 1.0};
Point(26) = {-0.025185, 0.743505, 0, 1.0};
Point(27) = {-0.027739, 0.742641, 0, 1.0};
Point(28) = {-0.030013, 0.741751, 0, 1.0};
Point(29) = {-0.031997, 0.740835, 0, 1.0};
Point(30) = {-0.033683, 0.739883, 0, 1.0};
Point(31) = {-0.035061, 0.738907, 0, 1.0};
Point(32) = {-0.036130, 0.737931, 0, 1.0};
Point(33) = {-0.036886, 0.737006, 0, 1.0};
Point(34) = {-0.037329, 0.736183, 0, 1.0};
Point(35) = {-0.037457, 0.735505, 0, 1.0};
Point(36) = {-0.037271, 0.734977, 0, 1.0};
Point(37) = {-0.036770, 0.734570, 0, 1.0};
Point(38) = {-0.035953, 0.734236, 0, 1.0};
Point(39) = {-0.034823, 0.733930, 0, 1.0};
Point(40) = {-0.033383, 0.733632, 0, 1.0};
Point(41) = {-0.031638, 0.733345, 0, 1.0};
Point(42) = {-0.029598, 0.733087, 0, 1.0};
Point(43) = {-0.027271, 0.732877, 0, 1.0};
Point(44) = {-0.024669, 0.732728, 0, 1.0};
Point(45) = {-0.021804, 0.732640, 0, 1.0};
Point(46) = {-0.018685, 0.732615, 0, 1.0};
Point(47) = {-0.015328, 0.732651, 0, 1.0};
Point(48) = {-0.011747, 0.732754, 0, 1.0};
Point(49) = {-0.007957, 0.732923, 0, 1.0};
Point(50) = {-0.003975, 0.733166, 0, 1.0};
Point(51) = {0.000182, 0.733487, 0, 1.0};
Point(52) = {0.004497, 0.733887, 0, 1.0};
Point(53) = {0.008949, 0.734366, 0, 1.0};
Point(54) = {0.013521, 0.734918, 0, 1.0};
Point(55) = {0.018194, 0.735528, 0, 1.0};
Point(56) = {0.027763, 0.736869, 0, 1.0};
Point(57) = {0.037496, 0.738274, 0, 1.0};
Point(58) = {0.047231, 0.739635, 0, 1.0};
Point(59) = {0.056806, 0.740859, 0, 1.0};
Point(60) = {0.066058, 0.741871, 0, 1.0};
Point(61) = {0.074831, 0.742627, 0, 1.0};
Point(62) = {0.082974, 0.743110, 0, 1.0};
Point(63) = {0.090347, 0.743334, 0, 1.0};
Point(64) = {0.096824, 0.743342, 0, 1.0};
Point(65) = {0.102287, 0.743195, 0, 1.0};
Point(66) = {0.106642, 0.742962, 0, 1.0};
Point(67) = {0.109810, 0.742718, 0, 1.0};
Point(68) = {0.111735, 0.742533, 0, 1.0};
Point(69) = {-0.112381, -0.742465, 0, 1.0};
Point(70) = {-0.111734, -0.742565, 0, 1.0};
Point(71) = {-0.109804, -0.742858, 0, 1.0};
Point(72) = {-0.106624, -0.743338, 0, 1.0};
Point(73) = {-0.102248, -0.743995, 0, 1.0};
Point(74) = {-0.096754, -0.744805, 0, 1.0};
Point(75) = {-0.090233, -0.745722, 0, 1.0};
Point(76) = {-0.082803, -0.746687, 0, 1.0};
Point(77) = {-0.074591, -0.747629, 0, 1.0};
Point(78) = {-0.065742, -0.748478, 0, 1.0};
Point(79) = {-0.056408, -0.749179, 0, 1.0};
Point(80) = {-0.046750, -0.749688, 0, 1.0};
Point(81) = {-0.036936, -0.749969, 0, 1.0};
Point(82) = {-0.027135, -0.750000, 0, 1.0};
Point(83) = {-0.017513, -0.749757, 0, 1.0};
Point(84) = {-0.012822, -0.749527, 0, 1.0};
Point(85) = {-0.008238, -0.749222, 0, 1.0};
Point(86) = {-0.003781, -0.748841, 0, 1.0};
Point(87) = {0.000531, -0.748387, 0, 1.0};
Point(88) = {0.004679, -0.747863, 0, 1.0};
Point(89) = {0.008644, -0.747272, 0, 1.0};
Point(90) = {0.012410, -0.746617, 0, 1.0};
Point(91) = {0.015962, -0.745906, 0, 1.0};
Point(92) = {0.019285, -0.745145, 0, 1.0};
Point(93) = {0.022364, -0.744342, 0, 1.0};
Point(94) = {0.025185, -0.743505, 0, 1.0};
Point(95) = {0.027739, -0.742641, 0, 1.0};
Point(96) = {0.030013, -0.741751, 0, 1.0};
Point(97) = {0.031997, -0.740835, 0, 1.0};
Point(98) = {0.033683, -0.739883, 0, 1.0};
Point(99) = {0.035061, -0.738907, 0, 1.0};
Point(100) = {0.036130, -0.737931, 0, 1.0};
Point(101) = {0.036886, -0.737006, 0, 1.0};
Point(102) = {0.037329, -0.736183, 0, 1.0};
Point(103) = {0.037457, -0.735505, 0, 1.0};
Point(104) = {0.037271, -0.734977, 0, 1.0};
Point(105) = {0.036770, -0.734570, 0, 1.0};
Point(106) = {0.035953, -0.734236, 0, 1.0};
Point(107) = {0.034823, -0.733930, 0, 1.0};
Point(108) = {0.033383, -0.733632, 0, 1.0};
Point(109) = {0.031638, -0.733345, 0, 1.0};
Point(110) = {0.029598, -0.733087, 0, 1.0};
Point(111) = {0.027271, -0.732877, 0, 1.0};
Point(112) = {0.024669, -0.732728, 0, 1.0};
Point(113) = {0.021804, -0.732640, 0, 1.0};
Point(114) = {0.018685, -0.732615, 0, 1.0};
Point(115) = {0.015328, -0.732651, 0, 1.0};
Point(116) = {0.011747, -0.732754, 0, 1.0};
Point(117) = {0.007957, -0.732923, 0, 1.0};
Point(118) = {0.003975, -0.733166, 0, 1.0};
Point(119) = {-0.000182, -0.733487, 0, 1.0};
Point(120) = {-0.004497, -0.733887, 0, 1.0};
Point(121) = {-0.008949, -0.734366, 0, 1.0};
Point(122) = {-0.013521, -0.734918, 0, 1.0};
Point(123) = {-0.018194, -0.735528, 0, 1.0};
Point(124) = {-0.027763, -0.736869, 0, 1.0};
Point(125) = {-0.037496, -0.738274, 0, 1.0};
Point(126) = {-0.047231, -0.739635, 0, 1.0};
Point(127) = {-0.056806, -0.740859, 0, 1.0};
Point(128) = {-0.066058, -0.741871, 0, 1.0};
Point(129) = {-0.074831, -0.742627, 0, 1.0};
Point(130) = {-0.082974, -0.743110, 0, 1.0};
Point(131) = {-0.090347, -0.743334, 0, 1.0};
Point(132) = {-0.096824, -0.743342, 0, 1.0};
Point(133) = {-0.102287, -0.743195, 0, 1.0};
Point(134) = {-0.106642, -0.742962, 0, 1.0};
Point(135) = {-0.109810, -0.742718, 0, 1.0};
Point(136) = {-0.111735, -0.742533, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:52};
Spline(3) = {52:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:86};
Spline(6) = {86:120};
Spline(7) = {120:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html