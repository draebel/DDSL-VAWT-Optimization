SetFactory("OpenCASCADE");

Point(1) = {0.111690, 0.722225, 0, 1.0};
Point(2) = {0.111382, 0.722334, 0, 1.0};
Point(3) = {0.110509, 0.722677, 0, 1.0};
Point(4) = {0.109142, 0.723246, 0, 1.0};
Point(5) = {0.107336, 0.724015, 0, 1.0};
Point(6) = {0.105128, 0.724938, 0, 1.0};
Point(7) = {0.102524, 0.725975, 0, 1.0};
Point(8) = {0.099521, 0.727113, 0, 1.0};
Point(9) = {0.096138, 0.728358, 0, 1.0};
Point(10) = {0.092410, 0.729706, 0, 1.0};
Point(11) = {0.088373, 0.731141, 0, 1.0};
Point(12) = {0.084060, 0.732645, 0, 1.0};
Point(13) = {0.079510, 0.734204, 0, 1.0};
Point(14) = {0.074760, 0.735790, 0, 1.0};
Point(15) = {0.069846, 0.737375, 0, 1.0};
Point(16) = {0.064787, 0.738931, 0, 1.0};
Point(17) = {0.059604, 0.740447, 0, 1.0};
Point(18) = {0.054333, 0.741898, 0, 1.0};
Point(19) = {0.048999, 0.743270, 0, 1.0};
Point(20) = {0.043628, 0.744552, 0, 1.0};
Point(21) = {0.038249, 0.745722, 0, 1.0};
Point(22) = {0.032884, 0.746770, 0, 1.0};
Point(23) = {0.027565, 0.747685, 0, 1.0};
Point(24) = {0.022312, 0.748455, 0, 1.0};
Point(25) = {0.017142, 0.749078, 0, 1.0};
Point(26) = {0.012089, 0.749544, 0, 1.0};
Point(27) = {0.007166, 0.749849, 0, 1.0};
Point(28) = {0.002397, 0.750000, 0, 1.0};
Point(29) = {-0.002200, 0.749993, 0, 1.0};
Point(30) = {-0.006612, 0.749834, 0, 1.0};
Point(31) = {-0.010817, 0.749542, 0, 1.0};
Point(32) = {-0.014787, 0.749128, 0, 1.0};
Point(33) = {-0.018500, 0.748603, 0, 1.0};
Point(34) = {-0.021931, 0.747974, 0, 1.0};
Point(35) = {-0.025059, 0.747252, 0, 1.0};
Point(36) = {-0.027865, 0.746448, 0, 1.0};
Point(37) = {-0.030329, 0.745567, 0, 1.0};
Point(38) = {-0.032441, 0.744627, 0, 1.0};
Point(39) = {-0.034178, 0.743642, 0, 1.0};
Point(40) = {-0.035525, 0.742617, 0, 1.0};
Point(41) = {-0.036482, 0.741560, 0, 1.0};
Point(42) = {-0.037048, 0.740475, 0, 1.0};
Point(43) = {-0.037241, 0.739415, 0, 1.0};
Point(44) = {-0.036959, 0.738452, 0, 1.0};
Point(45) = {-0.036140, 0.737500, 0, 1.0};
Point(46) = {-0.034866, 0.736484, 0, 1.0};
Point(47) = {-0.033180, 0.735444, 0, 1.0};
Point(48) = {-0.031104, 0.734409, 0, 1.0};
Point(49) = {-0.028625, 0.733417, 0, 1.0};
Point(50) = {-0.025731, 0.732464, 0, 1.0};
Point(51) = {-0.022440, 0.731524, 0, 1.0};
Point(52) = {-0.018784, 0.730607, 0, 1.0};
Point(53) = {-0.014789, 0.729712, 0, 1.0};
Point(54) = {-0.010483, 0.728849, 0, 1.0};
Point(55) = {-0.005895, 0.728021, 0, 1.0};
Point(56) = {-0.001056, 0.727235, 0, 1.0};
Point(57) = {0.004000, 0.726500, 0, 1.0};
Point(58) = {0.009242, 0.725824, 0, 1.0};
Point(59) = {0.014631, 0.725216, 0, 1.0};
Point(60) = {0.020137, 0.724694, 0, 1.0};
Point(61) = {0.025733, 0.724270, 0, 1.0};
Point(62) = {0.031397, 0.723961, 0, 1.0};
Point(63) = {0.037097, 0.723788, 0, 1.0};
Point(64) = {0.042860, 0.723761, 0, 1.0};
Point(65) = {0.048706, 0.723833, 0, 1.0};
Point(66) = {0.054587, 0.723953, 0, 1.0};
Point(67) = {0.060456, 0.724092, 0, 1.0};
Point(68) = {0.066266, 0.724223, 0, 1.0};
Point(69) = {0.071961, 0.724324, 0, 1.0};
Point(70) = {0.077487, 0.724378, 0, 1.0};
Point(71) = {0.082785, 0.724371, 0, 1.0};
Point(72) = {0.087798, 0.724297, 0, 1.0};
Point(73) = {0.092468, 0.724152, 0, 1.0};
Point(74) = {0.096736, 0.723942, 0, 1.0};
Point(75) = {0.100553, 0.723677, 0, 1.0};
Point(76) = {0.103865, 0.723373, 0, 1.0};
Point(77) = {0.106634, 0.723055, 0, 1.0};
Point(78) = {0.108827, 0.722748, 0, 1.0};
Point(79) = {0.110409, 0.722482, 0, 1.0};
Point(80) = {0.111369, 0.722296, 0, 1.0};
Point(81) = {-0.111690, -0.722225, 0, 1.0};
Point(82) = {-0.111382, -0.722334, 0, 1.0};
Point(83) = {-0.110509, -0.722677, 0, 1.0};
Point(84) = {-0.109142, -0.723246, 0, 1.0};
Point(85) = {-0.107336, -0.724015, 0, 1.0};
Point(86) = {-0.105128, -0.724938, 0, 1.0};
Point(87) = {-0.102524, -0.725975, 0, 1.0};
Point(88) = {-0.099521, -0.727113, 0, 1.0};
Point(89) = {-0.096138, -0.728358, 0, 1.0};
Point(90) = {-0.092410, -0.729706, 0, 1.0};
Point(91) = {-0.088373, -0.731141, 0, 1.0};
Point(92) = {-0.084060, -0.732645, 0, 1.0};
Point(93) = {-0.079510, -0.734204, 0, 1.0};
Point(94) = {-0.074760, -0.735790, 0, 1.0};
Point(95) = {-0.069846, -0.737375, 0, 1.0};
Point(96) = {-0.064787, -0.738931, 0, 1.0};
Point(97) = {-0.059604, -0.740447, 0, 1.0};
Point(98) = {-0.054333, -0.741898, 0, 1.0};
Point(99) = {-0.048999, -0.743270, 0, 1.0};
Point(100) = {-0.043628, -0.744552, 0, 1.0};
Point(101) = {-0.038249, -0.745722, 0, 1.0};
Point(102) = {-0.032884, -0.746770, 0, 1.0};
Point(103) = {-0.027565, -0.747685, 0, 1.0};
Point(104) = {-0.022312, -0.748455, 0, 1.0};
Point(105) = {-0.017142, -0.749078, 0, 1.0};
Point(106) = {-0.012089, -0.749544, 0, 1.0};
Point(107) = {-0.007166, -0.749849, 0, 1.0};
Point(108) = {-0.002397, -0.750000, 0, 1.0};
Point(109) = {0.002200, -0.749993, 0, 1.0};
Point(110) = {0.006612, -0.749834, 0, 1.0};
Point(111) = {0.010817, -0.749542, 0, 1.0};
Point(112) = {0.014787, -0.749128, 0, 1.0};
Point(113) = {0.018500, -0.748603, 0, 1.0};
Point(114) = {0.021931, -0.747974, 0, 1.0};
Point(115) = {0.025059, -0.747252, 0, 1.0};
Point(116) = {0.027865, -0.746448, 0, 1.0};
Point(117) = {0.030329, -0.745567, 0, 1.0};
Point(118) = {0.032441, -0.744627, 0, 1.0};
Point(119) = {0.034178, -0.743642, 0, 1.0};
Point(120) = {0.035525, -0.742617, 0, 1.0};
Point(121) = {0.036482, -0.741560, 0, 1.0};
Point(122) = {0.037048, -0.740475, 0, 1.0};
Point(123) = {0.037241, -0.739415, 0, 1.0};
Point(124) = {0.036959, -0.738452, 0, 1.0};
Point(125) = {0.036140, -0.737500, 0, 1.0};
Point(126) = {0.034866, -0.736484, 0, 1.0};
Point(127) = {0.033180, -0.735444, 0, 1.0};
Point(128) = {0.031104, -0.734409, 0, 1.0};
Point(129) = {0.028625, -0.733417, 0, 1.0};
Point(130) = {0.025731, -0.732464, 0, 1.0};
Point(131) = {0.022440, -0.731524, 0, 1.0};
Point(132) = {0.018784, -0.730607, 0, 1.0};
Point(133) = {0.014789, -0.729712, 0, 1.0};
Point(134) = {0.010483, -0.728849, 0, 1.0};
Point(135) = {0.005895, -0.728021, 0, 1.0};
Point(136) = {0.001056, -0.727235, 0, 1.0};
Point(137) = {-0.004000, -0.726500, 0, 1.0};
Point(138) = {-0.009242, -0.725824, 0, 1.0};
Point(139) = {-0.014631, -0.725216, 0, 1.0};
Point(140) = {-0.020137, -0.724694, 0, 1.0};
Point(141) = {-0.025733, -0.724270, 0, 1.0};
Point(142) = {-0.031397, -0.723961, 0, 1.0};
Point(143) = {-0.037097, -0.723788, 0, 1.0};
Point(144) = {-0.042860, -0.723761, 0, 1.0};
Point(145) = {-0.048706, -0.723833, 0, 1.0};
Point(146) = {-0.054587, -0.723953, 0, 1.0};
Point(147) = {-0.060456, -0.724092, 0, 1.0};
Point(148) = {-0.066266, -0.724223, 0, 1.0};
Point(149) = {-0.071961, -0.724324, 0, 1.0};
Point(150) = {-0.077487, -0.724378, 0, 1.0};
Point(151) = {-0.082785, -0.724371, 0, 1.0};
Point(152) = {-0.087798, -0.724297, 0, 1.0};
Point(153) = {-0.092468, -0.724152, 0, 1.0};
Point(154) = {-0.096736, -0.723942, 0, 1.0};
Point(155) = {-0.100553, -0.723677, 0, 1.0};
Point(156) = {-0.103865, -0.723373, 0, 1.0};
Point(157) = {-0.106634, -0.723055, 0, 1.0};
Point(158) = {-0.108827, -0.722748, 0, 1.0};
Point(159) = {-0.110409, -0.722482, 0, 1.0};
Point(160) = {-0.111369, -0.722296, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html