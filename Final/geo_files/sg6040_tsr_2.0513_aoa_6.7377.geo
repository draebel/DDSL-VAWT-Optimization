SetFactory("OpenCASCADE");

Point(1) = {0.111464, 0.722218, 0, 1.0};
Point(2) = {0.111157, 0.722326, 0, 1.0};
Point(3) = {0.110283, 0.722670, 0, 1.0};
Point(4) = {0.108916, 0.723239, 0, 1.0};
Point(5) = {0.107110, 0.724008, 0, 1.0};
Point(6) = {0.104900, 0.724931, 0, 1.0};
Point(7) = {0.102296, 0.725968, 0, 1.0};
Point(8) = {0.099292, 0.727107, 0, 1.0};
Point(9) = {0.095908, 0.728353, 0, 1.0};
Point(10) = {0.092179, 0.729701, 0, 1.0};
Point(11) = {0.088141, 0.731136, 0, 1.0};
Point(12) = {0.083827, 0.732641, 0, 1.0};
Point(13) = {0.079275, 0.734199, 0, 1.0};
Point(14) = {0.074524, 0.735786, 0, 1.0};
Point(15) = {0.069609, 0.737371, 0, 1.0};
Point(16) = {0.064549, 0.738928, 0, 1.0};
Point(17) = {0.059364, 0.740444, 0, 1.0};
Point(18) = {0.054092, 0.741896, 0, 1.0};
Point(19) = {0.048756, 0.743268, 0, 1.0};
Point(20) = {0.043384, 0.744551, 0, 1.0};
Point(21) = {0.038003, 0.745721, 0, 1.0};
Point(22) = {0.032637, 0.746769, 0, 1.0};
Point(23) = {0.027316, 0.747684, 0, 1.0};
Point(24) = {0.022062, 0.748455, 0, 1.0};
Point(25) = {0.016891, 0.749078, 0, 1.0};
Point(26) = {0.011836, 0.749543, 0, 1.0};
Point(27) = {0.006912, 0.749849, 0, 1.0};
Point(28) = {0.002142, 0.750000, 0, 1.0};
Point(29) = {-0.002456, 0.749993, 0, 1.0};
Point(30) = {-0.006869, 0.749834, 0, 1.0};
Point(31) = {-0.011075, 0.749542, 0, 1.0};
Point(32) = {-0.015047, 0.749128, 0, 1.0};
Point(33) = {-0.018761, 0.748603, 0, 1.0};
Point(34) = {-0.022193, 0.747974, 0, 1.0};
Point(35) = {-0.025322, 0.747251, 0, 1.0};
Point(36) = {-0.028128, 0.746447, 0, 1.0};
Point(37) = {-0.030593, 0.745566, 0, 1.0};
Point(38) = {-0.032706, 0.744625, 0, 1.0};
Point(39) = {-0.034443, 0.743640, 0, 1.0};
Point(40) = {-0.035790, 0.742615, 0, 1.0};
Point(41) = {-0.036747, 0.741558, 0, 1.0};
Point(42) = {-0.037314, 0.740472, 0, 1.0};
Point(43) = {-0.037507, 0.739412, 0, 1.0};
Point(44) = {-0.037225, 0.738448, 0, 1.0};
Point(45) = {-0.036406, 0.737497, 0, 1.0};
Point(46) = {-0.035131, 0.736481, 0, 1.0};
Point(47) = {-0.033445, 0.735440, 0, 1.0};
Point(48) = {-0.031368, 0.734405, 0, 1.0};
Point(49) = {-0.028889, 0.733413, 0, 1.0};
Point(50) = {-0.025994, 0.732459, 0, 1.0};
Point(51) = {-0.022702, 0.731519, 0, 1.0};
Point(52) = {-0.019045, 0.730602, 0, 1.0};
Point(53) = {-0.015049, 0.729707, 0, 1.0};
Point(54) = {-0.010742, 0.728843, 0, 1.0};
Point(55) = {-0.006153, 0.728015, 0, 1.0};
Point(56) = {-0.001312, 0.727229, 0, 1.0};
Point(57) = {0.003745, 0.726494, 0, 1.0};
Point(58) = {0.008988, 0.725817, 0, 1.0};
Point(59) = {0.014380, 0.725209, 0, 1.0};
Point(60) = {0.019887, 0.724687, 0, 1.0};
Point(61) = {0.025484, 0.724263, 0, 1.0};
Point(62) = {0.031150, 0.723954, 0, 1.0};
Point(63) = {0.036851, 0.723781, 0, 1.0};
Point(64) = {0.042616, 0.723754, 0, 1.0};
Point(65) = {0.048464, 0.723826, 0, 1.0};
Point(66) = {0.054346, 0.723946, 0, 1.0};
Point(67) = {0.060217, 0.724085, 0, 1.0};
Point(68) = {0.066028, 0.724216, 0, 1.0};
Point(69) = {0.071725, 0.724317, 0, 1.0};
Point(70) = {0.077252, 0.724371, 0, 1.0};
Point(71) = {0.082551, 0.724365, 0, 1.0};
Point(72) = {0.087566, 0.724290, 0, 1.0};
Point(73) = {0.092237, 0.724145, 0, 1.0};
Point(74) = {0.096507, 0.723935, 0, 1.0};
Point(75) = {0.100324, 0.723670, 0, 1.0};
Point(76) = {0.103637, 0.723366, 0, 1.0};
Point(77) = {0.106407, 0.723048, 0, 1.0};
Point(78) = {0.108600, 0.722740, 0, 1.0};
Point(79) = {0.110183, 0.722475, 0, 1.0};
Point(80) = {0.111143, 0.722289, 0, 1.0};
Point(81) = {-0.111464, -0.722218, 0, 1.0};
Point(82) = {-0.111157, -0.722326, 0, 1.0};
Point(83) = {-0.110283, -0.722670, 0, 1.0};
Point(84) = {-0.108916, -0.723239, 0, 1.0};
Point(85) = {-0.107110, -0.724008, 0, 1.0};
Point(86) = {-0.104900, -0.724931, 0, 1.0};
Point(87) = {-0.102296, -0.725968, 0, 1.0};
Point(88) = {-0.099292, -0.727107, 0, 1.0};
Point(89) = {-0.095908, -0.728353, 0, 1.0};
Point(90) = {-0.092179, -0.729701, 0, 1.0};
Point(91) = {-0.088141, -0.731136, 0, 1.0};
Point(92) = {-0.083827, -0.732641, 0, 1.0};
Point(93) = {-0.079275, -0.734199, 0, 1.0};
Point(94) = {-0.074524, -0.735786, 0, 1.0};
Point(95) = {-0.069609, -0.737371, 0, 1.0};
Point(96) = {-0.064549, -0.738928, 0, 1.0};
Point(97) = {-0.059364, -0.740444, 0, 1.0};
Point(98) = {-0.054092, -0.741896, 0, 1.0};
Point(99) = {-0.048756, -0.743268, 0, 1.0};
Point(100) = {-0.043384, -0.744551, 0, 1.0};
Point(101) = {-0.038003, -0.745721, 0, 1.0};
Point(102) = {-0.032637, -0.746769, 0, 1.0};
Point(103) = {-0.027316, -0.747684, 0, 1.0};
Point(104) = {-0.022062, -0.748455, 0, 1.0};
Point(105) = {-0.016891, -0.749078, 0, 1.0};
Point(106) = {-0.011836, -0.749543, 0, 1.0};
Point(107) = {-0.006912, -0.749849, 0, 1.0};
Point(108) = {-0.002142, -0.750000, 0, 1.0};
Point(109) = {0.002456, -0.749993, 0, 1.0};
Point(110) = {0.006869, -0.749834, 0, 1.0};
Point(111) = {0.011075, -0.749542, 0, 1.0};
Point(112) = {0.015047, -0.749128, 0, 1.0};
Point(113) = {0.018761, -0.748603, 0, 1.0};
Point(114) = {0.022193, -0.747974, 0, 1.0};
Point(115) = {0.025322, -0.747251, 0, 1.0};
Point(116) = {0.028128, -0.746447, 0, 1.0};
Point(117) = {0.030593, -0.745566, 0, 1.0};
Point(118) = {0.032706, -0.744625, 0, 1.0};
Point(119) = {0.034443, -0.743640, 0, 1.0};
Point(120) = {0.035790, -0.742615, 0, 1.0};
Point(121) = {0.036747, -0.741558, 0, 1.0};
Point(122) = {0.037314, -0.740472, 0, 1.0};
Point(123) = {0.037507, -0.739412, 0, 1.0};
Point(124) = {0.037225, -0.738448, 0, 1.0};
Point(125) = {0.036406, -0.737497, 0, 1.0};
Point(126) = {0.035131, -0.736481, 0, 1.0};
Point(127) = {0.033445, -0.735440, 0, 1.0};
Point(128) = {0.031368, -0.734405, 0, 1.0};
Point(129) = {0.028889, -0.733413, 0, 1.0};
Point(130) = {0.025994, -0.732459, 0, 1.0};
Point(131) = {0.022702, -0.731519, 0, 1.0};
Point(132) = {0.019045, -0.730602, 0, 1.0};
Point(133) = {0.015049, -0.729707, 0, 1.0};
Point(134) = {0.010742, -0.728843, 0, 1.0};
Point(135) = {0.006153, -0.728015, 0, 1.0};
Point(136) = {0.001312, -0.727229, 0, 1.0};
Point(137) = {-0.003745, -0.726494, 0, 1.0};
Point(138) = {-0.008988, -0.725817, 0, 1.0};
Point(139) = {-0.014380, -0.725209, 0, 1.0};
Point(140) = {-0.019887, -0.724687, 0, 1.0};
Point(141) = {-0.025484, -0.724263, 0, 1.0};
Point(142) = {-0.031150, -0.723954, 0, 1.0};
Point(143) = {-0.036851, -0.723781, 0, 1.0};
Point(144) = {-0.042616, -0.723754, 0, 1.0};
Point(145) = {-0.048464, -0.723826, 0, 1.0};
Point(146) = {-0.054346, -0.723946, 0, 1.0};
Point(147) = {-0.060217, -0.724085, 0, 1.0};
Point(148) = {-0.066028, -0.724216, 0, 1.0};
Point(149) = {-0.071725, -0.724317, 0, 1.0};
Point(150) = {-0.077252, -0.724371, 0, 1.0};
Point(151) = {-0.082551, -0.724365, 0, 1.0};
Point(152) = {-0.087566, -0.724290, 0, 1.0};
Point(153) = {-0.092237, -0.724145, 0, 1.0};
Point(154) = {-0.096507, -0.723935, 0, 1.0};
Point(155) = {-0.100324, -0.723670, 0, 1.0};
Point(156) = {-0.103637, -0.723366, 0, 1.0};
Point(157) = {-0.106407, -0.723048, 0, 1.0};
Point(158) = {-0.108600, -0.722740, 0, 1.0};
Point(159) = {-0.110183, -0.722475, 0, 1.0};
Point(160) = {-0.111143, -0.722289, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html