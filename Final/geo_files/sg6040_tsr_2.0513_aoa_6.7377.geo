SetFactory("OpenCASCADE");

Point(1) = {0.074309, 0.731478, 0, 1.0};
Point(2) = {0.074104, 0.731551, 0, 1.0};
Point(3) = {0.073522, 0.731780, 0, 1.0};
Point(4) = {0.072611, 0.732159, 0, 1.0};
Point(5) = {0.071406, 0.732672, 0, 1.0};
Point(6) = {0.069933, 0.733287, 0, 1.0};
Point(7) = {0.068198, 0.733979, 0, 1.0};
Point(8) = {0.066195, 0.734738, 0, 1.0};
Point(9) = {0.063939, 0.735568, 0, 1.0};
Point(10) = {0.061453, 0.736467, 0, 1.0};
Point(11) = {0.058761, 0.737424, 0, 1.0};
Point(12) = {0.055884, 0.738427, 0, 1.0};
Point(13) = {0.052850, 0.739466, 0, 1.0};
Point(14) = {0.049683, 0.740524, 0, 1.0};
Point(15) = {0.046406, 0.741581, 0, 1.0};
Point(16) = {0.043032, 0.742619, 0, 1.0};
Point(17) = {0.039576, 0.743629, 0, 1.0};
Point(18) = {0.036061, 0.744597, 0, 1.0};
Point(19) = {0.032504, 0.745512, 0, 1.0};
Point(20) = {0.028923, 0.746367, 0, 1.0};
Point(21) = {0.025335, 0.747147, 0, 1.0};
Point(22) = {0.021758, 0.747846, 0, 1.0};
Point(23) = {0.018211, 0.748456, 0, 1.0};
Point(24) = {0.014708, 0.748970, 0, 1.0};
Point(25) = {0.011261, 0.749385, 0, 1.0};
Point(26) = {0.007891, 0.749696, 0, 1.0};
Point(27) = {0.004608, 0.749899, 0, 1.0};
Point(28) = {0.001428, 0.750000, 0, 1.0};
Point(29) = {-0.001638, 0.749996, 0, 1.0};
Point(30) = {-0.004579, 0.749889, 0, 1.0};
Point(31) = {-0.007384, 0.749695, 0, 1.0};
Point(32) = {-0.010031, 0.749418, 0, 1.0};
Point(33) = {-0.012507, 0.749069, 0, 1.0};
Point(34) = {-0.014795, 0.748649, 0, 1.0};
Point(35) = {-0.016881, 0.748167, 0, 1.0};
Point(36) = {-0.018752, 0.747631, 0, 1.0};
Point(37) = {-0.020395, 0.747044, 0, 1.0};
Point(38) = {-0.021804, 0.746417, 0, 1.0};
Point(39) = {-0.022962, 0.745760, 0, 1.0};
Point(40) = {-0.023860, 0.745077, 0, 1.0};
Point(41) = {-0.024498, 0.744372, 0, 1.0};
Point(42) = {-0.024876, 0.743648, 0, 1.0};
Point(43) = {-0.025005, 0.742941, 0, 1.0};
Point(44) = {-0.024817, 0.742299, 0, 1.0};
Point(45) = {-0.024270, 0.741664, 0, 1.0};
Point(46) = {-0.023421, 0.740987, 0, 1.0};
Point(47) = {-0.022297, 0.740293, 0, 1.0};
Point(48) = {-0.020912, 0.739603, 0, 1.0};
Point(49) = {-0.019259, 0.738942, 0, 1.0};
Point(50) = {-0.017329, 0.738306, 0, 1.0};
Point(51) = {-0.015135, 0.737679, 0, 1.0};
Point(52) = {-0.012697, 0.737068, 0, 1.0};
Point(53) = {-0.010032, 0.736471, 0, 1.0};
Point(54) = {-0.007161, 0.735895, 0, 1.0};
Point(55) = {-0.004102, 0.735344, 0, 1.0};
Point(56) = {-0.000875, 0.734819, 0, 1.0};
Point(57) = {0.002497, 0.734329, 0, 1.0};
Point(58) = {0.005992, 0.733878, 0, 1.0};
Point(59) = {0.009586, 0.733473, 0, 1.0};
Point(60) = {0.013258, 0.733125, 0, 1.0};
Point(61) = {0.016989, 0.732842, 0, 1.0};
Point(62) = {0.020766, 0.732636, 0, 1.0};
Point(63) = {0.024567, 0.732521, 0, 1.0};
Point(64) = {0.028411, 0.732502, 0, 1.0};
Point(65) = {0.032309, 0.732550, 0, 1.0};
Point(66) = {0.036231, 0.732631, 0, 1.0};
Point(67) = {0.040144, 0.732723, 0, 1.0};
Point(68) = {0.044018, 0.732810, 0, 1.0};
Point(69) = {0.047817, 0.732878, 0, 1.0};
Point(70) = {0.051501, 0.732914, 0, 1.0};
Point(71) = {0.055034, 0.732910, 0, 1.0};
Point(72) = {0.058377, 0.732860, 0, 1.0};
Point(73) = {0.061492, 0.732763, 0, 1.0};
Point(74) = {0.064338, 0.732623, 0, 1.0};
Point(75) = {0.066883, 0.732446, 0, 1.0};
Point(76) = {0.069091, 0.732244, 0, 1.0};
Point(77) = {0.070938, 0.732032, 0, 1.0};
Point(78) = {0.072400, 0.731827, 0, 1.0};
Point(79) = {0.073456, 0.731650, 0, 1.0};
Point(80) = {0.074095, 0.731526, 0, 1.0};
Point(81) = {-0.074309, -0.731478, 0, 1.0};
Point(82) = {-0.074104, -0.731551, 0, 1.0};
Point(83) = {-0.073522, -0.731780, 0, 1.0};
Point(84) = {-0.072611, -0.732159, 0, 1.0};
Point(85) = {-0.071406, -0.732672, 0, 1.0};
Point(86) = {-0.069933, -0.733287, 0, 1.0};
Point(87) = {-0.068198, -0.733979, 0, 1.0};
Point(88) = {-0.066195, -0.734738, 0, 1.0};
Point(89) = {-0.063939, -0.735568, 0, 1.0};
Point(90) = {-0.061453, -0.736467, 0, 1.0};
Point(91) = {-0.058761, -0.737424, 0, 1.0};
Point(92) = {-0.055884, -0.738427, 0, 1.0};
Point(93) = {-0.052850, -0.739466, 0, 1.0};
Point(94) = {-0.049683, -0.740524, 0, 1.0};
Point(95) = {-0.046406, -0.741581, 0, 1.0};
Point(96) = {-0.043032, -0.742619, 0, 1.0};
Point(97) = {-0.039576, -0.743629, 0, 1.0};
Point(98) = {-0.036061, -0.744597, 0, 1.0};
Point(99) = {-0.032504, -0.745512, 0, 1.0};
Point(100) = {-0.028923, -0.746367, 0, 1.0};
Point(101) = {-0.025335, -0.747147, 0, 1.0};
Point(102) = {-0.021758, -0.747846, 0, 1.0};
Point(103) = {-0.018211, -0.748456, 0, 1.0};
Point(104) = {-0.014708, -0.748970, 0, 1.0};
Point(105) = {-0.011261, -0.749385, 0, 1.0};
Point(106) = {-0.007891, -0.749696, 0, 1.0};
Point(107) = {-0.004608, -0.749899, 0, 1.0};
Point(108) = {-0.001428, -0.750000, 0, 1.0};
Point(109) = {0.001638, -0.749996, 0, 1.0};
Point(110) = {0.004579, -0.749889, 0, 1.0};
Point(111) = {0.007384, -0.749695, 0, 1.0};
Point(112) = {0.010031, -0.749418, 0, 1.0};
Point(113) = {0.012507, -0.749069, 0, 1.0};
Point(114) = {0.014795, -0.748649, 0, 1.0};
Point(115) = {0.016881, -0.748167, 0, 1.0};
Point(116) = {0.018752, -0.747631, 0, 1.0};
Point(117) = {0.020395, -0.747044, 0, 1.0};
Point(118) = {0.021804, -0.746417, 0, 1.0};
Point(119) = {0.022962, -0.745760, 0, 1.0};
Point(120) = {0.023860, -0.745077, 0, 1.0};
Point(121) = {0.024498, -0.744372, 0, 1.0};
Point(122) = {0.024876, -0.743648, 0, 1.0};
Point(123) = {0.025005, -0.742941, 0, 1.0};
Point(124) = {0.024817, -0.742299, 0, 1.0};
Point(125) = {0.024270, -0.741664, 0, 1.0};
Point(126) = {0.023421, -0.740987, 0, 1.0};
Point(127) = {0.022297, -0.740293, 0, 1.0};
Point(128) = {0.020912, -0.739603, 0, 1.0};
Point(129) = {0.019259, -0.738942, 0, 1.0};
Point(130) = {0.017329, -0.738306, 0, 1.0};
Point(131) = {0.015135, -0.737679, 0, 1.0};
Point(132) = {0.012697, -0.737068, 0, 1.0};
Point(133) = {0.010032, -0.736471, 0, 1.0};
Point(134) = {0.007161, -0.735895, 0, 1.0};
Point(135) = {0.004102, -0.735344, 0, 1.0};
Point(136) = {0.000875, -0.734819, 0, 1.0};
Point(137) = {-0.002497, -0.734329, 0, 1.0};
Point(138) = {-0.005992, -0.733878, 0, 1.0};
Point(139) = {-0.009586, -0.733473, 0, 1.0};
Point(140) = {-0.013258, -0.733125, 0, 1.0};
Point(141) = {-0.016989, -0.732842, 0, 1.0};
Point(142) = {-0.020766, -0.732636, 0, 1.0};
Point(143) = {-0.024567, -0.732521, 0, 1.0};
Point(144) = {-0.028411, -0.732502, 0, 1.0};
Point(145) = {-0.032309, -0.732550, 0, 1.0};
Point(146) = {-0.036231, -0.732631, 0, 1.0};
Point(147) = {-0.040144, -0.732723, 0, 1.0};
Point(148) = {-0.044018, -0.732810, 0, 1.0};
Point(149) = {-0.047817, -0.732878, 0, 1.0};
Point(150) = {-0.051501, -0.732914, 0, 1.0};
Point(151) = {-0.055034, -0.732910, 0, 1.0};
Point(152) = {-0.058377, -0.732860, 0, 1.0};
Point(153) = {-0.061492, -0.732763, 0, 1.0};
Point(154) = {-0.064338, -0.732623, 0, 1.0};
Point(155) = {-0.066883, -0.732446, 0, 1.0};
Point(156) = {-0.069091, -0.732244, 0, 1.0};
Point(157) = {-0.070938, -0.732032, 0, 1.0};
Point(158) = {-0.072400, -0.731827, 0, 1.0};
Point(159) = {-0.073456, -0.731650, 0, 1.0};
Point(160) = {-0.074095, -0.731526, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html