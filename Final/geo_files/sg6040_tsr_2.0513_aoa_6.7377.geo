SetFactory("OpenCASCADE");

Point(1) = {0.111770, 0.722210, 0, 1.0};
Point(2) = {0.111463, 0.722319, 0, 1.0};
Point(3) = {0.110589, 0.722662, 0, 1.0};
Point(4) = {0.109221, 0.723232, 0, 1.0};
Point(5) = {0.107415, 0.724001, 0, 1.0};
Point(6) = {0.105204, 0.724924, 0, 1.0};
Point(7) = {0.102600, 0.725962, 0, 1.0};
Point(8) = {0.099595, 0.727101, 0, 1.0};
Point(9) = {0.096210, 0.728347, 0, 1.0};
Point(10) = {0.092480, 0.729695, 0, 1.0};
Point(11) = {0.088441, 0.731130, 0, 1.0};
Point(12) = {0.084125, 0.732636, 0, 1.0};
Point(13) = {0.079573, 0.734195, 0, 1.0};
Point(14) = {0.074820, 0.735782, 0, 1.0};
Point(15) = {0.069904, 0.737368, 0, 1.0};
Point(16) = {0.064842, 0.738925, 0, 1.0};
Point(17) = {0.059656, 0.740441, 0, 1.0};
Point(18) = {0.054383, 0.741894, 0, 1.0};
Point(19) = {0.049045, 0.743266, 0, 1.0};
Point(20) = {0.043672, 0.744549, 0, 1.0};
Point(21) = {0.038290, 0.745720, 0, 1.0};
Point(22) = {0.032921, 0.746768, 0, 1.0};
Point(23) = {0.027600, 0.747684, 0, 1.0};
Point(24) = {0.022344, 0.748454, 0, 1.0};
Point(25) = {0.017172, 0.749077, 0, 1.0};
Point(26) = {0.012116, 0.749543, 0, 1.0};
Point(27) = {0.007190, 0.749849, 0, 1.0};
Point(28) = {0.002419, 0.750000, 0, 1.0};
Point(29) = {-0.002181, 0.749993, 0, 1.0};
Point(30) = {-0.006595, 0.749834, 0, 1.0};
Point(31) = {-0.010802, 0.749542, 0, 1.0};
Point(32) = {-0.014775, 0.749127, 0, 1.0};
Point(33) = {-0.018490, 0.748602, 0, 1.0};
Point(34) = {-0.021923, 0.747973, 0, 1.0};
Point(35) = {-0.025053, 0.747250, 0, 1.0};
Point(36) = {-0.027860, 0.746446, 0, 1.0};
Point(37) = {-0.030325, 0.745565, 0, 1.0};
Point(38) = {-0.032438, 0.744624, 0, 1.0};
Point(39) = {-0.034176, 0.743639, 0, 1.0};
Point(40) = {-0.035524, 0.742613, 0, 1.0};
Point(41) = {-0.036481, 0.741556, 0, 1.0};
Point(42) = {-0.037048, 0.740470, 0, 1.0};
Point(43) = {-0.037241, 0.739409, 0, 1.0};
Point(44) = {-0.036959, 0.738445, 0, 1.0};
Point(45) = {-0.036139, 0.737493, 0, 1.0};
Point(46) = {-0.034865, 0.736477, 0, 1.0};
Point(47) = {-0.033178, 0.735436, 0, 1.0};
Point(48) = {-0.031100, 0.734401, 0, 1.0};
Point(49) = {-0.028621, 0.733408, 0, 1.0};
Point(50) = {-0.025725, 0.732454, 0, 1.0};
Point(51) = {-0.022432, 0.731514, 0, 1.0};
Point(52) = {-0.018774, 0.730597, 0, 1.0};
Point(53) = {-0.014777, 0.729701, 0, 1.0};
Point(54) = {-0.010468, 0.728837, 0, 1.0};
Point(55) = {-0.005878, 0.728009, 0, 1.0};
Point(56) = {-0.001037, 0.727223, 0, 1.0};
Point(57) = {0.004022, 0.726488, 0, 1.0};
Point(58) = {0.009267, 0.725811, 0, 1.0};
Point(59) = {0.014659, 0.725202, 0, 1.0};
Point(60) = {0.020168, 0.724680, 0, 1.0};
Point(61) = {0.025767, 0.724256, 0, 1.0};
Point(62) = {0.031434, 0.723947, 0, 1.0};
Point(63) = {0.037137, 0.723774, 0, 1.0};
Point(64) = {0.042903, 0.723747, 0, 1.0};
Point(65) = {0.048753, 0.723819, 0, 1.0};
Point(66) = {0.054637, 0.723939, 0, 1.0};
Point(67) = {0.060509, 0.724078, 0, 1.0};
Point(68) = {0.066322, 0.724209, 0, 1.0};
Point(69) = {0.072020, 0.724310, 0, 1.0};
Point(70) = {0.077549, 0.724364, 0, 1.0};
Point(71) = {0.082850, 0.724358, 0, 1.0};
Point(72) = {0.087866, 0.724283, 0, 1.0};
Point(73) = {0.092538, 0.724138, 0, 1.0};
Point(74) = {0.096809, 0.723928, 0, 1.0};
Point(75) = {0.100627, 0.723662, 0, 1.0};
Point(76) = {0.103941, 0.723359, 0, 1.0};
Point(77) = {0.106712, 0.723040, 0, 1.0};
Point(78) = {0.108905, 0.722733, 0, 1.0};
Point(79) = {0.110489, 0.722467, 0, 1.0};
Point(80) = {0.111449, 0.722281, 0, 1.0};
Point(81) = {-0.111770, -0.722210, 0, 1.0};
Point(82) = {-0.111463, -0.722319, 0, 1.0};
Point(83) = {-0.110589, -0.722662, 0, 1.0};
Point(84) = {-0.109221, -0.723232, 0, 1.0};
Point(85) = {-0.107415, -0.724001, 0, 1.0};
Point(86) = {-0.105204, -0.724924, 0, 1.0};
Point(87) = {-0.102600, -0.725962, 0, 1.0};
Point(88) = {-0.099595, -0.727101, 0, 1.0};
Point(89) = {-0.096210, -0.728347, 0, 1.0};
Point(90) = {-0.092480, -0.729695, 0, 1.0};
Point(91) = {-0.088441, -0.731130, 0, 1.0};
Point(92) = {-0.084125, -0.732636, 0, 1.0};
Point(93) = {-0.079573, -0.734195, 0, 1.0};
Point(94) = {-0.074820, -0.735782, 0, 1.0};
Point(95) = {-0.069904, -0.737368, 0, 1.0};
Point(96) = {-0.064842, -0.738925, 0, 1.0};
Point(97) = {-0.059656, -0.740441, 0, 1.0};
Point(98) = {-0.054383, -0.741894, 0, 1.0};
Point(99) = {-0.049045, -0.743266, 0, 1.0};
Point(100) = {-0.043672, -0.744549, 0, 1.0};
Point(101) = {-0.038290, -0.745720, 0, 1.0};
Point(102) = {-0.032921, -0.746768, 0, 1.0};
Point(103) = {-0.027600, -0.747684, 0, 1.0};
Point(104) = {-0.022344, -0.748454, 0, 1.0};
Point(105) = {-0.017172, -0.749077, 0, 1.0};
Point(106) = {-0.012116, -0.749543, 0, 1.0};
Point(107) = {-0.007190, -0.749849, 0, 1.0};
Point(108) = {-0.002419, -0.750000, 0, 1.0};
Point(109) = {0.002181, -0.749993, 0, 1.0};
Point(110) = {0.006595, -0.749834, 0, 1.0};
Point(111) = {0.010802, -0.749542, 0, 1.0};
Point(112) = {0.014775, -0.749127, 0, 1.0};
Point(113) = {0.018490, -0.748602, 0, 1.0};
Point(114) = {0.021923, -0.747973, 0, 1.0};
Point(115) = {0.025053, -0.747250, 0, 1.0};
Point(116) = {0.027860, -0.746446, 0, 1.0};
Point(117) = {0.030325, -0.745565, 0, 1.0};
Point(118) = {0.032438, -0.744624, 0, 1.0};
Point(119) = {0.034176, -0.743639, 0, 1.0};
Point(120) = {0.035524, -0.742613, 0, 1.0};
Point(121) = {0.036481, -0.741556, 0, 1.0};
Point(122) = {0.037048, -0.740470, 0, 1.0};
Point(123) = {0.037241, -0.739409, 0, 1.0};
Point(124) = {0.036959, -0.738445, 0, 1.0};
Point(125) = {0.036139, -0.737493, 0, 1.0};
Point(126) = {0.034865, -0.736477, 0, 1.0};
Point(127) = {0.033178, -0.735436, 0, 1.0};
Point(128) = {0.031100, -0.734401, 0, 1.0};
Point(129) = {0.028621, -0.733408, 0, 1.0};
Point(130) = {0.025725, -0.732454, 0, 1.0};
Point(131) = {0.022432, -0.731514, 0, 1.0};
Point(132) = {0.018774, -0.730597, 0, 1.0};
Point(133) = {0.014777, -0.729701, 0, 1.0};
Point(134) = {0.010468, -0.728837, 0, 1.0};
Point(135) = {0.005878, -0.728009, 0, 1.0};
Point(136) = {0.001037, -0.727223, 0, 1.0};
Point(137) = {-0.004022, -0.726488, 0, 1.0};
Point(138) = {-0.009267, -0.725811, 0, 1.0};
Point(139) = {-0.014659, -0.725202, 0, 1.0};
Point(140) = {-0.020168, -0.724680, 0, 1.0};
Point(141) = {-0.025767, -0.724256, 0, 1.0};
Point(142) = {-0.031434, -0.723947, 0, 1.0};
Point(143) = {-0.037137, -0.723774, 0, 1.0};
Point(144) = {-0.042903, -0.723747, 0, 1.0};
Point(145) = {-0.048753, -0.723819, 0, 1.0};
Point(146) = {-0.054637, -0.723939, 0, 1.0};
Point(147) = {-0.060509, -0.724078, 0, 1.0};
Point(148) = {-0.066322, -0.724209, 0, 1.0};
Point(149) = {-0.072020, -0.724310, 0, 1.0};
Point(150) = {-0.077549, -0.724364, 0, 1.0};
Point(151) = {-0.082850, -0.724358, 0, 1.0};
Point(152) = {-0.087866, -0.724283, 0, 1.0};
Point(153) = {-0.092538, -0.724138, 0, 1.0};
Point(154) = {-0.096809, -0.723928, 0, 1.0};
Point(155) = {-0.100627, -0.723662, 0, 1.0};
Point(156) = {-0.103941, -0.723359, 0, 1.0};
Point(157) = {-0.106712, -0.723040, 0, 1.0};
Point(158) = {-0.108905, -0.722733, 0, 1.0};
Point(159) = {-0.110489, -0.722467, 0, 1.0};
Point(160) = {-0.111449, -0.722281, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html