SetFactory("OpenCASCADE");

Point(1) = {0.073696, 0.750000, 0, 1.0};
Point(2) = {0.073339, 0.749956, 0, 1.0};
Point(3) = {0.072286, 0.749849, 0, 1.0};
Point(4) = {0.070573, 0.749710, 0, 1.0};
Point(5) = {0.068241, 0.749554, 0, 1.0};
Point(6) = {0.065324, 0.749397, 0, 1.0};
Point(7) = {0.061870, 0.749265, 0, 1.0};
Point(8) = {0.057947, 0.749180, 0, 1.0};
Point(9) = {0.053634, 0.749158, 0, 1.0};
Point(10) = {0.049022, 0.749203, 0, 1.0};
Point(11) = {0.044220, 0.749305, 0, 1.0};
Point(12) = {0.039351, 0.749408, 0, 1.0};
Point(13) = {0.034466, 0.749405, 0, 1.0};
Point(14) = {0.029554, 0.749248, 0, 1.0};
Point(15) = {0.024627, 0.748938, 0, 1.0};
Point(16) = {0.019705, 0.748483, 0, 1.0};
Point(17) = {0.014829, 0.747907, 0, 1.0};
Point(18) = {0.010053, 0.747223, 0, 1.0};
Point(19) = {0.005423, 0.746438, 0, 1.0};
Point(20) = {0.000985, 0.745563, 0, 1.0};
Point(21) = {-0.003196, 0.744614, 0, 1.0};
Point(22) = {-0.007136, 0.743590, 0, 1.0};
Point(23) = {-0.010737, 0.742514, 0, 1.0};
Point(24) = {-0.013988, 0.741395, 0, 1.0};
Point(25) = {-0.016856, 0.740245, 0, 1.0};
Point(26) = {-0.019319, 0.739081, 0, 1.0};
Point(27) = {-0.021357, 0.737921, 0, 1.0};
Point(28) = {-0.022957, 0.736788, 0, 1.0};
Point(29) = {-0.024108, 0.735709, 0, 1.0};
Point(30) = {-0.024799, 0.734726, 0, 1.0};
Point(31) = {-0.024914, 0.734456, 0, 1.0};
Point(32) = {-0.024966, 0.734285, 0, 1.0};
Point(33) = {-0.024998, 0.734123, 0, 1.0};
Point(34) = {-0.025005, 0.734046, 0, 1.0};
Point(35) = {-0.025006, 0.733972, 0, 1.0};
Point(36) = {-0.024984, 0.733834, 0, 1.0};
Point(37) = {-0.024959, 0.733764, 0, 1.0};
Point(38) = {-0.024927, 0.733693, 0, 1.0};
Point(39) = {-0.024846, 0.733549, 0, 1.0};
Point(40) = {-0.024742, 0.733404, 0, 1.0};
Point(41) = {-0.024548, 0.733185, 0, 1.0};
Point(42) = {-0.023580, 0.732472, 0, 1.0};
Point(43) = {-0.022146, 0.731815, 0, 1.0};
Point(44) = {-0.020269, 0.731249, 0, 1.0};
Point(45) = {-0.017967, 0.730797, 0, 1.0};
Point(46) = {-0.015262, 0.730476, 0, 1.0};
Point(47) = {-0.012177, 0.730297, 0, 1.0};
Point(48) = {-0.008740, 0.730268, 0, 1.0};
Point(49) = {-0.004983, 0.730393, 0, 1.0};
Point(50) = {-0.000942, 0.730671, 0, 1.0};
Point(51) = {0.003343, 0.731102, 0, 1.0};
Point(52) = {0.007829, 0.731683, 0, 1.0};
Point(53) = {0.012469, 0.732410, 0, 1.0};
Point(54) = {0.017215, 0.733279, 0, 1.0};
Point(55) = {0.022021, 0.734282, 0, 1.0};
Point(56) = {0.026832, 0.735415, 0, 1.0};
Point(57) = {0.031603, 0.736686, 0, 1.0};
Point(58) = {0.036310, 0.738098, 0, 1.0};
Point(59) = {0.040943, 0.739648, 0, 1.0};
Point(60) = {0.045527, 0.741293, 0, 1.0};
Point(61) = {0.050048, 0.742916, 0, 1.0};
Point(62) = {0.054406, 0.744423, 0, 1.0};
Point(63) = {0.058503, 0.745773, 0, 1.0};
Point(64) = {0.062249, 0.746939, 0, 1.0};
Point(65) = {0.065566, 0.747912, 0, 1.0};
Point(66) = {0.068382, 0.748690, 0, 1.0};
Point(67) = {0.070643, 0.749282, 0, 1.0};
Point(68) = {0.072311, 0.749695, 0, 1.0};
Point(69) = {0.073344, 0.749928, 0, 1.0};
Point(70) = {-0.073696, -0.750000, 0, 1.0};
Point(71) = {-0.073339, -0.749956, 0, 1.0};
Point(72) = {-0.072286, -0.749849, 0, 1.0};
Point(73) = {-0.070573, -0.749710, 0, 1.0};
Point(74) = {-0.068241, -0.749554, 0, 1.0};
Point(75) = {-0.065324, -0.749397, 0, 1.0};
Point(76) = {-0.061870, -0.749265, 0, 1.0};
Point(77) = {-0.057947, -0.749180, 0, 1.0};
Point(78) = {-0.053634, -0.749158, 0, 1.0};
Point(79) = {-0.049022, -0.749203, 0, 1.0};
Point(80) = {-0.044220, -0.749305, 0, 1.0};
Point(81) = {-0.039351, -0.749408, 0, 1.0};
Point(82) = {-0.034466, -0.749405, 0, 1.0};
Point(83) = {-0.029554, -0.749248, 0, 1.0};
Point(84) = {-0.024627, -0.748938, 0, 1.0};
Point(85) = {-0.019705, -0.748483, 0, 1.0};
Point(86) = {-0.014829, -0.747907, 0, 1.0};
Point(87) = {-0.010053, -0.747223, 0, 1.0};
Point(88) = {-0.005423, -0.746438, 0, 1.0};
Point(89) = {-0.000985, -0.745563, 0, 1.0};
Point(90) = {0.003196, -0.744614, 0, 1.0};
Point(91) = {0.007136, -0.743590, 0, 1.0};
Point(92) = {0.010737, -0.742514, 0, 1.0};
Point(93) = {0.013988, -0.741395, 0, 1.0};
Point(94) = {0.016856, -0.740245, 0, 1.0};
Point(95) = {0.019319, -0.739081, 0, 1.0};
Point(96) = {0.021357, -0.737921, 0, 1.0};
Point(97) = {0.022957, -0.736788, 0, 1.0};
Point(98) = {0.024108, -0.735709, 0, 1.0};
Point(99) = {0.024799, -0.734726, 0, 1.0};
Point(100) = {0.024914, -0.734456, 0, 1.0};
Point(101) = {0.024966, -0.734285, 0, 1.0};
Point(102) = {0.024998, -0.734123, 0, 1.0};
Point(103) = {0.025005, -0.734046, 0, 1.0};
Point(104) = {0.025006, -0.733972, 0, 1.0};
Point(105) = {0.024984, -0.733834, 0, 1.0};
Point(106) = {0.024959, -0.733764, 0, 1.0};
Point(107) = {0.024927, -0.733693, 0, 1.0};
Point(108) = {0.024846, -0.733549, 0, 1.0};
Point(109) = {0.024742, -0.733404, 0, 1.0};
Point(110) = {0.024548, -0.733185, 0, 1.0};
Point(111) = {0.023580, -0.732472, 0, 1.0};
Point(112) = {0.022146, -0.731815, 0, 1.0};
Point(113) = {0.020269, -0.731249, 0, 1.0};
Point(114) = {0.017967, -0.730797, 0, 1.0};
Point(115) = {0.015262, -0.730476, 0, 1.0};
Point(116) = {0.012177, -0.730297, 0, 1.0};
Point(117) = {0.008740, -0.730268, 0, 1.0};
Point(118) = {0.004983, -0.730393, 0, 1.0};
Point(119) = {0.000942, -0.730671, 0, 1.0};
Point(120) = {-0.003343, -0.731102, 0, 1.0};
Point(121) = {-0.007829, -0.731683, 0, 1.0};
Point(122) = {-0.012469, -0.732410, 0, 1.0};
Point(123) = {-0.017215, -0.733279, 0, 1.0};
Point(124) = {-0.022021, -0.734282, 0, 1.0};
Point(125) = {-0.026832, -0.735415, 0, 1.0};
Point(126) = {-0.031603, -0.736686, 0, 1.0};
Point(127) = {-0.036310, -0.738098, 0, 1.0};
Point(128) = {-0.040943, -0.739648, 0, 1.0};
Point(129) = {-0.045527, -0.741293, 0, 1.0};
Point(130) = {-0.050048, -0.742916, 0, 1.0};
Point(131) = {-0.054406, -0.744423, 0, 1.0};
Point(132) = {-0.058503, -0.745773, 0, 1.0};
Point(133) = {-0.062249, -0.746939, 0, 1.0};
Point(134) = {-0.065566, -0.747912, 0, 1.0};
Point(135) = {-0.068382, -0.748690, 0, 1.0};
Point(136) = {-0.070643, -0.749282, 0, 1.0};
Point(137) = {-0.072311, -0.749695, 0, 1.0};
Point(138) = {-0.073344, -0.749928, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:51};
Spline(3) = {51:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:89};
Spline(6) = {89:120};
Spline(7) = {120:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html