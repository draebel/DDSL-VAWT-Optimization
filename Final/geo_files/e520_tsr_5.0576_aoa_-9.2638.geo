SetFactory("OpenCASCADE");

Point(1) = {0.111050, 0.750000, 0, 1.0};
Point(2) = {0.110515, 0.749934, 0, 1.0};
Point(3) = {0.108934, 0.749774, 0, 1.0};
Point(4) = {0.106365, 0.749566, 0, 1.0};
Point(5) = {0.102868, 0.749331, 0, 1.0};
Point(6) = {0.098491, 0.749096, 0, 1.0};
Point(7) = {0.093310, 0.748897, 0, 1.0};
Point(8) = {0.087426, 0.748770, 0, 1.0};
Point(9) = {0.080955, 0.748738, 0, 1.0};
Point(10) = {0.074038, 0.748804, 0, 1.0};
Point(11) = {0.066834, 0.748957, 0, 1.0};
Point(12) = {0.059530, 0.749111, 0, 1.0};
Point(13) = {0.052202, 0.749108, 0, 1.0};
Point(14) = {0.044834, 0.748872, 0, 1.0};
Point(15) = {0.037442, 0.748407, 0, 1.0};
Point(16) = {0.030059, 0.747724, 0, 1.0};
Point(17) = {0.022745, 0.746861, 0, 1.0};
Point(18) = {0.015580, 0.745834, 0, 1.0};
Point(19) = {0.008635, 0.744657, 0, 1.0};
Point(20) = {0.001978, 0.743344, 0, 1.0};
Point(21) = {-0.004294, 0.741920, 0, 1.0};
Point(22) = {-0.010203, 0.740385, 0, 1.0};
Point(23) = {-0.015606, 0.738771, 0, 1.0};
Point(24) = {-0.020482, 0.737091, 0, 1.0};
Point(25) = {-0.024785, 0.735366, 0, 1.0};
Point(26) = {-0.028479, 0.733621, 0, 1.0};
Point(27) = {-0.031537, 0.731880, 0, 1.0};
Point(28) = {-0.033937, 0.730180, 0, 1.0};
Point(29) = {-0.035664, 0.728563, 0, 1.0};
Point(30) = {-0.036700, 0.727088, 0, 1.0};
Point(31) = {-0.036873, 0.726683, 0, 1.0};
Point(32) = {-0.036951, 0.726427, 0, 1.0};
Point(33) = {-0.036998, 0.726184, 0, 1.0};
Point(34) = {-0.037009, 0.726068, 0, 1.0};
Point(35) = {-0.037011, 0.725957, 0, 1.0};
Point(36) = {-0.036977, 0.725749, 0, 1.0};
Point(37) = {-0.036940, 0.725644, 0, 1.0};
Point(38) = {-0.036893, 0.725538, 0, 1.0};
Point(39) = {-0.036771, 0.725323, 0, 1.0};
Point(40) = {-0.036615, 0.725105, 0, 1.0};
Point(41) = {-0.036323, 0.724776, 0, 1.0};
Point(42) = {-0.034872, 0.723707, 0, 1.0};
Point(43) = {-0.032720, 0.722722, 0, 1.0};
Point(44) = {-0.029905, 0.721872, 0, 1.0};
Point(45) = {-0.026452, 0.721194, 0, 1.0};
Point(46) = {-0.022394, 0.720712, 0, 1.0};
Point(47) = {-0.017767, 0.720444, 0, 1.0};
Point(48) = {-0.012610, 0.720401, 0, 1.0};
Point(49) = {-0.006974, 0.720587, 0, 1.0};
Point(50) = {-0.000913, 0.721005, 0, 1.0};
Point(51) = {0.005516, 0.721652, 0, 1.0};
Point(52) = {0.012245, 0.722523, 0, 1.0};
Point(53) = {0.019205, 0.723614, 0, 1.0};
Point(54) = {0.026324, 0.724917, 0, 1.0};
Point(55) = {0.033534, 0.726422, 0, 1.0};
Point(56) = {0.040751, 0.728121, 0, 1.0};
Point(57) = {0.047907, 0.730028, 0, 1.0};
Point(58) = {0.054968, 0.732147, 0, 1.0};
Point(59) = {0.061918, 0.734472, 0, 1.0};
Point(60) = {0.068794, 0.736939, 0, 1.0};
Point(61) = {0.075576, 0.739373, 0, 1.0};
Point(62) = {0.082114, 0.741634, 0, 1.0};
Point(63) = {0.088259, 0.743659, 0, 1.0};
Point(64) = {0.093879, 0.745409, 0, 1.0};
Point(65) = {0.098854, 0.746868, 0, 1.0};
Point(66) = {0.103079, 0.748034, 0, 1.0};
Point(67) = {0.106470, 0.748923, 0, 1.0};
Point(68) = {0.108972, 0.749543, 0, 1.0};
Point(69) = {0.110522, 0.749893, 0, 1.0};
Point(70) = {-0.111050, -0.750000, 0, 1.0};
Point(71) = {-0.110515, -0.749934, 0, 1.0};
Point(72) = {-0.108934, -0.749774, 0, 1.0};
Point(73) = {-0.106365, -0.749566, 0, 1.0};
Point(74) = {-0.102868, -0.749331, 0, 1.0};
Point(75) = {-0.098491, -0.749096, 0, 1.0};
Point(76) = {-0.093310, -0.748897, 0, 1.0};
Point(77) = {-0.087426, -0.748770, 0, 1.0};
Point(78) = {-0.080955, -0.748738, 0, 1.0};
Point(79) = {-0.074038, -0.748804, 0, 1.0};
Point(80) = {-0.066834, -0.748957, 0, 1.0};
Point(81) = {-0.059530, -0.749111, 0, 1.0};
Point(82) = {-0.052202, -0.749108, 0, 1.0};
Point(83) = {-0.044834, -0.748872, 0, 1.0};
Point(84) = {-0.037442, -0.748407, 0, 1.0};
Point(85) = {-0.030059, -0.747724, 0, 1.0};
Point(86) = {-0.022745, -0.746861, 0, 1.0};
Point(87) = {-0.015580, -0.745834, 0, 1.0};
Point(88) = {-0.008635, -0.744657, 0, 1.0};
Point(89) = {-0.001978, -0.743344, 0, 1.0};
Point(90) = {0.004294, -0.741920, 0, 1.0};
Point(91) = {0.010203, -0.740385, 0, 1.0};
Point(92) = {0.015606, -0.738771, 0, 1.0};
Point(93) = {0.020482, -0.737091, 0, 1.0};
Point(94) = {0.024785, -0.735366, 0, 1.0};
Point(95) = {0.028479, -0.733621, 0, 1.0};
Point(96) = {0.031537, -0.731880, 0, 1.0};
Point(97) = {0.033937, -0.730180, 0, 1.0};
Point(98) = {0.035664, -0.728563, 0, 1.0};
Point(99) = {0.036700, -0.727088, 0, 1.0};
Point(100) = {0.036873, -0.726683, 0, 1.0};
Point(101) = {0.036951, -0.726427, 0, 1.0};
Point(102) = {0.036998, -0.726184, 0, 1.0};
Point(103) = {0.037009, -0.726068, 0, 1.0};
Point(104) = {0.037011, -0.725957, 0, 1.0};
Point(105) = {0.036977, -0.725749, 0, 1.0};
Point(106) = {0.036940, -0.725644, 0, 1.0};
Point(107) = {0.036893, -0.725538, 0, 1.0};
Point(108) = {0.036771, -0.725323, 0, 1.0};
Point(109) = {0.036615, -0.725105, 0, 1.0};
Point(110) = {0.036323, -0.724776, 0, 1.0};
Point(111) = {0.034872, -0.723707, 0, 1.0};
Point(112) = {0.032720, -0.722722, 0, 1.0};
Point(113) = {0.029905, -0.721872, 0, 1.0};
Point(114) = {0.026452, -0.721194, 0, 1.0};
Point(115) = {0.022394, -0.720712, 0, 1.0};
Point(116) = {0.017767, -0.720444, 0, 1.0};
Point(117) = {0.012610, -0.720401, 0, 1.0};
Point(118) = {0.006974, -0.720587, 0, 1.0};
Point(119) = {0.000913, -0.721005, 0, 1.0};
Point(120) = {-0.005516, -0.721652, 0, 1.0};
Point(121) = {-0.012245, -0.722523, 0, 1.0};
Point(122) = {-0.019205, -0.723614, 0, 1.0};
Point(123) = {-0.026324, -0.724917, 0, 1.0};
Point(124) = {-0.033534, -0.726422, 0, 1.0};
Point(125) = {-0.040751, -0.728121, 0, 1.0};
Point(126) = {-0.047907, -0.730028, 0, 1.0};
Point(127) = {-0.054968, -0.732147, 0, 1.0};
Point(128) = {-0.061918, -0.734472, 0, 1.0};
Point(129) = {-0.068794, -0.736939, 0, 1.0};
Point(130) = {-0.075576, -0.739373, 0, 1.0};
Point(131) = {-0.082114, -0.741634, 0, 1.0};
Point(132) = {-0.088259, -0.743659, 0, 1.0};
Point(133) = {-0.093879, -0.745409, 0, 1.0};
Point(134) = {-0.098854, -0.746868, 0, 1.0};
Point(135) = {-0.103079, -0.748034, 0, 1.0};
Point(136) = {-0.106470, -0.748923, 0, 1.0};
Point(137) = {-0.108972, -0.749543, 0, 1.0};
Point(138) = {-0.110522, -0.749893, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:51};
Spline(3) = {51:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:89};
Spline(6) = {89:120};
Spline(7) = {120:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html