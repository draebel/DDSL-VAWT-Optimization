SetFactory("OpenCASCADE");

Point(1) = {0.110938, 0.743995, 0, 1.0};
Point(2) = {0.110358, 0.744050, 0, 1.0};
Point(3) = {0.108711, 0.744264, 0, 1.0};
Point(4) = {0.106180, 0.744638, 0, 1.0};
Point(5) = {0.102859, 0.745080, 0, 1.0};
Point(6) = {0.098753, 0.745547, 0, 1.0};
Point(7) = {0.093907, 0.746073, 0, 1.0};
Point(8) = {0.088428, 0.746673, 0, 1.0};
Point(9) = {0.082428, 0.747339, 0, 1.0};
Point(10) = {0.076021, 0.748041, 0, 1.0};
Point(11) = {0.069334, 0.748739, 0, 1.0};
Point(12) = {0.062483, 0.749372, 0, 1.0};
Point(13) = {0.055585, 0.749839, 0, 1.0};
Point(14) = {0.048671, 0.750000, 0, 1.0};
Point(15) = {0.041683, 0.749810, 0, 1.0};
Point(16) = {0.034626, 0.749326, 0, 1.0};
Point(17) = {0.027861, 0.748628, 0, 1.0};
Point(18) = {0.020566, 0.747614, 0, 1.0};
Point(19) = {0.013705, 0.746431, 0, 1.0};
Point(20) = {0.007049, 0.745057, 0, 1.0};
Point(21) = {0.000667, 0.743510, 0, 1.0};
Point(22) = {-0.005382, 0.741809, 0, 1.0};
Point(23) = {-0.011037, 0.739978, 0, 1.0};
Point(24) = {-0.016248, 0.738041, 0, 1.0};
Point(25) = {-0.020965, 0.736027, 0, 1.0};
Point(26) = {-0.025148, 0.733963, 0, 1.0};
Point(27) = {-0.028763, 0.731884, 0, 1.0};
Point(28) = {-0.031778, 0.729826, 0, 1.0};
Point(29) = {-0.034176, 0.727830, 0, 1.0};
Point(30) = {-0.035936, 0.725940, 0, 1.0};
Point(31) = {-0.037055, 0.724219, 0, 1.0};
Point(32) = {-0.037515, 0.722748, 0, 1.0};
Point(33) = {-0.037171, 0.721661, 0, 1.0};
Point(34) = {-0.035906, 0.720857, 0, 1.0};
Point(35) = {-0.033792, 0.720189, 0, 1.0};
Point(36) = {-0.030895, 0.719691, 0, 1.0};
Point(37) = {-0.027251, 0.719379, 0, 1.0};
Point(38) = {-0.022893, 0.719250, 0, 1.0};
Point(39) = {-0.017871, 0.719292, 0, 1.0};
Point(40) = {-0.012249, 0.719496, 0, 1.0};
Point(41) = {-0.006096, 0.719858, 0, 1.0};
Point(42) = {0.000512, 0.720369, 0, 1.0};
Point(43) = {0.007495, 0.721022, 0, 1.0};
Point(44) = {0.014773, 0.721813, 0, 1.0};
Point(45) = {0.022254, 0.722725, 0, 1.0};
Point(46) = {0.029841, 0.723753, 0, 1.0};
Point(47) = {0.037438, 0.724897, 0, 1.0};
Point(48) = {0.044949, 0.726161, 0, 1.0};
Point(49) = {0.052272, 0.727551, 0, 1.0};
Point(50) = {0.059311, 0.729108, 0, 1.0};
Point(51) = {0.066029, 0.730911, 0, 1.0};
Point(52) = {0.072463, 0.732992, 0, 1.0};
Point(53) = {0.078713, 0.735332, 0, 1.0};
Point(54) = {0.084898, 0.737726, 0, 1.0};
Point(55) = {0.090923, 0.739859, 0, 1.0};
Point(56) = {0.096528, 0.741559, 0, 1.0};
Point(57) = {0.101477, 0.742773, 0, 1.0};
Point(58) = {0.105529, 0.743508, 0, 1.0};
Point(59) = {0.108532, 0.743860, 0, 1.0};
Point(60) = {0.110337, 0.743976, 0, 1.0};
Point(61) = {-0.110938, -0.743995, 0, 1.0};
Point(62) = {-0.110358, -0.744050, 0, 1.0};
Point(63) = {-0.108711, -0.744264, 0, 1.0};
Point(64) = {-0.106180, -0.744638, 0, 1.0};
Point(65) = {-0.102859, -0.745080, 0, 1.0};
Point(66) = {-0.098753, -0.745547, 0, 1.0};
Point(67) = {-0.093907, -0.746073, 0, 1.0};
Point(68) = {-0.088428, -0.746673, 0, 1.0};
Point(69) = {-0.082428, -0.747339, 0, 1.0};
Point(70) = {-0.076021, -0.748041, 0, 1.0};
Point(71) = {-0.069334, -0.748739, 0, 1.0};
Point(72) = {-0.062483, -0.749372, 0, 1.0};
Point(73) = {-0.055585, -0.749839, 0, 1.0};
Point(74) = {-0.048671, -0.750000, 0, 1.0};
Point(75) = {-0.041683, -0.749810, 0, 1.0};
Point(76) = {-0.034626, -0.749326, 0, 1.0};
Point(77) = {-0.027861, -0.748628, 0, 1.0};
Point(78) = {-0.020566, -0.747614, 0, 1.0};
Point(79) = {-0.013705, -0.746431, 0, 1.0};
Point(80) = {-0.007049, -0.745057, 0, 1.0};
Point(81) = {-0.000667, -0.743510, 0, 1.0};
Point(82) = {0.005382, -0.741809, 0, 1.0};
Point(83) = {0.011037, -0.739978, 0, 1.0};
Point(84) = {0.016248, -0.738041, 0, 1.0};
Point(85) = {0.020965, -0.736027, 0, 1.0};
Point(86) = {0.025148, -0.733963, 0, 1.0};
Point(87) = {0.028763, -0.731884, 0, 1.0};
Point(88) = {0.031778, -0.729826, 0, 1.0};
Point(89) = {0.034176, -0.727830, 0, 1.0};
Point(90) = {0.035936, -0.725940, 0, 1.0};
Point(91) = {0.037055, -0.724219, 0, 1.0};
Point(92) = {0.037515, -0.722748, 0, 1.0};
Point(93) = {0.037171, -0.721661, 0, 1.0};
Point(94) = {0.035906, -0.720857, 0, 1.0};
Point(95) = {0.033792, -0.720189, 0, 1.0};
Point(96) = {0.030895, -0.719691, 0, 1.0};
Point(97) = {0.027251, -0.719379, 0, 1.0};
Point(98) = {0.022893, -0.719250, 0, 1.0};
Point(99) = {0.017871, -0.719292, 0, 1.0};
Point(100) = {0.012249, -0.719496, 0, 1.0};
Point(101) = {0.006096, -0.719858, 0, 1.0};
Point(102) = {-0.000512, -0.720369, 0, 1.0};
Point(103) = {-0.007495, -0.721022, 0, 1.0};
Point(104) = {-0.014773, -0.721813, 0, 1.0};
Point(105) = {-0.022254, -0.722725, 0, 1.0};
Point(106) = {-0.029841, -0.723753, 0, 1.0};
Point(107) = {-0.037438, -0.724897, 0, 1.0};
Point(108) = {-0.044949, -0.726161, 0, 1.0};
Point(109) = {-0.052272, -0.727551, 0, 1.0};
Point(110) = {-0.059311, -0.729108, 0, 1.0};
Point(111) = {-0.066029, -0.730911, 0, 1.0};
Point(112) = {-0.072463, -0.732992, 0, 1.0};
Point(113) = {-0.078713, -0.735332, 0, 1.0};
Point(114) = {-0.084898, -0.737726, 0, 1.0};
Point(115) = {-0.090923, -0.739859, 0, 1.0};
Point(116) = {-0.096528, -0.741559, 0, 1.0};
Point(117) = {-0.101477, -0.742773, 0, 1.0};
Point(118) = {-0.105529, -0.743508, 0, 1.0};
Point(119) = {-0.108532, -0.743860, 0, 1.0};
Point(120) = {-0.110337, -0.743976, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html