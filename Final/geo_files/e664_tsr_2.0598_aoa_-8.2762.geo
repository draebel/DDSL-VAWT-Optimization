SetFactory("OpenCASCADE");

Point(1) = {0.147917, 0.741993, 0, 1.0};
Point(2) = {0.147145, 0.742067, 0, 1.0};
Point(3) = {0.144949, 0.742352, 0, 1.0};
Point(4) = {0.141574, 0.742851, 0, 1.0};
Point(5) = {0.137145, 0.743440, 0, 1.0};
Point(6) = {0.131670, 0.744062, 0, 1.0};
Point(7) = {0.125210, 0.744764, 0, 1.0};
Point(8) = {0.117905, 0.745564, 0, 1.0};
Point(9) = {0.109903, 0.746452, 0, 1.0};
Point(10) = {0.101362, 0.747388, 0, 1.0};
Point(11) = {0.092445, 0.748318, 0, 1.0};
Point(12) = {0.083310, 0.749162, 0, 1.0};
Point(13) = {0.074113, 0.749785, 0, 1.0};
Point(14) = {0.064894, 0.750000, 0, 1.0};
Point(15) = {0.055578, 0.749746, 0, 1.0};
Point(16) = {0.046168, 0.749101, 0, 1.0};
Point(17) = {0.037148, 0.748171, 0, 1.0};
Point(18) = {0.027422, 0.746819, 0, 1.0};
Point(19) = {0.018273, 0.745242, 0, 1.0};
Point(20) = {0.009399, 0.743409, 0, 1.0};
Point(21) = {0.000889, 0.741347, 0, 1.0};
Point(22) = {-0.007176, 0.739078, 0, 1.0};
Point(23) = {-0.014716, 0.736637, 0, 1.0};
Point(24) = {-0.021664, 0.734054, 0, 1.0};
Point(25) = {-0.027953, 0.731369, 0, 1.0};
Point(26) = {-0.033531, 0.728618, 0, 1.0};
Point(27) = {-0.038350, 0.725845, 0, 1.0};
Point(28) = {-0.042371, 0.723102, 0, 1.0};
Point(29) = {-0.045567, 0.720440, 0, 1.0};
Point(30) = {-0.047915, 0.717920, 0, 1.0};
Point(31) = {-0.049406, 0.715625, 0, 1.0};
Point(32) = {-0.050020, 0.713664, 0, 1.0};
Point(33) = {-0.049561, 0.712215, 0, 1.0};
Point(34) = {-0.047875, 0.711143, 0, 1.0};
Point(35) = {-0.045055, 0.710251, 0, 1.0};
Point(36) = {-0.041194, 0.709588, 0, 1.0};
Point(37) = {-0.036335, 0.709171, 0, 1.0};
Point(38) = {-0.030524, 0.709000, 0, 1.0};
Point(39) = {-0.023828, 0.709056, 0, 1.0};
Point(40) = {-0.016331, 0.709328, 0, 1.0};
Point(41) = {-0.008127, 0.709810, 0, 1.0};
Point(42) = {0.000682, 0.710492, 0, 1.0};
Point(43) = {0.009994, 0.711363, 0, 1.0};
Point(44) = {0.019697, 0.712417, 0, 1.0};
Point(45) = {0.029672, 0.713633, 0, 1.0};
Point(46) = {0.039788, 0.715004, 0, 1.0};
Point(47) = {0.049918, 0.716530, 0, 1.0};
Point(48) = {0.059932, 0.718215, 0, 1.0};
Point(49) = {0.069697, 0.720068, 0, 1.0};
Point(50) = {0.079081, 0.722144, 0, 1.0};
Point(51) = {0.088039, 0.724548, 0, 1.0};
Point(52) = {0.096617, 0.727322, 0, 1.0};
Point(53) = {0.104950, 0.730442, 0, 1.0};
Point(54) = {0.113197, 0.733634, 0, 1.0};
Point(55) = {0.121231, 0.736479, 0, 1.0};
Point(56) = {0.128705, 0.738746, 0, 1.0};
Point(57) = {0.135302, 0.740365, 0, 1.0};
Point(58) = {0.140705, 0.741345, 0, 1.0};
Point(59) = {0.144710, 0.741814, 0, 1.0};
Point(60) = {0.147116, 0.741968, 0, 1.0};
Point(61) = {-0.147917, -0.741993, 0, 1.0};
Point(62) = {-0.147145, -0.742067, 0, 1.0};
Point(63) = {-0.144949, -0.742352, 0, 1.0};
Point(64) = {-0.141574, -0.742851, 0, 1.0};
Point(65) = {-0.137145, -0.743440, 0, 1.0};
Point(66) = {-0.131670, -0.744062, 0, 1.0};
Point(67) = {-0.125210, -0.744764, 0, 1.0};
Point(68) = {-0.117905, -0.745564, 0, 1.0};
Point(69) = {-0.109903, -0.746452, 0, 1.0};
Point(70) = {-0.101362, -0.747388, 0, 1.0};
Point(71) = {-0.092445, -0.748318, 0, 1.0};
Point(72) = {-0.083310, -0.749162, 0, 1.0};
Point(73) = {-0.074113, -0.749785, 0, 1.0};
Point(74) = {-0.064894, -0.750000, 0, 1.0};
Point(75) = {-0.055578, -0.749746, 0, 1.0};
Point(76) = {-0.046168, -0.749101, 0, 1.0};
Point(77) = {-0.037148, -0.748171, 0, 1.0};
Point(78) = {-0.027422, -0.746819, 0, 1.0};
Point(79) = {-0.018273, -0.745242, 0, 1.0};
Point(80) = {-0.009399, -0.743409, 0, 1.0};
Point(81) = {-0.000889, -0.741347, 0, 1.0};
Point(82) = {0.007176, -0.739078, 0, 1.0};
Point(83) = {0.014716, -0.736637, 0, 1.0};
Point(84) = {0.021664, -0.734054, 0, 1.0};
Point(85) = {0.027953, -0.731369, 0, 1.0};
Point(86) = {0.033531, -0.728618, 0, 1.0};
Point(87) = {0.038350, -0.725845, 0, 1.0};
Point(88) = {0.042371, -0.723102, 0, 1.0};
Point(89) = {0.045567, -0.720440, 0, 1.0};
Point(90) = {0.047915, -0.717920, 0, 1.0};
Point(91) = {0.049406, -0.715625, 0, 1.0};
Point(92) = {0.050020, -0.713664, 0, 1.0};
Point(93) = {0.049561, -0.712215, 0, 1.0};
Point(94) = {0.047875, -0.711143, 0, 1.0};
Point(95) = {0.045055, -0.710251, 0, 1.0};
Point(96) = {0.041194, -0.709588, 0, 1.0};
Point(97) = {0.036335, -0.709171, 0, 1.0};
Point(98) = {0.030524, -0.709000, 0, 1.0};
Point(99) = {0.023828, -0.709056, 0, 1.0};
Point(100) = {0.016331, -0.709328, 0, 1.0};
Point(101) = {0.008127, -0.709810, 0, 1.0};
Point(102) = {-0.000682, -0.710492, 0, 1.0};
Point(103) = {-0.009994, -0.711363, 0, 1.0};
Point(104) = {-0.019697, -0.712417, 0, 1.0};
Point(105) = {-0.029672, -0.713633, 0, 1.0};
Point(106) = {-0.039788, -0.715004, 0, 1.0};
Point(107) = {-0.049918, -0.716530, 0, 1.0};
Point(108) = {-0.059932, -0.718215, 0, 1.0};
Point(109) = {-0.069697, -0.720068, 0, 1.0};
Point(110) = {-0.079081, -0.722144, 0, 1.0};
Point(111) = {-0.088039, -0.724548, 0, 1.0};
Point(112) = {-0.096617, -0.727322, 0, 1.0};
Point(113) = {-0.104950, -0.730442, 0, 1.0};
Point(114) = {-0.113197, -0.733634, 0, 1.0};
Point(115) = {-0.121231, -0.736479, 0, 1.0};
Point(116) = {-0.128705, -0.738746, 0, 1.0};
Point(117) = {-0.135302, -0.740365, 0, 1.0};
Point(118) = {-0.140705, -0.741345, 0, 1.0};
Point(119) = {-0.144710, -0.741814, 0, 1.0};
Point(120) = {-0.147116, -0.741968, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 45 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html