SetFactory("OpenCASCADE");

Point(1) = {0.074708, 0.748379, 0, 1.0};
Point(2) = {0.074234, 0.748336, 0, 1.0};
Point(3) = {0.072819, 0.748214, 0, 1.0};
Point(4) = {0.070462, 0.748030, 0, 1.0};
Point(5) = {0.067174, 0.747819, 0, 1.0};
Point(6) = {0.062984, 0.747633, 0, 1.0};
Point(7) = {0.057967, 0.747535, 0, 1.0};
Point(8) = {0.052232, 0.747564, 0, 1.0};
Point(9) = {0.045915, 0.747716, 0, 1.0};
Point(10) = {0.039116, 0.747965, 0, 1.0};
Point(11) = {0.031942, 0.748293, 0, 1.0};
Point(12) = {0.024498, 0.748674, 0, 1.0};
Point(13) = {0.016891, 0.749079, 0, 1.0};
Point(14) = {0.009227, 0.749457, 0, 1.0};
Point(15) = {0.001585, 0.749761, 0, 1.0};
Point(16) = {-0.005965, 0.749952, 0, 1.0};
Point(17) = {-0.013359, 0.750000, 0, 1.0};
Point(18) = {-0.020544, 0.749884, 0, 1.0};
Point(19) = {-0.027463, 0.749593, 0, 1.0};
Point(20) = {-0.034070, 0.749125, 0, 1.0};
Point(21) = {-0.040312, 0.748484, 0, 1.0};
Point(22) = {-0.046142, 0.747682, 0, 1.0};
Point(23) = {-0.051511, 0.746728, 0, 1.0};
Point(24) = {-0.056378, 0.745637, 0, 1.0};
Point(25) = {-0.060711, 0.744425, 0, 1.0};
Point(26) = {-0.064481, 0.743111, 0, 1.0};
Point(27) = {-0.067669, 0.741727, 0, 1.0};
Point(28) = {-0.070265, 0.740299, 0, 1.0};
Point(29) = {-0.072262, 0.738873, 0, 1.0};
Point(30) = {-0.073662, 0.737496, 0, 1.0};
Point(31) = {-0.074476, 0.736238, 0, 1.0};
Point(32) = {-0.074714, 0.735221, 0, 1.0};
Point(33) = {-0.074197, 0.734576, 0, 1.0};
Point(34) = {-0.072785, 0.734236, 0, 1.0};
Point(35) = {-0.070513, 0.734101, 0, 1.0};
Point(36) = {-0.067384, 0.734141, 0, 1.0};
Point(37) = {-0.063443, 0.734309, 0, 1.0};
Point(38) = {-0.058755, 0.734578, 0, 1.0};
Point(39) = {-0.053389, 0.734936, 0, 1.0};
Point(40) = {-0.047414, 0.735375, 0, 1.0};
Point(41) = {-0.040910, 0.735892, 0, 1.0};
Point(42) = {-0.033946, 0.736481, 0, 1.0};
Point(43) = {-0.026604, 0.737134, 0, 1.0};
Point(44) = {-0.018964, 0.737843, 0, 1.0};
Point(45) = {-0.011114, 0.738595, 0, 1.0};
Point(46) = {-0.003142, 0.739380, 0, 1.0};
Point(47) = {0.004863, 0.740186, 0, 1.0};
Point(48) = {0.012807, 0.741006, 0, 1.0};
Point(49) = {0.020603, 0.741825, 0, 1.0};
Point(50) = {0.028158, 0.742634, 0, 1.0};
Point(51) = {0.035391, 0.743424, 0, 1.0};
Point(52) = {0.042216, 0.744185, 0, 1.0};
Point(53) = {0.048555, 0.744907, 0, 1.0};
Point(54) = {0.054335, 0.745583, 0, 1.0};
Point(55) = {0.059489, 0.746208, 0, 1.0};
Point(56) = {0.063957, 0.746775, 0, 1.0};
Point(57) = {0.067690, 0.747287, 0, 1.0};
Point(58) = {0.070666, 0.747742, 0, 1.0};
Point(59) = {0.072870, 0.748099, 0, 1.0};
Point(60) = {0.074241, 0.748314, 0, 1.0};
Point(61) = {-0.074708, -0.748379, 0, 1.0};
Point(62) = {-0.074234, -0.748336, 0, 1.0};
Point(63) = {-0.072819, -0.748214, 0, 1.0};
Point(64) = {-0.070462, -0.748030, 0, 1.0};
Point(65) = {-0.067174, -0.747819, 0, 1.0};
Point(66) = {-0.062984, -0.747633, 0, 1.0};
Point(67) = {-0.057967, -0.747535, 0, 1.0};
Point(68) = {-0.052232, -0.747564, 0, 1.0};
Point(69) = {-0.045915, -0.747716, 0, 1.0};
Point(70) = {-0.039116, -0.747965, 0, 1.0};
Point(71) = {-0.031942, -0.748293, 0, 1.0};
Point(72) = {-0.024498, -0.748674, 0, 1.0};
Point(73) = {-0.016891, -0.749079, 0, 1.0};
Point(74) = {-0.009227, -0.749457, 0, 1.0};
Point(75) = {-0.001585, -0.749761, 0, 1.0};
Point(76) = {0.005965, -0.749952, 0, 1.0};
Point(77) = {0.013359, -0.750000, 0, 1.0};
Point(78) = {0.020544, -0.749884, 0, 1.0};
Point(79) = {0.027463, -0.749593, 0, 1.0};
Point(80) = {0.034070, -0.749125, 0, 1.0};
Point(81) = {0.040312, -0.748484, 0, 1.0};
Point(82) = {0.046142, -0.747682, 0, 1.0};
Point(83) = {0.051511, -0.746728, 0, 1.0};
Point(84) = {0.056378, -0.745637, 0, 1.0};
Point(85) = {0.060711, -0.744425, 0, 1.0};
Point(86) = {0.064481, -0.743111, 0, 1.0};
Point(87) = {0.067669, -0.741727, 0, 1.0};
Point(88) = {0.070265, -0.740299, 0, 1.0};
Point(89) = {0.072262, -0.738873, 0, 1.0};
Point(90) = {0.073662, -0.737496, 0, 1.0};
Point(91) = {0.074476, -0.736238, 0, 1.0};
Point(92) = {0.074714, -0.735221, 0, 1.0};
Point(93) = {0.074197, -0.734576, 0, 1.0};
Point(94) = {0.072785, -0.734236, 0, 1.0};
Point(95) = {0.070513, -0.734101, 0, 1.0};
Point(96) = {0.067384, -0.734141, 0, 1.0};
Point(97) = {0.063443, -0.734309, 0, 1.0};
Point(98) = {0.058755, -0.734578, 0, 1.0};
Point(99) = {0.053389, -0.734936, 0, 1.0};
Point(100) = {0.047414, -0.735375, 0, 1.0};
Point(101) = {0.040910, -0.735892, 0, 1.0};
Point(102) = {0.033946, -0.736481, 0, 1.0};
Point(103) = {0.026604, -0.737134, 0, 1.0};
Point(104) = {0.018964, -0.737843, 0, 1.0};
Point(105) = {0.011114, -0.738595, 0, 1.0};
Point(106) = {0.003142, -0.739380, 0, 1.0};
Point(107) = {-0.004863, -0.740186, 0, 1.0};
Point(108) = {-0.012807, -0.741006, 0, 1.0};
Point(109) = {-0.020603, -0.741825, 0, 1.0};
Point(110) = {-0.028158, -0.742634, 0, 1.0};
Point(111) = {-0.035391, -0.743424, 0, 1.0};
Point(112) = {-0.042216, -0.744185, 0, 1.0};
Point(113) = {-0.048555, -0.744907, 0, 1.0};
Point(114) = {-0.054335, -0.745583, 0, 1.0};
Point(115) = {-0.059489, -0.746208, 0, 1.0};
Point(116) = {-0.063957, -0.746775, 0, 1.0};
Point(117) = {-0.067690, -0.747287, 0, 1.0};
Point(118) = {-0.070666, -0.747742, 0, 1.0};
Point(119) = {-0.072870, -0.748099, 0, 1.0};
Point(120) = {-0.074241, -0.748314, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html