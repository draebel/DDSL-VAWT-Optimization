SetFactory("OpenCASCADE");

Point(1) = {0.110362, 0.744844, 0, 1.0};
Point(2) = {0.109800, 0.744933, 0, 1.0};
Point(3) = {0.108211, 0.745245, 0, 1.0};
Point(4) = {0.105791, 0.745784, 0, 1.0};
Point(5) = {0.102686, 0.746423, 0, 1.0};
Point(6) = {0.098918, 0.747016, 0, 1.0};
Point(7) = {0.094437, 0.747520, 0, 1.0};
Point(8) = {0.089261, 0.747976, 0, 1.0};
Point(9) = {0.083468, 0.748405, 0, 1.0};
Point(10) = {0.077144, 0.748806, 0, 1.0};
Point(11) = {0.070381, 0.749174, 0, 1.0};
Point(12) = {0.063279, 0.749498, 0, 1.0};
Point(13) = {0.055936, 0.749759, 0, 1.0};
Point(14) = {0.048453, 0.749935, 0, 1.0};
Point(15) = {0.040926, 0.750000, 0, 1.0};
Point(16) = {0.033452, 0.749926, 0, 1.0};
Point(17) = {0.026116, 0.749683, 0, 1.0};
Point(18) = {0.019004, 0.749239, 0, 1.0};
Point(19) = {0.012189, 0.748558, 0, 1.0};
Point(20) = {0.005718, 0.747595, 0, 1.0};
Point(21) = {-0.000380, 0.746335, 0, 1.0};
Point(22) = {-0.006085, 0.744777, 0, 1.0};
Point(23) = {-0.011384, 0.742934, 0, 1.0};
Point(24) = {-0.016266, 0.740847, 0, 1.0};
Point(25) = {-0.020704, 0.738560, 0, 1.0};
Point(26) = {-0.024673, 0.736125, 0, 1.0};
Point(27) = {-0.028149, 0.733592, 0, 1.0};
Point(28) = {-0.031106, 0.731016, 0, 1.0};
Point(29) = {-0.033523, 0.728453, 0, 1.0};
Point(30) = {-0.035383, 0.725961, 0, 1.0};
Point(31) = {-0.036673, 0.723603, 0, 1.0};
Point(32) = {-0.037383, 0.721453, 0, 1.0};
Point(33) = {-0.037502, 0.719615, 0, 1.0};
Point(34) = {-0.036845, 0.718219, 0, 1.0};
Point(35) = {-0.035293, 0.717145, 0, 1.0};
Point(36) = {-0.032946, 0.716232, 0, 1.0};
Point(37) = {-0.029891, 0.715518, 0, 1.0};
Point(38) = {-0.026181, 0.715027, 0, 1.0};
Point(39) = {-0.021867, 0.714769, 0, 1.0};
Point(40) = {-0.017008, 0.714757, 0, 1.0};
Point(41) = {-0.011676, 0.715001, 0, 1.0};
Point(42) = {-0.005946, 0.715521, 0, 1.0};
Point(43) = {0.000098, 0.716342, 0, 1.0};
Point(44) = {0.006363, 0.717530, 0, 1.0};
Point(45) = {0.012822, 0.719219, 0, 1.0};
Point(46) = {0.019613, 0.721481, 0, 1.0};
Point(47) = {0.026887, 0.724179, 0, 1.0};
Point(48) = {0.034629, 0.727065, 0, 1.0};
Point(49) = {0.042683, 0.729961, 0, 1.0};
Point(50) = {0.050894, 0.732778, 0, 1.0};
Point(51) = {0.059131, 0.735439, 0, 1.0};
Point(52) = {0.067254, 0.737863, 0, 1.0};
Point(53) = {0.075115, 0.739982, 0, 1.0};
Point(54) = {0.082556, 0.741747, 0, 1.0};
Point(55) = {0.089418, 0.743125, 0, 1.0};
Point(56) = {0.095545, 0.744110, 0, 1.0};
Point(57) = {0.100791, 0.744707, 0, 1.0};
Point(58) = {0.104992, 0.744951, 0, 1.0};
Point(59) = {0.108002, 0.744955, 0, 1.0};
Point(60) = {0.109779, 0.744881, 0, 1.0};
Point(61) = {-0.110362, -0.744844, 0, 1.0};
Point(62) = {-0.109800, -0.744933, 0, 1.0};
Point(63) = {-0.108211, -0.745245, 0, 1.0};
Point(64) = {-0.105791, -0.745784, 0, 1.0};
Point(65) = {-0.102686, -0.746423, 0, 1.0};
Point(66) = {-0.098918, -0.747016, 0, 1.0};
Point(67) = {-0.094437, -0.747520, 0, 1.0};
Point(68) = {-0.089261, -0.747976, 0, 1.0};
Point(69) = {-0.083468, -0.748405, 0, 1.0};
Point(70) = {-0.077144, -0.748806, 0, 1.0};
Point(71) = {-0.070381, -0.749174, 0, 1.0};
Point(72) = {-0.063279, -0.749498, 0, 1.0};
Point(73) = {-0.055936, -0.749759, 0, 1.0};
Point(74) = {-0.048453, -0.749935, 0, 1.0};
Point(75) = {-0.040926, -0.750000, 0, 1.0};
Point(76) = {-0.033452, -0.749926, 0, 1.0};
Point(77) = {-0.026116, -0.749683, 0, 1.0};
Point(78) = {-0.019004, -0.749239, 0, 1.0};
Point(79) = {-0.012189, -0.748558, 0, 1.0};
Point(80) = {-0.005718, -0.747595, 0, 1.0};
Point(81) = {0.000380, -0.746335, 0, 1.0};
Point(82) = {0.006085, -0.744777, 0, 1.0};
Point(83) = {0.011384, -0.742934, 0, 1.0};
Point(84) = {0.016266, -0.740847, 0, 1.0};
Point(85) = {0.020704, -0.738560, 0, 1.0};
Point(86) = {0.024673, -0.736125, 0, 1.0};
Point(87) = {0.028149, -0.733592, 0, 1.0};
Point(88) = {0.031106, -0.731016, 0, 1.0};
Point(89) = {0.033523, -0.728453, 0, 1.0};
Point(90) = {0.035383, -0.725961, 0, 1.0};
Point(91) = {0.036673, -0.723603, 0, 1.0};
Point(92) = {0.037383, -0.721453, 0, 1.0};
Point(93) = {0.037502, -0.719615, 0, 1.0};
Point(94) = {0.036845, -0.718219, 0, 1.0};
Point(95) = {0.035293, -0.717145, 0, 1.0};
Point(96) = {0.032946, -0.716232, 0, 1.0};
Point(97) = {0.029891, -0.715518, 0, 1.0};
Point(98) = {0.026181, -0.715027, 0, 1.0};
Point(99) = {0.021867, -0.714769, 0, 1.0};
Point(100) = {0.017008, -0.714757, 0, 1.0};
Point(101) = {0.011676, -0.715001, 0, 1.0};
Point(102) = {0.005946, -0.715521, 0, 1.0};
Point(103) = {-0.000098, -0.716342, 0, 1.0};
Point(104) = {-0.006363, -0.717530, 0, 1.0};
Point(105) = {-0.012822, -0.719219, 0, 1.0};
Point(106) = {-0.019613, -0.721481, 0, 1.0};
Point(107) = {-0.026887, -0.724179, 0, 1.0};
Point(108) = {-0.034629, -0.727065, 0, 1.0};
Point(109) = {-0.042683, -0.729961, 0, 1.0};
Point(110) = {-0.050894, -0.732778, 0, 1.0};
Point(111) = {-0.059131, -0.735439, 0, 1.0};
Point(112) = {-0.067254, -0.737863, 0, 1.0};
Point(113) = {-0.075115, -0.739982, 0, 1.0};
Point(114) = {-0.082556, -0.741747, 0, 1.0};
Point(115) = {-0.089418, -0.743125, 0, 1.0};
Point(116) = {-0.095545, -0.744110, 0, 1.0};
Point(117) = {-0.100791, -0.744707, 0, 1.0};
Point(118) = {-0.104992, -0.744951, 0, 1.0};
Point(119) = {-0.108002, -0.744955, 0, 1.0};
Point(120) = {-0.109779, -0.744881, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html