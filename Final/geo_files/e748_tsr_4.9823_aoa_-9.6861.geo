SetFactory("OpenCASCADE");

Point(1) = {0.073574, 0.746562, 0, 1.0};
Point(2) = {0.073200, 0.746622, 0, 1.0};
Point(3) = {0.072141, 0.746830, 0, 1.0};
Point(4) = {0.070527, 0.747190, 0, 1.0};
Point(5) = {0.068457, 0.747615, 0, 1.0};
Point(6) = {0.065945, 0.748010, 0, 1.0};
Point(7) = {0.062958, 0.748347, 0, 1.0};
Point(8) = {0.059508, 0.748650, 0, 1.0};
Point(9) = {0.055645, 0.748937, 0, 1.0};
Point(10) = {0.051429, 0.749204, 0, 1.0};
Point(11) = {0.046921, 0.749449, 0, 1.0};
Point(12) = {0.042186, 0.749665, 0, 1.0};
Point(13) = {0.037291, 0.749839, 0, 1.0};
Point(14) = {0.032302, 0.749957, 0, 1.0};
Point(15) = {0.027284, 0.750000, 0, 1.0};
Point(16) = {0.022301, 0.749951, 0, 1.0};
Point(17) = {0.017411, 0.749789, 0, 1.0};
Point(18) = {0.012669, 0.749493, 0, 1.0};
Point(19) = {0.008126, 0.749039, 0, 1.0};
Point(20) = {0.003812, 0.748397, 0, 1.0};
Point(21) = {-0.000253, 0.747557, 0, 1.0};
Point(22) = {-0.004057, 0.746518, 0, 1.0};
Point(23) = {-0.007589, 0.745289, 0, 1.0};
Point(24) = {-0.010844, 0.743898, 0, 1.0};
Point(25) = {-0.013802, 0.742373, 0, 1.0};
Point(26) = {-0.016449, 0.740750, 0, 1.0};
Point(27) = {-0.018766, 0.739061, 0, 1.0};
Point(28) = {-0.020737, 0.737344, 0, 1.0};
Point(29) = {-0.022349, 0.735636, 0, 1.0};
Point(30) = {-0.023589, 0.733974, 0, 1.0};
Point(31) = {-0.024448, 0.732402, 0, 1.0};
Point(32) = {-0.024922, 0.730969, 0, 1.0};
Point(33) = {-0.025001, 0.729743, 0, 1.0};
Point(34) = {-0.024563, 0.728813, 0, 1.0};
Point(35) = {-0.023529, 0.728096, 0, 1.0};
Point(36) = {-0.021964, 0.727488, 0, 1.0};
Point(37) = {-0.019927, 0.727012, 0, 1.0};
Point(38) = {-0.017454, 0.726684, 0, 1.0};
Point(39) = {-0.014578, 0.726513, 0, 1.0};
Point(40) = {-0.011338, 0.726505, 0, 1.0};
Point(41) = {-0.007784, 0.726667, 0, 1.0};
Point(42) = {-0.003964, 0.727014, 0, 1.0};
Point(43) = {0.000065, 0.727562, 0, 1.0};
Point(44) = {0.004242, 0.728354, 0, 1.0};
Point(45) = {0.008548, 0.729479, 0, 1.0};
Point(46) = {0.013075, 0.730987, 0, 1.0};
Point(47) = {0.017925, 0.732786, 0, 1.0};
Point(48) = {0.023086, 0.734710, 0, 1.0};
Point(49) = {0.028456, 0.736641, 0, 1.0};
Point(50) = {0.033930, 0.738518, 0, 1.0};
Point(51) = {0.039420, 0.740293, 0, 1.0};
Point(52) = {0.044836, 0.741909, 0, 1.0};
Point(53) = {0.050077, 0.743322, 0, 1.0};
Point(54) = {0.055037, 0.744498, 0, 1.0};
Point(55) = {0.059612, 0.745417, 0, 1.0};
Point(56) = {0.063697, 0.746073, 0, 1.0};
Point(57) = {0.067194, 0.746472, 0, 1.0};
Point(58) = {0.069994, 0.746634, 0, 1.0};
Point(59) = {0.072001, 0.746637, 0, 1.0};
Point(60) = {0.073186, 0.746587, 0, 1.0};
Point(61) = {-0.073574, -0.746562, 0, 1.0};
Point(62) = {-0.073200, -0.746622, 0, 1.0};
Point(63) = {-0.072141, -0.746830, 0, 1.0};
Point(64) = {-0.070527, -0.747190, 0, 1.0};
Point(65) = {-0.068457, -0.747615, 0, 1.0};
Point(66) = {-0.065945, -0.748010, 0, 1.0};
Point(67) = {-0.062958, -0.748347, 0, 1.0};
Point(68) = {-0.059508, -0.748650, 0, 1.0};
Point(69) = {-0.055645, -0.748937, 0, 1.0};
Point(70) = {-0.051429, -0.749204, 0, 1.0};
Point(71) = {-0.046921, -0.749449, 0, 1.0};
Point(72) = {-0.042186, -0.749665, 0, 1.0};
Point(73) = {-0.037291, -0.749839, 0, 1.0};
Point(74) = {-0.032302, -0.749957, 0, 1.0};
Point(75) = {-0.027284, -0.750000, 0, 1.0};
Point(76) = {-0.022301, -0.749951, 0, 1.0};
Point(77) = {-0.017411, -0.749789, 0, 1.0};
Point(78) = {-0.012669, -0.749493, 0, 1.0};
Point(79) = {-0.008126, -0.749039, 0, 1.0};
Point(80) = {-0.003812, -0.748397, 0, 1.0};
Point(81) = {0.000253, -0.747557, 0, 1.0};
Point(82) = {0.004057, -0.746518, 0, 1.0};
Point(83) = {0.007589, -0.745289, 0, 1.0};
Point(84) = {0.010844, -0.743898, 0, 1.0};
Point(85) = {0.013802, -0.742373, 0, 1.0};
Point(86) = {0.016449, -0.740750, 0, 1.0};
Point(87) = {0.018766, -0.739061, 0, 1.0};
Point(88) = {0.020737, -0.737344, 0, 1.0};
Point(89) = {0.022349, -0.735636, 0, 1.0};
Point(90) = {0.023589, -0.733974, 0, 1.0};
Point(91) = {0.024448, -0.732402, 0, 1.0};
Point(92) = {0.024922, -0.730969, 0, 1.0};
Point(93) = {0.025001, -0.729743, 0, 1.0};
Point(94) = {0.024563, -0.728813, 0, 1.0};
Point(95) = {0.023529, -0.728096, 0, 1.0};
Point(96) = {0.021964, -0.727488, 0, 1.0};
Point(97) = {0.019927, -0.727012, 0, 1.0};
Point(98) = {0.017454, -0.726684, 0, 1.0};
Point(99) = {0.014578, -0.726513, 0, 1.0};
Point(100) = {0.011338, -0.726505, 0, 1.0};
Point(101) = {0.007784, -0.726667, 0, 1.0};
Point(102) = {0.003964, -0.727014, 0, 1.0};
Point(103) = {-0.000065, -0.727562, 0, 1.0};
Point(104) = {-0.004242, -0.728354, 0, 1.0};
Point(105) = {-0.008548, -0.729479, 0, 1.0};
Point(106) = {-0.013075, -0.730987, 0, 1.0};
Point(107) = {-0.017925, -0.732786, 0, 1.0};
Point(108) = {-0.023086, -0.734710, 0, 1.0};
Point(109) = {-0.028456, -0.736641, 0, 1.0};
Point(110) = {-0.033930, -0.738518, 0, 1.0};
Point(111) = {-0.039420, -0.740293, 0, 1.0};
Point(112) = {-0.044836, -0.741909, 0, 1.0};
Point(113) = {-0.050077, -0.743322, 0, 1.0};
Point(114) = {-0.055037, -0.744498, 0, 1.0};
Point(115) = {-0.059612, -0.745417, 0, 1.0};
Point(116) = {-0.063697, -0.746073, 0, 1.0};
Point(117) = {-0.067194, -0.746472, 0, 1.0};
Point(118) = {-0.069994, -0.746634, 0, 1.0};
Point(119) = {-0.072001, -0.746637, 0, 1.0};
Point(120) = {-0.073186, -0.746587, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 23 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html