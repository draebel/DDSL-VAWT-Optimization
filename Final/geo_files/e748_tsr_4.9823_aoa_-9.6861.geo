SetFactory("OpenCASCADE");

Point(1) = {0.147149, 0.743125, 0, 1.0};
Point(2) = {0.146400, 0.743244, 0, 1.0};
Point(3) = {0.144282, 0.743660, 0, 1.0};
Point(4) = {0.141055, 0.744379, 0, 1.0};
Point(5) = {0.136915, 0.745231, 0, 1.0};
Point(6) = {0.131890, 0.746021, 0, 1.0};
Point(7) = {0.125916, 0.746693, 0, 1.0};
Point(8) = {0.119015, 0.747301, 0, 1.0};
Point(9) = {0.111291, 0.747873, 0, 1.0};
Point(10) = {0.102859, 0.748408, 0, 1.0};
Point(11) = {0.093842, 0.748898, 0, 1.0};
Point(12) = {0.084372, 0.749331, 0, 1.0};
Point(13) = {0.074582, 0.749679, 0, 1.0};
Point(14) = {0.064604, 0.749913, 0, 1.0};
Point(15) = {0.054568, 0.750000, 0, 1.0};
Point(16) = {0.044603, 0.749902, 0, 1.0};
Point(17) = {0.034822, 0.749578, 0, 1.0};
Point(18) = {0.025338, 0.748986, 0, 1.0};
Point(19) = {0.016251, 0.748078, 0, 1.0};
Point(20) = {0.007624, 0.746794, 0, 1.0};
Point(21) = {-0.000507, 0.745114, 0, 1.0};
Point(22) = {-0.008114, 0.743036, 0, 1.0};
Point(23) = {-0.015179, 0.740579, 0, 1.0};
Point(24) = {-0.021687, 0.737796, 0, 1.0};
Point(25) = {-0.027605, 0.734747, 0, 1.0};
Point(26) = {-0.032898, 0.731500, 0, 1.0};
Point(27) = {-0.037532, 0.728122, 0, 1.0};
Point(28) = {-0.041474, 0.724688, 0, 1.0};
Point(29) = {-0.044697, 0.721271, 0, 1.0};
Point(30) = {-0.047177, 0.717948, 0, 1.0};
Point(31) = {-0.048897, 0.714804, 0, 1.0};
Point(32) = {-0.049844, 0.711938, 0, 1.0};
Point(33) = {-0.050002, 0.709486, 0, 1.0};
Point(34) = {-0.049126, 0.707625, 0, 1.0};
Point(35) = {-0.047058, 0.706193, 0, 1.0};
Point(36) = {-0.043929, 0.704976, 0, 1.0};
Point(37) = {-0.039854, 0.704024, 0, 1.0};
Point(38) = {-0.034908, 0.703369, 0, 1.0};
Point(39) = {-0.029156, 0.703026, 0, 1.0};
Point(40) = {-0.022677, 0.703010, 0, 1.0};
Point(41) = {-0.015568, 0.703334, 0, 1.0};
Point(42) = {-0.007928, 0.704028, 0, 1.0};
Point(43) = {0.000131, 0.705123, 0, 1.0};
Point(44) = {0.008483, 0.706707, 0, 1.0};
Point(45) = {0.017095, 0.708958, 0, 1.0};
Point(46) = {0.026151, 0.711975, 0, 1.0};
Point(47) = {0.035850, 0.715572, 0, 1.0};
Point(48) = {0.046172, 0.719419, 0, 1.0};
Point(49) = {0.056911, 0.723281, 0, 1.0};
Point(50) = {0.067859, 0.727037, 0, 1.0};
Point(51) = {0.078841, 0.730585, 0, 1.0};
Point(52) = {0.089671, 0.733817, 0, 1.0};
Point(53) = {0.100153, 0.736643, 0, 1.0};
Point(54) = {0.110075, 0.738996, 0, 1.0};
Point(55) = {0.119224, 0.740834, 0, 1.0};
Point(56) = {0.127394, 0.742147, 0, 1.0};
Point(57) = {0.134388, 0.742943, 0, 1.0};
Point(58) = {0.139989, 0.743268, 0, 1.0};
Point(59) = {0.144003, 0.743274, 0, 1.0};
Point(60) = {0.146371, 0.743175, 0, 1.0};
Point(61) = {-0.147149, -0.743125, 0, 1.0};
Point(62) = {-0.146400, -0.743244, 0, 1.0};
Point(63) = {-0.144282, -0.743660, 0, 1.0};
Point(64) = {-0.141055, -0.744379, 0, 1.0};
Point(65) = {-0.136915, -0.745231, 0, 1.0};
Point(66) = {-0.131890, -0.746021, 0, 1.0};
Point(67) = {-0.125916, -0.746693, 0, 1.0};
Point(68) = {-0.119015, -0.747301, 0, 1.0};
Point(69) = {-0.111291, -0.747873, 0, 1.0};
Point(70) = {-0.102859, -0.748408, 0, 1.0};
Point(71) = {-0.093842, -0.748898, 0, 1.0};
Point(72) = {-0.084372, -0.749331, 0, 1.0};
Point(73) = {-0.074582, -0.749679, 0, 1.0};
Point(74) = {-0.064604, -0.749913, 0, 1.0};
Point(75) = {-0.054568, -0.750000, 0, 1.0};
Point(76) = {-0.044603, -0.749902, 0, 1.0};
Point(77) = {-0.034822, -0.749578, 0, 1.0};
Point(78) = {-0.025338, -0.748986, 0, 1.0};
Point(79) = {-0.016251, -0.748078, 0, 1.0};
Point(80) = {-0.007624, -0.746794, 0, 1.0};
Point(81) = {0.000507, -0.745114, 0, 1.0};
Point(82) = {0.008114, -0.743036, 0, 1.0};
Point(83) = {0.015179, -0.740579, 0, 1.0};
Point(84) = {0.021687, -0.737796, 0, 1.0};
Point(85) = {0.027605, -0.734747, 0, 1.0};
Point(86) = {0.032898, -0.731500, 0, 1.0};
Point(87) = {0.037532, -0.728122, 0, 1.0};
Point(88) = {0.041474, -0.724688, 0, 1.0};
Point(89) = {0.044697, -0.721271, 0, 1.0};
Point(90) = {0.047177, -0.717948, 0, 1.0};
Point(91) = {0.048897, -0.714804, 0, 1.0};
Point(92) = {0.049844, -0.711938, 0, 1.0};
Point(93) = {0.050002, -0.709486, 0, 1.0};
Point(94) = {0.049126, -0.707625, 0, 1.0};
Point(95) = {0.047058, -0.706193, 0, 1.0};
Point(96) = {0.043929, -0.704976, 0, 1.0};
Point(97) = {0.039854, -0.704024, 0, 1.0};
Point(98) = {0.034908, -0.703369, 0, 1.0};
Point(99) = {0.029156, -0.703026, 0, 1.0};
Point(100) = {0.022677, -0.703010, 0, 1.0};
Point(101) = {0.015568, -0.703334, 0, 1.0};
Point(102) = {0.007928, -0.704028, 0, 1.0};
Point(103) = {-0.000131, -0.705123, 0, 1.0};
Point(104) = {-0.008483, -0.706707, 0, 1.0};
Point(105) = {-0.017095, -0.708958, 0, 1.0};
Point(106) = {-0.026151, -0.711975, 0, 1.0};
Point(107) = {-0.035850, -0.715572, 0, 1.0};
Point(108) = {-0.046172, -0.719419, 0, 1.0};
Point(109) = {-0.056911, -0.723281, 0, 1.0};
Point(110) = {-0.067859, -0.727037, 0, 1.0};
Point(111) = {-0.078841, -0.730585, 0, 1.0};
Point(112) = {-0.089671, -0.733817, 0, 1.0};
Point(113) = {-0.100153, -0.736643, 0, 1.0};
Point(114) = {-0.110075, -0.738996, 0, 1.0};
Point(115) = {-0.119224, -0.740834, 0, 1.0};
Point(116) = {-0.127394, -0.742147, 0, 1.0};
Point(117) = {-0.134388, -0.742943, 0, 1.0};
Point(118) = {-0.139989, -0.743268, 0, 1.0};
Point(119) = {-0.144003, -0.743274, 0, 1.0};
Point(120) = {-0.146371, -0.743175, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:43};
Spline(3) = {43:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:81};
Spline(6) = {81:103};
Spline(7) = {103:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 46 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html