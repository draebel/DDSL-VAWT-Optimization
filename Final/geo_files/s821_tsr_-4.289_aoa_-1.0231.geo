SetFactory("OpenCASCADE");

Point(1) = {0.074939, 0.737409, 0, 1.0};
Point(2) = {0.074586, 0.737520, 0, 1.0};
Point(3) = {0.070501, 0.738752, 0, 1.0};
Point(4) = {0.065747, 0.739967, 0, 1.0};
Point(5) = {0.060273, 0.741150, 0, 1.0};
Point(6) = {0.054140, 0.742342, 0, 1.0};
Point(7) = {0.047443, 0.743539, 0, 1.0};
Point(8) = {0.040279, 0.744722, 0, 1.0};
Point(9) = {0.032748, 0.745865, 0, 1.0};
Point(10) = {0.024948, 0.746935, 0, 1.0};
Point(11) = {0.016978, 0.747900, 0, 1.0};
Point(12) = {0.008930, 0.748723, 0, 1.0};
Point(13) = {0.000895, 0.749368, 0, 1.0};
Point(14) = {-0.007044, 0.749804, 0, 1.0};
Point(15) = {-0.014810, 0.750000, 0, 1.0};
Point(16) = {-0.022331, 0.749931, 0, 1.0};
Point(17) = {-0.029542, 0.749576, 0, 1.0};
Point(18) = {-0.036393, 0.748901, 0, 1.0};
Point(19) = {-0.042890, 0.747927, 0, 1.0};
Point(20) = {-0.048971, 0.746714, 0, 1.0};
Point(21) = {-0.054566, 0.745295, 0, 1.0};
Point(22) = {-0.059611, 0.743701, 0, 1.0};
Point(23) = {-0.064042, 0.741957, 0, 1.0};
Point(24) = {-0.067810, 0.740091, 0, 1.0};
Point(25) = {-0.070853, 0.738130, 0, 1.0};
Point(26) = {-0.073146, 0.736102, 0, 1.0};
Point(27) = {-0.074397, 0.734466, 0, 1.0};
Point(28) = {-0.074603, 0.734083, 0, 1.0};
Point(29) = {-0.074659, 0.733966, 0, 1.0};
Point(30) = {-0.074847, 0.733472, 0, 1.0};
Point(31) = {-0.074949, 0.732957, 0, 1.0};
Point(32) = {-0.074991, 0.732406, 0, 1.0};
Point(33) = {-0.074988, 0.731967, 0, 1.0};
Point(34) = {-0.074550, 0.729469, 0, 1.0};
Point(35) = {-0.073474, 0.726739, 0, 1.0};
Point(36) = {-0.071851, 0.723867, 0, 1.0};
Point(37) = {-0.069756, 0.720994, 0, 1.0};
Point(38) = {-0.067214, 0.718215, 0, 1.0};
Point(39) = {-0.064276, 0.715645, 0, 1.0};
Point(40) = {-0.060971, 0.713390, 0, 1.0};
Point(41) = {-0.057306, 0.711620, 0, 1.0};
Point(42) = {-0.053185, 0.710368, 0, 1.0};
Point(43) = {-0.048653, 0.709732, 0, 1.0};
Point(44) = {-0.043550, 0.709742, 0, 1.0};
Point(45) = {-0.037876, 0.710311, 0, 1.0};
Point(46) = {-0.031652, 0.711406, 0, 1.0};
Point(47) = {-0.024893, 0.712984, 0, 1.0};
Point(48) = {-0.017620, 0.714986, 0, 1.0};
Point(49) = {-0.009862, 0.717336, 0, 1.0};
Point(50) = {-0.001663, 0.719934, 0, 1.0};
Point(51) = {0.006908, 0.722667, 0, 1.0};
Point(52) = {0.015761, 0.725409, 0, 1.0};
Point(53) = {0.024774, 0.728030, 0, 1.0};
Point(54) = {0.033793, 0.730405, 0, 1.0};
Point(55) = {0.042639, 0.732429, 0, 1.0};
Point(56) = {0.051108, 0.734021, 0, 1.0};
Point(57) = {0.058981, 0.735136, 0, 1.0};
Point(58) = {0.066040, 0.735773, 0, 1.0};
Point(59) = {0.072078, 0.735975, 0, 1.0};
Point(60) = {0.074965, 0.735930, 0, 1.0};
Point(61) = {-0.074939, -0.737409, 0, 1.0};
Point(62) = {-0.074586, -0.737520, 0, 1.0};
Point(63) = {-0.070501, -0.738752, 0, 1.0};
Point(64) = {-0.065747, -0.739967, 0, 1.0};
Point(65) = {-0.060273, -0.741150, 0, 1.0};
Point(66) = {-0.054140, -0.742342, 0, 1.0};
Point(67) = {-0.047443, -0.743539, 0, 1.0};
Point(68) = {-0.040279, -0.744722, 0, 1.0};
Point(69) = {-0.032748, -0.745865, 0, 1.0};
Point(70) = {-0.024948, -0.746935, 0, 1.0};
Point(71) = {-0.016978, -0.747900, 0, 1.0};
Point(72) = {-0.008930, -0.748723, 0, 1.0};
Point(73) = {-0.000895, -0.749368, 0, 1.0};
Point(74) = {0.007044, -0.749804, 0, 1.0};
Point(75) = {0.014810, -0.750000, 0, 1.0};
Point(76) = {0.022331, -0.749931, 0, 1.0};
Point(77) = {0.029542, -0.749576, 0, 1.0};
Point(78) = {0.036393, -0.748901, 0, 1.0};
Point(79) = {0.042890, -0.747927, 0, 1.0};
Point(80) = {0.048971, -0.746714, 0, 1.0};
Point(81) = {0.054566, -0.745295, 0, 1.0};
Point(82) = {0.059611, -0.743701, 0, 1.0};
Point(83) = {0.064042, -0.741957, 0, 1.0};
Point(84) = {0.067810, -0.740091, 0, 1.0};
Point(85) = {0.070853, -0.738130, 0, 1.0};
Point(86) = {0.073146, -0.736102, 0, 1.0};
Point(87) = {0.074397, -0.734466, 0, 1.0};
Point(88) = {0.074603, -0.734083, 0, 1.0};
Point(89) = {0.074659, -0.733966, 0, 1.0};
Point(90) = {0.074847, -0.733472, 0, 1.0};
Point(91) = {0.074949, -0.732957, 0, 1.0};
Point(92) = {0.074991, -0.732406, 0, 1.0};
Point(93) = {0.074988, -0.731967, 0, 1.0};
Point(94) = {0.074550, -0.729469, 0, 1.0};
Point(95) = {0.073474, -0.726739, 0, 1.0};
Point(96) = {0.071851, -0.723867, 0, 1.0};
Point(97) = {0.069756, -0.720994, 0, 1.0};
Point(98) = {0.067214, -0.718215, 0, 1.0};
Point(99) = {0.064276, -0.715645, 0, 1.0};
Point(100) = {0.060971, -0.713390, 0, 1.0};
Point(101) = {0.057306, -0.711620, 0, 1.0};
Point(102) = {0.053185, -0.710368, 0, 1.0};
Point(103) = {0.048653, -0.709732, 0, 1.0};
Point(104) = {0.043550, -0.709742, 0, 1.0};
Point(105) = {0.037876, -0.710311, 0, 1.0};
Point(106) = {0.031652, -0.711406, 0, 1.0};
Point(107) = {0.024893, -0.712984, 0, 1.0};
Point(108) = {0.017620, -0.714986, 0, 1.0};
Point(109) = {0.009862, -0.717336, 0, 1.0};
Point(110) = {0.001663, -0.719934, 0, 1.0};
Point(111) = {-0.006908, -0.722667, 0, 1.0};
Point(112) = {-0.015761, -0.725409, 0, 1.0};
Point(113) = {-0.024774, -0.728030, 0, 1.0};
Point(114) = {-0.033793, -0.730405, 0, 1.0};
Point(115) = {-0.042639, -0.732429, 0, 1.0};
Point(116) = {-0.051108, -0.734021, 0, 1.0};
Point(117) = {-0.058981, -0.735136, 0, 1.0};
Point(118) = {-0.066040, -0.735773, 0, 1.0};
Point(119) = {-0.072078, -0.735975, 0, 1.0};
Point(120) = {-0.074965, -0.735930, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:45};
Spline(3) = {45:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:78};
Spline(6) = {78:105};
Spline(7) = {105:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 35 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html