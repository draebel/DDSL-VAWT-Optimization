SetFactory("OpenCASCADE");

Point(1) = {0.147862, 0.714211, 0, 1.0};
Point(2) = {0.147211, 0.714404, 0, 1.0};
Point(3) = {0.145334, 0.714998, 0, 1.0};
Point(4) = {0.142365, 0.715976, 0, 1.0};
Point(5) = {0.138384, 0.717266, 0, 1.0};
Point(6) = {0.133427, 0.718817, 0, 1.0};
Point(7) = {0.127558, 0.720625, 0, 1.0};
Point(8) = {0.120870, 0.722652, 0, 1.0};
Point(9) = {0.113452, 0.724855, 0, 1.0};
Point(10) = {0.105397, 0.727191, 0, 1.0};
Point(11) = {0.096800, 0.729610, 0, 1.0};
Point(12) = {0.087757, 0.732067, 0, 1.0};
Point(13) = {0.078366, 0.734513, 0, 1.0};
Point(14) = {0.068724, 0.736898, 0, 1.0};
Point(15) = {0.058931, 0.739185, 0, 1.0};
Point(16) = {0.049080, 0.741326, 0, 1.0};
Point(17) = {0.039270, 0.743292, 0, 1.0};
Point(18) = {0.029590, 0.745044, 0, 1.0};
Point(19) = {0.020134, 0.746561, 0, 1.0};
Point(20) = {0.010987, 0.747817, 0, 1.0};
Point(21) = {0.002233, 0.748796, 0, 1.0};
Point(22) = {-0.006053, 0.749487, 0, 1.0};
Point(23) = {-0.013795, 0.749889, 0, 1.0};
Point(24) = {-0.020927, 0.750000, 0, 1.0};
Point(25) = {-0.027389, 0.749830, 0, 1.0};
Point(26) = {-0.033124, 0.749394, 0, 1.0};
Point(27) = {-0.038089, 0.748713, 0, 1.0};
Point(28) = {-0.042236, 0.747814, 0, 1.0};
Point(29) = {-0.045541, 0.746734, 0, 1.0};
Point(30) = {-0.047975, 0.745528, 0, 1.0};
Point(31) = {-0.049507, 0.744268, 0, 1.0};
Point(32) = {-0.050008, 0.743127, 0, 1.0};
Point(33) = {-0.049341, 0.741951, 0, 1.0};
Point(34) = {-0.047583, 0.740546, 0, 1.0};
Point(35) = {-0.044842, 0.739046, 0, 1.0};
Point(36) = {-0.041146, 0.737503, 0, 1.0};
Point(37) = {-0.036520, 0.735958, 0, 1.0};
Point(38) = {-0.030991, 0.734431, 0, 1.0};
Point(39) = {-0.024605, 0.732948, 0, 1.0};
Point(40) = {-0.017412, 0.731522, 0, 1.0};
Point(41) = {-0.009478, 0.730158, 0, 1.0};
Point(42) = {-0.000875, 0.728868, 0, 1.0};
Point(43) = {0.008320, 0.727648, 0, 1.0};
Point(44) = {0.018008, 0.726501, 0, 1.0};
Point(45) = {0.028095, 0.725422, 0, 1.0};
Point(46) = {0.038469, 0.724407, 0, 1.0};
Point(47) = {0.049021, 0.723450, 0, 1.0};
Point(48) = {0.059628, 0.722543, 0, 1.0};
Point(49) = {0.070169, 0.721681, 0, 1.0};
Point(50) = {0.080521, 0.720858, 0, 1.0};
Point(51) = {0.090561, 0.720066, 0, 1.0};
Point(52) = {0.100164, 0.719297, 0, 1.0};
Point(53) = {0.109206, 0.718553, 0, 1.0};
Point(54) = {0.117565, 0.717824, 0, 1.0};
Point(55) = {0.125125, 0.717116, 0, 1.0};
Point(56) = {0.131772, 0.716431, 0, 1.0};
Point(57) = {0.137395, 0.715778, 0, 1.0};
Point(58) = {0.141894, 0.715186, 0, 1.0};
Point(59) = {0.145181, 0.714689, 0, 1.0};
Point(60) = {0.147188, 0.714341, 0, 1.0};
Point(61) = {-0.147862, -0.714211, 0, 1.0};
Point(62) = {-0.147211, -0.714404, 0, 1.0};
Point(63) = {-0.145334, -0.714998, 0, 1.0};
Point(64) = {-0.142365, -0.715976, 0, 1.0};
Point(65) = {-0.138384, -0.717266, 0, 1.0};
Point(66) = {-0.133427, -0.718817, 0, 1.0};
Point(67) = {-0.127558, -0.720625, 0, 1.0};
Point(68) = {-0.120870, -0.722652, 0, 1.0};
Point(69) = {-0.113452, -0.724855, 0, 1.0};
Point(70) = {-0.105397, -0.727191, 0, 1.0};
Point(71) = {-0.096800, -0.729610, 0, 1.0};
Point(72) = {-0.087757, -0.732067, 0, 1.0};
Point(73) = {-0.078366, -0.734513, 0, 1.0};
Point(74) = {-0.068724, -0.736898, 0, 1.0};
Point(75) = {-0.058931, -0.739185, 0, 1.0};
Point(76) = {-0.049080, -0.741326, 0, 1.0};
Point(77) = {-0.039270, -0.743292, 0, 1.0};
Point(78) = {-0.029590, -0.745044, 0, 1.0};
Point(79) = {-0.020134, -0.746561, 0, 1.0};
Point(80) = {-0.010987, -0.747817, 0, 1.0};
Point(81) = {-0.002233, -0.748796, 0, 1.0};
Point(82) = {0.006053, -0.749487, 0, 1.0};
Point(83) = {0.013795, -0.749889, 0, 1.0};
Point(84) = {0.020927, -0.750000, 0, 1.0};
Point(85) = {0.027389, -0.749830, 0, 1.0};
Point(86) = {0.033124, -0.749394, 0, 1.0};
Point(87) = {0.038089, -0.748713, 0, 1.0};
Point(88) = {0.042236, -0.747814, 0, 1.0};
Point(89) = {0.045541, -0.746734, 0, 1.0};
Point(90) = {0.047975, -0.745528, 0, 1.0};
Point(91) = {0.049507, -0.744268, 0, 1.0};
Point(92) = {0.050008, -0.743127, 0, 1.0};
Point(93) = {0.049341, -0.741951, 0, 1.0};
Point(94) = {0.047583, -0.740546, 0, 1.0};
Point(95) = {0.044842, -0.739046, 0, 1.0};
Point(96) = {0.041146, -0.737503, 0, 1.0};
Point(97) = {0.036520, -0.735958, 0, 1.0};
Point(98) = {0.030991, -0.734431, 0, 1.0};
Point(99) = {0.024605, -0.732948, 0, 1.0};
Point(100) = {0.017412, -0.731522, 0, 1.0};
Point(101) = {0.009478, -0.730158, 0, 1.0};
Point(102) = {0.000875, -0.728868, 0, 1.0};
Point(103) = {-0.008320, -0.727648, 0, 1.0};
Point(104) = {-0.018008, -0.726501, 0, 1.0};
Point(105) = {-0.028095, -0.725422, 0, 1.0};
Point(106) = {-0.038469, -0.724407, 0, 1.0};
Point(107) = {-0.049021, -0.723450, 0, 1.0};
Point(108) = {-0.059628, -0.722543, 0, 1.0};
Point(109) = {-0.070169, -0.721681, 0, 1.0};
Point(110) = {-0.080521, -0.720858, 0, 1.0};
Point(111) = {-0.090561, -0.720066, 0, 1.0};
Point(112) = {-0.100164, -0.719297, 0, 1.0};
Point(113) = {-0.109206, -0.718553, 0, 1.0};
Point(114) = {-0.117565, -0.717824, 0, 1.0};
Point(115) = {-0.125125, -0.717116, 0, 1.0};
Point(116) = {-0.131772, -0.716431, 0, 1.0};
Point(117) = {-0.137395, -0.715778, 0, 1.0};
Point(118) = {-0.141894, -0.715186, 0, 1.0};
Point(119) = {-0.145181, -0.714689, 0, 1.0};
Point(120) = {-0.147188, -0.714341, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:20};
Spline(2) = {20:42};
Spline(3) = {42:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:80};
Spline(6) = {80:102};
Spline(7) = {102:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 44 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html