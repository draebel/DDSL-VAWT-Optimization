SetFactory("OpenCASCADE");

Point(1) = {0.074552, 0.750000, 0, 1.0};
Point(2) = {0.069621, 0.749173, 0, 1.0};
Point(3) = {0.068111, 0.749106, 0, 1.0};
Point(4) = {0.065606, 0.748926, 0, 1.0};
Point(5) = {0.062600, 0.748712, 0, 1.0};
Point(6) = {0.058592, 0.748425, 0, 1.0};
Point(7) = {0.053583, 0.748064, 0, 1.0};
Point(8) = {0.048574, 0.747700, 0, 1.0};
Point(9) = {0.043564, 0.747346, 0, 1.0};
Point(10) = {0.038553, 0.746992, 0, 1.0};
Point(11) = {0.033544, 0.746628, 0, 1.0};
Point(12) = {0.028537, 0.746255, 0, 1.0};
Point(13) = {0.023538, 0.745832, 0, 1.0};
Point(14) = {0.018549, 0.745350, 0, 1.0};
Point(15) = {0.013580, 0.744749, 0, 1.0};
Point(16) = {0.008632, 0.744021, 0, 1.0};
Point(17) = {0.003710, 0.743144, 0, 1.0};
Point(18) = {-0.001188, 0.742119, 0, 1.0};
Point(19) = {-0.006070, 0.740996, 0, 1.0};
Point(20) = {-0.009955, 0.739979, 0, 1.0};
Point(21) = {-0.013337, 0.738986, 0, 1.0};
Point(22) = {-0.016222, 0.738046, 0, 1.0};
Point(23) = {-0.018608, 0.737159, 0, 1.0};
Point(24) = {-0.020501, 0.736355, 0, 1.0};
Point(25) = {-0.021907, 0.735673, 0, 1.0};
Point(26) = {-0.022837, 0.735172, 0, 1.0};
Point(27) = {-0.023263, 0.734690, 0, 1.0};
Point(28) = {-0.024208, 0.734278, 0, 1.0};
Point(29) = {-0.024648, 0.733874, 0, 1.0};
Point(30) = {-0.025000, 0.732953, 0, 1.0};
Point(31) = {-0.024418, 0.732508, 0, 1.0};
Point(32) = {-0.023892, 0.732392, 0, 1.0};
Point(33) = {-0.022882, 0.732416, 0, 1.0};
Point(34) = {-0.022354, 0.732292, 0, 1.0};
Point(35) = {-0.021341, 0.732295, 0, 1.0};
Point(36) = {-0.019827, 0.732336, 0, 1.0};
Point(37) = {-0.017818, 0.732450, 0, 1.0};
Point(38) = {-0.015317, 0.732651, 0, 1.0};
Point(39) = {-0.012322, 0.732931, 0, 1.0};
Point(40) = {-0.008837, 0.733313, 0, 1.0};
Point(41) = {-0.004862, 0.733797, 0, 1.0};
Point(42) = {0.000096, 0.734466, 0, 1.0};
Point(43) = {0.005045, 0.735185, 0, 1.0};
Point(44) = {0.009981, 0.735983, 0, 1.0};
Point(45) = {0.014905, 0.736850, 0, 1.0};
Point(46) = {0.019818, 0.737785, 0, 1.0};
Point(47) = {0.024720, 0.738790, 0, 1.0};
Point(48) = {0.029614, 0.739834, 0, 1.0};
Point(49) = {0.034504, 0.740908, 0, 1.0};
Point(50) = {0.039394, 0.741982, 0, 1.0};
Point(51) = {0.044283, 0.743056, 0, 1.0};
Point(52) = {0.049173, 0.744130, 0, 1.0};
Point(53) = {0.054063, 0.745204, 0, 1.0};
Point(54) = {0.058953, 0.746277, 0, 1.0};
Point(55) = {0.062864, 0.747136, 0, 1.0};
Point(56) = {0.065798, 0.747781, 0, 1.0};
Point(57) = {0.068243, 0.748318, 0, 1.0};
Point(58) = {0.069703, 0.748680, 0, 1.0};
Point(59) = {0.074634, 0.749507, 0, 1.0};
Point(60) = {-0.074552, -0.750000, 0, 1.0};
Point(61) = {-0.069621, -0.749173, 0, 1.0};
Point(62) = {-0.068111, -0.749106, 0, 1.0};
Point(63) = {-0.065606, -0.748926, 0, 1.0};
Point(64) = {-0.062600, -0.748712, 0, 1.0};
Point(65) = {-0.058592, -0.748425, 0, 1.0};
Point(66) = {-0.053583, -0.748064, 0, 1.0};
Point(67) = {-0.048574, -0.747700, 0, 1.0};
Point(68) = {-0.043564, -0.747346, 0, 1.0};
Point(69) = {-0.038553, -0.746992, 0, 1.0};
Point(70) = {-0.033544, -0.746628, 0, 1.0};
Point(71) = {-0.028537, -0.746255, 0, 1.0};
Point(72) = {-0.023538, -0.745832, 0, 1.0};
Point(73) = {-0.018549, -0.745350, 0, 1.0};
Point(74) = {-0.013580, -0.744749, 0, 1.0};
Point(75) = {-0.008632, -0.744021, 0, 1.0};
Point(76) = {-0.003710, -0.743144, 0, 1.0};
Point(77) = {0.001188, -0.742119, 0, 1.0};
Point(78) = {0.006070, -0.740996, 0, 1.0};
Point(79) = {0.009955, -0.739979, 0, 1.0};
Point(80) = {0.013337, -0.738986, 0, 1.0};
Point(81) = {0.016222, -0.738046, 0, 1.0};
Point(82) = {0.018608, -0.737159, 0, 1.0};
Point(83) = {0.020501, -0.736355, 0, 1.0};
Point(84) = {0.021907, -0.735673, 0, 1.0};
Point(85) = {0.022837, -0.735172, 0, 1.0};
Point(86) = {0.023263, -0.734690, 0, 1.0};
Point(87) = {0.024208, -0.734278, 0, 1.0};
Point(88) = {0.024648, -0.733874, 0, 1.0};
Point(89) = {0.025000, -0.732953, 0, 1.0};
Point(90) = {0.024418, -0.732508, 0, 1.0};
Point(91) = {0.023892, -0.732392, 0, 1.0};
Point(92) = {0.022882, -0.732416, 0, 1.0};
Point(93) = {0.022354, -0.732292, 0, 1.0};
Point(94) = {0.021341, -0.732295, 0, 1.0};
Point(95) = {0.019827, -0.732336, 0, 1.0};
Point(96) = {0.017818, -0.732450, 0, 1.0};
Point(97) = {0.015317, -0.732651, 0, 1.0};
Point(98) = {0.012322, -0.732931, 0, 1.0};
Point(99) = {0.008837, -0.733313, 0, 1.0};
Point(100) = {0.004862, -0.733797, 0, 1.0};
Point(101) = {-0.000096, -0.734466, 0, 1.0};
Point(102) = {-0.005045, -0.735185, 0, 1.0};
Point(103) = {-0.009981, -0.735983, 0, 1.0};
Point(104) = {-0.014905, -0.736850, 0, 1.0};
Point(105) = {-0.019818, -0.737785, 0, 1.0};
Point(106) = {-0.024720, -0.738790, 0, 1.0};
Point(107) = {-0.029614, -0.739834, 0, 1.0};
Point(108) = {-0.034504, -0.740908, 0, 1.0};
Point(109) = {-0.039394, -0.741982, 0, 1.0};
Point(110) = {-0.044283, -0.743056, 0, 1.0};
Point(111) = {-0.049173, -0.744130, 0, 1.0};
Point(112) = {-0.054063, -0.745204, 0, 1.0};
Point(113) = {-0.058953, -0.746277, 0, 1.0};
Point(114) = {-0.062864, -0.747136, 0, 1.0};
Point(115) = {-0.065798, -0.747781, 0, 1.0};
Point(116) = {-0.068243, -0.748318, 0, 1.0};
Point(117) = {-0.069703, -0.748680, 0, 1.0};
Point(118) = {-0.074634, -0.749507, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:17};
Spline(2) = {17:42};
Spline(3) = {42:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:76};
Spline(6) = {76:101};
Spline(7) = {101:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 22 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html