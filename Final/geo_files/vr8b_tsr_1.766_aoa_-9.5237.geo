SetFactory("OpenCASCADE");

Point(1) = {0.111827, 0.750000, 0, 1.0};
Point(2) = {0.104431, 0.748759, 0, 1.0};
Point(3) = {0.102166, 0.748658, 0, 1.0};
Point(4) = {0.098409, 0.748389, 0, 1.0};
Point(5) = {0.093900, 0.748069, 0, 1.0};
Point(6) = {0.087888, 0.747638, 0, 1.0};
Point(7) = {0.080375, 0.747095, 0, 1.0};
Point(8) = {0.072861, 0.746550, 0, 1.0};
Point(9) = {0.065346, 0.746019, 0, 1.0};
Point(10) = {0.057830, 0.745488, 0, 1.0};
Point(11) = {0.050316, 0.744942, 0, 1.0};
Point(12) = {0.042806, 0.744382, 0, 1.0};
Point(13) = {0.035307, 0.743748, 0, 1.0};
Point(14) = {0.027824, 0.743024, 0, 1.0};
Point(15) = {0.020370, 0.742124, 0, 1.0};
Point(16) = {0.012949, 0.741031, 0, 1.0};
Point(17) = {0.005564, 0.739716, 0, 1.0};
Point(18) = {-0.001783, 0.738179, 0, 1.0};
Point(19) = {-0.009105, 0.736494, 0, 1.0};
Point(20) = {-0.014933, 0.734969, 0, 1.0};
Point(21) = {-0.020006, 0.733479, 0, 1.0};
Point(22) = {-0.024332, 0.732069, 0, 1.0};
Point(23) = {-0.027912, 0.730738, 0, 1.0};
Point(24) = {-0.030751, 0.729532, 0, 1.0};
Point(25) = {-0.032861, 0.728509, 0, 1.0};
Point(26) = {-0.034256, 0.727758, 0, 1.0};
Point(27) = {-0.034895, 0.727034, 0, 1.0};
Point(28) = {-0.036312, 0.726416, 0, 1.0};
Point(29) = {-0.036971, 0.725812, 0, 1.0};
Point(30) = {-0.037500, 0.724430, 0, 1.0};
Point(31) = {-0.036628, 0.723763, 0, 1.0};
Point(32) = {-0.035838, 0.723588, 0, 1.0};
Point(33) = {-0.034323, 0.723625, 0, 1.0};
Point(34) = {-0.033531, 0.723438, 0, 1.0};
Point(35) = {-0.032011, 0.723442, 0, 1.0};
Point(36) = {-0.029740, 0.723504, 0, 1.0};
Point(37) = {-0.026727, 0.723675, 0, 1.0};
Point(38) = {-0.022975, 0.723977, 0, 1.0};
Point(39) = {-0.018482, 0.724396, 0, 1.0};
Point(40) = {-0.013255, 0.724969, 0, 1.0};
Point(41) = {-0.007293, 0.725695, 0, 1.0};
Point(42) = {0.000143, 0.726700, 0, 1.0};
Point(43) = {0.007567, 0.727778, 0, 1.0};
Point(44) = {0.014971, 0.728974, 0, 1.0};
Point(45) = {0.022358, 0.730274, 0, 1.0};
Point(46) = {0.029727, 0.731678, 0, 1.0};
Point(47) = {0.037079, 0.733185, 0, 1.0};
Point(48) = {0.044421, 0.734752, 0, 1.0};
Point(49) = {0.051756, 0.736362, 0, 1.0};
Point(50) = {0.059091, 0.737973, 0, 1.0};
Point(51) = {0.066425, 0.739584, 0, 1.0};
Point(52) = {0.073760, 0.741195, 0, 1.0};
Point(53) = {0.081094, 0.742805, 0, 1.0};
Point(54) = {0.088429, 0.744416, 0, 1.0};
Point(55) = {0.094297, 0.745705, 0, 1.0};
Point(56) = {0.098697, 0.746671, 0, 1.0};
Point(57) = {0.102365, 0.747476, 0, 1.0};
Point(58) = {0.104555, 0.748019, 0, 1.0};
Point(59) = {0.111952, 0.749260, 0, 1.0};
Point(60) = {-0.111827, -0.750000, 0, 1.0};
Point(61) = {-0.104431, -0.748759, 0, 1.0};
Point(62) = {-0.102166, -0.748658, 0, 1.0};
Point(63) = {-0.098409, -0.748389, 0, 1.0};
Point(64) = {-0.093900, -0.748069, 0, 1.0};
Point(65) = {-0.087888, -0.747638, 0, 1.0};
Point(66) = {-0.080375, -0.747095, 0, 1.0};
Point(67) = {-0.072861, -0.746550, 0, 1.0};
Point(68) = {-0.065346, -0.746019, 0, 1.0};
Point(69) = {-0.057830, -0.745488, 0, 1.0};
Point(70) = {-0.050316, -0.744942, 0, 1.0};
Point(71) = {-0.042806, -0.744382, 0, 1.0};
Point(72) = {-0.035307, -0.743748, 0, 1.0};
Point(73) = {-0.027824, -0.743024, 0, 1.0};
Point(74) = {-0.020370, -0.742124, 0, 1.0};
Point(75) = {-0.012949, -0.741031, 0, 1.0};
Point(76) = {-0.005564, -0.739716, 0, 1.0};
Point(77) = {0.001783, -0.738179, 0, 1.0};
Point(78) = {0.009105, -0.736494, 0, 1.0};
Point(79) = {0.014933, -0.734969, 0, 1.0};
Point(80) = {0.020006, -0.733479, 0, 1.0};
Point(81) = {0.024332, -0.732069, 0, 1.0};
Point(82) = {0.027912, -0.730738, 0, 1.0};
Point(83) = {0.030751, -0.729532, 0, 1.0};
Point(84) = {0.032861, -0.728509, 0, 1.0};
Point(85) = {0.034256, -0.727758, 0, 1.0};
Point(86) = {0.034895, -0.727034, 0, 1.0};
Point(87) = {0.036312, -0.726416, 0, 1.0};
Point(88) = {0.036971, -0.725812, 0, 1.0};
Point(89) = {0.037500, -0.724430, 0, 1.0};
Point(90) = {0.036628, -0.723763, 0, 1.0};
Point(91) = {0.035838, -0.723588, 0, 1.0};
Point(92) = {0.034323, -0.723625, 0, 1.0};
Point(93) = {0.033531, -0.723438, 0, 1.0};
Point(94) = {0.032011, -0.723442, 0, 1.0};
Point(95) = {0.029740, -0.723504, 0, 1.0};
Point(96) = {0.026727, -0.723675, 0, 1.0};
Point(97) = {0.022975, -0.723977, 0, 1.0};
Point(98) = {0.018482, -0.724396, 0, 1.0};
Point(99) = {0.013255, -0.724969, 0, 1.0};
Point(100) = {0.007293, -0.725695, 0, 1.0};
Point(101) = {-0.000143, -0.726700, 0, 1.0};
Point(102) = {-0.007567, -0.727778, 0, 1.0};
Point(103) = {-0.014971, -0.728974, 0, 1.0};
Point(104) = {-0.022358, -0.730274, 0, 1.0};
Point(105) = {-0.029727, -0.731678, 0, 1.0};
Point(106) = {-0.037079, -0.733185, 0, 1.0};
Point(107) = {-0.044421, -0.734752, 0, 1.0};
Point(108) = {-0.051756, -0.736362, 0, 1.0};
Point(109) = {-0.059091, -0.737973, 0, 1.0};
Point(110) = {-0.066425, -0.739584, 0, 1.0};
Point(111) = {-0.073760, -0.741195, 0, 1.0};
Point(112) = {-0.081094, -0.742805, 0, 1.0};
Point(113) = {-0.088429, -0.744416, 0, 1.0};
Point(114) = {-0.094297, -0.745705, 0, 1.0};
Point(115) = {-0.098697, -0.746671, 0, 1.0};
Point(116) = {-0.102365, -0.747476, 0, 1.0};
Point(117) = {-0.104555, -0.748019, 0, 1.0};
Point(118) = {-0.111952, -0.749260, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:17};
Spline(2) = {17:42};
Spline(3) = {42:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:76};
Spline(6) = {76:101};
Spline(7) = {101:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html