SetFactory("OpenCASCADE");

Point(1) = {0.113838, 0.750000, 0, 1.0};
Point(2) = {0.106367, 0.748747, 0, 1.0};
Point(3) = {0.104080, 0.748645, 0, 1.0};
Point(4) = {0.100285, 0.748372, 0, 1.0};
Point(5) = {0.095731, 0.748049, 0, 1.0};
Point(6) = {0.089659, 0.747614, 0, 1.0};
Point(7) = {0.082070, 0.747066, 0, 1.0};
Point(8) = {0.074482, 0.746515, 0, 1.0};
Point(9) = {0.066891, 0.745979, 0, 1.0};
Point(10) = {0.059300, 0.745443, 0, 1.0};
Point(11) = {0.051711, 0.744892, 0, 1.0};
Point(12) = {0.044126, 0.744326, 0, 1.0};
Point(13) = {0.036552, 0.743685, 0, 1.0};
Point(14) = {0.028994, 0.742955, 0, 1.0};
Point(15) = {0.021466, 0.742045, 0, 1.0};
Point(16) = {0.013970, 0.740941, 0, 1.0};
Point(17) = {0.006512, 0.739613, 0, 1.0};
Point(18) = {-0.000909, 0.738061, 0, 1.0};
Point(19) = {-0.008304, 0.736359, 0, 1.0};
Point(20) = {-0.014190, 0.734819, 0, 1.0};
Point(21) = {-0.019314, 0.733314, 0, 1.0};
Point(22) = {-0.023684, 0.731890, 0, 1.0};
Point(23) = {-0.027299, 0.730546, 0, 1.0};
Point(24) = {-0.030167, 0.729327, 0, 1.0};
Point(25) = {-0.032298, 0.728294, 0, 1.0};
Point(26) = {-0.033707, 0.727535, 0, 1.0};
Point(27) = {-0.034352, 0.726805, 0, 1.0};
Point(28) = {-0.035784, 0.726181, 0, 1.0};
Point(29) = {-0.036449, 0.725570, 0, 1.0};
Point(30) = {-0.036983, 0.724174, 0, 1.0};
Point(31) = {-0.036102, 0.723500, 0, 1.0};
Point(32) = {-0.035304, 0.723324, 0, 1.0};
Point(33) = {-0.033774, 0.723361, 0, 1.0};
Point(34) = {-0.032975, 0.723172, 0, 1.0};
Point(35) = {-0.031439, 0.723177, 0, 1.0};
Point(36) = {-0.029145, 0.723239, 0, 1.0};
Point(37) = {-0.026102, 0.723411, 0, 1.0};
Point(38) = {-0.022313, 0.723717, 0, 1.0};
Point(39) = {-0.017775, 0.724140, 0, 1.0};
Point(40) = {-0.012496, 0.724719, 0, 1.0};
Point(41) = {-0.006474, 0.725452, 0, 1.0};
Point(42) = {0.001037, 0.726467, 0, 1.0};
Point(43) = {0.008535, 0.727556, 0, 1.0};
Point(44) = {0.016013, 0.728764, 0, 1.0};
Point(45) = {0.023473, 0.730077, 0, 1.0};
Point(46) = {0.030916, 0.731495, 0, 1.0};
Point(47) = {0.038342, 0.733017, 0, 1.0};
Point(48) = {0.045757, 0.734599, 0, 1.0};
Point(49) = {0.053165, 0.736226, 0, 1.0};
Point(50) = {0.060573, 0.737853, 0, 1.0};
Point(51) = {0.067981, 0.739480, 0, 1.0};
Point(52) = {0.075389, 0.741106, 0, 1.0};
Point(53) = {0.082797, 0.742733, 0, 1.0};
Point(54) = {0.090205, 0.744360, 0, 1.0};
Point(55) = {0.096131, 0.745662, 0, 1.0};
Point(56) = {0.100576, 0.746638, 0, 1.0};
Point(57) = {0.104280, 0.747451, 0, 1.0};
Point(58) = {0.106492, 0.748000, 0, 1.0};
Point(59) = {0.113963, 0.749253, 0, 1.0};
Point(60) = {-0.113838, -0.750000, 0, 1.0};
Point(61) = {-0.106367, -0.748747, 0, 1.0};
Point(62) = {-0.104080, -0.748645, 0, 1.0};
Point(63) = {-0.100285, -0.748372, 0, 1.0};
Point(64) = {-0.095731, -0.748049, 0, 1.0};
Point(65) = {-0.089659, -0.747614, 0, 1.0};
Point(66) = {-0.082070, -0.747066, 0, 1.0};
Point(67) = {-0.074482, -0.746515, 0, 1.0};
Point(68) = {-0.066891, -0.745979, 0, 1.0};
Point(69) = {-0.059300, -0.745443, 0, 1.0};
Point(70) = {-0.051711, -0.744892, 0, 1.0};
Point(71) = {-0.044126, -0.744326, 0, 1.0};
Point(72) = {-0.036552, -0.743685, 0, 1.0};
Point(73) = {-0.028994, -0.742955, 0, 1.0};
Point(74) = {-0.021466, -0.742045, 0, 1.0};
Point(75) = {-0.013970, -0.740941, 0, 1.0};
Point(76) = {-0.006512, -0.739613, 0, 1.0};
Point(77) = {0.000909, -0.738061, 0, 1.0};
Point(78) = {0.008304, -0.736359, 0, 1.0};
Point(79) = {0.014190, -0.734819, 0, 1.0};
Point(80) = {0.019314, -0.733314, 0, 1.0};
Point(81) = {0.023684, -0.731890, 0, 1.0};
Point(82) = {0.027299, -0.730546, 0, 1.0};
Point(83) = {0.030167, -0.729327, 0, 1.0};
Point(84) = {0.032298, -0.728294, 0, 1.0};
Point(85) = {0.033707, -0.727535, 0, 1.0};
Point(86) = {0.034352, -0.726805, 0, 1.0};
Point(87) = {0.035784, -0.726181, 0, 1.0};
Point(88) = {0.036449, -0.725570, 0, 1.0};
Point(89) = {0.036983, -0.724174, 0, 1.0};
Point(90) = {0.036102, -0.723500, 0, 1.0};
Point(91) = {0.035304, -0.723324, 0, 1.0};
Point(92) = {0.033774, -0.723361, 0, 1.0};
Point(93) = {0.032975, -0.723172, 0, 1.0};
Point(94) = {0.031439, -0.723177, 0, 1.0};
Point(95) = {0.029145, -0.723239, 0, 1.0};
Point(96) = {0.026102, -0.723411, 0, 1.0};
Point(97) = {0.022313, -0.723717, 0, 1.0};
Point(98) = {0.017775, -0.724140, 0, 1.0};
Point(99) = {0.012496, -0.724719, 0, 1.0};
Point(100) = {0.006474, -0.725452, 0, 1.0};
Point(101) = {-0.001037, -0.726467, 0, 1.0};
Point(102) = {-0.008535, -0.727556, 0, 1.0};
Point(103) = {-0.016013, -0.728764, 0, 1.0};
Point(104) = {-0.023473, -0.730077, 0, 1.0};
Point(105) = {-0.030916, -0.731495, 0, 1.0};
Point(106) = {-0.038342, -0.733017, 0, 1.0};
Point(107) = {-0.045757, -0.734599, 0, 1.0};
Point(108) = {-0.053165, -0.736226, 0, 1.0};
Point(109) = {-0.060573, -0.737853, 0, 1.0};
Point(110) = {-0.067981, -0.739480, 0, 1.0};
Point(111) = {-0.075389, -0.741106, 0, 1.0};
Point(112) = {-0.082797, -0.742733, 0, 1.0};
Point(113) = {-0.090205, -0.744360, 0, 1.0};
Point(114) = {-0.096131, -0.745662, 0, 1.0};
Point(115) = {-0.100576, -0.746638, 0, 1.0};
Point(116) = {-0.104280, -0.747451, 0, 1.0};
Point(117) = {-0.106492, -0.748000, 0, 1.0};
Point(118) = {-0.113963, -0.749253, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:17};
Spline(2) = {17:42};
Spline(3) = {42:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:76};
Spline(6) = {76:101};
Spline(7) = {101:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html