SetFactory("OpenCASCADE");

Point(1) = {0.111318, 0.725007, 0, 1.0};
Point(2) = {0.111051, 0.725075, 0, 1.0};
Point(3) = {0.110261, 0.725289, 0, 1.0};
Point(4) = {0.108975, 0.725664, 0, 1.0};
Point(5) = {0.107220, 0.726202, 0, 1.0};
Point(6) = {0.105032, 0.726900, 0, 1.0};
Point(7) = {0.102443, 0.727746, 0, 1.0};
Point(8) = {0.099485, 0.728725, 0, 1.0};
Point(9) = {0.096189, 0.729816, 0, 1.0};
Point(10) = {0.092583, 0.730996, 0, 1.0};
Point(11) = {0.088690, 0.732242, 0, 1.0};
Point(12) = {0.084535, 0.733533, 0, 1.0};
Point(13) = {0.080137, 0.734850, 0, 1.0};
Point(14) = {0.075524, 0.736170, 0, 1.0};
Point(15) = {0.070709, 0.737475, 0, 1.0};
Point(16) = {0.065708, 0.738762, 0, 1.0};
Point(17) = {0.060552, 0.740027, 0, 1.0};
Point(18) = {0.055275, 0.741258, 0, 1.0};
Point(19) = {0.049907, 0.742444, 0, 1.0};
Point(20) = {0.044478, 0.743577, 0, 1.0};
Point(21) = {0.039021, 0.744644, 0, 1.0};
Point(22) = {0.033565, 0.745635, 0, 1.0};
Point(23) = {0.028141, 0.746544, 0, 1.0};
Point(24) = {0.022779, 0.747359, 0, 1.0};
Point(25) = {0.017504, 0.748075, 0, 1.0};
Point(26) = {0.012349, 0.748684, 0, 1.0};
Point(27) = {0.007336, 0.749180, 0, 1.0};
Point(28) = {0.002491, 0.749564, 0, 1.0};
Point(29) = {-0.002159, 0.749829, 0, 1.0};
Point(30) = {-0.006596, 0.749972, 0, 1.0};
Point(31) = {-0.010795, 0.750000, 0, 1.0};
Point(32) = {-0.014739, 0.749908, 0, 1.0};
Point(33) = {-0.018414, 0.749703, 0, 1.0};
Point(34) = {-0.021797, 0.749390, 0, 1.0};
Point(35) = {-0.024879, 0.748975, 0, 1.0};
Point(36) = {-0.027649, 0.748471, 0, 1.0};
Point(37) = {-0.030092, 0.747886, 0, 1.0};
Point(38) = {-0.032203, 0.747231, 0, 1.0};
Point(39) = {-0.033975, 0.746532, 0, 1.0};
Point(40) = {-0.035397, 0.745805, 0, 1.0};
Point(41) = {-0.036463, 0.745070, 0, 1.0};
Point(42) = {-0.037166, 0.744360, 0, 1.0};
Point(43) = {-0.037500, 0.743804, 0, 1.0};
Point(44) = {-0.037347, 0.743233, 0, 1.0};
Point(45) = {-0.036631, 0.742773, 0, 1.0};
Point(46) = {-0.035441, 0.742280, 0, 1.0};
Point(47) = {-0.033802, 0.741788, 0, 1.0};
Point(48) = {-0.031716, 0.741315, 0, 1.0};
Point(49) = {-0.029179, 0.740853, 0, 1.0};
Point(50) = {-0.026209, 0.740398, 0, 1.0};
Point(51) = {-0.022821, 0.739955, 0, 1.0};
Point(52) = {-0.019032, 0.739518, 0, 1.0};
Point(53) = {-0.014863, 0.739086, 0, 1.0};
Point(54) = {-0.010338, 0.738653, 0, 1.0};
Point(55) = {-0.005485, 0.738219, 0, 1.0};
Point(56) = {-0.000332, 0.737779, 0, 1.0};
Point(57) = {0.005089, 0.737330, 0, 1.0};
Point(58) = {0.010743, 0.736868, 0, 1.0};
Point(59) = {0.016594, 0.736389, 0, 1.0};
Point(60) = {0.022603, 0.735888, 0, 1.0};
Point(61) = {0.028729, 0.735364, 0, 1.0};
Point(62) = {0.034930, 0.734811, 0, 1.0};
Point(63) = {0.041163, 0.734227, 0, 1.0};
Point(64) = {0.047374, 0.733603, 0, 1.0};
Point(65) = {0.053507, 0.732948, 0, 1.0};
Point(66) = {0.059518, 0.732276, 0, 1.0};
Point(67) = {0.065369, 0.731595, 0, 1.0};
Point(68) = {0.071018, 0.730910, 0, 1.0};
Point(69) = {0.076428, 0.730230, 0, 1.0};
Point(70) = {0.081560, 0.729560, 0, 1.0};
Point(71) = {0.086379, 0.728908, 0, 1.0};
Point(72) = {0.090850, 0.728282, 0, 1.0};
Point(73) = {0.094945, 0.727692, 0, 1.0};
Point(74) = {0.098636, 0.727145, 0, 1.0};
Point(75) = {0.101901, 0.726646, 0, 1.0};
Point(76) = {0.104716, 0.726199, 0, 1.0};
Point(77) = {0.107059, 0.725809, 0, 1.0};
Point(78) = {0.108907, 0.725483, 0, 1.0};
Point(79) = {0.110242, 0.725231, 0, 1.0};
Point(80) = {0.111048, 0.725066, 0, 1.0};
Point(81) = {-0.111318, -0.725007, 0, 1.0};
Point(82) = {-0.111051, -0.725075, 0, 1.0};
Point(83) = {-0.110261, -0.725289, 0, 1.0};
Point(84) = {-0.108975, -0.725664, 0, 1.0};
Point(85) = {-0.107220, -0.726202, 0, 1.0};
Point(86) = {-0.105032, -0.726900, 0, 1.0};
Point(87) = {-0.102443, -0.727746, 0, 1.0};
Point(88) = {-0.099485, -0.728725, 0, 1.0};
Point(89) = {-0.096189, -0.729816, 0, 1.0};
Point(90) = {-0.092583, -0.730996, 0, 1.0};
Point(91) = {-0.088690, -0.732242, 0, 1.0};
Point(92) = {-0.084535, -0.733533, 0, 1.0};
Point(93) = {-0.080137, -0.734850, 0, 1.0};
Point(94) = {-0.075524, -0.736170, 0, 1.0};
Point(95) = {-0.070709, -0.737475, 0, 1.0};
Point(96) = {-0.065708, -0.738762, 0, 1.0};
Point(97) = {-0.060552, -0.740027, 0, 1.0};
Point(98) = {-0.055275, -0.741258, 0, 1.0};
Point(99) = {-0.049907, -0.742444, 0, 1.0};
Point(100) = {-0.044478, -0.743577, 0, 1.0};
Point(101) = {-0.039021, -0.744644, 0, 1.0};
Point(102) = {-0.033565, -0.745635, 0, 1.0};
Point(103) = {-0.028141, -0.746544, 0, 1.0};
Point(104) = {-0.022779, -0.747359, 0, 1.0};
Point(105) = {-0.017504, -0.748075, 0, 1.0};
Point(106) = {-0.012349, -0.748684, 0, 1.0};
Point(107) = {-0.007336, -0.749180, 0, 1.0};
Point(108) = {-0.002491, -0.749564, 0, 1.0};
Point(109) = {0.002159, -0.749829, 0, 1.0};
Point(110) = {0.006596, -0.749972, 0, 1.0};
Point(111) = {0.010795, -0.750000, 0, 1.0};
Point(112) = {0.014739, -0.749908, 0, 1.0};
Point(113) = {0.018414, -0.749703, 0, 1.0};
Point(114) = {0.021797, -0.749390, 0, 1.0};
Point(115) = {0.024879, -0.748975, 0, 1.0};
Point(116) = {0.027649, -0.748471, 0, 1.0};
Point(117) = {0.030092, -0.747886, 0, 1.0};
Point(118) = {0.032203, -0.747231, 0, 1.0};
Point(119) = {0.033975, -0.746532, 0, 1.0};
Point(120) = {0.035397, -0.745805, 0, 1.0};
Point(121) = {0.036463, -0.745070, 0, 1.0};
Point(122) = {0.037166, -0.744360, 0, 1.0};
Point(123) = {0.037500, -0.743804, 0, 1.0};
Point(124) = {0.037347, -0.743233, 0, 1.0};
Point(125) = {0.036631, -0.742773, 0, 1.0};
Point(126) = {0.035441, -0.742280, 0, 1.0};
Point(127) = {0.033802, -0.741788, 0, 1.0};
Point(128) = {0.031716, -0.741315, 0, 1.0};
Point(129) = {0.029179, -0.740853, 0, 1.0};
Point(130) = {0.026209, -0.740398, 0, 1.0};
Point(131) = {0.022821, -0.739955, 0, 1.0};
Point(132) = {0.019032, -0.739518, 0, 1.0};
Point(133) = {0.014863, -0.739086, 0, 1.0};
Point(134) = {0.010338, -0.738653, 0, 1.0};
Point(135) = {0.005485, -0.738219, 0, 1.0};
Point(136) = {0.000332, -0.737779, 0, 1.0};
Point(137) = {-0.005089, -0.737330, 0, 1.0};
Point(138) = {-0.010743, -0.736868, 0, 1.0};
Point(139) = {-0.016594, -0.736389, 0, 1.0};
Point(140) = {-0.022603, -0.735888, 0, 1.0};
Point(141) = {-0.028729, -0.735364, 0, 1.0};
Point(142) = {-0.034930, -0.734811, 0, 1.0};
Point(143) = {-0.041163, -0.734227, 0, 1.0};
Point(144) = {-0.047374, -0.733603, 0, 1.0};
Point(145) = {-0.053507, -0.732948, 0, 1.0};
Point(146) = {-0.059518, -0.732276, 0, 1.0};
Point(147) = {-0.065369, -0.731595, 0, 1.0};
Point(148) = {-0.071018, -0.730910, 0, 1.0};
Point(149) = {-0.076428, -0.730230, 0, 1.0};
Point(150) = {-0.081560, -0.729560, 0, 1.0};
Point(151) = {-0.086379, -0.728908, 0, 1.0};
Point(152) = {-0.090850, -0.728282, 0, 1.0};
Point(153) = {-0.094945, -0.727692, 0, 1.0};
Point(154) = {-0.098636, -0.727145, 0, 1.0};
Point(155) = {-0.101901, -0.726646, 0, 1.0};
Point(156) = {-0.104716, -0.726199, 0, 1.0};
Point(157) = {-0.107059, -0.725809, 0, 1.0};
Point(158) = {-0.108907, -0.725483, 0, 1.0};
Point(159) = {-0.110242, -0.725231, 0, 1.0};
Point(160) = {-0.111048, -0.725066, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html