SetFactory("OpenCASCADE");

Point(1) = {0.074409, 0.725007, 0, 1.0};
Point(2) = {0.074142, 0.725075, 0, 1.0};
Point(3) = {0.073353, 0.725289, 0, 1.0};
Point(4) = {0.072066, 0.725664, 0, 1.0};
Point(5) = {0.070312, 0.726202, 0, 1.0};
Point(6) = {0.068123, 0.726900, 0, 1.0};
Point(7) = {0.065534, 0.727746, 0, 1.0};
Point(8) = {0.062576, 0.728725, 0, 1.0};
Point(9) = {0.059280, 0.729816, 0, 1.0};
Point(10) = {0.055674, 0.730996, 0, 1.0};
Point(11) = {0.051782, 0.732242, 0, 1.0};
Point(12) = {0.047626, 0.733533, 0, 1.0};
Point(13) = {0.043228, 0.734850, 0, 1.0};
Point(14) = {0.038615, 0.736170, 0, 1.0};
Point(15) = {0.033800, 0.737475, 0, 1.0};
Point(16) = {0.028799, 0.738762, 0, 1.0};
Point(17) = {0.023643, 0.740027, 0, 1.0};
Point(18) = {0.018366, 0.741258, 0, 1.0};
Point(19) = {0.012998, 0.742444, 0, 1.0};
Point(20) = {0.007569, 0.743577, 0, 1.0};
Point(21) = {0.002113, 0.744644, 0, 1.0};
Point(22) = {-0.003344, 0.745635, 0, 1.0};
Point(23) = {-0.008767, 0.746544, 0, 1.0};
Point(24) = {-0.014130, 0.747359, 0, 1.0};
Point(25) = {-0.019405, 0.748075, 0, 1.0};
Point(26) = {-0.024560, 0.748684, 0, 1.0};
Point(27) = {-0.029573, 0.749180, 0, 1.0};
Point(28) = {-0.034417, 0.749564, 0, 1.0};
Point(29) = {-0.039068, 0.749829, 0, 1.0};
Point(30) = {-0.043505, 0.749972, 0, 1.0};
Point(31) = {-0.047704, 0.750000, 0, 1.0};
Point(32) = {-0.051648, 0.749908, 0, 1.0};
Point(33) = {-0.055322, 0.749703, 0, 1.0};
Point(34) = {-0.058706, 0.749390, 0, 1.0};
Point(35) = {-0.061788, 0.748975, 0, 1.0};
Point(36) = {-0.064558, 0.748471, 0, 1.0};
Point(37) = {-0.067001, 0.747886, 0, 1.0};
Point(38) = {-0.069112, 0.747231, 0, 1.0};
Point(39) = {-0.070883, 0.746532, 0, 1.0};
Point(40) = {-0.072305, 0.745805, 0, 1.0};
Point(41) = {-0.073371, 0.745070, 0, 1.0};
Point(42) = {-0.074075, 0.744360, 0, 1.0};
Point(43) = {-0.074409, 0.743804, 0, 1.0};
Point(44) = {-0.074255, 0.743233, 0, 1.0};
Point(45) = {-0.073539, 0.742773, 0, 1.0};
Point(46) = {-0.072350, 0.742280, 0, 1.0};
Point(47) = {-0.070711, 0.741788, 0, 1.0};
Point(48) = {-0.068624, 0.741315, 0, 1.0};
Point(49) = {-0.066088, 0.740853, 0, 1.0};
Point(50) = {-0.063118, 0.740398, 0, 1.0};
Point(51) = {-0.059730, 0.739955, 0, 1.0};
Point(52) = {-0.055941, 0.739518, 0, 1.0};
Point(53) = {-0.051772, 0.739086, 0, 1.0};
Point(54) = {-0.047247, 0.738653, 0, 1.0};
Point(55) = {-0.042393, 0.738219, 0, 1.0};
Point(56) = {-0.037240, 0.737779, 0, 1.0};
Point(57) = {-0.031820, 0.737330, 0, 1.0};
Point(58) = {-0.026166, 0.736868, 0, 1.0};
Point(59) = {-0.020315, 0.736389, 0, 1.0};
Point(60) = {-0.014306, 0.735888, 0, 1.0};
Point(61) = {-0.008180, 0.735364, 0, 1.0};
Point(62) = {-0.001979, 0.734811, 0, 1.0};
Point(63) = {0.004254, 0.734227, 0, 1.0};
Point(64) = {0.010465, 0.733603, 0, 1.0};
Point(65) = {0.016598, 0.732948, 0, 1.0};
Point(66) = {0.022610, 0.732276, 0, 1.0};
Point(67) = {0.028460, 0.731595, 0, 1.0};
Point(68) = {0.034110, 0.730910, 0, 1.0};
Point(69) = {0.039519, 0.730230, 0, 1.0};
Point(70) = {0.044651, 0.729560, 0, 1.0};
Point(71) = {0.049470, 0.728908, 0, 1.0};
Point(72) = {0.053942, 0.728282, 0, 1.0};
Point(73) = {0.058036, 0.727692, 0, 1.0};
Point(74) = {0.061727, 0.727145, 0, 1.0};
Point(75) = {0.064992, 0.726646, 0, 1.0};
Point(76) = {0.067808, 0.726199, 0, 1.0};
Point(77) = {0.070150, 0.725809, 0, 1.0};
Point(78) = {0.071998, 0.725483, 0, 1.0};
Point(79) = {0.073333, 0.725231, 0, 1.0};
Point(80) = {0.074139, 0.725066, 0, 1.0};
Point(81) = {-0.074409, -0.725007, 0, 1.0};
Point(82) = {-0.074142, -0.725075, 0, 1.0};
Point(83) = {-0.073353, -0.725289, 0, 1.0};
Point(84) = {-0.072066, -0.725664, 0, 1.0};
Point(85) = {-0.070312, -0.726202, 0, 1.0};
Point(86) = {-0.068123, -0.726900, 0, 1.0};
Point(87) = {-0.065534, -0.727746, 0, 1.0};
Point(88) = {-0.062576, -0.728725, 0, 1.0};
Point(89) = {-0.059280, -0.729816, 0, 1.0};
Point(90) = {-0.055674, -0.730996, 0, 1.0};
Point(91) = {-0.051782, -0.732242, 0, 1.0};
Point(92) = {-0.047626, -0.733533, 0, 1.0};
Point(93) = {-0.043228, -0.734850, 0, 1.0};
Point(94) = {-0.038615, -0.736170, 0, 1.0};
Point(95) = {-0.033800, -0.737475, 0, 1.0};
Point(96) = {-0.028799, -0.738762, 0, 1.0};
Point(97) = {-0.023643, -0.740027, 0, 1.0};
Point(98) = {-0.018366, -0.741258, 0, 1.0};
Point(99) = {-0.012998, -0.742444, 0, 1.0};
Point(100) = {-0.007569, -0.743577, 0, 1.0};
Point(101) = {-0.002113, -0.744644, 0, 1.0};
Point(102) = {0.003344, -0.745635, 0, 1.0};
Point(103) = {0.008767, -0.746544, 0, 1.0};
Point(104) = {0.014130, -0.747359, 0, 1.0};
Point(105) = {0.019405, -0.748075, 0, 1.0};
Point(106) = {0.024560, -0.748684, 0, 1.0};
Point(107) = {0.029573, -0.749180, 0, 1.0};
Point(108) = {0.034417, -0.749564, 0, 1.0};
Point(109) = {0.039068, -0.749829, 0, 1.0};
Point(110) = {0.043505, -0.749972, 0, 1.0};
Point(111) = {0.047704, -0.750000, 0, 1.0};
Point(112) = {0.051648, -0.749908, 0, 1.0};
Point(113) = {0.055322, -0.749703, 0, 1.0};
Point(114) = {0.058706, -0.749390, 0, 1.0};
Point(115) = {0.061788, -0.748975, 0, 1.0};
Point(116) = {0.064558, -0.748471, 0, 1.0};
Point(117) = {0.067001, -0.747886, 0, 1.0};
Point(118) = {0.069112, -0.747231, 0, 1.0};
Point(119) = {0.070883, -0.746532, 0, 1.0};
Point(120) = {0.072305, -0.745805, 0, 1.0};
Point(121) = {0.073371, -0.745070, 0, 1.0};
Point(122) = {0.074075, -0.744360, 0, 1.0};
Point(123) = {0.074409, -0.743804, 0, 1.0};
Point(124) = {0.074255, -0.743233, 0, 1.0};
Point(125) = {0.073539, -0.742773, 0, 1.0};
Point(126) = {0.072350, -0.742280, 0, 1.0};
Point(127) = {0.070711, -0.741788, 0, 1.0};
Point(128) = {0.068624, -0.741315, 0, 1.0};
Point(129) = {0.066088, -0.740853, 0, 1.0};
Point(130) = {0.063118, -0.740398, 0, 1.0};
Point(131) = {0.059730, -0.739955, 0, 1.0};
Point(132) = {0.055941, -0.739518, 0, 1.0};
Point(133) = {0.051772, -0.739086, 0, 1.0};
Point(134) = {0.047247, -0.738653, 0, 1.0};
Point(135) = {0.042393, -0.738219, 0, 1.0};
Point(136) = {0.037240, -0.737779, 0, 1.0};
Point(137) = {0.031820, -0.737330, 0, 1.0};
Point(138) = {0.026166, -0.736868, 0, 1.0};
Point(139) = {0.020315, -0.736389, 0, 1.0};
Point(140) = {0.014306, -0.735888, 0, 1.0};
Point(141) = {0.008180, -0.735364, 0, 1.0};
Point(142) = {0.001979, -0.734811, 0, 1.0};
Point(143) = {-0.004254, -0.734227, 0, 1.0};
Point(144) = {-0.010465, -0.733603, 0, 1.0};
Point(145) = {-0.016598, -0.732948, 0, 1.0};
Point(146) = {-0.022610, -0.732276, 0, 1.0};
Point(147) = {-0.028460, -0.731595, 0, 1.0};
Point(148) = {-0.034110, -0.730910, 0, 1.0};
Point(149) = {-0.039519, -0.730230, 0, 1.0};
Point(150) = {-0.044651, -0.729560, 0, 1.0};
Point(151) = {-0.049470, -0.728908, 0, 1.0};
Point(152) = {-0.053942, -0.728282, 0, 1.0};
Point(153) = {-0.058036, -0.727692, 0, 1.0};
Point(154) = {-0.061727, -0.727145, 0, 1.0};
Point(155) = {-0.064992, -0.726646, 0, 1.0};
Point(156) = {-0.067808, -0.726199, 0, 1.0};
Point(157) = {-0.070150, -0.725809, 0, 1.0};
Point(158) = {-0.071998, -0.725483, 0, 1.0};
Point(159) = {-0.073333, -0.725231, 0, 1.0};
Point(160) = {-0.074139, -0.725066, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:27};
Spline(2) = {27:56};
Spline(3) = {56:80};
Spline(4) = {80,1};

// Lines: second blade (splines 5-8)
Spline(5) = {81:107};
Spline(6) = {107:136};
Spline(7) = {136:160};
Spline(8) = {160,81};

// Outer domain (points 20001-4 and lines)
Point(161) = {-13.50000000, -15.00000000, 0, 1.0};
Point(162) = {-13.50000000, 15.00000000, 0, 1.0};
Point(163) = {13.50000000, 15.00000000, 0, 1.0};
Point(164) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {161, 162};
Line(12) = {162, 163};
Line(13) = {163, 164};
Line(14) = {161, 164};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 1 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html