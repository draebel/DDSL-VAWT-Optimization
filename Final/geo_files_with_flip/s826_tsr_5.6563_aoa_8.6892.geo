SetFactory("OpenCASCADE");

Point(1) = {0.073634, 0.722146, 0, 1.0};
Point(2) = {0.071693, 0.721809, 0, 1.0};
Point(3) = {0.067297, 0.721221, 0, 1.0};
Point(4) = {0.062226, 0.720767, 0, 1.0};
Point(5) = {0.056519, 0.720400, 0, 1.0};
Point(6) = {0.050253, 0.720110, 0, 1.0};
Point(7) = {0.043509, 0.719901, 0, 1.0};
Point(8) = {0.036377, 0.719777, 0, 1.0};
Point(9) = {0.028949, 0.719748, 0, 1.0};
Point(10) = {0.021322, 0.719827, 0, 1.0};
Point(11) = {0.013591, 0.720033, 0, 1.0};
Point(12) = {0.005855, 0.720384, 0, 1.0};
Point(13) = {-0.001793, 0.720908, 0, 1.0};
Point(14) = {-0.009259, 0.721642, 0, 1.0};
Point(15) = {-0.016471, 0.722672, 0, 1.0};
Point(16) = {-0.023500, 0.724016, 0, 1.0};
Point(17) = {-0.030306, 0.725585, 0, 1.0};
Point(18) = {-0.036821, 0.727330, 0, 1.0};
Point(19) = {-0.042980, 0.729215, 0, 1.0};
Point(20) = {-0.048717, 0.731204, 0, 1.0};
Point(21) = {-0.053976, 0.733264, 0, 1.0};
Point(22) = {-0.058702, 0.735362, 0, 1.0};
Point(23) = {-0.062847, 0.737469, 0, 1.0};
Point(24) = {-0.066379, 0.739551, 0, 1.0};
Point(25) = {-0.069262, 0.741573, 0, 1.0};
Point(26) = {-0.071488, 0.743500, 0, 1.0};
Point(27) = {-0.073035, 0.745279, 0, 1.0};
Point(28) = {-0.073920, 0.746859, 0, 1.0};
Point(29) = {-0.074152, 0.747850, 0, 1.0};
Point(30) = {-0.074141, 0.748098, 0, 1.0};
Point(31) = {-0.074139, 0.748113, 0, 1.0};
Point(32) = {-0.074074, 0.748332, 0, 1.0};
Point(33) = {-0.073925, 0.748515, 0, 1.0};
Point(34) = {-0.073702, 0.748690, 0, 1.0};
Point(35) = {-0.073436, 0.748848, 0, 1.0};
Point(36) = {-0.071744, 0.749413, 0, 1.0};
Point(37) = {-0.069182, 0.749799, 0, 1.0};
Point(38) = {-0.065810, 0.749994, 0, 1.0};
Point(39) = {-0.061649, 0.750000, 0, 1.0};
Point(40) = {-0.056753, 0.749840, 0, 1.0};
Point(41) = {-0.051167, 0.749550, 0, 1.0};
Point(42) = {-0.044997, 0.749253, 0, 1.0};
Point(43) = {-0.038578, 0.748904, 0, 1.0};
Point(44) = {-0.032004, 0.748240, 0, 1.0};
Point(45) = {-0.025170, 0.747172, 0, 1.0};
Point(46) = {-0.018131, 0.745686, 0, 1.0};
Point(47) = {-0.010776, 0.743716, 0, 1.0};
Point(48) = {-0.003080, 0.741384, 0, 1.0};
Point(49) = {0.004968, 0.738780, 0, 1.0};
Point(50) = {0.013338, 0.736076, 0, 1.0};
Point(51) = {0.021909, 0.733427, 0, 1.0};
Point(52) = {0.030537, 0.730954, 0, 1.0};
Point(53) = {0.039061, 0.728754, 0, 1.0};
Point(54) = {0.047308, 0.726900, 0, 1.0};
Point(55) = {0.055103, 0.725445, 0, 1.0};
Point(56) = {0.062271, 0.724418, 0, 1.0};
Point(57) = {0.068627, 0.723844, 0, 1.0};
Point(58) = {0.073865, 0.723656, 0, 1.0};
Point(59) = {-0.073634, -0.722146, 0, 1.0};
Point(60) = {-0.071693, -0.721809, 0, 1.0};
Point(61) = {-0.067297, -0.721221, 0, 1.0};
Point(62) = {-0.062226, -0.720767, 0, 1.0};
Point(63) = {-0.056519, -0.720400, 0, 1.0};
Point(64) = {-0.050253, -0.720110, 0, 1.0};
Point(65) = {-0.043509, -0.719901, 0, 1.0};
Point(66) = {-0.036377, -0.719777, 0, 1.0};
Point(67) = {-0.028949, -0.719748, 0, 1.0};
Point(68) = {-0.021322, -0.719827, 0, 1.0};
Point(69) = {-0.013591, -0.720033, 0, 1.0};
Point(70) = {-0.005855, -0.720384, 0, 1.0};
Point(71) = {0.001793, -0.720908, 0, 1.0};
Point(72) = {0.009259, -0.721642, 0, 1.0};
Point(73) = {0.016471, -0.722672, 0, 1.0};
Point(74) = {0.023500, -0.724016, 0, 1.0};
Point(75) = {0.030306, -0.725585, 0, 1.0};
Point(76) = {0.036821, -0.727330, 0, 1.0};
Point(77) = {0.042980, -0.729215, 0, 1.0};
Point(78) = {0.048717, -0.731204, 0, 1.0};
Point(79) = {0.053976, -0.733264, 0, 1.0};
Point(80) = {0.058702, -0.735362, 0, 1.0};
Point(81) = {0.062847, -0.737469, 0, 1.0};
Point(82) = {0.066379, -0.739551, 0, 1.0};
Point(83) = {0.069262, -0.741573, 0, 1.0};
Point(84) = {0.071488, -0.743500, 0, 1.0};
Point(85) = {0.073035, -0.745279, 0, 1.0};
Point(86) = {0.073920, -0.746859, 0, 1.0};
Point(87) = {0.074152, -0.747850, 0, 1.0};
Point(88) = {0.074141, -0.748098, 0, 1.0};
Point(89) = {0.074139, -0.748113, 0, 1.0};
Point(90) = {0.074074, -0.748332, 0, 1.0};
Point(91) = {0.073925, -0.748515, 0, 1.0};
Point(92) = {0.073702, -0.748690, 0, 1.0};
Point(93) = {0.073436, -0.748848, 0, 1.0};
Point(94) = {0.071744, -0.749413, 0, 1.0};
Point(95) = {0.069182, -0.749799, 0, 1.0};
Point(96) = {0.065810, -0.749994, 0, 1.0};
Point(97) = {0.061649, -0.750000, 0, 1.0};
Point(98) = {0.056753, -0.749840, 0, 1.0};
Point(99) = {0.051167, -0.749550, 0, 1.0};
Point(100) = {0.044997, -0.749253, 0, 1.0};
Point(101) = {0.038578, -0.748904, 0, 1.0};
Point(102) = {0.032004, -0.748240, 0, 1.0};
Point(103) = {0.025170, -0.747172, 0, 1.0};
Point(104) = {0.018131, -0.745686, 0, 1.0};
Point(105) = {0.010776, -0.743716, 0, 1.0};
Point(106) = {0.003080, -0.741384, 0, 1.0};
Point(107) = {-0.004968, -0.738780, 0, 1.0};
Point(108) = {-0.013338, -0.736076, 0, 1.0};
Point(109) = {-0.021909, -0.733427, 0, 1.0};
Point(110) = {-0.030537, -0.730954, 0, 1.0};
Point(111) = {-0.039061, -0.728754, 0, 1.0};
Point(112) = {-0.047308, -0.726900, 0, 1.0};
Point(113) = {-0.055103, -0.725445, 0, 1.0};
Point(114) = {-0.062271, -0.724418, 0, 1.0};
Point(115) = {-0.068627, -0.723844, 0, 1.0};
Point(116) = {-0.073865, -0.723656, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:44};
Spline(3) = {44:58};
Spline(4) = {58,1};

// Lines: second blade (splines 5-8)
Spline(5) = {59:76};
Spline(6) = {76:102};
Spline(7) = {102:116};
Spline(8) = {116,59};

// Outer domain (points 20001-4 and lines)
Point(117) = {-13.50000000, -15.00000000, 0, 1.0};
Point(118) = {-13.50000000, 15.00000000, 0, 1.0};
Point(119) = {13.50000000, 15.00000000, 0, 1.0};
Point(120) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {117, 118};
Line(12) = {118, 119};
Line(13) = {119, 120};
Line(14) = {117, 120};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html