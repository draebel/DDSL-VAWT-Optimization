SetFactory("OpenCASCADE");

Point(1) = {0.074672, 0.740671, 0, 1.0};
Point(2) = {0.074340, 0.740507, 0, 1.0};
Point(3) = {0.070496, 0.738658, 0, 1.0};
Point(4) = {0.065986, 0.736722, 0, 1.0};
Point(5) = {0.060761, 0.734707, 0, 1.0};
Point(6) = {0.054886, 0.732581, 0, 1.0};
Point(7) = {0.048455, 0.730363, 0, 1.0};
Point(8) = {0.041560, 0.728087, 0, 1.0};
Point(9) = {0.034296, 0.725794, 0, 1.0};
Point(10) = {0.026756, 0.723530, 0, 1.0};
Point(11) = {0.019030, 0.721344, 0, 1.0};
Point(12) = {0.011206, 0.719287, 0, 1.0};
Point(13) = {0.003368, 0.717407, 0, 1.0};
Point(14) = {-0.004409, 0.715749, 0, 1.0};
Point(15) = {-0.012051, 0.714355, 0, 1.0};
Point(16) = {-0.019492, 0.713260, 0, 1.0};
Point(17) = {-0.026671, 0.712496, 0, 1.0};
Point(18) = {-0.033544, 0.712103, 0, 1.0};
Point(19) = {-0.040113, 0.712061, 0, 1.0};
Point(20) = {-0.046309, 0.712319, 0, 1.0};
Point(21) = {-0.052056, 0.712856, 0, 1.0};
Point(22) = {-0.057287, 0.713651, 0, 1.0};
Point(23) = {-0.061934, 0.714689, 0, 1.0};
Point(24) = {-0.065945, 0.715950, 0, 1.0};
Point(25) = {-0.069255, 0.717417, 0, 1.0};
Point(26) = {-0.071834, 0.719066, 0, 1.0};
Point(27) = {-0.073323, 0.720489, 0, 1.0};
Point(28) = {-0.073586, 0.720835, 0, 1.0};
Point(29) = {-0.073659, 0.720942, 0, 1.0};
Point(30) = {-0.073922, 0.721402, 0, 1.0};
Point(31) = {-0.074102, 0.721895, 0, 1.0};
Point(32) = {-0.074228, 0.722432, 0, 1.0};
Point(33) = {-0.074293, 0.722867, 0, 1.0};
Point(34) = {-0.074246, 0.725402, 0, 1.0};
Point(35) = {-0.073606, 0.728266, 0, 1.0};
Point(36) = {-0.072447, 0.731355, 0, 1.0};
Point(37) = {-0.070821, 0.734517, 0, 1.0};
Point(38) = {-0.068739, 0.737655, 0, 1.0};
Point(39) = {-0.066233, 0.740649, 0, 1.0};
Point(40) = {-0.063317, 0.743387, 0, 1.0};
Point(41) = {-0.059970, 0.745703, 0, 1.0};
Point(42) = {-0.056092, 0.747576, 0, 1.0};
Point(43) = {-0.051713, 0.748906, 0, 1.0};
Point(44) = {-0.046669, 0.749685, 0, 1.0};
Point(45) = {-0.040976, 0.750000, 0, 1.0};
Point(46) = {-0.034657, 0.749881, 0, 1.0};
Point(47) = {-0.027736, 0.749367, 0, 1.0};
Point(48) = {-0.020240, 0.748513, 0, 1.0};
Point(49) = {-0.012212, 0.747391, 0, 1.0};
Point(50) = {-0.003711, 0.746091, 0, 1.0};
Point(51) = {0.005180, 0.744717, 0, 1.0};
Point(52) = {0.014351, 0.743377, 0, 1.0};
Point(53) = {0.023660, 0.742181, 0, 1.0};
Point(54) = {0.032939, 0.741228, 0, 1.0};
Point(55) = {0.041991, 0.740597, 0, 1.0};
Point(56) = {0.050604, 0.740334, 0, 1.0};
Point(57) = {0.058554, 0.740449, 0, 1.0};
Point(58) = {0.065627, 0.740911, 0, 1.0};
Point(59) = {0.071624, 0.741645, 0, 1.0};
Point(60) = {0.074469, 0.742136, 0, 1.0};
Point(61) = {-0.074672, -0.740671, 0, 1.0};
Point(62) = {-0.074340, -0.740507, 0, 1.0};
Point(63) = {-0.070496, -0.738658, 0, 1.0};
Point(64) = {-0.065986, -0.736722, 0, 1.0};
Point(65) = {-0.060761, -0.734707, 0, 1.0};
Point(66) = {-0.054886, -0.732581, 0, 1.0};
Point(67) = {-0.048455, -0.730363, 0, 1.0};
Point(68) = {-0.041560, -0.728087, 0, 1.0};
Point(69) = {-0.034296, -0.725794, 0, 1.0};
Point(70) = {-0.026756, -0.723530, 0, 1.0};
Point(71) = {-0.019030, -0.721344, 0, 1.0};
Point(72) = {-0.011206, -0.719287, 0, 1.0};
Point(73) = {-0.003368, -0.717407, 0, 1.0};
Point(74) = {0.004409, -0.715749, 0, 1.0};
Point(75) = {0.012051, -0.714355, 0, 1.0};
Point(76) = {0.019492, -0.713260, 0, 1.0};
Point(77) = {0.026671, -0.712496, 0, 1.0};
Point(78) = {0.033544, -0.712103, 0, 1.0};
Point(79) = {0.040113, -0.712061, 0, 1.0};
Point(80) = {0.046309, -0.712319, 0, 1.0};
Point(81) = {0.052056, -0.712856, 0, 1.0};
Point(82) = {0.057287, -0.713651, 0, 1.0};
Point(83) = {0.061934, -0.714689, 0, 1.0};
Point(84) = {0.065945, -0.715950, 0, 1.0};
Point(85) = {0.069255, -0.717417, 0, 1.0};
Point(86) = {0.071834, -0.719066, 0, 1.0};
Point(87) = {0.073323, -0.720489, 0, 1.0};
Point(88) = {0.073586, -0.720835, 0, 1.0};
Point(89) = {0.073659, -0.720942, 0, 1.0};
Point(90) = {0.073922, -0.721402, 0, 1.0};
Point(91) = {0.074102, -0.721895, 0, 1.0};
Point(92) = {0.074228, -0.722432, 0, 1.0};
Point(93) = {0.074293, -0.722867, 0, 1.0};
Point(94) = {0.074246, -0.725402, 0, 1.0};
Point(95) = {0.073606, -0.728266, 0, 1.0};
Point(96) = {0.072447, -0.731355, 0, 1.0};
Point(97) = {0.070821, -0.734517, 0, 1.0};
Point(98) = {0.068739, -0.737655, 0, 1.0};
Point(99) = {0.066233, -0.740649, 0, 1.0};
Point(100) = {0.063317, -0.743387, 0, 1.0};
Point(101) = {0.059970, -0.745703, 0, 1.0};
Point(102) = {0.056092, -0.747576, 0, 1.0};
Point(103) = {0.051713, -0.748906, 0, 1.0};
Point(104) = {0.046669, -0.749685, 0, 1.0};
Point(105) = {0.040976, -0.750000, 0, 1.0};
Point(106) = {0.034657, -0.749881, 0, 1.0};
Point(107) = {0.027736, -0.749367, 0, 1.0};
Point(108) = {0.020240, -0.748513, 0, 1.0};
Point(109) = {0.012212, -0.747391, 0, 1.0};
Point(110) = {0.003711, -0.746091, 0, 1.0};
Point(111) = {-0.005180, -0.744717, 0, 1.0};
Point(112) = {-0.014351, -0.743377, 0, 1.0};
Point(113) = {-0.023660, -0.742181, 0, 1.0};
Point(114) = {-0.032939, -0.741228, 0, 1.0};
Point(115) = {-0.041991, -0.740597, 0, 1.0};
Point(116) = {-0.050604, -0.740334, 0, 1.0};
Point(117) = {-0.058554, -0.740449, 0, 1.0};
Point(118) = {-0.065627, -0.740911, 0, 1.0};
Point(119) = {-0.071624, -0.741645, 0, 1.0};
Point(120) = {-0.074469, -0.742136, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:45};
Spline(3) = {45:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:78};
Spline(6) = {78:105};
Spline(7) = {105:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 35 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html