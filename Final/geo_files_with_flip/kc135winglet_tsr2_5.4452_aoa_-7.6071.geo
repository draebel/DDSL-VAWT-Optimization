SetFactory("OpenCASCADE");

Point(1) = {0.074637, 0.748509, 0, 1.0};
Point(2) = {0.070758, 0.747246, 0, 1.0};
Point(3) = {0.066833, 0.746002, 0, 1.0};
Point(4) = {0.062904, 0.744790, 0, 1.0};
Point(5) = {0.058972, 0.743594, 0, 1.0};
Point(6) = {0.055035, 0.742446, 0, 1.0};
Point(7) = {0.051090, 0.741347, 0, 1.0};
Point(8) = {0.047146, 0.740247, 0, 1.0};
Point(9) = {0.043195, 0.739196, 0, 1.0};
Point(10) = {0.039240, 0.738176, 0, 1.0};
Point(11) = {0.035278, 0.737206, 0, 1.0};
Point(12) = {0.031312, 0.736267, 0, 1.0};
Point(13) = {0.027338, 0.735392, 0, 1.0};
Point(14) = {0.023357, 0.734566, 0, 1.0};
Point(15) = {0.019370, 0.733788, 0, 1.0};
Point(16) = {0.015376, 0.733058, 0, 1.0};
Point(17) = {0.007378, 0.731679, 0, 1.0};
Point(18) = {-0.000642, 0.730461, 0, 1.0};
Point(19) = {-0.008679, 0.729371, 0, 1.0};
Point(20) = {-0.016733, 0.728410, 0, 1.0};
Point(21) = {-0.024806, 0.727594, 0, 1.0};
Point(22) = {-0.032897, 0.726906, 0, 1.0};
Point(23) = {-0.041009, 0.726379, 0, 1.0};
Point(24) = {-0.045076, 0.726196, 0, 1.0};
Point(25) = {-0.049151, 0.726077, 0, 1.0};
Point(26) = {-0.053235, 0.726022, 0, 1.0};
Point(27) = {-0.057332, 0.726064, 0, 1.0};
Point(28) = {-0.061446, 0.726235, 0, 1.0};
Point(29) = {-0.065586, 0.726599, 0, 1.0};
Point(30) = {-0.067675, 0.726925, 0, 1.0};
Point(31) = {-0.069786, 0.727412, 0, 1.0};
Point(32) = {-0.071946, 0.728269, 0, 1.0};
Point(33) = {-0.073281, 0.729073, 0, 1.0};
Point(34) = {-0.073853, 0.729684, 0, 1.0};
Point(35) = {-0.074340, 0.730879, 0, 1.0};
Point(36) = {-0.074087, 0.731436, 0, 1.0};
Point(37) = {-0.073624, 0.731646, 0, 1.0};
Point(38) = {-0.072459, 0.732112, 0, 1.0};
Point(39) = {-0.070486, 0.732654, 0, 1.0};
Point(40) = {-0.068504, 0.733131, 0, 1.0};
Point(41) = {-0.066516, 0.733560, 0, 1.0};
Point(42) = {-0.062535, 0.734387, 0, 1.0};
Point(43) = {-0.058545, 0.735149, 0, 1.0};
Point(44) = {-0.054551, 0.735878, 0, 1.0};
Point(45) = {-0.050553, 0.736576, 0, 1.0};
Point(46) = {-0.046549, 0.737225, 0, 1.0};
Point(47) = {-0.042542, 0.737859, 0, 1.0};
Point(48) = {-0.034520, 0.739061, 0, 1.0};
Point(49) = {-0.026483, 0.740151, 0, 1.0};
Point(50) = {-0.018440, 0.741192, 0, 1.0};
Point(51) = {-0.010388, 0.742169, 0, 1.0};
Point(52) = {-0.002328, 0.743082, 0, 1.0};
Point(53) = {0.005742, 0.743931, 0, 1.0};
Point(54) = {0.013828, 0.744651, 0, 1.0};
Point(55) = {0.017882, 0.744930, 0, 1.0};
Point(56) = {0.021936, 0.745210, 0, 1.0};
Point(57) = {0.025996, 0.745441, 0, 1.0};
Point(58) = {0.030056, 0.745672, 0, 1.0};
Point(59) = {0.034117, 0.745904, 0, 1.0};
Point(60) = {0.038175, 0.746151, 0, 1.0};
Point(61) = {0.042235, 0.746383, 0, 1.0};
Point(62) = {0.046289, 0.746662, 0, 1.0};
Point(63) = {0.050343, 0.746942, 0, 1.0};
Point(64) = {0.054390, 0.747270, 0, 1.0};
Point(65) = {0.058434, 0.747630, 0, 1.0};
Point(66) = {0.062464, 0.748086, 0, 1.0};
Point(67) = {0.066481, 0.748639, 0, 1.0};
Point(68) = {0.070490, 0.749256, 0, 1.0};
Point(69) = {0.074438, 0.750000, 0, 1.0};
Point(70) = {-0.074637, -0.748509, 0, 1.0};
Point(71) = {-0.070758, -0.747246, 0, 1.0};
Point(72) = {-0.066833, -0.746002, 0, 1.0};
Point(73) = {-0.062904, -0.744790, 0, 1.0};
Point(74) = {-0.058972, -0.743594, 0, 1.0};
Point(75) = {-0.055035, -0.742446, 0, 1.0};
Point(76) = {-0.051090, -0.741347, 0, 1.0};
Point(77) = {-0.047146, -0.740247, 0, 1.0};
Point(78) = {-0.043195, -0.739196, 0, 1.0};
Point(79) = {-0.039240, -0.738176, 0, 1.0};
Point(80) = {-0.035278, -0.737206, 0, 1.0};
Point(81) = {-0.031312, -0.736267, 0, 1.0};
Point(82) = {-0.027338, -0.735392, 0, 1.0};
Point(83) = {-0.023357, -0.734566, 0, 1.0};
Point(84) = {-0.019370, -0.733788, 0, 1.0};
Point(85) = {-0.015376, -0.733058, 0, 1.0};
Point(86) = {-0.007378, -0.731679, 0, 1.0};
Point(87) = {0.000642, -0.730461, 0, 1.0};
Point(88) = {0.008679, -0.729371, 0, 1.0};
Point(89) = {0.016733, -0.728410, 0, 1.0};
Point(90) = {0.024806, -0.727594, 0, 1.0};
Point(91) = {0.032897, -0.726906, 0, 1.0};
Point(92) = {0.041009, -0.726379, 0, 1.0};
Point(93) = {0.045076, -0.726196, 0, 1.0};
Point(94) = {0.049151, -0.726077, 0, 1.0};
Point(95) = {0.053235, -0.726022, 0, 1.0};
Point(96) = {0.057332, -0.726064, 0, 1.0};
Point(97) = {0.061446, -0.726235, 0, 1.0};
Point(98) = {0.065586, -0.726599, 0, 1.0};
Point(99) = {0.067675, -0.726925, 0, 1.0};
Point(100) = {0.069786, -0.727412, 0, 1.0};
Point(101) = {0.071946, -0.728269, 0, 1.0};
Point(102) = {0.073281, -0.729073, 0, 1.0};
Point(103) = {0.073853, -0.729684, 0, 1.0};
Point(104) = {0.074340, -0.730879, 0, 1.0};
Point(105) = {0.074087, -0.731436, 0, 1.0};
Point(106) = {0.073624, -0.731646, 0, 1.0};
Point(107) = {0.072459, -0.732112, 0, 1.0};
Point(108) = {0.070486, -0.732654, 0, 1.0};
Point(109) = {0.068504, -0.733131, 0, 1.0};
Point(110) = {0.066516, -0.733560, 0, 1.0};
Point(111) = {0.062535, -0.734387, 0, 1.0};
Point(112) = {0.058545, -0.735149, 0, 1.0};
Point(113) = {0.054551, -0.735878, 0, 1.0};
Point(114) = {0.050553, -0.736576, 0, 1.0};
Point(115) = {0.046549, -0.737225, 0, 1.0};
Point(116) = {0.042542, -0.737859, 0, 1.0};
Point(117) = {0.034520, -0.739061, 0, 1.0};
Point(118) = {0.026483, -0.740151, 0, 1.0};
Point(119) = {0.018440, -0.741192, 0, 1.0};
Point(120) = {0.010388, -0.742169, 0, 1.0};
Point(121) = {0.002328, -0.743082, 0, 1.0};
Point(122) = {-0.005742, -0.743931, 0, 1.0};
Point(123) = {-0.013828, -0.744651, 0, 1.0};
Point(124) = {-0.017882, -0.744930, 0, 1.0};
Point(125) = {-0.021936, -0.745210, 0, 1.0};
Point(126) = {-0.025996, -0.745441, 0, 1.0};
Point(127) = {-0.030056, -0.745672, 0, 1.0};
Point(128) = {-0.034117, -0.745904, 0, 1.0};
Point(129) = {-0.038175, -0.746151, 0, 1.0};
Point(130) = {-0.042235, -0.746383, 0, 1.0};
Point(131) = {-0.046289, -0.746662, 0, 1.0};
Point(132) = {-0.050343, -0.746942, 0, 1.0};
Point(133) = {-0.054390, -0.747270, 0, 1.0};
Point(134) = {-0.058434, -0.747630, 0, 1.0};
Point(135) = {-0.062464, -0.748086, 0, 1.0};
Point(136) = {-0.066481, -0.748639, 0, 1.0};
Point(137) = {-0.070490, -0.749256, 0, 1.0};
Point(138) = {-0.074438, -0.750000, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:48};
Spline(3) = {48:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:91};
Spline(6) = {91:117};
Spline(7) = {117:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html