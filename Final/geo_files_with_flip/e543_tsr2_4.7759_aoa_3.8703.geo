SetFactory("OpenCASCADE");

Point(1) = {0.074727, 0.731771, 0, 1.0};
Point(2) = {0.072061, 0.731382, 0, 1.0};
Point(3) = {0.067799, 0.730745, 0, 1.0};
Point(4) = {0.062770, 0.729995, 0, 1.0};
Point(5) = {0.057072, 0.729140, 0, 1.0};
Point(6) = {0.050815, 0.728201, 0, 1.0};
Point(7) = {0.044104, 0.727211, 0, 1.0};
Point(8) = {0.037043, 0.726210, 0, 1.0};
Point(9) = {0.029728, 0.725248, 0, 1.0};
Point(10) = {0.022255, 0.724374, 0, 1.0};
Point(11) = {0.014706, 0.723638, 0, 1.0};
Point(12) = {0.007161, 0.723089, 0, 1.0};
Point(13) = {-0.000304, 0.722787, 0, 1.0};
Point(14) = {-0.007660, 0.722789, 0, 1.0};
Point(15) = {-0.014898, 0.723108, 0, 1.0};
Point(16) = {-0.021994, 0.723709, 0, 1.0};
Point(17) = {-0.028891, 0.724553, 0, 1.0};
Point(18) = {-0.035512, 0.725605, 0, 1.0};
Point(19) = {-0.041793, 0.726847, 0, 1.0};
Point(20) = {-0.047668, 0.728253, 0, 1.0};
Point(21) = {-0.053079, 0.729802, 0, 1.0};
Point(22) = {-0.057977, 0.731465, 0, 1.0};
Point(23) = {-0.062314, 0.733215, 0, 1.0};
Point(24) = {-0.066050, 0.735023, 0, 1.0};
Point(25) = {-0.069158, 0.736848, 0, 1.0};
Point(26) = {-0.071609, 0.738652, 0, 1.0};
Point(27) = {-0.073386, 0.740381, 0, 1.0};
Point(28) = {-0.074469, 0.741965, 0, 1.0};
Point(29) = {-0.074647, 0.742378, 0, 1.0};
Point(30) = {-0.074774, 0.742790, 0, 1.0};
Point(31) = {-0.074820, 0.743047, 0, 1.0};
Point(32) = {-0.074835, 0.743286, 0, 1.0};
Point(33) = {-0.074829, 0.743398, 0, 1.0};
Point(34) = {-0.074816, 0.743503, 0, 1.0};
Point(35) = {-0.074789, 0.743601, 0, 1.0};
Point(36) = {-0.074745, 0.743695, 0, 1.0};
Point(37) = {-0.074687, 0.743789, 0, 1.0};
Point(38) = {-0.074615, 0.743884, 0, 1.0};
Point(39) = {-0.074439, 0.744073, 0, 1.0};
Point(40) = {-0.074222, 0.744264, 0, 1.0};
Point(41) = {-0.073824, 0.744553, 0, 1.0};
Point(42) = {-0.072556, 0.745240, 0, 1.0};
Point(43) = {-0.070068, 0.746159, 0, 1.0};
Point(44) = {-0.066785, 0.747001, 0, 1.0};
Point(45) = {-0.062751, 0.747751, 0, 1.0};
Point(46) = {-0.058012, 0.748398, 0, 1.0};
Point(47) = {-0.052624, 0.748942, 0, 1.0};
Point(48) = {-0.046659, 0.749383, 0, 1.0};
Point(49) = {-0.040195, 0.749712, 0, 1.0};
Point(50) = {-0.033314, 0.749922, 0, 1.0};
Point(51) = {-0.026104, 0.750000, 0, 1.0};
Point(52) = {-0.018649, 0.749938, 0, 1.0};
Point(53) = {-0.011041, 0.749722, 0, 1.0};
Point(54) = {-0.003370, 0.749341, 0, 1.0};
Point(55) = {0.004272, 0.748777, 0, 1.0};
Point(56) = {0.011795, 0.748011, 0, 1.0};
Point(57) = {0.019095, 0.746983, 0, 1.0};
Point(58) = {0.026172, 0.745588, 0, 1.0};
Point(59) = {0.033112, 0.743816, 0, 1.0};
Point(60) = {0.040014, 0.741780, 0, 1.0};
Point(61) = {0.046873, 0.739704, 0, 1.0};
Point(62) = {0.053539, 0.737789, 0, 1.0};
Point(63) = {0.059835, 0.736143, 0, 1.0};
Point(64) = {0.065573, 0.734837, 0, 1.0};
Point(65) = {0.070568, 0.733893, 0, 1.0};
Point(66) = {0.074659, 0.733289, 0, 1.0};
Point(67) = {0.074829, 0.733268, 0, 1.0};
Point(68) = {-0.074727, -0.731771, 0, 1.0};
Point(69) = {-0.072061, -0.731382, 0, 1.0};
Point(70) = {-0.067799, -0.730745, 0, 1.0};
Point(71) = {-0.062770, -0.729995, 0, 1.0};
Point(72) = {-0.057072, -0.729140, 0, 1.0};
Point(73) = {-0.050815, -0.728201, 0, 1.0};
Point(74) = {-0.044104, -0.727211, 0, 1.0};
Point(75) = {-0.037043, -0.726210, 0, 1.0};
Point(76) = {-0.029728, -0.725248, 0, 1.0};
Point(77) = {-0.022255, -0.724374, 0, 1.0};
Point(78) = {-0.014706, -0.723638, 0, 1.0};
Point(79) = {-0.007161, -0.723089, 0, 1.0};
Point(80) = {0.000304, -0.722787, 0, 1.0};
Point(81) = {0.007660, -0.722789, 0, 1.0};
Point(82) = {0.014898, -0.723108, 0, 1.0};
Point(83) = {0.021994, -0.723709, 0, 1.0};
Point(84) = {0.028891, -0.724553, 0, 1.0};
Point(85) = {0.035512, -0.725605, 0, 1.0};
Point(86) = {0.041793, -0.726847, 0, 1.0};
Point(87) = {0.047668, -0.728253, 0, 1.0};
Point(88) = {0.053079, -0.729802, 0, 1.0};
Point(89) = {0.057977, -0.731465, 0, 1.0};
Point(90) = {0.062314, -0.733215, 0, 1.0};
Point(91) = {0.066050, -0.735023, 0, 1.0};
Point(92) = {0.069158, -0.736848, 0, 1.0};
Point(93) = {0.071609, -0.738652, 0, 1.0};
Point(94) = {0.073386, -0.740381, 0, 1.0};
Point(95) = {0.074469, -0.741965, 0, 1.0};
Point(96) = {0.074647, -0.742378, 0, 1.0};
Point(97) = {0.074774, -0.742790, 0, 1.0};
Point(98) = {0.074820, -0.743047, 0, 1.0};
Point(99) = {0.074835, -0.743286, 0, 1.0};
Point(100) = {0.074829, -0.743398, 0, 1.0};
Point(101) = {0.074816, -0.743503, 0, 1.0};
Point(102) = {0.074789, -0.743601, 0, 1.0};
Point(103) = {0.074745, -0.743695, 0, 1.0};
Point(104) = {0.074687, -0.743789, 0, 1.0};
Point(105) = {0.074615, -0.743884, 0, 1.0};
Point(106) = {0.074439, -0.744073, 0, 1.0};
Point(107) = {0.074222, -0.744264, 0, 1.0};
Point(108) = {0.073824, -0.744553, 0, 1.0};
Point(109) = {0.072556, -0.745240, 0, 1.0};
Point(110) = {0.070068, -0.746159, 0, 1.0};
Point(111) = {0.066785, -0.747001, 0, 1.0};
Point(112) = {0.062751, -0.747751, 0, 1.0};
Point(113) = {0.058012, -0.748398, 0, 1.0};
Point(114) = {0.052624, -0.748942, 0, 1.0};
Point(115) = {0.046659, -0.749383, 0, 1.0};
Point(116) = {0.040195, -0.749712, 0, 1.0};
Point(117) = {0.033314, -0.749922, 0, 1.0};
Point(118) = {0.026104, -0.750000, 0, 1.0};
Point(119) = {0.018649, -0.749938, 0, 1.0};
Point(120) = {0.011041, -0.749722, 0, 1.0};
Point(121) = {0.003370, -0.749341, 0, 1.0};
Point(122) = {-0.004272, -0.748777, 0, 1.0};
Point(123) = {-0.011795, -0.748011, 0, 1.0};
Point(124) = {-0.019095, -0.746983, 0, 1.0};
Point(125) = {-0.026172, -0.745588, 0, 1.0};
Point(126) = {-0.033112, -0.743816, 0, 1.0};
Point(127) = {-0.040014, -0.741780, 0, 1.0};
Point(128) = {-0.046873, -0.739704, 0, 1.0};
Point(129) = {-0.053539, -0.737789, 0, 1.0};
Point(130) = {-0.059835, -0.736143, 0, 1.0};
Point(131) = {-0.065573, -0.734837, 0, 1.0};
Point(132) = {-0.070568, -0.733893, 0, 1.0};
Point(133) = {-0.074659, -0.733289, 0, 1.0};
Point(134) = {-0.074829, -0.733268, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:50};
Spline(3) = {50:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:85};
Spline(6) = {85:117};
Spline(7) = {117:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html