SetFactory("OpenCASCADE");

Point(1) = {0.074423, 0.730076, 0, 1.0};
Point(2) = {0.073730, 0.730073, 0, 1.0};
Point(3) = {0.068130, 0.729985, 0, 1.0};
Point(4) = {0.061758, 0.729778, 0, 1.0};
Point(5) = {0.054727, 0.729447, 0, 1.0};
Point(6) = {0.047160, 0.729001, 0, 1.0};
Point(7) = {0.039180, 0.728460, 0, 1.0};
Point(8) = {0.030911, 0.727852, 0, 1.0};
Point(9) = {0.022471, 0.727216, 0, 1.0};
Point(10) = {0.013974, 0.726592, 0, 1.0};
Point(11) = {0.005526, 0.726025, 0, 1.0};
Point(12) = {-0.002776, 0.725561, 0, 1.0};
Point(13) = {-0.010845, 0.725243, 0, 1.0};
Point(14) = {-0.018603, 0.725110, 0, 1.0};
Point(15) = {-0.025981, 0.725196, 0, 1.0};
Point(16) = {-0.032919, 0.725532, 0, 1.0};
Point(17) = {-0.039365, 0.726139, 0, 1.0};
Point(18) = {-0.045270, 0.727044, 0, 1.0};
Point(19) = {-0.050626, 0.728280, 0, 1.0};
Point(20) = {-0.055454, 0.729833, 0, 1.0};
Point(21) = {-0.059756, 0.731657, 0, 1.0};
Point(22) = {-0.063531, 0.733700, 0, 1.0};
Point(23) = {-0.066775, 0.735895, 0, 1.0};
Point(24) = {-0.069469, 0.738172, 0, 1.0};
Point(25) = {-0.071600, 0.740466, 0, 1.0};
Point(26) = {-0.073164, 0.742708, 0, 1.0};
Point(27) = {-0.074160, 0.744810, 0, 1.0};
Point(28) = {-0.074582, 0.746664, 0, 1.0};
Point(29) = {-0.074594, 0.747172, 0, 1.0};
Point(30) = {-0.074552, 0.747621, 0, 1.0};
Point(31) = {-0.074456, 0.748022, 0, 1.0};
Point(32) = {-0.074359, 0.748256, 0, 1.0};
Point(33) = {-0.074230, 0.748452, 0, 1.0};
Point(34) = {-0.074051, 0.748617, 0, 1.0};
Point(35) = {-0.073814, 0.748767, 0, 1.0};
Point(36) = {-0.073373, 0.748973, 0, 1.0};
Point(37) = {-0.072839, 0.749158, 0, 1.0};
Point(38) = {-0.071291, 0.749521, 0, 1.0};
Point(39) = {-0.068301, 0.749874, 0, 1.0};
Point(40) = {-0.064487, 0.750000, 0, 1.0};
Point(41) = {-0.059887, 0.749875, 0, 1.0};
Point(42) = {-0.054509, 0.749504, 0, 1.0};
Point(43) = {-0.048397, 0.748934, 0, 1.0};
Point(44) = {-0.041625, 0.748201, 0, 1.0};
Point(45) = {-0.034278, 0.747329, 0, 1.0};
Point(46) = {-0.026444, 0.746341, 0, 1.0};
Point(47) = {-0.018218, 0.745260, 0, 1.0};
Point(48) = {-0.009698, 0.744107, 0, 1.0};
Point(49) = {-0.000986, 0.742902, 0, 1.0};
Point(50) = {0.007813, 0.741664, 0, 1.0};
Point(51) = {0.016593, 0.740412, 0, 1.0};
Point(52) = {0.025251, 0.739163, 0, 1.0};
Point(53) = {0.033681, 0.737932, 0, 1.0};
Point(54) = {0.041781, 0.736733, 0, 1.0};
Point(55) = {0.049454, 0.735573, 0, 1.0};
Point(56) = {0.056619, 0.734456, 0, 1.0};
Point(57) = {0.063208, 0.733398, 0, 1.0};
Point(58) = {0.069152, 0.732429, 0, 1.0};
Point(59) = {0.074378, 0.731579, 0, 1.0};
Point(60) = {0.074584, 0.731547, 0, 1.0};
Point(61) = {-0.074423, -0.730076, 0, 1.0};
Point(62) = {-0.073730, -0.730073, 0, 1.0};
Point(63) = {-0.068130, -0.729985, 0, 1.0};
Point(64) = {-0.061758, -0.729778, 0, 1.0};
Point(65) = {-0.054727, -0.729447, 0, 1.0};
Point(66) = {-0.047160, -0.729001, 0, 1.0};
Point(67) = {-0.039180, -0.728460, 0, 1.0};
Point(68) = {-0.030911, -0.727852, 0, 1.0};
Point(69) = {-0.022471, -0.727216, 0, 1.0};
Point(70) = {-0.013974, -0.726592, 0, 1.0};
Point(71) = {-0.005526, -0.726025, 0, 1.0};
Point(72) = {0.002776, -0.725561, 0, 1.0};
Point(73) = {0.010845, -0.725243, 0, 1.0};
Point(74) = {0.018603, -0.725110, 0, 1.0};
Point(75) = {0.025981, -0.725196, 0, 1.0};
Point(76) = {0.032919, -0.725532, 0, 1.0};
Point(77) = {0.039365, -0.726139, 0, 1.0};
Point(78) = {0.045270, -0.727044, 0, 1.0};
Point(79) = {0.050626, -0.728280, 0, 1.0};
Point(80) = {0.055454, -0.729833, 0, 1.0};
Point(81) = {0.059756, -0.731657, 0, 1.0};
Point(82) = {0.063531, -0.733700, 0, 1.0};
Point(83) = {0.066775, -0.735895, 0, 1.0};
Point(84) = {0.069469, -0.738172, 0, 1.0};
Point(85) = {0.071600, -0.740466, 0, 1.0};
Point(86) = {0.073164, -0.742708, 0, 1.0};
Point(87) = {0.074160, -0.744810, 0, 1.0};
Point(88) = {0.074582, -0.746664, 0, 1.0};
Point(89) = {0.074594, -0.747172, 0, 1.0};
Point(90) = {0.074552, -0.747621, 0, 1.0};
Point(91) = {0.074456, -0.748022, 0, 1.0};
Point(92) = {0.074359, -0.748256, 0, 1.0};
Point(93) = {0.074230, -0.748452, 0, 1.0};
Point(94) = {0.074051, -0.748617, 0, 1.0};
Point(95) = {0.073814, -0.748767, 0, 1.0};
Point(96) = {0.073373, -0.748973, 0, 1.0};
Point(97) = {0.072839, -0.749158, 0, 1.0};
Point(98) = {0.071291, -0.749521, 0, 1.0};
Point(99) = {0.068301, -0.749874, 0, 1.0};
Point(100) = {0.064487, -0.750000, 0, 1.0};
Point(101) = {0.059887, -0.749875, 0, 1.0};
Point(102) = {0.054509, -0.749504, 0, 1.0};
Point(103) = {0.048397, -0.748934, 0, 1.0};
Point(104) = {0.041625, -0.748201, 0, 1.0};
Point(105) = {0.034278, -0.747329, 0, 1.0};
Point(106) = {0.026444, -0.746341, 0, 1.0};
Point(107) = {0.018218, -0.745260, 0, 1.0};
Point(108) = {0.009698, -0.744107, 0, 1.0};
Point(109) = {0.000986, -0.742902, 0, 1.0};
Point(110) = {-0.007813, -0.741664, 0, 1.0};
Point(111) = {-0.016593, -0.740412, 0, 1.0};
Point(112) = {-0.025251, -0.739163, 0, 1.0};
Point(113) = {-0.033681, -0.737932, 0, 1.0};
Point(114) = {-0.041781, -0.736733, 0, 1.0};
Point(115) = {-0.049454, -0.735573, 0, 1.0};
Point(116) = {-0.056619, -0.734456, 0, 1.0};
Point(117) = {-0.063208, -0.733398, 0, 1.0};
Point(118) = {-0.069152, -0.732429, 0, 1.0};
Point(119) = {-0.074378, -0.731579, 0, 1.0};
Point(120) = {-0.074584, -0.731547, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:17};
Spline(2) = {17:45};
Spline(3) = {45:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:77};
Spline(6) = {77:105};
Spline(7) = {105:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html