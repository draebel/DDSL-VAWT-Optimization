SetFactory("OpenCASCADE");

Point(1) = {0.074742, 0.744192, 0, 1.0};
Point(2) = {0.071991, 0.744337, 0, 1.0};
Point(3) = {0.067609, 0.744527, 0, 1.0};
Point(4) = {0.062393, 0.744755, 0, 1.0};
Point(5) = {0.056429, 0.745056, 0, 1.0};
Point(6) = {0.049818, 0.745444, 0, 1.0};
Point(7) = {0.042669, 0.745917, 0, 1.0};
Point(8) = {0.035098, 0.746468, 0, 1.0};
Point(9) = {0.027223, 0.747077, 0, 1.0};
Point(10) = {0.019162, 0.747715, 0, 1.0};
Point(11) = {0.011025, 0.748350, 0, 1.0};
Point(12) = {0.002921, 0.748938, 0, 1.0};
Point(13) = {-0.005052, 0.749438, 0, 1.0};
Point(14) = {-0.012806, 0.749805, 0, 1.0};
Point(15) = {-0.020261, 0.750000, 0, 1.0};
Point(16) = {-0.028900, 0.749867, 0, 1.0};
Point(17) = {-0.034006, 0.749705, 0, 1.0};
Point(18) = {-0.040218, 0.749123, 0, 1.0};
Point(19) = {-0.045987, 0.748238, 0, 1.0};
Point(20) = {-0.051306, 0.747082, 0, 1.0};
Point(21) = {-0.056154, 0.745695, 0, 1.0};
Point(22) = {-0.060503, 0.744130, 0, 1.0};
Point(23) = {-0.064320, 0.742429, 0, 1.0};
Point(24) = {-0.067579, 0.740644, 0, 1.0};
Point(25) = {-0.070250, 0.738821, 0, 1.0};
Point(26) = {-0.072318, 0.737014, 0, 1.0};
Point(27) = {-0.073770, 0.735285, 0, 1.0};
Point(28) = {-0.074600, 0.733709, 0, 1.0};
Point(29) = {-0.074776, 0.733039, 0, 1.0};
Point(30) = {-0.074809, 0.732660, 0, 1.0};
Point(31) = {-0.074798, 0.732425, 0, 1.0};
Point(32) = {-0.074762, 0.732211, 0, 1.0};
Point(33) = {-0.074733, 0.732112, 0, 1.0};
Point(34) = {-0.074696, 0.732021, 0, 1.0};
Point(35) = {-0.074650, 0.731937, 0, 1.0};
Point(36) = {-0.074588, 0.731862, 0, 1.0};
Point(37) = {-0.074511, 0.731789, 0, 1.0};
Point(38) = {-0.074420, 0.731719, 0, 1.0};
Point(39) = {-0.074205, 0.731582, 0, 1.0};
Point(40) = {-0.073949, 0.731453, 0, 1.0};
Point(41) = {-0.073489, 0.731265, 0, 1.0};
Point(42) = {-0.072495, 0.730959, 0, 1.0};
Point(43) = {-0.069912, 0.730473, 0, 1.0};
Point(44) = {-0.066465, 0.730124, 0, 1.0};
Point(45) = {-0.062195, 0.729901, 0, 1.0};
Point(46) = {-0.057143, 0.729783, 0, 1.0};
Point(47) = {-0.051381, 0.729732, 0, 1.0};
Point(48) = {-0.045005, 0.729733, 0, 1.0};
Point(49) = {-0.038113, 0.729789, 0, 1.0};
Point(50) = {-0.030802, 0.729909, 0, 1.0};
Point(51) = {-0.023160, 0.730107, 0, 1.0};
Point(52) = {-0.015274, 0.730392, 0, 1.0};
Point(53) = {-0.007228, 0.730767, 0, 1.0};
Point(54) = {0.000890, 0.731235, 0, 1.0};
Point(55) = {0.008989, 0.731790, 0, 1.0};
Point(56) = {0.016983, 0.732433, 0, 1.0};
Point(57) = {0.024784, 0.733160, 0, 1.0};
Point(58) = {0.032303, 0.733967, 0, 1.0};
Point(59) = {0.039458, 0.734856, 0, 1.0};
Point(60) = {0.046169, 0.735823, 0, 1.0};
Point(61) = {0.052354, 0.736896, 0, 1.0};
Point(62) = {0.058004, 0.738129, 0, 1.0};
Point(63) = {0.063197, 0.739479, 0, 1.0};
Point(64) = {0.067922, 0.740788, 0, 1.0};
Point(65) = {0.072069, 0.741931, 0, 1.0};
Point(66) = {0.074854, 0.742673, 0, 1.0};
Point(67) = {-0.074742, -0.744192, 0, 1.0};
Point(68) = {-0.071991, -0.744337, 0, 1.0};
Point(69) = {-0.067609, -0.744527, 0, 1.0};
Point(70) = {-0.062393, -0.744755, 0, 1.0};
Point(71) = {-0.056429, -0.745056, 0, 1.0};
Point(72) = {-0.049818, -0.745444, 0, 1.0};
Point(73) = {-0.042669, -0.745917, 0, 1.0};
Point(74) = {-0.035098, -0.746468, 0, 1.0};
Point(75) = {-0.027223, -0.747077, 0, 1.0};
Point(76) = {-0.019162, -0.747715, 0, 1.0};
Point(77) = {-0.011025, -0.748350, 0, 1.0};
Point(78) = {-0.002921, -0.748938, 0, 1.0};
Point(79) = {0.005052, -0.749438, 0, 1.0};
Point(80) = {0.012806, -0.749805, 0, 1.0};
Point(81) = {0.020261, -0.750000, 0, 1.0};
Point(82) = {0.028900, -0.749867, 0, 1.0};
Point(83) = {0.034006, -0.749705, 0, 1.0};
Point(84) = {0.040218, -0.749123, 0, 1.0};
Point(85) = {0.045987, -0.748238, 0, 1.0};
Point(86) = {0.051306, -0.747082, 0, 1.0};
Point(87) = {0.056154, -0.745695, 0, 1.0};
Point(88) = {0.060503, -0.744130, 0, 1.0};
Point(89) = {0.064320, -0.742429, 0, 1.0};
Point(90) = {0.067579, -0.740644, 0, 1.0};
Point(91) = {0.070250, -0.738821, 0, 1.0};
Point(92) = {0.072318, -0.737014, 0, 1.0};
Point(93) = {0.073770, -0.735285, 0, 1.0};
Point(94) = {0.074600, -0.733709, 0, 1.0};
Point(95) = {0.074776, -0.733039, 0, 1.0};
Point(96) = {0.074809, -0.732660, 0, 1.0};
Point(97) = {0.074798, -0.732425, 0, 1.0};
Point(98) = {0.074762, -0.732211, 0, 1.0};
Point(99) = {0.074733, -0.732112, 0, 1.0};
Point(100) = {0.074696, -0.732021, 0, 1.0};
Point(101) = {0.074650, -0.731937, 0, 1.0};
Point(102) = {0.074588, -0.731862, 0, 1.0};
Point(103) = {0.074511, -0.731789, 0, 1.0};
Point(104) = {0.074420, -0.731719, 0, 1.0};
Point(105) = {0.074205, -0.731582, 0, 1.0};
Point(106) = {0.073949, -0.731453, 0, 1.0};
Point(107) = {0.073489, -0.731265, 0, 1.0};
Point(108) = {0.072495, -0.730959, 0, 1.0};
Point(109) = {0.069912, -0.730473, 0, 1.0};
Point(110) = {0.066465, -0.730124, 0, 1.0};
Point(111) = {0.062195, -0.729901, 0, 1.0};
Point(112) = {0.057143, -0.729783, 0, 1.0};
Point(113) = {0.051381, -0.729732, 0, 1.0};
Point(114) = {0.045005, -0.729733, 0, 1.0};
Point(115) = {0.038113, -0.729789, 0, 1.0};
Point(116) = {0.030802, -0.729909, 0, 1.0};
Point(117) = {0.023160, -0.730107, 0, 1.0};
Point(118) = {0.015274, -0.730392, 0, 1.0};
Point(119) = {0.007228, -0.730767, 0, 1.0};
Point(120) = {-0.000890, -0.731235, 0, 1.0};
Point(121) = {-0.008989, -0.731790, 0, 1.0};
Point(122) = {-0.016983, -0.732433, 0, 1.0};
Point(123) = {-0.024784, -0.733160, 0, 1.0};
Point(124) = {-0.032303, -0.733967, 0, 1.0};
Point(125) = {-0.039458, -0.734856, 0, 1.0};
Point(126) = {-0.046169, -0.735823, 0, 1.0};
Point(127) = {-0.052354, -0.736896, 0, 1.0};
Point(128) = {-0.058004, -0.738129, 0, 1.0};
Point(129) = {-0.063197, -0.739479, 0, 1.0};
Point(130) = {-0.067922, -0.740788, 0, 1.0};
Point(131) = {-0.072069, -0.741931, 0, 1.0};
Point(132) = {-0.074854, -0.742673, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:17};
Spline(2) = {17:49};
Spline(3) = {49:66};
Spline(4) = {66,1};

// Lines: second blade (splines 5-8)
Spline(5) = {67:83};
Spline(6) = {83:115};
Spline(7) = {115:132};
Spline(8) = {132,67};

// Outer domain (points 20001-4 and lines)
Point(133) = {-13.50000000, -15.00000000, 0, 1.0};
Point(134) = {-13.50000000, 15.00000000, 0, 1.0};
Point(135) = {13.50000000, 15.00000000, 0, 1.0};
Point(136) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {133, 134};
Line(12) = {134, 135};
Line(13) = {135, 136};
Line(14) = {133, 136};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html