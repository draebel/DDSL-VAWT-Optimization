SetFactory("OpenCASCADE");

Point(1) = {0.075074, 0.745109, 0, 1.0};
Point(2) = {0.073239, 0.744393, 0, 1.0};
Point(3) = {0.069048, 0.742944, 0, 1.0};
Point(4) = {0.064168, 0.741490, 0, 1.0};
Point(5) = {0.058648, 0.739996, 0, 1.0};
Point(6) = {0.052564, 0.738468, 0, 1.0};
Point(7) = {0.045996, 0.736922, 0, 1.0};
Point(8) = {0.039031, 0.735383, 0, 1.0};
Point(9) = {0.031757, 0.733878, 0, 1.0};
Point(10) = {0.024266, 0.732440, 0, 1.0};
Point(11) = {0.016649, 0.731105, 0, 1.0};
Point(12) = {0.008997, 0.729912, 0, 1.0};
Point(13) = {0.001398, 0.728906, 0, 1.0};
Point(14) = {-0.006065, 0.728141, 0, 1.0};
Point(15) = {-0.013338, 0.727717, 0, 1.0};
Point(16) = {-0.020494, 0.727638, 0, 1.0};
Point(17) = {-0.027476, 0.727822, 0, 1.0};
Point(18) = {-0.034208, 0.728238, 0, 1.0};
Point(19) = {-0.040618, 0.728861, 0, 1.0};
Point(20) = {-0.046637, 0.729670, 0, 1.0};
Point(21) = {-0.052200, 0.730644, 0, 1.0};
Point(22) = {-0.057249, 0.731762, 0, 1.0};
Point(23) = {-0.061730, 0.733002, 0, 1.0};
Point(24) = {-0.065605, 0.734341, 0, 1.0};
Point(25) = {-0.068833, 0.735750, 0, 1.0};
Point(26) = {-0.071397, 0.737196, 0, 1.0};
Point(27) = {-0.073266, 0.738632, 0, 1.0};
Point(28) = {-0.074449, 0.740005, 0, 1.0};
Point(29) = {-0.074873, 0.740929, 0, 1.0};
Point(30) = {-0.074911, 0.741175, 0, 1.0};
Point(31) = {-0.074912, 0.741190, 0, 1.0};
Point(32) = {-0.074892, 0.741418, 0, 1.0};
Point(33) = {-0.074782, 0.741626, 0, 1.0};
Point(34) = {-0.074599, 0.741842, 0, 1.0};
Point(35) = {-0.074369, 0.742050, 0, 1.0};
Point(36) = {-0.072823, 0.742940, 0, 1.0};
Point(37) = {-0.070389, 0.743828, 0, 1.0};
Point(38) = {-0.067123, 0.744689, 0, 1.0};
Point(39) = {-0.063046, 0.745521, 0, 1.0};
Point(40) = {-0.058216, 0.746338, 0, 1.0};
Point(41) = {-0.052683, 0.747164, 0, 1.0};
Point(42) = {-0.046577, 0.748099, 0, 1.0};
Point(43) = {-0.040217, 0.749032, 0, 1.0};
Point(44) = {-0.033642, 0.749688, 0, 1.0};
Point(45) = {-0.026733, 0.750000, 0, 1.0};
Point(46) = {-0.019539, 0.749943, 0, 1.0};
Point(47) = {-0.011939, 0.749473, 0, 1.0};
Point(48) = {-0.003933, 0.748717, 0, 1.0};
Point(49) = {0.004472, 0.747765, 0, 1.0};
Point(50) = {0.013212, 0.746778, 0, 1.0};
Point(51) = {0.022139, 0.745886, 0, 1.0};
Point(52) = {0.031086, 0.745176, 0, 1.0};
Point(53) = {0.039877, 0.744714, 0, 1.0};
Point(54) = {0.048328, 0.744537, 0, 1.0};
Point(55) = {0.056257, 0.744660, 0, 1.0};
Point(56) = {0.063487, 0.745078, 0, 1.0};
Point(57) = {0.069829, 0.745779, 0, 1.0};
Point(58) = {0.075000, 0.746635, 0, 1.0};
Point(59) = {-0.075074, -0.745109, 0, 1.0};
Point(60) = {-0.073239, -0.744393, 0, 1.0};
Point(61) = {-0.069048, -0.742944, 0, 1.0};
Point(62) = {-0.064168, -0.741490, 0, 1.0};
Point(63) = {-0.058648, -0.739996, 0, 1.0};
Point(64) = {-0.052564, -0.738468, 0, 1.0};
Point(65) = {-0.045996, -0.736922, 0, 1.0};
Point(66) = {-0.039031, -0.735383, 0, 1.0};
Point(67) = {-0.031757, -0.733878, 0, 1.0};
Point(68) = {-0.024266, -0.732440, 0, 1.0};
Point(69) = {-0.016649, -0.731105, 0, 1.0};
Point(70) = {-0.008997, -0.729912, 0, 1.0};
Point(71) = {-0.001398, -0.728906, 0, 1.0};
Point(72) = {0.006065, -0.728141, 0, 1.0};
Point(73) = {0.013338, -0.727717, 0, 1.0};
Point(74) = {0.020494, -0.727638, 0, 1.0};
Point(75) = {0.027476, -0.727822, 0, 1.0};
Point(76) = {0.034208, -0.728238, 0, 1.0};
Point(77) = {0.040618, -0.728861, 0, 1.0};
Point(78) = {0.046637, -0.729670, 0, 1.0};
Point(79) = {0.052200, -0.730644, 0, 1.0};
Point(80) = {0.057249, -0.731762, 0, 1.0};
Point(81) = {0.061730, -0.733002, 0, 1.0};
Point(82) = {0.065605, -0.734341, 0, 1.0};
Point(83) = {0.068833, -0.735750, 0, 1.0};
Point(84) = {0.071397, -0.737196, 0, 1.0};
Point(85) = {0.073266, -0.738632, 0, 1.0};
Point(86) = {0.074449, -0.740005, 0, 1.0};
Point(87) = {0.074873, -0.740929, 0, 1.0};
Point(88) = {0.074911, -0.741175, 0, 1.0};
Point(89) = {0.074912, -0.741190, 0, 1.0};
Point(90) = {0.074892, -0.741418, 0, 1.0};
Point(91) = {0.074782, -0.741626, 0, 1.0};
Point(92) = {0.074599, -0.741842, 0, 1.0};
Point(93) = {0.074369, -0.742050, 0, 1.0};
Point(94) = {0.072823, -0.742940, 0, 1.0};
Point(95) = {0.070389, -0.743828, 0, 1.0};
Point(96) = {0.067123, -0.744689, 0, 1.0};
Point(97) = {0.063046, -0.745521, 0, 1.0};
Point(98) = {0.058216, -0.746338, 0, 1.0};
Point(99) = {0.052683, -0.747164, 0, 1.0};
Point(100) = {0.046577, -0.748099, 0, 1.0};
Point(101) = {0.040217, -0.749032, 0, 1.0};
Point(102) = {0.033642, -0.749688, 0, 1.0};
Point(103) = {0.026733, -0.750000, 0, 1.0};
Point(104) = {0.019539, -0.749943, 0, 1.0};
Point(105) = {0.011939, -0.749473, 0, 1.0};
Point(106) = {0.003933, -0.748717, 0, 1.0};
Point(107) = {-0.004472, -0.747765, 0, 1.0};
Point(108) = {-0.013212, -0.746778, 0, 1.0};
Point(109) = {-0.022139, -0.745886, 0, 1.0};
Point(110) = {-0.031086, -0.745176, 0, 1.0};
Point(111) = {-0.039877, -0.744714, 0, 1.0};
Point(112) = {-0.048328, -0.744537, 0, 1.0};
Point(113) = {-0.056257, -0.744660, 0, 1.0};
Point(114) = {-0.063487, -0.745078, 0, 1.0};
Point(115) = {-0.069829, -0.745779, 0, 1.0};
Point(116) = {-0.075000, -0.746635, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:44};
Spline(3) = {44:58};
Spline(4) = {58,1};

// Lines: second blade (splines 5-8)
Spline(5) = {59:76};
Spline(6) = {76:102};
Spline(7) = {102:116};
Spline(8) = {116,59};

// Outer domain (points 20001-4 and lines)
Point(117) = {-13.50000000, -15.00000000, 0, 1.0};
Point(118) = {-13.50000000, 15.00000000, 0, 1.0};
Point(119) = {13.50000000, 15.00000000, 0, 1.0};
Point(120) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {117, 118};
Line(12) = {118, 119};
Line(13) = {119, 120};
Line(14) = {117, 120};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html