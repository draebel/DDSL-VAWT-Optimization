SetFactory("OpenCASCADE");

Point(1) = {0.075037, 0.726581, 0, 1.0};
Point(2) = {0.074689, 0.726458, 0, 1.0};
Point(3) = {0.070651, 0.725081, 0, 1.0};
Point(4) = {0.065943, 0.723696, 0, 1.0};
Point(5) = {0.060514, 0.722319, 0, 1.0};
Point(6) = {0.054428, 0.720908, 0, 1.0};
Point(7) = {0.047778, 0.719473, 0, 1.0};
Point(8) = {0.040661, 0.718035, 0, 1.0};
Point(9) = {0.033176, 0.716624, 0, 1.0};
Point(10) = {0.025419, 0.715276, 0, 1.0};
Point(11) = {0.017488, 0.714027, 0, 1.0};
Point(12) = {0.009475, 0.712918, 0, 1.0};
Point(13) = {0.001468, 0.711986, 0, 1.0};
Point(14) = {-0.006451, 0.711267, 0, 1.0};
Point(15) = {-0.014205, 0.710794, 0, 1.0};
Point(16) = {-0.021723, 0.710594, 0, 1.0};
Point(17) = {-0.028942, 0.710692, 0, 1.0};
Point(18) = {-0.035813, 0.711121, 0, 1.0};
Point(19) = {-0.042340, 0.711862, 0, 1.0};
Point(20) = {-0.048461, 0.712858, 0, 1.0};
Point(21) = {-0.054103, 0.714076, 0, 1.0};
Point(22) = {-0.059202, 0.715489, 0, 1.0};
Point(23) = {-0.063692, 0.717074, 0, 1.0};
Point(24) = {-0.067524, 0.718804, 0, 1.0};
Point(25) = {-0.070635, 0.720655, 0, 1.0};
Point(26) = {-0.073000, 0.722600, 0, 1.0};
Point(27) = {-0.074308, 0.724190, 0, 1.0};
Point(28) = {-0.074528, 0.724565, 0, 1.0};
Point(29) = {-0.074587, 0.724680, 0, 1.0};
Point(30) = {-0.074794, 0.725168, 0, 1.0};
Point(31) = {-0.074914, 0.725679, 0, 1.0};
Point(32) = {-0.074975, 0.726227, 0, 1.0};
Point(33) = {-0.074988, 0.726667, 0, 1.0};
Point(34) = {-0.074639, 0.729178, 0, 1.0};
Point(35) = {-0.073662, 0.731945, 0, 1.0};
Point(36) = {-0.072142, 0.734874, 0, 1.0};
Point(37) = {-0.070151, 0.737819, 0, 1.0};
Point(38) = {-0.067709, 0.740687, 0, 1.0};
Point(39) = {-0.064865, 0.743361, 0, 1.0};
Point(40) = {-0.061643, 0.745732, 0, 1.0};
Point(41) = {-0.058043, 0.747632, 0, 1.0};
Point(42) = {-0.053970, 0.749030, 0, 1.0};
Point(43) = {-0.049464, 0.749828, 0, 1.0};
Point(44) = {-0.044363, 0.750000, 0, 1.0};
Point(45) = {-0.038673, 0.749634, 0, 1.0};
Point(46) = {-0.032414, 0.748762, 0, 1.0};
Point(47) = {-0.025603, 0.747426, 0, 1.0};
Point(48) = {-0.018263, 0.745684, 0, 1.0};
Point(49) = {-0.010425, 0.743613, 0, 1.0};
Point(50) = {-0.002140, 0.741309, 0, 1.0};
Point(51) = {0.006524, 0.738884, 0, 1.0};
Point(52) = {0.015469, 0.736461, 0, 1.0};
Point(53) = {0.024570, 0.734163, 0, 1.0};
Point(54) = {0.033668, 0.732111, 0, 1.0};
Point(55) = {0.042581, 0.730404, 0, 1.0};
Point(56) = {0.051101, 0.729116, 0, 1.0};
Point(57) = {0.059008, 0.728283, 0, 1.0};
Point(58) = {0.066086, 0.727899, 0, 1.0};
Point(59) = {0.072128, 0.727912, 0, 1.0};
Point(60) = {0.075011, 0.728060, 0, 1.0};
Point(61) = {-0.075037, -0.726581, 0, 1.0};
Point(62) = {-0.074689, -0.726458, 0, 1.0};
Point(63) = {-0.070651, -0.725081, 0, 1.0};
Point(64) = {-0.065943, -0.723696, 0, 1.0};
Point(65) = {-0.060514, -0.722319, 0, 1.0};
Point(66) = {-0.054428, -0.720908, 0, 1.0};
Point(67) = {-0.047778, -0.719473, 0, 1.0};
Point(68) = {-0.040661, -0.718035, 0, 1.0};
Point(69) = {-0.033176, -0.716624, 0, 1.0};
Point(70) = {-0.025419, -0.715276, 0, 1.0};
Point(71) = {-0.017488, -0.714027, 0, 1.0};
Point(72) = {-0.009475, -0.712918, 0, 1.0};
Point(73) = {-0.001468, -0.711986, 0, 1.0};
Point(74) = {0.006451, -0.711267, 0, 1.0};
Point(75) = {0.014205, -0.710794, 0, 1.0};
Point(76) = {0.021723, -0.710594, 0, 1.0};
Point(77) = {0.028942, -0.710692, 0, 1.0};
Point(78) = {0.035813, -0.711121, 0, 1.0};
Point(79) = {0.042340, -0.711862, 0, 1.0};
Point(80) = {0.048461, -0.712858, 0, 1.0};
Point(81) = {0.054103, -0.714076, 0, 1.0};
Point(82) = {0.059202, -0.715489, 0, 1.0};
Point(83) = {0.063692, -0.717074, 0, 1.0};
Point(84) = {0.067524, -0.718804, 0, 1.0};
Point(85) = {0.070635, -0.720655, 0, 1.0};
Point(86) = {0.073000, -0.722600, 0, 1.0};
Point(87) = {0.074308, -0.724190, 0, 1.0};
Point(88) = {0.074528, -0.724565, 0, 1.0};
Point(89) = {0.074587, -0.724680, 0, 1.0};
Point(90) = {0.074794, -0.725168, 0, 1.0};
Point(91) = {0.074914, -0.725679, 0, 1.0};
Point(92) = {0.074975, -0.726227, 0, 1.0};
Point(93) = {0.074988, -0.726667, 0, 1.0};
Point(94) = {0.074639, -0.729178, 0, 1.0};
Point(95) = {0.073662, -0.731945, 0, 1.0};
Point(96) = {0.072142, -0.734874, 0, 1.0};
Point(97) = {0.070151, -0.737819, 0, 1.0};
Point(98) = {0.067709, -0.740687, 0, 1.0};
Point(99) = {0.064865, -0.743361, 0, 1.0};
Point(100) = {0.061643, -0.745732, 0, 1.0};
Point(101) = {0.058043, -0.747632, 0, 1.0};
Point(102) = {0.053970, -0.749030, 0, 1.0};
Point(103) = {0.049464, -0.749828, 0, 1.0};
Point(104) = {0.044363, -0.750000, 0, 1.0};
Point(105) = {0.038673, -0.749634, 0, 1.0};
Point(106) = {0.032414, -0.748762, 0, 1.0};
Point(107) = {0.025603, -0.747426, 0, 1.0};
Point(108) = {0.018263, -0.745684, 0, 1.0};
Point(109) = {0.010425, -0.743613, 0, 1.0};
Point(110) = {0.002140, -0.741309, 0, 1.0};
Point(111) = {-0.006524, -0.738884, 0, 1.0};
Point(112) = {-0.015469, -0.736461, 0, 1.0};
Point(113) = {-0.024570, -0.734163, 0, 1.0};
Point(114) = {-0.033668, -0.732111, 0, 1.0};
Point(115) = {-0.042581, -0.730404, 0, 1.0};
Point(116) = {-0.051101, -0.729116, 0, 1.0};
Point(117) = {-0.059008, -0.728283, 0, 1.0};
Point(118) = {-0.066086, -0.727899, 0, 1.0};
Point(119) = {-0.072128, -0.727912, 0, 1.0};
Point(120) = {-0.075011, -0.728060, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:45};
Spline(3) = {45:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:78};
Spline(6) = {78:105};
Spline(7) = {105:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 35 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html