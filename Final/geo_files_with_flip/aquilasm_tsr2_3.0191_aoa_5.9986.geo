SetFactory("OpenCASCADE");

Point(1) = {0.074444, 0.731802, 0, 1.0};
Point(2) = {0.071050, 0.731587, 0, 1.0};
Point(3) = {0.062505, 0.731037, 0, 1.0};
Point(4) = {0.053960, 0.730479, 0, 1.0};
Point(5) = {0.044350, 0.729878, 0, 1.0};
Point(6) = {0.035813, 0.729394, 0, 1.0};
Point(7) = {0.027282, 0.728981, 0, 1.0};
Point(8) = {0.018762, 0.728664, 0, 1.0};
Point(9) = {0.010256, 0.728469, 0, 1.0};
Point(10) = {0.001764, 0.728431, 0, 1.0};
Point(11) = {-0.006706, 0.728582, 0, 1.0};
Point(12) = {-0.014099, 0.728901, 0, 1.0};
Point(13) = {-0.021469, 0.729422, 0, 1.0};
Point(14) = {-0.026720, 0.729934, 0, 1.0};
Point(15) = {-0.033002, 0.730722, 0, 1.0};
Point(16) = {-0.039262, 0.731725, 0, 1.0};
Point(17) = {-0.045494, 0.732989, 0, 1.0};
Point(18) = {-0.050661, 0.734293, 0, 1.0};
Point(19) = {-0.055797, 0.735887, 0, 1.0};
Point(20) = {-0.060895, 0.737858, 0, 1.0};
Point(21) = {-0.065938, 0.740339, 0, 1.0};
Point(22) = {-0.067934, 0.741527, 0, 1.0};
Point(23) = {-0.069915, 0.742876, 0, 1.0};
Point(24) = {-0.070895, 0.743630, 0, 1.0};
Point(25) = {-0.071869, 0.744461, 0, 1.0};
Point(26) = {-0.072831, 0.745414, 0, 1.0};
Point(27) = {-0.073303, 0.745961, 0, 1.0};
Point(28) = {-0.073767, 0.746586, 0, 1.0};
Point(29) = {-0.074219, 0.747347, 0, 1.0};
Point(30) = {-0.074589, 0.748864, 0, 1.0};
Point(31) = {-0.073971, 0.749709, 0, 1.0};
Point(32) = {-0.073420, 0.749895, 0, 1.0};
Point(33) = {-0.072882, 0.749973, 0, 1.0};
Point(34) = {-0.072349, 0.750000, 0, 1.0};
Point(35) = {-0.071290, 0.749976, 0, 1.0};
Point(36) = {-0.070236, 0.749902, 0, 1.0};
Point(37) = {-0.069187, 0.749803, 0, 1.0};
Point(38) = {-0.067089, 0.749570, 0, 1.0};
Point(39) = {-0.064994, 0.749319, 0, 1.0};
Point(40) = {-0.059757, 0.748683, 0, 1.0};
Point(41) = {-0.054517, 0.748061, 0, 1.0};
Point(42) = {-0.049277, 0.747456, 0, 1.0};
Point(43) = {-0.044037, 0.746859, 0, 1.0};
Point(44) = {-0.037747, 0.746144, 0, 1.0};
Point(45) = {-0.031457, 0.745426, 0, 1.0};
Point(46) = {-0.025168, 0.744705, 0, 1.0};
Point(47) = {-0.019926, 0.744103, 0, 1.0};
Point(48) = {-0.012590, 0.743262, 0, 1.0};
Point(49) = {-0.005252, 0.742421, 0, 1.0};
Point(50) = {0.003133, 0.741461, 0, 1.0};
Point(51) = {0.011520, 0.740500, 0, 1.0};
Point(52) = {0.019905, 0.739539, 0, 1.0};
Point(53) = {0.028290, 0.738578, 0, 1.0};
Point(54) = {0.036677, 0.737616, 0, 1.0};
Point(55) = {0.045062, 0.736655, 0, 1.0};
Point(56) = {0.054496, 0.735575, 0, 1.0};
Point(57) = {0.062881, 0.734613, 0, 1.0};
Point(58) = {0.071267, 0.733649, 0, 1.0};
Point(59) = {0.074597, 0.733266, 0, 1.0};
Point(60) = {-0.074444, -0.731802, 0, 1.0};
Point(61) = {-0.071050, -0.731587, 0, 1.0};
Point(62) = {-0.062505, -0.731037, 0, 1.0};
Point(63) = {-0.053960, -0.730479, 0, 1.0};
Point(64) = {-0.044350, -0.729878, 0, 1.0};
Point(65) = {-0.035813, -0.729394, 0, 1.0};
Point(66) = {-0.027282, -0.728981, 0, 1.0};
Point(67) = {-0.018762, -0.728664, 0, 1.0};
Point(68) = {-0.010256, -0.728469, 0, 1.0};
Point(69) = {-0.001764, -0.728431, 0, 1.0};
Point(70) = {0.006706, -0.728582, 0, 1.0};
Point(71) = {0.014099, -0.728901, 0, 1.0};
Point(72) = {0.021469, -0.729422, 0, 1.0};
Point(73) = {0.026720, -0.729934, 0, 1.0};
Point(74) = {0.033002, -0.730722, 0, 1.0};
Point(75) = {0.039262, -0.731725, 0, 1.0};
Point(76) = {0.045494, -0.732989, 0, 1.0};
Point(77) = {0.050661, -0.734293, 0, 1.0};
Point(78) = {0.055797, -0.735887, 0, 1.0};
Point(79) = {0.060895, -0.737858, 0, 1.0};
Point(80) = {0.065938, -0.740339, 0, 1.0};
Point(81) = {0.067934, -0.741527, 0, 1.0};
Point(82) = {0.069915, -0.742876, 0, 1.0};
Point(83) = {0.070895, -0.743630, 0, 1.0};
Point(84) = {0.071869, -0.744461, 0, 1.0};
Point(85) = {0.072831, -0.745414, 0, 1.0};
Point(86) = {0.073303, -0.745961, 0, 1.0};
Point(87) = {0.073767, -0.746586, 0, 1.0};
Point(88) = {0.074219, -0.747347, 0, 1.0};
Point(89) = {0.074589, -0.748864, 0, 1.0};
Point(90) = {0.073971, -0.749709, 0, 1.0};
Point(91) = {0.073420, -0.749895, 0, 1.0};
Point(92) = {0.072882, -0.749973, 0, 1.0};
Point(93) = {0.072349, -0.750000, 0, 1.0};
Point(94) = {0.071290, -0.749976, 0, 1.0};
Point(95) = {0.070236, -0.749902, 0, 1.0};
Point(96) = {0.069187, -0.749803, 0, 1.0};
Point(97) = {0.067089, -0.749570, 0, 1.0};
Point(98) = {0.064994, -0.749319, 0, 1.0};
Point(99) = {0.059757, -0.748683, 0, 1.0};
Point(100) = {0.054517, -0.748061, 0, 1.0};
Point(101) = {0.049277, -0.747456, 0, 1.0};
Point(102) = {0.044037, -0.746859, 0, 1.0};
Point(103) = {0.037747, -0.746144, 0, 1.0};
Point(104) = {0.031457, -0.745426, 0, 1.0};
Point(105) = {0.025168, -0.744705, 0, 1.0};
Point(106) = {0.019926, -0.744103, 0, 1.0};
Point(107) = {0.012590, -0.743262, 0, 1.0};
Point(108) = {0.005252, -0.742421, 0, 1.0};
Point(109) = {-0.003133, -0.741461, 0, 1.0};
Point(110) = {-0.011520, -0.740500, 0, 1.0};
Point(111) = {-0.019905, -0.739539, 0, 1.0};
Point(112) = {-0.028290, -0.738578, 0, 1.0};
Point(113) = {-0.036677, -0.737616, 0, 1.0};
Point(114) = {-0.045062, -0.736655, 0, 1.0};
Point(115) = {-0.054496, -0.735575, 0, 1.0};
Point(116) = {-0.062881, -0.734613, 0, 1.0};
Point(117) = {-0.071267, -0.733649, 0, 1.0};
Point(118) = {-0.074597, -0.733266, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:15};
Spline(2) = {15:44};
Spline(3) = {44:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:74};
Spline(6) = {74:103};
Spline(7) = {103:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html