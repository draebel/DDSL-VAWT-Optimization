SetFactory("OpenCASCADE");

Point(1) = {0.074996, 0.746715, 0, 1.0};
Point(2) = {0.071642, 0.746155, 0, 1.0};
Point(3) = {0.063197, 0.744738, 0, 1.0};
Point(4) = {0.054754, 0.743313, 0, 1.0};
Point(5) = {0.045254, 0.741737, 0, 1.0};
Point(6) = {0.036811, 0.740386, 0, 1.0};
Point(7) = {0.028366, 0.739107, 0, 1.0};
Point(8) = {0.019923, 0.737924, 0, 1.0};
Point(9) = {0.011481, 0.736864, 0, 1.0};
Point(10) = {0.003037, 0.735962, 0, 1.0};
Point(11) = {-0.005404, 0.735250, 0, 1.0};
Point(12) = {-0.012791, 0.734815, 0, 1.0};
Point(13) = {-0.020176, 0.734583, 0, 1.0};
Point(14) = {-0.025452, 0.734558, 0, 1.0};
Point(15) = {-0.031782, 0.734702, 0, 1.0};
Point(16) = {-0.038111, 0.735062, 0, 1.0};
Point(17) = {-0.044439, 0.735685, 0, 1.0};
Point(18) = {-0.049712, 0.736456, 0, 1.0};
Point(19) = {-0.054984, 0.737520, 0, 1.0};
Point(20) = {-0.060256, 0.738961, 0, 1.0};
Point(21) = {-0.065525, 0.740916, 0, 1.0};
Point(22) = {-0.067632, 0.741895, 0, 1.0};
Point(23) = {-0.069740, 0.743035, 0, 1.0};
Point(24) = {-0.070792, 0.743685, 0, 1.0};
Point(25) = {-0.071846, 0.744413, 0, 1.0};
Point(26) = {-0.072899, 0.745263, 0, 1.0};
Point(27) = {-0.073425, 0.745759, 0, 1.0};
Point(28) = {-0.073950, 0.746334, 0, 1.0};
Point(29) = {-0.074477, 0.747044, 0, 1.0};
Point(30) = {-0.075000, 0.748516, 0, 1.0};
Point(31) = {-0.074470, 0.749419, 0, 1.0};
Point(32) = {-0.073941, 0.749660, 0, 1.0};
Point(33) = {-0.073414, 0.749793, 0, 1.0};
Point(34) = {-0.072887, 0.749874, 0, 1.0};
Point(35) = {-0.071831, 0.749958, 0, 1.0};
Point(36) = {-0.070775, 0.749992, 0, 1.0};
Point(37) = {-0.069721, 0.750000, 0, 1.0};
Point(38) = {-0.067610, 0.749982, 0, 1.0};
Point(39) = {-0.065501, 0.749946, 0, 1.0};
Point(40) = {-0.060226, 0.749846, 0, 1.0};
Point(41) = {-0.054950, 0.749760, 0, 1.0};
Point(42) = {-0.049676, 0.749692, 0, 1.0};
Point(43) = {-0.044402, 0.749632, 0, 1.0};
Point(44) = {-0.038072, 0.749561, 0, 1.0};
Point(45) = {-0.031742, 0.749487, 0, 1.0};
Point(46) = {-0.025412, 0.749410, 0, 1.0};
Point(47) = {-0.020136, 0.749345, 0, 1.0};
Point(48) = {-0.012752, 0.749255, 0, 1.0};
Point(49) = {-0.005367, 0.749165, 0, 1.0};
Point(50) = {0.003073, 0.749063, 0, 1.0};
Point(51) = {0.011514, 0.748961, 0, 1.0};
Point(52) = {0.019953, 0.748859, 0, 1.0};
Point(53) = {0.028392, 0.748757, 0, 1.0};
Point(54) = {0.036833, 0.748654, 0, 1.0};
Point(55) = {0.045273, 0.748551, 0, 1.0};
Point(56) = {0.054768, 0.748437, 0, 1.0};
Point(57) = {0.063207, 0.748333, 0, 1.0};
Point(58) = {0.071648, 0.748228, 0, 1.0};
Point(59) = {0.075000, 0.748186, 0, 1.0};
Point(60) = {-0.074996, -0.746715, 0, 1.0};
Point(61) = {-0.071642, -0.746155, 0, 1.0};
Point(62) = {-0.063197, -0.744738, 0, 1.0};
Point(63) = {-0.054754, -0.743313, 0, 1.0};
Point(64) = {-0.045254, -0.741737, 0, 1.0};
Point(65) = {-0.036811, -0.740386, 0, 1.0};
Point(66) = {-0.028366, -0.739107, 0, 1.0};
Point(67) = {-0.019923, -0.737924, 0, 1.0};
Point(68) = {-0.011481, -0.736864, 0, 1.0};
Point(69) = {-0.003037, -0.735962, 0, 1.0};
Point(70) = {0.005404, -0.735250, 0, 1.0};
Point(71) = {0.012791, -0.734815, 0, 1.0};
Point(72) = {0.020176, -0.734583, 0, 1.0};
Point(73) = {0.025452, -0.734558, 0, 1.0};
Point(74) = {0.031782, -0.734702, 0, 1.0};
Point(75) = {0.038111, -0.735062, 0, 1.0};
Point(76) = {0.044439, -0.735685, 0, 1.0};
Point(77) = {0.049712, -0.736456, 0, 1.0};
Point(78) = {0.054984, -0.737520, 0, 1.0};
Point(79) = {0.060256, -0.738961, 0, 1.0};
Point(80) = {0.065525, -0.740916, 0, 1.0};
Point(81) = {0.067632, -0.741895, 0, 1.0};
Point(82) = {0.069740, -0.743035, 0, 1.0};
Point(83) = {0.070792, -0.743685, 0, 1.0};
Point(84) = {0.071846, -0.744413, 0, 1.0};
Point(85) = {0.072899, -0.745263, 0, 1.0};
Point(86) = {0.073425, -0.745759, 0, 1.0};
Point(87) = {0.073950, -0.746334, 0, 1.0};
Point(88) = {0.074477, -0.747044, 0, 1.0};
Point(89) = {0.075000, -0.748516, 0, 1.0};
Point(90) = {0.074470, -0.749419, 0, 1.0};
Point(91) = {0.073941, -0.749660, 0, 1.0};
Point(92) = {0.073414, -0.749793, 0, 1.0};
Point(93) = {0.072887, -0.749874, 0, 1.0};
Point(94) = {0.071831, -0.749958, 0, 1.0};
Point(95) = {0.070775, -0.749992, 0, 1.0};
Point(96) = {0.069721, -0.750000, 0, 1.0};
Point(97) = {0.067610, -0.749982, 0, 1.0};
Point(98) = {0.065501, -0.749946, 0, 1.0};
Point(99) = {0.060226, -0.749846, 0, 1.0};
Point(100) = {0.054950, -0.749760, 0, 1.0};
Point(101) = {0.049676, -0.749692, 0, 1.0};
Point(102) = {0.044402, -0.749632, 0, 1.0};
Point(103) = {0.038072, -0.749561, 0, 1.0};
Point(104) = {0.031742, -0.749487, 0, 1.0};
Point(105) = {0.025412, -0.749410, 0, 1.0};
Point(106) = {0.020136, -0.749345, 0, 1.0};
Point(107) = {0.012752, -0.749255, 0, 1.0};
Point(108) = {0.005367, -0.749165, 0, 1.0};
Point(109) = {-0.003073, -0.749063, 0, 1.0};
Point(110) = {-0.011514, -0.748961, 0, 1.0};
Point(111) = {-0.019953, -0.748859, 0, 1.0};
Point(112) = {-0.028392, -0.748757, 0, 1.0};
Point(113) = {-0.036833, -0.748654, 0, 1.0};
Point(114) = {-0.045273, -0.748551, 0, 1.0};
Point(115) = {-0.054768, -0.748437, 0, 1.0};
Point(116) = {-0.063207, -0.748333, 0, 1.0};
Point(117) = {-0.071648, -0.748228, 0, 1.0};
Point(118) = {-0.075000, -0.748186, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:15};
Spline(2) = {15:44};
Spline(3) = {44:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:74};
Spline(6) = {74:103};
Spline(7) = {103:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html