SetFactory("OpenCASCADE");

Point(1) = {0.073475, 0.721178, 0, 1.0};
Point(2) = {0.069396, 0.721147, 0, 1.0};
Point(3) = {0.065278, 0.721147, 0, 1.0};
Point(4) = {0.061166, 0.721179, 0, 1.0};
Point(5) = {0.057057, 0.721227, 0, 1.0};
Point(6) = {0.052957, 0.721323, 0, 1.0};
Point(7) = {0.048864, 0.721467, 0, 1.0};
Point(8) = {0.044772, 0.721610, 0, 1.0};
Point(9) = {0.040688, 0.721802, 0, 1.0};
Point(10) = {0.036610, 0.722026, 0, 1.0};
Point(11) = {0.032540, 0.722298, 0, 1.0};
Point(12) = {0.028476, 0.722601, 0, 1.0};
Point(13) = {0.024423, 0.722969, 0, 1.0};
Point(14) = {0.020379, 0.723384, 0, 1.0};
Point(15) = {0.016343, 0.723847, 0, 1.0};
Point(16) = {0.012315, 0.724359, 0, 1.0};
Point(17) = {0.004274, 0.725461, 0, 1.0};
Point(18) = {-0.003739, 0.726723, 0, 1.0};
Point(19) = {-0.011729, 0.728113, 0, 1.0};
Point(20) = {-0.019697, 0.729631, 0, 1.0};
Point(21) = {-0.027640, 0.731292, 0, 1.0};
Point(22) = {-0.035560, 0.733082, 0, 1.0};
Point(23) = {-0.043452, 0.735031, 0, 1.0};
Point(24) = {-0.047384, 0.736085, 0, 1.0};
Point(25) = {-0.051305, 0.737204, 0, 1.0};
Point(26) = {-0.055214, 0.738386, 0, 1.0};
Point(27) = {-0.059107, 0.739664, 0, 1.0};
Point(28) = {-0.062977, 0.741070, 0, 1.0};
Point(29) = {-0.066813, 0.742667, 0, 1.0};
Point(30) = {-0.068706, 0.743610, 0, 1.0};
Point(31) = {-0.070571, 0.744712, 0, 1.0};
Point(32) = {-0.072371, 0.746182, 0, 1.0};
Point(33) = {-0.073400, 0.747351, 0, 1.0};
Point(34) = {-0.073762, 0.748107, 0, 1.0};
Point(35) = {-0.073865, 0.749393, 0, 1.0};
Point(36) = {-0.073455, 0.749848, 0, 1.0};
Point(37) = {-0.072951, 0.749907, 0, 1.0};
Point(38) = {-0.071699, 0.750000, 0, 1.0};
Point(39) = {-0.069654, 0.749920, 0, 1.0};
Point(40) = {-0.067621, 0.749776, 0, 1.0};
Point(41) = {-0.065596, 0.749585, 0, 1.0};
Point(42) = {-0.061551, 0.749169, 0, 1.0};
Point(43) = {-0.057518, 0.748690, 0, 1.0};
Point(44) = {-0.053491, 0.748179, 0, 1.0};
Point(45) = {-0.049469, 0.747635, 0, 1.0};
Point(46) = {-0.045455, 0.747044, 0, 1.0};
Point(47) = {-0.041444, 0.746437, 0, 1.0};
Point(48) = {-0.033434, 0.745159, 0, 1.0};
Point(49) = {-0.025444, 0.743769, 0, 1.0};
Point(50) = {-0.017462, 0.742331, 0, 1.0};
Point(51) = {-0.009491, 0.740829, 0, 1.0};
Point(52) = {-0.001531, 0.739264, 0, 1.0};
Point(53) = {0.006417, 0.737634, 0, 1.0};
Point(54) = {0.014343, 0.735877, 0, 1.0};
Point(55) = {0.018292, 0.734918, 0, 1.0};
Point(56) = {0.022240, 0.733960, 0, 1.0};
Point(57) = {0.026181, 0.732953, 0, 1.0};
Point(58) = {0.030121, 0.731947, 0, 1.0};
Point(59) = {0.034062, 0.730940, 0, 1.0};
Point(60) = {0.038005, 0.729950, 0, 1.0};
Point(61) = {0.041945, 0.728943, 0, 1.0};
Point(62) = {0.045894, 0.727985, 0, 1.0};
Point(63) = {0.049843, 0.727026, 0, 1.0};
Point(64) = {0.053800, 0.726115, 0, 1.0};
Point(65) = {0.057763, 0.725237, 0, 1.0};
Point(66) = {0.061743, 0.724454, 0, 1.0};
Point(67) = {0.065740, 0.723767, 0, 1.0};
Point(68) = {0.069747, 0.723144, 0, 1.0};
Point(69) = {0.073736, 0.722660, 0, 1.0};
Point(70) = {-0.073475, -0.721178, 0, 1.0};
Point(71) = {-0.069396, -0.721147, 0, 1.0};
Point(72) = {-0.065278, -0.721147, 0, 1.0};
Point(73) = {-0.061166, -0.721179, 0, 1.0};
Point(74) = {-0.057057, -0.721227, 0, 1.0};
Point(75) = {-0.052957, -0.721323, 0, 1.0};
Point(76) = {-0.048864, -0.721467, 0, 1.0};
Point(77) = {-0.044772, -0.721610, 0, 1.0};
Point(78) = {-0.040688, -0.721802, 0, 1.0};
Point(79) = {-0.036610, -0.722026, 0, 1.0};
Point(80) = {-0.032540, -0.722298, 0, 1.0};
Point(81) = {-0.028476, -0.722601, 0, 1.0};
Point(82) = {-0.024423, -0.722969, 0, 1.0};
Point(83) = {-0.020379, -0.723384, 0, 1.0};
Point(84) = {-0.016343, -0.723847, 0, 1.0};
Point(85) = {-0.012315, -0.724359, 0, 1.0};
Point(86) = {-0.004274, -0.725461, 0, 1.0};
Point(87) = {0.003739, -0.726723, 0, 1.0};
Point(88) = {0.011729, -0.728113, 0, 1.0};
Point(89) = {0.019697, -0.729631, 0, 1.0};
Point(90) = {0.027640, -0.731292, 0, 1.0};
Point(91) = {0.035560, -0.733082, 0, 1.0};
Point(92) = {0.043452, -0.735031, 0, 1.0};
Point(93) = {0.047384, -0.736085, 0, 1.0};
Point(94) = {0.051305, -0.737204, 0, 1.0};
Point(95) = {0.055214, -0.738386, 0, 1.0};
Point(96) = {0.059107, -0.739664, 0, 1.0};
Point(97) = {0.062977, -0.741070, 0, 1.0};
Point(98) = {0.066813, -0.742667, 0, 1.0};
Point(99) = {0.068706, -0.743610, 0, 1.0};
Point(100) = {0.070571, -0.744712, 0, 1.0};
Point(101) = {0.072371, -0.746182, 0, 1.0};
Point(102) = {0.073400, -0.747351, 0, 1.0};
Point(103) = {0.073762, -0.748107, 0, 1.0};
Point(104) = {0.073865, -0.749393, 0, 1.0};
Point(105) = {0.073455, -0.749848, 0, 1.0};
Point(106) = {0.072951, -0.749907, 0, 1.0};
Point(107) = {0.071699, -0.750000, 0, 1.0};
Point(108) = {0.069654, -0.749920, 0, 1.0};
Point(109) = {0.067621, -0.749776, 0, 1.0};
Point(110) = {0.065596, -0.749585, 0, 1.0};
Point(111) = {0.061551, -0.749169, 0, 1.0};
Point(112) = {0.057518, -0.748690, 0, 1.0};
Point(113) = {0.053491, -0.748179, 0, 1.0};
Point(114) = {0.049469, -0.747635, 0, 1.0};
Point(115) = {0.045455, -0.747044, 0, 1.0};
Point(116) = {0.041444, -0.746437, 0, 1.0};
Point(117) = {0.033434, -0.745159, 0, 1.0};
Point(118) = {0.025444, -0.743769, 0, 1.0};
Point(119) = {0.017462, -0.742331, 0, 1.0};
Point(120) = {0.009491, -0.740829, 0, 1.0};
Point(121) = {0.001531, -0.739264, 0, 1.0};
Point(122) = {-0.006417, -0.737634, 0, 1.0};
Point(123) = {-0.014343, -0.735877, 0, 1.0};
Point(124) = {-0.018292, -0.734918, 0, 1.0};
Point(125) = {-0.022240, -0.733960, 0, 1.0};
Point(126) = {-0.026181, -0.732953, 0, 1.0};
Point(127) = {-0.030121, -0.731947, 0, 1.0};
Point(128) = {-0.034062, -0.730940, 0, 1.0};
Point(129) = {-0.038005, -0.729950, 0, 1.0};
Point(130) = {-0.041945, -0.728943, 0, 1.0};
Point(131) = {-0.045894, -0.727985, 0, 1.0};
Point(132) = {-0.049843, -0.727026, 0, 1.0};
Point(133) = {-0.053800, -0.726115, 0, 1.0};
Point(134) = {-0.057763, -0.725237, 0, 1.0};
Point(135) = {-0.061743, -0.724454, 0, 1.0};
Point(136) = {-0.065740, -0.723767, 0, 1.0};
Point(137) = {-0.069747, -0.723144, 0, 1.0};
Point(138) = {-0.073736, -0.722660, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:48};
Spline(3) = {48:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:91};
Spline(6) = {91:117};
Spline(7) = {117:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html