SetFactory("OpenCASCADE");

Point(1) = {0.074853, 0.748479, 0, 1.0};
Point(2) = {0.072414, 0.747671, 0, 1.0};
Point(3) = {0.069269, 0.746635, 0, 1.0};
Point(4) = {0.065486, 0.745400, 0, 1.0};
Point(5) = {0.061100, 0.744010, 0, 1.0};
Point(6) = {0.056140, 0.742627, 0, 1.0};
Point(7) = {0.050654, 0.741277, 0, 1.0};
Point(8) = {0.044701, 0.739889, 0, 1.0};
Point(9) = {0.038335, 0.738515, 0, 1.0};
Point(10) = {0.031617, 0.737190, 0, 1.0};
Point(11) = {0.024609, 0.735939, 0, 1.0};
Point(12) = {0.017379, 0.734784, 0, 1.0};
Point(13) = {0.009995, 0.733746, 0, 1.0};
Point(14) = {0.002528, 0.732840, 0, 1.0};
Point(15) = {-0.004950, 0.732079, 0, 1.0};
Point(16) = {-0.012368, 0.731468, 0, 1.0};
Point(17) = {-0.019653, 0.731008, 0, 1.0};
Point(18) = {-0.026733, 0.730675, 0, 1.0};
Point(19) = {-0.033538, 0.730454, 0, 1.0};
Point(20) = {-0.040003, 0.730335, 0, 1.0};
Point(21) = {-0.046063, 0.730312, 0, 1.0};
Point(22) = {-0.051661, 0.730387, 0, 1.0};
Point(23) = {-0.056751, 0.730660, 0, 1.0};
Point(24) = {-0.061286, 0.731159, 0, 1.0};
Point(25) = {-0.065215, 0.731782, 0, 1.0};
Point(26) = {-0.068503, 0.732555, 0, 1.0};
Point(27) = {-0.071129, 0.733606, 0, 1.0};
Point(28) = {-0.073053, 0.734757, 0, 1.0};
Point(29) = {-0.074259, 0.736006, 0, 1.0};
Point(30) = {-0.074769, 0.737784, 0, 1.0};
Point(31) = {-0.074523, 0.739362, 0, 1.0};
Point(32) = {-0.073514, 0.740617, 0, 1.0};
Point(33) = {-0.071750, 0.741499, 0, 1.0};
Point(34) = {-0.069250, 0.742040, 0, 1.0};
Point(35) = {-0.066055, 0.742447, 0, 1.0};
Point(36) = {-0.062199, 0.742761, 0, 1.0};
Point(37) = {-0.057729, 0.743093, 0, 1.0};
Point(38) = {-0.052692, 0.743488, 0, 1.0};
Point(39) = {-0.047140, 0.744002, 0, 1.0};
Point(40) = {-0.041119, 0.744520, 0, 1.0};
Point(41) = {-0.034689, 0.745074, 0, 1.0};
Point(42) = {-0.027910, 0.745636, 0, 1.0};
Point(43) = {-0.020848, 0.746201, 0, 1.0};
Point(44) = {-0.013570, 0.746750, 0, 1.0};
Point(45) = {-0.006144, 0.747247, 0, 1.0};
Point(46) = {0.001360, 0.747682, 0, 1.0};
Point(47) = {0.008869, 0.748056, 0, 1.0};
Point(48) = {0.016310, 0.748363, 0, 1.0};
Point(49) = {0.023612, 0.748616, 0, 1.0};
Point(50) = {0.030699, 0.748854, 0, 1.0};
Point(51) = {0.037505, 0.749072, 0, 1.0};
Point(52) = {0.043963, 0.749268, 0, 1.0};
Point(53) = {0.050012, 0.749435, 0, 1.0};
Point(54) = {0.055593, 0.749575, 0, 1.0};
Point(55) = {0.060652, 0.749691, 0, 1.0};
Point(56) = {0.065140, 0.749792, 0, 1.0};
Point(57) = {0.069014, 0.749877, 0, 1.0};
Point(58) = {0.072235, 0.749945, 0, 1.0};
Point(59) = {0.074734, 0.750000, 0, 1.0};
Point(60) = {-0.074853, -0.748479, 0, 1.0};
Point(61) = {-0.072414, -0.747671, 0, 1.0};
Point(62) = {-0.069269, -0.746635, 0, 1.0};
Point(63) = {-0.065486, -0.745400, 0, 1.0};
Point(64) = {-0.061100, -0.744010, 0, 1.0};
Point(65) = {-0.056140, -0.742627, 0, 1.0};
Point(66) = {-0.050654, -0.741277, 0, 1.0};
Point(67) = {-0.044701, -0.739889, 0, 1.0};
Point(68) = {-0.038335, -0.738515, 0, 1.0};
Point(69) = {-0.031617, -0.737190, 0, 1.0};
Point(70) = {-0.024609, -0.735939, 0, 1.0};
Point(71) = {-0.017379, -0.734784, 0, 1.0};
Point(72) = {-0.009995, -0.733746, 0, 1.0};
Point(73) = {-0.002528, -0.732840, 0, 1.0};
Point(74) = {0.004950, -0.732079, 0, 1.0};
Point(75) = {0.012368, -0.731468, 0, 1.0};
Point(76) = {0.019653, -0.731008, 0, 1.0};
Point(77) = {0.026733, -0.730675, 0, 1.0};
Point(78) = {0.033538, -0.730454, 0, 1.0};
Point(79) = {0.040003, -0.730335, 0, 1.0};
Point(80) = {0.046063, -0.730312, 0, 1.0};
Point(81) = {0.051661, -0.730387, 0, 1.0};
Point(82) = {0.056751, -0.730660, 0, 1.0};
Point(83) = {0.061286, -0.731159, 0, 1.0};
Point(84) = {0.065215, -0.731782, 0, 1.0};
Point(85) = {0.068503, -0.732555, 0, 1.0};
Point(86) = {0.071129, -0.733606, 0, 1.0};
Point(87) = {0.073053, -0.734757, 0, 1.0};
Point(88) = {0.074259, -0.736006, 0, 1.0};
Point(89) = {0.074769, -0.737784, 0, 1.0};
Point(90) = {0.074523, -0.739362, 0, 1.0};
Point(91) = {0.073514, -0.740617, 0, 1.0};
Point(92) = {0.071750, -0.741499, 0, 1.0};
Point(93) = {0.069250, -0.742040, 0, 1.0};
Point(94) = {0.066055, -0.742447, 0, 1.0};
Point(95) = {0.062199, -0.742761, 0, 1.0};
Point(96) = {0.057729, -0.743093, 0, 1.0};
Point(97) = {0.052692, -0.743488, 0, 1.0};
Point(98) = {0.047140, -0.744002, 0, 1.0};
Point(99) = {0.041119, -0.744520, 0, 1.0};
Point(100) = {0.034689, -0.745074, 0, 1.0};
Point(101) = {0.027910, -0.745636, 0, 1.0};
Point(102) = {0.020848, -0.746201, 0, 1.0};
Point(103) = {0.013570, -0.746750, 0, 1.0};
Point(104) = {0.006144, -0.747247, 0, 1.0};
Point(105) = {-0.001360, -0.747682, 0, 1.0};
Point(106) = {-0.008869, -0.748056, 0, 1.0};
Point(107) = {-0.016310, -0.748363, 0, 1.0};
Point(108) = {-0.023612, -0.748616, 0, 1.0};
Point(109) = {-0.030699, -0.748854, 0, 1.0};
Point(110) = {-0.037505, -0.749072, 0, 1.0};
Point(111) = {-0.043963, -0.749268, 0, 1.0};
Point(112) = {-0.050012, -0.749435, 0, 1.0};
Point(113) = {-0.055593, -0.749575, 0, 1.0};
Point(114) = {-0.060652, -0.749691, 0, 1.0};
Point(115) = {-0.065140, -0.749792, 0, 1.0};
Point(116) = {-0.069014, -0.749877, 0, 1.0};
Point(117) = {-0.072235, -0.749945, 0, 1.0};
Point(118) = {-0.074734, -0.750000, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:19};
Spline(2) = {19:41};
Spline(3) = {41:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:78};
Spline(6) = {78:100};
Spline(7) = {100:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html