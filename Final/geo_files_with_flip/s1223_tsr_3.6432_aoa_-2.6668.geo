SetFactory("OpenCASCADE");

Point(1) = {0.075223, 0.747323, 0, 1.0};
Point(2) = {0.072450, 0.746279, 0, 1.0};
Point(3) = {0.068874, 0.745042, 0, 1.0};
Point(4) = {0.064935, 0.743782, 0, 1.0};
Point(5) = {0.060654, 0.742510, 0, 1.0};
Point(6) = {0.056056, 0.741234, 0, 1.0};
Point(7) = {0.051169, 0.739963, 0, 1.0};
Point(8) = {0.046020, 0.738704, 0, 1.0};
Point(9) = {0.040643, 0.737468, 0, 1.0};
Point(10) = {0.035070, 0.736262, 0, 1.0};
Point(11) = {0.029334, 0.735096, 0, 1.0};
Point(12) = {0.023469, 0.733973, 0, 1.0};
Point(13) = {0.017515, 0.732899, 0, 1.0};
Point(14) = {0.011514, 0.731878, 0, 1.0};
Point(15) = {0.005513, 0.730913, 0, 1.0};
Point(16) = {-0.000436, 0.730018, 0, 1.0};
Point(17) = {-0.006281, 0.729212, 0, 1.0};
Point(18) = {-0.011984, 0.728524, 0, 1.0};
Point(19) = {-0.017512, 0.727980, 0, 1.0};
Point(20) = {-0.022841, 0.727604, 0, 1.0};
Point(21) = {-0.027938, 0.727400, 0, 1.0};
Point(22) = {-0.032779, 0.727433, 0, 1.0};
Point(23) = {-0.037391, 0.727721, 0, 1.0};
Point(24) = {-0.041796, 0.728236, 0, 1.0};
Point(25) = {-0.045992, 0.728964, 0, 1.0};
Point(26) = {-0.049973, 0.729869, 0, 1.0};
Point(27) = {-0.053716, 0.730926, 0, 1.0};
Point(28) = {-0.057199, 0.732109, 0, 1.0};
Point(29) = {-0.060409, 0.733408, 0, 1.0};
Point(30) = {-0.063328, 0.734799, 0, 1.0};
Point(31) = {-0.065942, 0.736262, 0, 1.0};
Point(32) = {-0.068236, 0.737776, 0, 1.0};
Point(33) = {-0.070195, 0.739313, 0, 1.0};
Point(34) = {-0.071794, 0.740873, 0, 1.0};
Point(35) = {-0.073050, 0.742451, 0, 1.0};
Point(36) = {-0.073989, 0.744009, 0, 1.0};
Point(37) = {-0.074611, 0.745501, 0, 1.0};
Point(38) = {-0.074919, 0.746877, 0, 1.0};
Point(39) = {-0.074911, 0.748079, 0, 1.0};
Point(40) = {-0.074597, 0.749002, 0, 1.0};
Point(41) = {-0.073768, 0.749540, 0, 1.0};
Point(42) = {-0.072271, 0.749809, 0, 1.0};
Point(43) = {-0.070184, 0.749962, 0, 1.0};
Point(44) = {-0.067551, 0.750000, 0, 1.0};
Point(45) = {-0.064404, 0.749938, 0, 1.0};
Point(46) = {-0.060778, 0.749779, 0, 1.0};
Point(47) = {-0.056710, 0.749518, 0, 1.0};
Point(48) = {-0.052241, 0.749138, 0, 1.0};
Point(49) = {-0.047360, 0.748572, 0, 1.0};
Point(50) = {-0.042007, 0.747830, 0, 1.0};
Point(51) = {-0.036178, 0.746999, 0, 1.0};
Point(52) = {-0.029906, 0.746129, 0, 1.0};
Point(53) = {-0.023238, 0.745262, 0, 1.0};
Point(54) = {-0.016219, 0.744442, 0, 1.0};
Point(55) = {-0.008910, 0.743704, 0, 1.0};
Point(56) = {-0.001371, 0.743085, 0, 1.0};
Point(57) = {0.006326, 0.742613, 0, 1.0};
Point(58) = {0.014108, 0.742317, 0, 1.0};
Point(59) = {0.021898, 0.742215, 0, 1.0};
Point(60) = {0.029612, 0.742320, 0, 1.0};
Point(61) = {0.037166, 0.742643, 0, 1.0};
Point(62) = {0.044475, 0.743182, 0, 1.0};
Point(63) = {0.051457, 0.743930, 0, 1.0};
Point(64) = {0.058028, 0.744875, 0, 1.0};
Point(65) = {0.064106, 0.745992, 0, 1.0};
Point(66) = {0.069620, 0.747253, 0, 1.0};
Point(67) = {0.074495, 0.748620, 0, 1.0};
Point(68) = {0.075154, 0.748809, 0, 1.0};
Point(69) = {-0.075223, -0.747323, 0, 1.0};
Point(70) = {-0.072450, -0.746279, 0, 1.0};
Point(71) = {-0.068874, -0.745042, 0, 1.0};
Point(72) = {-0.064935, -0.743782, 0, 1.0};
Point(73) = {-0.060654, -0.742510, 0, 1.0};
Point(74) = {-0.056056, -0.741234, 0, 1.0};
Point(75) = {-0.051169, -0.739963, 0, 1.0};
Point(76) = {-0.046020, -0.738704, 0, 1.0};
Point(77) = {-0.040643, -0.737468, 0, 1.0};
Point(78) = {-0.035070, -0.736262, 0, 1.0};
Point(79) = {-0.029334, -0.735096, 0, 1.0};
Point(80) = {-0.023469, -0.733973, 0, 1.0};
Point(81) = {-0.017515, -0.732899, 0, 1.0};
Point(82) = {-0.011514, -0.731878, 0, 1.0};
Point(83) = {-0.005513, -0.730913, 0, 1.0};
Point(84) = {0.000436, -0.730018, 0, 1.0};
Point(85) = {0.006281, -0.729212, 0, 1.0};
Point(86) = {0.011984, -0.728524, 0, 1.0};
Point(87) = {0.017512, -0.727980, 0, 1.0};
Point(88) = {0.022841, -0.727604, 0, 1.0};
Point(89) = {0.027938, -0.727400, 0, 1.0};
Point(90) = {0.032779, -0.727433, 0, 1.0};
Point(91) = {0.037391, -0.727721, 0, 1.0};
Point(92) = {0.041796, -0.728236, 0, 1.0};
Point(93) = {0.045992, -0.728964, 0, 1.0};
Point(94) = {0.049973, -0.729869, 0, 1.0};
Point(95) = {0.053716, -0.730926, 0, 1.0};
Point(96) = {0.057199, -0.732109, 0, 1.0};
Point(97) = {0.060409, -0.733408, 0, 1.0};
Point(98) = {0.063328, -0.734799, 0, 1.0};
Point(99) = {0.065942, -0.736262, 0, 1.0};
Point(100) = {0.068236, -0.737776, 0, 1.0};
Point(101) = {0.070195, -0.739313, 0, 1.0};
Point(102) = {0.071794, -0.740873, 0, 1.0};
Point(103) = {0.073050, -0.742451, 0, 1.0};
Point(104) = {0.073989, -0.744009, 0, 1.0};
Point(105) = {0.074611, -0.745501, 0, 1.0};
Point(106) = {0.074919, -0.746877, 0, 1.0};
Point(107) = {0.074911, -0.748079, 0, 1.0};
Point(108) = {0.074597, -0.749002, 0, 1.0};
Point(109) = {0.073768, -0.749540, 0, 1.0};
Point(110) = {0.072271, -0.749809, 0, 1.0};
Point(111) = {0.070184, -0.749962, 0, 1.0};
Point(112) = {0.067551, -0.750000, 0, 1.0};
Point(113) = {0.064404, -0.749938, 0, 1.0};
Point(114) = {0.060778, -0.749779, 0, 1.0};
Point(115) = {0.056710, -0.749518, 0, 1.0};
Point(116) = {0.052241, -0.749138, 0, 1.0};
Point(117) = {0.047360, -0.748572, 0, 1.0};
Point(118) = {0.042007, -0.747830, 0, 1.0};
Point(119) = {0.036178, -0.746999, 0, 1.0};
Point(120) = {0.029906, -0.746129, 0, 1.0};
Point(121) = {0.023238, -0.745262, 0, 1.0};
Point(122) = {0.016219, -0.744442, 0, 1.0};
Point(123) = {0.008910, -0.743704, 0, 1.0};
Point(124) = {0.001371, -0.743085, 0, 1.0};
Point(125) = {-0.006326, -0.742613, 0, 1.0};
Point(126) = {-0.014108, -0.742317, 0, 1.0};
Point(127) = {-0.021898, -0.742215, 0, 1.0};
Point(128) = {-0.029612, -0.742320, 0, 1.0};
Point(129) = {-0.037166, -0.742643, 0, 1.0};
Point(130) = {-0.044475, -0.743182, 0, 1.0};
Point(131) = {-0.051457, -0.743930, 0, 1.0};
Point(132) = {-0.058028, -0.744875, 0, 1.0};
Point(133) = {-0.064106, -0.745992, 0, 1.0};
Point(134) = {-0.069620, -0.747253, 0, 1.0};
Point(135) = {-0.074495, -0.748620, 0, 1.0};
Point(136) = {-0.075154, -0.748809, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:51};
Spline(3) = {51:68};
Spline(4) = {68,1};

// Lines: second blade (splines 5-8)
Spline(5) = {69:90};
Spline(6) = {90:119};
Spline(7) = {119:136};
Spline(8) = {136,69};

// Outer domain (points 20001-4 and lines)
Point(137) = {-13.50000000, -15.00000000, 0, 1.0};
Point(138) = {-13.50000000, 15.00000000, 0, 1.0};
Point(139) = {13.50000000, 15.00000000, 0, 1.0};
Point(140) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {137, 138};
Line(12) = {138, 139};
Line(13) = {139, 140};
Line(14) = {137, 140};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html