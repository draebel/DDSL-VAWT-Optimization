SetFactory("OpenCASCADE");

Point(1) = {0.074871, 0.739209, 0, 1.0};
Point(2) = {0.071623, 0.739071, 0, 1.0};
Point(3) = {0.067642, 0.738887, 0, 1.0};
Point(4) = {0.063660, 0.738680, 0, 1.0};
Point(5) = {0.059677, 0.738452, 0, 1.0};
Point(6) = {0.055693, 0.738204, 0, 1.0};
Point(7) = {0.051708, 0.737939, 0, 1.0};
Point(8) = {0.047723, 0.737660, 0, 1.0};
Point(9) = {0.043737, 0.737373, 0, 1.0};
Point(10) = {0.039750, 0.737075, 0, 1.0};
Point(11) = {0.035763, 0.736769, 0, 1.0};
Point(12) = {0.031776, 0.736456, 0, 1.0};
Point(13) = {0.027788, 0.736138, 0, 1.0};
Point(14) = {0.019813, 0.735499, 0, 1.0};
Point(15) = {0.011839, 0.734879, 0, 1.0};
Point(16) = {0.003867, 0.734304, 0, 1.0};
Point(17) = {-0.004101, 0.733812, 0, 1.0};
Point(18) = {-0.012062, 0.733446, 0, 1.0};
Point(19) = {-0.020015, 0.733259, 0, 1.0};
Point(20) = {-0.027955, 0.733317, 0, 1.0};
Point(21) = {-0.031919, 0.733460, 0, 1.0};
Point(22) = {-0.035879, 0.733696, 0, 1.0};
Point(23) = {-0.039834, 0.734035, 0, 1.0};
Point(24) = {-0.043782, 0.734494, 0, 1.0};
Point(25) = {-0.047724, 0.735087, 0, 1.0};
Point(26) = {-0.051658, 0.735838, 0, 1.0};
Point(27) = {-0.055583, 0.736769, 0, 1.0};
Point(28) = {-0.059497, 0.737912, 0, 1.0};
Point(29) = {-0.063398, 0.739316, 0, 1.0};
Point(30) = {-0.067282, 0.741065, 0, 1.0};
Point(31) = {-0.069601, 0.742343, 0, 1.0};
Point(32) = {-0.071139, 0.743338, 0, 1.0};
Point(33) = {-0.071906, 0.743897, 0, 1.0};
Point(34) = {-0.072669, 0.744509, 0, 1.0};
Point(35) = {-0.073050, 0.744838, 0, 1.0};
Point(36) = {-0.073430, 0.745184, 0, 1.0};
Point(37) = {-0.073808, 0.745561, 0, 1.0};
Point(38) = {-0.074184, 0.745985, 0, 1.0};
Point(39) = {-0.074341, 0.746017, 0, 1.0};
Point(40) = {-0.074482, 0.746381, 0, 1.0};
Point(41) = {-0.074555, 0.746491, 0, 1.0};
Point(42) = {-0.074629, 0.746608, 0, 1.0};
Point(43) = {-0.074702, 0.746734, 0, 1.0};
Point(44) = {-0.074774, 0.746877, 0, 1.0};
Point(45) = {-0.074845, 0.747055, 0, 1.0};
Point(46) = {-0.074906, 0.747425, 0, 1.0};
Point(47) = {-0.074809, 0.747768, 0, 1.0};
Point(48) = {-0.074722, 0.747925, 0, 1.0};
Point(49) = {-0.074637, 0.748043, 0, 1.0};
Point(50) = {-0.074552, 0.748142, 0, 1.0};
Point(51) = {-0.074468, 0.748228, 0, 1.0};
Point(52) = {-0.074385, 0.748305, 0, 1.0};
Point(53) = {-0.074220, 0.748433, 0, 1.0};
Point(54) = {-0.074056, 0.748539, 0, 1.0};
Point(55) = {-0.073648, 0.748740, 0, 1.0};
Point(56) = {-0.073244, 0.748885, 0, 1.0};
Point(57) = {-0.072841, 0.749009, 0, 1.0};
Point(58) = {-0.072438, 0.749124, 0, 1.0};
Point(59) = {-0.071633, 0.749322, 0, 1.0};
Point(60) = {-0.070831, 0.749482, 0, 1.0};
Point(61) = {-0.069231, 0.749702, 0, 1.0};
Point(62) = {-0.066839, 0.749882, 0, 1.0};
Point(63) = {-0.062862, 0.750000, 0, 1.0};
Point(64) = {-0.058891, 0.749991, 0, 1.0};
Point(65) = {-0.054923, 0.749926, 0, 1.0};
Point(66) = {-0.050956, 0.749835, 0, 1.0};
Point(67) = {-0.046989, 0.749729, 0, 1.0};
Point(68) = {-0.043023, 0.749616, 0, 1.0};
Point(69) = {-0.039058, 0.749498, 0, 1.0};
Point(70) = {-0.035092, 0.749380, 0, 1.0};
Point(71) = {-0.031126, 0.749267, 0, 1.0};
Point(72) = {-0.027160, 0.749154, 0, 1.0};
Point(73) = {-0.019229, 0.748924, 0, 1.0};
Point(74) = {-0.011298, 0.748670, 0, 1.0};
Point(75) = {-0.003370, 0.748372, 0, 1.0};
Point(76) = {0.004555, 0.748011, 0, 1.0};
Point(77) = {0.012476, 0.747567, 0, 1.0};
Point(78) = {0.020392, 0.747027, 0, 1.0};
Point(79) = {0.028302, 0.746382, 0, 1.0};
Point(80) = {0.032256, 0.746020, 0, 1.0};
Point(81) = {0.036208, 0.745632, 0, 1.0};
Point(82) = {0.039366, 0.745257, 0, 1.0};
Point(83) = {0.044108, 0.744775, 0, 1.0};
Point(84) = {0.048056, 0.744306, 0, 1.0};
Point(85) = {0.052003, 0.743813, 0, 1.0};
Point(86) = {0.055949, 0.743299, 0, 1.0};
Point(87) = {0.059894, 0.742774, 0, 1.0};
Point(88) = {0.063839, 0.742242, 0, 1.0};
Point(89) = {0.067783, 0.741706, 0, 1.0};
Point(90) = {0.071728, 0.741165, 0, 1.0};
Point(91) = {0.074947, 0.740721, 0, 1.0};
Point(92) = {-0.074871, -0.739209, 0, 1.0};
Point(93) = {-0.071623, -0.739071, 0, 1.0};
Point(94) = {-0.067642, -0.738887, 0, 1.0};
Point(95) = {-0.063660, -0.738680, 0, 1.0};
Point(96) = {-0.059677, -0.738452, 0, 1.0};
Point(97) = {-0.055693, -0.738204, 0, 1.0};
Point(98) = {-0.051708, -0.737939, 0, 1.0};
Point(99) = {-0.047723, -0.737660, 0, 1.0};
Point(100) = {-0.043737, -0.737373, 0, 1.0};
Point(101) = {-0.039750, -0.737075, 0, 1.0};
Point(102) = {-0.035763, -0.736769, 0, 1.0};
Point(103) = {-0.031776, -0.736456, 0, 1.0};
Point(104) = {-0.027788, -0.736138, 0, 1.0};
Point(105) = {-0.019813, -0.735499, 0, 1.0};
Point(106) = {-0.011839, -0.734879, 0, 1.0};
Point(107) = {-0.003867, -0.734304, 0, 1.0};
Point(108) = {0.004101, -0.733812, 0, 1.0};
Point(109) = {0.012062, -0.733446, 0, 1.0};
Point(110) = {0.020015, -0.733259, 0, 1.0};
Point(111) = {0.027955, -0.733317, 0, 1.0};
Point(112) = {0.031919, -0.733460, 0, 1.0};
Point(113) = {0.035879, -0.733696, 0, 1.0};
Point(114) = {0.039834, -0.734035, 0, 1.0};
Point(115) = {0.043782, -0.734494, 0, 1.0};
Point(116) = {0.047724, -0.735087, 0, 1.0};
Point(117) = {0.051658, -0.735838, 0, 1.0};
Point(118) = {0.055583, -0.736769, 0, 1.0};
Point(119) = {0.059497, -0.737912, 0, 1.0};
Point(120) = {0.063398, -0.739316, 0, 1.0};
Point(121) = {0.067282, -0.741065, 0, 1.0};
Point(122) = {0.069601, -0.742343, 0, 1.0};
Point(123) = {0.071139, -0.743338, 0, 1.0};
Point(124) = {0.071906, -0.743897, 0, 1.0};
Point(125) = {0.072669, -0.744509, 0, 1.0};
Point(126) = {0.073050, -0.744838, 0, 1.0};
Point(127) = {0.073430, -0.745184, 0, 1.0};
Point(128) = {0.073808, -0.745561, 0, 1.0};
Point(129) = {0.074184, -0.745985, 0, 1.0};
Point(130) = {0.074341, -0.746017, 0, 1.0};
Point(131) = {0.074482, -0.746381, 0, 1.0};
Point(132) = {0.074555, -0.746491, 0, 1.0};
Point(133) = {0.074629, -0.746608, 0, 1.0};
Point(134) = {0.074702, -0.746734, 0, 1.0};
Point(135) = {0.074774, -0.746877, 0, 1.0};
Point(136) = {0.074845, -0.747055, 0, 1.0};
Point(137) = {0.074906, -0.747425, 0, 1.0};
Point(138) = {0.074809, -0.747768, 0, 1.0};
Point(139) = {0.074722, -0.747925, 0, 1.0};
Point(140) = {0.074637, -0.748043, 0, 1.0};
Point(141) = {0.074552, -0.748142, 0, 1.0};
Point(142) = {0.074468, -0.748228, 0, 1.0};
Point(143) = {0.074385, -0.748305, 0, 1.0};
Point(144) = {0.074220, -0.748433, 0, 1.0};
Point(145) = {0.074056, -0.748539, 0, 1.0};
Point(146) = {0.073648, -0.748740, 0, 1.0};
Point(147) = {0.073244, -0.748885, 0, 1.0};
Point(148) = {0.072841, -0.749009, 0, 1.0};
Point(149) = {0.072438, -0.749124, 0, 1.0};
Point(150) = {0.071633, -0.749322, 0, 1.0};
Point(151) = {0.070831, -0.749482, 0, 1.0};
Point(152) = {0.069231, -0.749702, 0, 1.0};
Point(153) = {0.066839, -0.749882, 0, 1.0};
Point(154) = {0.062862, -0.750000, 0, 1.0};
Point(155) = {0.058891, -0.749991, 0, 1.0};
Point(156) = {0.054923, -0.749926, 0, 1.0};
Point(157) = {0.050956, -0.749835, 0, 1.0};
Point(158) = {0.046989, -0.749729, 0, 1.0};
Point(159) = {0.043023, -0.749616, 0, 1.0};
Point(160) = {0.039058, -0.749498, 0, 1.0};
Point(161) = {0.035092, -0.749380, 0, 1.0};
Point(162) = {0.031126, -0.749267, 0, 1.0};
Point(163) = {0.027160, -0.749154, 0, 1.0};
Point(164) = {0.019229, -0.748924, 0, 1.0};
Point(165) = {0.011298, -0.748670, 0, 1.0};
Point(166) = {0.003370, -0.748372, 0, 1.0};
Point(167) = {-0.004555, -0.748011, 0, 1.0};
Point(168) = {-0.012476, -0.747567, 0, 1.0};
Point(169) = {-0.020392, -0.747027, 0, 1.0};
Point(170) = {-0.028302, -0.746382, 0, 1.0};
Point(171) = {-0.032256, -0.746020, 0, 1.0};
Point(172) = {-0.036208, -0.745632, 0, 1.0};
Point(173) = {-0.039366, -0.745257, 0, 1.0};
Point(174) = {-0.044108, -0.744775, 0, 1.0};
Point(175) = {-0.048056, -0.744306, 0, 1.0};
Point(176) = {-0.052003, -0.743813, 0, 1.0};
Point(177) = {-0.055949, -0.743299, 0, 1.0};
Point(178) = {-0.059894, -0.742774, 0, 1.0};
Point(179) = {-0.063839, -0.742242, 0, 1.0};
Point(180) = {-0.067783, -0.741706, 0, 1.0};
Point(181) = {-0.071728, -0.741165, 0, 1.0};
Point(182) = {-0.074947, -0.740721, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:71};
Spline(3) = {71:91};
Spline(4) = {91,1};

// Lines: second blade (splines 5-8)
Spline(5) = {92:113};
Spline(6) = {113:162};
Spline(7) = {162:182};
Spline(8) = {182,92};

// Outer domain (points 20001-4 and lines)
Point(183) = {-13.50000000, -15.00000000, 0, 1.0};
Point(184) = {-13.50000000, 15.00000000, 0, 1.0};
Point(185) = {13.50000000, 15.00000000, 0, 1.0};
Point(186) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {183, 184};
Line(12) = {184, 185};
Line(13) = {185, 186};
Line(14) = {183, 186};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html