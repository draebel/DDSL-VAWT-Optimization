SetFactory("OpenCASCADE");

Point(1) = {0.074573, 0.748522, 0, 1.0};
Point(2) = {0.071583, 0.747526, 0, 1.0};
Point(3) = {0.064096, 0.745053, 0, 1.0};
Point(4) = {0.056611, 0.742553, 0, 1.0};
Point(5) = {0.049128, 0.740040, 0, 1.0};
Point(6) = {0.041643, 0.737545, 0, 1.0};
Point(7) = {0.034152, 0.735099, 0, 1.0};
Point(8) = {0.026650, 0.732740, 0, 1.0};
Point(9) = {0.019133, 0.730509, 0, 1.0};
Point(10) = {0.011595, 0.728447, 0, 1.0};
Point(11) = {0.004030, 0.726602, 0, 1.0};
Point(12) = {-0.003565, 0.725009, 0, 1.0};
Point(13) = {-0.007375, 0.724317, 0, 1.0};
Point(14) = {-0.011194, 0.723697, 0, 1.0};
Point(15) = {-0.015023, 0.723150, 0, 1.0};
Point(16) = {-0.018859, 0.722673, 0, 1.0};
Point(17) = {-0.022704, 0.722260, 0, 1.0};
Point(18) = {-0.026556, 0.721915, 0, 1.0};
Point(19) = {-0.030418, 0.721643, 0, 1.0};
Point(20) = {-0.034290, 0.721462, 0, 1.0};
Point(21) = {-0.038177, 0.721397, 0, 1.0};
Point(22) = {-0.042080, 0.721466, 0, 1.0};
Point(23) = {-0.046002, 0.721690, 0, 1.0};
Point(24) = {-0.049946, 0.722091, 0, 1.0};
Point(25) = {-0.053914, 0.722694, 0, 1.0};
Point(26) = {-0.057911, 0.723531, 0, 1.0};
Point(27) = {-0.059922, 0.724047, 0, 1.0};
Point(28) = {-0.061940, 0.724632, 0, 1.0};
Point(29) = {-0.063967, 0.725285, 0, 1.0};
Point(30) = {-0.066003, 0.726009, 0, 1.0};
Point(31) = {-0.068049, 0.726817, 0, 1.0};
Point(32) = {-0.070109, 0.727745, 0, 1.0};
Point(33) = {-0.072621, 0.729176, 0, 1.0};
Point(34) = {-0.074448, 0.731386, 0, 1.0};
Point(35) = {-0.073135, 0.733388, 0, 1.0};
Point(36) = {-0.070942, 0.734568, 0, 1.0};
Point(37) = {-0.069088, 0.735340, 0, 1.0};
Point(38) = {-0.067226, 0.736037, 0, 1.0};
Point(39) = {-0.065359, 0.736698, 0, 1.0};
Point(40) = {-0.063490, 0.737334, 0, 1.0};
Point(41) = {-0.061617, 0.737944, 0, 1.0};
Point(42) = {-0.059740, 0.738525, 0, 1.0};
Point(43) = {-0.055975, 0.739591, 0, 1.0};
Point(44) = {-0.052196, 0.740541, 0, 1.0};
Point(45) = {-0.048406, 0.741392, 0, 1.0};
Point(46) = {-0.044605, 0.742163, 0, 1.0};
Point(47) = {-0.040796, 0.742867, 0, 1.0};
Point(48) = {-0.036980, 0.743514, 0, 1.0};
Point(49) = {-0.033158, 0.744108, 0, 1.0};
Point(50) = {-0.029330, 0.744655, 0, 1.0};
Point(51) = {-0.025497, 0.745163, 0, 1.0};
Point(52) = {-0.021660, 0.745635, 0, 1.0};
Point(53) = {-0.017819, 0.746074, 0, 1.0};
Point(54) = {-0.013974, 0.746483, 0, 1.0};
Point(55) = {-0.010126, 0.746865, 0, 1.0};
Point(56) = {-0.006274, 0.747218, 0, 1.0};
Point(57) = {0.001440, 0.747838, 0, 1.0};
Point(58) = {0.009167, 0.748349, 0, 1.0};
Point(59) = {0.016907, 0.748753, 0, 1.0};
Point(60) = {0.024659, 0.749063, 0, 1.0};
Point(61) = {0.032420, 0.749294, 0, 1.0};
Point(62) = {0.040189, 0.749463, 0, 1.0};
Point(63) = {0.047963, 0.749593, 0, 1.0};
Point(64) = {0.055739, 0.749703, 0, 1.0};
Point(65) = {0.063515, 0.749817, 0, 1.0};
Point(66) = {0.071288, 0.749945, 0, 1.0};
Point(67) = {0.074393, 0.750000, 0, 1.0};
Point(68) = {-0.074573, -0.748522, 0, 1.0};
Point(69) = {-0.071583, -0.747526, 0, 1.0};
Point(70) = {-0.064096, -0.745053, 0, 1.0};
Point(71) = {-0.056611, -0.742553, 0, 1.0};
Point(72) = {-0.049128, -0.740040, 0, 1.0};
Point(73) = {-0.041643, -0.737545, 0, 1.0};
Point(74) = {-0.034152, -0.735099, 0, 1.0};
Point(75) = {-0.026650, -0.732740, 0, 1.0};
Point(76) = {-0.019133, -0.730509, 0, 1.0};
Point(77) = {-0.011595, -0.728447, 0, 1.0};
Point(78) = {-0.004030, -0.726602, 0, 1.0};
Point(79) = {0.003565, -0.725009, 0, 1.0};
Point(80) = {0.007375, -0.724317, 0, 1.0};
Point(81) = {0.011194, -0.723697, 0, 1.0};
Point(82) = {0.015023, -0.723150, 0, 1.0};
Point(83) = {0.018859, -0.722673, 0, 1.0};
Point(84) = {0.022704, -0.722260, 0, 1.0};
Point(85) = {0.026556, -0.721915, 0, 1.0};
Point(86) = {0.030418, -0.721643, 0, 1.0};
Point(87) = {0.034290, -0.721462, 0, 1.0};
Point(88) = {0.038177, -0.721397, 0, 1.0};
Point(89) = {0.042080, -0.721466, 0, 1.0};
Point(90) = {0.046002, -0.721690, 0, 1.0};
Point(91) = {0.049946, -0.722091, 0, 1.0};
Point(92) = {0.053914, -0.722694, 0, 1.0};
Point(93) = {0.057911, -0.723531, 0, 1.0};
Point(94) = {0.059922, -0.724047, 0, 1.0};
Point(95) = {0.061940, -0.724632, 0, 1.0};
Point(96) = {0.063967, -0.725285, 0, 1.0};
Point(97) = {0.066003, -0.726009, 0, 1.0};
Point(98) = {0.068049, -0.726817, 0, 1.0};
Point(99) = {0.070109, -0.727745, 0, 1.0};
Point(100) = {0.072621, -0.729176, 0, 1.0};
Point(101) = {0.074448, -0.731386, 0, 1.0};
Point(102) = {0.073135, -0.733388, 0, 1.0};
Point(103) = {0.070942, -0.734568, 0, 1.0};
Point(104) = {0.069088, -0.735340, 0, 1.0};
Point(105) = {0.067226, -0.736037, 0, 1.0};
Point(106) = {0.065359, -0.736698, 0, 1.0};
Point(107) = {0.063490, -0.737334, 0, 1.0};
Point(108) = {0.061617, -0.737944, 0, 1.0};
Point(109) = {0.059740, -0.738525, 0, 1.0};
Point(110) = {0.055975, -0.739591, 0, 1.0};
Point(111) = {0.052196, -0.740541, 0, 1.0};
Point(112) = {0.048406, -0.741392, 0, 1.0};
Point(113) = {0.044605, -0.742163, 0, 1.0};
Point(114) = {0.040796, -0.742867, 0, 1.0};
Point(115) = {0.036980, -0.743514, 0, 1.0};
Point(116) = {0.033158, -0.744108, 0, 1.0};
Point(117) = {0.029330, -0.744655, 0, 1.0};
Point(118) = {0.025497, -0.745163, 0, 1.0};
Point(119) = {0.021660, -0.745635, 0, 1.0};
Point(120) = {0.017819, -0.746074, 0, 1.0};
Point(121) = {0.013974, -0.746483, 0, 1.0};
Point(122) = {0.010126, -0.746865, 0, 1.0};
Point(123) = {0.006274, -0.747218, 0, 1.0};
Point(124) = {-0.001440, -0.747838, 0, 1.0};
Point(125) = {-0.009167, -0.748349, 0, 1.0};
Point(126) = {-0.016907, -0.748753, 0, 1.0};
Point(127) = {-0.024659, -0.749063, 0, 1.0};
Point(128) = {-0.032420, -0.749294, 0, 1.0};
Point(129) = {-0.040189, -0.749463, 0, 1.0};
Point(130) = {-0.047963, -0.749593, 0, 1.0};
Point(131) = {-0.055739, -0.749703, 0, 1.0};
Point(132) = {-0.063515, -0.749817, 0, 1.0};
Point(133) = {-0.071288, -0.749945, 0, 1.0};
Point(134) = {-0.074393, -0.750000, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:19};
Spline(2) = {19:48};
Spline(3) = {48:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:86};
Spline(6) = {86:115};
Spline(7) = {115:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html