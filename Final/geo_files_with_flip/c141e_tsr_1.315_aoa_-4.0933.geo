SetFactory("OpenCASCADE");

Point(1) = {0.074880, 0.748331, 0, 1.0};
Point(2) = {0.072433, 0.747549, 0, 1.0};
Point(3) = {0.069279, 0.746563, 0, 1.0};
Point(4) = {0.065483, 0.745419, 0, 1.0};
Point(5) = {0.061079, 0.744166, 0, 1.0};
Point(6) = {0.056106, 0.742872, 0, 1.0};
Point(7) = {0.050611, 0.741555, 0, 1.0};
Point(8) = {0.044649, 0.740204, 0, 1.0};
Point(9) = {0.038273, 0.738885, 0, 1.0};
Point(10) = {0.031544, 0.737622, 0, 1.0};
Point(11) = {0.024527, 0.736433, 0, 1.0};
Point(12) = {0.017288, 0.735343, 0, 1.0};
Point(13) = {0.009896, 0.734371, 0, 1.0};
Point(14) = {0.002422, 0.733528, 0, 1.0};
Point(15) = {-0.005062, 0.732831, 0, 1.0};
Point(16) = {-0.012485, 0.732284, 0, 1.0};
Point(17) = {-0.019774, 0.731887, 0, 1.0};
Point(18) = {-0.026857, 0.731620, 0, 1.0};
Point(19) = {-0.033665, 0.731472, 0, 1.0};
Point(20) = {-0.040133, 0.731444, 0, 1.0};
Point(21) = {-0.046198, 0.731521, 0, 1.0};
Point(22) = {-0.051800, 0.731703, 0, 1.0};
Point(23) = {-0.056890, 0.732038, 0, 1.0};
Point(24) = {-0.061419, 0.732542, 0, 1.0};
Point(25) = {-0.065340, 0.733136, 0, 1.0};
Point(26) = {-0.068617, 0.733865, 0, 1.0};
Point(27) = {-0.071222, 0.734756, 0, 1.0};
Point(28) = {-0.073127, 0.735756, 0, 1.0};
Point(29) = {-0.074322, 0.736985, 0, 1.0};
Point(30) = {-0.074809, 0.738620, 0, 1.0};
Point(31) = {-0.074526, 0.739849, 0, 1.0};
Point(32) = {-0.073504, 0.741024, 0, 1.0};
Point(33) = {-0.071739, 0.741979, 0, 1.0};
Point(34) = {-0.069254, 0.742764, 0, 1.0};
Point(35) = {-0.066075, 0.743413, 0, 1.0};
Point(36) = {-0.062237, 0.743963, 0, 1.0};
Point(37) = {-0.057782, 0.744498, 0, 1.0};
Point(38) = {-0.052755, 0.745043, 0, 1.0};
Point(39) = {-0.047208, 0.745630, 0, 1.0};
Point(40) = {-0.041190, 0.746205, 0, 1.0};
Point(41) = {-0.034761, 0.746779, 0, 1.0};
Point(42) = {-0.027982, 0.747336, 0, 1.0};
Point(43) = {-0.020917, 0.747869, 0, 1.0};
Point(44) = {-0.013635, 0.748361, 0, 1.0};
Point(45) = {-0.006204, 0.748786, 0, 1.0};
Point(46) = {0.001304, 0.749142, 0, 1.0};
Point(47) = {0.008818, 0.749427, 0, 1.0};
Point(48) = {0.016266, 0.749628, 0, 1.0};
Point(49) = {0.023573, 0.749764, 0, 1.0};
Point(50) = {0.030669, 0.749856, 0, 1.0};
Point(51) = {0.037483, 0.749920, 0, 1.0};
Point(52) = {0.043950, 0.749970, 0, 1.0};
Point(53) = {0.050007, 0.750000, 0, 1.0};
Point(54) = {0.055596, 0.749996, 0, 1.0};
Point(55) = {0.060664, 0.749967, 0, 1.0};
Point(56) = {0.065160, 0.749926, 0, 1.0};
Point(57) = {0.069041, 0.749882, 0, 1.0};
Point(58) = {0.072269, 0.749841, 0, 1.0};
Point(59) = {0.074774, 0.749814, 0, 1.0};
Point(60) = {-0.074880, -0.748331, 0, 1.0};
Point(61) = {-0.072433, -0.747549, 0, 1.0};
Point(62) = {-0.069279, -0.746563, 0, 1.0};
Point(63) = {-0.065483, -0.745419, 0, 1.0};
Point(64) = {-0.061079, -0.744166, 0, 1.0};
Point(65) = {-0.056106, -0.742872, 0, 1.0};
Point(66) = {-0.050611, -0.741555, 0, 1.0};
Point(67) = {-0.044649, -0.740204, 0, 1.0};
Point(68) = {-0.038273, -0.738885, 0, 1.0};
Point(69) = {-0.031544, -0.737622, 0, 1.0};
Point(70) = {-0.024527, -0.736433, 0, 1.0};
Point(71) = {-0.017288, -0.735343, 0, 1.0};
Point(72) = {-0.009896, -0.734371, 0, 1.0};
Point(73) = {-0.002422, -0.733528, 0, 1.0};
Point(74) = {0.005062, -0.732831, 0, 1.0};
Point(75) = {0.012485, -0.732284, 0, 1.0};
Point(76) = {0.019774, -0.731887, 0, 1.0};
Point(77) = {0.026857, -0.731620, 0, 1.0};
Point(78) = {0.033665, -0.731472, 0, 1.0};
Point(79) = {0.040133, -0.731444, 0, 1.0};
Point(80) = {0.046198, -0.731521, 0, 1.0};
Point(81) = {0.051800, -0.731703, 0, 1.0};
Point(82) = {0.056890, -0.732038, 0, 1.0};
Point(83) = {0.061419, -0.732542, 0, 1.0};
Point(84) = {0.065340, -0.733136, 0, 1.0};
Point(85) = {0.068617, -0.733865, 0, 1.0};
Point(86) = {0.071222, -0.734756, 0, 1.0};
Point(87) = {0.073127, -0.735756, 0, 1.0};
Point(88) = {0.074322, -0.736985, 0, 1.0};
Point(89) = {0.074809, -0.738620, 0, 1.0};
Point(90) = {0.074526, -0.739849, 0, 1.0};
Point(91) = {0.073504, -0.741024, 0, 1.0};
Point(92) = {0.071739, -0.741979, 0, 1.0};
Point(93) = {0.069254, -0.742764, 0, 1.0};
Point(94) = {0.066075, -0.743413, 0, 1.0};
Point(95) = {0.062237, -0.743963, 0, 1.0};
Point(96) = {0.057782, -0.744498, 0, 1.0};
Point(97) = {0.052755, -0.745043, 0, 1.0};
Point(98) = {0.047208, -0.745630, 0, 1.0};
Point(99) = {0.041190, -0.746205, 0, 1.0};
Point(100) = {0.034761, -0.746779, 0, 1.0};
Point(101) = {0.027982, -0.747336, 0, 1.0};
Point(102) = {0.020917, -0.747869, 0, 1.0};
Point(103) = {0.013635, -0.748361, 0, 1.0};
Point(104) = {0.006204, -0.748786, 0, 1.0};
Point(105) = {-0.001304, -0.749142, 0, 1.0};
Point(106) = {-0.008818, -0.749427, 0, 1.0};
Point(107) = {-0.016266, -0.749628, 0, 1.0};
Point(108) = {-0.023573, -0.749764, 0, 1.0};
Point(109) = {-0.030669, -0.749856, 0, 1.0};
Point(110) = {-0.037483, -0.749920, 0, 1.0};
Point(111) = {-0.043950, -0.749970, 0, 1.0};
Point(112) = {-0.050007, -0.750000, 0, 1.0};
Point(113) = {-0.055596, -0.749996, 0, 1.0};
Point(114) = {-0.060664, -0.749967, 0, 1.0};
Point(115) = {-0.065160, -0.749926, 0, 1.0};
Point(116) = {-0.069041, -0.749882, 0, 1.0};
Point(117) = {-0.072269, -0.749841, 0, 1.0};
Point(118) = {-0.074774, -0.749814, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:19};
Spline(2) = {19:41};
Spline(3) = {41:59};
Spline(4) = {59,1};

// Lines: second blade (splines 5-8)
Spline(5) = {60:78};
Spline(6) = {78:100};
Spline(7) = {100:118};
Spline(8) = {118,60};

// Outer domain (points 20001-4 and lines)
Point(119) = {-13.50000000, -15.00000000, 0, 1.0};
Point(120) = {-13.50000000, 15.00000000, 0, 1.0};
Point(121) = {13.50000000, 15.00000000, 0, 1.0};
Point(122) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {119, 120};
Line(12) = {120, 121};
Line(13) = {121, 122};
Line(14) = {119, 122};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html