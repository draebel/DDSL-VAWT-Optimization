SetFactory("OpenCASCADE");

Point(1) = {0.074525, 0.720973, 0, 1.0};
Point(2) = {0.072089, 0.721665, 0, 1.0};
Point(3) = {0.068177, 0.722793, 0, 1.0};
Point(4) = {0.064323, 0.723923, 0, 1.0};
Point(5) = {0.060527, 0.725052, 0, 1.0};
Point(6) = {0.056789, 0.726179, 0, 1.0};
Point(7) = {0.053109, 0.727302, 0, 1.0};
Point(8) = {0.049486, 0.728420, 0, 1.0};
Point(9) = {0.045920, 0.729528, 0, 1.0};
Point(10) = {0.042412, 0.730627, 0, 1.0};
Point(11) = {0.038960, 0.731713, 0, 1.0};
Point(12) = {0.035564, 0.732786, 0, 1.0};
Point(13) = {0.032224, 0.733842, 0, 1.0};
Point(14) = {0.028939, 0.734880, 0, 1.0};
Point(15) = {0.025708, 0.735898, 0, 1.0};
Point(16) = {0.022531, 0.736895, 0, 1.0};
Point(17) = {0.019407, 0.737867, 0, 1.0};
Point(18) = {0.016335, 0.738815, 0, 1.0};
Point(19) = {0.013314, 0.739735, 0, 1.0};
Point(20) = {0.010343, 0.740626, 0, 1.0};
Point(21) = {0.007421, 0.741486, 0, 1.0};
Point(22) = {0.004546, 0.742313, 0, 1.0};
Point(23) = {0.001719, 0.743107, 0, 1.0};
Point(24) = {-0.001063, 0.743864, 0, 1.0};
Point(25) = {-0.003800, 0.744585, 0, 1.0};
Point(26) = {-0.006495, 0.745266, 0, 1.0};
Point(27) = {-0.009148, 0.745908, 0, 1.0};
Point(28) = {-0.011761, 0.746507, 0, 1.0};
Point(29) = {-0.014335, 0.747064, 0, 1.0};
Point(30) = {-0.016873, 0.747575, 0, 1.0};
Point(31) = {-0.019374, 0.748042, 0, 1.0};
Point(32) = {-0.021842, 0.748461, 0, 1.0};
Point(33) = {-0.024277, 0.748832, 0, 1.0};
Point(34) = {-0.026682, 0.749154, 0, 1.0};
Point(35) = {-0.029058, 0.749426, 0, 1.0};
Point(36) = {-0.031407, 0.749647, 0, 1.0};
Point(37) = {-0.033731, 0.749815, 0, 1.0};
Point(38) = {-0.036031, 0.749931, 0, 1.0};
Point(39) = {-0.038310, 0.749992, 0, 1.0};
Point(40) = {-0.040569, 0.750000, 0, 1.0};
Point(41) = {-0.042810, 0.749952, 0, 1.0};
Point(42) = {-0.045036, 0.749849, 0, 1.0};
Point(43) = {-0.047247, 0.749689, 0, 1.0};
Point(44) = {-0.049447, 0.749473, 0, 1.0};
Point(45) = {-0.051637, 0.749199, 0, 1.0};
Point(46) = {-0.053816, 0.748869, 0, 1.0};
Point(47) = {-0.055970, 0.748484, 0, 1.0};
Point(48) = {-0.058083, 0.748046, 0, 1.0};
Point(49) = {-0.060138, 0.747558, 0, 1.0};
Point(50) = {-0.062119, 0.747022, 0, 1.0};
Point(51) = {-0.064009, 0.746442, 0, 1.0};
Point(52) = {-0.065792, 0.745819, 0, 1.0};
Point(53) = {-0.067452, 0.745156, 0, 1.0};
Point(54) = {-0.068973, 0.744456, 0, 1.0};
Point(55) = {-0.070339, 0.743722, 0, 1.0};
Point(56) = {-0.071535, 0.742957, 0, 1.0};
Point(57) = {-0.072544, 0.742163, 0, 1.0};
Point(58) = {-0.073352, 0.741344, 0, 1.0};
Point(59) = {-0.073944, 0.740501, 0, 1.0};
Point(60) = {-0.074304, 0.739640, 0, 1.0};
Point(61) = {-0.074419, 0.738761, 0, 1.0};
Point(62) = {-0.074275, 0.737869, 0, 1.0};
Point(63) = {-0.073857, 0.736967, 0, 1.0};
Point(64) = {-0.073152, 0.736056, 0, 1.0};
Point(65) = {-0.072147, 0.735141, 0, 1.0};
Point(66) = {-0.070830, 0.734224, 0, 1.0};
Point(67) = {-0.069187, 0.733309, 0, 1.0};
Point(68) = {-0.067207, 0.732399, 0, 1.0};
Point(69) = {-0.064878, 0.731496, 0, 1.0};
Point(70) = {-0.062190, 0.730603, 0, 1.0};
Point(71) = {-0.059131, 0.729725, 0, 1.0};
Point(72) = {-0.055690, 0.728863, 0, 1.0};
Point(73) = {-0.051859, 0.728020, 0, 1.0};
Point(74) = {-0.047628, 0.727200, 0, 1.0};
Point(75) = {-0.042989, 0.726406, 0, 1.0};
Point(76) = {-0.037931, 0.725640, 0, 1.0};
Point(77) = {-0.032449, 0.724906, 0, 1.0};
Point(78) = {-0.026535, 0.724205, 0, 1.0};
Point(79) = {-0.020181, 0.723541, 0, 1.0};
Point(80) = {-0.013382, 0.722918, 0, 1.0};
Point(81) = {-0.006132, 0.722336, 0, 1.0};
Point(82) = {0.001574, 0.721799, 0, 1.0};
Point(83) = {0.009741, 0.721310, 0, 1.0};
Point(84) = {0.018374, 0.720871, 0, 1.0};
Point(85) = {0.027474, 0.720485, 0, 1.0};
Point(86) = {0.037046, 0.720154, 0, 1.0};
Point(87) = {0.047092, 0.719880, 0, 1.0};
Point(88) = {0.057613, 0.719665, 0, 1.0};
Point(89) = {0.068611, 0.719512, 0, 1.0};
Point(90) = {0.074335, 0.719457, 0, 1.0};
Point(91) = {-0.074525, -0.720973, 0, 1.0};
Point(92) = {-0.072089, -0.721665, 0, 1.0};
Point(93) = {-0.068177, -0.722793, 0, 1.0};
Point(94) = {-0.064323, -0.723923, 0, 1.0};
Point(95) = {-0.060527, -0.725052, 0, 1.0};
Point(96) = {-0.056789, -0.726179, 0, 1.0};
Point(97) = {-0.053109, -0.727302, 0, 1.0};
Point(98) = {-0.049486, -0.728420, 0, 1.0};
Point(99) = {-0.045920, -0.729528, 0, 1.0};
Point(100) = {-0.042412, -0.730627, 0, 1.0};
Point(101) = {-0.038960, -0.731713, 0, 1.0};
Point(102) = {-0.035564, -0.732786, 0, 1.0};
Point(103) = {-0.032224, -0.733842, 0, 1.0};
Point(104) = {-0.028939, -0.734880, 0, 1.0};
Point(105) = {-0.025708, -0.735898, 0, 1.0};
Point(106) = {-0.022531, -0.736895, 0, 1.0};
Point(107) = {-0.019407, -0.737867, 0, 1.0};
Point(108) = {-0.016335, -0.738815, 0, 1.0};
Point(109) = {-0.013314, -0.739735, 0, 1.0};
Point(110) = {-0.010343, -0.740626, 0, 1.0};
Point(111) = {-0.007421, -0.741486, 0, 1.0};
Point(112) = {-0.004546, -0.742313, 0, 1.0};
Point(113) = {-0.001719, -0.743107, 0, 1.0};
Point(114) = {0.001063, -0.743864, 0, 1.0};
Point(115) = {0.003800, -0.744585, 0, 1.0};
Point(116) = {0.006495, -0.745266, 0, 1.0};
Point(117) = {0.009148, -0.745908, 0, 1.0};
Point(118) = {0.011761, -0.746507, 0, 1.0};
Point(119) = {0.014335, -0.747064, 0, 1.0};
Point(120) = {0.016873, -0.747575, 0, 1.0};
Point(121) = {0.019374, -0.748042, 0, 1.0};
Point(122) = {0.021842, -0.748461, 0, 1.0};
Point(123) = {0.024277, -0.748832, 0, 1.0};
Point(124) = {0.026682, -0.749154, 0, 1.0};
Point(125) = {0.029058, -0.749426, 0, 1.0};
Point(126) = {0.031407, -0.749647, 0, 1.0};
Point(127) = {0.033731, -0.749815, 0, 1.0};
Point(128) = {0.036031, -0.749931, 0, 1.0};
Point(129) = {0.038310, -0.749992, 0, 1.0};
Point(130) = {0.040569, -0.750000, 0, 1.0};
Point(131) = {0.042810, -0.749952, 0, 1.0};
Point(132) = {0.045036, -0.749849, 0, 1.0};
Point(133) = {0.047247, -0.749689, 0, 1.0};
Point(134) = {0.049447, -0.749473, 0, 1.0};
Point(135) = {0.051637, -0.749199, 0, 1.0};
Point(136) = {0.053816, -0.748869, 0, 1.0};
Point(137) = {0.055970, -0.748484, 0, 1.0};
Point(138) = {0.058083, -0.748046, 0, 1.0};
Point(139) = {0.060138, -0.747558, 0, 1.0};
Point(140) = {0.062119, -0.747022, 0, 1.0};
Point(141) = {0.064009, -0.746442, 0, 1.0};
Point(142) = {0.065792, -0.745819, 0, 1.0};
Point(143) = {0.067452, -0.745156, 0, 1.0};
Point(144) = {0.068973, -0.744456, 0, 1.0};
Point(145) = {0.070339, -0.743722, 0, 1.0};
Point(146) = {0.071535, -0.742957, 0, 1.0};
Point(147) = {0.072544, -0.742163, 0, 1.0};
Point(148) = {0.073352, -0.741344, 0, 1.0};
Point(149) = {0.073944, -0.740501, 0, 1.0};
Point(150) = {0.074304, -0.739640, 0, 1.0};
Point(151) = {0.074419, -0.738761, 0, 1.0};
Point(152) = {0.074275, -0.737869, 0, 1.0};
Point(153) = {0.073857, -0.736967, 0, 1.0};
Point(154) = {0.073152, -0.736056, 0, 1.0};
Point(155) = {0.072147, -0.735141, 0, 1.0};
Point(156) = {0.070830, -0.734224, 0, 1.0};
Point(157) = {0.069187, -0.733309, 0, 1.0};
Point(158) = {0.067207, -0.732399, 0, 1.0};
Point(159) = {0.064878, -0.731496, 0, 1.0};
Point(160) = {0.062190, -0.730603, 0, 1.0};
Point(161) = {0.059131, -0.729725, 0, 1.0};
Point(162) = {0.055690, -0.728863, 0, 1.0};
Point(163) = {0.051859, -0.728020, 0, 1.0};
Point(164) = {0.047628, -0.727200, 0, 1.0};
Point(165) = {0.042989, -0.726406, 0, 1.0};
Point(166) = {0.037931, -0.725640, 0, 1.0};
Point(167) = {0.032449, -0.724906, 0, 1.0};
Point(168) = {0.026535, -0.724205, 0, 1.0};
Point(169) = {0.020181, -0.723541, 0, 1.0};
Point(170) = {0.013382, -0.722918, 0, 1.0};
Point(171) = {0.006132, -0.722336, 0, 1.0};
Point(172) = {-0.001574, -0.721799, 0, 1.0};
Point(173) = {-0.009741, -0.721310, 0, 1.0};
Point(174) = {-0.018374, -0.720871, 0, 1.0};
Point(175) = {-0.027474, -0.720485, 0, 1.0};
Point(176) = {-0.037046, -0.720154, 0, 1.0};
Point(177) = {-0.047092, -0.719880, 0, 1.0};
Point(178) = {-0.057613, -0.719665, 0, 1.0};
Point(179) = {-0.068611, -0.719512, 0, 1.0};
Point(180) = {-0.074335, -0.719457, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:36};
Spline(2) = {36:76};
Spline(3) = {76:90};
Spline(4) = {90,1};

// Lines: second blade (splines 5-8)
Spline(5) = {91:126};
Spline(6) = {126:166};
Spline(7) = {166:180};
Spline(8) = {180,91};

// Outer domain (points 20001-4 and lines)
Point(181) = {-13.50000000, -15.00000000, 0, 1.0};
Point(182) = {-13.50000000, 15.00000000, 0, 1.0};
Point(183) = {13.50000000, 15.00000000, 0, 1.0};
Point(184) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {181, 182};
Line(12) = {182, 183};
Line(13) = {183, 184};
Line(14) = {181, 184};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html