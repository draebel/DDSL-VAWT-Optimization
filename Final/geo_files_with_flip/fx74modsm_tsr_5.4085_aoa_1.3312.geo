SetFactory("OpenCASCADE");

Point(1) = {0.074838, 0.739061, 0, 1.0};
Point(2) = {0.073341, 0.738632, 0, 1.0};
Point(3) = {0.069101, 0.737344, 0, 1.0};
Point(4) = {0.064435, 0.736029, 0, 1.0};
Point(5) = {0.059395, 0.734676, 0, 1.0};
Point(6) = {0.054025, 0.733274, 0, 1.0};
Point(7) = {0.048375, 0.731833, 0, 1.0};
Point(8) = {0.042494, 0.730379, 0, 1.0};
Point(9) = {0.036432, 0.728942, 0, 1.0};
Point(10) = {0.030238, 0.727549, 0, 1.0};
Point(11) = {0.023962, 0.726219, 0, 1.0};
Point(12) = {0.017648, 0.724975, 0, 1.0};
Point(13) = {0.011341, 0.723847, 0, 1.0};
Point(14) = {0.005043, 0.722867, 0, 1.0};
Point(15) = {-0.001243, 0.722075, 0, 1.0};
Point(16) = {-0.007470, 0.721518, 0, 1.0};
Point(17) = {-0.013615, 0.721232, 0, 1.0};
Point(18) = {-0.019642, 0.721248, 0, 1.0};
Point(19) = {-0.025517, 0.721587, 0, 1.0};
Point(20) = {-0.031211, 0.722255, 0, 1.0};
Point(21) = {-0.036687, 0.723248, 0, 1.0};
Point(22) = {-0.041911, 0.724549, 0, 1.0};
Point(23) = {-0.046858, 0.726135, 0, 1.0};
Point(24) = {-0.051489, 0.727964, 0, 1.0};
Point(25) = {-0.055777, 0.729998, 0, 1.0};
Point(26) = {-0.059691, 0.732191, 0, 1.0};
Point(27) = {-0.063207, 0.734509, 0, 1.0};
Point(28) = {-0.066304, 0.736920, 0, 1.0};
Point(29) = {-0.068959, 0.739361, 0, 1.0};
Point(30) = {-0.071159, 0.741754, 0, 1.0};
Point(31) = {-0.072897, 0.744046, 0, 1.0};
Point(32) = {-0.074142, 0.746123, 0, 1.0};
Point(33) = {-0.074840, 0.747775, 0, 1.0};
Point(34) = {-0.074980, 0.748661, 0, 1.0};
Point(35) = {-0.074804, 0.749334, 0, 1.0};
Point(36) = {-0.074054, 0.749893, 0, 1.0};
Point(37) = {-0.072759, 0.750000, 0, 1.0};
Point(38) = {-0.070972, 0.749767, 0, 1.0};
Point(39) = {-0.068727, 0.749363, 0, 1.0};
Point(40) = {-0.066026, 0.748896, 0, 1.0};
Point(41) = {-0.062884, 0.748381, 0, 1.0};
Point(42) = {-0.059328, 0.747821, 0, 1.0};
Point(43) = {-0.055377, 0.747215, 0, 1.0};
Point(44) = {-0.051057, 0.746563, 0, 1.0};
Point(45) = {-0.046399, 0.745869, 0, 1.0};
Point(46) = {-0.041433, 0.745145, 0, 1.0};
Point(47) = {-0.036195, 0.744403, 0, 1.0};
Point(48) = {-0.030714, 0.743654, 0, 1.0};
Point(49) = {-0.025022, 0.742906, 0, 1.0};
Point(50) = {-0.019155, 0.742171, 0, 1.0};
Point(51) = {-0.013145, 0.741457, 0, 1.0};
Point(52) = {-0.007022, 0.740776, 0, 1.0};
Point(53) = {-0.000823, 0.740138, 0, 1.0};
Point(54) = {0.005431, 0.739557, 0, 1.0};
Point(55) = {0.011694, 0.739045, 0, 1.0};
Point(56) = {0.017965, 0.738609, 0, 1.0};
Point(57) = {0.024242, 0.738261, 0, 1.0};
Point(58) = {0.030481, 0.738006, 0, 1.0};
Point(59) = {0.036639, 0.737855, 0, 1.0};
Point(60) = {0.042667, 0.737814, 0, 1.0};
Point(61) = {0.048516, 0.737890, 0, 1.0};
Point(62) = {0.054137, 0.738085, 0, 1.0};
Point(63) = {0.059481, 0.738409, 0, 1.0};
Point(64) = {0.064502, 0.738875, 0, 1.0};
Point(65) = {0.069150, 0.739489, 0, 1.0};
Point(66) = {0.073379, 0.740248, 0, 1.0};
Point(67) = {0.074873, 0.740569, 0, 1.0};
Point(68) = {-0.074838, -0.739061, 0, 1.0};
Point(69) = {-0.073341, -0.738632, 0, 1.0};
Point(70) = {-0.069101, -0.737344, 0, 1.0};
Point(71) = {-0.064435, -0.736029, 0, 1.0};
Point(72) = {-0.059395, -0.734676, 0, 1.0};
Point(73) = {-0.054025, -0.733274, 0, 1.0};
Point(74) = {-0.048375, -0.731833, 0, 1.0};
Point(75) = {-0.042494, -0.730379, 0, 1.0};
Point(76) = {-0.036432, -0.728942, 0, 1.0};
Point(77) = {-0.030238, -0.727549, 0, 1.0};
Point(78) = {-0.023962, -0.726219, 0, 1.0};
Point(79) = {-0.017648, -0.724975, 0, 1.0};
Point(80) = {-0.011341, -0.723847, 0, 1.0};
Point(81) = {-0.005043, -0.722867, 0, 1.0};
Point(82) = {0.001243, -0.722075, 0, 1.0};
Point(83) = {0.007470, -0.721518, 0, 1.0};
Point(84) = {0.013615, -0.721232, 0, 1.0};
Point(85) = {0.019642, -0.721248, 0, 1.0};
Point(86) = {0.025517, -0.721587, 0, 1.0};
Point(87) = {0.031211, -0.722255, 0, 1.0};
Point(88) = {0.036687, -0.723248, 0, 1.0};
Point(89) = {0.041911, -0.724549, 0, 1.0};
Point(90) = {0.046858, -0.726135, 0, 1.0};
Point(91) = {0.051489, -0.727964, 0, 1.0};
Point(92) = {0.055777, -0.729998, 0, 1.0};
Point(93) = {0.059691, -0.732191, 0, 1.0};
Point(94) = {0.063207, -0.734509, 0, 1.0};
Point(95) = {0.066304, -0.736920, 0, 1.0};
Point(96) = {0.068959, -0.739361, 0, 1.0};
Point(97) = {0.071159, -0.741754, 0, 1.0};
Point(98) = {0.072897, -0.744046, 0, 1.0};
Point(99) = {0.074142, -0.746123, 0, 1.0};
Point(100) = {0.074840, -0.747775, 0, 1.0};
Point(101) = {0.074980, -0.748661, 0, 1.0};
Point(102) = {0.074804, -0.749334, 0, 1.0};
Point(103) = {0.074054, -0.749893, 0, 1.0};
Point(104) = {0.072759, -0.750000, 0, 1.0};
Point(105) = {0.070972, -0.749767, 0, 1.0};
Point(106) = {0.068727, -0.749363, 0, 1.0};
Point(107) = {0.066026, -0.748896, 0, 1.0};
Point(108) = {0.062884, -0.748381, 0, 1.0};
Point(109) = {0.059328, -0.747821, 0, 1.0};
Point(110) = {0.055377, -0.747215, 0, 1.0};
Point(111) = {0.051057, -0.746563, 0, 1.0};
Point(112) = {0.046399, -0.745869, 0, 1.0};
Point(113) = {0.041433, -0.745145, 0, 1.0};
Point(114) = {0.036195, -0.744403, 0, 1.0};
Point(115) = {0.030714, -0.743654, 0, 1.0};
Point(116) = {0.025022, -0.742906, 0, 1.0};
Point(117) = {0.019155, -0.742171, 0, 1.0};
Point(118) = {0.013145, -0.741457, 0, 1.0};
Point(119) = {0.007022, -0.740776, 0, 1.0};
Point(120) = {0.000823, -0.740138, 0, 1.0};
Point(121) = {-0.005431, -0.739557, 0, 1.0};
Point(122) = {-0.011694, -0.739045, 0, 1.0};
Point(123) = {-0.017965, -0.738609, 0, 1.0};
Point(124) = {-0.024242, -0.738261, 0, 1.0};
Point(125) = {-0.030481, -0.738006, 0, 1.0};
Point(126) = {-0.036639, -0.737855, 0, 1.0};
Point(127) = {-0.042667, -0.737814, 0, 1.0};
Point(128) = {-0.048516, -0.737890, 0, 1.0};
Point(129) = {-0.054137, -0.738085, 0, 1.0};
Point(130) = {-0.059481, -0.738409, 0, 1.0};
Point(131) = {-0.064502, -0.738875, 0, 1.0};
Point(132) = {-0.069150, -0.739489, 0, 1.0};
Point(133) = {-0.073379, -0.740248, 0, 1.0};
Point(134) = {-0.074873, -0.740569, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:47};
Spline(3) = {47:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:88};
Spline(6) = {88:114};
Spline(7) = {114:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html