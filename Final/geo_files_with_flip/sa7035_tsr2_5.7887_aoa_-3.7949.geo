SetFactory("OpenCASCADE");

Point(1) = {0.074962, 0.748477, 0, 1.0};
Point(2) = {0.072583, 0.747912, 0, 1.0};
Point(3) = {0.068881, 0.747032, 0, 1.0};
Point(4) = {0.064823, 0.746077, 0, 1.0};
Point(5) = {0.060440, 0.745067, 0, 1.0};
Point(6) = {0.055760, 0.744020, 0, 1.0};
Point(7) = {0.050806, 0.742952, 0, 1.0};
Point(8) = {0.045606, 0.741878, 0, 1.0};
Point(9) = {0.040187, 0.740808, 0, 1.0};
Point(10) = {0.034583, 0.739749, 0, 1.0};
Point(11) = {0.028830, 0.738709, 0, 1.0};
Point(12) = {0.022962, 0.737704, 0, 1.0};
Point(13) = {0.017013, 0.736745, 0, 1.0};
Point(14) = {0.011024, 0.735839, 0, 1.0};
Point(15) = {0.005023, 0.735004, 0, 1.0};
Point(16) = {-0.000955, 0.734241, 0, 1.0};
Point(17) = {-0.006872, 0.733566, 0, 1.0};
Point(18) = {-0.012701, 0.732986, 0, 1.0};
Point(19) = {-0.018408, 0.732504, 0, 1.0};
Point(20) = {-0.023964, 0.732132, 0, 1.0};
Point(21) = {-0.029342, 0.731874, 0, 1.0};
Point(22) = {-0.034511, 0.731731, 0, 1.0};
Point(23) = {-0.039448, 0.731709, 0, 1.0};
Point(24) = {-0.044135, 0.731803, 0, 1.0};
Point(25) = {-0.048543, 0.732017, 0, 1.0};
Point(26) = {-0.052656, 0.732350, 0, 1.0};
Point(27) = {-0.056459, 0.732788, 0, 1.0};
Point(28) = {-0.059932, 0.733334, 0, 1.0};
Point(29) = {-0.063068, 0.733977, 0, 1.0};
Point(30) = {-0.065851, 0.734701, 0, 1.0};
Point(31) = {-0.068271, 0.735501, 0, 1.0};
Point(32) = {-0.070331, 0.736354, 0, 1.0};
Point(33) = {-0.072016, 0.737234, 0, 1.0};
Point(34) = {-0.073313, 0.738126, 0, 1.0};
Point(35) = {-0.074227, 0.739000, 0, 1.0};
Point(36) = {-0.074749, 0.739818, 0, 1.0};
Point(37) = {-0.074836, 0.740463, 0, 1.0};
Point(38) = {-0.074350, 0.741008, 0, 1.0};
Point(39) = {-0.073291, 0.741601, 0, 1.0};
Point(40) = {-0.071758, 0.742203, 0, 1.0};
Point(41) = {-0.069763, 0.742781, 0, 1.0};
Point(42) = {-0.067304, 0.743324, 0, 1.0};
Point(43) = {-0.064391, 0.743836, 0, 1.0};
Point(44) = {-0.061044, 0.744320, 0, 1.0};
Point(45) = {-0.057278, 0.744770, 0, 1.0};
Point(46) = {-0.053114, 0.745185, 0, 1.0};
Point(47) = {-0.048573, 0.745567, 0, 1.0};
Point(48) = {-0.043682, 0.745917, 0, 1.0};
Point(49) = {-0.038470, 0.746237, 0, 1.0};
Point(50) = {-0.032966, 0.746528, 0, 1.0};
Point(51) = {-0.027204, 0.746794, 0, 1.0};
Point(52) = {-0.021220, 0.747036, 0, 1.0};
Point(53) = {-0.015050, 0.747258, 0, 1.0};
Point(54) = {-0.008735, 0.747464, 0, 1.0};
Point(55) = {-0.002316, 0.747655, 0, 1.0};
Point(56) = {0.004164, 0.747832, 0, 1.0};
Point(57) = {0.010666, 0.747990, 0, 1.0};
Point(58) = {0.017156, 0.748134, 0, 1.0};
Point(59) = {0.023594, 0.748273, 0, 1.0};
Point(60) = {0.029934, 0.748413, 0, 1.0};
Point(61) = {0.036134, 0.748559, 0, 1.0};
Point(62) = {0.042144, 0.748716, 0, 1.0};
Point(63) = {0.047924, 0.748883, 0, 1.0};
Point(64) = {0.053429, 0.749063, 0, 1.0};
Point(65) = {0.058616, 0.749252, 0, 1.0};
Point(66) = {0.063446, 0.749449, 0, 1.0};
Point(67) = {0.067881, 0.749648, 0, 1.0};
Point(68) = {0.071891, 0.749843, 0, 1.0};
Point(69) = {0.074861, 0.750000, 0, 1.0};
Point(70) = {-0.074962, -0.748477, 0, 1.0};
Point(71) = {-0.072583, -0.747912, 0, 1.0};
Point(72) = {-0.068881, -0.747032, 0, 1.0};
Point(73) = {-0.064823, -0.746077, 0, 1.0};
Point(74) = {-0.060440, -0.745067, 0, 1.0};
Point(75) = {-0.055760, -0.744020, 0, 1.0};
Point(76) = {-0.050806, -0.742952, 0, 1.0};
Point(77) = {-0.045606, -0.741878, 0, 1.0};
Point(78) = {-0.040187, -0.740808, 0, 1.0};
Point(79) = {-0.034583, -0.739749, 0, 1.0};
Point(80) = {-0.028830, -0.738709, 0, 1.0};
Point(81) = {-0.022962, -0.737704, 0, 1.0};
Point(82) = {-0.017013, -0.736745, 0, 1.0};
Point(83) = {-0.011024, -0.735839, 0, 1.0};
Point(84) = {-0.005023, -0.735004, 0, 1.0};
Point(85) = {0.000955, -0.734241, 0, 1.0};
Point(86) = {0.006872, -0.733566, 0, 1.0};
Point(87) = {0.012701, -0.732986, 0, 1.0};
Point(88) = {0.018408, -0.732504, 0, 1.0};
Point(89) = {0.023964, -0.732132, 0, 1.0};
Point(90) = {0.029342, -0.731874, 0, 1.0};
Point(91) = {0.034511, -0.731731, 0, 1.0};
Point(92) = {0.039448, -0.731709, 0, 1.0};
Point(93) = {0.044135, -0.731803, 0, 1.0};
Point(94) = {0.048543, -0.732017, 0, 1.0};
Point(95) = {0.052656, -0.732350, 0, 1.0};
Point(96) = {0.056459, -0.732788, 0, 1.0};
Point(97) = {0.059932, -0.733334, 0, 1.0};
Point(98) = {0.063068, -0.733977, 0, 1.0};
Point(99) = {0.065851, -0.734701, 0, 1.0};
Point(100) = {0.068271, -0.735501, 0, 1.0};
Point(101) = {0.070331, -0.736354, 0, 1.0};
Point(102) = {0.072016, -0.737234, 0, 1.0};
Point(103) = {0.073313, -0.738126, 0, 1.0};
Point(104) = {0.074227, -0.739000, 0, 1.0};
Point(105) = {0.074749, -0.739818, 0, 1.0};
Point(106) = {0.074836, -0.740463, 0, 1.0};
Point(107) = {0.074350, -0.741008, 0, 1.0};
Point(108) = {0.073291, -0.741601, 0, 1.0};
Point(109) = {0.071758, -0.742203, 0, 1.0};
Point(110) = {0.069763, -0.742781, 0, 1.0};
Point(111) = {0.067304, -0.743324, 0, 1.0};
Point(112) = {0.064391, -0.743836, 0, 1.0};
Point(113) = {0.061044, -0.744320, 0, 1.0};
Point(114) = {0.057278, -0.744770, 0, 1.0};
Point(115) = {0.053114, -0.745185, 0, 1.0};
Point(116) = {0.048573, -0.745567, 0, 1.0};
Point(117) = {0.043682, -0.745917, 0, 1.0};
Point(118) = {0.038470, -0.746237, 0, 1.0};
Point(119) = {0.032966, -0.746528, 0, 1.0};
Point(120) = {0.027204, -0.746794, 0, 1.0};
Point(121) = {0.021220, -0.747036, 0, 1.0};
Point(122) = {0.015050, -0.747258, 0, 1.0};
Point(123) = {0.008735, -0.747464, 0, 1.0};
Point(124) = {0.002316, -0.747655, 0, 1.0};
Point(125) = {-0.004164, -0.747832, 0, 1.0};
Point(126) = {-0.010666, -0.747990, 0, 1.0};
Point(127) = {-0.017156, -0.748134, 0, 1.0};
Point(128) = {-0.023594, -0.748273, 0, 1.0};
Point(129) = {-0.029934, -0.748413, 0, 1.0};
Point(130) = {-0.036134, -0.748559, 0, 1.0};
Point(131) = {-0.042144, -0.748716, 0, 1.0};
Point(132) = {-0.047924, -0.748883, 0, 1.0};
Point(133) = {-0.053429, -0.749063, 0, 1.0};
Point(134) = {-0.058616, -0.749252, 0, 1.0};
Point(135) = {-0.063446, -0.749449, 0, 1.0};
Point(136) = {-0.067881, -0.749648, 0, 1.0};
Point(137) = {-0.071891, -0.749843, 0, 1.0};
Point(138) = {-0.074861, -0.750000, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:22};
Spline(2) = {22:50};
Spline(3) = {50:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:91};
Spline(6) = {91:119};
Spline(7) = {119:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html