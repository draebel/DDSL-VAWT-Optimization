SetFactory("OpenCASCADE");

Point(1) = {0.074885, 0.748511, 0, 1.0};
Point(2) = {0.071897, 0.747795, 0, 1.0};
Point(3) = {0.067981, 0.746867, 0, 1.0};
Point(4) = {0.064063, 0.745955, 0, 1.0};
Point(5) = {0.060145, 0.745059, 0, 1.0};
Point(6) = {0.056225, 0.744178, 0, 1.0};
Point(7) = {0.052304, 0.743318, 0, 1.0};
Point(8) = {0.048382, 0.742478, 0, 1.0};
Point(9) = {0.044457, 0.741657, 0, 1.0};
Point(10) = {0.040532, 0.740858, 0, 1.0};
Point(11) = {0.036604, 0.740077, 0, 1.0};
Point(12) = {0.032676, 0.739318, 0, 1.0};
Point(13) = {0.028746, 0.738581, 0, 1.0};
Point(14) = {0.020882, 0.737171, 0, 1.0};
Point(15) = {0.013011, 0.735853, 0, 1.0};
Point(16) = {0.005133, 0.734632, 0, 1.0};
Point(17) = {-0.002753, 0.733519, 0, 1.0};
Point(18) = {-0.010647, 0.732527, 0, 1.0};
Point(19) = {-0.018552, 0.731674, 0, 1.0};
Point(20) = {-0.026468, 0.730991, 0, 1.0};
Point(21) = {-0.030430, 0.730724, 0, 1.0};
Point(22) = {-0.034399, 0.730517, 0, 1.0};
Point(23) = {-0.038372, 0.730380, 0, 1.0};
Point(24) = {-0.042349, 0.730322, 0, 1.0};
Point(25) = {-0.046334, 0.730358, 0, 1.0};
Point(26) = {-0.050328, 0.730509, 0, 1.0};
Point(27) = {-0.054331, 0.730805, 0, 1.0};
Point(28) = {-0.058346, 0.731281, 0, 1.0};
Point(29) = {-0.062380, 0.732003, 0, 1.0};
Point(30) = {-0.066439, 0.733060, 0, 1.0};
Point(31) = {-0.068889, 0.733910, 0, 1.0};
Point(32) = {-0.070531, 0.734608, 0, 1.0};
Point(33) = {-0.071356, 0.735010, 0, 1.0};
Point(34) = {-0.072184, 0.735466, 0, 1.0};
Point(35) = {-0.072602, 0.735718, 0, 1.0};
Point(36) = {-0.073019, 0.735992, 0, 1.0};
Point(37) = {-0.073439, 0.736300, 0, 1.0};
Point(38) = {-0.073863, 0.736656, 0, 1.0};
Point(39) = {-0.074034, 0.736820, 0, 1.0};
Point(40) = {-0.074205, 0.737002, 0, 1.0};
Point(41) = {-0.074293, 0.737103, 0, 1.0};
Point(42) = {-0.074379, 0.737213, 0, 1.0};
Point(43) = {-0.074467, 0.737336, 0, 1.0};
Point(44) = {-0.074559, 0.737479, 0, 1.0};
Point(45) = {-0.074650, 0.737663, 0, 1.0};
Point(46) = {-0.074760, 0.738077, 0, 1.0};
Point(47) = {-0.074707, 0.738457, 0, 1.0};
Point(48) = {-0.074638, 0.738603, 0, 1.0};
Point(49) = {-0.074565, 0.738711, 0, 1.0};
Point(50) = {-0.074492, 0.738798, 0, 1.0};
Point(51) = {-0.074419, 0.738874, 0, 1.0};
Point(52) = {-0.074343, 0.738939, 0, 1.0};
Point(53) = {-0.074192, 0.739051, 0, 1.0};
Point(54) = {-0.074039, 0.739145, 0, 1.0};
Point(55) = {-0.073653, 0.739327, 0, 1.0};
Point(56) = {-0.073266, 0.739465, 0, 1.0};
Point(57) = {-0.072874, 0.739575, 0, 1.0};
Point(58) = {-0.072483, 0.739662, 0, 1.0};
Point(59) = {-0.071696, 0.739794, 0, 1.0};
Point(60) = {-0.070905, 0.739883, 0, 1.0};
Point(61) = {-0.069321, 0.739984, 0, 1.0};
Point(62) = {-0.066933, 0.740031, 0, 1.0};
Point(63) = {-0.062948, 0.739991, 0, 1.0};
Point(64) = {-0.058962, 0.739928, 0, 1.0};
Point(65) = {-0.054977, 0.739887, 0, 1.0};
Point(66) = {-0.050995, 0.739887, 0, 1.0};
Point(67) = {-0.047014, 0.739929, 0, 1.0};
Point(68) = {-0.043039, 0.740010, 0, 1.0};
Point(69) = {-0.039065, 0.740130, 0, 1.0};
Point(70) = {-0.035093, 0.740283, 0, 1.0};
Point(71) = {-0.031123, 0.740466, 0, 1.0};
Point(72) = {-0.027156, 0.740678, 0, 1.0};
Point(73) = {-0.019227, 0.741174, 0, 1.0};
Point(74) = {-0.011303, 0.741751, 0, 1.0};
Point(75) = {-0.003383, 0.742386, 0, 1.0};
Point(76) = {0.004533, 0.743065, 0, 1.0};
Point(77) = {0.012449, 0.743767, 0, 1.0};
Point(78) = {0.020361, 0.744493, 0, 1.0};
Point(79) = {0.028273, 0.745241, 0, 1.0};
Point(80) = {0.032228, 0.745622, 0, 1.0};
Point(81) = {0.036182, 0.746010, 0, 1.0};
Point(82) = {0.040138, 0.746402, 0, 1.0};
Point(83) = {0.044091, 0.746801, 0, 1.0};
Point(84) = {0.048045, 0.747203, 0, 1.0};
Point(85) = {0.051998, 0.747608, 0, 1.0};
Point(86) = {0.055952, 0.748017, 0, 1.0};
Point(87) = {0.059904, 0.748430, 0, 1.0};
Point(88) = {0.063858, 0.748846, 0, 1.0};
Point(89) = {0.067811, 0.749264, 0, 1.0};
Point(90) = {0.071763, 0.749683, 0, 1.0};
Point(91) = {0.074766, 0.750000, 0, 1.0};
Point(92) = {-0.074885, -0.748511, 0, 1.0};
Point(93) = {-0.071897, -0.747795, 0, 1.0};
Point(94) = {-0.067981, -0.746867, 0, 1.0};
Point(95) = {-0.064063, -0.745955, 0, 1.0};
Point(96) = {-0.060145, -0.745059, 0, 1.0};
Point(97) = {-0.056225, -0.744178, 0, 1.0};
Point(98) = {-0.052304, -0.743318, 0, 1.0};
Point(99) = {-0.048382, -0.742478, 0, 1.0};
Point(100) = {-0.044457, -0.741657, 0, 1.0};
Point(101) = {-0.040532, -0.740858, 0, 1.0};
Point(102) = {-0.036604, -0.740077, 0, 1.0};
Point(103) = {-0.032676, -0.739318, 0, 1.0};
Point(104) = {-0.028746, -0.738581, 0, 1.0};
Point(105) = {-0.020882, -0.737171, 0, 1.0};
Point(106) = {-0.013011, -0.735853, 0, 1.0};
Point(107) = {-0.005133, -0.734632, 0, 1.0};
Point(108) = {0.002753, -0.733519, 0, 1.0};
Point(109) = {0.010647, -0.732527, 0, 1.0};
Point(110) = {0.018552, -0.731674, 0, 1.0};
Point(111) = {0.026468, -0.730991, 0, 1.0};
Point(112) = {0.030430, -0.730724, 0, 1.0};
Point(113) = {0.034399, -0.730517, 0, 1.0};
Point(114) = {0.038372, -0.730380, 0, 1.0};
Point(115) = {0.042349, -0.730322, 0, 1.0};
Point(116) = {0.046334, -0.730358, 0, 1.0};
Point(117) = {0.050328, -0.730509, 0, 1.0};
Point(118) = {0.054331, -0.730805, 0, 1.0};
Point(119) = {0.058346, -0.731281, 0, 1.0};
Point(120) = {0.062380, -0.732003, 0, 1.0};
Point(121) = {0.066439, -0.733060, 0, 1.0};
Point(122) = {0.068889, -0.733910, 0, 1.0};
Point(123) = {0.070531, -0.734608, 0, 1.0};
Point(124) = {0.071356, -0.735010, 0, 1.0};
Point(125) = {0.072184, -0.735466, 0, 1.0};
Point(126) = {0.072602, -0.735718, 0, 1.0};
Point(127) = {0.073019, -0.735992, 0, 1.0};
Point(128) = {0.073439, -0.736300, 0, 1.0};
Point(129) = {0.073863, -0.736656, 0, 1.0};
Point(130) = {0.074034, -0.736820, 0, 1.0};
Point(131) = {0.074205, -0.737002, 0, 1.0};
Point(132) = {0.074293, -0.737103, 0, 1.0};
Point(133) = {0.074379, -0.737213, 0, 1.0};
Point(134) = {0.074467, -0.737336, 0, 1.0};
Point(135) = {0.074559, -0.737479, 0, 1.0};
Point(136) = {0.074650, -0.737663, 0, 1.0};
Point(137) = {0.074760, -0.738077, 0, 1.0};
Point(138) = {0.074707, -0.738457, 0, 1.0};
Point(139) = {0.074638, -0.738603, 0, 1.0};
Point(140) = {0.074565, -0.738711, 0, 1.0};
Point(141) = {0.074492, -0.738798, 0, 1.0};
Point(142) = {0.074419, -0.738874, 0, 1.0};
Point(143) = {0.074343, -0.738939, 0, 1.0};
Point(144) = {0.074192, -0.739051, 0, 1.0};
Point(145) = {0.074039, -0.739145, 0, 1.0};
Point(146) = {0.073653, -0.739327, 0, 1.0};
Point(147) = {0.073266, -0.739465, 0, 1.0};
Point(148) = {0.072874, -0.739575, 0, 1.0};
Point(149) = {0.072483, -0.739662, 0, 1.0};
Point(150) = {0.071696, -0.739794, 0, 1.0};
Point(151) = {0.070905, -0.739883, 0, 1.0};
Point(152) = {0.069321, -0.739984, 0, 1.0};
Point(153) = {0.066933, -0.740031, 0, 1.0};
Point(154) = {0.062948, -0.739991, 0, 1.0};
Point(155) = {0.058962, -0.739928, 0, 1.0};
Point(156) = {0.054977, -0.739887, 0, 1.0};
Point(157) = {0.050995, -0.739887, 0, 1.0};
Point(158) = {0.047014, -0.739929, 0, 1.0};
Point(159) = {0.043039, -0.740010, 0, 1.0};
Point(160) = {0.039065, -0.740130, 0, 1.0};
Point(161) = {0.035093, -0.740283, 0, 1.0};
Point(162) = {0.031123, -0.740466, 0, 1.0};
Point(163) = {0.027156, -0.740678, 0, 1.0};
Point(164) = {0.019227, -0.741174, 0, 1.0};
Point(165) = {0.011303, -0.741751, 0, 1.0};
Point(166) = {0.003383, -0.742386, 0, 1.0};
Point(167) = {-0.004533, -0.743065, 0, 1.0};
Point(168) = {-0.012449, -0.743767, 0, 1.0};
Point(169) = {-0.020361, -0.744493, 0, 1.0};
Point(170) = {-0.028273, -0.745241, 0, 1.0};
Point(171) = {-0.032228, -0.745622, 0, 1.0};
Point(172) = {-0.036182, -0.746010, 0, 1.0};
Point(173) = {-0.040138, -0.746402, 0, 1.0};
Point(174) = {-0.044091, -0.746801, 0, 1.0};
Point(175) = {-0.048045, -0.747203, 0, 1.0};
Point(176) = {-0.051998, -0.747608, 0, 1.0};
Point(177) = {-0.055952, -0.748017, 0, 1.0};
Point(178) = {-0.059904, -0.748430, 0, 1.0};
Point(179) = {-0.063858, -0.748846, 0, 1.0};
Point(180) = {-0.067811, -0.749264, 0, 1.0};
Point(181) = {-0.071763, -0.749683, 0, 1.0};
Point(182) = {-0.074766, -0.750000, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:70};
Spline(3) = {70:91};
Spline(4) = {91,1};

// Lines: second blade (splines 5-8)
Spline(5) = {92:112};
Spline(6) = {112:161};
Spline(7) = {161:182};
Spline(8) = {182,92};

// Outer domain (points 20001-4 and lines)
Point(183) = {-13.50000000, -15.00000000, 0, 1.0};
Point(184) = {-13.50000000, 15.00000000, 0, 1.0};
Point(185) = {13.50000000, 15.00000000, 0, 1.0};
Point(186) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {183, 184};
Line(12) = {184, 185};
Line(13) = {185, 186};
Line(14) = {183, 186};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html