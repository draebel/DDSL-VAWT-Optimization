SetFactory("OpenCASCADE");

Point(1) = {0.074973, 0.745029, 0, 1.0};
Point(2) = {0.071931, 0.744594, 0, 1.0};
Point(3) = {0.067946, 0.744034, 0, 1.0};
Point(4) = {0.063960, 0.743490, 0, 1.0};
Point(5) = {0.059975, 0.742962, 0, 1.0};
Point(6) = {0.055991, 0.742450, 0, 1.0};
Point(7) = {0.052007, 0.741959, 0, 1.0};
Point(8) = {0.048023, 0.741487, 0, 1.0};
Point(9) = {0.044040, 0.741035, 0, 1.0};
Point(10) = {0.040056, 0.740604, 0, 1.0};
Point(11) = {0.036073, 0.740192, 0, 1.0};
Point(12) = {0.032092, 0.739802, 0, 1.0};
Point(13) = {0.028110, 0.739433, 0, 1.0};
Point(14) = {0.020149, 0.738762, 0, 1.0};
Point(15) = {0.012189, 0.738181, 0, 1.0};
Point(16) = {0.004232, 0.737699, 0, 1.0};
Point(17) = {-0.003723, 0.737324, 0, 1.0};
Point(18) = {-0.011675, 0.737071, 0, 1.0};
Point(19) = {-0.019625, 0.736957, 0, 1.0};
Point(20) = {-0.027570, 0.737013, 0, 1.0};
Point(21) = {-0.031540, 0.737116, 0, 1.0};
Point(22) = {-0.035511, 0.737279, 0, 1.0};
Point(23) = {-0.039479, 0.737512, 0, 1.0};
Point(24) = {-0.043445, 0.737825, 0, 1.0};
Point(25) = {-0.047409, 0.738231, 0, 1.0};
Point(26) = {-0.051372, 0.738753, 0, 1.0};
Point(27) = {-0.055330, 0.739420, 0, 1.0};
Point(28) = {-0.059284, 0.740268, 0, 1.0};
Point(29) = {-0.063233, 0.741362, 0, 1.0};
Point(30) = {-0.067176, 0.742791, 0, 1.0};
Point(31) = {-0.069536, 0.743866, 0, 1.0};
Point(32) = {-0.071106, 0.744713, 0, 1.0};
Point(33) = {-0.071890, 0.745190, 0, 1.0};
Point(34) = {-0.072672, 0.745722, 0, 1.0};
Point(35) = {-0.073064, 0.746011, 0, 1.0};
Point(36) = {-0.073454, 0.746323, 0, 1.0};
Point(37) = {-0.073844, 0.746668, 0, 1.0};
Point(38) = {-0.074233, 0.747063, 0, 1.0};
Point(39) = {-0.074388, 0.747241, 0, 1.0};
Point(40) = {-0.074541, 0.747439, 0, 1.0};
Point(41) = {-0.074619, 0.747548, 0, 1.0};
Point(42) = {-0.074695, 0.747665, 0, 1.0};
Point(43) = {-0.074772, 0.747796, 0, 1.0};
Point(44) = {-0.074849, 0.747946, 0, 1.0};
Point(45) = {-0.074923, 0.748138, 0, 1.0};
Point(46) = {-0.074994, 0.748560, 0, 1.0};
Point(47) = {-0.074906, 0.748934, 0, 1.0};
Point(48) = {-0.074823, 0.749073, 0, 1.0};
Point(49) = {-0.074741, 0.749173, 0, 1.0};
Point(50) = {-0.074660, 0.749253, 0, 1.0};
Point(51) = {-0.074580, 0.749322, 0, 1.0};
Point(52) = {-0.074498, 0.749380, 0, 1.0};
Point(53) = {-0.074338, 0.749478, 0, 1.0};
Point(54) = {-0.074176, 0.749557, 0, 1.0};
Point(55) = {-0.073776, 0.749703, 0, 1.0};
Point(56) = {-0.073377, 0.749804, 0, 1.0};
Point(57) = {-0.072977, 0.749877, 0, 1.0};
Point(58) = {-0.072579, 0.749927, 0, 1.0};
Point(59) = {-0.071784, 0.749985, 0, 1.0};
Point(60) = {-0.070988, 0.750000, 0, 1.0};
Point(61) = {-0.069401, 0.749954, 0, 1.0};
Point(62) = {-0.067019, 0.749778, 0, 1.0};
Point(63) = {-0.063055, 0.749367, 0, 1.0};
Point(64) = {-0.059093, 0.748934, 0, 1.0};
Point(65) = {-0.055128, 0.748523, 0, 1.0};
Point(66) = {-0.051163, 0.748152, 0, 1.0};
Point(67) = {-0.047196, 0.747823, 0, 1.0};
Point(68) = {-0.043231, 0.747535, 0, 1.0};
Point(69) = {-0.039263, 0.747284, 0, 1.0};
Point(70) = {-0.035294, 0.747067, 0, 1.0};
Point(71) = {-0.031324, 0.746880, 0, 1.0};
Point(72) = {-0.027355, 0.746722, 0, 1.0};
Point(73) = {-0.019414, 0.746478, 0, 1.0};
Point(74) = {-0.011470, 0.746315, 0, 1.0};
Point(75) = {-0.003526, 0.746211, 0, 1.0};
Point(76) = {0.004419, 0.746150, 0, 1.0};
Point(77) = {0.012366, 0.746113, 0, 1.0};
Point(78) = {0.020312, 0.746100, 0, 1.0};
Point(79) = {0.028259, 0.746109, 0, 1.0};
Point(80) = {0.032232, 0.746120, 0, 1.0};
Point(81) = {0.036205, 0.746138, 0, 1.0};
Point(82) = {0.040180, 0.746161, 0, 1.0};
Point(83) = {0.044153, 0.746190, 0, 1.0};
Point(84) = {0.048128, 0.746222, 0, 1.0};
Point(85) = {0.052101, 0.746258, 0, 1.0};
Point(86) = {0.056076, 0.746298, 0, 1.0};
Point(87) = {0.060050, 0.746341, 0, 1.0};
Point(88) = {0.064025, 0.746388, 0, 1.0};
Point(89) = {0.068000, 0.746436, 0, 1.0};
Point(90) = {0.071973, 0.746486, 0, 1.0};
Point(91) = {0.074993, 0.746522, 0, 1.0};
Point(92) = {-0.074973, -0.745029, 0, 1.0};
Point(93) = {-0.071931, -0.744594, 0, 1.0};
Point(94) = {-0.067946, -0.744034, 0, 1.0};
Point(95) = {-0.063960, -0.743490, 0, 1.0};
Point(96) = {-0.059975, -0.742962, 0, 1.0};
Point(97) = {-0.055991, -0.742450, 0, 1.0};
Point(98) = {-0.052007, -0.741959, 0, 1.0};
Point(99) = {-0.048023, -0.741487, 0, 1.0};
Point(100) = {-0.044040, -0.741035, 0, 1.0};
Point(101) = {-0.040056, -0.740604, 0, 1.0};
Point(102) = {-0.036073, -0.740192, 0, 1.0};
Point(103) = {-0.032092, -0.739802, 0, 1.0};
Point(104) = {-0.028110, -0.739433, 0, 1.0};
Point(105) = {-0.020149, -0.738762, 0, 1.0};
Point(106) = {-0.012189, -0.738181, 0, 1.0};
Point(107) = {-0.004232, -0.737699, 0, 1.0};
Point(108) = {0.003723, -0.737324, 0, 1.0};
Point(109) = {0.011675, -0.737071, 0, 1.0};
Point(110) = {0.019625, -0.736957, 0, 1.0};
Point(111) = {0.027570, -0.737013, 0, 1.0};
Point(112) = {0.031540, -0.737116, 0, 1.0};
Point(113) = {0.035511, -0.737279, 0, 1.0};
Point(114) = {0.039479, -0.737512, 0, 1.0};
Point(115) = {0.043445, -0.737825, 0, 1.0};
Point(116) = {0.047409, -0.738231, 0, 1.0};
Point(117) = {0.051372, -0.738753, 0, 1.0};
Point(118) = {0.055330, -0.739420, 0, 1.0};
Point(119) = {0.059284, -0.740268, 0, 1.0};
Point(120) = {0.063233, -0.741362, 0, 1.0};
Point(121) = {0.067176, -0.742791, 0, 1.0};
Point(122) = {0.069536, -0.743866, 0, 1.0};
Point(123) = {0.071106, -0.744713, 0, 1.0};
Point(124) = {0.071890, -0.745190, 0, 1.0};
Point(125) = {0.072672, -0.745722, 0, 1.0};
Point(126) = {0.073064, -0.746011, 0, 1.0};
Point(127) = {0.073454, -0.746323, 0, 1.0};
Point(128) = {0.073844, -0.746668, 0, 1.0};
Point(129) = {0.074233, -0.747063, 0, 1.0};
Point(130) = {0.074388, -0.747241, 0, 1.0};
Point(131) = {0.074541, -0.747439, 0, 1.0};
Point(132) = {0.074619, -0.747548, 0, 1.0};
Point(133) = {0.074695, -0.747665, 0, 1.0};
Point(134) = {0.074772, -0.747796, 0, 1.0};
Point(135) = {0.074849, -0.747946, 0, 1.0};
Point(136) = {0.074923, -0.748138, 0, 1.0};
Point(137) = {0.074994, -0.748560, 0, 1.0};
Point(138) = {0.074906, -0.748934, 0, 1.0};
Point(139) = {0.074823, -0.749073, 0, 1.0};
Point(140) = {0.074741, -0.749173, 0, 1.0};
Point(141) = {0.074660, -0.749253, 0, 1.0};
Point(142) = {0.074580, -0.749322, 0, 1.0};
Point(143) = {0.074498, -0.749380, 0, 1.0};
Point(144) = {0.074338, -0.749478, 0, 1.0};
Point(145) = {0.074176, -0.749557, 0, 1.0};
Point(146) = {0.073776, -0.749703, 0, 1.0};
Point(147) = {0.073377, -0.749804, 0, 1.0};
Point(148) = {0.072977, -0.749877, 0, 1.0};
Point(149) = {0.072579, -0.749927, 0, 1.0};
Point(150) = {0.071784, -0.749985, 0, 1.0};
Point(151) = {0.070988, -0.750000, 0, 1.0};
Point(152) = {0.069401, -0.749954, 0, 1.0};
Point(153) = {0.067019, -0.749778, 0, 1.0};
Point(154) = {0.063055, -0.749367, 0, 1.0};
Point(155) = {0.059093, -0.748934, 0, 1.0};
Point(156) = {0.055128, -0.748523, 0, 1.0};
Point(157) = {0.051163, -0.748152, 0, 1.0};
Point(158) = {0.047196, -0.747823, 0, 1.0};
Point(159) = {0.043231, -0.747535, 0, 1.0};
Point(160) = {0.039263, -0.747284, 0, 1.0};
Point(161) = {0.035294, -0.747067, 0, 1.0};
Point(162) = {0.031324, -0.746880, 0, 1.0};
Point(163) = {0.027355, -0.746722, 0, 1.0};
Point(164) = {0.019414, -0.746478, 0, 1.0};
Point(165) = {0.011470, -0.746315, 0, 1.0};
Point(166) = {0.003526, -0.746211, 0, 1.0};
Point(167) = {-0.004419, -0.746150, 0, 1.0};
Point(168) = {-0.012366, -0.746113, 0, 1.0};
Point(169) = {-0.020312, -0.746100, 0, 1.0};
Point(170) = {-0.028259, -0.746109, 0, 1.0};
Point(171) = {-0.032232, -0.746120, 0, 1.0};
Point(172) = {-0.036205, -0.746138, 0, 1.0};
Point(173) = {-0.040180, -0.746161, 0, 1.0};
Point(174) = {-0.044153, -0.746190, 0, 1.0};
Point(175) = {-0.048128, -0.746222, 0, 1.0};
Point(176) = {-0.052101, -0.746258, 0, 1.0};
Point(177) = {-0.056076, -0.746298, 0, 1.0};
Point(178) = {-0.060050, -0.746341, 0, 1.0};
Point(179) = {-0.064025, -0.746388, 0, 1.0};
Point(180) = {-0.068000, -0.746436, 0, 1.0};
Point(181) = {-0.071973, -0.746486, 0, 1.0};
Point(182) = {-0.074993, -0.746522, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:21};
Spline(2) = {21:70};
Spline(3) = {70:91};
Spline(4) = {91,1};

// Lines: second blade (splines 5-8)
Spline(5) = {92:112};
Spline(6) = {112:161};
Spline(7) = {161:182};
Spline(8) = {182,92};

// Outer domain (points 20001-4 and lines)
Point(183) = {-13.50000000, -15.00000000, 0, 1.0};
Point(184) = {-13.50000000, 15.00000000, 0, 1.0};
Point(185) = {13.50000000, 15.00000000, 0, 1.0};
Point(186) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {183, 184};
Line(12) = {184, 185};
Line(13) = {185, 186};
Line(14) = {183, 186};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html