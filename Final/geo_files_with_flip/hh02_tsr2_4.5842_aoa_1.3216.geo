SetFactory("OpenCASCADE");

Point(1) = {0.074989, 0.742954, 0, 1.0};
Point(2) = {0.069415, 0.741890, 0, 1.0};
Point(3) = {0.060883, 0.740463, 0, 1.0};
Point(4) = {0.052350, 0.739016, 0, 1.0};
Point(5) = {0.043818, 0.737613, 0, 1.0};
Point(6) = {0.035291, 0.736399, 0, 1.0};
Point(7) = {0.026768, 0.735377, 0, 1.0};
Point(8) = {0.018249, 0.734532, 0, 1.0};
Point(9) = {0.009734, 0.733871, 0, 1.0};
Point(10) = {0.001224, 0.733417, 0, 1.0};
Point(11) = {-0.007281, 0.733189, 0, 1.0};
Point(12) = {-0.015780, 0.733199, 0, 1.0};
Point(13) = {-0.024274, 0.733415, 0, 1.0};
Point(14) = {-0.032764, 0.733832, 0, 1.0};
Point(15) = {-0.041248, 0.734503, 0, 1.0};
Point(16) = {-0.049724, 0.735549, 0, 1.0};
Point(17) = {-0.053957, 0.736259, 0, 1.0};
Point(18) = {-0.058187, 0.737131, 0, 1.0};
Point(19) = {-0.061567, 0.737990, 0, 1.0};
Point(20) = {-0.064099, 0.738755, 0, 1.0};
Point(21) = {-0.066628, 0.739658, 0, 1.0};
Point(22) = {-0.069152, 0.740755, 0, 1.0};
Point(23) = {-0.070832, 0.741641, 0, 1.0};
Point(24) = {-0.071670, 0.742160, 0, 1.0};
Point(25) = {-0.072339, 0.742620, 0, 1.0};
Point(26) = {-0.072924, 0.743072, 0, 1.0};
Point(27) = {-0.073340, 0.743434, 0, 1.0};
Point(28) = {-0.073673, 0.743753, 0, 1.0};
Point(29) = {-0.073922, 0.744015, 0, 1.0};
Point(30) = {-0.074170, 0.744305, 0, 1.0};
Point(31) = {-0.074418, 0.744633, 0, 1.0};
Point(32) = {-0.074664, 0.745022, 0, 1.0};
Point(33) = {-0.074826, 0.745347, 0, 1.0};
Point(34) = {-0.074906, 0.745556, 0, 1.0};
Point(35) = {-0.074980, 0.746039, 0, 1.0};
Point(36) = {-0.074884, 0.746519, 0, 1.0};
Point(37) = {-0.074795, 0.746694, 0, 1.0};
Point(38) = {-0.074619, 0.746935, 0, 1.0};
Point(39) = {-0.074359, 0.747185, 0, 1.0};
Point(40) = {-0.074099, 0.747378, 0, 1.0};
Point(41) = {-0.073841, 0.747534, 0, 1.0};
Point(42) = {-0.073583, 0.747669, 0, 1.0};
Point(43) = {-0.073239, 0.747821, 0, 1.0};
Point(44) = {-0.072810, 0.747981, 0, 1.0};
Point(45) = {-0.072211, 0.748168, 0, 1.0};
Point(46) = {-0.071527, 0.748346, 0, 1.0};
Point(47) = {-0.070673, 0.748530, 0, 1.0};
Point(48) = {-0.068966, 0.748814, 0, 1.0};
Point(49) = {-0.066409, 0.749144, 0, 1.0};
Point(50) = {-0.063853, 0.749398, 0, 1.0};
Point(51) = {-0.061299, 0.749592, 0, 1.0};
Point(52) = {-0.057895, 0.749779, 0, 1.0};
Point(53) = {-0.053642, 0.749924, 0, 1.0};
Point(54) = {-0.049390, 0.749996, 0, 1.0};
Point(55) = {-0.040891, 0.750000, 0, 1.0};
Point(56) = {-0.032394, 0.749889, 0, 1.0};
Point(57) = {-0.023899, 0.749678, 0, 1.0};
Point(58) = {-0.015407, 0.749347, 0, 1.0};
Point(59) = {-0.006918, 0.748888, 0, 1.0};
Point(60) = {0.001568, 0.748313, 0, 1.0};
Point(61) = {0.010052, 0.747653, 0, 1.0};
Point(62) = {0.018535, 0.746936, 0, 1.0};
Point(63) = {0.027018, 0.746205, 0, 1.0};
Point(64) = {0.035501, 0.745489, 0, 1.0};
Point(65) = {0.043987, 0.744912, 0, 1.0};
Point(66) = {0.052478, 0.744545, 0, 1.0};
Point(67) = {0.060974, 0.744413, 0, 1.0};
Point(68) = {0.069473, 0.744379, 0, 1.0};
Point(69) = {0.075023, 0.744436, 0, 1.0};
Point(70) = {-0.074989, -0.742954, 0, 1.0};
Point(71) = {-0.069415, -0.741890, 0, 1.0};
Point(72) = {-0.060883, -0.740463, 0, 1.0};
Point(73) = {-0.052350, -0.739016, 0, 1.0};
Point(74) = {-0.043818, -0.737613, 0, 1.0};
Point(75) = {-0.035291, -0.736399, 0, 1.0};
Point(76) = {-0.026768, -0.735377, 0, 1.0};
Point(77) = {-0.018249, -0.734532, 0, 1.0};
Point(78) = {-0.009734, -0.733871, 0, 1.0};
Point(79) = {-0.001224, -0.733417, 0, 1.0};
Point(80) = {0.007281, -0.733189, 0, 1.0};
Point(81) = {0.015780, -0.733199, 0, 1.0};
Point(82) = {0.024274, -0.733415, 0, 1.0};
Point(83) = {0.032764, -0.733832, 0, 1.0};
Point(84) = {0.041248, -0.734503, 0, 1.0};
Point(85) = {0.049724, -0.735549, 0, 1.0};
Point(86) = {0.053957, -0.736259, 0, 1.0};
Point(87) = {0.058187, -0.737131, 0, 1.0};
Point(88) = {0.061567, -0.737990, 0, 1.0};
Point(89) = {0.064099, -0.738755, 0, 1.0};
Point(90) = {0.066628, -0.739658, 0, 1.0};
Point(91) = {0.069152, -0.740755, 0, 1.0};
Point(92) = {0.070832, -0.741641, 0, 1.0};
Point(93) = {0.071670, -0.742160, 0, 1.0};
Point(94) = {0.072339, -0.742620, 0, 1.0};
Point(95) = {0.072924, -0.743072, 0, 1.0};
Point(96) = {0.073340, -0.743434, 0, 1.0};
Point(97) = {0.073673, -0.743753, 0, 1.0};
Point(98) = {0.073922, -0.744015, 0, 1.0};
Point(99) = {0.074170, -0.744305, 0, 1.0};
Point(100) = {0.074418, -0.744633, 0, 1.0};
Point(101) = {0.074664, -0.745022, 0, 1.0};
Point(102) = {0.074826, -0.745347, 0, 1.0};
Point(103) = {0.074906, -0.745556, 0, 1.0};
Point(104) = {0.074980, -0.746039, 0, 1.0};
Point(105) = {0.074884, -0.746519, 0, 1.0};
Point(106) = {0.074795, -0.746694, 0, 1.0};
Point(107) = {0.074619, -0.746935, 0, 1.0};
Point(108) = {0.074359, -0.747185, 0, 1.0};
Point(109) = {0.074099, -0.747378, 0, 1.0};
Point(110) = {0.073841, -0.747534, 0, 1.0};
Point(111) = {0.073583, -0.747669, 0, 1.0};
Point(112) = {0.073239, -0.747821, 0, 1.0};
Point(113) = {0.072810, -0.747981, 0, 1.0};
Point(114) = {0.072211, -0.748168, 0, 1.0};
Point(115) = {0.071527, -0.748346, 0, 1.0};
Point(116) = {0.070673, -0.748530, 0, 1.0};
Point(117) = {0.068966, -0.748814, 0, 1.0};
Point(118) = {0.066409, -0.749144, 0, 1.0};
Point(119) = {0.063853, -0.749398, 0, 1.0};
Point(120) = {0.061299, -0.749592, 0, 1.0};
Point(121) = {0.057895, -0.749779, 0, 1.0};
Point(122) = {0.053642, -0.749924, 0, 1.0};
Point(123) = {0.049390, -0.749996, 0, 1.0};
Point(124) = {0.040891, -0.750000, 0, 1.0};
Point(125) = {0.032394, -0.749889, 0, 1.0};
Point(126) = {0.023899, -0.749678, 0, 1.0};
Point(127) = {0.015407, -0.749347, 0, 1.0};
Point(128) = {0.006918, -0.748888, 0, 1.0};
Point(129) = {-0.001568, -0.748313, 0, 1.0};
Point(130) = {-0.010052, -0.747653, 0, 1.0};
Point(131) = {-0.018535, -0.746936, 0, 1.0};
Point(132) = {-0.027018, -0.746205, 0, 1.0};
Point(133) = {-0.035501, -0.745489, 0, 1.0};
Point(134) = {-0.043987, -0.744912, 0, 1.0};
Point(135) = {-0.052478, -0.744545, 0, 1.0};
Point(136) = {-0.060974, -0.744413, 0, 1.0};
Point(137) = {-0.069473, -0.744379, 0, 1.0};
Point(138) = {-0.075023, -0.744436, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:14};
Spline(2) = {14:56};
Spline(3) = {56:69};
Spline(4) = {69,1};

// Lines: second blade (splines 5-8)
Spline(5) = {70:83};
Spline(6) = {83:125};
Spline(7) = {125:138};
Spline(8) = {138,70};

// Outer domain (points 20001-4 and lines)
Point(139) = {-13.50000000, -15.00000000, 0, 1.0};
Point(140) = {-13.50000000, 15.00000000, 0, 1.0};
Point(141) = {13.50000000, 15.00000000, 0, 1.0};
Point(142) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {139, 140};
Line(12) = {140, 141};
Line(13) = {141, 142};
Line(14) = {139, 142};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html