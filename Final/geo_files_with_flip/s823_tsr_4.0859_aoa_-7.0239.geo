SetFactory("OpenCASCADE");

Point(1) = {0.074166, 0.745403, 0, 1.0};
Point(2) = {0.073388, 0.745520, 0, 1.0};
Point(3) = {0.069218, 0.746063, 0, 1.0};
Point(4) = {0.064258, 0.746622, 0, 1.0};
Point(5) = {0.058596, 0.747201, 0, 1.0};
Point(6) = {0.052328, 0.747790, 0, 1.0};
Point(7) = {0.045553, 0.748367, 0, 1.0};
Point(8) = {0.038372, 0.748906, 0, 1.0};
Point(9) = {0.030881, 0.749373, 0, 1.0};
Point(10) = {0.023177, 0.749733, 0, 1.0};
Point(11) = {0.015348, 0.749953, 0, 1.0};
Point(12) = {0.007480, 0.750000, 0, 1.0};
Point(13) = {-0.000345, 0.749844, 0, 1.0};
Point(14) = {-0.008055, 0.749459, 0, 1.0};
Point(15) = {-0.015578, 0.748824, 0, 1.0};
Point(16) = {-0.022855, 0.747908, 0, 1.0};
Point(17) = {-0.029870, 0.746720, 0, 1.0};
Point(18) = {-0.036556, 0.745286, 0, 1.0};
Point(19) = {-0.042879, 0.743628, 0, 1.0};
Point(20) = {-0.048780, 0.741791, 0, 1.0};
Point(21) = {-0.054199, 0.739811, 0, 1.0};
Point(22) = {-0.059076, 0.737722, 0, 1.0};
Point(23) = {-0.063365, 0.735556, 0, 1.0};
Point(24) = {-0.067014, 0.733350, 0, 1.0};
Point(25) = {-0.069992, 0.731141, 0, 1.0};
Point(26) = {-0.072254, 0.728981, 0, 1.0};
Point(27) = {-0.073766, 0.726924, 0, 1.0};
Point(28) = {-0.074303, 0.725713, 0, 1.0};
Point(29) = {-0.074408, 0.725272, 0, 1.0};
Point(30) = {-0.074432, 0.725085, 0, 1.0};
Point(31) = {-0.074437, 0.724859, 0, 1.0};
Point(32) = {-0.074363, 0.724445, 0, 1.0};
Point(33) = {-0.074209, 0.724004, 0, 1.0};
Point(34) = {-0.073876, 0.723324, 0, 1.0};
Point(35) = {-0.072376, 0.721199, 0, 1.0};
Point(36) = {-0.070288, 0.718694, 0, 1.0};
Point(37) = {-0.067928, 0.716137, 0, 1.0};
Point(38) = {-0.065287, 0.713720, 0, 1.0};
Point(39) = {-0.062454, 0.711690, 0, 1.0};
Point(40) = {-0.059294, 0.710369, 0, 1.0};
Point(41) = {-0.055454, 0.709690, 0, 1.0};
Point(42) = {-0.050992, 0.709502, 0, 1.0};
Point(43) = {-0.045961, 0.709792, 0, 1.0};
Point(44) = {-0.040395, 0.710553, 0, 1.0};
Point(45) = {-0.034326, 0.711773, 0, 1.0};
Point(46) = {-0.027781, 0.713430, 0, 1.0};
Point(47) = {-0.020795, 0.715488, 0, 1.0};
Point(48) = {-0.013404, 0.717896, 0, 1.0};
Point(49) = {-0.005652, 0.720589, 0, 1.0};
Point(50) = {0.002402, 0.723489, 0, 1.0};
Point(51) = {0.010691, 0.726504, 0, 1.0};
Point(52) = {0.019126, 0.729535, 0, 1.0};
Point(53) = {0.027603, 0.732479, 0, 1.0};
Point(54) = {0.035997, 0.735236, 0, 1.0};
Point(55) = {0.044167, 0.737711, 0, 1.0};
Point(56) = {0.051952, 0.739828, 0, 1.0};
Point(57) = {0.059183, 0.741529, 0, 1.0};
Point(58) = {0.065685, 0.742786, 0, 1.0};
Point(59) = {0.071287, 0.743597, 0, 1.0};
Point(60) = {0.074352, 0.743890, 0, 1.0};
Point(61) = {-0.074166, -0.745403, 0, 1.0};
Point(62) = {-0.073388, -0.745520, 0, 1.0};
Point(63) = {-0.069218, -0.746063, 0, 1.0};
Point(64) = {-0.064258, -0.746622, 0, 1.0};
Point(65) = {-0.058596, -0.747201, 0, 1.0};
Point(66) = {-0.052328, -0.747790, 0, 1.0};
Point(67) = {-0.045553, -0.748367, 0, 1.0};
Point(68) = {-0.038372, -0.748906, 0, 1.0};
Point(69) = {-0.030881, -0.749373, 0, 1.0};
Point(70) = {-0.023177, -0.749733, 0, 1.0};
Point(71) = {-0.015348, -0.749953, 0, 1.0};
Point(72) = {-0.007480, -0.750000, 0, 1.0};
Point(73) = {0.000345, -0.749844, 0, 1.0};
Point(74) = {0.008055, -0.749459, 0, 1.0};
Point(75) = {0.015578, -0.748824, 0, 1.0};
Point(76) = {0.022855, -0.747908, 0, 1.0};
Point(77) = {0.029870, -0.746720, 0, 1.0};
Point(78) = {0.036556, -0.745286, 0, 1.0};
Point(79) = {0.042879, -0.743628, 0, 1.0};
Point(80) = {0.048780, -0.741791, 0, 1.0};
Point(81) = {0.054199, -0.739811, 0, 1.0};
Point(82) = {0.059076, -0.737722, 0, 1.0};
Point(83) = {0.063365, -0.735556, 0, 1.0};
Point(84) = {0.067014, -0.733350, 0, 1.0};
Point(85) = {0.069992, -0.731141, 0, 1.0};
Point(86) = {0.072254, -0.728981, 0, 1.0};
Point(87) = {0.073766, -0.726924, 0, 1.0};
Point(88) = {0.074303, -0.725713, 0, 1.0};
Point(89) = {0.074408, -0.725272, 0, 1.0};
Point(90) = {0.074432, -0.725085, 0, 1.0};
Point(91) = {0.074437, -0.724859, 0, 1.0};
Point(92) = {0.074363, -0.724445, 0, 1.0};
Point(93) = {0.074209, -0.724004, 0, 1.0};
Point(94) = {0.073876, -0.723324, 0, 1.0};
Point(95) = {0.072376, -0.721199, 0, 1.0};
Point(96) = {0.070288, -0.718694, 0, 1.0};
Point(97) = {0.067928, -0.716137, 0, 1.0};
Point(98) = {0.065287, -0.713720, 0, 1.0};
Point(99) = {0.062454, -0.711690, 0, 1.0};
Point(100) = {0.059294, -0.710369, 0, 1.0};
Point(101) = {0.055454, -0.709690, 0, 1.0};
Point(102) = {0.050992, -0.709502, 0, 1.0};
Point(103) = {0.045961, -0.709792, 0, 1.0};
Point(104) = {0.040395, -0.710553, 0, 1.0};
Point(105) = {0.034326, -0.711773, 0, 1.0};
Point(106) = {0.027781, -0.713430, 0, 1.0};
Point(107) = {0.020795, -0.715488, 0, 1.0};
Point(108) = {0.013404, -0.717896, 0, 1.0};
Point(109) = {0.005652, -0.720589, 0, 1.0};
Point(110) = {-0.002402, -0.723489, 0, 1.0};
Point(111) = {-0.010691, -0.726504, 0, 1.0};
Point(112) = {-0.019126, -0.729535, 0, 1.0};
Point(113) = {-0.027603, -0.732479, 0, 1.0};
Point(114) = {-0.035997, -0.735236, 0, 1.0};
Point(115) = {-0.044167, -0.737711, 0, 1.0};
Point(116) = {-0.051952, -0.739828, 0, 1.0};
Point(117) = {-0.059183, -0.741529, 0, 1.0};
Point(118) = {-0.065685, -0.742786, 0, 1.0};
Point(119) = {-0.071287, -0.743597, 0, 1.0};
Point(120) = {-0.074352, -0.743890, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:45};
Spline(3) = {45:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:78};
Spline(6) = {78:105};
Spline(7) = {105:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 35 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html