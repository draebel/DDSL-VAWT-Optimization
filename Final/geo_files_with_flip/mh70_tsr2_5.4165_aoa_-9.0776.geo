SetFactory("OpenCASCADE");

Point(1) = {0.074299, 0.748528, 0, 1.0};
Point(2) = {0.072239, 0.747880, 0, 1.0};
Point(3) = {0.067281, 0.746276, 0, 1.0};
Point(4) = {0.061669, 0.744403, 0, 1.0};
Point(5) = {0.055504, 0.742302, 0, 1.0};
Point(6) = {0.048878, 0.740026, 0, 1.0};
Point(7) = {0.041888, 0.737629, 0, 1.0};
Point(8) = {0.034624, 0.735179, 0, 1.0};
Point(9) = {0.027165, 0.732746, 0, 1.0};
Point(10) = {0.019574, 0.730395, 0, 1.0};
Point(11) = {0.011910, 0.728181, 0, 1.0};
Point(12) = {0.004222, 0.726141, 0, 1.0};
Point(13) = {-0.003426, 0.724293, 0, 1.0};
Point(14) = {-0.010964, 0.722661, 0, 1.0};
Point(15) = {-0.018324, 0.721267, 0, 1.0};
Point(16) = {-0.025441, 0.720128, 0, 1.0};
Point(17) = {-0.032254, 0.719254, 0, 1.0};
Point(18) = {-0.038700, 0.718654, 0, 1.0};
Point(19) = {-0.044724, 0.718331, 0, 1.0};
Point(20) = {-0.050272, 0.718287, 0, 1.0};
Point(21) = {-0.055301, 0.718522, 0, 1.0};
Point(22) = {-0.059779, 0.719025, 0, 1.0};
Point(23) = {-0.063678, 0.719779, 0, 1.0};
Point(24) = {-0.066983, 0.720754, 0, 1.0};
Point(25) = {-0.069678, 0.721907, 0, 1.0};
Point(26) = {-0.071746, 0.723182, 0, 1.0};
Point(27) = {-0.073173, 0.724514, 0, 1.0};
Point(28) = {-0.073871, 0.725630, 0, 1.0};
Point(29) = {-0.073997, 0.726002, 0, 1.0};
Point(30) = {-0.074061, 0.726351, 0, 1.0};
Point(31) = {-0.074065, 0.726567, 0, 1.0};
Point(32) = {-0.074029, 0.726761, 0, 1.0};
Point(33) = {-0.073939, 0.726945, 0, 1.0};
Point(34) = {-0.073797, 0.727133, 0, 1.0};
Point(35) = {-0.073507, 0.727424, 0, 1.0};
Point(36) = {-0.073132, 0.727724, 0, 1.0};
Point(37) = {-0.072922, 0.727873, 0, 1.0};
Point(38) = {-0.070953, 0.728943, 0, 1.0};
Point(39) = {-0.068139, 0.730063, 0, 1.0};
Point(40) = {-0.064522, 0.731204, 0, 1.0};
Point(41) = {-0.060136, 0.732342, 0, 1.0};
Point(42) = {-0.055018, 0.733460, 0, 1.0};
Point(43) = {-0.049208, 0.734550, 0, 1.0};
Point(44) = {-0.042755, 0.735612, 0, 1.0};
Point(45) = {-0.035720, 0.736653, 0, 1.0};
Point(46) = {-0.028181, 0.737678, 0, 1.0};
Point(47) = {-0.020219, 0.738692, 0, 1.0};
Point(48) = {-0.011924, 0.739700, 0, 1.0};
Point(49) = {-0.003395, 0.740707, 0, 1.0};
Point(50) = {0.005261, 0.741718, 0, 1.0};
Point(51) = {0.013936, 0.742728, 0, 1.0};
Point(52) = {0.022518, 0.743732, 0, 1.0};
Point(53) = {0.030902, 0.744716, 0, 1.0};
Point(54) = {0.038988, 0.745670, 0, 1.0};
Point(55) = {0.046679, 0.746585, 0, 1.0};
Point(56) = {0.053880, 0.747453, 0, 1.0};
Point(57) = {0.060501, 0.748264, 0, 1.0};
Point(58) = {0.066461, 0.749010, 0, 1.0};
Point(59) = {0.071680, 0.749682, 0, 1.0};
Point(60) = {0.074063, 0.750000, 0, 1.0};
Point(61) = {-0.074299, -0.748528, 0, 1.0};
Point(62) = {-0.072239, -0.747880, 0, 1.0};
Point(63) = {-0.067281, -0.746276, 0, 1.0};
Point(64) = {-0.061669, -0.744403, 0, 1.0};
Point(65) = {-0.055504, -0.742302, 0, 1.0};
Point(66) = {-0.048878, -0.740026, 0, 1.0};
Point(67) = {-0.041888, -0.737629, 0, 1.0};
Point(68) = {-0.034624, -0.735179, 0, 1.0};
Point(69) = {-0.027165, -0.732746, 0, 1.0};
Point(70) = {-0.019574, -0.730395, 0, 1.0};
Point(71) = {-0.011910, -0.728181, 0, 1.0};
Point(72) = {-0.004222, -0.726141, 0, 1.0};
Point(73) = {0.003426, -0.724293, 0, 1.0};
Point(74) = {0.010964, -0.722661, 0, 1.0};
Point(75) = {0.018324, -0.721267, 0, 1.0};
Point(76) = {0.025441, -0.720128, 0, 1.0};
Point(77) = {0.032254, -0.719254, 0, 1.0};
Point(78) = {0.038700, -0.718654, 0, 1.0};
Point(79) = {0.044724, -0.718331, 0, 1.0};
Point(80) = {0.050272, -0.718287, 0, 1.0};
Point(81) = {0.055301, -0.718522, 0, 1.0};
Point(82) = {0.059779, -0.719025, 0, 1.0};
Point(83) = {0.063678, -0.719779, 0, 1.0};
Point(84) = {0.066983, -0.720754, 0, 1.0};
Point(85) = {0.069678, -0.721907, 0, 1.0};
Point(86) = {0.071746, -0.723182, 0, 1.0};
Point(87) = {0.073173, -0.724514, 0, 1.0};
Point(88) = {0.073871, -0.725630, 0, 1.0};
Point(89) = {0.073997, -0.726002, 0, 1.0};
Point(90) = {0.074061, -0.726351, 0, 1.0};
Point(91) = {0.074065, -0.726567, 0, 1.0};
Point(92) = {0.074029, -0.726761, 0, 1.0};
Point(93) = {0.073939, -0.726945, 0, 1.0};
Point(94) = {0.073797, -0.727133, 0, 1.0};
Point(95) = {0.073507, -0.727424, 0, 1.0};
Point(96) = {0.073132, -0.727724, 0, 1.0};
Point(97) = {0.072922, -0.727873, 0, 1.0};
Point(98) = {0.070953, -0.728943, 0, 1.0};
Point(99) = {0.068139, -0.730063, 0, 1.0};
Point(100) = {0.064522, -0.731204, 0, 1.0};
Point(101) = {0.060136, -0.732342, 0, 1.0};
Point(102) = {0.055018, -0.733460, 0, 1.0};
Point(103) = {0.049208, -0.734550, 0, 1.0};
Point(104) = {0.042755, -0.735612, 0, 1.0};
Point(105) = {0.035720, -0.736653, 0, 1.0};
Point(106) = {0.028181, -0.737678, 0, 1.0};
Point(107) = {0.020219, -0.738692, 0, 1.0};
Point(108) = {0.011924, -0.739700, 0, 1.0};
Point(109) = {0.003395, -0.740707, 0, 1.0};
Point(110) = {-0.005261, -0.741718, 0, 1.0};
Point(111) = {-0.013936, -0.742728, 0, 1.0};
Point(112) = {-0.022518, -0.743732, 0, 1.0};
Point(113) = {-0.030902, -0.744716, 0, 1.0};
Point(114) = {-0.038988, -0.745670, 0, 1.0};
Point(115) = {-0.046679, -0.746585, 0, 1.0};
Point(116) = {-0.053880, -0.747453, 0, 1.0};
Point(117) = {-0.060501, -0.748264, 0, 1.0};
Point(118) = {-0.066461, -0.749010, 0, 1.0};
Point(119) = {-0.071680, -0.749682, 0, 1.0};
Point(120) = {-0.074063, -0.750000, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:17};
Spline(2) = {17:45};
Spline(3) = {45:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:77};
Spline(6) = {77:105};
Spline(7) = {105:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html