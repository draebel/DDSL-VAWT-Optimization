SetFactory("OpenCASCADE");

Point(1) = {0.074264, 0.737507, 0, 1.0};
Point(2) = {0.071967, 0.738342, 0, 1.0};
Point(3) = {0.068456, 0.739499, 0, 1.0};
Point(4) = {0.064245, 0.740624, 0, 1.0};
Point(5) = {0.059350, 0.741760, 0, 1.0};
Point(6) = {0.053849, 0.742920, 0, 1.0};
Point(7) = {0.047826, 0.744089, 0, 1.0};
Point(8) = {0.041371, 0.745248, 0, 1.0};
Point(9) = {0.034578, 0.746366, 0, 1.0};
Point(10) = {0.027539, 0.747412, 0, 1.0};
Point(11) = {0.020348, 0.748345, 0, 1.0};
Point(12) = {0.013098, 0.749121, 0, 1.0};
Point(13) = {0.005875, 0.749694, 0, 1.0};
Point(14) = {-0.001236, 0.750000, 0, 1.0};
Point(15) = {-0.008203, 0.749965, 0, 1.0};
Point(16) = {-0.015018, 0.749571, 0, 1.0};
Point(17) = {-0.021653, 0.748824, 0, 1.0};
Point(18) = {-0.028074, 0.747743, 0, 1.0};
Point(19) = {-0.034243, 0.746351, 0, 1.0};
Point(20) = {-0.040125, 0.744678, 0, 1.0};
Point(21) = {-0.045674, 0.742769, 0, 1.0};
Point(22) = {-0.050842, 0.740666, 0, 1.0};
Point(23) = {-0.055579, 0.738402, 0, 1.0};
Point(24) = {-0.059845, 0.736019, 0, 1.0};
Point(25) = {-0.063609, 0.733553, 0, 1.0};
Point(26) = {-0.066838, 0.731049, 0, 1.0};
Point(27) = {-0.069516, 0.728549, 0, 1.0};
Point(28) = {-0.071628, 0.726102, 0, 1.0};
Point(29) = {-0.073171, 0.723762, 0, 1.0};
Point(30) = {-0.074145, 0.721588, 0, 1.0};
Point(31) = {-0.074567, 0.719651, 0, 1.0};
Point(32) = {-0.074537, 0.718423, 0, 1.0};
Point(33) = {-0.074442, 0.717998, 0, 1.0};
Point(34) = {-0.074354, 0.717743, 0, 1.0};
Point(35) = {-0.074244, 0.717512, 0, 1.0};
Point(36) = {-0.074183, 0.717407, 0, 1.0};
Point(37) = {-0.074114, 0.717312, 0, 1.0};
Point(38) = {-0.074038, 0.717226, 0, 1.0};
Point(39) = {-0.073950, 0.717151, 0, 1.0};
Point(40) = {-0.073849, 0.717082, 0, 1.0};
Point(41) = {-0.073737, 0.717015, 0, 1.0};
Point(42) = {-0.073481, 0.716895, 0, 1.0};
Point(43) = {-0.073189, 0.716791, 0, 1.0};
Point(44) = {-0.072686, 0.716660, 0, 1.0};
Point(45) = {-0.072209, 0.716575, 0, 1.0};
Point(46) = {-0.069823, 0.716500, 0, 1.0};
Point(47) = {-0.066664, 0.716857, 0, 1.0};
Point(48) = {-0.062729, 0.717679, 0, 1.0};
Point(49) = {-0.057991, 0.718980, 0, 1.0};
Point(50) = {-0.052405, 0.720753, 0, 1.0};
Point(51) = {-0.045886, 0.722919, 0, 1.0};
Point(52) = {-0.038428, 0.725294, 0, 1.0};
Point(53) = {-0.030121, 0.727703, 0, 1.0};
Point(54) = {-0.021086, 0.729991, 0, 1.0};
Point(55) = {-0.011522, 0.731986, 0, 1.0};
Point(56) = {-0.001712, 0.733615, 0, 1.0};
Point(57) = {0.008119, 0.734921, 0, 1.0};
Point(58) = {0.017821, 0.735933, 0, 1.0};
Point(59) = {0.027254, 0.736653, 0, 1.0};
Point(60) = {0.036258, 0.737074, 0, 1.0};
Point(61) = {0.044661, 0.737232, 0, 1.0};
Point(62) = {0.052332, 0.737192, 0, 1.0};
Point(63) = {0.059176, 0.737013, 0, 1.0};
Point(64) = {0.065111, 0.736741, 0, 1.0};
Point(65) = {0.070077, 0.736426, 0, 1.0};
Point(66) = {0.074026, 0.736101, 0, 1.0};
Point(67) = {0.074425, 0.736063, 0, 1.0};
Point(68) = {-0.074264, -0.737507, 0, 1.0};
Point(69) = {-0.071967, -0.738342, 0, 1.0};
Point(70) = {-0.068456, -0.739499, 0, 1.0};
Point(71) = {-0.064245, -0.740624, 0, 1.0};
Point(72) = {-0.059350, -0.741760, 0, 1.0};
Point(73) = {-0.053849, -0.742920, 0, 1.0};
Point(74) = {-0.047826, -0.744089, 0, 1.0};
Point(75) = {-0.041371, -0.745248, 0, 1.0};
Point(76) = {-0.034578, -0.746366, 0, 1.0};
Point(77) = {-0.027539, -0.747412, 0, 1.0};
Point(78) = {-0.020348, -0.748345, 0, 1.0};
Point(79) = {-0.013098, -0.749121, 0, 1.0};
Point(80) = {-0.005875, -0.749694, 0, 1.0};
Point(81) = {0.001236, -0.750000, 0, 1.0};
Point(82) = {0.008203, -0.749965, 0, 1.0};
Point(83) = {0.015018, -0.749571, 0, 1.0};
Point(84) = {0.021653, -0.748824, 0, 1.0};
Point(85) = {0.028074, -0.747743, 0, 1.0};
Point(86) = {0.034243, -0.746351, 0, 1.0};
Point(87) = {0.040125, -0.744678, 0, 1.0};
Point(88) = {0.045674, -0.742769, 0, 1.0};
Point(89) = {0.050842, -0.740666, 0, 1.0};
Point(90) = {0.055579, -0.738402, 0, 1.0};
Point(91) = {0.059845, -0.736019, 0, 1.0};
Point(92) = {0.063609, -0.733553, 0, 1.0};
Point(93) = {0.066838, -0.731049, 0, 1.0};
Point(94) = {0.069516, -0.728549, 0, 1.0};
Point(95) = {0.071628, -0.726102, 0, 1.0};
Point(96) = {0.073171, -0.723762, 0, 1.0};
Point(97) = {0.074145, -0.721588, 0, 1.0};
Point(98) = {0.074567, -0.719651, 0, 1.0};
Point(99) = {0.074537, -0.718423, 0, 1.0};
Point(100) = {0.074442, -0.717998, 0, 1.0};
Point(101) = {0.074354, -0.717743, 0, 1.0};
Point(102) = {0.074244, -0.717512, 0, 1.0};
Point(103) = {0.074183, -0.717407, 0, 1.0};
Point(104) = {0.074114, -0.717312, 0, 1.0};
Point(105) = {0.074038, -0.717226, 0, 1.0};
Point(106) = {0.073950, -0.717151, 0, 1.0};
Point(107) = {0.073849, -0.717082, 0, 1.0};
Point(108) = {0.073737, -0.717015, 0, 1.0};
Point(109) = {0.073481, -0.716895, 0, 1.0};
Point(110) = {0.073189, -0.716791, 0, 1.0};
Point(111) = {0.072686, -0.716660, 0, 1.0};
Point(112) = {0.072209, -0.716575, 0, 1.0};
Point(113) = {0.069823, -0.716500, 0, 1.0};
Point(114) = {0.066664, -0.716857, 0, 1.0};
Point(115) = {0.062729, -0.717679, 0, 1.0};
Point(116) = {0.057991, -0.718980, 0, 1.0};
Point(117) = {0.052405, -0.720753, 0, 1.0};
Point(118) = {0.045886, -0.722919, 0, 1.0};
Point(119) = {0.038428, -0.725294, 0, 1.0};
Point(120) = {0.030121, -0.727703, 0, 1.0};
Point(121) = {0.021086, -0.729991, 0, 1.0};
Point(122) = {0.011522, -0.731986, 0, 1.0};
Point(123) = {0.001712, -0.733615, 0, 1.0};
Point(124) = {-0.008119, -0.734921, 0, 1.0};
Point(125) = {-0.017821, -0.735933, 0, 1.0};
Point(126) = {-0.027254, -0.736653, 0, 1.0};
Point(127) = {-0.036258, -0.737074, 0, 1.0};
Point(128) = {-0.044661, -0.737232, 0, 1.0};
Point(129) = {-0.052332, -0.737192, 0, 1.0};
Point(130) = {-0.059176, -0.737013, 0, 1.0};
Point(131) = {-0.065111, -0.736741, 0, 1.0};
Point(132) = {-0.070077, -0.736426, 0, 1.0};
Point(133) = {-0.074026, -0.736101, 0, 1.0};
Point(134) = {-0.074425, -0.736063, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:19};
Spline(2) = {19:52};
Spline(3) = {52:67};
Spline(4) = {67,1};

// Lines: second blade (splines 5-8)
Spline(5) = {68:86};
Spline(6) = {86:119};
Spline(7) = {119:134};
Spline(8) = {134,68};

// Outer domain (points 20001-4 and lines)
Point(135) = {-13.50000000, -15.00000000, 0, 1.0};
Point(136) = {-13.50000000, 15.00000000, 0, 1.0};
Point(137) = {13.50000000, 15.00000000, 0, 1.0};
Point(138) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {135, 136};
Line(12) = {136, 137};
Line(13) = {137, 138};
Line(14) = {135, 138};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 34 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html