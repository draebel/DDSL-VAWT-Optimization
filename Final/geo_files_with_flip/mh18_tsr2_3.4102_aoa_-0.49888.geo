SetFactory("OpenCASCADE");

Point(1) = {0.075001, 0.745955, 0, 1.0};
Point(2) = {0.074098, 0.745845, 0, 1.0};
Point(3) = {0.069435, 0.745144, 0, 1.0};
Point(4) = {0.064052, 0.744191, 0, 1.0};
Point(5) = {0.058066, 0.743029, 0, 1.0};
Point(6) = {0.051587, 0.741709, 0, 1.0};
Point(7) = {0.044717, 0.740290, 0, 1.0};
Point(8) = {0.037547, 0.738831, 0, 1.0};
Point(9) = {0.030166, 0.737391, 0, 1.0};
Point(10) = {0.022656, 0.736026, 0, 1.0};
Point(11) = {0.015107, 0.734800, 0, 1.0};
Point(12) = {0.007578, 0.733806, 0, 1.0};
Point(13) = {0.000058, 0.733099, 0, 1.0};
Point(14) = {-0.007443, 0.732651, 0, 1.0};
Point(15) = {-0.014856, 0.732421, 0, 1.0};
Point(16) = {-0.022097, 0.732401, 0, 1.0};
Point(17) = {-0.029089, 0.732586, 0, 1.0};
Point(18) = {-0.035763, 0.732979, 0, 1.0};
Point(19) = {-0.042061, 0.733575, 0, 1.0};
Point(20) = {-0.047931, 0.734364, 0, 1.0};
Point(21) = {-0.053329, 0.735329, 0, 1.0};
Point(22) = {-0.058209, 0.736442, 0, 1.0};
Point(23) = {-0.062530, 0.737674, 0, 1.0};
Point(24) = {-0.066255, 0.738997, 0, 1.0};
Point(25) = {-0.069357, 0.740372, 0, 1.0};
Point(26) = {-0.071809, 0.741753, 0, 1.0};
Point(27) = {-0.073589, 0.743082, 0, 1.0};
Point(28) = {-0.074665, 0.744286, 0, 1.0};
Point(29) = {-0.074849, 0.744615, 0, 1.0};
Point(30) = {-0.074963, 0.744911, 0, 1.0};
Point(31) = {-0.074997, 0.745091, 0, 1.0};
Point(32) = {-0.074989, 0.745248, 0, 1.0};
Point(33) = {-0.074925, 0.745395, 0, 1.0};
Point(34) = {-0.074811, 0.745547, 0, 1.0};
Point(35) = {-0.074565, 0.745784, 0, 1.0};
Point(36) = {-0.074240, 0.746028, 0, 1.0};
Point(37) = {-0.072627, 0.746828, 0, 1.0};
Point(38) = {-0.070200, 0.747572, 0, 1.0};
Point(39) = {-0.066976, 0.748217, 0, 1.0};
Point(40) = {-0.062972, 0.748753, 0, 1.0};
Point(41) = {-0.058215, 0.749178, 0, 1.0};
Point(42) = {-0.052743, 0.749497, 0, 1.0};
Point(43) = {-0.046606, 0.749723, 0, 1.0};
Point(44) = {-0.039868, 0.749872, 0, 1.0};
Point(45) = {-0.032606, 0.749960, 0, 1.0};
Point(46) = {-0.024909, 0.750000, 0, 1.0};
Point(47) = {-0.016872, 0.749999, 0, 1.0};
Point(48) = {-0.008593, 0.749958, 0, 1.0};
Point(49) = {-0.000167, 0.749881, 0, 1.0};
Point(50) = {0.008308, 0.749770, 0, 1.0};
Point(51) = {0.016734, 0.749629, 0, 1.0};
Point(52) = {0.025013, 0.749461, 0, 1.0};
Point(53) = {0.033050, 0.749270, 0, 1.0};
Point(54) = {0.040751, 0.749058, 0, 1.0};
Point(55) = {0.048026, 0.748828, 0, 1.0};
Point(56) = {0.054791, 0.748582, 0, 1.0};
Point(57) = {0.060966, 0.748322, 0, 1.0};
Point(58) = {0.066477, 0.748050, 0, 1.0};
Point(59) = {0.071259, 0.747765, 0, 1.0};
Point(60) = {0.074988, 0.747481, 0, 1.0};
Point(61) = {-0.075001, -0.745955, 0, 1.0};
Point(62) = {-0.074098, -0.745845, 0, 1.0};
Point(63) = {-0.069435, -0.745144, 0, 1.0};
Point(64) = {-0.064052, -0.744191, 0, 1.0};
Point(65) = {-0.058066, -0.743029, 0, 1.0};
Point(66) = {-0.051587, -0.741709, 0, 1.0};
Point(67) = {-0.044717, -0.740290, 0, 1.0};
Point(68) = {-0.037547, -0.738831, 0, 1.0};
Point(69) = {-0.030166, -0.737391, 0, 1.0};
Point(70) = {-0.022656, -0.736026, 0, 1.0};
Point(71) = {-0.015107, -0.734800, 0, 1.0};
Point(72) = {-0.007578, -0.733806, 0, 1.0};
Point(73) = {-0.000058, -0.733099, 0, 1.0};
Point(74) = {0.007443, -0.732651, 0, 1.0};
Point(75) = {0.014856, -0.732421, 0, 1.0};
Point(76) = {0.022097, -0.732401, 0, 1.0};
Point(77) = {0.029089, -0.732586, 0, 1.0};
Point(78) = {0.035763, -0.732979, 0, 1.0};
Point(79) = {0.042061, -0.733575, 0, 1.0};
Point(80) = {0.047931, -0.734364, 0, 1.0};
Point(81) = {0.053329, -0.735329, 0, 1.0};
Point(82) = {0.058209, -0.736442, 0, 1.0};
Point(83) = {0.062530, -0.737674, 0, 1.0};
Point(84) = {0.066255, -0.738997, 0, 1.0};
Point(85) = {0.069357, -0.740372, 0, 1.0};
Point(86) = {0.071809, -0.741753, 0, 1.0};
Point(87) = {0.073589, -0.743082, 0, 1.0};
Point(88) = {0.074665, -0.744286, 0, 1.0};
Point(89) = {0.074849, -0.744615, 0, 1.0};
Point(90) = {0.074963, -0.744911, 0, 1.0};
Point(91) = {0.074997, -0.745091, 0, 1.0};
Point(92) = {0.074989, -0.745248, 0, 1.0};
Point(93) = {0.074925, -0.745395, 0, 1.0};
Point(94) = {0.074811, -0.745547, 0, 1.0};
Point(95) = {0.074565, -0.745784, 0, 1.0};
Point(96) = {0.074240, -0.746028, 0, 1.0};
Point(97) = {0.072627, -0.746828, 0, 1.0};
Point(98) = {0.070200, -0.747572, 0, 1.0};
Point(99) = {0.066976, -0.748217, 0, 1.0};
Point(100) = {0.062972, -0.748753, 0, 1.0};
Point(101) = {0.058215, -0.749178, 0, 1.0};
Point(102) = {0.052743, -0.749497, 0, 1.0};
Point(103) = {0.046606, -0.749723, 0, 1.0};
Point(104) = {0.039868, -0.749872, 0, 1.0};
Point(105) = {0.032606, -0.749960, 0, 1.0};
Point(106) = {0.024909, -0.750000, 0, 1.0};
Point(107) = {0.016872, -0.749999, 0, 1.0};
Point(108) = {0.008593, -0.749958, 0, 1.0};
Point(109) = {0.000167, -0.749881, 0, 1.0};
Point(110) = {-0.008308, -0.749770, 0, 1.0};
Point(111) = {-0.016734, -0.749629, 0, 1.0};
Point(112) = {-0.025013, -0.749461, 0, 1.0};
Point(113) = {-0.033050, -0.749270, 0, 1.0};
Point(114) = {-0.040751, -0.749058, 0, 1.0};
Point(115) = {-0.048026, -0.748828, 0, 1.0};
Point(116) = {-0.054791, -0.748582, 0, 1.0};
Point(117) = {-0.060966, -0.748322, 0, 1.0};
Point(118) = {-0.066477, -0.748050, 0, 1.0};
Point(119) = {-0.071259, -0.747765, 0, 1.0};
Point(120) = {-0.074988, -0.747481, 0, 1.0};

// Lines: first blade (splines 1-4)
Spline(1) = {1:18};
Spline(2) = {18:45};
Spline(3) = {45:60};
Spline(4) = {60,1};

// Lines: second blade (splines 5-8)
Spline(5) = {61:78};
Spline(6) = {78:105};
Spline(7) = {105:120};
Spline(8) = {120,61};

// Outer domain (points 20001-4 and lines)
Point(121) = {-13.50000000, -15.00000000, 0, 1.0};
Point(122) = {-13.50000000, 15.00000000, 0, 1.0};
Point(123) = {13.50000000, 15.00000000, 0, 1.0};
Point(124) = {13.50000000, -15.00000000, 0, 1.0};
Line(11) = {121, 122};
Line(12) = {122, 123};
Line(13) = {123, 124};
Line(14) = {121, 124};

// Interface (between moving and stationary domain) (circles)
Circle(9) = {0, 0, 0, 0.80000000, 0, 2*Pi};
Circle(10) = {0, 0, 0, 0.80000000, 0, 2*Pi};

// Loops collect Lines/Splines/etc (blade1, blade2, domain, first circle)
Line Loop(1) = {1:4};
Line Loop(2) = {5:8};
Line Loop(3) = {11,12,13,-14};
Line Loop(4) = {9};

// BooleanDifference cuts out the circle/interface from the domain
Plane Surface(1) = {3};
Plane Surface(2) = {4};
BooleanDifference{ Surface{1}; Delete;}{ Surface{2}; Delete;}

// This one cuts out the blades from the inner circle/interface
Line Loop(6) = {10};
Plane Surface(5) = {6};
Plane Surface(6) = {1};
Plane Surface(7) = {2};
BooleanDifference{ Surface{5}; Delete;}{ Surface{6,7}; Delete;}

// extrude to 3rd dimension
Extrude {0, 0, 1} {Surface{1}; Surface{5}; Layers{1}; Recombine;}

// Physical Surfaces are the named boundaries (patches)
Physical Surface("Interface11") = {12};
Physical Surface("Interface12") = {10};

// sides of domain
Physical Surface("InletP") = {6};
Physical Surface("OutletP") = {9};

// top and bottom of domain
Physical Surface("Wall1s") = {7};
Physical Surface("Wall2s") = {8};

// Check FrontandBackF by ensuring there is nothing in the 3rd dimension
Physical Surface("FrontandBackF") = {1,11,5,21};
Physical Surface("BladeF") = {13:20};
Physical Volume("Turbine") = {2};
Physical Volume("Farfield") = {1};

// settings for airfoil boundary layer
Field[1] = BoundaryLayer;
Field[1].EdgesList = {1:8};
Field[1].hwall_n = 1e-3;
Field[1].thickness = 1.5e-2;
Field[1].ratio = 1.05;
Field[1].Quads = 1;
BoundaryLayer Field = 1;

// control points for mesh (blade and interface)
// floor((arc length / 1.5mm)/ 6) -> Transfinite Line
Transfinite Line {1,2,3,5,6,7} = 33 Using Progression 1;
Transfinite Line {4,8} = 2 Using Progression 1;
Transfinite Line {9, 15} = 800 Using Progression 1;

// For more information on gmsh syntax, visit http://gmsh.info/doc/texinfo/gmsh.html